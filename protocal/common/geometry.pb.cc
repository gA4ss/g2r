// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common/geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

namespace {

const ::google::protobuf::Descriptor* PointENU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointENU_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointLLH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointLLH_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaternion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fgeometry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2fgeometry_2eproto() {
  protobuf_AddDesc_common_2fgeometry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/geometry.proto");
  GOOGLE_CHECK(file != NULL);
  PointENU_descriptor_ = file->message_type(0);
  static const int PointENU_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointENU, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointENU, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointENU, z_),
  };
  PointENU_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointENU_descriptor_,
      PointENU::default_instance_,
      PointENU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointENU, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointENU),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointENU, _internal_metadata_),
      -1);
  PointLLH_descriptor_ = file->message_type(1);
  static const int PointLLH_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLH, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLH, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLH, height_),
  };
  PointLLH_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointLLH_descriptor_,
      PointLLH::default_instance_,
      PointLLH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLH, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointLLH),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLH, _internal_metadata_),
      -1);
  Point2D_descriptor_ = file->message_type(2);
  static const int Point2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, y_),
  };
  Point2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point2D_descriptor_,
      Point2D::default_instance_,
      Point2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _internal_metadata_),
      -1);
  Point3D_descriptor_ = file->message_type(3);
  static const int Point3D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, z_),
  };
  Point3D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point3D_descriptor_,
      Point3D::default_instance_,
      Point3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point3D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3D, _internal_metadata_),
      -1);
  Quaternion_descriptor_ = file->message_type(4);
  static const int Quaternion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, qx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, qy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, qz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, qw_),
  };
  Quaternion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quaternion_descriptor_,
      Quaternion::default_instance_,
      Quaternion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _has_bits_[0]),
      -1,
      -1,
      sizeof(Quaternion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _internal_metadata_),
      -1);
  Polygon_descriptor_ = file->message_type(5);
  static const int Polygon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, point_),
  };
  Polygon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_[0]),
      -1,
      -1,
      sizeof(Polygon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fgeometry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointENU_descriptor_, &PointENU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointLLH_descriptor_, &PointLLH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point2D_descriptor_, &Point2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point3D_descriptor_, &Point3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quaternion_descriptor_, &Quaternion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Polygon_descriptor_, &Polygon::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fgeometry_2eproto() {
  delete PointENU::default_instance_;
  delete PointENU_reflection_;
  delete PointLLH::default_instance_;
  delete PointLLH_reflection_;
  delete Point2D::default_instance_;
  delete Point2D_reflection_;
  delete Point3D::default_instance_;
  delete Point3D_reflection_;
  delete Quaternion::default_instance_;
  delete Quaternion_reflection_;
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
}

void protobuf_AddDesc_common_2fgeometry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2fgeometry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025common/geometry.proto\022\rapollo.common\"8"
    "\n\010PointENU\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002 \001(\001:\003n"
    "an\022\014\n\001z\030\003 \001(\001:\0010\"A\n\010PointLLH\022\020\n\003lon\030\001 \001("
    "\001:\003nan\022\020\n\003lat\030\002 \001(\001:\003nan\022\021\n\006height\030\003 \001(\001"
    ":\0010\")\n\007Point2D\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002 \001("
    "\001:\003nan\"9\n\007Point3D\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002"
    " \001(\001:\003nan\022\016\n\001z\030\003 \001(\001:\003nan\"P\n\nQuaternion\022"
    "\017\n\002qx\030\001 \001(\001:\003nan\022\017\n\002qy\030\002 \001(\001:\003nan\022\017\n\002qz\030"
    "\003 \001(\001:\003nan\022\017\n\002qw\030\004 \001(\001:\003nan\"0\n\007Polygon\022%"
    "\n\005point\030\001 \003(\0132\026.apollo.common.Point3D", 397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/geometry.proto", &protobuf_RegisterTypes);
  PointENU::default_instance_ = new PointENU();
  PointLLH::default_instance_ = new PointLLH();
  Point2D::default_instance_ = new Point2D();
  Point3D::default_instance_ = new Point3D();
  Quaternion::default_instance_ = new Quaternion();
  Polygon::default_instance_ = new Polygon();
  PointENU::default_instance_->InitAsDefaultInstance();
  PointLLH::default_instance_->InitAsDefaultInstance();
  Point2D::default_instance_->InitAsDefaultInstance();
  Point3D::default_instance_->InitAsDefaultInstance();
  Quaternion::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fgeometry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fgeometry_2eproto {
  StaticDescriptorInitializer_common_2fgeometry_2eproto() {
    protobuf_AddDesc_common_2fgeometry_2eproto();
  }
} static_descriptor_initializer_common_2fgeometry_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointENU::kXFieldNumber;
const int PointENU::kYFieldNumber;
const int PointENU::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointENU::PointENU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.PointENU)
}

void PointENU::InitAsDefaultInstance() {
}

PointENU::PointENU(const PointENU& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.PointENU)
}

void PointENU::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointENU::~PointENU() {
  // @@protoc_insertion_point(destructor:apollo.common.PointENU)
  SharedDtor();
}

void PointENU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointENU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointENU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointENU_descriptor_;
}

const PointENU& PointENU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fgeometry_2eproto();
  return *default_instance_;
}

PointENU* PointENU::default_instance_ = NULL;

PointENU* PointENU::New(::google::protobuf::Arena* arena) const {
  PointENU* n = new PointENU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointENU::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.PointENU)
  if (_has_bits_[0 / 32] & 7u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointENU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.PointENU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.PointENU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.PointENU)
  return false;
#undef DO_
}

void PointENU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.PointENU)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.PointENU)
}

::google::protobuf::uint8* PointENU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.PointENU)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.PointENU)
  return target;
}

int PointENU::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.PointENU)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointENU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.PointENU)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointENU* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointENU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.PointENU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.PointENU)
    MergeFrom(*source);
  }
}

void PointENU::MergeFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.PointENU)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointENU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.PointENU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointENU::CopyFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.PointENU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointENU::IsInitialized() const {

  return true;
}

void PointENU::Swap(PointENU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointENU::InternalSwap(PointENU* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointENU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointENU_descriptor_;
  metadata.reflection = PointENU_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointENU

// optional double x = 1 [default = nan];
bool PointENU::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointENU::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PointENU::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointENU::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
 double PointENU::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointENU.x)
  return x_;
}
 void PointENU::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PointENU.x)
}

// optional double y = 2 [default = nan];
bool PointENU::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointENU::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PointENU::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointENU::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
 double PointENU::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointENU.y)
  return y_;
}
 void PointENU::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PointENU.y)
}

// optional double z = 3 [default = 0];
bool PointENU::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointENU::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void PointENU::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointENU::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double PointENU::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointENU.z)
  return z_;
}
 void PointENU::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PointENU.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointLLH::kLonFieldNumber;
const int PointLLH::kLatFieldNumber;
const int PointLLH::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointLLH::PointLLH()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.PointLLH)
}

void PointLLH::InitAsDefaultInstance() {
}

PointLLH::PointLLH(const PointLLH& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.PointLLH)
}

void PointLLH::SharedCtor() {
  _cached_size_ = 0;
  lon_ = ::google::protobuf::internal::NaN();
  lat_ = ::google::protobuf::internal::NaN();
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointLLH::~PointLLH() {
  // @@protoc_insertion_point(destructor:apollo.common.PointLLH)
  SharedDtor();
}

void PointLLH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointLLH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointLLH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointLLH_descriptor_;
}

const PointLLH& PointLLH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fgeometry_2eproto();
  return *default_instance_;
}

PointLLH* PointLLH::default_instance_ = NULL;

PointLLH* PointLLH::New(::google::protobuf::Arena* arena) const {
  PointLLH* n = new PointLLH;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointLLH::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.PointLLH)
  if (_has_bits_[0 / 32] & 7u) {
    lon_ = ::google::protobuf::internal::NaN();
    lat_ = ::google::protobuf::internal::NaN();
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointLLH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.PointLLH)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lon = 1 [default = nan];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2 [default = nan];
      case 2: {
        if (tag == 17) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_height;
        break;
      }

      // optional double height = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.PointLLH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.PointLLH)
  return false;
#undef DO_
}

void PointLLH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.PointLLH)
  // optional double lon = 1 [default = nan];
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lon(), output);
  }

  // optional double lat = 2 [default = nan];
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.PointLLH)
}

::google::protobuf::uint8* PointLLH::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.PointLLH)
  // optional double lon = 1 [default = nan];
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lon(), target);
  }

  // optional double lat = 2 [default = nan];
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.PointLLH)
  return target;
}

int PointLLH::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.PointLLH)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double lon = 1 [default = nan];
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double lat = 2 [default = nan];
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointLLH::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.PointLLH)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointLLH* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointLLH>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.PointLLH)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.PointLLH)
    MergeFrom(*source);
  }
}

void PointLLH::MergeFrom(const PointLLH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.PointLLH)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointLLH::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.PointLLH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointLLH::CopyFrom(const PointLLH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.PointLLH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointLLH::IsInitialized() const {

  return true;
}

void PointLLH::Swap(PointLLH* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointLLH::InternalSwap(PointLLH* other) {
  std::swap(lon_, other->lon_);
  std::swap(lat_, other->lat_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointLLH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointLLH_descriptor_;
  metadata.reflection = PointLLH_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointLLH

// optional double lon = 1 [default = nan];
bool PointLLH::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointLLH::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
void PointLLH::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointLLH::clear_lon() {
  lon_ = ::google::protobuf::internal::NaN();
  clear_has_lon();
}
 double PointLLH::lon() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointLLH.lon)
  return lon_;
}
 void PointLLH::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PointLLH.lon)
}

// optional double lat = 2 [default = nan];
bool PointLLH::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointLLH::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
void PointLLH::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointLLH::clear_lat() {
  lat_ = ::google::protobuf::internal::NaN();
  clear_has_lat();
}
 double PointLLH::lat() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointLLH.lat)
  return lat_;
}
 void PointLLH::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PointLLH.lat)
}

// optional double height = 3 [default = 0];
bool PointLLH::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointLLH::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void PointLLH::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointLLH::clear_height() {
  height_ = 0;
  clear_has_height();
}
 double PointLLH::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointLLH.height)
  return height_;
}
 void PointLLH::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PointLLH.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2D::kXFieldNumber;
const int Point2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2D::Point2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Point2D)
}

void Point2D::InitAsDefaultInstance() {
}

Point2D::Point2D(const Point2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Point2D)
}

void Point2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:apollo.common.Point2D)
  SharedDtor();
}

void Point2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2D_descriptor_;
}

const Point2D& Point2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fgeometry_2eproto();
  return *default_instance_;
}

Point2D* Point2D::default_instance_ = NULL;

Point2D* Point2D::New(::google::protobuf::Arena* arena) const {
  Point2D* n = new Point2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Point2D)
  if (_has_bits_[0 / 32] & 3u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Point2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Point2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Point2D)
  return false;
#undef DO_
}

void Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Point2D)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Point2D)
}

::google::protobuf::uint8* Point2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Point2D)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Point2D)
  return target;
}

int Point2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Point2D)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Point2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Point2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Point2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {

  return true;
}

void Point2D::Swap(Point2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2D::InternalSwap(Point2D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2D_descriptor_;
  metadata.reflection = Point2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2D

// optional double x = 1 [default = nan];
bool Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point2D::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
 double Point2D::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point2D.x)
  return x_;
}
 void Point2D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Point2D.x)
}

// optional double y = 2 [default = nan];
bool Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point2D::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
 double Point2D::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point2D.y)
  return y_;
}
 void Point2D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Point2D.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3D::kXFieldNumber;
const int Point3D::kYFieldNumber;
const int Point3D::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3D::Point3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Point3D)
}

void Point3D::InitAsDefaultInstance() {
}

Point3D::Point3D(const Point3D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Point3D)
}

void Point3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  z_ = ::google::protobuf::internal::NaN();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:apollo.common.Point3D)
  SharedDtor();
}

void Point3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3D_descriptor_;
}

const Point3D& Point3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fgeometry_2eproto();
  return *default_instance_;
}

Point3D* Point3D::default_instance_ = NULL;

Point3D* Point3D::New(::google::protobuf::Arena* arena) const {
  Point3D* n = new Point3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Point3D)
  if (_has_bits_[0 / 32] & 7u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
    z_ = ::google::protobuf::internal::NaN();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Point3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3 [default = nan];
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Point3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Point3D)
  return false;
#undef DO_
}

void Point3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Point3D)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = nan];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Point3D)
}

::google::protobuf::uint8* Point3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Point3D)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = nan];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Point3D)
  return target;
}

int Point3D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Point3D)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = nan];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Point3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point3D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Point3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Point3D)
    MergeFrom(*source);
  }
}

void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Point3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {

  return true;
}

void Point3D::Swap(Point3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3D::InternalSwap(Point3D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3D_descriptor_;
  metadata.reflection = Point3D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point3D

// optional double x = 1 [default = nan];
bool Point3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point3D::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
 double Point3D::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point3D.x)
  return x_;
}
 void Point3D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Point3D.x)
}

// optional double y = 2 [default = nan];
bool Point3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point3D::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
 double Point3D::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point3D.y)
  return y_;
}
 void Point3D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Point3D.y)
}

// optional double z = 3 [default = nan];
bool Point3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point3D::clear_z() {
  z_ = ::google::protobuf::internal::NaN();
  clear_has_z();
}
 double Point3D::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point3D.z)
  return z_;
}
 void Point3D::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Point3D.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kQxFieldNumber;
const int Quaternion::kQyFieldNumber;
const int Quaternion::kQzFieldNumber;
const int Quaternion::kQwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Quaternion)
}

void Quaternion::InitAsDefaultInstance() {
}

Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Quaternion)
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  qx_ = ::google::protobuf::internal::NaN();
  qy_ = ::google::protobuf::internal::NaN();
  qz_ = ::google::protobuf::internal::NaN();
  qw_ = ::google::protobuf::internal::NaN();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:apollo.common.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternion_descriptor_;
}

const Quaternion& Quaternion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fgeometry_2eproto();
  return *default_instance_;
}

Quaternion* Quaternion::default_instance_ = NULL;

Quaternion* Quaternion::New(::google::protobuf::Arena* arena) const {
  Quaternion* n = new Quaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Quaternion)
  if (_has_bits_[0 / 32] & 15u) {
    qx_ = ::google::protobuf::internal::NaN();
    qy_ = ::google::protobuf::internal::NaN();
    qz_ = ::google::protobuf::internal::NaN();
    qw_ = ::google::protobuf::internal::NaN();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double qx = 1 [default = nan];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qx_)));
          set_has_qx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_qy;
        break;
      }

      // optional double qy = 2 [default = nan];
      case 2: {
        if (tag == 17) {
         parse_qy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qy_)));
          set_has_qy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_qz;
        break;
      }

      // optional double qz = 3 [default = nan];
      case 3: {
        if (tag == 25) {
         parse_qz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qz_)));
          set_has_qz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_qw;
        break;
      }

      // optional double qw = 4 [default = nan];
      case 4: {
        if (tag == 33) {
         parse_qw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qw_)));
          set_has_qw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Quaternion)
  // optional double qx = 1 [default = nan];
  if (has_qx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->qx(), output);
  }

  // optional double qy = 2 [default = nan];
  if (has_qy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qy(), output);
  }

  // optional double qz = 3 [default = nan];
  if (has_qz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->qz(), output);
  }

  // optional double qw = 4 [default = nan];
  if (has_qw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->qw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Quaternion)
  // optional double qx = 1 [default = nan];
  if (has_qx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->qx(), target);
  }

  // optional double qy = 2 [default = nan];
  if (has_qy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->qy(), target);
  }

  // optional double qz = 3 [default = nan];
  if (has_qz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->qz(), target);
  }

  // optional double qw = 4 [default = nan];
  if (has_qw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->qw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Quaternion)
  return target;
}

int Quaternion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Quaternion)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double qx = 1 [default = nan];
    if (has_qx()) {
      total_size += 1 + 8;
    }

    // optional double qy = 2 [default = nan];
    if (has_qy()) {
      total_size += 1 + 8;
    }

    // optional double qz = 3 [default = nan];
    if (has_qz()) {
      total_size += 1 + 8;
    }

    // optional double qw = 4 [default = nan];
    if (has_qw()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Quaternion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Quaternion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Quaternion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qx()) {
      set_qx(from.qx());
    }
    if (from.has_qy()) {
      set_qy(from.qy());
    }
    if (from.has_qz()) {
      set_qz(from.qz());
    }
    if (from.has_qw()) {
      set_qw(from.qw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {

  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  std::swap(qx_, other->qx_);
  std::swap(qy_, other->qy_);
  std::swap(qz_, other->qz_);
  std::swap(qw_, other->qw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternion_descriptor_;
  metadata.reflection = Quaternion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternion

// optional double qx = 1 [default = nan];
bool Quaternion::has_qx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Quaternion::set_has_qx() {
  _has_bits_[0] |= 0x00000001u;
}
void Quaternion::clear_has_qx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Quaternion::clear_qx() {
  qx_ = ::google::protobuf::internal::NaN();
  clear_has_qx();
}
 double Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qx)
  return qx_;
}
 void Quaternion::set_qx(double value) {
  set_has_qx();
  qx_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qx)
}

// optional double qy = 2 [default = nan];
bool Quaternion::has_qy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Quaternion::set_has_qy() {
  _has_bits_[0] |= 0x00000002u;
}
void Quaternion::clear_has_qy() {
  _has_bits_[0] &= ~0x00000002u;
}
void Quaternion::clear_qy() {
  qy_ = ::google::protobuf::internal::NaN();
  clear_has_qy();
}
 double Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qy)
  return qy_;
}
 void Quaternion::set_qy(double value) {
  set_has_qy();
  qy_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qy)
}

// optional double qz = 3 [default = nan];
bool Quaternion::has_qz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Quaternion::set_has_qz() {
  _has_bits_[0] |= 0x00000004u;
}
void Quaternion::clear_has_qz() {
  _has_bits_[0] &= ~0x00000004u;
}
void Quaternion::clear_qz() {
  qz_ = ::google::protobuf::internal::NaN();
  clear_has_qz();
}
 double Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qz)
  return qz_;
}
 void Quaternion::set_qz(double value) {
  set_has_qz();
  qz_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qz)
}

// optional double qw = 4 [default = nan];
bool Quaternion::has_qw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Quaternion::set_has_qw() {
  _has_bits_[0] |= 0x00000008u;
}
void Quaternion::clear_has_qw() {
  _has_bits_[0] &= ~0x00000008u;
}
void Quaternion::clear_qw() {
  qw_ = ::google::protobuf::internal::NaN();
  clear_has_qw();
}
 double Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qw)
  return qw_;
}
 void Quaternion::set_qw(double value) {
  set_has_qw();
  qw_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Polygon)
}

void Polygon::InitAsDefaultInstance() {
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Polygon)
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:apollo.common.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fgeometry_2eproto();
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Polygon)
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Point3D point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Polygon)
  // repeated .apollo.common.Point3D point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Polygon)
  // repeated .apollo.common.Point3D point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Polygon)
  return target;
}

int Polygon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Polygon)
  int total_size = 0;

  // repeated .apollo.common.Point3D point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Polygon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// repeated .apollo.common.Point3D point = 1;
int Polygon::point_size() const {
  return point_.size();
}
void Polygon::clear_point() {
  point_.Clear();
}
const ::apollo::common::Point3D& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Polygon.point)
  return point_.Get(index);
}
::apollo::common::Point3D* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Polygon.point)
  return point_.Mutable(index);
}
::apollo::common::Point3D* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:apollo.common.Polygon.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Polygon.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:apollo.common.Polygon.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
