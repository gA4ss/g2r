// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/async_fusion_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/async_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace async_fusion_config {

namespace {

const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2fasync_5ffusion_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2fasync_5ffusion_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2fasync_5ffusion_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/async_fusion_config.proto");
  GOOGLE_CHECK(file != NULL);
  ModelConfigs_descriptor_ = file->message_type(0);
  static const int ModelConfigs_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, match_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_match_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_lidar_invisible_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_radar_invisible_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_radar_confident_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_radar_confident_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, publish_if_has_lidar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, publish_if_has_radar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, publish_sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_radar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_lidar_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2fasync_5ffusion_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2fasync_5ffusion_5fconfig_2eproto() {
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
  delete ModelConfigs::_default_name_;
  delete ModelConfigs::_default_version_;
  delete ModelConfigs::_default_match_method_;
  delete ModelConfigs::_default_publish_sensor_;
}

void protobuf_AddDesc_perception_2fasync_5ffusion_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2fasync_5ffusion_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$perception/async_fusion_config.proto\022%"
    "apollo.perception.async_fusion_config\"\306\003"
    "\n\014ModelConfigs\022\031\n\004name\030\001 \001(\t:\013AsyncFusio"
    "n\022\026\n\007version\030\002 \001(\t:\0051.0.0\022 \n\014match_metho"
    "d\030\003 \001(\t:\nhm_matcher\022\035\n\022max_match_distanc"
    "e\030\004 \001(\002:\0014\022(\n\032max_lidar_invisible_period"
    "\030\005 \001(\002:\0040.25\022(\n\032max_radar_invisible_peri"
    "od\030\006 \001(\002:\0040.25\022%\n\031max_radar_confident_an"
    "gle\030\007 \001(\002:\00230\022(\n\034min_radar_confident_dis"
    "tance\030\010 \001(\002:\00240\022\"\n\024publish_if_has_lidar\030"
    "\t \001(\010:\004true\022\"\n\024publish_if_has_radar\030\n \001("
    "\010:\004true\022#\n\016publish_sensor\030\013 \001(\t:\013velodyn"
    "e_64\022\027\n\tuse_radar\030\014 \001(\010:\004true\022\027\n\tuse_lid"
    "ar\030\r \001(\010:\004true", 534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/async_fusion_config.proto", &protobuf_RegisterTypes);
  ModelConfigs::_default_name_ =
      new ::std::string("AsyncFusion", 11);
  ModelConfigs::_default_version_ =
      new ::std::string("1.0.0", 5);
  ModelConfigs::_default_match_method_ =
      new ::std::string("hm_matcher", 10);
  ModelConfigs::_default_publish_sensor_ =
      new ::std::string("velodyne_64", 11);
  ModelConfigs::default_instance_ = new ModelConfigs();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2fasync_5ffusion_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2fasync_5ffusion_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2fasync_5ffusion_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2fasync_5ffusion_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2fasync_5ffusion_5fconfig_2eproto_;

// ===================================================================

::std::string* ModelConfigs::_default_name_ = NULL;
::std::string* ModelConfigs::_default_version_ = NULL;
::std::string* ModelConfigs::_default_match_method_ = NULL;
::std::string* ModelConfigs::_default_publish_sensor_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kMatchMethodFieldNumber;
const int ModelConfigs::kMaxMatchDistanceFieldNumber;
const int ModelConfigs::kMaxLidarInvisiblePeriodFieldNumber;
const int ModelConfigs::kMaxRadarInvisiblePeriodFieldNumber;
const int ModelConfigs::kMaxRadarConfidentAngleFieldNumber;
const int ModelConfigs::kMinRadarConfidentDistanceFieldNumber;
const int ModelConfigs::kPublishIfHasLidarFieldNumber;
const int ModelConfigs::kPublishIfHasRadarFieldNumber;
const int ModelConfigs::kPublishSensorFieldNumber;
const int ModelConfigs::kUseRadarFieldNumber;
const int ModelConfigs::kUseLidarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.async_fusion_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.async_fusion_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  version_.UnsafeSetDefault(_default_version_);
  match_method_.UnsafeSetDefault(_default_match_method_);
  max_match_distance_ = 4;
  max_lidar_invisible_period_ = 0.25f;
  max_radar_invisible_period_ = 0.25f;
  max_radar_confident_angle_ = 30;
  min_radar_confident_distance_ = 40;
  publish_if_has_lidar_ = true;
  publish_if_has_radar_ = true;
  publish_sensor_.UnsafeSetDefault(_default_publish_sensor_);
  use_radar_ = true;
  use_lidar_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.async_fusion_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  version_.DestroyNoArena(_default_version_);
  match_method_.DestroyNoArena(_default_match_method_);
  publish_sensor_.DestroyNoArena(_default_publish_sensor_);
  if (this != default_instance_) {
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fasync_5ffusion_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.async_fusion_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    if (has_version()) {
      version_.ClearToDefaultNoArena(_default_version_);
    }
    if (has_match_method()) {
      match_method_.ClearToDefaultNoArena(_default_match_method_);
    }
    max_match_distance_ = 4;
    max_lidar_invisible_period_ = 0.25f;
    max_radar_invisible_period_ = 0.25f;
    max_radar_confident_angle_ = 30;
    min_radar_confident_distance_ = 40;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    publish_if_has_lidar_ = true;
    publish_if_has_radar_ = true;
    if (has_publish_sensor()) {
      publish_sensor_.ClearToDefaultNoArena(_default_publish_sensor_);
    }
    use_radar_ = true;
    use_lidar_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.async_fusion_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "AsyncFusion"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.async_fusion_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.async_fusion_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_match_method;
        break;
      }

      // optional string match_method = 3 [default = "hm_matcher"];
      case 3: {
        if (tag == 26) {
         parse_match_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_method().data(), this->match_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.async_fusion_config.ModelConfigs.match_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_match_distance;
        break;
      }

      // optional float max_match_distance = 4 [default = 4];
      case 4: {
        if (tag == 37) {
         parse_max_match_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_match_distance_)));
          set_has_max_match_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_max_lidar_invisible_period;
        break;
      }

      // optional float max_lidar_invisible_period = 5 [default = 0.25];
      case 5: {
        if (tag == 45) {
         parse_max_lidar_invisible_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_lidar_invisible_period_)));
          set_has_max_lidar_invisible_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_max_radar_invisible_period;
        break;
      }

      // optional float max_radar_invisible_period = 6 [default = 0.25];
      case 6: {
        if (tag == 53) {
         parse_max_radar_invisible_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_radar_invisible_period_)));
          set_has_max_radar_invisible_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_max_radar_confident_angle;
        break;
      }

      // optional float max_radar_confident_angle = 7 [default = 30];
      case 7: {
        if (tag == 61) {
         parse_max_radar_confident_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_radar_confident_angle_)));
          set_has_max_radar_confident_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_min_radar_confident_distance;
        break;
      }

      // optional float min_radar_confident_distance = 8 [default = 40];
      case 8: {
        if (tag == 69) {
         parse_min_radar_confident_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_radar_confident_distance_)));
          set_has_min_radar_confident_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_publish_if_has_lidar;
        break;
      }

      // optional bool publish_if_has_lidar = 9 [default = true];
      case 9: {
        if (tag == 72) {
         parse_publish_if_has_lidar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_if_has_lidar_)));
          set_has_publish_if_has_lidar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_publish_if_has_radar;
        break;
      }

      // optional bool publish_if_has_radar = 10 [default = true];
      case 10: {
        if (tag == 80) {
         parse_publish_if_has_radar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_if_has_radar_)));
          set_has_publish_if_has_radar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publish_sensor;
        break;
      }

      // optional string publish_sensor = 11 [default = "velodyne_64"];
      case 11: {
        if (tag == 90) {
         parse_publish_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publish_sensor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publish_sensor().data(), this->publish_sensor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.async_fusion_config.ModelConfigs.publish_sensor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_use_radar;
        break;
      }

      // optional bool use_radar = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_use_radar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_radar_)));
          set_has_use_radar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_use_lidar;
        break;
      }

      // optional bool use_lidar = 13 [default = true];
      case 13: {
        if (tag == 104) {
         parse_use_lidar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_lidar_)));
          set_has_use_lidar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.async_fusion_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.async_fusion_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.async_fusion_config.ModelConfigs)
  // optional string name = 1 [default = "AsyncFusion"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string match_method = 3 [default = "hm_matcher"];
  if (has_match_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_method().data(), this->match_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.match_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->match_method(), output);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (has_max_match_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_match_distance(), output);
  }

  // optional float max_lidar_invisible_period = 5 [default = 0.25];
  if (has_max_lidar_invisible_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_lidar_invisible_period(), output);
  }

  // optional float max_radar_invisible_period = 6 [default = 0.25];
  if (has_max_radar_invisible_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max_radar_invisible_period(), output);
  }

  // optional float max_radar_confident_angle = 7 [default = 30];
  if (has_max_radar_confident_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_radar_confident_angle(), output);
  }

  // optional float min_radar_confident_distance = 8 [default = 40];
  if (has_min_radar_confident_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_radar_confident_distance(), output);
  }

  // optional bool publish_if_has_lidar = 9 [default = true];
  if (has_publish_if_has_lidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->publish_if_has_lidar(), output);
  }

  // optional bool publish_if_has_radar = 10 [default = true];
  if (has_publish_if_has_radar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->publish_if_has_radar(), output);
  }

  // optional string publish_sensor = 11 [default = "velodyne_64"];
  if (has_publish_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publish_sensor().data(), this->publish_sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.publish_sensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->publish_sensor(), output);
  }

  // optional bool use_radar = 12 [default = true];
  if (has_use_radar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_radar(), output);
  }

  // optional bool use_lidar = 13 [default = true];
  if (has_use_lidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_lidar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.async_fusion_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.async_fusion_config.ModelConfigs)
  // optional string name = 1 [default = "AsyncFusion"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string match_method = 3 [default = "hm_matcher"];
  if (has_match_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_method().data(), this->match_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.match_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->match_method(), target);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (has_max_match_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_match_distance(), target);
  }

  // optional float max_lidar_invisible_period = 5 [default = 0.25];
  if (has_max_lidar_invisible_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_lidar_invisible_period(), target);
  }

  // optional float max_radar_invisible_period = 6 [default = 0.25];
  if (has_max_radar_invisible_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->max_radar_invisible_period(), target);
  }

  // optional float max_radar_confident_angle = 7 [default = 30];
  if (has_max_radar_confident_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_radar_confident_angle(), target);
  }

  // optional float min_radar_confident_distance = 8 [default = 40];
  if (has_min_radar_confident_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_radar_confident_distance(), target);
  }

  // optional bool publish_if_has_lidar = 9 [default = true];
  if (has_publish_if_has_lidar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->publish_if_has_lidar(), target);
  }

  // optional bool publish_if_has_radar = 10 [default = true];
  if (has_publish_if_has_radar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->publish_if_has_radar(), target);
  }

  // optional string publish_sensor = 11 [default = "velodyne_64"];
  if (has_publish_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publish_sensor().data(), this->publish_sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.async_fusion_config.ModelConfigs.publish_sensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->publish_sensor(), target);
  }

  // optional bool use_radar = 12 [default = true];
  if (has_use_radar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_radar(), target);
  }

  // optional bool use_lidar = 13 [default = true];
  if (has_use_lidar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_lidar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.async_fusion_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.async_fusion_config.ModelConfigs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = "AsyncFusion"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string match_method = 3 [default = "hm_matcher"];
    if (has_match_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_method());
    }

    // optional float max_match_distance = 4 [default = 4];
    if (has_max_match_distance()) {
      total_size += 1 + 4;
    }

    // optional float max_lidar_invisible_period = 5 [default = 0.25];
    if (has_max_lidar_invisible_period()) {
      total_size += 1 + 4;
    }

    // optional float max_radar_invisible_period = 6 [default = 0.25];
    if (has_max_radar_invisible_period()) {
      total_size += 1 + 4;
    }

    // optional float max_radar_confident_angle = 7 [default = 30];
    if (has_max_radar_confident_angle()) {
      total_size += 1 + 4;
    }

    // optional float min_radar_confident_distance = 8 [default = 40];
    if (has_min_radar_confident_distance()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool publish_if_has_lidar = 9 [default = true];
    if (has_publish_if_has_lidar()) {
      total_size += 1 + 1;
    }

    // optional bool publish_if_has_radar = 10 [default = true];
    if (has_publish_if_has_radar()) {
      total_size += 1 + 1;
    }

    // optional string publish_sensor = 11 [default = "velodyne_64"];
    if (has_publish_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publish_sensor());
    }

    // optional bool use_radar = 12 [default = true];
    if (has_use_radar()) {
      total_size += 1 + 1;
    }

    // optional bool use_lidar = 13 [default = true];
    if (has_use_lidar()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.async_fusion_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.async_fusion_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.async_fusion_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.async_fusion_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(_default_version_, from.version_);
    }
    if (from.has_match_method()) {
      set_has_match_method();
      match_method_.AssignWithDefault(_default_match_method_, from.match_method_);
    }
    if (from.has_max_match_distance()) {
      set_max_match_distance(from.max_match_distance());
    }
    if (from.has_max_lidar_invisible_period()) {
      set_max_lidar_invisible_period(from.max_lidar_invisible_period());
    }
    if (from.has_max_radar_invisible_period()) {
      set_max_radar_invisible_period(from.max_radar_invisible_period());
    }
    if (from.has_max_radar_confident_angle()) {
      set_max_radar_confident_angle(from.max_radar_confident_angle());
    }
    if (from.has_min_radar_confident_distance()) {
      set_min_radar_confident_distance(from.min_radar_confident_distance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_publish_if_has_lidar()) {
      set_publish_if_has_lidar(from.publish_if_has_lidar());
    }
    if (from.has_publish_if_has_radar()) {
      set_publish_if_has_radar(from.publish_if_has_radar());
    }
    if (from.has_publish_sensor()) {
      set_has_publish_sensor();
      publish_sensor_.AssignWithDefault(_default_publish_sensor_, from.publish_sensor_);
    }
    if (from.has_use_radar()) {
      set_use_radar(from.use_radar());
    }
    if (from.has_use_lidar()) {
      set_use_lidar(from.use_lidar());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.async_fusion_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.async_fusion_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  match_method_.Swap(&other->match_method_);
  std::swap(max_match_distance_, other->max_match_distance_);
  std::swap(max_lidar_invisible_period_, other->max_lidar_invisible_period_);
  std::swap(max_radar_invisible_period_, other->max_radar_invisible_period_);
  std::swap(max_radar_confident_angle_, other->max_radar_confident_angle_);
  std::swap(min_radar_confident_distance_, other->min_radar_confident_distance_);
  std::swap(publish_if_has_lidar_, other->publish_if_has_lidar_);
  std::swap(publish_if_has_radar_, other->publish_if_has_radar_);
  publish_sensor_.Swap(&other->publish_sensor_);
  std::swap(use_radar_, other->use_radar_);
  std::swap(use_lidar_, other->use_lidar_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "AsyncFusion"];
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.name)
  return name_.GetNoArena(_default_name_);
}
 void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.async_fusion_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.async_fusion_config.ModelConfigs.name)
}
 ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.async_fusion_config.ModelConfigs.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.async_fusion_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.async_fusion_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
 const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.version)
  return version_.GetNoArena(_default_version_);
}
 void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.async_fusion_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.async_fusion_config.ModelConfigs.version)
}
 ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.async_fusion_config.ModelConfigs.version)
  return version_.MutableNoArena(_default_version_);
}
 ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.async_fusion_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
 void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.async_fusion_config.ModelConfigs.version)
}

// optional string match_method = 3 [default = "hm_matcher"];
bool ModelConfigs::has_match_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_match_method() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_match_method() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_match_method() {
  match_method_.ClearToDefaultNoArena(_default_match_method_);
  clear_has_match_method();
}
 const ::std::string& ModelConfigs::match_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.match_method)
  return match_method_.GetNoArena(_default_match_method_);
}
 void ModelConfigs::set_match_method(const ::std::string& value) {
  set_has_match_method();
  match_method_.SetNoArena(_default_match_method_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.match_method)
}
 void ModelConfigs::set_match_method(const char* value) {
  set_has_match_method();
  match_method_.SetNoArena(_default_match_method_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.async_fusion_config.ModelConfigs.match_method)
}
 void ModelConfigs::set_match_method(const char* value, size_t size) {
  set_has_match_method();
  match_method_.SetNoArena(_default_match_method_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.async_fusion_config.ModelConfigs.match_method)
}
 ::std::string* ModelConfigs::mutable_match_method() {
  set_has_match_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.async_fusion_config.ModelConfigs.match_method)
  return match_method_.MutableNoArena(_default_match_method_);
}
 ::std::string* ModelConfigs::release_match_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.async_fusion_config.ModelConfigs.match_method)
  clear_has_match_method();
  return match_method_.ReleaseNoArena(_default_match_method_);
}
 void ModelConfigs::set_allocated_match_method(::std::string* match_method) {
  if (match_method != NULL) {
    set_has_match_method();
  } else {
    clear_has_match_method();
  }
  match_method_.SetAllocatedNoArena(_default_match_method_, match_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.async_fusion_config.ModelConfigs.match_method)
}

// optional float max_match_distance = 4 [default = 4];
bool ModelConfigs::has_max_match_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_max_match_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_max_match_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_max_match_distance() {
  max_match_distance_ = 4;
  clear_has_max_match_distance();
}
 float ModelConfigs::max_match_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.max_match_distance)
  return max_match_distance_;
}
 void ModelConfigs::set_max_match_distance(float value) {
  set_has_max_match_distance();
  max_match_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.max_match_distance)
}

// optional float max_lidar_invisible_period = 5 [default = 0.25];
bool ModelConfigs::has_max_lidar_invisible_period() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_max_lidar_invisible_period() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_max_lidar_invisible_period() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_max_lidar_invisible_period() {
  max_lidar_invisible_period_ = 0.25f;
  clear_has_max_lidar_invisible_period();
}
 float ModelConfigs::max_lidar_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.max_lidar_invisible_period)
  return max_lidar_invisible_period_;
}
 void ModelConfigs::set_max_lidar_invisible_period(float value) {
  set_has_max_lidar_invisible_period();
  max_lidar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.max_lidar_invisible_period)
}

// optional float max_radar_invisible_period = 6 [default = 0.25];
bool ModelConfigs::has_max_radar_invisible_period() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_max_radar_invisible_period() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelConfigs::clear_has_max_radar_invisible_period() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelConfigs::clear_max_radar_invisible_period() {
  max_radar_invisible_period_ = 0.25f;
  clear_has_max_radar_invisible_period();
}
 float ModelConfigs::max_radar_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.max_radar_invisible_period)
  return max_radar_invisible_period_;
}
 void ModelConfigs::set_max_radar_invisible_period(float value) {
  set_has_max_radar_invisible_period();
  max_radar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.max_radar_invisible_period)
}

// optional float max_radar_confident_angle = 7 [default = 30];
bool ModelConfigs::has_max_radar_confident_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_max_radar_confident_angle() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_max_radar_confident_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_max_radar_confident_angle() {
  max_radar_confident_angle_ = 30;
  clear_has_max_radar_confident_angle();
}
 float ModelConfigs::max_radar_confident_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.max_radar_confident_angle)
  return max_radar_confident_angle_;
}
 void ModelConfigs::set_max_radar_confident_angle(float value) {
  set_has_max_radar_confident_angle();
  max_radar_confident_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.max_radar_confident_angle)
}

// optional float min_radar_confident_distance = 8 [default = 40];
bool ModelConfigs::has_min_radar_confident_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelConfigs::set_has_min_radar_confident_distance() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelConfigs::clear_has_min_radar_confident_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelConfigs::clear_min_radar_confident_distance() {
  min_radar_confident_distance_ = 40;
  clear_has_min_radar_confident_distance();
}
 float ModelConfigs::min_radar_confident_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.min_radar_confident_distance)
  return min_radar_confident_distance_;
}
 void ModelConfigs::set_min_radar_confident_distance(float value) {
  set_has_min_radar_confident_distance();
  min_radar_confident_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.min_radar_confident_distance)
}

// optional bool publish_if_has_lidar = 9 [default = true];
bool ModelConfigs::has_publish_if_has_lidar() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelConfigs::set_has_publish_if_has_lidar() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelConfigs::clear_has_publish_if_has_lidar() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelConfigs::clear_publish_if_has_lidar() {
  publish_if_has_lidar_ = true;
  clear_has_publish_if_has_lidar();
}
 bool ModelConfigs::publish_if_has_lidar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.publish_if_has_lidar)
  return publish_if_has_lidar_;
}
 void ModelConfigs::set_publish_if_has_lidar(bool value) {
  set_has_publish_if_has_lidar();
  publish_if_has_lidar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.publish_if_has_lidar)
}

// optional bool publish_if_has_radar = 10 [default = true];
bool ModelConfigs::has_publish_if_has_radar() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelConfigs::set_has_publish_if_has_radar() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelConfigs::clear_has_publish_if_has_radar() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelConfigs::clear_publish_if_has_radar() {
  publish_if_has_radar_ = true;
  clear_has_publish_if_has_radar();
}
 bool ModelConfigs::publish_if_has_radar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.publish_if_has_radar)
  return publish_if_has_radar_;
}
 void ModelConfigs::set_publish_if_has_radar(bool value) {
  set_has_publish_if_has_radar();
  publish_if_has_radar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.publish_if_has_radar)
}

// optional string publish_sensor = 11 [default = "velodyne_64"];
bool ModelConfigs::has_publish_sensor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelConfigs::set_has_publish_sensor() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelConfigs::clear_has_publish_sensor() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelConfigs::clear_publish_sensor() {
  publish_sensor_.ClearToDefaultNoArena(_default_publish_sensor_);
  clear_has_publish_sensor();
}
 const ::std::string& ModelConfigs::publish_sensor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.publish_sensor)
  return publish_sensor_.GetNoArena(_default_publish_sensor_);
}
 void ModelConfigs::set_publish_sensor(const ::std::string& value) {
  set_has_publish_sensor();
  publish_sensor_.SetNoArena(_default_publish_sensor_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.publish_sensor)
}
 void ModelConfigs::set_publish_sensor(const char* value) {
  set_has_publish_sensor();
  publish_sensor_.SetNoArena(_default_publish_sensor_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.async_fusion_config.ModelConfigs.publish_sensor)
}
 void ModelConfigs::set_publish_sensor(const char* value, size_t size) {
  set_has_publish_sensor();
  publish_sensor_.SetNoArena(_default_publish_sensor_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.async_fusion_config.ModelConfigs.publish_sensor)
}
 ::std::string* ModelConfigs::mutable_publish_sensor() {
  set_has_publish_sensor();
  // @@protoc_insertion_point(field_mutable:apollo.perception.async_fusion_config.ModelConfigs.publish_sensor)
  return publish_sensor_.MutableNoArena(_default_publish_sensor_);
}
 ::std::string* ModelConfigs::release_publish_sensor() {
  // @@protoc_insertion_point(field_release:apollo.perception.async_fusion_config.ModelConfigs.publish_sensor)
  clear_has_publish_sensor();
  return publish_sensor_.ReleaseNoArena(_default_publish_sensor_);
}
 void ModelConfigs::set_allocated_publish_sensor(::std::string* publish_sensor) {
  if (publish_sensor != NULL) {
    set_has_publish_sensor();
  } else {
    clear_has_publish_sensor();
  }
  publish_sensor_.SetAllocatedNoArena(_default_publish_sensor_, publish_sensor);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.async_fusion_config.ModelConfigs.publish_sensor)
}

// optional bool use_radar = 12 [default = true];
bool ModelConfigs::has_use_radar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelConfigs::set_has_use_radar() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelConfigs::clear_has_use_radar() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelConfigs::clear_use_radar() {
  use_radar_ = true;
  clear_has_use_radar();
}
 bool ModelConfigs::use_radar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.use_radar)
  return use_radar_;
}
 void ModelConfigs::set_use_radar(bool value) {
  set_has_use_radar();
  use_radar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.use_radar)
}

// optional bool use_lidar = 13 [default = true];
bool ModelConfigs::has_use_lidar() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModelConfigs::set_has_use_lidar() {
  _has_bits_[0] |= 0x00001000u;
}
void ModelConfigs::clear_has_use_lidar() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModelConfigs::clear_use_lidar() {
  use_lidar_ = true;
  clear_has_use_lidar();
}
 bool ModelConfigs::use_lidar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.async_fusion_config.ModelConfigs.use_lidar)
  return use_lidar_;
}
 void ModelConfigs::set_use_lidar(bool value) {
  set_has_use_lidar();
  use_lidar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.async_fusion_config.ModelConfigs.use_lidar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace async_fusion_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
