// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/planning_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* PathDeciderConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathDeciderConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenarioConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenarioConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenarioConfig_ScenarioTaskConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenarioConfig_ScenarioTaskConfig_reflection_ = NULL;
struct ScenarioConfig_ScenarioTaskConfigOneofInstance {
  const ::apollo::planning::DpPolyPathConfig* dp_poly_path_config_;
  const ::apollo::planning::DpStSpeedConfig* dp_st_speed_config_;
  const ::apollo::planning::QpSplinePathConfig* qp_spline_path_config_;
  const ::apollo::planning::QpStSpeedConfig* qp_st_speed_config_;
  const ::apollo::planning::PolyStSpeedConfig* poly_st_speed_config_;
  const ::apollo::planning::PathDeciderConfig* path_decider_config_;
}* ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* ScenarioConfig_ScenarioType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlannerOnRoadConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerOnRoadConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlannerNaviConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlannerNaviConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtkPlanningConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtkPlanningConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* StandardPlanningConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StandardPlanningConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NavigationPlanningConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavigationPlanningConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanningConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningConfig_reflection_ = NULL;
struct PlanningConfigOneofInstance {
  const ::apollo::planning::RtkPlanningConfig* rtk_planning_config_;
  const ::apollo::planning::StandardPlanningConfig* standard_planning_config_;
  const ::apollo::planning::NavigationPlanningConfig* navigation_planning_config_;
}* PlanningConfig_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlannerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/planning_config.proto");
  GOOGLE_CHECK(file != NULL);
  PathDeciderConfig_descriptor_ = file->message_type(0);
  static const int PathDeciderConfig_offsets_[1] = {
  };
  PathDeciderConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathDeciderConfig_descriptor_,
      PathDeciderConfig::default_instance_,
      PathDeciderConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathDeciderConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathDeciderConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathDeciderConfig, _internal_metadata_),
      -1);
  ScenarioConfig_descriptor_ = file->message_type(1);
  static const int ScenarioConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig, scenario_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig, scenario_task_config_),
  };
  ScenarioConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScenarioConfig_descriptor_,
      ScenarioConfig::default_instance_,
      ScenarioConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScenarioConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig, _internal_metadata_),
      -1);
  ScenarioConfig_ScenarioTaskConfig_descriptor_ = ScenarioConfig_descriptor_->nested_type(0);
  static const int ScenarioConfig_ScenarioTaskConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig, task_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_, dp_poly_path_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_, dp_st_speed_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_, qp_spline_path_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_, qp_st_speed_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_, poly_st_speed_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_, path_decider_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig, task_config_),
  };
  ScenarioConfig_ScenarioTaskConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScenarioConfig_ScenarioTaskConfig_descriptor_,
      ScenarioConfig_ScenarioTaskConfig::default_instance_,
      ScenarioConfig_ScenarioTaskConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig, _has_bits_[0]),
      -1,
      -1,
      ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig, _oneof_case_[0]),
      sizeof(ScenarioConfig_ScenarioTaskConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioConfig_ScenarioTaskConfig, _internal_metadata_),
      -1);
  ScenarioConfig_ScenarioType_descriptor_ = ScenarioConfig_descriptor_->enum_type(0);
  PlannerOnRoadConfig_descriptor_ = file->message_type(2);
  static const int PlannerOnRoadConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOnRoadConfig, scenario_type_),
  };
  PlannerOnRoadConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlannerOnRoadConfig_descriptor_,
      PlannerOnRoadConfig::default_instance_,
      PlannerOnRoadConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOnRoadConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlannerOnRoadConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOnRoadConfig, _internal_metadata_),
      -1);
  PlannerNaviConfig_descriptor_ = file->message_type(3);
  static const int PlannerNaviConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerNaviConfig, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerNaviConfig, navi_path_decider_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerNaviConfig, navi_speed_decider_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerNaviConfig, navi_obstacle_decider_config_),
  };
  PlannerNaviConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlannerNaviConfig_descriptor_,
      PlannerNaviConfig::default_instance_,
      PlannerNaviConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerNaviConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlannerNaviConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerNaviConfig, _internal_metadata_),
      -1);
  RtkPlanningConfig_descriptor_ = file->message_type(4);
  static const int RtkPlanningConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtkPlanningConfig, planner_type_),
  };
  RtkPlanningConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RtkPlanningConfig_descriptor_,
      RtkPlanningConfig::default_instance_,
      RtkPlanningConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtkPlanningConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(RtkPlanningConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtkPlanningConfig, _internal_metadata_),
      -1);
  StandardPlanningConfig_descriptor_ = file->message_type(5);
  static const int StandardPlanningConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardPlanningConfig, planner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardPlanningConfig, planner_onroad_config_),
  };
  StandardPlanningConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StandardPlanningConfig_descriptor_,
      StandardPlanningConfig::default_instance_,
      StandardPlanningConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardPlanningConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(StandardPlanningConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardPlanningConfig, _internal_metadata_),
      -1);
  NavigationPlanningConfig_descriptor_ = file->message_type(6);
  static const int NavigationPlanningConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPlanningConfig, planner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPlanningConfig, planner_navi_config_),
  };
  NavigationPlanningConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NavigationPlanningConfig_descriptor_,
      NavigationPlanningConfig::default_instance_,
      NavigationPlanningConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPlanningConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(NavigationPlanningConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPlanningConfig, _internal_metadata_),
      -1);
  PlanningConfig_descriptor_ = file->message_type(7);
  static const int PlanningConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, planner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, planner_navi_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PlanningConfig_default_oneof_instance_, rtk_planning_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PlanningConfig_default_oneof_instance_, standard_planning_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PlanningConfig_default_oneof_instance_, navigation_planning_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, planning_config_),
  };
  PlanningConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlanningConfig_descriptor_,
      PlanningConfig::default_instance_,
      PlanningConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, _has_bits_[0]),
      -1,
      -1,
      PlanningConfig_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, _oneof_case_[0]),
      sizeof(PlanningConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, _internal_metadata_),
      -1);
  TaskType_descriptor_ = file->enum_type(0);
  PlannerType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathDeciderConfig_descriptor_, &PathDeciderConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScenarioConfig_descriptor_, &ScenarioConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScenarioConfig_ScenarioTaskConfig_descriptor_, &ScenarioConfig_ScenarioTaskConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlannerOnRoadConfig_descriptor_, &PlannerOnRoadConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlannerNaviConfig_descriptor_, &PlannerNaviConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RtkPlanningConfig_descriptor_, &RtkPlanningConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StandardPlanningConfig_descriptor_, &StandardPlanningConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NavigationPlanningConfig_descriptor_, &NavigationPlanningConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlanningConfig_descriptor_, &PlanningConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto() {
  delete PathDeciderConfig::default_instance_;
  delete PathDeciderConfig_reflection_;
  delete ScenarioConfig::default_instance_;
  delete ScenarioConfig_reflection_;
  delete ScenarioConfig_ScenarioTaskConfig::default_instance_;
  delete ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_;
  delete ScenarioConfig_ScenarioTaskConfig_reflection_;
  delete PlannerOnRoadConfig::default_instance_;
  delete PlannerOnRoadConfig_reflection_;
  delete PlannerNaviConfig::default_instance_;
  delete PlannerNaviConfig_reflection_;
  delete RtkPlanningConfig::default_instance_;
  delete RtkPlanningConfig_reflection_;
  delete StandardPlanningConfig::default_instance_;
  delete StandardPlanningConfig_reflection_;
  delete NavigationPlanningConfig::default_instance_;
  delete NavigationPlanningConfig_reflection_;
  delete PlanningConfig::default_instance_;
  delete PlanningConfig_default_oneof_instance_;
  delete PlanningConfig_reflection_;
}

void protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::planning::protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fnavi_5fspeed_5fdecider_5fconfig_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036planning/planning_config.proto\022\017apollo"
    ".planning\032\"planning/dp_poly_path_config."
    "proto\032!planning/dp_st_speed_config.proto"
    "\032$planning/qp_spline_path_config.proto\032!"
    "planning/qp_st_speed_config.proto\032#plann"
    "ing/poly_st_speed_config.proto\032\'planning"
    "/navi_path_decider_config.proto\032(plannin"
    "g/navi_speed_decider_config.proto\032+plann"
    "ing/navi_obstacle_decider_config.proto\"\023"
    "\n\021PathDeciderConfig\"\245\007\n\016ScenarioConfig\022C"
    "\n\rscenario_type\030\001 \001(\0162,.apollo.planning."
    "ScenarioConfig.ScenarioType\022P\n\024scenario_"
    "task_config\030\002 \003(\01322.apollo.planning.Scen"
    "arioConfig.ScenarioTaskConfig\032\333\003\n\022Scenar"
    "ioTaskConfig\022\'\n\004task\030\001 \001(\0162\031.apollo.plan"
    "ning.TaskType\022@\n\023dp_poly_path_config\030\002 \001"
    "(\0132!.apollo.planning.DpPolyPathConfigH\000\022"
    ">\n\022dp_st_speed_config\030\003 \001(\0132 .apollo.pla"
    "nning.DpStSpeedConfigH\000\022D\n\025qp_spline_pat"
    "h_config\030\004 \001(\0132#.apollo.planning.QpSplin"
    "ePathConfigH\000\022>\n\022qp_st_speed_config\030\005 \001("
    "\0132 .apollo.planning.QpStSpeedConfigH\000\022B\n"
    "\024poly_st_speed_config\030\006 \001(\0132\".apollo.pla"
    "nning.PolyStSpeedConfigH\000\022A\n\023path_decide"
    "r_config\030\007 \001(\0132\".apollo.planning.PathDec"
    "iderConfigH\000B\r\n\013task_config\"\235\002\n\014Scenario"
    "Type\022\017\n\013LANE_FOLLOW\020\000\022\017\n\013CHANGE_LANE\020\001\022\r"
    "\n\tSIDE_PASS\020\002\022\014\n\010APPROACH\020\003\022#\n\037INTERSECT"
    "ION_STOP_SIGN_FOUR_WAY\020\004\022)\n%INTERSECTION"
    "_STOP_SIGN_ONE_OR_TWO_WAY\020\005\022(\n$INTERSECT"
    "ION_TRAFFIC_LIGHT_LEFT_TURN\020\006\022)\n%INTERSE"
    "CTION_TRAFFIC_LIGHT_RIGHT_TURN\020\007\022)\n%INTE"
    "RSECTION_TRAFFIC_LIGHT_GO_THROUGH\020\010\"Z\n\023P"
    "lannerOnRoadConfig\022C\n\rscenario_type\030\001 \003("
    "\0162,.apollo.planning.ScenarioConfig.Scena"
    "rioType\"\244\002\n\021PlannerNaviConfig\022\'\n\004task\030\001 "
    "\003(\0162\031.apollo.planning.TaskType\022H\n\030navi_p"
    "ath_decider_config\030\002 \001(\0132&.apollo.planni"
    "ng.NaviPathDeciderConfig\022J\n\031navi_speed_d"
    "ecider_config\030\003 \001(\0132\'.apollo.planning.Na"
    "viSpeedDeciderConfig\022P\n\034navi_obstacle_de"
    "cider_config\030\004 \001(\0132*.apollo.planning.Nav"
    "iObstacleDeciderConfig\"G\n\021RtkPlanningCon"
    "fig\0222\n\014planner_type\030\001 \001(\0162\034.apollo.plann"
    "ing.PlannerType\"\221\001\n\026StandardPlanningConf"
    "ig\0222\n\014planner_type\030\001 \003(\0162\034.apollo.planni"
    "ng.PlannerType\022C\n\025planner_onroad_config\030"
    "\002 \001(\0132$.apollo.planning.PlannerOnRoadCon"
    "fig\"\217\001\n\030NavigationPlanningConfig\0222\n\014plan"
    "ner_type\030\001 \003(\0162\034.apollo.planning.Planner"
    "Type\022\?\n\023planner_navi_config\030\004 \001(\0132\".apol"
    "lo.planning.PlannerNaviConfig\"\375\002\n\016Planni"
    "ngConfig\0226\n\014planner_type\030\001 \001(\0162\034.apollo."
    "planning.PlannerTypeB\002\030\001\022\?\n\023planner_navi"
    "_config\030\002 \001(\0132\".apollo.planning.PlannerN"
    "aviConfig\022A\n\023rtk_planning_config\030\003 \001(\0132\""
    ".apollo.planning.RtkPlanningConfigH\000\022K\n\030"
    "standard_planning_config\030\004 \001(\0132\'.apollo."
    "planning.StandardPlanningConfigH\000\022O\n\032nav"
    "igation_planning_config\030\005 \001(\0132).apollo.p"
    "lanning.NavigationPlanningConfigH\000B\021\n\017pl"
    "anning_config*\215\002\n\010TaskType\022\032\n\026DP_POLY_PA"
    "TH_OPTIMIZER\020\000\022\031\n\025DP_ST_SPEED_OPTIMIZER\020"
    "\001\022\034\n\030QP_SPLINE_PATH_OPTIMIZER\020\002\022 \n\034QP_SP"
    "LINE_ST_SPEED_OPTIMIZER\020\003\022\020\n\014PATH_DECIDE"
    "R\020\004\022\021\n\rSPEED_DECIDER\020\005\022\033\n\027POLY_ST_SPEED_"
    "OPTIMIZER\020\006\022\025\n\021NAVI_PATH_DECIDER\020\007\022\026\n\022NA"
    "VI_SPEED_DECIDER\020\010\022\031\n\025NAVI_OBSTACLE_DECI"
    "DER\020\t*;\n\013PlannerType\022\007\n\003RTK\020\000\022\n\n\006ONROAD\020"
    "\001\022\r\n\tOPENSPACE\020\002\022\010\n\004NAVI\020\003", 2786);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/planning_config.proto", &protobuf_RegisterTypes);
  PathDeciderConfig::default_instance_ = new PathDeciderConfig();
  ScenarioConfig::default_instance_ = new ScenarioConfig();
  ScenarioConfig_ScenarioTaskConfig::default_instance_ = new ScenarioConfig_ScenarioTaskConfig();
  ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_ = new ScenarioConfig_ScenarioTaskConfigOneofInstance();
  PlannerOnRoadConfig::default_instance_ = new PlannerOnRoadConfig();
  PlannerNaviConfig::default_instance_ = new PlannerNaviConfig();
  RtkPlanningConfig::default_instance_ = new RtkPlanningConfig();
  StandardPlanningConfig::default_instance_ = new StandardPlanningConfig();
  NavigationPlanningConfig::default_instance_ = new NavigationPlanningConfig();
  PlanningConfig::default_instance_ = new PlanningConfig();
  PlanningConfig_default_oneof_instance_ = new PlanningConfigOneofInstance();
  PathDeciderConfig::default_instance_->InitAsDefaultInstance();
  ScenarioConfig::default_instance_->InitAsDefaultInstance();
  ScenarioConfig_ScenarioTaskConfig::default_instance_->InitAsDefaultInstance();
  PlannerOnRoadConfig::default_instance_->InitAsDefaultInstance();
  PlannerNaviConfig::default_instance_->InitAsDefaultInstance();
  RtkPlanningConfig::default_instance_->InitAsDefaultInstance();
  StandardPlanningConfig::default_instance_->InitAsDefaultInstance();
  NavigationPlanningConfig::default_instance_->InitAsDefaultInstance();
  PlanningConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fplanning_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fplanning_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fplanning_5fconfig_2eproto_;
const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskType_descriptor_;
}
bool TaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlannerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerType_descriptor_;
}
bool PlannerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathDeciderConfig::PathDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathDeciderConfig)
}

void PathDeciderConfig::InitAsDefaultInstance() {
}

PathDeciderConfig::PathDeciderConfig(const PathDeciderConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathDeciderConfig)
}

void PathDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathDeciderConfig::~PathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathDeciderConfig)
  SharedDtor();
}

void PathDeciderConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathDeciderConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathDeciderConfig_descriptor_;
}

const PathDeciderConfig& PathDeciderConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

PathDeciderConfig* PathDeciderConfig::default_instance_ = NULL;

PathDeciderConfig* PathDeciderConfig::New(::google::protobuf::Arena* arena) const {
  PathDeciderConfig* n = new PathDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathDeciderConfig)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathDeciderConfig)
  return false;
#undef DO_
}

void PathDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathDeciderConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathDeciderConfig)
}

::google::protobuf::uint8* PathDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathDeciderConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathDeciderConfig)
  return target;
}

int PathDeciderConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathDeciderConfig)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathDeciderConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathDeciderConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathDeciderConfig)
    MergeFrom(*source);
  }
}

void PathDeciderConfig::MergeFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathDeciderConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathDeciderConfig::CopyFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathDeciderConfig::IsInitialized() const {

  return true;
}

void PathDeciderConfig::Swap(PathDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathDeciderConfig::InternalSwap(PathDeciderConfig* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathDeciderConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathDeciderConfig_descriptor_;
  metadata.reflection = PathDeciderConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathDeciderConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ScenarioConfig_ScenarioType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenarioConfig_ScenarioType_descriptor_;
}
bool ScenarioConfig_ScenarioType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ScenarioConfig_ScenarioType ScenarioConfig::LANE_FOLLOW;
const ScenarioConfig_ScenarioType ScenarioConfig::CHANGE_LANE;
const ScenarioConfig_ScenarioType ScenarioConfig::SIDE_PASS;
const ScenarioConfig_ScenarioType ScenarioConfig::APPROACH;
const ScenarioConfig_ScenarioType ScenarioConfig::INTERSECTION_STOP_SIGN_FOUR_WAY;
const ScenarioConfig_ScenarioType ScenarioConfig::INTERSECTION_STOP_SIGN_ONE_OR_TWO_WAY;
const ScenarioConfig_ScenarioType ScenarioConfig::INTERSECTION_TRAFFIC_LIGHT_LEFT_TURN;
const ScenarioConfig_ScenarioType ScenarioConfig::INTERSECTION_TRAFFIC_LIGHT_RIGHT_TURN;
const ScenarioConfig_ScenarioType ScenarioConfig::INTERSECTION_TRAFFIC_LIGHT_GO_THROUGH;
const ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MIN;
const ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MAX;
const int ScenarioConfig::ScenarioType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioConfig_ScenarioTaskConfig::kTaskFieldNumber;
const int ScenarioConfig_ScenarioTaskConfig::kDpPolyPathConfigFieldNumber;
const int ScenarioConfig_ScenarioTaskConfig::kDpStSpeedConfigFieldNumber;
const int ScenarioConfig_ScenarioTaskConfig::kQpSplinePathConfigFieldNumber;
const int ScenarioConfig_ScenarioTaskConfig::kQpStSpeedConfigFieldNumber;
const int ScenarioConfig_ScenarioTaskConfig::kPolyStSpeedConfigFieldNumber;
const int ScenarioConfig_ScenarioTaskConfig::kPathDeciderConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioConfig_ScenarioTaskConfig::ScenarioConfig_ScenarioTaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
}

void ScenarioConfig_ScenarioTaskConfig::InitAsDefaultInstance() {
  ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_->dp_poly_path_config_ = const_cast< ::apollo::planning::DpPolyPathConfig*>(&::apollo::planning::DpPolyPathConfig::default_instance());
  ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_->dp_st_speed_config_ = const_cast< ::apollo::planning::DpStSpeedConfig*>(&::apollo::planning::DpStSpeedConfig::default_instance());
  ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_->qp_spline_path_config_ = const_cast< ::apollo::planning::QpSplinePathConfig*>(&::apollo::planning::QpSplinePathConfig::default_instance());
  ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_->qp_st_speed_config_ = const_cast< ::apollo::planning::QpStSpeedConfig*>(&::apollo::planning::QpStSpeedConfig::default_instance());
  ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_->poly_st_speed_config_ = const_cast< ::apollo::planning::PolyStSpeedConfig*>(&::apollo::planning::PolyStSpeedConfig::default_instance());
  ScenarioConfig_ScenarioTaskConfig_default_oneof_instance_->path_decider_config_ = const_cast< ::apollo::planning::PathDeciderConfig*>(&::apollo::planning::PathDeciderConfig::default_instance());
}

ScenarioConfig_ScenarioTaskConfig::ScenarioConfig_ScenarioTaskConfig(const ScenarioConfig_ScenarioTaskConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
}

void ScenarioConfig_ScenarioTaskConfig::SharedCtor() {
  _cached_size_ = 0;
  task_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_task_config();
}

ScenarioConfig_ScenarioTaskConfig::~ScenarioConfig_ScenarioTaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  SharedDtor();
}

void ScenarioConfig_ScenarioTaskConfig::SharedDtor() {
  if (has_task_config()) {
    clear_task_config();
  }
  if (this != default_instance_) {
  }
}

void ScenarioConfig_ScenarioTaskConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenarioConfig_ScenarioTaskConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenarioConfig_ScenarioTaskConfig_descriptor_;
}

const ScenarioConfig_ScenarioTaskConfig& ScenarioConfig_ScenarioTaskConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

ScenarioConfig_ScenarioTaskConfig* ScenarioConfig_ScenarioTaskConfig::default_instance_ = NULL;

ScenarioConfig_ScenarioTaskConfig* ScenarioConfig_ScenarioTaskConfig::New(::google::protobuf::Arena* arena) const {
  ScenarioConfig_ScenarioTaskConfig* n = new ScenarioConfig_ScenarioTaskConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenarioConfig_ScenarioTaskConfig::clear_task_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  switch(task_config_case()) {
    case kDpPolyPathConfig: {
      delete task_config_.dp_poly_path_config_;
      break;
    }
    case kDpStSpeedConfig: {
      delete task_config_.dp_st_speed_config_;
      break;
    }
    case kQpSplinePathConfig: {
      delete task_config_.qp_spline_path_config_;
      break;
    }
    case kQpStSpeedConfig: {
      delete task_config_.qp_st_speed_config_;
      break;
    }
    case kPolyStSpeedConfig: {
      delete task_config_.poly_st_speed_config_;
      break;
    }
    case kPathDeciderConfig: {
      delete task_config_.path_decider_config_;
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_CONFIG_NOT_SET;
}


void ScenarioConfig_ScenarioTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  task_ = 0;
  clear_task_config();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScenarioConfig_ScenarioTaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.TaskType task = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TaskType_IsValid(value)) {
            set_task(static_cast< ::apollo::planning::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dp_poly_path_config;
        break;
      }

      // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
      case 2: {
        if (tag == 18) {
         parse_dp_poly_path_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_poly_path_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dp_st_speed_config;
        break;
      }

      // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
      case 3: {
        if (tag == 26) {
         parse_dp_st_speed_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_qp_spline_path_config;
        break;
      }

      // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
      case 4: {
        if (tag == 34) {
         parse_qp_spline_path_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_spline_path_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_qp_st_speed_config;
        break;
      }

      // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
      case 5: {
        if (tag == 42) {
         parse_qp_st_speed_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_poly_st_speed_config;
        break;
      }

      // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
      case 6: {
        if (tag == 50) {
         parse_poly_st_speed_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poly_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_path_decider_config;
        break;
      }

      // optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
      case 7: {
        if (tag == 58) {
         parse_path_decider_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_decider_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  return false;
#undef DO_
}

void ScenarioConfig_ScenarioTaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  // optional .apollo.planning.TaskType task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task(), output);
  }

  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  if (has_dp_poly_path_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *task_config_.dp_poly_path_config_, output);
  }

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  if (has_dp_st_speed_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *task_config_.dp_st_speed_config_, output);
  }

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  if (has_qp_spline_path_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *task_config_.qp_spline_path_config_, output);
  }

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  if (has_qp_st_speed_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *task_config_.qp_st_speed_config_, output);
  }

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  if (has_poly_st_speed_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *task_config_.poly_st_speed_config_, output);
  }

  // optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
  if (has_path_decider_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *task_config_.path_decider_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
}

::google::protobuf::uint8* ScenarioConfig_ScenarioTaskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  // optional .apollo.planning.TaskType task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->task(), target);
  }

  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  if (has_dp_poly_path_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *task_config_.dp_poly_path_config_, false, target);
  }

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  if (has_dp_st_speed_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *task_config_.dp_st_speed_config_, false, target);
  }

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  if (has_qp_spline_path_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *task_config_.qp_spline_path_config_, false, target);
  }

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  if (has_qp_st_speed_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *task_config_.qp_st_speed_config_, false, target);
  }

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  if (has_poly_st_speed_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *task_config_.poly_st_speed_config_, false, target);
  }

  // optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
  if (has_path_decider_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *task_config_.path_decider_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  return target;
}

int ScenarioConfig_ScenarioTaskConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  int total_size = 0;

  // optional .apollo.planning.TaskType task = 1;
  if (has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task());
  }

  switch (task_config_case()) {
    // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
    case kDpPolyPathConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_config_.dp_poly_path_config_);
      break;
    }
    // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
    case kDpStSpeedConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_config_.dp_st_speed_config_);
      break;
    }
    // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
    case kQpSplinePathConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_config_.qp_spline_path_config_);
      break;
    }
    // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
    case kQpStSpeedConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_config_.qp_st_speed_config_);
      break;
    }
    // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
    case kPolyStSpeedConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_config_.poly_st_speed_config_);
      break;
    }
    // optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
    case kPathDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_config_.path_decider_config_);
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenarioConfig_ScenarioTaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScenarioConfig_ScenarioTaskConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioConfig_ScenarioTaskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
    MergeFrom(*source);
  }
}

void ScenarioConfig_ScenarioTaskConfig::MergeFrom(const ScenarioConfig_ScenarioTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.task_config_case()) {
    case kDpPolyPathConfig: {
      mutable_dp_poly_path_config()->::apollo::planning::DpPolyPathConfig::MergeFrom(from.dp_poly_path_config());
      break;
    }
    case kDpStSpeedConfig: {
      mutable_dp_st_speed_config()->::apollo::planning::DpStSpeedConfig::MergeFrom(from.dp_st_speed_config());
      break;
    }
    case kQpSplinePathConfig: {
      mutable_qp_spline_path_config()->::apollo::planning::QpSplinePathConfig::MergeFrom(from.qp_spline_path_config());
      break;
    }
    case kQpStSpeedConfig: {
      mutable_qp_st_speed_config()->::apollo::planning::QpStSpeedConfig::MergeFrom(from.qp_st_speed_config());
      break;
    }
    case kPolyStSpeedConfig: {
      mutable_poly_st_speed_config()->::apollo::planning::PolyStSpeedConfig::MergeFrom(from.poly_st_speed_config());
      break;
    }
    case kPathDeciderConfig: {
      mutable_path_decider_config()->::apollo::planning::PathDeciderConfig::MergeFrom(from.path_decider_config());
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      set_task(from.task());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScenarioConfig_ScenarioTaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioConfig_ScenarioTaskConfig::CopyFrom(const ScenarioConfig_ScenarioTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig_ScenarioTaskConfig::IsInitialized() const {

  return true;
}

void ScenarioConfig_ScenarioTaskConfig::Swap(ScenarioConfig_ScenarioTaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioConfig_ScenarioTaskConfig::InternalSwap(ScenarioConfig_ScenarioTaskConfig* other) {
  std::swap(task_, other->task_);
  std::swap(task_config_, other->task_config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenarioConfig_ScenarioTaskConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenarioConfig_ScenarioTaskConfig_descriptor_;
  metadata.reflection = ScenarioConfig_ScenarioTaskConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioConfig::kScenarioTypeFieldNumber;
const int ScenarioConfig::kScenarioTaskConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioConfig::ScenarioConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioConfig)
}

void ScenarioConfig::InitAsDefaultInstance() {
}

ScenarioConfig::ScenarioConfig(const ScenarioConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig)
}

void ScenarioConfig::SharedCtor() {
  _cached_size_ = 0;
  scenario_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenarioConfig::~ScenarioConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig)
  SharedDtor();
}

void ScenarioConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScenarioConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenarioConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenarioConfig_descriptor_;
}

const ScenarioConfig& ScenarioConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

ScenarioConfig* ScenarioConfig::default_instance_ = NULL;

ScenarioConfig* ScenarioConfig::New(::google::protobuf::Arena* arena) const {
  ScenarioConfig* n = new ScenarioConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenarioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig)
  scenario_type_ = 0;
  scenario_task_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScenarioConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value)) {
            set_scenario_type(static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scenario_task_config;
        break;
      }

      // repeated .apollo.planning.ScenarioConfig.ScenarioTaskConfig scenario_task_config = 2;
      case 2: {
        if (tag == 18) {
         parse_scenario_task_config:
          DO_(input->IncrementRecursionDepth());
         parse_loop_scenario_task_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_scenario_task_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_scenario_task_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioConfig)
  return false;
#undef DO_
}

void ScenarioConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioConfig)
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (has_scenario_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scenario_type(), output);
  }

  // repeated .apollo.planning.ScenarioConfig.ScenarioTaskConfig scenario_task_config = 2;
  for (unsigned int i = 0, n = this->scenario_task_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scenario_task_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioConfig)
}

::google::protobuf::uint8* ScenarioConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig)
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (has_scenario_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scenario_type(), target);
  }

  // repeated .apollo.planning.ScenarioConfig.ScenarioTaskConfig scenario_task_config = 2;
  for (unsigned int i = 0, n = this->scenario_task_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->scenario_task_config(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig)
  return target;
}

int ScenarioConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig)
  int total_size = 0;

  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (has_scenario_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scenario_type());
  }

  // repeated .apollo.planning.ScenarioConfig.ScenarioTaskConfig scenario_task_config = 2;
  total_size += 1 * this->scenario_task_config_size();
  for (int i = 0; i < this->scenario_task_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenario_task_config(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenarioConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScenarioConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioConfig)
    MergeFrom(*source);
  }
}

void ScenarioConfig::MergeFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  scenario_task_config_.MergeFrom(from.scenario_task_config_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenario_type()) {
      set_scenario_type(from.scenario_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScenarioConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioConfig::CopyFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig::IsInitialized() const {

  return true;
}

void ScenarioConfig::Swap(ScenarioConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioConfig::InternalSwap(ScenarioConfig* other) {
  std::swap(scenario_type_, other->scenario_type_);
  scenario_task_config_.UnsafeArenaSwap(&other->scenario_task_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenarioConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenarioConfig_descriptor_;
  metadata.reflection = ScenarioConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenarioConfig_ScenarioTaskConfig

// optional .apollo.planning.TaskType task = 1;
bool ScenarioConfig_ScenarioTaskConfig::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScenarioConfig_ScenarioTaskConfig::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
void ScenarioConfig_ScenarioTaskConfig::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScenarioConfig_ScenarioTaskConfig::clear_task() {
  task_ = 0;
  clear_has_task();
}
 ::apollo::planning::TaskType ScenarioConfig_ScenarioTaskConfig::task() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.task)
  return static_cast< ::apollo::planning::TaskType >(task_);
}
 void ScenarioConfig_ScenarioTaskConfig::set_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  set_has_task();
  task_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.ScenarioTaskConfig.task)
}

// optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
bool ScenarioConfig_ScenarioTaskConfig::has_dp_poly_path_config() const {
  return task_config_case() == kDpPolyPathConfig;
}
void ScenarioConfig_ScenarioTaskConfig::set_has_dp_poly_path_config() {
  _oneof_case_[0] = kDpPolyPathConfig;
}
void ScenarioConfig_ScenarioTaskConfig::clear_dp_poly_path_config() {
  if (has_dp_poly_path_config()) {
    delete task_config_.dp_poly_path_config_;
    clear_has_task_config();
  }
}
 const ::apollo::planning::DpPolyPathConfig& ScenarioConfig_ScenarioTaskConfig::dp_poly_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
  return has_dp_poly_path_config()
      ? *task_config_.dp_poly_path_config_
      : ::apollo::planning::DpPolyPathConfig::default_instance();
}
::apollo::planning::DpPolyPathConfig* ScenarioConfig_ScenarioTaskConfig::mutable_dp_poly_path_config() {
  if (!has_dp_poly_path_config()) {
    clear_task_config();
    set_has_dp_poly_path_config();
    task_config_.dp_poly_path_config_ = new ::apollo::planning::DpPolyPathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
  return task_config_.dp_poly_path_config_;
}
::apollo::planning::DpPolyPathConfig* ScenarioConfig_ScenarioTaskConfig::release_dp_poly_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
  if (has_dp_poly_path_config()) {
    clear_has_task_config();
    ::apollo::planning::DpPolyPathConfig* temp = task_config_.dp_poly_path_config_;
    task_config_.dp_poly_path_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ScenarioConfig_ScenarioTaskConfig::set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config) {
  clear_task_config();
  if (dp_poly_path_config) {
    set_has_dp_poly_path_config();
    task_config_.dp_poly_path_config_ = dp_poly_path_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
}

// optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
bool ScenarioConfig_ScenarioTaskConfig::has_dp_st_speed_config() const {
  return task_config_case() == kDpStSpeedConfig;
}
void ScenarioConfig_ScenarioTaskConfig::set_has_dp_st_speed_config() {
  _oneof_case_[0] = kDpStSpeedConfig;
}
void ScenarioConfig_ScenarioTaskConfig::clear_dp_st_speed_config() {
  if (has_dp_st_speed_config()) {
    delete task_config_.dp_st_speed_config_;
    clear_has_task_config();
  }
}
 const ::apollo::planning::DpStSpeedConfig& ScenarioConfig_ScenarioTaskConfig::dp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
  return has_dp_st_speed_config()
      ? *task_config_.dp_st_speed_config_
      : ::apollo::planning::DpStSpeedConfig::default_instance();
}
::apollo::planning::DpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::mutable_dp_st_speed_config() {
  if (!has_dp_st_speed_config()) {
    clear_task_config();
    set_has_dp_st_speed_config();
    task_config_.dp_st_speed_config_ = new ::apollo::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
  return task_config_.dp_st_speed_config_;
}
::apollo::planning::DpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::release_dp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
  if (has_dp_st_speed_config()) {
    clear_has_task_config();
    ::apollo::planning::DpStSpeedConfig* temp = task_config_.dp_st_speed_config_;
    task_config_.dp_st_speed_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ScenarioConfig_ScenarioTaskConfig::set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config) {
  clear_task_config();
  if (dp_st_speed_config) {
    set_has_dp_st_speed_config();
    task_config_.dp_st_speed_config_ = dp_st_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
}

// optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
bool ScenarioConfig_ScenarioTaskConfig::has_qp_spline_path_config() const {
  return task_config_case() == kQpSplinePathConfig;
}
void ScenarioConfig_ScenarioTaskConfig::set_has_qp_spline_path_config() {
  _oneof_case_[0] = kQpSplinePathConfig;
}
void ScenarioConfig_ScenarioTaskConfig::clear_qp_spline_path_config() {
  if (has_qp_spline_path_config()) {
    delete task_config_.qp_spline_path_config_;
    clear_has_task_config();
  }
}
 const ::apollo::planning::QpSplinePathConfig& ScenarioConfig_ScenarioTaskConfig::qp_spline_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
  return has_qp_spline_path_config()
      ? *task_config_.qp_spline_path_config_
      : ::apollo::planning::QpSplinePathConfig::default_instance();
}
::apollo::planning::QpSplinePathConfig* ScenarioConfig_ScenarioTaskConfig::mutable_qp_spline_path_config() {
  if (!has_qp_spline_path_config()) {
    clear_task_config();
    set_has_qp_spline_path_config();
    task_config_.qp_spline_path_config_ = new ::apollo::planning::QpSplinePathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
  return task_config_.qp_spline_path_config_;
}
::apollo::planning::QpSplinePathConfig* ScenarioConfig_ScenarioTaskConfig::release_qp_spline_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
  if (has_qp_spline_path_config()) {
    clear_has_task_config();
    ::apollo::planning::QpSplinePathConfig* temp = task_config_.qp_spline_path_config_;
    task_config_.qp_spline_path_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ScenarioConfig_ScenarioTaskConfig::set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config) {
  clear_task_config();
  if (qp_spline_path_config) {
    set_has_qp_spline_path_config();
    task_config_.qp_spline_path_config_ = qp_spline_path_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
}

// optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
bool ScenarioConfig_ScenarioTaskConfig::has_qp_st_speed_config() const {
  return task_config_case() == kQpStSpeedConfig;
}
void ScenarioConfig_ScenarioTaskConfig::set_has_qp_st_speed_config() {
  _oneof_case_[0] = kQpStSpeedConfig;
}
void ScenarioConfig_ScenarioTaskConfig::clear_qp_st_speed_config() {
  if (has_qp_st_speed_config()) {
    delete task_config_.qp_st_speed_config_;
    clear_has_task_config();
  }
}
 const ::apollo::planning::QpStSpeedConfig& ScenarioConfig_ScenarioTaskConfig::qp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
  return has_qp_st_speed_config()
      ? *task_config_.qp_st_speed_config_
      : ::apollo::planning::QpStSpeedConfig::default_instance();
}
::apollo::planning::QpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::mutable_qp_st_speed_config() {
  if (!has_qp_st_speed_config()) {
    clear_task_config();
    set_has_qp_st_speed_config();
    task_config_.qp_st_speed_config_ = new ::apollo::planning::QpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
  return task_config_.qp_st_speed_config_;
}
::apollo::planning::QpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::release_qp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
  if (has_qp_st_speed_config()) {
    clear_has_task_config();
    ::apollo::planning::QpStSpeedConfig* temp = task_config_.qp_st_speed_config_;
    task_config_.qp_st_speed_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ScenarioConfig_ScenarioTaskConfig::set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config) {
  clear_task_config();
  if (qp_st_speed_config) {
    set_has_qp_st_speed_config();
    task_config_.qp_st_speed_config_ = qp_st_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
}

// optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
bool ScenarioConfig_ScenarioTaskConfig::has_poly_st_speed_config() const {
  return task_config_case() == kPolyStSpeedConfig;
}
void ScenarioConfig_ScenarioTaskConfig::set_has_poly_st_speed_config() {
  _oneof_case_[0] = kPolyStSpeedConfig;
}
void ScenarioConfig_ScenarioTaskConfig::clear_poly_st_speed_config() {
  if (has_poly_st_speed_config()) {
    delete task_config_.poly_st_speed_config_;
    clear_has_task_config();
  }
}
 const ::apollo::planning::PolyStSpeedConfig& ScenarioConfig_ScenarioTaskConfig::poly_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
  return has_poly_st_speed_config()
      ? *task_config_.poly_st_speed_config_
      : ::apollo::planning::PolyStSpeedConfig::default_instance();
}
::apollo::planning::PolyStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::mutable_poly_st_speed_config() {
  if (!has_poly_st_speed_config()) {
    clear_task_config();
    set_has_poly_st_speed_config();
    task_config_.poly_st_speed_config_ = new ::apollo::planning::PolyStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
  return task_config_.poly_st_speed_config_;
}
::apollo::planning::PolyStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::release_poly_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
  if (has_poly_st_speed_config()) {
    clear_has_task_config();
    ::apollo::planning::PolyStSpeedConfig* temp = task_config_.poly_st_speed_config_;
    task_config_.poly_st_speed_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ScenarioConfig_ScenarioTaskConfig::set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config) {
  clear_task_config();
  if (poly_st_speed_config) {
    set_has_poly_st_speed_config();
    task_config_.poly_st_speed_config_ = poly_st_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
}

// optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
bool ScenarioConfig_ScenarioTaskConfig::has_path_decider_config() const {
  return task_config_case() == kPathDeciderConfig;
}
void ScenarioConfig_ScenarioTaskConfig::set_has_path_decider_config() {
  _oneof_case_[0] = kPathDeciderConfig;
}
void ScenarioConfig_ScenarioTaskConfig::clear_path_decider_config() {
  if (has_path_decider_config()) {
    delete task_config_.path_decider_config_;
    clear_has_task_config();
  }
}
 const ::apollo::planning::PathDeciderConfig& ScenarioConfig_ScenarioTaskConfig::path_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
  return has_path_decider_config()
      ? *task_config_.path_decider_config_
      : ::apollo::planning::PathDeciderConfig::default_instance();
}
::apollo::planning::PathDeciderConfig* ScenarioConfig_ScenarioTaskConfig::mutable_path_decider_config() {
  if (!has_path_decider_config()) {
    clear_task_config();
    set_has_path_decider_config();
    task_config_.path_decider_config_ = new ::apollo::planning::PathDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
  return task_config_.path_decider_config_;
}
::apollo::planning::PathDeciderConfig* ScenarioConfig_ScenarioTaskConfig::release_path_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
  if (has_path_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathDeciderConfig* temp = task_config_.path_decider_config_;
    task_config_.path_decider_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ScenarioConfig_ScenarioTaskConfig::set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config) {
  clear_task_config();
  if (path_decider_config) {
    set_has_path_decider_config();
    task_config_.path_decider_config_ = path_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
}

bool ScenarioConfig_ScenarioTaskConfig::has_task_config() const {
  return task_config_case() != TASK_CONFIG_NOT_SET;
}
void ScenarioConfig_ScenarioTaskConfig::clear_has_task_config() {
  _oneof_case_[0] = TASK_CONFIG_NOT_SET;
}
ScenarioConfig_ScenarioTaskConfig::TaskConfigCase ScenarioConfig_ScenarioTaskConfig::task_config_case() const {
  return ScenarioConfig_ScenarioTaskConfig::TaskConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScenarioConfig

// optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
bool ScenarioConfig::has_scenario_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScenarioConfig::set_has_scenario_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ScenarioConfig::clear_has_scenario_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScenarioConfig::clear_scenario_type() {
  scenario_type_ = 0;
  clear_has_scenario_type();
}
 ::apollo::planning::ScenarioConfig_ScenarioType ScenarioConfig::scenario_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.scenario_type)
  return static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(scenario_type_);
}
 void ScenarioConfig::set_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value) {
  assert(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value));
  set_has_scenario_type();
  scenario_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.scenario_type)
}

// repeated .apollo.planning.ScenarioConfig.ScenarioTaskConfig scenario_task_config = 2;
int ScenarioConfig::scenario_task_config_size() const {
  return scenario_task_config_.size();
}
void ScenarioConfig::clear_scenario_task_config() {
  scenario_task_config_.Clear();
}
const ::apollo::planning::ScenarioConfig_ScenarioTaskConfig& ScenarioConfig::scenario_task_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_.Get(index);
}
::apollo::planning::ScenarioConfig_ScenarioTaskConfig* ScenarioConfig::mutable_scenario_task_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_.Mutable(index);
}
::apollo::planning::ScenarioConfig_ScenarioTaskConfig* ScenarioConfig::add_scenario_task_config() {
  // @@protoc_insertion_point(field_add:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ScenarioConfig_ScenarioTaskConfig >*
ScenarioConfig::mutable_scenario_task_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ScenarioConfig.scenario_task_config)
  return &scenario_task_config_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ScenarioConfig_ScenarioTaskConfig >&
ScenarioConfig::scenario_task_config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerOnRoadConfig::kScenarioTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerOnRoadConfig::PlannerOnRoadConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerOnRoadConfig)
}

void PlannerOnRoadConfig::InitAsDefaultInstance() {
}

PlannerOnRoadConfig::PlannerOnRoadConfig(const PlannerOnRoadConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerOnRoadConfig)
}

void PlannerOnRoadConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerOnRoadConfig::~PlannerOnRoadConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerOnRoadConfig)
  SharedDtor();
}

void PlannerOnRoadConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlannerOnRoadConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerOnRoadConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerOnRoadConfig_descriptor_;
}

const PlannerOnRoadConfig& PlannerOnRoadConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

PlannerOnRoadConfig* PlannerOnRoadConfig::default_instance_ = NULL;

PlannerOnRoadConfig* PlannerOnRoadConfig::New(::google::protobuf::Arena* arena) const {
  PlannerOnRoadConfig* n = new PlannerOnRoadConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlannerOnRoadConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerOnRoadConfig)
  scenario_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlannerOnRoadConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlannerOnRoadConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1: {
        if (tag == 8) {
         parse_scenario_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value)) {
            add_scenario_type(static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::ScenarioConfig_ScenarioType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_scenario_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_scenario_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlannerOnRoadConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlannerOnRoadConfig)
  return false;
#undef DO_
}

void PlannerOnRoadConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlannerOnRoadConfig)
  // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  for (int i = 0; i < this->scenario_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scenario_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlannerOnRoadConfig)
}

::google::protobuf::uint8* PlannerOnRoadConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerOnRoadConfig)
  // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  for (int i = 0; i < this->scenario_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scenario_type(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerOnRoadConfig)
  return target;
}

int PlannerOnRoadConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerOnRoadConfig)
  int total_size = 0;

  // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->scenario_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->scenario_type(i));
    }
    total_size += 1 * this->scenario_type_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerOnRoadConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerOnRoadConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlannerOnRoadConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlannerOnRoadConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerOnRoadConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerOnRoadConfig)
    MergeFrom(*source);
  }
}

void PlannerOnRoadConfig::MergeFrom(const PlannerOnRoadConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerOnRoadConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  scenario_type_.MergeFrom(from.scenario_type_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlannerOnRoadConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerOnRoadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerOnRoadConfig::CopyFrom(const PlannerOnRoadConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerOnRoadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOnRoadConfig::IsInitialized() const {

  return true;
}

void PlannerOnRoadConfig::Swap(PlannerOnRoadConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerOnRoadConfig::InternalSwap(PlannerOnRoadConfig* other) {
  scenario_type_.UnsafeArenaSwap(&other->scenario_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlannerOnRoadConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerOnRoadConfig_descriptor_;
  metadata.reflection = PlannerOnRoadConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlannerOnRoadConfig

// repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
int PlannerOnRoadConfig::scenario_type_size() const {
  return scenario_type_.size();
}
void PlannerOnRoadConfig::clear_scenario_type() {
  scenario_type_.Clear();
}
 ::apollo::planning::ScenarioConfig_ScenarioType PlannerOnRoadConfig::scenario_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOnRoadConfig.scenario_type)
  return static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(scenario_type_.Get(index));
}
 void PlannerOnRoadConfig::set_scenario_type(int index, ::apollo::planning::ScenarioConfig_ScenarioType value) {
  assert(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value));
  scenario_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOnRoadConfig.scenario_type)
}
 void PlannerOnRoadConfig::add_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value) {
  assert(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value));
  scenario_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.PlannerOnRoadConfig.scenario_type)
}
 const ::google::protobuf::RepeatedField<int>&
PlannerOnRoadConfig::scenario_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlannerOnRoadConfig.scenario_type)
  return scenario_type_;
}
 ::google::protobuf::RepeatedField<int>*
PlannerOnRoadConfig::mutable_scenario_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlannerOnRoadConfig.scenario_type)
  return &scenario_type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerNaviConfig::kTaskFieldNumber;
const int PlannerNaviConfig::kNaviPathDeciderConfigFieldNumber;
const int PlannerNaviConfig::kNaviSpeedDeciderConfigFieldNumber;
const int PlannerNaviConfig::kNaviObstacleDeciderConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerNaviConfig::PlannerNaviConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerNaviConfig)
}

void PlannerNaviConfig::InitAsDefaultInstance() {
  navi_path_decider_config_ = const_cast< ::apollo::planning::NaviPathDeciderConfig*>(&::apollo::planning::NaviPathDeciderConfig::default_instance());
  navi_speed_decider_config_ = const_cast< ::apollo::planning::NaviSpeedDeciderConfig*>(&::apollo::planning::NaviSpeedDeciderConfig::default_instance());
  navi_obstacle_decider_config_ = const_cast< ::apollo::planning::NaviObstacleDeciderConfig*>(&::apollo::planning::NaviObstacleDeciderConfig::default_instance());
}

PlannerNaviConfig::PlannerNaviConfig(const PlannerNaviConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerNaviConfig)
}

void PlannerNaviConfig::SharedCtor() {
  _cached_size_ = 0;
  navi_path_decider_config_ = NULL;
  navi_speed_decider_config_ = NULL;
  navi_obstacle_decider_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlannerNaviConfig::~PlannerNaviConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerNaviConfig)
  SharedDtor();
}

void PlannerNaviConfig::SharedDtor() {
  if (this != default_instance_) {
    delete navi_path_decider_config_;
    delete navi_speed_decider_config_;
    delete navi_obstacle_decider_config_;
  }
}

void PlannerNaviConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerNaviConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlannerNaviConfig_descriptor_;
}

const PlannerNaviConfig& PlannerNaviConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

PlannerNaviConfig* PlannerNaviConfig::default_instance_ = NULL;

PlannerNaviConfig* PlannerNaviConfig::New(::google::protobuf::Arena* arena) const {
  PlannerNaviConfig* n = new PlannerNaviConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlannerNaviConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerNaviConfig)
  if (_has_bits_[0 / 32] & 14u) {
    if (has_navi_path_decider_config()) {
      if (navi_path_decider_config_ != NULL) navi_path_decider_config_->::apollo::planning::NaviPathDeciderConfig::Clear();
    }
    if (has_navi_speed_decider_config()) {
      if (navi_speed_decider_config_ != NULL) navi_speed_decider_config_->::apollo::planning::NaviSpeedDeciderConfig::Clear();
    }
    if (has_navi_obstacle_decider_config()) {
      if (navi_obstacle_decider_config_ != NULL) navi_obstacle_decider_config_->::apollo::planning::NaviObstacleDeciderConfig::Clear();
    }
  }
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlannerNaviConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlannerNaviConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.TaskType task = 1;
      case 1: {
        if (tag == 8) {
         parse_task:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TaskType_IsValid(value)) {
            add_task(static_cast< ::apollo::planning::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::TaskType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_task())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_task;
        if (input->ExpectTag(18)) goto parse_navi_path_decider_config;
        break;
      }

      // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
      case 2: {
        if (tag == 18) {
         parse_navi_path_decider_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navi_path_decider_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_navi_speed_decider_config;
        break;
      }

      // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
      case 3: {
        if (tag == 26) {
         parse_navi_speed_decider_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navi_speed_decider_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_navi_obstacle_decider_config;
        break;
      }

      // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
      case 4: {
        if (tag == 34) {
         parse_navi_obstacle_decider_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navi_obstacle_decider_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlannerNaviConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlannerNaviConfig)
  return false;
#undef DO_
}

void PlannerNaviConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlannerNaviConfig)
  // repeated .apollo.planning.TaskType task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task(i), output);
  }

  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  if (has_navi_path_decider_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->navi_path_decider_config_, output);
  }

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  if (has_navi_speed_decider_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->navi_speed_decider_config_, output);
  }

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  if (has_navi_obstacle_decider_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->navi_obstacle_decider_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlannerNaviConfig)
}

::google::protobuf::uint8* PlannerNaviConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerNaviConfig)
  // repeated .apollo.planning.TaskType task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->task(i), target);
  }

  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  if (has_navi_path_decider_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->navi_path_decider_config_, false, target);
  }

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  if (has_navi_speed_decider_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->navi_speed_decider_config_, false, target);
  }

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  if (has_navi_obstacle_decider_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->navi_obstacle_decider_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerNaviConfig)
  return target;
}

int PlannerNaviConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerNaviConfig)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 14u) {
    // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
    if (has_navi_path_decider_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->navi_path_decider_config_);
    }

    // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
    if (has_navi_speed_decider_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->navi_speed_decider_config_);
    }

    // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
    if (has_navi_obstacle_decider_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->navi_obstacle_decider_config_);
    }

  }
  // repeated .apollo.planning.TaskType task = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->task(i));
    }
    total_size += 1 * this->task_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerNaviConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerNaviConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlannerNaviConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlannerNaviConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerNaviConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerNaviConfig)
    MergeFrom(*source);
  }
}

void PlannerNaviConfig::MergeFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerNaviConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  task_.MergeFrom(from.task_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_navi_path_decider_config()) {
      mutable_navi_path_decider_config()->::apollo::planning::NaviPathDeciderConfig::MergeFrom(from.navi_path_decider_config());
    }
    if (from.has_navi_speed_decider_config()) {
      mutable_navi_speed_decider_config()->::apollo::planning::NaviSpeedDeciderConfig::MergeFrom(from.navi_speed_decider_config());
    }
    if (from.has_navi_obstacle_decider_config()) {
      mutable_navi_obstacle_decider_config()->::apollo::planning::NaviObstacleDeciderConfig::MergeFrom(from.navi_obstacle_decider_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlannerNaviConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerNaviConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerNaviConfig::CopyFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerNaviConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerNaviConfig::IsInitialized() const {

  return true;
}

void PlannerNaviConfig::Swap(PlannerNaviConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerNaviConfig::InternalSwap(PlannerNaviConfig* other) {
  task_.UnsafeArenaSwap(&other->task_);
  std::swap(navi_path_decider_config_, other->navi_path_decider_config_);
  std::swap(navi_speed_decider_config_, other->navi_speed_decider_config_);
  std::swap(navi_obstacle_decider_config_, other->navi_obstacle_decider_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlannerNaviConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlannerNaviConfig_descriptor_;
  metadata.reflection = PlannerNaviConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlannerNaviConfig

// repeated .apollo.planning.TaskType task = 1;
int PlannerNaviConfig::task_size() const {
  return task_.size();
}
void PlannerNaviConfig::clear_task() {
  task_.Clear();
}
 ::apollo::planning::TaskType PlannerNaviConfig::task(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.task)
  return static_cast< ::apollo::planning::TaskType >(task_.Get(index));
}
 void PlannerNaviConfig::set_task(int index, ::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerNaviConfig.task)
}
 void PlannerNaviConfig::add_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.PlannerNaviConfig.task)
}
 const ::google::protobuf::RepeatedField<int>&
PlannerNaviConfig::task() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlannerNaviConfig.task)
  return task_;
}
 ::google::protobuf::RepeatedField<int>*
PlannerNaviConfig::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlannerNaviConfig.task)
  return &task_;
}

// optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
bool PlannerNaviConfig::has_navi_path_decider_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlannerNaviConfig::set_has_navi_path_decider_config() {
  _has_bits_[0] |= 0x00000002u;
}
void PlannerNaviConfig::clear_has_navi_path_decider_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlannerNaviConfig::clear_navi_path_decider_config() {
  if (navi_path_decider_config_ != NULL) navi_path_decider_config_->::apollo::planning::NaviPathDeciderConfig::Clear();
  clear_has_navi_path_decider_config();
}
const ::apollo::planning::NaviPathDeciderConfig& PlannerNaviConfig::navi_path_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  return navi_path_decider_config_ != NULL ? *navi_path_decider_config_ : *default_instance_->navi_path_decider_config_;
}
::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::mutable_navi_path_decider_config() {
  set_has_navi_path_decider_config();
  if (navi_path_decider_config_ == NULL) {
    navi_path_decider_config_ = new ::apollo::planning::NaviPathDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  return navi_path_decider_config_;
}
::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::release_navi_path_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  clear_has_navi_path_decider_config();
  ::apollo::planning::NaviPathDeciderConfig* temp = navi_path_decider_config_;
  navi_path_decider_config_ = NULL;
  return temp;
}
void PlannerNaviConfig::set_allocated_navi_path_decider_config(::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config) {
  delete navi_path_decider_config_;
  navi_path_decider_config_ = navi_path_decider_config;
  if (navi_path_decider_config) {
    set_has_navi_path_decider_config();
  } else {
    clear_has_navi_path_decider_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
}

// optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
bool PlannerNaviConfig::has_navi_speed_decider_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlannerNaviConfig::set_has_navi_speed_decider_config() {
  _has_bits_[0] |= 0x00000004u;
}
void PlannerNaviConfig::clear_has_navi_speed_decider_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlannerNaviConfig::clear_navi_speed_decider_config() {
  if (navi_speed_decider_config_ != NULL) navi_speed_decider_config_->::apollo::planning::NaviSpeedDeciderConfig::Clear();
  clear_has_navi_speed_decider_config();
}
const ::apollo::planning::NaviSpeedDeciderConfig& PlannerNaviConfig::navi_speed_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  return navi_speed_decider_config_ != NULL ? *navi_speed_decider_config_ : *default_instance_->navi_speed_decider_config_;
}
::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::mutable_navi_speed_decider_config() {
  set_has_navi_speed_decider_config();
  if (navi_speed_decider_config_ == NULL) {
    navi_speed_decider_config_ = new ::apollo::planning::NaviSpeedDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  return navi_speed_decider_config_;
}
::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::release_navi_speed_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  clear_has_navi_speed_decider_config();
  ::apollo::planning::NaviSpeedDeciderConfig* temp = navi_speed_decider_config_;
  navi_speed_decider_config_ = NULL;
  return temp;
}
void PlannerNaviConfig::set_allocated_navi_speed_decider_config(::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config) {
  delete navi_speed_decider_config_;
  navi_speed_decider_config_ = navi_speed_decider_config;
  if (navi_speed_decider_config) {
    set_has_navi_speed_decider_config();
  } else {
    clear_has_navi_speed_decider_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
}

// optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
bool PlannerNaviConfig::has_navi_obstacle_decider_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlannerNaviConfig::set_has_navi_obstacle_decider_config() {
  _has_bits_[0] |= 0x00000008u;
}
void PlannerNaviConfig::clear_has_navi_obstacle_decider_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlannerNaviConfig::clear_navi_obstacle_decider_config() {
  if (navi_obstacle_decider_config_ != NULL) navi_obstacle_decider_config_->::apollo::planning::NaviObstacleDeciderConfig::Clear();
  clear_has_navi_obstacle_decider_config();
}
const ::apollo::planning::NaviObstacleDeciderConfig& PlannerNaviConfig::navi_obstacle_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  return navi_obstacle_decider_config_ != NULL ? *navi_obstacle_decider_config_ : *default_instance_->navi_obstacle_decider_config_;
}
::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::mutable_navi_obstacle_decider_config() {
  set_has_navi_obstacle_decider_config();
  if (navi_obstacle_decider_config_ == NULL) {
    navi_obstacle_decider_config_ = new ::apollo::planning::NaviObstacleDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  return navi_obstacle_decider_config_;
}
::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::release_navi_obstacle_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  clear_has_navi_obstacle_decider_config();
  ::apollo::planning::NaviObstacleDeciderConfig* temp = navi_obstacle_decider_config_;
  navi_obstacle_decider_config_ = NULL;
  return temp;
}
void PlannerNaviConfig::set_allocated_navi_obstacle_decider_config(::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config) {
  delete navi_obstacle_decider_config_;
  navi_obstacle_decider_config_ = navi_obstacle_decider_config;
  if (navi_obstacle_decider_config) {
    set_has_navi_obstacle_decider_config();
  } else {
    clear_has_navi_obstacle_decider_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtkPlanningConfig::kPlannerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtkPlanningConfig::RtkPlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RtkPlanningConfig)
}

void RtkPlanningConfig::InitAsDefaultInstance() {
}

RtkPlanningConfig::RtkPlanningConfig(const RtkPlanningConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RtkPlanningConfig)
}

void RtkPlanningConfig::SharedCtor() {
  _cached_size_ = 0;
  planner_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtkPlanningConfig::~RtkPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RtkPlanningConfig)
  SharedDtor();
}

void RtkPlanningConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtkPlanningConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtkPlanningConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtkPlanningConfig_descriptor_;
}

const RtkPlanningConfig& RtkPlanningConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

RtkPlanningConfig* RtkPlanningConfig::default_instance_ = NULL;

RtkPlanningConfig* RtkPlanningConfig::New(::google::protobuf::Arena* arena) const {
  RtkPlanningConfig* n = new RtkPlanningConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtkPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RtkPlanningConfig)
  planner_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RtkPlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RtkPlanningConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.PlannerType planner_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlannerType_IsValid(value)) {
            set_planner_type(static_cast< ::apollo::planning::PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RtkPlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RtkPlanningConfig)
  return false;
#undef DO_
}

void RtkPlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RtkPlanningConfig)
  // optional .apollo.planning.PlannerType planner_type = 1;
  if (has_planner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RtkPlanningConfig)
}

::google::protobuf::uint8* RtkPlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RtkPlanningConfig)
  // optional .apollo.planning.PlannerType planner_type = 1;
  if (has_planner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->planner_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RtkPlanningConfig)
  return target;
}

int RtkPlanningConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RtkPlanningConfig)
  int total_size = 0;

  // optional .apollo.planning.PlannerType planner_type = 1;
  if (has_planner_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->planner_type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtkPlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RtkPlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RtkPlanningConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RtkPlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RtkPlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RtkPlanningConfig)
    MergeFrom(*source);
  }
}

void RtkPlanningConfig::MergeFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RtkPlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_planner_type()) {
      set_planner_type(from.planner_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RtkPlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RtkPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtkPlanningConfig::CopyFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RtkPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtkPlanningConfig::IsInitialized() const {

  return true;
}

void RtkPlanningConfig::Swap(RtkPlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtkPlanningConfig::InternalSwap(RtkPlanningConfig* other) {
  std::swap(planner_type_, other->planner_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtkPlanningConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtkPlanningConfig_descriptor_;
  metadata.reflection = RtkPlanningConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtkPlanningConfig

// optional .apollo.planning.PlannerType planner_type = 1;
bool RtkPlanningConfig::has_planner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtkPlanningConfig::set_has_planner_type() {
  _has_bits_[0] |= 0x00000001u;
}
void RtkPlanningConfig::clear_has_planner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtkPlanningConfig::clear_planner_type() {
  planner_type_ = 0;
  clear_has_planner_type();
}
 ::apollo::planning::PlannerType RtkPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RtkPlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_);
}
 void RtkPlanningConfig::set_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  set_has_planner_type();
  planner_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RtkPlanningConfig.planner_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StandardPlanningConfig::kPlannerTypeFieldNumber;
const int StandardPlanningConfig::kPlannerOnroadConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StandardPlanningConfig::StandardPlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StandardPlanningConfig)
}

void StandardPlanningConfig::InitAsDefaultInstance() {
  planner_onroad_config_ = const_cast< ::apollo::planning::PlannerOnRoadConfig*>(&::apollo::planning::PlannerOnRoadConfig::default_instance());
}

StandardPlanningConfig::StandardPlanningConfig(const StandardPlanningConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StandardPlanningConfig)
}

void StandardPlanningConfig::SharedCtor() {
  _cached_size_ = 0;
  planner_onroad_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StandardPlanningConfig::~StandardPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StandardPlanningConfig)
  SharedDtor();
}

void StandardPlanningConfig::SharedDtor() {
  if (this != default_instance_) {
    delete planner_onroad_config_;
  }
}

void StandardPlanningConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StandardPlanningConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StandardPlanningConfig_descriptor_;
}

const StandardPlanningConfig& StandardPlanningConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

StandardPlanningConfig* StandardPlanningConfig::default_instance_ = NULL;

StandardPlanningConfig* StandardPlanningConfig::New(::google::protobuf::Arena* arena) const {
  StandardPlanningConfig* n = new StandardPlanningConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StandardPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StandardPlanningConfig)
  if (has_planner_onroad_config()) {
    if (planner_onroad_config_ != NULL) planner_onroad_config_->::apollo::planning::PlannerOnRoadConfig::Clear();
  }
  planner_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StandardPlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StandardPlanningConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1: {
        if (tag == 8) {
         parse_planner_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlannerType_IsValid(value)) {
            add_planner_type(static_cast< ::apollo::planning::PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::PlannerType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_planner_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_planner_type;
        if (input->ExpectTag(18)) goto parse_planner_onroad_config;
        break;
      }

      // optional .apollo.planning.PlannerOnRoadConfig planner_onroad_config = 2;
      case 2: {
        if (tag == 18) {
         parse_planner_onroad_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planner_onroad_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StandardPlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StandardPlanningConfig)
  return false;
#undef DO_
}

void StandardPlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StandardPlanningConfig)
  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0; i < this->planner_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(i), output);
  }

  // optional .apollo.planning.PlannerOnRoadConfig planner_onroad_config = 2;
  if (has_planner_onroad_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planner_onroad_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StandardPlanningConfig)
}

::google::protobuf::uint8* StandardPlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StandardPlanningConfig)
  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0; i < this->planner_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->planner_type(i), target);
  }

  // optional .apollo.planning.PlannerOnRoadConfig planner_onroad_config = 2;
  if (has_planner_onroad_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planner_onroad_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StandardPlanningConfig)
  return target;
}

int StandardPlanningConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StandardPlanningConfig)
  int total_size = 0;

  // optional .apollo.planning.PlannerOnRoadConfig planner_onroad_config = 2;
  if (has_planner_onroad_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planner_onroad_config_);
  }

  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->planner_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->planner_type(i));
    }
    total_size += 1 * this->planner_type_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StandardPlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StandardPlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StandardPlanningConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StandardPlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StandardPlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StandardPlanningConfig)
    MergeFrom(*source);
  }
}

void StandardPlanningConfig::MergeFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StandardPlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  planner_type_.MergeFrom(from.planner_type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_planner_onroad_config()) {
      mutable_planner_onroad_config()->::apollo::planning::PlannerOnRoadConfig::MergeFrom(from.planner_onroad_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StandardPlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StandardPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardPlanningConfig::CopyFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StandardPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardPlanningConfig::IsInitialized() const {

  return true;
}

void StandardPlanningConfig::Swap(StandardPlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StandardPlanningConfig::InternalSwap(StandardPlanningConfig* other) {
  planner_type_.UnsafeArenaSwap(&other->planner_type_);
  std::swap(planner_onroad_config_, other->planner_onroad_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StandardPlanningConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StandardPlanningConfig_descriptor_;
  metadata.reflection = StandardPlanningConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StandardPlanningConfig

// repeated .apollo.planning.PlannerType planner_type = 1;
int StandardPlanningConfig::planner_type_size() const {
  return planner_type_.size();
}
void StandardPlanningConfig::clear_planner_type() {
  planner_type_.Clear();
}
 ::apollo::planning::PlannerType StandardPlanningConfig::planner_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.StandardPlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_.Get(index));
}
 void StandardPlanningConfig::set_planner_type(int index, ::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.StandardPlanningConfig.planner_type)
}
 void StandardPlanningConfig::add_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.StandardPlanningConfig.planner_type)
}
 const ::google::protobuf::RepeatedField<int>&
StandardPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.StandardPlanningConfig.planner_type)
  return planner_type_;
}
 ::google::protobuf::RepeatedField<int>*
StandardPlanningConfig::mutable_planner_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.StandardPlanningConfig.planner_type)
  return &planner_type_;
}

// optional .apollo.planning.PlannerOnRoadConfig planner_onroad_config = 2;
bool StandardPlanningConfig::has_planner_onroad_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StandardPlanningConfig::set_has_planner_onroad_config() {
  _has_bits_[0] |= 0x00000002u;
}
void StandardPlanningConfig::clear_has_planner_onroad_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void StandardPlanningConfig::clear_planner_onroad_config() {
  if (planner_onroad_config_ != NULL) planner_onroad_config_->::apollo::planning::PlannerOnRoadConfig::Clear();
  clear_has_planner_onroad_config();
}
const ::apollo::planning::PlannerOnRoadConfig& StandardPlanningConfig::planner_onroad_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StandardPlanningConfig.planner_onroad_config)
  return planner_onroad_config_ != NULL ? *planner_onroad_config_ : *default_instance_->planner_onroad_config_;
}
::apollo::planning::PlannerOnRoadConfig* StandardPlanningConfig::mutable_planner_onroad_config() {
  set_has_planner_onroad_config();
  if (planner_onroad_config_ == NULL) {
    planner_onroad_config_ = new ::apollo::planning::PlannerOnRoadConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.StandardPlanningConfig.planner_onroad_config)
  return planner_onroad_config_;
}
::apollo::planning::PlannerOnRoadConfig* StandardPlanningConfig::release_planner_onroad_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.StandardPlanningConfig.planner_onroad_config)
  clear_has_planner_onroad_config();
  ::apollo::planning::PlannerOnRoadConfig* temp = planner_onroad_config_;
  planner_onroad_config_ = NULL;
  return temp;
}
void StandardPlanningConfig::set_allocated_planner_onroad_config(::apollo::planning::PlannerOnRoadConfig* planner_onroad_config) {
  delete planner_onroad_config_;
  planner_onroad_config_ = planner_onroad_config;
  if (planner_onroad_config) {
    set_has_planner_onroad_config();
  } else {
    clear_has_planner_onroad_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.StandardPlanningConfig.planner_onroad_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationPlanningConfig::kPlannerTypeFieldNumber;
const int NavigationPlanningConfig::kPlannerNaviConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationPlanningConfig::NavigationPlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NavigationPlanningConfig)
}

void NavigationPlanningConfig::InitAsDefaultInstance() {
  planner_navi_config_ = const_cast< ::apollo::planning::PlannerNaviConfig*>(&::apollo::planning::PlannerNaviConfig::default_instance());
}

NavigationPlanningConfig::NavigationPlanningConfig(const NavigationPlanningConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NavigationPlanningConfig)
}

void NavigationPlanningConfig::SharedCtor() {
  _cached_size_ = 0;
  planner_navi_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavigationPlanningConfig::~NavigationPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NavigationPlanningConfig)
  SharedDtor();
}

void NavigationPlanningConfig::SharedDtor() {
  if (this != default_instance_) {
    delete planner_navi_config_;
  }
}

void NavigationPlanningConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationPlanningConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationPlanningConfig_descriptor_;
}

const NavigationPlanningConfig& NavigationPlanningConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

NavigationPlanningConfig* NavigationPlanningConfig::default_instance_ = NULL;

NavigationPlanningConfig* NavigationPlanningConfig::New(::google::protobuf::Arena* arena) const {
  NavigationPlanningConfig* n = new NavigationPlanningConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NavigationPlanningConfig)
  if (has_planner_navi_config()) {
    if (planner_navi_config_ != NULL) planner_navi_config_->::apollo::planning::PlannerNaviConfig::Clear();
  }
  planner_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NavigationPlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.NavigationPlanningConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1: {
        if (tag == 8) {
         parse_planner_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlannerType_IsValid(value)) {
            add_planner_type(static_cast< ::apollo::planning::PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::PlannerType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_planner_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_planner_type;
        if (input->ExpectTag(34)) goto parse_planner_navi_config;
        break;
      }

      // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
      case 4: {
        if (tag == 34) {
         parse_planner_navi_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planner_navi_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.NavigationPlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.NavigationPlanningConfig)
  return false;
#undef DO_
}

void NavigationPlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.NavigationPlanningConfig)
  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0; i < this->planner_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(i), output);
  }

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (has_planner_navi_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->planner_navi_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.NavigationPlanningConfig)
}

::google::protobuf::uint8* NavigationPlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NavigationPlanningConfig)
  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0; i < this->planner_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->planner_type(i), target);
  }

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (has_planner_navi_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->planner_navi_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NavigationPlanningConfig)
  return target;
}

int NavigationPlanningConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NavigationPlanningConfig)
  int total_size = 0;

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (has_planner_navi_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planner_navi_config_);
  }

  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->planner_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->planner_type(i));
    }
    total_size += 1 * this->planner_type_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationPlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NavigationPlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NavigationPlanningConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationPlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NavigationPlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NavigationPlanningConfig)
    MergeFrom(*source);
  }
}

void NavigationPlanningConfig::MergeFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NavigationPlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  planner_type_.MergeFrom(from.planner_type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_planner_navi_config()) {
      mutable_planner_navi_config()->::apollo::planning::PlannerNaviConfig::MergeFrom(from.planner_navi_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NavigationPlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NavigationPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPlanningConfig::CopyFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NavigationPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPlanningConfig::IsInitialized() const {

  return true;
}

void NavigationPlanningConfig::Swap(NavigationPlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationPlanningConfig::InternalSwap(NavigationPlanningConfig* other) {
  planner_type_.UnsafeArenaSwap(&other->planner_type_);
  std::swap(planner_navi_config_, other->planner_navi_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationPlanningConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavigationPlanningConfig_descriptor_;
  metadata.reflection = NavigationPlanningConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationPlanningConfig

// repeated .apollo.planning.PlannerType planner_type = 1;
int NavigationPlanningConfig::planner_type_size() const {
  return planner_type_.size();
}
void NavigationPlanningConfig::clear_planner_type() {
  planner_type_.Clear();
}
 ::apollo::planning::PlannerType NavigationPlanningConfig::planner_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.NavigationPlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_.Get(index));
}
 void NavigationPlanningConfig::set_planner_type(int index, ::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.NavigationPlanningConfig.planner_type)
}
 void NavigationPlanningConfig::add_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.NavigationPlanningConfig.planner_type)
}
 const ::google::protobuf::RepeatedField<int>&
NavigationPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.NavigationPlanningConfig.planner_type)
  return planner_type_;
}
 ::google::protobuf::RepeatedField<int>*
NavigationPlanningConfig::mutable_planner_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.NavigationPlanningConfig.planner_type)
  return &planner_type_;
}

// optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
bool NavigationPlanningConfig::has_planner_navi_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NavigationPlanningConfig::set_has_planner_navi_config() {
  _has_bits_[0] |= 0x00000002u;
}
void NavigationPlanningConfig::clear_has_planner_navi_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void NavigationPlanningConfig::clear_planner_navi_config() {
  if (planner_navi_config_ != NULL) planner_navi_config_->::apollo::planning::PlannerNaviConfig::Clear();
  clear_has_planner_navi_config();
}
const ::apollo::planning::PlannerNaviConfig& NavigationPlanningConfig::planner_navi_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  return planner_navi_config_ != NULL ? *planner_navi_config_ : *default_instance_->planner_navi_config_;
}
::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::mutable_planner_navi_config() {
  set_has_planner_navi_config();
  if (planner_navi_config_ == NULL) {
    planner_navi_config_ = new ::apollo::planning::PlannerNaviConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  return planner_navi_config_;
}
::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::release_planner_navi_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  clear_has_planner_navi_config();
  ::apollo::planning::PlannerNaviConfig* temp = planner_navi_config_;
  planner_navi_config_ = NULL;
  return temp;
}
void NavigationPlanningConfig::set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config) {
  delete planner_navi_config_;
  planner_navi_config_ = planner_navi_config;
  if (planner_navi_config) {
    set_has_planner_navi_config();
  } else {
    clear_has_planner_navi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NavigationPlanningConfig.planner_navi_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningConfig::kPlannerTypeFieldNumber;
const int PlanningConfig::kPlannerNaviConfigFieldNumber;
const int PlanningConfig::kRtkPlanningConfigFieldNumber;
const int PlanningConfig::kStandardPlanningConfigFieldNumber;
const int PlanningConfig::kNavigationPlanningConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningConfig::PlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningConfig)
}

void PlanningConfig::InitAsDefaultInstance() {
  planner_navi_config_ = const_cast< ::apollo::planning::PlannerNaviConfig*>(&::apollo::planning::PlannerNaviConfig::default_instance());
  PlanningConfig_default_oneof_instance_->rtk_planning_config_ = const_cast< ::apollo::planning::RtkPlanningConfig*>(&::apollo::planning::RtkPlanningConfig::default_instance());
  PlanningConfig_default_oneof_instance_->standard_planning_config_ = const_cast< ::apollo::planning::StandardPlanningConfig*>(&::apollo::planning::StandardPlanningConfig::default_instance());
  PlanningConfig_default_oneof_instance_->navigation_planning_config_ = const_cast< ::apollo::planning::NavigationPlanningConfig*>(&::apollo::planning::NavigationPlanningConfig::default_instance());
}

PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningConfig)
}

void PlanningConfig::SharedCtor() {
  _cached_size_ = 0;
  planner_type_ = 0;
  planner_navi_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_planning_config();
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningConfig)
  SharedDtor();
}

void PlanningConfig::SharedDtor() {
  if (has_planning_config()) {
    clear_planning_config();
  }
  if (this != default_instance_) {
    delete planner_navi_config_;
  }
}

void PlanningConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningConfig_descriptor_;
}

const PlanningConfig& PlanningConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  return *default_instance_;
}

PlanningConfig* PlanningConfig::default_instance_ = NULL;

PlanningConfig* PlanningConfig::New(::google::protobuf::Arena* arena) const {
  PlanningConfig* n = new PlanningConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningConfig::clear_planning_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.PlanningConfig)
  switch(planning_config_case()) {
    case kRtkPlanningConfig: {
      delete planning_config_.rtk_planning_config_;
      break;
    }
    case kStandardPlanningConfig: {
      delete planning_config_.standard_planning_config_;
      break;
    }
    case kNavigationPlanningConfig: {
      delete planning_config_.navigation_planning_config_;
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PLANNING_CONFIG_NOT_SET;
}


void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningConfig)
  if (_has_bits_[0 / 32] & 3u) {
    planner_type_ = 0;
    if (has_planner_navi_config()) {
      if (planner_navi_config_ != NULL) planner_navi_config_->::apollo::planning::PlannerNaviConfig::Clear();
    }
  }
  clear_planning_config();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.PlannerType planner_type = 1 [deprecated = true];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlannerType_IsValid(value)) {
            set_planner_type(static_cast< ::apollo::planning::PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_planner_navi_config;
        break;
      }

      // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 2;
      case 2: {
        if (tag == 18) {
         parse_planner_navi_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planner_navi_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rtk_planning_config;
        break;
      }

      // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
      case 3: {
        if (tag == 26) {
         parse_rtk_planning_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtk_planning_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_standard_planning_config;
        break;
      }

      // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
      case 4: {
        if (tag == 34) {
         parse_standard_planning_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_planning_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_navigation_planning_config;
        break;
      }

      // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
      case 5: {
        if (tag == 42) {
         parse_navigation_planning_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navigation_planning_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningConfig)
  return false;
#undef DO_
}

void PlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningConfig)
  // optional .apollo.planning.PlannerType planner_type = 1 [deprecated = true];
  if (has_planner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(), output);
  }

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 2;
  if (has_planner_navi_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planner_navi_config_, output);
  }

  // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
  if (has_rtk_planning_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *planning_config_.rtk_planning_config_, output);
  }

  // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
  if (has_standard_planning_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *planning_config_.standard_planning_config_, output);
  }

  // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
  if (has_navigation_planning_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *planning_config_.navigation_planning_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningConfig)
}

::google::protobuf::uint8* PlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningConfig)
  // optional .apollo.planning.PlannerType planner_type = 1 [deprecated = true];
  if (has_planner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->planner_type(), target);
  }

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 2;
  if (has_planner_navi_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planner_navi_config_, false, target);
  }

  // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
  if (has_rtk_planning_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *planning_config_.rtk_planning_config_, false, target);
  }

  // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
  if (has_standard_planning_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *planning_config_.standard_planning_config_, false, target);
  }

  // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
  if (has_navigation_planning_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *planning_config_.navigation_planning_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningConfig)
  return target;
}

int PlanningConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.PlannerType planner_type = 1 [deprecated = true];
    if (has_planner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->planner_type());
    }

    // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 2;
    if (has_planner_navi_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->planner_navi_config_);
    }

  }
  switch (planning_config_case()) {
    // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
    case kRtkPlanningConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *planning_config_.rtk_planning_config_);
      break;
    }
    // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
    case kStandardPlanningConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *planning_config_.standard_planning_config_);
      break;
    }
    // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
    case kNavigationPlanningConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *planning_config_.navigation_planning_config_);
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlanningConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningConfig)
    MergeFrom(*source);
  }
}

void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.planning_config_case()) {
    case kRtkPlanningConfig: {
      mutable_rtk_planning_config()->::apollo::planning::RtkPlanningConfig::MergeFrom(from.rtk_planning_config());
      break;
    }
    case kStandardPlanningConfig: {
      mutable_standard_planning_config()->::apollo::planning::StandardPlanningConfig::MergeFrom(from.standard_planning_config());
      break;
    }
    case kNavigationPlanningConfig: {
      mutable_navigation_planning_config()->::apollo::planning::NavigationPlanningConfig::MergeFrom(from.navigation_planning_config());
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_planner_type()) {
      set_planner_type(from.planner_type());
    }
    if (from.has_planner_navi_config()) {
      mutable_planner_navi_config()->::apollo::planning::PlannerNaviConfig::MergeFrom(from.planner_navi_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {

  return true;
}

void PlanningConfig::Swap(PlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningConfig::InternalSwap(PlanningConfig* other) {
  std::swap(planner_type_, other->planner_type_);
  std::swap(planner_navi_config_, other->planner_navi_config_);
  std::swap(planning_config_, other->planning_config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningConfig_descriptor_;
  metadata.reflection = PlanningConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningConfig

// optional .apollo.planning.PlannerType planner_type = 1 [deprecated = true];
bool PlanningConfig::has_planner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningConfig::set_has_planner_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningConfig::clear_has_planner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningConfig::clear_planner_type() {
  planner_type_ = 0;
  clear_has_planner_type();
}
 ::apollo::planning::PlannerType PlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_);
}
 void PlanningConfig::set_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  set_has_planner_type();
  planner_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningConfig.planner_type)
}

// optional .apollo.planning.PlannerNaviConfig planner_navi_config = 2;
bool PlanningConfig::has_planner_navi_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningConfig::set_has_planner_navi_config() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningConfig::clear_has_planner_navi_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningConfig::clear_planner_navi_config() {
  if (planner_navi_config_ != NULL) planner_navi_config_->::apollo::planning::PlannerNaviConfig::Clear();
  clear_has_planner_navi_config();
}
const ::apollo::planning::PlannerNaviConfig& PlanningConfig::planner_navi_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.planner_navi_config)
  return planner_navi_config_ != NULL ? *planner_navi_config_ : *default_instance_->planner_navi_config_;
}
::apollo::planning::PlannerNaviConfig* PlanningConfig::mutable_planner_navi_config() {
  set_has_planner_navi_config();
  if (planner_navi_config_ == NULL) {
    planner_navi_config_ = new ::apollo::planning::PlannerNaviConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.planner_navi_config)
  return planner_navi_config_;
}
::apollo::planning::PlannerNaviConfig* PlanningConfig::release_planner_navi_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.planner_navi_config)
  clear_has_planner_navi_config();
  ::apollo::planning::PlannerNaviConfig* temp = planner_navi_config_;
  planner_navi_config_ = NULL;
  return temp;
}
void PlanningConfig::set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config) {
  delete planner_navi_config_;
  planner_navi_config_ = planner_navi_config;
  if (planner_navi_config) {
    set_has_planner_navi_config();
  } else {
    clear_has_planner_navi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.planner_navi_config)
}

// optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
bool PlanningConfig::has_rtk_planning_config() const {
  return planning_config_case() == kRtkPlanningConfig;
}
void PlanningConfig::set_has_rtk_planning_config() {
  _oneof_case_[0] = kRtkPlanningConfig;
}
void PlanningConfig::clear_rtk_planning_config() {
  if (has_rtk_planning_config()) {
    delete planning_config_.rtk_planning_config_;
    clear_has_planning_config();
  }
}
 const ::apollo::planning::RtkPlanningConfig& PlanningConfig::rtk_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.rtk_planning_config)
  return has_rtk_planning_config()
      ? *planning_config_.rtk_planning_config_
      : ::apollo::planning::RtkPlanningConfig::default_instance();
}
::apollo::planning::RtkPlanningConfig* PlanningConfig::mutable_rtk_planning_config() {
  if (!has_rtk_planning_config()) {
    clear_planning_config();
    set_has_rtk_planning_config();
    planning_config_.rtk_planning_config_ = new ::apollo::planning::RtkPlanningConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.rtk_planning_config)
  return planning_config_.rtk_planning_config_;
}
::apollo::planning::RtkPlanningConfig* PlanningConfig::release_rtk_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.rtk_planning_config)
  if (has_rtk_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::RtkPlanningConfig* temp = planning_config_.rtk_planning_config_;
    planning_config_.rtk_planning_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PlanningConfig::set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config) {
  clear_planning_config();
  if (rtk_planning_config) {
    set_has_rtk_planning_config();
    planning_config_.rtk_planning_config_ = rtk_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.rtk_planning_config)
}

// optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
bool PlanningConfig::has_standard_planning_config() const {
  return planning_config_case() == kStandardPlanningConfig;
}
void PlanningConfig::set_has_standard_planning_config() {
  _oneof_case_[0] = kStandardPlanningConfig;
}
void PlanningConfig::clear_standard_planning_config() {
  if (has_standard_planning_config()) {
    delete planning_config_.standard_planning_config_;
    clear_has_planning_config();
  }
}
 const ::apollo::planning::StandardPlanningConfig& PlanningConfig::standard_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.standard_planning_config)
  return has_standard_planning_config()
      ? *planning_config_.standard_planning_config_
      : ::apollo::planning::StandardPlanningConfig::default_instance();
}
::apollo::planning::StandardPlanningConfig* PlanningConfig::mutable_standard_planning_config() {
  if (!has_standard_planning_config()) {
    clear_planning_config();
    set_has_standard_planning_config();
    planning_config_.standard_planning_config_ = new ::apollo::planning::StandardPlanningConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.standard_planning_config)
  return planning_config_.standard_planning_config_;
}
::apollo::planning::StandardPlanningConfig* PlanningConfig::release_standard_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.standard_planning_config)
  if (has_standard_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::StandardPlanningConfig* temp = planning_config_.standard_planning_config_;
    planning_config_.standard_planning_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PlanningConfig::set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config) {
  clear_planning_config();
  if (standard_planning_config) {
    set_has_standard_planning_config();
    planning_config_.standard_planning_config_ = standard_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.standard_planning_config)
}

// optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
bool PlanningConfig::has_navigation_planning_config() const {
  return planning_config_case() == kNavigationPlanningConfig;
}
void PlanningConfig::set_has_navigation_planning_config() {
  _oneof_case_[0] = kNavigationPlanningConfig;
}
void PlanningConfig::clear_navigation_planning_config() {
  if (has_navigation_planning_config()) {
    delete planning_config_.navigation_planning_config_;
    clear_has_planning_config();
  }
}
 const ::apollo::planning::NavigationPlanningConfig& PlanningConfig::navigation_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.navigation_planning_config)
  return has_navigation_planning_config()
      ? *planning_config_.navigation_planning_config_
      : ::apollo::planning::NavigationPlanningConfig::default_instance();
}
::apollo::planning::NavigationPlanningConfig* PlanningConfig::mutable_navigation_planning_config() {
  if (!has_navigation_planning_config()) {
    clear_planning_config();
    set_has_navigation_planning_config();
    planning_config_.navigation_planning_config_ = new ::apollo::planning::NavigationPlanningConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.navigation_planning_config)
  return planning_config_.navigation_planning_config_;
}
::apollo::planning::NavigationPlanningConfig* PlanningConfig::release_navigation_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.navigation_planning_config)
  if (has_navigation_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::NavigationPlanningConfig* temp = planning_config_.navigation_planning_config_;
    planning_config_.navigation_planning_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PlanningConfig::set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config) {
  clear_planning_config();
  if (navigation_planning_config) {
    set_has_navigation_planning_config();
    planning_config_.navigation_planning_config_ = navigation_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.navigation_planning_config)
}

bool PlanningConfig::has_planning_config() const {
  return planning_config_case() != PLANNING_CONFIG_NOT_SET;
}
void PlanningConfig::clear_has_planning_config() {
  _oneof_case_[0] = PLANNING_CONFIG_NOT_SET;
}
PlanningConfig::PlanningConfigCase PlanningConfig::planning_config_case() const {
  return PlanningConfig::PlanningConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
