// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/fnn_vehicle_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prediction/fnn_vehicle_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace prediction {

namespace {

const ::google::protobuf::Descriptor* FnnVehicleModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FnnVehicleModel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto() {
  protobuf_AddDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prediction/fnn_vehicle_model.proto");
  GOOGLE_CHECK(file != NULL);
  FnnVehicleModel_descriptor_ = file->message_type(0);
  static const int FnnVehicleModel_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, dim_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, samples_mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, samples_std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, num_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, dim_output_),
  };
  FnnVehicleModel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FnnVehicleModel_descriptor_,
      FnnVehicleModel::default_instance_,
      FnnVehicleModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, _has_bits_[0]),
      -1,
      -1,
      sizeof(FnnVehicleModel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FnnVehicleModel, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FnnVehicleModel_descriptor_, &FnnVehicleModel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prediction_2ffnn_5fvehicle_5fmodel_2eproto() {
  delete FnnVehicleModel::default_instance_;
  delete FnnVehicleModel_reflection_;
}

void protobuf_AddDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::prediction::protobuf_AddDesc_prediction_2ffnn_5fmodel_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"prediction/fnn_vehicle_model.proto\022\021ap"
    "ollo.prediction\032\037prediction/fnn_model_ba"
    "se.proto\"\325\001\n\017FnnVehicleModel\022\021\n\tdim_inpu"
    "t\030\001 \001(\005\022/\n\014samples_mean\030\002 \001(\0132\031.apollo.p"
    "rediction.Vector\022.\n\013samples_std\030\003 \001(\0132\031."
    "apollo.prediction.Vector\022\021\n\tnum_layer\030\004 "
    "\001(\005\022\'\n\005layer\030\005 \003(\0132\030.apollo.prediction.L"
    "ayer\022\022\n\ndim_output\030\006 \001(\005", 304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction/fnn_vehicle_model.proto", &protobuf_RegisterTypes);
  FnnVehicleModel::default_instance_ = new FnnVehicleModel();
  FnnVehicleModel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prediction_2ffnn_5fvehicle_5fmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prediction_2ffnn_5fvehicle_5fmodel_2eproto {
  StaticDescriptorInitializer_prediction_2ffnn_5fvehicle_5fmodel_2eproto() {
    protobuf_AddDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto();
  }
} static_descriptor_initializer_prediction_2ffnn_5fvehicle_5fmodel_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FnnVehicleModel::kDimInputFieldNumber;
const int FnnVehicleModel::kSamplesMeanFieldNumber;
const int FnnVehicleModel::kSamplesStdFieldNumber;
const int FnnVehicleModel::kNumLayerFieldNumber;
const int FnnVehicleModel::kLayerFieldNumber;
const int FnnVehicleModel::kDimOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FnnVehicleModel::FnnVehicleModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.FnnVehicleModel)
}

void FnnVehicleModel::InitAsDefaultInstance() {
  samples_mean_ = const_cast< ::apollo::prediction::Vector*>(&::apollo::prediction::Vector::default_instance());
  samples_std_ = const_cast< ::apollo::prediction::Vector*>(&::apollo::prediction::Vector::default_instance());
}

FnnVehicleModel::FnnVehicleModel(const FnnVehicleModel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.FnnVehicleModel)
}

void FnnVehicleModel::SharedCtor() {
  _cached_size_ = 0;
  dim_input_ = 0;
  samples_mean_ = NULL;
  samples_std_ = NULL;
  num_layer_ = 0;
  dim_output_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FnnVehicleModel::~FnnVehicleModel() {
  // @@protoc_insertion_point(destructor:apollo.prediction.FnnVehicleModel)
  SharedDtor();
}

void FnnVehicleModel::SharedDtor() {
  if (this != default_instance_) {
    delete samples_mean_;
    delete samples_std_;
  }
}

void FnnVehicleModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FnnVehicleModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FnnVehicleModel_descriptor_;
}

const FnnVehicleModel& FnnVehicleModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2ffnn_5fvehicle_5fmodel_2eproto();
  return *default_instance_;
}

FnnVehicleModel* FnnVehicleModel::default_instance_ = NULL;

FnnVehicleModel* FnnVehicleModel::New(::google::protobuf::Arena* arena) const {
  FnnVehicleModel* n = new FnnVehicleModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FnnVehicleModel::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.FnnVehicleModel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FnnVehicleModel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FnnVehicleModel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(dim_input_, num_layer_);
    if (has_samples_mean()) {
      if (samples_mean_ != NULL) samples_mean_->::apollo::prediction::Vector::Clear();
    }
    if (has_samples_std()) {
      if (samples_std_ != NULL) samples_std_->::apollo::prediction::Vector::Clear();
    }
    dim_output_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FnnVehicleModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.FnnVehicleModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dim_input = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dim_input_)));
          set_has_dim_input();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_samples_mean;
        break;
      }

      // optional .apollo.prediction.Vector samples_mean = 2;
      case 2: {
        if (tag == 18) {
         parse_samples_mean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_samples_mean()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_samples_std;
        break;
      }

      // optional .apollo.prediction.Vector samples_std = 3;
      case 3: {
        if (tag == 26) {
         parse_samples_std:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_samples_std()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_layer;
        break;
      }

      // optional int32 num_layer = 4;
      case 4: {
        if (tag == 32) {
         parse_num_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layer_)));
          set_has_num_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_layer;
        break;
      }

      // repeated .apollo.prediction.Layer layer = 5;
      case 5: {
        if (tag == 42) {
         parse_layer:
          DO_(input->IncrementRecursionDepth());
         parse_loop_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_layer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_dim_output;
        break;
      }

      // optional int32 dim_output = 6;
      case 6: {
        if (tag == 48) {
         parse_dim_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dim_output_)));
          set_has_dim_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.FnnVehicleModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.FnnVehicleModel)
  return false;
#undef DO_
}

void FnnVehicleModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.FnnVehicleModel)
  // optional int32 dim_input = 1;
  if (has_dim_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dim_input(), output);
  }

  // optional .apollo.prediction.Vector samples_mean = 2;
  if (has_samples_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->samples_mean_, output);
  }

  // optional .apollo.prediction.Vector samples_std = 3;
  if (has_samples_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->samples_std_, output);
  }

  // optional int32 num_layer = 4;
  if (has_num_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_layer(), output);
  }

  // repeated .apollo.prediction.Layer layer = 5;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->layer(i), output);
  }

  // optional int32 dim_output = 6;
  if (has_dim_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dim_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.FnnVehicleModel)
}

::google::protobuf::uint8* FnnVehicleModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.FnnVehicleModel)
  // optional int32 dim_input = 1;
  if (has_dim_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dim_input(), target);
  }

  // optional .apollo.prediction.Vector samples_mean = 2;
  if (has_samples_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->samples_mean_, false, target);
  }

  // optional .apollo.prediction.Vector samples_std = 3;
  if (has_samples_std()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->samples_std_, false, target);
  }

  // optional int32 num_layer = 4;
  if (has_num_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_layer(), target);
  }

  // repeated .apollo.prediction.Layer layer = 5;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->layer(i), false, target);
  }

  // optional int32 dim_output = 6;
  if (has_dim_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dim_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.FnnVehicleModel)
  return target;
}

int FnnVehicleModel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.FnnVehicleModel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 47u) {
    // optional int32 dim_input = 1;
    if (has_dim_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dim_input());
    }

    // optional .apollo.prediction.Vector samples_mean = 2;
    if (has_samples_mean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->samples_mean_);
    }

    // optional .apollo.prediction.Vector samples_std = 3;
    if (has_samples_std()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->samples_std_);
    }

    // optional int32 num_layer = 4;
    if (has_num_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_layer());
    }

    // optional int32 dim_output = 6;
    if (has_dim_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dim_output());
    }

  }
  // repeated .apollo.prediction.Layer layer = 5;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FnnVehicleModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.FnnVehicleModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FnnVehicleModel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FnnVehicleModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.FnnVehicleModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.FnnVehicleModel)
    MergeFrom(*source);
  }
}

void FnnVehicleModel::MergeFrom(const FnnVehicleModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.FnnVehicleModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  layer_.MergeFrom(from.layer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dim_input()) {
      set_dim_input(from.dim_input());
    }
    if (from.has_samples_mean()) {
      mutable_samples_mean()->::apollo::prediction::Vector::MergeFrom(from.samples_mean());
    }
    if (from.has_samples_std()) {
      mutable_samples_std()->::apollo::prediction::Vector::MergeFrom(from.samples_std());
    }
    if (from.has_num_layer()) {
      set_num_layer(from.num_layer());
    }
    if (from.has_dim_output()) {
      set_dim_output(from.dim_output());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FnnVehicleModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.FnnVehicleModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FnnVehicleModel::CopyFrom(const FnnVehicleModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.FnnVehicleModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FnnVehicleModel::IsInitialized() const {

  return true;
}

void FnnVehicleModel::Swap(FnnVehicleModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FnnVehicleModel::InternalSwap(FnnVehicleModel* other) {
  std::swap(dim_input_, other->dim_input_);
  std::swap(samples_mean_, other->samples_mean_);
  std::swap(samples_std_, other->samples_std_);
  std::swap(num_layer_, other->num_layer_);
  layer_.UnsafeArenaSwap(&other->layer_);
  std::swap(dim_output_, other->dim_output_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FnnVehicleModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FnnVehicleModel_descriptor_;
  metadata.reflection = FnnVehicleModel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FnnVehicleModel

// optional int32 dim_input = 1;
bool FnnVehicleModel::has_dim_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FnnVehicleModel::set_has_dim_input() {
  _has_bits_[0] |= 0x00000001u;
}
void FnnVehicleModel::clear_has_dim_input() {
  _has_bits_[0] &= ~0x00000001u;
}
void FnnVehicleModel::clear_dim_input() {
  dim_input_ = 0;
  clear_has_dim_input();
}
 ::google::protobuf::int32 FnnVehicleModel::dim_input() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FnnVehicleModel.dim_input)
  return dim_input_;
}
 void FnnVehicleModel::set_dim_input(::google::protobuf::int32 value) {
  set_has_dim_input();
  dim_input_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.FnnVehicleModel.dim_input)
}

// optional .apollo.prediction.Vector samples_mean = 2;
bool FnnVehicleModel::has_samples_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FnnVehicleModel::set_has_samples_mean() {
  _has_bits_[0] |= 0x00000002u;
}
void FnnVehicleModel::clear_has_samples_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
void FnnVehicleModel::clear_samples_mean() {
  if (samples_mean_ != NULL) samples_mean_->::apollo::prediction::Vector::Clear();
  clear_has_samples_mean();
}
const ::apollo::prediction::Vector& FnnVehicleModel::samples_mean() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FnnVehicleModel.samples_mean)
  return samples_mean_ != NULL ? *samples_mean_ : *default_instance_->samples_mean_;
}
::apollo::prediction::Vector* FnnVehicleModel::mutable_samples_mean() {
  set_has_samples_mean();
  if (samples_mean_ == NULL) {
    samples_mean_ = new ::apollo::prediction::Vector;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.FnnVehicleModel.samples_mean)
  return samples_mean_;
}
::apollo::prediction::Vector* FnnVehicleModel::release_samples_mean() {
  // @@protoc_insertion_point(field_release:apollo.prediction.FnnVehicleModel.samples_mean)
  clear_has_samples_mean();
  ::apollo::prediction::Vector* temp = samples_mean_;
  samples_mean_ = NULL;
  return temp;
}
void FnnVehicleModel::set_allocated_samples_mean(::apollo::prediction::Vector* samples_mean) {
  delete samples_mean_;
  samples_mean_ = samples_mean;
  if (samples_mean) {
    set_has_samples_mean();
  } else {
    clear_has_samples_mean();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.FnnVehicleModel.samples_mean)
}

// optional .apollo.prediction.Vector samples_std = 3;
bool FnnVehicleModel::has_samples_std() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FnnVehicleModel::set_has_samples_std() {
  _has_bits_[0] |= 0x00000004u;
}
void FnnVehicleModel::clear_has_samples_std() {
  _has_bits_[0] &= ~0x00000004u;
}
void FnnVehicleModel::clear_samples_std() {
  if (samples_std_ != NULL) samples_std_->::apollo::prediction::Vector::Clear();
  clear_has_samples_std();
}
const ::apollo::prediction::Vector& FnnVehicleModel::samples_std() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FnnVehicleModel.samples_std)
  return samples_std_ != NULL ? *samples_std_ : *default_instance_->samples_std_;
}
::apollo::prediction::Vector* FnnVehicleModel::mutable_samples_std() {
  set_has_samples_std();
  if (samples_std_ == NULL) {
    samples_std_ = new ::apollo::prediction::Vector;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.FnnVehicleModel.samples_std)
  return samples_std_;
}
::apollo::prediction::Vector* FnnVehicleModel::release_samples_std() {
  // @@protoc_insertion_point(field_release:apollo.prediction.FnnVehicleModel.samples_std)
  clear_has_samples_std();
  ::apollo::prediction::Vector* temp = samples_std_;
  samples_std_ = NULL;
  return temp;
}
void FnnVehicleModel::set_allocated_samples_std(::apollo::prediction::Vector* samples_std) {
  delete samples_std_;
  samples_std_ = samples_std;
  if (samples_std) {
    set_has_samples_std();
  } else {
    clear_has_samples_std();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.FnnVehicleModel.samples_std)
}

// optional int32 num_layer = 4;
bool FnnVehicleModel::has_num_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FnnVehicleModel::set_has_num_layer() {
  _has_bits_[0] |= 0x00000008u;
}
void FnnVehicleModel::clear_has_num_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
void FnnVehicleModel::clear_num_layer() {
  num_layer_ = 0;
  clear_has_num_layer();
}
 ::google::protobuf::int32 FnnVehicleModel::num_layer() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FnnVehicleModel.num_layer)
  return num_layer_;
}
 void FnnVehicleModel::set_num_layer(::google::protobuf::int32 value) {
  set_has_num_layer();
  num_layer_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.FnnVehicleModel.num_layer)
}

// repeated .apollo.prediction.Layer layer = 5;
int FnnVehicleModel::layer_size() const {
  return layer_.size();
}
void FnnVehicleModel::clear_layer() {
  layer_.Clear();
}
const ::apollo::prediction::Layer& FnnVehicleModel::layer(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FnnVehicleModel.layer)
  return layer_.Get(index);
}
::apollo::prediction::Layer* FnnVehicleModel::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.FnnVehicleModel.layer)
  return layer_.Mutable(index);
}
::apollo::prediction::Layer* FnnVehicleModel::add_layer() {
  // @@protoc_insertion_point(field_add:apollo.prediction.FnnVehicleModel.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::Layer >*
FnnVehicleModel::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.FnnVehicleModel.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Layer >&
FnnVehicleModel::layer() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.FnnVehicleModel.layer)
  return layer_;
}

// optional int32 dim_output = 6;
bool FnnVehicleModel::has_dim_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FnnVehicleModel::set_has_dim_output() {
  _has_bits_[0] |= 0x00000020u;
}
void FnnVehicleModel::clear_has_dim_output() {
  _has_bits_[0] &= ~0x00000020u;
}
void FnnVehicleModel::clear_dim_output() {
  dim_output_ = 0;
  clear_has_dim_output();
}
 ::google::protobuf::int32 FnnVehicleModel::dim_output() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FnnVehicleModel.dim_output)
  return dim_output_;
}
 void FnnVehicleModel::set_dim_output(::google::protobuf::int32 value) {
  set_has_dim_output();
  dim_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.FnnVehicleModel.dim_output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
