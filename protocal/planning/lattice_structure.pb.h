// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/lattice_structure.proto

#ifndef PROTOBUF_planning_2flattice_5fstructure_2eproto__INCLUDED
#define PROTOBUF_planning_2flattice_5fstructure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto();
void protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto();

class PathTimeObstacle;
class PathTimePoint;
class PlanningTarget;
class SamplePoint;
class StopPoint;

enum StopPoint_Type {
  StopPoint_Type_HARD = 0,
  StopPoint_Type_SOFT = 1
};
bool StopPoint_Type_IsValid(int value);
const StopPoint_Type StopPoint_Type_Type_MIN = StopPoint_Type_HARD;
const StopPoint_Type StopPoint_Type_Type_MAX = StopPoint_Type_SOFT;
const int StopPoint_Type_Type_ARRAYSIZE = StopPoint_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopPoint_Type_descriptor();
inline const ::std::string& StopPoint_Type_Name(StopPoint_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopPoint_Type_descriptor(), value);
}
inline bool StopPoint_Type_Parse(
    const ::std::string& name, StopPoint_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopPoint_Type>(
    StopPoint_Type_descriptor(), name, value);
}
// ===================================================================

class PathTimePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathTimePoint) */ {
 public:
  PathTimePoint();
  virtual ~PathTimePoint();

  PathTimePoint(const PathTimePoint& from);

  inline PathTimePoint& operator=(const PathTimePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathTimePoint& default_instance();

  void Swap(PathTimePoint* other);

  // implements Message ----------------------------------------------

  inline PathTimePoint* New() const { return New(NULL); }

  PathTimePoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathTimePoint& from);
  void MergeFrom(const PathTimePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathTimePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double t = 1;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t() const;
  void set_t(double value);

  // optional double s = 2;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 2;
  double s() const;
  void set_s(double value);

  // optional string obstacle_id = 4;
  bool has_obstacle_id() const;
  void clear_obstacle_id();
  static const int kObstacleIdFieldNumber = 4;
  const ::std::string& obstacle_id() const;
  void set_obstacle_id(const ::std::string& value);
  void set_obstacle_id(const char* value);
  void set_obstacle_id(const char* value, size_t size);
  ::std::string* mutable_obstacle_id();
  ::std::string* release_obstacle_id();
  void set_allocated_obstacle_id(::std::string* obstacle_id);

  // @@protoc_insertion_point(class_scope:apollo.planning.PathTimePoint)
 private:
  inline void set_has_t();
  inline void clear_has_t();
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_obstacle_id();
  inline void clear_has_obstacle_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double t_;
  double s_;
  ::google::protobuf::internal::ArenaStringPtr obstacle_id_;
  friend void  protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto();

  void InitAsDefaultInstance();
  static PathTimePoint* default_instance_;
};
// -------------------------------------------------------------------

class SamplePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SamplePoint) */ {
 public:
  SamplePoint();
  virtual ~SamplePoint();

  SamplePoint(const SamplePoint& from);

  inline SamplePoint& operator=(const SamplePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SamplePoint& default_instance();

  void Swap(SamplePoint* other);

  // implements Message ----------------------------------------------

  inline SamplePoint* New() const { return New(NULL); }

  SamplePoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SamplePoint& from);
  void MergeFrom(const SamplePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SamplePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.PathTimePoint path_time_point = 1;
  bool has_path_time_point() const;
  void clear_path_time_point();
  static const int kPathTimePointFieldNumber = 1;
  const ::apollo::planning::PathTimePoint& path_time_point() const;
  ::apollo::planning::PathTimePoint* mutable_path_time_point();
  ::apollo::planning::PathTimePoint* release_path_time_point();
  void set_allocated_path_time_point(::apollo::planning::PathTimePoint* path_time_point);

  // optional double ref_v = 2;
  bool has_ref_v() const;
  void clear_ref_v();
  static const int kRefVFieldNumber = 2;
  double ref_v() const;
  void set_ref_v(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.SamplePoint)
 private:
  inline void set_has_path_time_point();
  inline void clear_has_path_time_point();
  inline void set_has_ref_v();
  inline void clear_has_ref_v();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::PathTimePoint* path_time_point_;
  double ref_v_;
  friend void  protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto();

  void InitAsDefaultInstance();
  static SamplePoint* default_instance_;
};
// -------------------------------------------------------------------

class PathTimeObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathTimeObstacle) */ {
 public:
  PathTimeObstacle();
  virtual ~PathTimeObstacle();

  PathTimeObstacle(const PathTimeObstacle& from);

  inline PathTimeObstacle& operator=(const PathTimeObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathTimeObstacle& default_instance();

  void Swap(PathTimeObstacle* other);

  // implements Message ----------------------------------------------

  inline PathTimeObstacle* New() const { return New(NULL); }

  PathTimeObstacle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathTimeObstacle& from);
  void MergeFrom(const PathTimeObstacle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathTimeObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string obstacle_id = 1;
  bool has_obstacle_id() const;
  void clear_obstacle_id();
  static const int kObstacleIdFieldNumber = 1;
  const ::std::string& obstacle_id() const;
  void set_obstacle_id(const ::std::string& value);
  void set_obstacle_id(const char* value);
  void set_obstacle_id(const char* value, size_t size);
  ::std::string* mutable_obstacle_id();
  ::std::string* release_obstacle_id();
  void set_allocated_obstacle_id(::std::string* obstacle_id);

  // optional .apollo.planning.PathTimePoint bottom_left = 2;
  bool has_bottom_left() const;
  void clear_bottom_left();
  static const int kBottomLeftFieldNumber = 2;
  const ::apollo::planning::PathTimePoint& bottom_left() const;
  ::apollo::planning::PathTimePoint* mutable_bottom_left();
  ::apollo::planning::PathTimePoint* release_bottom_left();
  void set_allocated_bottom_left(::apollo::planning::PathTimePoint* bottom_left);

  // optional .apollo.planning.PathTimePoint upper_left = 3;
  bool has_upper_left() const;
  void clear_upper_left();
  static const int kUpperLeftFieldNumber = 3;
  const ::apollo::planning::PathTimePoint& upper_left() const;
  ::apollo::planning::PathTimePoint* mutable_upper_left();
  ::apollo::planning::PathTimePoint* release_upper_left();
  void set_allocated_upper_left(::apollo::planning::PathTimePoint* upper_left);

  // optional .apollo.planning.PathTimePoint upper_right = 4;
  bool has_upper_right() const;
  void clear_upper_right();
  static const int kUpperRightFieldNumber = 4;
  const ::apollo::planning::PathTimePoint& upper_right() const;
  ::apollo::planning::PathTimePoint* mutable_upper_right();
  ::apollo::planning::PathTimePoint* release_upper_right();
  void set_allocated_upper_right(::apollo::planning::PathTimePoint* upper_right);

  // optional .apollo.planning.PathTimePoint bottom_right = 5;
  bool has_bottom_right() const;
  void clear_bottom_right();
  static const int kBottomRightFieldNumber = 5;
  const ::apollo::planning::PathTimePoint& bottom_right() const;
  ::apollo::planning::PathTimePoint* mutable_bottom_right();
  ::apollo::planning::PathTimePoint* release_bottom_right();
  void set_allocated_bottom_right(::apollo::planning::PathTimePoint* bottom_right);

  // optional double time_lower = 6;
  bool has_time_lower() const;
  void clear_time_lower();
  static const int kTimeLowerFieldNumber = 6;
  double time_lower() const;
  void set_time_lower(double value);

  // optional double time_upper = 7;
  bool has_time_upper() const;
  void clear_time_upper();
  static const int kTimeUpperFieldNumber = 7;
  double time_upper() const;
  void set_time_upper(double value);

  // optional double path_lower = 8;
  bool has_path_lower() const;
  void clear_path_lower();
  static const int kPathLowerFieldNumber = 8;
  double path_lower() const;
  void set_path_lower(double value);

  // optional double path_upper = 9;
  bool has_path_upper() const;
  void clear_path_upper();
  static const int kPathUpperFieldNumber = 9;
  double path_upper() const;
  void set_path_upper(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PathTimeObstacle)
 private:
  inline void set_has_obstacle_id();
  inline void clear_has_obstacle_id();
  inline void set_has_bottom_left();
  inline void clear_has_bottom_left();
  inline void set_has_upper_left();
  inline void clear_has_upper_left();
  inline void set_has_upper_right();
  inline void clear_has_upper_right();
  inline void set_has_bottom_right();
  inline void clear_has_bottom_right();
  inline void set_has_time_lower();
  inline void clear_has_time_lower();
  inline void set_has_time_upper();
  inline void clear_has_time_upper();
  inline void set_has_path_lower();
  inline void clear_has_path_lower();
  inline void set_has_path_upper();
  inline void clear_has_path_upper();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obstacle_id_;
  ::apollo::planning::PathTimePoint* bottom_left_;
  ::apollo::planning::PathTimePoint* upper_left_;
  ::apollo::planning::PathTimePoint* upper_right_;
  ::apollo::planning::PathTimePoint* bottom_right_;
  double time_lower_;
  double time_upper_;
  double path_lower_;
  double path_upper_;
  friend void  protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto();

  void InitAsDefaultInstance();
  static PathTimeObstacle* default_instance_;
};
// -------------------------------------------------------------------

class StopPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StopPoint) */ {
 public:
  StopPoint();
  virtual ~StopPoint();

  StopPoint(const StopPoint& from);

  inline StopPoint& operator=(const StopPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopPoint& default_instance();

  void Swap(StopPoint* other);

  // implements Message ----------------------------------------------

  inline StopPoint* New() const { return New(NULL); }

  StopPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopPoint& from);
  void MergeFrom(const StopPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StopPoint_Type Type;
  static const Type HARD =
    StopPoint_Type_HARD;
  static const Type SOFT =
    StopPoint_Type_SOFT;
  static inline bool Type_IsValid(int value) {
    return StopPoint_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StopPoint_Type_Type_MIN;
  static const Type Type_MAX =
    StopPoint_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StopPoint_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StopPoint_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StopPoint_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StopPoint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::apollo::planning::StopPoint_Type type() const;
  void set_type(::apollo::planning::StopPoint_Type value);

  // @@protoc_insertion_point(class_scope:apollo.planning.StopPoint)
 private:
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double s_;
  int type_;
  friend void  protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto();

  void InitAsDefaultInstance();
  static StopPoint* default_instance_;
};
// -------------------------------------------------------------------

class PlanningTarget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningTarget) */ {
 public:
  PlanningTarget();
  virtual ~PlanningTarget();

  PlanningTarget(const PlanningTarget& from);

  inline PlanningTarget& operator=(const PlanningTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningTarget& default_instance();

  void Swap(PlanningTarget* other);

  // implements Message ----------------------------------------------

  inline PlanningTarget* New() const { return New(NULL); }

  PlanningTarget* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanningTarget& from);
  void MergeFrom(const PlanningTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlanningTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.StopPoint stop_point = 1;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 1;
  const ::apollo::planning::StopPoint& stop_point() const;
  ::apollo::planning::StopPoint* mutable_stop_point();
  ::apollo::planning::StopPoint* release_stop_point();
  void set_allocated_stop_point(::apollo::planning::StopPoint* stop_point);

  // optional double cruise_speed = 2;
  bool has_cruise_speed() const;
  void clear_cruise_speed();
  static const int kCruiseSpeedFieldNumber = 2;
  double cruise_speed() const;
  void set_cruise_speed(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningTarget)
 private:
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_cruise_speed();
  inline void clear_has_cruise_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::StopPoint* stop_point_;
  double cruise_speed_;
  friend void  protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto();
  friend void protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto();

  void InitAsDefaultInstance();
  static PlanningTarget* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PathTimePoint

// optional double t = 1;
inline bool PathTimePoint::has_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathTimePoint::set_has_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathTimePoint::clear_has_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathTimePoint::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline double PathTimePoint::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.t)
  return t_;
}
inline void PathTimePoint::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.t)
}

// optional double s = 2;
inline bool PathTimePoint::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathTimePoint::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathTimePoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathTimePoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double PathTimePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.s)
  return s_;
}
inline void PathTimePoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.s)
}

// optional string obstacle_id = 4;
inline bool PathTimePoint::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathTimePoint::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathTimePoint::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathTimePoint::clear_obstacle_id() {
  obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obstacle_id();
}
inline const ::std::string& PathTimePoint::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.obstacle_id)
  return obstacle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathTimePoint::set_obstacle_id(const ::std::string& value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.obstacle_id)
}
inline void PathTimePoint::set_obstacle_id(const char* value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.PathTimePoint.obstacle_id)
}
inline void PathTimePoint::set_obstacle_id(const char* value, size_t size) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.PathTimePoint.obstacle_id)
}
inline ::std::string* PathTimePoint::mutable_obstacle_id() {
  set_has_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimePoint.obstacle_id)
  return obstacle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathTimePoint::release_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimePoint.obstacle_id)
  clear_has_obstacle_id();
  return obstacle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathTimePoint::set_allocated_obstacle_id(::std::string* obstacle_id) {
  if (obstacle_id != NULL) {
    set_has_obstacle_id();
  } else {
    clear_has_obstacle_id();
  }
  obstacle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obstacle_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimePoint.obstacle_id)
}

// -------------------------------------------------------------------

// SamplePoint

// optional .apollo.planning.PathTimePoint path_time_point = 1;
inline bool SamplePoint::has_path_time_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SamplePoint::set_has_path_time_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SamplePoint::clear_has_path_time_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SamplePoint::clear_path_time_point() {
  if (path_time_point_ != NULL) path_time_point_->::apollo::planning::PathTimePoint::Clear();
  clear_has_path_time_point();
}
inline const ::apollo::planning::PathTimePoint& SamplePoint::path_time_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SamplePoint.path_time_point)
  return path_time_point_ != NULL ? *path_time_point_ : *default_instance_->path_time_point_;
}
inline ::apollo::planning::PathTimePoint* SamplePoint::mutable_path_time_point() {
  set_has_path_time_point();
  if (path_time_point_ == NULL) {
    path_time_point_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.SamplePoint.path_time_point)
  return path_time_point_;
}
inline ::apollo::planning::PathTimePoint* SamplePoint::release_path_time_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.SamplePoint.path_time_point)
  clear_has_path_time_point();
  ::apollo::planning::PathTimePoint* temp = path_time_point_;
  path_time_point_ = NULL;
  return temp;
}
inline void SamplePoint::set_allocated_path_time_point(::apollo::planning::PathTimePoint* path_time_point) {
  delete path_time_point_;
  path_time_point_ = path_time_point;
  if (path_time_point) {
    set_has_path_time_point();
  } else {
    clear_has_path_time_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SamplePoint.path_time_point)
}

// optional double ref_v = 2;
inline bool SamplePoint::has_ref_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SamplePoint::set_has_ref_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SamplePoint::clear_has_ref_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SamplePoint::clear_ref_v() {
  ref_v_ = 0;
  clear_has_ref_v();
}
inline double SamplePoint::ref_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SamplePoint.ref_v)
  return ref_v_;
}
inline void SamplePoint::set_ref_v(double value) {
  set_has_ref_v();
  ref_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SamplePoint.ref_v)
}

// -------------------------------------------------------------------

// PathTimeObstacle

// optional string obstacle_id = 1;
inline bool PathTimeObstacle::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathTimeObstacle::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathTimeObstacle::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathTimeObstacle::clear_obstacle_id() {
  obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obstacle_id();
}
inline const ::std::string& PathTimeObstacle::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.obstacle_id)
  return obstacle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathTimeObstacle::set_obstacle_id(const ::std::string& value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.obstacle_id)
}
inline void PathTimeObstacle::set_obstacle_id(const char* value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.PathTimeObstacle.obstacle_id)
}
inline void PathTimeObstacle::set_obstacle_id(const char* value, size_t size) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.PathTimeObstacle.obstacle_id)
}
inline ::std::string* PathTimeObstacle::mutable_obstacle_id() {
  set_has_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.obstacle_id)
  return obstacle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathTimeObstacle::release_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.obstacle_id)
  clear_has_obstacle_id();
  return obstacle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathTimeObstacle::set_allocated_obstacle_id(::std::string* obstacle_id) {
  if (obstacle_id != NULL) {
    set_has_obstacle_id();
  } else {
    clear_has_obstacle_id();
  }
  obstacle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obstacle_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.obstacle_id)
}

// optional .apollo.planning.PathTimePoint bottom_left = 2;
inline bool PathTimeObstacle::has_bottom_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathTimeObstacle::set_has_bottom_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathTimeObstacle::clear_has_bottom_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathTimeObstacle::clear_bottom_left() {
  if (bottom_left_ != NULL) bottom_left_->::apollo::planning::PathTimePoint::Clear();
  clear_has_bottom_left();
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::bottom_left() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.bottom_left)
  return bottom_left_ != NULL ? *bottom_left_ : *default_instance_->bottom_left_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_bottom_left() {
  set_has_bottom_left();
  if (bottom_left_ == NULL) {
    bottom_left_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.bottom_left)
  return bottom_left_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_bottom_left() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.bottom_left)
  clear_has_bottom_left();
  ::apollo::planning::PathTimePoint* temp = bottom_left_;
  bottom_left_ = NULL;
  return temp;
}
inline void PathTimeObstacle::set_allocated_bottom_left(::apollo::planning::PathTimePoint* bottom_left) {
  delete bottom_left_;
  bottom_left_ = bottom_left;
  if (bottom_left) {
    set_has_bottom_left();
  } else {
    clear_has_bottom_left();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.bottom_left)
}

// optional .apollo.planning.PathTimePoint upper_left = 3;
inline bool PathTimeObstacle::has_upper_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathTimeObstacle::set_has_upper_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathTimeObstacle::clear_has_upper_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathTimeObstacle::clear_upper_left() {
  if (upper_left_ != NULL) upper_left_->::apollo::planning::PathTimePoint::Clear();
  clear_has_upper_left();
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::upper_left() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.upper_left)
  return upper_left_ != NULL ? *upper_left_ : *default_instance_->upper_left_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_upper_left() {
  set_has_upper_left();
  if (upper_left_ == NULL) {
    upper_left_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.upper_left)
  return upper_left_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_upper_left() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.upper_left)
  clear_has_upper_left();
  ::apollo::planning::PathTimePoint* temp = upper_left_;
  upper_left_ = NULL;
  return temp;
}
inline void PathTimeObstacle::set_allocated_upper_left(::apollo::planning::PathTimePoint* upper_left) {
  delete upper_left_;
  upper_left_ = upper_left;
  if (upper_left) {
    set_has_upper_left();
  } else {
    clear_has_upper_left();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.upper_left)
}

// optional .apollo.planning.PathTimePoint upper_right = 4;
inline bool PathTimeObstacle::has_upper_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathTimeObstacle::set_has_upper_right() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PathTimeObstacle::clear_has_upper_right() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PathTimeObstacle::clear_upper_right() {
  if (upper_right_ != NULL) upper_right_->::apollo::planning::PathTimePoint::Clear();
  clear_has_upper_right();
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::upper_right() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.upper_right)
  return upper_right_ != NULL ? *upper_right_ : *default_instance_->upper_right_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_upper_right() {
  set_has_upper_right();
  if (upper_right_ == NULL) {
    upper_right_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.upper_right)
  return upper_right_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_upper_right() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.upper_right)
  clear_has_upper_right();
  ::apollo::planning::PathTimePoint* temp = upper_right_;
  upper_right_ = NULL;
  return temp;
}
inline void PathTimeObstacle::set_allocated_upper_right(::apollo::planning::PathTimePoint* upper_right) {
  delete upper_right_;
  upper_right_ = upper_right;
  if (upper_right) {
    set_has_upper_right();
  } else {
    clear_has_upper_right();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.upper_right)
}

// optional .apollo.planning.PathTimePoint bottom_right = 5;
inline bool PathTimeObstacle::has_bottom_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PathTimeObstacle::set_has_bottom_right() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PathTimeObstacle::clear_has_bottom_right() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PathTimeObstacle::clear_bottom_right() {
  if (bottom_right_ != NULL) bottom_right_->::apollo::planning::PathTimePoint::Clear();
  clear_has_bottom_right();
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::bottom_right() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.bottom_right)
  return bottom_right_ != NULL ? *bottom_right_ : *default_instance_->bottom_right_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_bottom_right() {
  set_has_bottom_right();
  if (bottom_right_ == NULL) {
    bottom_right_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.bottom_right)
  return bottom_right_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_bottom_right() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.bottom_right)
  clear_has_bottom_right();
  ::apollo::planning::PathTimePoint* temp = bottom_right_;
  bottom_right_ = NULL;
  return temp;
}
inline void PathTimeObstacle::set_allocated_bottom_right(::apollo::planning::PathTimePoint* bottom_right) {
  delete bottom_right_;
  bottom_right_ = bottom_right;
  if (bottom_right) {
    set_has_bottom_right();
  } else {
    clear_has_bottom_right();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.bottom_right)
}

// optional double time_lower = 6;
inline bool PathTimeObstacle::has_time_lower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PathTimeObstacle::set_has_time_lower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PathTimeObstacle::clear_has_time_lower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PathTimeObstacle::clear_time_lower() {
  time_lower_ = 0;
  clear_has_time_lower();
}
inline double PathTimeObstacle::time_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.time_lower)
  return time_lower_;
}
inline void PathTimeObstacle::set_time_lower(double value) {
  set_has_time_lower();
  time_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.time_lower)
}

// optional double time_upper = 7;
inline bool PathTimeObstacle::has_time_upper() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PathTimeObstacle::set_has_time_upper() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PathTimeObstacle::clear_has_time_upper() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PathTimeObstacle::clear_time_upper() {
  time_upper_ = 0;
  clear_has_time_upper();
}
inline double PathTimeObstacle::time_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.time_upper)
  return time_upper_;
}
inline void PathTimeObstacle::set_time_upper(double value) {
  set_has_time_upper();
  time_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.time_upper)
}

// optional double path_lower = 8;
inline bool PathTimeObstacle::has_path_lower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PathTimeObstacle::set_has_path_lower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PathTimeObstacle::clear_has_path_lower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PathTimeObstacle::clear_path_lower() {
  path_lower_ = 0;
  clear_has_path_lower();
}
inline double PathTimeObstacle::path_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.path_lower)
  return path_lower_;
}
inline void PathTimeObstacle::set_path_lower(double value) {
  set_has_path_lower();
  path_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.path_lower)
}

// optional double path_upper = 9;
inline bool PathTimeObstacle::has_path_upper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PathTimeObstacle::set_has_path_upper() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PathTimeObstacle::clear_has_path_upper() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PathTimeObstacle::clear_path_upper() {
  path_upper_ = 0;
  clear_has_path_upper();
}
inline double PathTimeObstacle::path_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.path_upper)
  return path_upper_;
}
inline void PathTimeObstacle::set_path_upper(double value) {
  set_has_path_upper();
  path_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.path_upper)
}

// -------------------------------------------------------------------

// StopPoint

// required double s = 1;
inline bool StopPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double StopPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopPoint.s)
  return s_;
}
inline void StopPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopPoint.s)
}

// required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
inline bool StopPoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopPoint::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopPoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::planning::StopPoint_Type StopPoint::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopPoint.type)
  return static_cast< ::apollo::planning::StopPoint_Type >(type_);
}
inline void StopPoint::set_type(::apollo::planning::StopPoint_Type value) {
  assert(::apollo::planning::StopPoint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopPoint.type)
}

// -------------------------------------------------------------------

// PlanningTarget

// optional .apollo.planning.StopPoint stop_point = 1;
inline bool PlanningTarget::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningTarget::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningTarget::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningTarget::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::planning::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::apollo::planning::StopPoint& PlanningTarget::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningTarget.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::apollo::planning::StopPoint* PlanningTarget::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::planning::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningTarget.stop_point)
  return stop_point_;
}
inline ::apollo::planning::StopPoint* PlanningTarget::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningTarget.stop_point)
  clear_has_stop_point();
  ::apollo::planning::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void PlanningTarget::set_allocated_stop_point(::apollo::planning::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningTarget.stop_point)
}

// optional double cruise_speed = 2;
inline bool PlanningTarget::has_cruise_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningTarget::set_has_cruise_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningTarget::clear_has_cruise_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningTarget::clear_cruise_speed() {
  cruise_speed_ = 0;
  clear_has_cruise_speed();
}
inline double PlanningTarget::cruise_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningTarget.cruise_speed)
  return cruise_speed_;
}
inline void PlanningTarget::set_cruise_speed(double value) {
  set_has_cruise_speed();
  cruise_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningTarget.cruise_speed)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::StopPoint_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::StopPoint_Type>() {
  return ::apollo::planning::StopPoint_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2flattice_5fstructure_2eproto__INCLUDED
