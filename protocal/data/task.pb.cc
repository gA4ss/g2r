// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data/task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace data {

namespace {

const ::google::protobuf::Descriptor* MapPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rosbag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rosbag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rosbag_Topic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rosbag_Topic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rosbag_TopicsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Disengagement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Disengagement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_MileageEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_LoopType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2ftask_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_data_2ftask_2eproto() {
  protobuf_AddDesc_data_2ftask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data/task.proto");
  GOOGLE_CHECK(file != NULL);
  MapPoint_descriptor_ = file->message_type(0);
  static const int MapPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPoint, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPoint, longitude_),
  };
  MapPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapPoint_descriptor_,
      MapPoint::default_instance_,
      MapPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPoint, _internal_metadata_),
      -1);
  Rosbag_descriptor_ = file->message_type(1);
  static const int Rosbag_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, msg_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, topics_),
  };
  Rosbag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rosbag_descriptor_,
      Rosbag::default_instance_,
      Rosbag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, _has_bits_[0]),
      -1,
      -1,
      sizeof(Rosbag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag, _internal_metadata_),
      -1);
  Rosbag_Topic_descriptor_ = Rosbag_descriptor_->nested_type(0);
  static const int Rosbag_Topic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag_Topic, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag_Topic, msg_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag_Topic, frequency_),
  };
  Rosbag_Topic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rosbag_Topic_descriptor_,
      Rosbag_Topic::default_instance_,
      Rosbag_Topic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag_Topic, _has_bits_[0]),
      -1,
      -1,
      sizeof(Rosbag_Topic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rosbag_Topic, _internal_metadata_),
      -1);
  Rosbag_TopicsEntry_descriptor_ = Rosbag_descriptor_->nested_type(1);
  Disengagement_descriptor_ = file->message_type(2);
  static const int Disengagement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disengagement, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disengagement, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disengagement, desc_),
  };
  Disengagement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Disengagement_descriptor_,
      Disengagement::default_instance_,
      Disengagement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disengagement, _has_bits_[0]),
      -1,
      -1,
      sizeof(Disengagement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disengagement, _internal_metadata_),
      -1);
  Task_descriptor_ = file->message_type(3);
  static const int Task_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, loop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, bags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, disengagements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, map_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, mileage_),
  };
  Task_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      -1,
      -1,
      sizeof(Task),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _internal_metadata_),
      -1);
  Task_MileageEntry_descriptor_ = Task_descriptor_->nested_type(0);
  Task_LoopType_descriptor_ = Task_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2ftask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapPoint_descriptor_, &MapPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rosbag_descriptor_, &Rosbag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rosbag_Topic_descriptor_, &Rosbag_Topic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Rosbag_TopicsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::data::Rosbag_Topic,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Rosbag_TopicsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Disengagement_descriptor_, &Disengagement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Task_MileageEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Task_MileageEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_data_2ftask_2eproto() {
  delete MapPoint::default_instance_;
  delete MapPoint_reflection_;
  delete Rosbag::default_instance_;
  delete Rosbag_reflection_;
  delete Rosbag_Topic::default_instance_;
  delete Rosbag_Topic_reflection_;
  delete Disengagement::default_instance_;
  delete Disengagement_reflection_;
  delete Task::default_instance_;
  delete Task_reflection_;
}

void protobuf_AddDesc_data_2ftask_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_data_2ftask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::data::protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017data/task.proto\022\013apollo.data\032\026data/sta"
    "tic_info.proto\"/\n\010MapPoint\022\020\n\010latitude\030\001"
    " \001(\001\022\021\n\tlongitude\030\002 \001(\001\"\252\002\n\006Rosbag\022\014\n\004na"
    "me\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\017\n\007version\030\003 \001(\005\022"
    "\022\n\nstart_time\030\004 \001(\001\022\020\n\010end_time\030\005 \001(\001\022\021\n"
    "\tmsg_count\030\006 \001(\005\022/\n\006topics\030\007 \003(\0132\037.apoll"
    "o.data.Rosbag.TopicsEntry\032\?\n\005Topic\022\020\n\010ms"
    "g_type\030\001 \001(\t\022\021\n\tmsg_count\030\002 \001(\005\022\021\n\tfrequ"
    "ency\030\003 \001(\001\032H\n\013TopicsEntry\022\013\n\003key\030\001 \001(\t\022("
    "\n\005value\030\002 \001(\0132\031.apollo.data.Rosbag.Topic"
    ":\0028\001\"T\n\rDisengagement\022\014\n\004time\030\001 \001(\001\022\'\n\010l"
    "ocation\030\002 \001(\0132\025.apollo.data.MapPoint\022\014\n\004"
    "desc\030\003 \001(\t\"\267\003\n\004Task\022\n\n\002id\030\001 \001(\t\022\022\n\nstart"
    "_time\030\002 \001(\001\022\020\n\010end_time\030\003 \001(\001\022-\n\tloop_ty"
    "pe\030\004 \001(\0162\032.apollo.data.Task.LoopType\022%\n\004"
    "info\030\005 \001(\0132\027.apollo.data.StaticInfo\022!\n\004b"
    "ags\030\006 \003(\0132\023.apollo.data.Rosbag\022\016\n\006topics"
    "\030\007 \003(\t\0222\n\016disengagements\030\010 \003(\0132\032.apollo."
    "data.Disengagement\022\'\n\010map_path\030\t \003(\0132\025.a"
    "pollo.data.MapPoint\022/\n\007mileage\030\n \003(\0132\036.a"
    "pollo.data.Task.MileageEntry\032.\n\014MileageE"
    "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"6\n\010"
    "LoopType\022\013\n\007UNKNOWN\020\000\022\r\n\tOPEN_LOOP\020\001\022\016\n\n"
    "CLOSE_LOOP\020\002", 932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data/task.proto", &protobuf_RegisterTypes);
  MapPoint::default_instance_ = new MapPoint();
  Rosbag::default_instance_ = new Rosbag();
  Rosbag_Topic::default_instance_ = new Rosbag_Topic();
  Disengagement::default_instance_ = new Disengagement();
  Task::default_instance_ = new Task();
  MapPoint::default_instance_->InitAsDefaultInstance();
  Rosbag::default_instance_->InitAsDefaultInstance();
  Rosbag_Topic::default_instance_->InitAsDefaultInstance();
  Disengagement::default_instance_->InitAsDefaultInstance();
  Task::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2ftask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2ftask_2eproto {
  StaticDescriptorInitializer_data_2ftask_2eproto() {
    protobuf_AddDesc_data_2ftask_2eproto();
  }
} static_descriptor_initializer_data_2ftask_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapPoint::kLatitudeFieldNumber;
const int MapPoint::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapPoint::MapPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.MapPoint)
}

void MapPoint::InitAsDefaultInstance() {
}

MapPoint::MapPoint(const MapPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.MapPoint)
}

void MapPoint::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPoint::~MapPoint() {
  // @@protoc_insertion_point(destructor:apollo.data.MapPoint)
  SharedDtor();
}

void MapPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPoint_descriptor_;
}

const MapPoint& MapPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftask_2eproto();
  return *default_instance_;
}

MapPoint* MapPoint::default_instance_ = NULL;

MapPoint* MapPoint::New(::google::protobuf::Arena* arena) const {
  MapPoint* n = new MapPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.MapPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MapPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MapPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(latitude_, longitude_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.MapPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.MapPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.MapPoint)
  return false;
#undef DO_
}

void MapPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.MapPoint)
  // optional double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.MapPoint)
}

::google::protobuf::uint8* MapPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.MapPoint)
  // optional double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.MapPoint)
  return target;
}

int MapPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.MapPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.MapPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.MapPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.MapPoint)
    MergeFrom(*source);
  }
}

void MapPoint::MergeFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.MapPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPoint::CopyFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPoint::IsInitialized() const {

  return true;
}

void MapPoint::Swap(MapPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapPoint::InternalSwap(MapPoint* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPoint_descriptor_;
  metadata.reflection = MapPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapPoint

// optional double latitude = 1;
bool MapPoint::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapPoint::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void MapPoint::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapPoint::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double MapPoint::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.data.MapPoint.latitude)
  return latitude_;
}
 void MapPoint::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.MapPoint.latitude)
}

// optional double longitude = 2;
bool MapPoint::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapPoint::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void MapPoint::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapPoint::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double MapPoint::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.data.MapPoint.longitude)
  return longitude_;
}
 void MapPoint::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.MapPoint.longitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rosbag_Topic::kMsgTypeFieldNumber;
const int Rosbag_Topic::kMsgCountFieldNumber;
const int Rosbag_Topic::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rosbag_Topic::Rosbag_Topic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.Rosbag.Topic)
}

void Rosbag_Topic::InitAsDefaultInstance() {
}

Rosbag_Topic::Rosbag_Topic(const Rosbag_Topic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.Rosbag.Topic)
}

void Rosbag_Topic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_count_ = 0;
  frequency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rosbag_Topic::~Rosbag_Topic() {
  // @@protoc_insertion_point(destructor:apollo.data.Rosbag.Topic)
  SharedDtor();
}

void Rosbag_Topic::SharedDtor() {
  msg_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Rosbag_Topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rosbag_Topic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rosbag_Topic_descriptor_;
}

const Rosbag_Topic& Rosbag_Topic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftask_2eproto();
  return *default_instance_;
}

Rosbag_Topic* Rosbag_Topic::default_instance_ = NULL;

Rosbag_Topic* Rosbag_Topic::New(::google::protobuf::Arena* arena) const {
  Rosbag_Topic* n = new Rosbag_Topic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rosbag_Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Rosbag.Topic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rosbag_Topic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rosbag_Topic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(frequency_, msg_count_);
    if (has_msg_type()) {
      msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Rosbag_Topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.Rosbag.Topic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.Rosbag.Topic.msg_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_count;
        break;
      }

      // optional int32 msg_count = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_count_)));
          set_has_msg_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_frequency;
        break;
      }

      // optional double frequency = 3;
      case 3: {
        if (tag == 25) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.Rosbag.Topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.Rosbag.Topic)
  return false;
#undef DO_
}

void Rosbag_Topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.Rosbag.Topic)
  // optional string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Rosbag.Topic.msg_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_type(), output);
  }

  // optional int32 msg_count = 2;
  if (has_msg_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_count(), output);
  }

  // optional double frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->frequency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.Rosbag.Topic)
}

::google::protobuf::uint8* Rosbag_Topic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Rosbag.Topic)
  // optional string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Rosbag.Topic.msg_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // optional int32 msg_count = 2;
  if (has_msg_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_count(), target);
  }

  // optional double frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->frequency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Rosbag.Topic)
  return target;
}

int Rosbag_Topic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Rosbag.Topic)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

    // optional int32 msg_count = 2;
    if (has_msg_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_count());
    }

    // optional double frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rosbag_Topic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.Rosbag.Topic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Rosbag_Topic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rosbag_Topic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.Rosbag.Topic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.Rosbag.Topic)
    MergeFrom(*source);
  }
}

void Rosbag_Topic::MergeFrom(const Rosbag_Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Rosbag.Topic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_has_msg_type();
      msg_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_type_);
    }
    if (from.has_msg_count()) {
      set_msg_count(from.msg_count());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Rosbag_Topic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.Rosbag.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rosbag_Topic::CopyFrom(const Rosbag_Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Rosbag.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rosbag_Topic::IsInitialized() const {

  return true;
}

void Rosbag_Topic::Swap(Rosbag_Topic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rosbag_Topic::InternalSwap(Rosbag_Topic* other) {
  msg_type_.Swap(&other->msg_type_);
  std::swap(msg_count_, other->msg_count_);
  std::swap(frequency_, other->frequency_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rosbag_Topic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rosbag_Topic_descriptor_;
  metadata.reflection = Rosbag_Topic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rosbag::kNameFieldNumber;
const int Rosbag::kSizeFieldNumber;
const int Rosbag::kVersionFieldNumber;
const int Rosbag::kStartTimeFieldNumber;
const int Rosbag::kEndTimeFieldNumber;
const int Rosbag::kMsgCountFieldNumber;
const int Rosbag::kTopicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rosbag::Rosbag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.Rosbag)
}

void Rosbag::InitAsDefaultInstance() {
}

Rosbag::Rosbag(const Rosbag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.Rosbag)
}

void Rosbag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  version_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  msg_count_ = 0;
  topics_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  topics_.SetEntryDescriptor(
      &::apollo::data::Rosbag_TopicsEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rosbag::~Rosbag() {
  // @@protoc_insertion_point(destructor:apollo.data.Rosbag)
  SharedDtor();
}

void Rosbag::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Rosbag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rosbag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rosbag_descriptor_;
}

const Rosbag& Rosbag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftask_2eproto();
  return *default_instance_;
}

Rosbag* Rosbag::default_instance_ = NULL;

Rosbag* Rosbag::New(::google::protobuf::Arena* arena) const {
  Rosbag* n = new Rosbag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rosbag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Rosbag)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rosbag, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rosbag*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(size_, end_time_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  topics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Rosbag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.Rosbag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.Rosbag.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional int32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_start_time;
        break;
      }

      // optional double start_time = 4;
      case 4: {
        if (tag == 33) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_end_time;
        break;
      }

      // optional double end_time = 5;
      case 5: {
        if (tag == 41) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_msg_count;
        break;
      }

      // optional int32 msg_count = 6;
      case 6: {
        if (tag == 48) {
         parse_msg_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_count_)));
          set_has_msg_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_topics;
        break;
      }

      // map<string, .apollo.data.Rosbag.Topic> topics = 7;
      case 7: {
        if (tag == 58) {
         parse_topics:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topics:
          Rosbag_TopicsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::data::Rosbag_Topic,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic > > parser(&topics_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.Rosbag.TopicsEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_topics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.Rosbag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.Rosbag)
  return false;
#undef DO_
}

void Rosbag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.Rosbag)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Rosbag.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // optional double start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start_time(), output);
  }

  // optional double end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->end_time(), output);
  }

  // optional int32 msg_count = 6;
  if (has_msg_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->msg_count(), output);
  }

  // map<string, .apollo.data.Rosbag.Topic> topics = 7;
  if (!this->topics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.Rosbag.TopicsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->topics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->topics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::const_iterator
          it = this->topics().begin();
          it != this->topics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Rosbag_TopicsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(topics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Rosbag_TopicsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::const_iterator
          it = this->topics().begin();
          it != this->topics().end(); ++it) {
        entry.reset(topics_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.Rosbag)
}

::google::protobuf::uint8* Rosbag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Rosbag)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Rosbag.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // optional int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // optional double start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start_time(), target);
  }

  // optional double end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->end_time(), target);
  }

  // optional int32 msg_count = 6;
  if (has_msg_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->msg_count(), target);
  }

  // map<string, .apollo.data.Rosbag.Topic> topics = 7;
  if (!this->topics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.Rosbag.TopicsEntry.key");
      }
    };

    if (deterministic &&
        this->topics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->topics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::const_iterator
          it = this->topics().begin();
          it != this->topics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Rosbag_TopicsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(topics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Rosbag_TopicsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::const_iterator
          it = this->topics().begin();
          it != this->topics().end(); ++it) {
        entry.reset(topics_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Rosbag)
  return target;
}

int Rosbag::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Rosbag)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional double start_time = 4;
    if (has_start_time()) {
      total_size += 1 + 8;
    }

    // optional double end_time = 5;
    if (has_end_time()) {
      total_size += 1 + 8;
    }

    // optional int32 msg_count = 6;
    if (has_msg_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_count());
    }

  }
  // map<string, .apollo.data.Rosbag.Topic> topics = 7;
  total_size += 1 * this->topics_size();
  {
    ::google::protobuf::scoped_ptr<Rosbag_TopicsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >::const_iterator
        it = this->topics().begin();
        it != this->topics().end(); ++it) {
      entry.reset(topics_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rosbag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.Rosbag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Rosbag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rosbag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.Rosbag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.Rosbag)
    MergeFrom(*source);
  }
}

void Rosbag::MergeFrom(const Rosbag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Rosbag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topics_.MergeFrom(from.topics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_msg_count()) {
      set_msg_count(from.msg_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Rosbag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.Rosbag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rosbag::CopyFrom(const Rosbag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Rosbag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rosbag::IsInitialized() const {

  return true;
}

void Rosbag::Swap(Rosbag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rosbag::InternalSwap(Rosbag* other) {
  name_.Swap(&other->name_);
  std::swap(size_, other->size_);
  std::swap(version_, other->version_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(msg_count_, other->msg_count_);
  topics_.Swap(&other->topics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rosbag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rosbag_descriptor_;
  metadata.reflection = Rosbag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rosbag_Topic

// optional string msg_type = 1;
bool Rosbag_Topic::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rosbag_Topic::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Rosbag_Topic::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rosbag_Topic::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_type();
}
 const ::std::string& Rosbag_Topic::msg_type() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.msg_type)
  return msg_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rosbag_Topic::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.msg_type)
}
 void Rosbag_Topic::set_msg_type(const char* value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Rosbag.Topic.msg_type)
}
 void Rosbag_Topic::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Rosbag.Topic.msg_type)
}
 ::std::string* Rosbag_Topic::mutable_msg_type() {
  set_has_msg_type();
  // @@protoc_insertion_point(field_mutable:apollo.data.Rosbag.Topic.msg_type)
  return msg_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Rosbag_Topic::release_msg_type() {
  // @@protoc_insertion_point(field_release:apollo.data.Rosbag.Topic.msg_type)
  clear_has_msg_type();
  return msg_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rosbag_Topic::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type != NULL) {
    set_has_msg_type();
  } else {
    clear_has_msg_type();
  }
  msg_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Rosbag.Topic.msg_type)
}

// optional int32 msg_count = 2;
bool Rosbag_Topic::has_msg_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rosbag_Topic::set_has_msg_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Rosbag_Topic::clear_has_msg_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rosbag_Topic::clear_msg_count() {
  msg_count_ = 0;
  clear_has_msg_count();
}
 ::google::protobuf::int32 Rosbag_Topic::msg_count() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.msg_count)
  return msg_count_;
}
 void Rosbag_Topic::set_msg_count(::google::protobuf::int32 value) {
  set_has_msg_count();
  msg_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.msg_count)
}

// optional double frequency = 3;
bool Rosbag_Topic::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Rosbag_Topic::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
void Rosbag_Topic::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
void Rosbag_Topic::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
 double Rosbag_Topic::frequency() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.frequency)
  return frequency_;
}
 void Rosbag_Topic::set_frequency(double value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.frequency)
}

// -------------------------------------------------------------------

// Rosbag

// optional string name = 1;
bool Rosbag::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rosbag::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Rosbag::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rosbag::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Rosbag::name() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rosbag::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.name)
}
 void Rosbag::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Rosbag.name)
}
 void Rosbag::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Rosbag.name)
}
 ::std::string* Rosbag::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.Rosbag.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Rosbag::release_name() {
  // @@protoc_insertion_point(field_release:apollo.data.Rosbag.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rosbag::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Rosbag.name)
}

// optional uint64 size = 2;
bool Rosbag::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rosbag::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void Rosbag::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rosbag::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::uint64 Rosbag::size() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.size)
  return size_;
}
 void Rosbag::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.size)
}

// optional int32 version = 3;
bool Rosbag::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Rosbag::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Rosbag::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Rosbag::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 Rosbag::version() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.version)
  return version_;
}
 void Rosbag::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.version)
}

// optional double start_time = 4;
bool Rosbag::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Rosbag::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Rosbag::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Rosbag::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
 double Rosbag::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.start_time)
  return start_time_;
}
 void Rosbag::set_start_time(double value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.start_time)
}

// optional double end_time = 5;
bool Rosbag::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Rosbag::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
void Rosbag::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void Rosbag::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
 double Rosbag::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.end_time)
  return end_time_;
}
 void Rosbag::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.end_time)
}

// optional int32 msg_count = 6;
bool Rosbag::has_msg_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Rosbag::set_has_msg_count() {
  _has_bits_[0] |= 0x00000020u;
}
void Rosbag::clear_has_msg_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void Rosbag::clear_msg_count() {
  msg_count_ = 0;
  clear_has_msg_count();
}
 ::google::protobuf::int32 Rosbag::msg_count() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.msg_count)
  return msg_count_;
}
 void Rosbag::set_msg_count(::google::protobuf::int32 value) {
  set_has_msg_count();
  msg_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.msg_count)
}

// map<string, .apollo.data.Rosbag.Topic> topics = 7;
int Rosbag::topics_size() const {
  return topics_.size();
}
void Rosbag::clear_topics() {
  topics_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >&
Rosbag::topics() const {
  // @@protoc_insertion_point(field_map:apollo.data.Rosbag.topics)
  return topics_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >*
Rosbag::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.Rosbag.topics)
  return topics_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Disengagement::kTimeFieldNumber;
const int Disengagement::kLocationFieldNumber;
const int Disengagement::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Disengagement::Disengagement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.Disengagement)
}

void Disengagement::InitAsDefaultInstance() {
  location_ = const_cast< ::apollo::data::MapPoint*>(&::apollo::data::MapPoint::default_instance());
}

Disengagement::Disengagement(const Disengagement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.Disengagement)
}

void Disengagement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = 0;
  location_ = NULL;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Disengagement::~Disengagement() {
  // @@protoc_insertion_point(destructor:apollo.data.Disengagement)
  SharedDtor();
}

void Disengagement::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete location_;
  }
}

void Disengagement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disengagement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Disengagement_descriptor_;
}

const Disengagement& Disengagement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftask_2eproto();
  return *default_instance_;
}

Disengagement* Disengagement::default_instance_ = NULL;

Disengagement* Disengagement::New(::google::protobuf::Arena* arena) const {
  Disengagement* n = new Disengagement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Disengagement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Disengagement)
  if (_has_bits_[0 / 32] & 7u) {
    time_ = 0;
    if (has_location()) {
      if (location_ != NULL) location_->::apollo::data::MapPoint::Clear();
    }
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Disengagement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.Disengagement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // optional .apollo.data.MapPoint location = 2;
      case 2: {
        if (tag == 18) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.Disengagement.desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.Disengagement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.Disengagement)
  return false;
#undef DO_
}

void Disengagement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.Disengagement)
  // optional double time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // optional .apollo.data.MapPoint location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Disengagement.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.Disengagement)
}

::google::protobuf::uint8* Disengagement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Disengagement)
  // optional double time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // optional .apollo.data.MapPoint location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, false, target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Disengagement.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Disengagement)
  return target;
}

int Disengagement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Disengagement)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double time = 1;
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.data.MapPoint location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disengagement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.Disengagement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Disengagement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Disengagement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.Disengagement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.Disengagement)
    MergeFrom(*source);
  }
}

void Disengagement::MergeFrom(const Disengagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Disengagement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_location()) {
      mutable_location()->::apollo::data::MapPoint::MergeFrom(from.location());
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Disengagement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.Disengagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disengagement::CopyFrom(const Disengagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Disengagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disengagement::IsInitialized() const {

  return true;
}

void Disengagement::Swap(Disengagement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Disengagement::InternalSwap(Disengagement* other) {
  std::swap(time_, other->time_);
  std::swap(location_, other->location_);
  desc_.Swap(&other->desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Disengagement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Disengagement_descriptor_;
  metadata.reflection = Disengagement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Disengagement

// optional double time = 1;
bool Disengagement::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Disengagement::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Disengagement::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Disengagement::clear_time() {
  time_ = 0;
  clear_has_time();
}
 double Disengagement::time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.time)
  return time_;
}
 void Disengagement::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Disengagement.time)
}

// optional .apollo.data.MapPoint location = 2;
bool Disengagement::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Disengagement::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
void Disengagement::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void Disengagement::clear_location() {
  if (location_ != NULL) location_->::apollo::data::MapPoint::Clear();
  clear_has_location();
}
const ::apollo::data::MapPoint& Disengagement::location() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::apollo::data::MapPoint* Disengagement::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::apollo::data::MapPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.Disengagement.location)
  return location_;
}
::apollo::data::MapPoint* Disengagement::release_location() {
  // @@protoc_insertion_point(field_release:apollo.data.Disengagement.location)
  clear_has_location();
  ::apollo::data::MapPoint* temp = location_;
  location_ = NULL;
  return temp;
}
void Disengagement::set_allocated_location(::apollo::data::MapPoint* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Disengagement.location)
}

// optional string desc = 3;
bool Disengagement::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Disengagement::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void Disengagement::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void Disengagement::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
 const ::std::string& Disengagement::desc() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Disengagement::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Disengagement.desc)
}
 void Disengagement::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Disengagement.desc)
}
 void Disengagement::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Disengagement.desc)
}
 ::std::string* Disengagement::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:apollo.data.Disengagement.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Disengagement::release_desc() {
  // @@protoc_insertion_point(field_release:apollo.data.Disengagement.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Disengagement::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Disengagement.desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Task_LoopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_LoopType_descriptor_;
}
bool Task_LoopType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Task_LoopType Task::UNKNOWN;
const Task_LoopType Task::OPEN_LOOP;
const Task_LoopType Task::CLOSE_LOOP;
const Task_LoopType Task::LoopType_MIN;
const Task_LoopType Task::LoopType_MAX;
const int Task::LoopType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kIdFieldNumber;
const int Task::kStartTimeFieldNumber;
const int Task::kEndTimeFieldNumber;
const int Task::kLoopTypeFieldNumber;
const int Task::kInfoFieldNumber;
const int Task::kBagsFieldNumber;
const int Task::kTopicsFieldNumber;
const int Task::kDisengagementsFieldNumber;
const int Task::kMapPathFieldNumber;
const int Task::kMileageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.Task)
}

void Task::InitAsDefaultInstance() {
  info_ = const_cast< ::apollo::data::StaticInfo*>(&::apollo::data::StaticInfo::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.Task)
}

void Task::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = 0;
  end_time_ = 0;
  loop_type_ = 0;
  info_ = NULL;
  mileage_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  mileage_.SetEntryDescriptor(
      &::apollo::data::Task_MileageEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:apollo.data.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftask_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New(::google::protobuf::Arena* arena) const {
  Task* n = new Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Task)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Task, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Task*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(start_time_, end_time_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    loop_type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::apollo::data::StaticInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  bags_.Clear();
  topics_.Clear();
  disengagements_.Clear();
  map_path_.Clear();
  mileage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.Task.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_start_time;
        break;
      }

      // optional double start_time = 2;
      case 2: {
        if (tag == 17) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_end_time;
        break;
      }

      // optional double end_time = 3;
      case 3: {
        if (tag == 25) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_loop_type;
        break;
      }

      // optional .apollo.data.Task.LoopType loop_type = 4;
      case 4: {
        if (tag == 32) {
         parse_loop_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::data::Task_LoopType_IsValid(value)) {
            set_loop_type(static_cast< ::apollo::data::Task_LoopType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .apollo.data.StaticInfo info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bags;
        break;
      }

      // repeated .apollo.data.Rosbag bags = 6;
      case 6: {
        if (tag == 50) {
         parse_bags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_bags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_topics;
        break;
      }

      // repeated string topics = 7;
      case 7: {
        if (tag == 58) {
         parse_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topics(this->topics_size() - 1).data(),
            this->topics(this->topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.Task.topics");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_topics;
        if (input->ExpectTag(66)) goto parse_disengagements;
        break;
      }

      // repeated .apollo.data.Disengagement disengagements = 8;
      case 8: {
        if (tag == 66) {
         parse_disengagements:
          DO_(input->IncrementRecursionDepth());
         parse_loop_disengagements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_disengagements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_disengagements;
        if (input->ExpectTag(74)) goto parse_loop_map_path;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.data.MapPoint map_path = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_map_path;
        if (input->ExpectTag(82)) goto parse_loop_mileage;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, double> mileage = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mileage:
          Task_MileageEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&mileage_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.Task.MileageEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_mileage;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.Task)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Task.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_time(), output);
  }

  // optional double end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_time(), output);
  }

  // optional .apollo.data.Task.LoopType loop_type = 4;
  if (has_loop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->loop_type(), output);
  }

  // optional .apollo.data.StaticInfo info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->info_, output);
  }

  // repeated .apollo.data.Rosbag bags = 6;
  for (unsigned int i = 0, n = this->bags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bags(i), output);
  }

  // repeated string topics = 7;
  for (int i = 0; i < this->topics_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topics(i).data(), this->topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Task.topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->topics(i), output);
  }

  // repeated .apollo.data.Disengagement disengagements = 8;
  for (unsigned int i = 0, n = this->disengagements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->disengagements(i), output);
  }

  // repeated .apollo.data.MapPoint map_path = 9;
  for (unsigned int i = 0, n = this->map_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->map_path(i), output);
  }

  // map<string, double> mileage = 10;
  if (!this->mileage().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.Task.MileageEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->mileage().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->mileage().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->mileage().begin();
          it != this->mileage().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Task_MileageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(mileage_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Task_MileageEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->mileage().begin();
          it != this->mileage().end(); ++it) {
        entry.reset(mileage_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Task)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Task.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_time(), target);
  }

  // optional double end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_time(), target);
  }

  // optional .apollo.data.Task.LoopType loop_type = 4;
  if (has_loop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->loop_type(), target);
  }

  // optional .apollo.data.StaticInfo info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->info_, false, target);
  }

  // repeated .apollo.data.Rosbag bags = 6;
  for (unsigned int i = 0, n = this->bags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->bags(i), false, target);
  }

  // repeated string topics = 7;
  for (int i = 0; i < this->topics_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topics(i).data(), this->topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.Task.topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->topics(i), target);
  }

  // repeated .apollo.data.Disengagement disengagements = 8;
  for (unsigned int i = 0, n = this->disengagements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->disengagements(i), false, target);
  }

  // repeated .apollo.data.MapPoint map_path = 9;
  for (unsigned int i = 0, n = this->map_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->map_path(i), false, target);
  }

  // map<string, double> mileage = 10;
  if (!this->mileage().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.Task.MileageEntry.key");
      }
    };

    if (deterministic &&
        this->mileage().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->mileage().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->mileage().begin();
          it != this->mileage().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Task_MileageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(mileage_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Task_MileageEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->mileage().begin();
          it != this->mileage().end(); ++it) {
        entry.reset(mileage_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Task)
  return target;
}

int Task::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Task)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double start_time = 2;
    if (has_start_time()) {
      total_size += 1 + 8;
    }

    // optional double end_time = 3;
    if (has_end_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.data.Task.LoopType loop_type = 4;
    if (has_loop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_type());
    }

    // optional .apollo.data.StaticInfo info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

  }
  // repeated .apollo.data.Rosbag bags = 6;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  // repeated string topics = 7;
  total_size += 1 * this->topics_size();
  for (int i = 0; i < this->topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topics(i));
  }

  // repeated .apollo.data.Disengagement disengagements = 8;
  total_size += 1 * this->disengagements_size();
  for (int i = 0; i < this->disengagements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disengagements(i));
  }

  // repeated .apollo.data.MapPoint map_path = 9;
  total_size += 1 * this->map_path_size();
  for (int i = 0; i < this->map_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_path(i));
  }

  // map<string, double> mileage = 10;
  total_size += 1 * this->mileage_size();
  {
    ::google::protobuf::scoped_ptr<Task_MileageEntry> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->mileage().begin();
        it != this->mileage().end(); ++it) {
      entry.reset(mileage_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Task* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bags_.MergeFrom(from.bags_);
  topics_.MergeFrom(from.topics_);
  disengagements_.MergeFrom(from.disengagements_);
  map_path_.MergeFrom(from.map_path_);
  mileage_.MergeFrom(from.mileage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_loop_type()) {
      set_loop_type(from.loop_type());
    }
    if (from.has_info()) {
      mutable_info()->::apollo::data::StaticInfo::MergeFrom(from.info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {

  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  id_.Swap(&other->id_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(loop_type_, other->loop_type_);
  std::swap(info_, other->info_);
  bags_.UnsafeArenaSwap(&other->bags_);
  topics_.UnsafeArenaSwap(&other->topics_);
  disengagements_.UnsafeArenaSwap(&other->disengagements_);
  map_path_.UnsafeArenaSwap(&other->map_path_);
  mileage_.Swap(&other->mileage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// optional string id = 1;
bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Task::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Task::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Task.id)
}
 void Task::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Task.id)
}
 void Task::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Task.id)
}
 ::std::string* Task::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:apollo.data.Task.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Task::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Task.id)
}

// optional double start_time = 2;
bool Task::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Task::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Task::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Task::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
 double Task::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.start_time)
  return start_time_;
}
 void Task::set_start_time(double value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Task.start_time)
}

// optional double end_time = 3;
bool Task::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Task::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Task::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Task::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
 double Task::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.end_time)
  return end_time_;
}
 void Task::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Task.end_time)
}

// optional .apollo.data.Task.LoopType loop_type = 4;
bool Task::has_loop_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Task::set_has_loop_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Task::clear_has_loop_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Task::clear_loop_type() {
  loop_type_ = 0;
  clear_has_loop_type();
}
 ::apollo::data::Task_LoopType Task::loop_type() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.loop_type)
  return static_cast< ::apollo::data::Task_LoopType >(loop_type_);
}
 void Task::set_loop_type(::apollo::data::Task_LoopType value) {
  assert(::apollo::data::Task_LoopType_IsValid(value));
  set_has_loop_type();
  loop_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Task.loop_type)
}

// optional .apollo.data.StaticInfo info = 5;
bool Task::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Task::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
void Task::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void Task::clear_info() {
  if (info_ != NULL) info_->::apollo::data::StaticInfo::Clear();
  clear_has_info();
}
const ::apollo::data::StaticInfo& Task::info() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::apollo::data::StaticInfo* Task::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::apollo::data::StaticInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.info)
  return info_;
}
::apollo::data::StaticInfo* Task::release_info() {
  // @@protoc_insertion_point(field_release:apollo.data.Task.info)
  clear_has_info();
  ::apollo::data::StaticInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void Task::set_allocated_info(::apollo::data::StaticInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Task.info)
}

// repeated .apollo.data.Rosbag bags = 6;
int Task::bags_size() const {
  return bags_.size();
}
void Task::clear_bags() {
  bags_.Clear();
}
const ::apollo::data::Rosbag& Task::bags(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.bags)
  return bags_.Get(index);
}
::apollo::data::Rosbag* Task::mutable_bags(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.bags)
  return bags_.Mutable(index);
}
::apollo::data::Rosbag* Task::add_bags() {
  // @@protoc_insertion_point(field_add:apollo.data.Task.bags)
  return bags_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::data::Rosbag >*
Task::mutable_bags() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.bags)
  return &bags_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::data::Rosbag >&
Task::bags() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.bags)
  return bags_;
}

// repeated string topics = 7;
int Task::topics_size() const {
  return topics_.size();
}
void Task::clear_topics() {
  topics_.Clear();
}
 const ::std::string& Task::topics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.topics)
  return topics_.Get(index);
}
 ::std::string* Task::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.topics)
  return topics_.Mutable(index);
}
 void Task::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.data.Task.topics)
  topics_.Mutable(index)->assign(value);
}
 void Task::set_topics(int index, const char* value) {
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.data.Task.topics)
}
 void Task::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Task.topics)
}
 ::std::string* Task::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:apollo.data.Task.topics)
  return topics_.Add();
}
 void Task::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.data.Task.topics)
}
 void Task::add_topics(const char* value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.data.Task.topics)
}
 void Task::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.data.Task.topics)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Task::topics() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.topics)
  return topics_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Task::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.topics)
  return &topics_;
}

// repeated .apollo.data.Disengagement disengagements = 8;
int Task::disengagements_size() const {
  return disengagements_.size();
}
void Task::clear_disengagements() {
  disengagements_.Clear();
}
const ::apollo::data::Disengagement& Task::disengagements(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.disengagements)
  return disengagements_.Get(index);
}
::apollo::data::Disengagement* Task::mutable_disengagements(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.disengagements)
  return disengagements_.Mutable(index);
}
::apollo::data::Disengagement* Task::add_disengagements() {
  // @@protoc_insertion_point(field_add:apollo.data.Task.disengagements)
  return disengagements_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::data::Disengagement >*
Task::mutable_disengagements() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.disengagements)
  return &disengagements_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::data::Disengagement >&
Task::disengagements() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.disengagements)
  return disengagements_;
}

// repeated .apollo.data.MapPoint map_path = 9;
int Task::map_path_size() const {
  return map_path_.size();
}
void Task::clear_map_path() {
  map_path_.Clear();
}
const ::apollo::data::MapPoint& Task::map_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.map_path)
  return map_path_.Get(index);
}
::apollo::data::MapPoint* Task::mutable_map_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.map_path)
  return map_path_.Mutable(index);
}
::apollo::data::MapPoint* Task::add_map_path() {
  // @@protoc_insertion_point(field_add:apollo.data.Task.map_path)
  return map_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::data::MapPoint >*
Task::mutable_map_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.map_path)
  return &map_path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::data::MapPoint >&
Task::map_path() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.map_path)
  return map_path_;
}

// map<string, double> mileage = 10;
int Task::mileage_size() const {
  return mileage_.size();
}
void Task::clear_mileage() {
  mileage_.Clear();
}
 const ::google::protobuf::Map< ::std::string, double >&
Task::mileage() const {
  // @@protoc_insertion_point(field_map:apollo.data.Task.mileage)
  return mileage_.GetMap();
}
 ::google::protobuf::Map< ::std::string, double >*
Task::mutable_mileage() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.Task.mileage)
  return mileage_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
