// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pnc_point.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common/pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

namespace {

const ::google::protobuf::Descriptor* SLPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrenetFramePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrenetFramePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fpnc_5fpoint_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2fpnc_5fpoint_2eproto() {
  protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/pnc_point.proto");
  GOOGLE_CHECK(file != NULL);
  SLPoint_descriptor_ = file->message_type(0);
  static const int SLPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, l_),
  };
  SLPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLPoint_descriptor_,
      SLPoint::default_instance_,
      SLPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(SLPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, _internal_metadata_),
      -1);
  FrenetFramePoint_descriptor_ = file->message_type(1);
  static const int FrenetFramePoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, dl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, ddl_),
  };
  FrenetFramePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FrenetFramePoint_descriptor_,
      FrenetFramePoint::default_instance_,
      FrenetFramePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(FrenetFramePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, _internal_metadata_),
      -1);
  SpeedPoint_descriptor_ = file->message_type(2);
  static const int SpeedPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, da_),
  };
  SpeedPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeedPoint_descriptor_,
      SpeedPoint::default_instance_,
      SpeedPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpeedPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, _internal_metadata_),
      -1);
  PathPoint_descriptor_ = file->message_type(3);
  static const int PathPoint_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, dkappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, ddkappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, x_derivative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, y_derivative_),
  };
  PathPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPoint_descriptor_,
      PathPoint::default_instance_,
      PathPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _internal_metadata_),
      -1);
  Path_descriptor_ = file->message_type(4);
  static const int Path_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, path_point_),
  };
  Path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_[0]),
      -1,
      -1,
      sizeof(Path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
      -1);
  TrajectoryPoint_descriptor_ = file->message_type(5);
  static const int TrajectoryPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, path_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, relative_time_),
  };
  TrajectoryPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryPoint_descriptor_,
      TrajectoryPoint::default_instance_,
      TrajectoryPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrajectoryPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fpnc_5fpoint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLPoint_descriptor_, &SLPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FrenetFramePoint_descriptor_, &FrenetFramePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeedPoint_descriptor_, &SpeedPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPoint_descriptor_, &PathPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryPoint_descriptor_, &TrajectoryPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fpnc_5fpoint_2eproto() {
  delete SLPoint::default_instance_;
  delete SLPoint_reflection_;
  delete FrenetFramePoint::default_instance_;
  delete FrenetFramePoint_reflection_;
  delete SpeedPoint::default_instance_;
  delete SpeedPoint_reflection_;
  delete PathPoint::default_instance_;
  delete PathPoint_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete TrajectoryPoint::default_instance_;
  delete TrajectoryPoint_reflection_;
}

void protobuf_AddDesc_common_2fpnc_5fpoint_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2fpnc_5fpoint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026common/pnc_point.proto\022\rapollo.common\""
    "\037\n\007SLPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\"A\n\020Fren"
    "etFramePoint\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022\n\n\002dl"
    "\030\003 \001(\001\022\013\n\003ddl\030\004 \001(\001\"D\n\nSpeedPoint\022\t\n\001s\030\001"
    " \001(\001\022\t\n\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\n\n"
    "\002da\030\005 \001(\001\"\263\001\n\tPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030"
    "\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\r\n\005kappa"
    "\030\005 \001(\001\022\t\n\001s\030\006 \001(\001\022\016\n\006dkappa\030\007 \001(\001\022\017\n\007ddk"
    "appa\030\010 \001(\001\022\017\n\007lane_id\030\t \001(\t\022\024\n\014x_derivat"
    "ive\030\n \001(\001\022\024\n\014y_derivative\030\013 \001(\001\"B\n\004Path\022"
    "\014\n\004name\030\001 \001(\t\022,\n\npath_point\030\002 \003(\0132\030.apol"
    "lo.common.PathPoint\"l\n\017TrajectoryPoint\022,"
    "\n\npath_point\030\001 \001(\0132\030.apollo.common.PathP"
    "oint\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001(\001\022\025\n\rrelative_t"
    "ime\030\004 \001(\001", 569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/pnc_point.proto", &protobuf_RegisterTypes);
  SLPoint::default_instance_ = new SLPoint();
  FrenetFramePoint::default_instance_ = new FrenetFramePoint();
  SpeedPoint::default_instance_ = new SpeedPoint();
  PathPoint::default_instance_ = new PathPoint();
  Path::default_instance_ = new Path();
  TrajectoryPoint::default_instance_ = new TrajectoryPoint();
  SLPoint::default_instance_->InitAsDefaultInstance();
  FrenetFramePoint::default_instance_->InitAsDefaultInstance();
  SpeedPoint::default_instance_->InitAsDefaultInstance();
  PathPoint::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  TrajectoryPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fpnc_5fpoint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fpnc_5fpoint_2eproto {
  StaticDescriptorInitializer_common_2fpnc_5fpoint_2eproto() {
    protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  }
} static_descriptor_initializer_common_2fpnc_5fpoint_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLPoint::kSFieldNumber;
const int SLPoint::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLPoint::SLPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.SLPoint)
}

void SLPoint::InitAsDefaultInstance() {
}

SLPoint::SLPoint(const SLPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.SLPoint)
}

void SLPoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  l_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLPoint::~SLPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SLPoint)
  SharedDtor();
}

void SLPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLPoint_descriptor_;
}

const SLPoint& SLPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  return *default_instance_;
}

SLPoint* SLPoint::default_instance_ = NULL;

SLPoint* SLPoint::New(::google::protobuf::Arena* arena) const {
  SLPoint* n = new SLPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.SLPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SLPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(s_, l_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SLPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.SLPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_l;
        break;
      }

      // optional double l = 2;
      case 2: {
        if (tag == 17) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.SLPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.SLPoint)
  return false;
#undef DO_
}

void SLPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.SLPoint)
  // optional double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.SLPoint)
}

::google::protobuf::uint8* SLPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SLPoint)
  // optional double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SLPoint)
  return target;
}

int SLPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.SLPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.SLPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SLPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.SLPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.SLPoint)
    MergeFrom(*source);
  }
}

void SLPoint::MergeFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.SLPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SLPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLPoint::CopyFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPoint::IsInitialized() const {

  return true;
}

void SLPoint::Swap(SLPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLPoint::InternalSwap(SLPoint* other) {
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLPoint_descriptor_;
  metadata.reflection = SLPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLPoint

// optional double s = 1;
bool SLPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SLPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double SLPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.SLPoint.s)
  return s_;
}
 void SLPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SLPoint.s)
}

// optional double l = 2;
bool SLPoint::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SLPoint::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
void SLPoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void SLPoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
 double SLPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.common.SLPoint.l)
  return l_;
}
 void SLPoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SLPoint.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrenetFramePoint::kSFieldNumber;
const int FrenetFramePoint::kLFieldNumber;
const int FrenetFramePoint::kDlFieldNumber;
const int FrenetFramePoint::kDdlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrenetFramePoint::FrenetFramePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.FrenetFramePoint)
}

void FrenetFramePoint::InitAsDefaultInstance() {
}

FrenetFramePoint::FrenetFramePoint(const FrenetFramePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.FrenetFramePoint)
}

void FrenetFramePoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  l_ = 0;
  dl_ = 0;
  ddl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrenetFramePoint::~FrenetFramePoint() {
  // @@protoc_insertion_point(destructor:apollo.common.FrenetFramePoint)
  SharedDtor();
}

void FrenetFramePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrenetFramePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrenetFramePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrenetFramePoint_descriptor_;
}

const FrenetFramePoint& FrenetFramePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  return *default_instance_;
}

FrenetFramePoint* FrenetFramePoint::default_instance_ = NULL;

FrenetFramePoint* FrenetFramePoint::New(::google::protobuf::Arena* arena) const {
  FrenetFramePoint* n = new FrenetFramePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrenetFramePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.FrenetFramePoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FrenetFramePoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FrenetFramePoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(s_, ddl_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FrenetFramePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.FrenetFramePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_l;
        break;
      }

      // optional double l = 2;
      case 2: {
        if (tag == 17) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_dl;
        break;
      }

      // optional double dl = 3;
      case 3: {
        if (tag == 25) {
         parse_dl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_)));
          set_has_dl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ddl;
        break;
      }

      // optional double ddl = 4;
      case 4: {
        if (tag == 33) {
         parse_ddl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_)));
          set_has_ddl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.FrenetFramePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.FrenetFramePoint)
  return false;
#undef DO_
}

void FrenetFramePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.FrenetFramePoint)
  // optional double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  // optional double dl = 3;
  if (has_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dl(), output);
  }

  // optional double ddl = 4;
  if (has_ddl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ddl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.FrenetFramePoint)
}

::google::protobuf::uint8* FrenetFramePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.FrenetFramePoint)
  // optional double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  // optional double dl = 3;
  if (has_dl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dl(), target);
  }

  // optional double ddl = 4;
  if (has_ddl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ddl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.FrenetFramePoint)
  return target;
}

int FrenetFramePoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.FrenetFramePoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double dl = 3;
    if (has_dl()) {
      total_size += 1 + 8;
    }

    // optional double ddl = 4;
    if (has_ddl()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrenetFramePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.FrenetFramePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FrenetFramePoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FrenetFramePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.FrenetFramePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.FrenetFramePoint)
    MergeFrom(*source);
  }
}

void FrenetFramePoint::MergeFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.FrenetFramePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
    if (from.has_dl()) {
      set_dl(from.dl());
    }
    if (from.has_ddl()) {
      set_ddl(from.ddl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FrenetFramePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrenetFramePoint::CopyFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrenetFramePoint::IsInitialized() const {

  return true;
}

void FrenetFramePoint::Swap(FrenetFramePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrenetFramePoint::InternalSwap(FrenetFramePoint* other) {
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  std::swap(dl_, other->dl_);
  std::swap(ddl_, other->ddl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrenetFramePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrenetFramePoint_descriptor_;
  metadata.reflection = FrenetFramePoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrenetFramePoint

// optional double s = 1;
bool FrenetFramePoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrenetFramePoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void FrenetFramePoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrenetFramePoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double FrenetFramePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.s)
  return s_;
}
 void FrenetFramePoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.s)
}

// optional double l = 2;
bool FrenetFramePoint::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrenetFramePoint::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
void FrenetFramePoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrenetFramePoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
 double FrenetFramePoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.l)
  return l_;
}
 void FrenetFramePoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.l)
}

// optional double dl = 3;
bool FrenetFramePoint::has_dl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrenetFramePoint::set_has_dl() {
  _has_bits_[0] |= 0x00000004u;
}
void FrenetFramePoint::clear_has_dl() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrenetFramePoint::clear_dl() {
  dl_ = 0;
  clear_has_dl();
}
 double FrenetFramePoint::dl() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.dl)
  return dl_;
}
 void FrenetFramePoint::set_dl(double value) {
  set_has_dl();
  dl_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.dl)
}

// optional double ddl = 4;
bool FrenetFramePoint::has_ddl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrenetFramePoint::set_has_ddl() {
  _has_bits_[0] |= 0x00000008u;
}
void FrenetFramePoint::clear_has_ddl() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrenetFramePoint::clear_ddl() {
  ddl_ = 0;
  clear_has_ddl();
}
 double FrenetFramePoint::ddl() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.ddl)
  return ddl_;
}
 void FrenetFramePoint::set_ddl(double value) {
  set_has_ddl();
  ddl_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.ddl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPoint::kSFieldNumber;
const int SpeedPoint::kTFieldNumber;
const int SpeedPoint::kVFieldNumber;
const int SpeedPoint::kAFieldNumber;
const int SpeedPoint::kDaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPoint::SpeedPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.SpeedPoint)
}

void SpeedPoint::InitAsDefaultInstance() {
}

SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.SpeedPoint)
}

void SpeedPoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  t_ = 0;
  v_ = 0;
  a_ = 0;
  da_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SpeedPoint)
  SharedDtor();
}

void SpeedPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPoint_descriptor_;
}

const SpeedPoint& SpeedPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  return *default_instance_;
}

SpeedPoint* SpeedPoint::default_instance_ = NULL;

SpeedPoint* SpeedPoint::New(::google::protobuf::Arena* arena) const {
  SpeedPoint* n = new SpeedPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.SpeedPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpeedPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpeedPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(s_, da_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpeedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.SpeedPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t;
        break;
      }

      // optional double t = 2;
      case 2: {
        if (tag == 17) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_v;
        break;
      }

      // optional double v = 3;
      case 3: {
        if (tag == 25) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_a;
        break;
      }

      // optional double a = 4;
      case 4: {
        if (tag == 33) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_da;
        break;
      }

      // optional double da = 5;
      case 5: {
        if (tag == 41) {
         parse_da:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
          set_has_da();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.SpeedPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.SpeedPoint)
  return false;
#undef DO_
}

void SpeedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.SpeedPoint)
  // optional double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional double da = 5;
  if (has_da()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.SpeedPoint)
}

::google::protobuf::uint8* SpeedPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SpeedPoint)
  // optional double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional double da = 5;
  if (has_da()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SpeedPoint)
  return target;
}

int SpeedPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.SpeedPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (has_da()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.SpeedPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeedPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.SpeedPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.SpeedPoint)
    MergeFrom(*source);
  }
}

void SpeedPoint::MergeFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.SpeedPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_da()) {
      set_da(from.da());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpeedPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {

  return true;
}

void SpeedPoint::Swap(SpeedPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPoint::InternalSwap(SpeedPoint* other) {
  std::swap(s_, other->s_);
  std::swap(t_, other->t_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(da_, other->da_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPoint_descriptor_;
  metadata.reflection = SpeedPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPoint

// optional double s = 1;
bool SpeedPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double SpeedPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.s)
  return s_;
}
 void SpeedPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.s)
}

// optional double t = 2;
bool SpeedPoint::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPoint::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPoint::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPoint::clear_t() {
  t_ = 0;
  clear_has_t();
}
 double SpeedPoint::t() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.t)
  return t_;
}
 void SpeedPoint::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.t)
}

// optional double v = 3;
bool SpeedPoint::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPoint::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
 double SpeedPoint::v() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.v)
  return v_;
}
 void SpeedPoint::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.v)
}

// optional double a = 4;
bool SpeedPoint::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPoint::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
 double SpeedPoint::a() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.a)
  return a_;
}
 void SpeedPoint::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.a)
}

// optional double da = 5;
bool SpeedPoint::has_da() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPoint::set_has_da() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPoint::clear_has_da() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPoint::clear_da() {
  da_ = 0;
  clear_has_da();
}
 double SpeedPoint::da() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.da)
  return da_;
}
 void SpeedPoint::set_da(double value) {
  set_has_da();
  da_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.da)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPoint::kXFieldNumber;
const int PathPoint::kYFieldNumber;
const int PathPoint::kZFieldNumber;
const int PathPoint::kThetaFieldNumber;
const int PathPoint::kKappaFieldNumber;
const int PathPoint::kSFieldNumber;
const int PathPoint::kDkappaFieldNumber;
const int PathPoint::kDdkappaFieldNumber;
const int PathPoint::kLaneIdFieldNumber;
const int PathPoint::kXDerivativeFieldNumber;
const int PathPoint::kYDerivativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPoint::PathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.PathPoint)
}

void PathPoint::InitAsDefaultInstance() {
}

PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.PathPoint)
}

void PathPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  theta_ = 0;
  kappa_ = 0;
  s_ = 0;
  dkappa_ = 0;
  ddkappa_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_derivative_ = 0;
  y_derivative_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPoint_descriptor_;
}

const PathPoint& PathPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  return *default_instance_;
}

PathPoint* PathPoint::default_instance_ = NULL;

PathPoint* PathPoint::New(::google::protobuf::Arena* arena) const {
  PathPoint* n = new PathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.PathPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(x_, ddkappa_);
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(x_derivative_, y_derivative_);
    if (has_lane_id()) {
      lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (tag == 33) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_kappa;
        break;
      }

      // optional double kappa = 5;
      case 5: {
        if (tag == 41) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
          set_has_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_s;
        break;
      }

      // optional double s = 6;
      case 6: {
        if (tag == 49) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dkappa;
        break;
      }

      // optional double dkappa = 7;
      case 7: {
        if (tag == 57) {
         parse_dkappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_)));
          set_has_dkappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_ddkappa;
        break;
      }

      // optional double ddkappa = 8;
      case 8: {
        if (tag == 65) {
         parse_ddkappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddkappa_)));
          set_has_ddkappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lane_id;
        break;
      }

      // optional string lane_id = 9;
      case 9: {
        if (tag == 74) {
         parse_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.PathPoint.lane_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_x_derivative;
        break;
      }

      // optional double x_derivative = 10;
      case 10: {
        if (tag == 81) {
         parse_x_derivative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_derivative_)));
          set_has_x_derivative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_y_derivative;
        break;
      }

      // optional double y_derivative = 11;
      case 11: {
        if (tag == 89) {
         parse_y_derivative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_derivative_)));
          set_has_y_derivative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.PathPoint)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double theta = 4;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double kappa = 5;
  if (has_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kappa(), output);
  }

  // optional double s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s(), output);
  }

  // optional double dkappa = 7;
  if (has_dkappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dkappa(), output);
  }

  // optional double ddkappa = 8;
  if (has_ddkappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ddkappa(), output);
  }

  // optional string lane_id = 9;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.PathPoint.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lane_id(), output);
  }

  // optional double x_derivative = 10;
  if (has_x_derivative()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->x_derivative(), output);
  }

  // optional double y_derivative = 11;
  if (has_y_derivative()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->y_derivative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.PathPoint)
}

::google::protobuf::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.PathPoint)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double theta = 4;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double kappa = 5;
  if (has_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kappa(), target);
  }

  // optional double s = 6;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s(), target);
  }

  // optional double dkappa = 7;
  if (has_dkappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dkappa(), target);
  }

  // optional double ddkappa = 8;
  if (has_ddkappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ddkappa(), target);
  }

  // optional string lane_id = 9;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.PathPoint.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lane_id(), target);
  }

  // optional double x_derivative = 10;
  if (has_x_derivative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->x_derivative(), target);
  }

  // optional double y_derivative = 11;
  if (has_y_derivative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->y_derivative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.PathPoint)
  return target;
}

int PathPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.PathPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 5;
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional double s = 6;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double dkappa = 7;
    if (has_dkappa()) {
      total_size += 1 + 8;
    }

    // optional double ddkappa = 8;
    if (has_ddkappa()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string lane_id = 9;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double x_derivative = 10;
    if (has_x_derivative()) {
      total_size += 1 + 8;
    }

    // optional double y_derivative = 11;
    if (has_y_derivative()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.PathPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.PathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.PathPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_kappa()) {
      set_kappa(from.kappa());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_dkappa()) {
      set_dkappa(from.dkappa());
    }
    if (from.has_ddkappa()) {
      set_ddkappa(from.ddkappa());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lane_id()) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (from.has_x_derivative()) {
      set_x_derivative(from.x_derivative());
    }
    if (from.has_y_derivative()) {
      set_y_derivative(from.y_derivative());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {

  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPoint::InternalSwap(PathPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(theta_, other->theta_);
  std::swap(kappa_, other->kappa_);
  std::swap(s_, other->s_);
  std::swap(dkappa_, other->dkappa_);
  std::swap(ddkappa_, other->ddkappa_);
  lane_id_.Swap(&other->lane_id_);
  std::swap(x_derivative_, other->x_derivative_);
  std::swap(y_derivative_, other->y_derivative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPoint_descriptor_;
  metadata.reflection = PathPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPoint

// optional double x = 1;
bool PathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double PathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x)
  return x_;
}
 void PathPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x)
}

// optional double y = 2;
bool PathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PathPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double PathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y)
  return y_;
}
 void PathPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y)
}

// optional double z = 3;
bool PathPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void PathPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double PathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.z)
  return z_;
}
 void PathPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.z)
}

// optional double theta = 4;
bool PathPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PathPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
void PathPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
void PathPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
 double PathPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.theta)
  return theta_;
}
 void PathPoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.theta)
}

// optional double kappa = 5;
bool PathPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PathPoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
void PathPoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
void PathPoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
 double PathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.kappa)
  return kappa_;
}
 void PathPoint::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.kappa)
}

// optional double s = 6;
bool PathPoint::has_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PathPoint::set_has_s() {
  _has_bits_[0] |= 0x00000020u;
}
void PathPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000020u;
}
void PathPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double PathPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.s)
  return s_;
}
 void PathPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.s)
}

// optional double dkappa = 7;
bool PathPoint::has_dkappa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PathPoint::set_has_dkappa() {
  _has_bits_[0] |= 0x00000040u;
}
void PathPoint::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000040u;
}
void PathPoint::clear_dkappa() {
  dkappa_ = 0;
  clear_has_dkappa();
}
 double PathPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.dkappa)
  return dkappa_;
}
 void PathPoint::set_dkappa(double value) {
  set_has_dkappa();
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.dkappa)
}

// optional double ddkappa = 8;
bool PathPoint::has_ddkappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PathPoint::set_has_ddkappa() {
  _has_bits_[0] |= 0x00000080u;
}
void PathPoint::clear_has_ddkappa() {
  _has_bits_[0] &= ~0x00000080u;
}
void PathPoint::clear_ddkappa() {
  ddkappa_ = 0;
  clear_has_ddkappa();
}
 double PathPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.ddkappa)
  return ddkappa_;
}
 void PathPoint::set_ddkappa(double value) {
  set_has_ddkappa();
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.ddkappa)
}

// optional string lane_id = 9;
bool PathPoint::has_lane_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PathPoint::set_has_lane_id() {
  _has_bits_[0] |= 0x00000100u;
}
void PathPoint::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void PathPoint::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
 const ::std::string& PathPoint::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathPoint::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.lane_id)
}
 void PathPoint::set_lane_id(const char* value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.PathPoint.lane_id)
}
 void PathPoint::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.PathPoint.lane_id)
}
 ::std::string* PathPoint::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.common.PathPoint.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathPoint::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.common.PathPoint.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathPoint::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.PathPoint.lane_id)
}

// optional double x_derivative = 10;
bool PathPoint::has_x_derivative() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PathPoint::set_has_x_derivative() {
  _has_bits_[0] |= 0x00000200u;
}
void PathPoint::clear_has_x_derivative() {
  _has_bits_[0] &= ~0x00000200u;
}
void PathPoint::clear_x_derivative() {
  x_derivative_ = 0;
  clear_has_x_derivative();
}
 double PathPoint::x_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x_derivative)
  return x_derivative_;
}
 void PathPoint::set_x_derivative(double value) {
  set_has_x_derivative();
  x_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x_derivative)
}

// optional double y_derivative = 11;
bool PathPoint::has_y_derivative() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PathPoint::set_has_y_derivative() {
  _has_bits_[0] |= 0x00000400u;
}
void PathPoint::clear_has_y_derivative() {
  _has_bits_[0] &= ~0x00000400u;
}
void PathPoint::clear_y_derivative() {
  y_derivative_ = 0;
  clear_has_y_derivative();
}
 double PathPoint::y_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y_derivative)
  return y_derivative_;
}
 void PathPoint::set_y_derivative(double value) {
  set_has_y_derivative();
  y_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y_derivative)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kNameFieldNumber;
const int Path::kPathPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Path)
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Path)
}

void Path::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:apollo.common.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Path)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.Path.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path_point;
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 2;
      case 2: {
        if (tag == 18) {
         parse_path_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_path_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Path)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.Path.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Path)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.Path.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->path_point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Path)
  return target;
}

int Path::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Path)
  int total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  total_size += 1 * this->path_point_size();
  for (int i = 0; i < this->path_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Path)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Path* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Path)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  path_point_.MergeFrom(from.path_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  name_.Swap(&other->name_);
  path_point_.UnsafeArenaSwap(&other->path_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// optional string name = 1;
bool Path::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Path::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Path::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Path::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:apollo.common.Path.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Path.name)
}
 void Path::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Path.name)
}
 void Path::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Path.name)
}
 ::std::string* Path::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.Path.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:apollo.common.Path.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Path.name)
}

// repeated .apollo.common.PathPoint path_point = 2;
int Path::path_point_size() const {
  return path_point_.size();
}
void Path::clear_path_point() {
  path_point_.Clear();
}
const ::apollo::common::PathPoint& Path::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Path.path_point)
  return path_point_.Get(index);
}
::apollo::common::PathPoint* Path::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Path.path_point)
  return path_point_.Mutable(index);
}
::apollo::common::PathPoint* Path::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.common.Path.path_point)
  return path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
Path::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Path.path_point)
  return &path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
Path::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.common.Path.path_point)
  return path_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPoint::kPathPointFieldNumber;
const int TrajectoryPoint::kVFieldNumber;
const int TrajectoryPoint::kAFieldNumber;
const int TrajectoryPoint::kRelativeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.TrajectoryPoint)
}

void TrajectoryPoint::InitAsDefaultInstance() {
  path_point_ = const_cast< ::apollo::common::PathPoint*>(&::apollo::common::PathPoint::default_instance());
}

TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  path_point_ = NULL;
  v_ = 0;
  a_ = 0;
  relative_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != default_instance_) {
    delete path_point_;
  }
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryPoint_descriptor_;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  return *default_instance_;
}

TrajectoryPoint* TrajectoryPoint::default_instance_ = NULL;

TrajectoryPoint* TrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  TrajectoryPoint* n = new TrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.TrajectoryPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrajectoryPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrajectoryPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(v_, relative_time_);
    if (has_path_point()) {
      if (path_point_ != NULL) path_point_->::apollo::common::PathPoint::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PathPoint path_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_v;
        break;
      }

      // optional double v = 2;
      case 2: {
        if (tag == 17) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_a;
        break;
      }

      // optional double a = 3;
      case 3: {
        if (tag == 25) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_relative_time;
        break;
      }

      // optional double relative_time = 4;
      case 4: {
        if (tag == 33) {
         parse_relative_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
          set_has_relative_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.TrajectoryPoint)
  // optional .apollo.common.PathPoint path_point = 1;
  if (has_path_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_point_, output);
  }

  // optional double v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // optional double a = 3;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // optional double relative_time = 4;
  if (has_relative_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.TrajectoryPoint)
  // optional .apollo.common.PathPoint path_point = 1;
  if (has_path_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_point_, false, target);
  }

  // optional double v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // optional double a = 3;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // optional double relative_time = 4;
  if (has_relative_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.TrajectoryPoint)
  return target;
}

int TrajectoryPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.TrajectoryPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.PathPoint path_point = 1;
    if (has_path_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_point_);
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.TrajectoryPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.TrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.TrajectoryPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_point()) {
      mutable_path_point()->::apollo::common::PathPoint::MergeFrom(from.path_point());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_relative_time()) {
      set_relative_time(from.relative_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {

  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  std::swap(path_point_, other->path_point_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(relative_time_, other->relative_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryPoint_descriptor_;
  metadata.reflection = TrajectoryPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPoint

// optional .apollo.common.PathPoint path_point = 1;
bool TrajectoryPoint::has_path_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPoint::set_has_path_point() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPoint::clear_has_path_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPoint::clear_path_point() {
  if (path_point_ != NULL) path_point_->::apollo::common::PathPoint::Clear();
  clear_has_path_point();
}
const ::apollo::common::PathPoint& TrajectoryPoint::path_point() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.path_point)
  return path_point_ != NULL ? *path_point_ : *default_instance_->path_point_;
}
::apollo::common::PathPoint* TrajectoryPoint::mutable_path_point() {
  set_has_path_point();
  if (path_point_ == NULL) {
    path_point_ = new ::apollo::common::PathPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.TrajectoryPoint.path_point)
  return path_point_;
}
::apollo::common::PathPoint* TrajectoryPoint::release_path_point() {
  // @@protoc_insertion_point(field_release:apollo.common.TrajectoryPoint.path_point)
  clear_has_path_point();
  ::apollo::common::PathPoint* temp = path_point_;
  path_point_ = NULL;
  return temp;
}
void TrajectoryPoint::set_allocated_path_point(::apollo::common::PathPoint* path_point) {
  delete path_point_;
  path_point_ = path_point;
  if (path_point) {
    set_has_path_point();
  } else {
    clear_has_path_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.TrajectoryPoint.path_point)
}

// optional double v = 2;
bool TrajectoryPoint::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPoint::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
 double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.v)
  return v_;
}
 void TrajectoryPoint::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.v)
}

// optional double a = 3;
bool TrajectoryPoint::has_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrajectoryPoint::set_has_a() {
  _has_bits_[0] |= 0x00000004u;
}
void TrajectoryPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
 double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.a)
  return a_;
}
 void TrajectoryPoint::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.a)
}

// optional double relative_time = 4;
bool TrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
 double TrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.relative_time)
  return relative_time_;
}
 void TrajectoryPoint::set_relative_time(double value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.relative_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
