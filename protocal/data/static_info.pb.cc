// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/static_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data/static_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace data {

namespace {

const ::google::protobuf::Descriptor* VehicleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleInfo_Brand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleInfo_Model_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnvironmentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvironmentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardwareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardwareInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardwareInfo_ConfigsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SoftwareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftwareInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftwareInfo_ConfigsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticInfoConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticInfoConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2fstatic_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_data_2fstatic_5finfo_2eproto() {
  protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data/static_info.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleInfo_descriptor_ = file->message_type(0);
  static const int VehicleInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, license_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, canbus_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, vehicle_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, control_config_),
  };
  VehicleInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleInfo_descriptor_,
      VehicleInfo::default_instance_,
      VehicleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, _internal_metadata_),
      -1);
  VehicleInfo_Brand_descriptor_ = VehicleInfo_descriptor_->enum_type(0);
  VehicleInfo_Model_descriptor_ = VehicleInfo_descriptor_->enum_type(1);
  EnvironmentInfo_descriptor_ = file->message_type(1);
  static const int EnvironmentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentInfo, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentInfo, temperature_),
  };
  EnvironmentInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnvironmentInfo_descriptor_,
      EnvironmentInfo::default_instance_,
      EnvironmentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(EnvironmentInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentInfo, _internal_metadata_),
      -1);
  HardwareInfo_descriptor_ = file->message_type(2);
  static const int HardwareInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareInfo, configs_),
  };
  HardwareInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HardwareInfo_descriptor_,
      HardwareInfo::default_instance_,
      HardwareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(HardwareInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareInfo, _internal_metadata_),
      -1);
  HardwareInfo_ConfigsEntry_descriptor_ = HardwareInfo_descriptor_->nested_type(0);
  SoftwareInfo_descriptor_ = file->message_type(3);
  static const int SoftwareInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, docker_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, commit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, configs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, latest_routing_request_),
  };
  SoftwareInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftwareInfo_descriptor_,
      SoftwareInfo::default_instance_,
      SoftwareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SoftwareInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, _internal_metadata_),
      -1);
  SoftwareInfo_ConfigsEntry_descriptor_ = SoftwareInfo_descriptor_->nested_type(0);
  UserInfo_descriptor_ = file->message_type(4);
  static const int UserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, driver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, co_driver_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      -1);
  StaticInfo_descriptor_ = file->message_type(5);
  static const int StaticInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, user_),
  };
  StaticInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StaticInfo_descriptor_,
      StaticInfo::default_instance_,
      StaticInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(StaticInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, _internal_metadata_),
      -1);
  StaticInfoConf_descriptor_ = file->message_type(6);
  static const int StaticInfoConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoConf, hardware_configs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoConf, software_configs_),
  };
  StaticInfoConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StaticInfoConf_descriptor_,
      StaticInfoConf::default_instance_,
      StaticInfoConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(StaticInfoConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoConf, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2fstatic_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleInfo_descriptor_, &VehicleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnvironmentInfo_descriptor_, &EnvironmentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HardwareInfo_descriptor_, &HardwareInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HardwareInfo_ConfigsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                HardwareInfo_ConfigsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftwareInfo_descriptor_, &SoftwareInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SoftwareInfo_ConfigsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                SoftwareInfo_ConfigsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StaticInfo_descriptor_, &StaticInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StaticInfoConf_descriptor_, &StaticInfoConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2fstatic_5finfo_2eproto() {
  delete VehicleInfo::default_instance_;
  delete VehicleInfo_reflection_;
  delete EnvironmentInfo::default_instance_;
  delete EnvironmentInfo_reflection_;
  delete HardwareInfo::default_instance_;
  delete HardwareInfo_reflection_;
  delete SoftwareInfo::default_instance_;
  delete SoftwareInfo_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete StaticInfo::default_instance_;
  delete StaticInfo_reflection_;
  delete StaticInfoConf::default_instance_;
  delete StaticInfoConf_reflection_;
}

void protobuf_AddDesc_data_2fstatic_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_data_2fstatic_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::canbus::protobuf_AddDesc_canbus_2fcanbus_5fconf_2eproto();
  ::apollo::canbus::protobuf_AddDesc_canbus_2fchassis_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  ::apollo::control::protobuf_AddDesc_control_2fcontrol_5fconf_2eproto();
  ::apollo::routing::protobuf_AddDesc_routing_2frouting_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026data/static_info.proto\022\013apollo.data\032\030c"
    "anbus/canbus_conf.proto\032\024canbus/chassis."
    "proto\032#common/configs/vehicle_config.pro"
    "to\032\032control/control_conf.proto\032\025routing/"
    "routing.proto\"\345\002\n\013VehicleInfo\022\014\n\004name\030\001 "
    "\001(\t\022-\n\005brand\030\002 \001(\0162\036.apollo.data.Vehicle"
    "Info.Brand\022-\n\005model\030\003 \001(\0162\036.apollo.data."
    "VehicleInfo.Model\022\'\n\007license\030\004 \001(\0132\026.apo"
    "llo.canbus.License\022.\n\013canbus_conf\030\005 \001(\0132"
    "\031.apollo.canbus.CanbusConf\0224\n\016vehicle_co"
    "nfig\030\006 \001(\0132\034.apollo.common.VehicleConfig"
    "\0223\n\016control_config\030\007 \001(\0132\033.apollo.contro"
    "l.ControlConf\"\024\n\005Brand\022\013\n\007LINCOLN\020\001\"\020\n\005M"
    "odel\022\007\n\003MKZ\020\001\"8\n\017EnvironmentInfo\022\020\n\010map_"
    "name\030\001 \001(\t\022\023\n\013temperature\030\002 \001(\002\"w\n\014Hardw"
    "areInfo\0227\n\007configs\030\001 \003(\0132&.apollo.data.H"
    "ardwareInfo.ConfigsEntry\032.\n\014ConfigsEntry"
    "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\356\001\n\014Sof"
    "twareInfo\022\024\n\014docker_image\030\001 \001(\t\022\021\n\tcommi"
    "t_id\030\002 \001(\t\022\014\n\004mode\030\003 \001(\t\0227\n\007configs\030\004 \003("
    "\0132&.apollo.data.SoftwareInfo.ConfigsEntr"
    "y\022>\n\026latest_routing_request\030\005 \001(\0132\036.apol"
    "lo.routing.RoutingRequest\032.\n\014ConfigsEntr"
    "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"=\n\010Use"
    "rInfo\022\016\n\006entity\030\001 \001(\t\022\016\n\006driver\030\002 \001(\t\022\021\n"
    "\tco_driver\030\003 \001(\t\"\351\001\n\nStaticInfo\022)\n\007vehic"
    "le\030\001 \001(\0132\030.apollo.data.VehicleInfo\0221\n\013en"
    "vironment\030\002 \001(\0132\034.apollo.data.Environmen"
    "tInfo\022+\n\010hardware\030\003 \001(\0132\031.apollo.data.Ha"
    "rdwareInfo\022+\n\010software\030\004 \001(\0132\031.apollo.da"
    "ta.SoftwareInfo\022#\n\004user\030\005 \001(\0132\025.apollo.d"
    "ata.UserInfo\"D\n\016StaticInfoConf\022\030\n\020hardwa"
    "re_configs\030\001 \003(\t\022\030\n\020software_configs\030\002 \003"
    "(\t", 1322);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data/static_info.proto", &protobuf_RegisterTypes);
  VehicleInfo::default_instance_ = new VehicleInfo();
  EnvironmentInfo::default_instance_ = new EnvironmentInfo();
  HardwareInfo::default_instance_ = new HardwareInfo();
  SoftwareInfo::default_instance_ = new SoftwareInfo();
  UserInfo::default_instance_ = new UserInfo();
  StaticInfo::default_instance_ = new StaticInfo();
  StaticInfoConf::default_instance_ = new StaticInfoConf();
  VehicleInfo::default_instance_->InitAsDefaultInstance();
  EnvironmentInfo::default_instance_->InitAsDefaultInstance();
  HardwareInfo::default_instance_->InitAsDefaultInstance();
  SoftwareInfo::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  StaticInfo::default_instance_->InitAsDefaultInstance();
  StaticInfoConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2fstatic_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2fstatic_5finfo_2eproto {
  StaticDescriptorInitializer_data_2fstatic_5finfo_2eproto() {
    protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  }
} static_descriptor_initializer_data_2fstatic_5finfo_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleInfo_Brand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleInfo_Brand_descriptor_;
}
bool VehicleInfo_Brand_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleInfo_Brand VehicleInfo::LINCOLN;
const VehicleInfo_Brand VehicleInfo::Brand_MIN;
const VehicleInfo_Brand VehicleInfo::Brand_MAX;
const int VehicleInfo::Brand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleInfo_Model_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleInfo_Model_descriptor_;
}
bool VehicleInfo_Model_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleInfo_Model VehicleInfo::MKZ;
const VehicleInfo_Model VehicleInfo::Model_MIN;
const VehicleInfo_Model VehicleInfo::Model_MAX;
const int VehicleInfo::Model_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInfo::kNameFieldNumber;
const int VehicleInfo::kBrandFieldNumber;
const int VehicleInfo::kModelFieldNumber;
const int VehicleInfo::kLicenseFieldNumber;
const int VehicleInfo::kCanbusConfFieldNumber;
const int VehicleInfo::kVehicleConfigFieldNumber;
const int VehicleInfo::kControlConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInfo::VehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.VehicleInfo)
}

void VehicleInfo::InitAsDefaultInstance() {
  license_ = const_cast< ::apollo::canbus::License*>(&::apollo::canbus::License::default_instance());
  canbus_conf_ = const_cast< ::apollo::canbus::CanbusConf*>(&::apollo::canbus::CanbusConf::default_instance());
  vehicle_config_ = const_cast< ::apollo::common::VehicleConfig*>(&::apollo::common::VehicleConfig::default_instance());
  control_config_ = const_cast< ::apollo::control::ControlConf*>(&::apollo::control::ControlConf::default_instance());
}

VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_ = 1;
  model_ = 1;
  license_ = NULL;
  canbus_conf_ = NULL;
  vehicle_config_ = NULL;
  control_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete license_;
    delete canbus_conf_;
    delete vehicle_config_;
    delete control_config_;
  }
}

void VehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleInfo_descriptor_;
}

const VehicleInfo& VehicleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

VehicleInfo* VehicleInfo::default_instance_ = NULL;

VehicleInfo* VehicleInfo::New(::google::protobuf::Arena* arena) const {
  VehicleInfo* n = new VehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.VehicleInfo)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    brand_ = 1;
    model_ = 1;
    if (has_license()) {
      if (license_ != NULL) license_->::apollo::canbus::License::Clear();
    }
    if (has_canbus_conf()) {
      if (canbus_conf_ != NULL) canbus_conf_->::apollo::canbus::CanbusConf::Clear();
    }
    if (has_vehicle_config()) {
      if (vehicle_config_ != NULL) vehicle_config_->::apollo::common::VehicleConfig::Clear();
    }
    if (has_control_config()) {
      if (control_config_ != NULL) control_config_->::apollo::control::ControlConf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.VehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.VehicleInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_brand;
        break;
      }

      // optional .apollo.data.VehicleInfo.Brand brand = 2;
      case 2: {
        if (tag == 16) {
         parse_brand:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::data::VehicleInfo_Brand_IsValid(value)) {
            set_brand(static_cast< ::apollo::data::VehicleInfo_Brand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_model;
        break;
      }

      // optional .apollo.data.VehicleInfo.Model model = 3;
      case 3: {
        if (tag == 24) {
         parse_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::data::VehicleInfo_Model_IsValid(value)) {
            set_model(static_cast< ::apollo::data::VehicleInfo_Model >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_license;
        break;
      }

      // optional .apollo.canbus.License license = 4;
      case 4: {
        if (tag == 34) {
         parse_license:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_license()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_canbus_conf;
        break;
      }

      // optional .apollo.canbus.CanbusConf canbus_conf = 5;
      case 5: {
        if (tag == 42) {
         parse_canbus_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canbus_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vehicle_config;
        break;
      }

      // optional .apollo.common.VehicleConfig vehicle_config = 6;
      case 6: {
        if (tag == 50) {
         parse_vehicle_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_control_config;
        break;
      }

      // optional .apollo.control.ControlConf control_config = 7;
      case 7: {
        if (tag == 58) {
         parse_control_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.VehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.VehicleInfo)
  return false;
#undef DO_
}

void VehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.VehicleInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.VehicleInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .apollo.data.VehicleInfo.Brand brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->brand(), output);
  }

  // optional .apollo.data.VehicleInfo.Model model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->model(), output);
  }

  // optional .apollo.canbus.License license = 4;
  if (has_license()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->license_, output);
  }

  // optional .apollo.canbus.CanbusConf canbus_conf = 5;
  if (has_canbus_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->canbus_conf_, output);
  }

  // optional .apollo.common.VehicleConfig vehicle_config = 6;
  if (has_vehicle_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->vehicle_config_, output);
  }

  // optional .apollo.control.ControlConf control_config = 7;
  if (has_control_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->control_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.VehicleInfo)
}

::google::protobuf::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.VehicleInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.VehicleInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .apollo.data.VehicleInfo.Brand brand = 2;
  if (has_brand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->brand(), target);
  }

  // optional .apollo.data.VehicleInfo.Model model = 3;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->model(), target);
  }

  // optional .apollo.canbus.License license = 4;
  if (has_license()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->license_, false, target);
  }

  // optional .apollo.canbus.CanbusConf canbus_conf = 5;
  if (has_canbus_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->canbus_conf_, false, target);
  }

  // optional .apollo.common.VehicleConfig vehicle_config = 6;
  if (has_vehicle_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->vehicle_config_, false, target);
  }

  // optional .apollo.control.ControlConf control_config = 7;
  if (has_control_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->control_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.VehicleInfo)
  return target;
}

int VehicleInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.VehicleInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.data.VehicleInfo.Brand brand = 2;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brand());
    }

    // optional .apollo.data.VehicleInfo.Model model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model());
    }

    // optional .apollo.canbus.License license = 4;
    if (has_license()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->license_);
    }

    // optional .apollo.canbus.CanbusConf canbus_conf = 5;
    if (has_canbus_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->canbus_conf_);
    }

    // optional .apollo.common.VehicleConfig vehicle_config = 6;
    if (has_vehicle_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_config_);
    }

    // optional .apollo.control.ControlConf control_config = 7;
    if (has_control_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->control_config_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.VehicleInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.VehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.VehicleInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_license()) {
      mutable_license()->::apollo::canbus::License::MergeFrom(from.license());
    }
    if (from.has_canbus_conf()) {
      mutable_canbus_conf()->::apollo::canbus::CanbusConf::MergeFrom(from.canbus_conf());
    }
    if (from.has_vehicle_config()) {
      mutable_vehicle_config()->::apollo::common::VehicleConfig::MergeFrom(from.vehicle_config());
    }
    if (from.has_control_config()) {
      mutable_control_config()->::apollo::control::ControlConf::MergeFrom(from.control_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {

  return true;
}

void VehicleInfo::Swap(VehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInfo::InternalSwap(VehicleInfo* other) {
  name_.Swap(&other->name_);
  std::swap(brand_, other->brand_);
  std::swap(model_, other->model_);
  std::swap(license_, other->license_);
  std::swap(canbus_conf_, other->canbus_conf_);
  std::swap(vehicle_config_, other->vehicle_config_);
  std::swap(control_config_, other->control_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleInfo_descriptor_;
  metadata.reflection = VehicleInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleInfo

// optional string name = 1;
bool VehicleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& VehicleInfo::name() const {
  // @@protoc_insertion_point(field_get:apollo.data.VehicleInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.VehicleInfo.name)
}
 void VehicleInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.VehicleInfo.name)
}
 void VehicleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.VehicleInfo.name)
}
 ::std::string* VehicleInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.VehicleInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleInfo::release_name() {
  // @@protoc_insertion_point(field_release:apollo.data.VehicleInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.VehicleInfo.name)
}

// optional .apollo.data.VehicleInfo.Brand brand = 2;
bool VehicleInfo::has_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleInfo::set_has_brand() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleInfo::clear_has_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleInfo::clear_brand() {
  brand_ = 1;
  clear_has_brand();
}
 ::apollo::data::VehicleInfo_Brand VehicleInfo::brand() const {
  // @@protoc_insertion_point(field_get:apollo.data.VehicleInfo.brand)
  return static_cast< ::apollo::data::VehicleInfo_Brand >(brand_);
}
 void VehicleInfo::set_brand(::apollo::data::VehicleInfo_Brand value) {
  assert(::apollo::data::VehicleInfo_Brand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.VehicleInfo.brand)
}

// optional .apollo.data.VehicleInfo.Model model = 3;
bool VehicleInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleInfo::clear_model() {
  model_ = 1;
  clear_has_model();
}
 ::apollo::data::VehicleInfo_Model VehicleInfo::model() const {
  // @@protoc_insertion_point(field_get:apollo.data.VehicleInfo.model)
  return static_cast< ::apollo::data::VehicleInfo_Model >(model_);
}
 void VehicleInfo::set_model(::apollo::data::VehicleInfo_Model value) {
  assert(::apollo::data::VehicleInfo_Model_IsValid(value));
  set_has_model();
  model_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.VehicleInfo.model)
}

// optional .apollo.canbus.License license = 4;
bool VehicleInfo::has_license() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleInfo::set_has_license() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleInfo::clear_has_license() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleInfo::clear_license() {
  if (license_ != NULL) license_->::apollo::canbus::License::Clear();
  clear_has_license();
}
const ::apollo::canbus::License& VehicleInfo::license() const {
  // @@protoc_insertion_point(field_get:apollo.data.VehicleInfo.license)
  return license_ != NULL ? *license_ : *default_instance_->license_;
}
::apollo::canbus::License* VehicleInfo::mutable_license() {
  set_has_license();
  if (license_ == NULL) {
    license_ = new ::apollo::canbus::License;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.VehicleInfo.license)
  return license_;
}
::apollo::canbus::License* VehicleInfo::release_license() {
  // @@protoc_insertion_point(field_release:apollo.data.VehicleInfo.license)
  clear_has_license();
  ::apollo::canbus::License* temp = license_;
  license_ = NULL;
  return temp;
}
void VehicleInfo::set_allocated_license(::apollo::canbus::License* license) {
  delete license_;
  license_ = license;
  if (license) {
    set_has_license();
  } else {
    clear_has_license();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.VehicleInfo.license)
}

// optional .apollo.canbus.CanbusConf canbus_conf = 5;
bool VehicleInfo::has_canbus_conf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleInfo::set_has_canbus_conf() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleInfo::clear_has_canbus_conf() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleInfo::clear_canbus_conf() {
  if (canbus_conf_ != NULL) canbus_conf_->::apollo::canbus::CanbusConf::Clear();
  clear_has_canbus_conf();
}
const ::apollo::canbus::CanbusConf& VehicleInfo::canbus_conf() const {
  // @@protoc_insertion_point(field_get:apollo.data.VehicleInfo.canbus_conf)
  return canbus_conf_ != NULL ? *canbus_conf_ : *default_instance_->canbus_conf_;
}
::apollo::canbus::CanbusConf* VehicleInfo::mutable_canbus_conf() {
  set_has_canbus_conf();
  if (canbus_conf_ == NULL) {
    canbus_conf_ = new ::apollo::canbus::CanbusConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.VehicleInfo.canbus_conf)
  return canbus_conf_;
}
::apollo::canbus::CanbusConf* VehicleInfo::release_canbus_conf() {
  // @@protoc_insertion_point(field_release:apollo.data.VehicleInfo.canbus_conf)
  clear_has_canbus_conf();
  ::apollo::canbus::CanbusConf* temp = canbus_conf_;
  canbus_conf_ = NULL;
  return temp;
}
void VehicleInfo::set_allocated_canbus_conf(::apollo::canbus::CanbusConf* canbus_conf) {
  delete canbus_conf_;
  canbus_conf_ = canbus_conf;
  if (canbus_conf) {
    set_has_canbus_conf();
  } else {
    clear_has_canbus_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.VehicleInfo.canbus_conf)
}

// optional .apollo.common.VehicleConfig vehicle_config = 6;
bool VehicleInfo::has_vehicle_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleInfo::set_has_vehicle_config() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleInfo::clear_has_vehicle_config() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleInfo::clear_vehicle_config() {
  if (vehicle_config_ != NULL) vehicle_config_->::apollo::common::VehicleConfig::Clear();
  clear_has_vehicle_config();
}
const ::apollo::common::VehicleConfig& VehicleInfo::vehicle_config() const {
  // @@protoc_insertion_point(field_get:apollo.data.VehicleInfo.vehicle_config)
  return vehicle_config_ != NULL ? *vehicle_config_ : *default_instance_->vehicle_config_;
}
::apollo::common::VehicleConfig* VehicleInfo::mutable_vehicle_config() {
  set_has_vehicle_config();
  if (vehicle_config_ == NULL) {
    vehicle_config_ = new ::apollo::common::VehicleConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.VehicleInfo.vehicle_config)
  return vehicle_config_;
}
::apollo::common::VehicleConfig* VehicleInfo::release_vehicle_config() {
  // @@protoc_insertion_point(field_release:apollo.data.VehicleInfo.vehicle_config)
  clear_has_vehicle_config();
  ::apollo::common::VehicleConfig* temp = vehicle_config_;
  vehicle_config_ = NULL;
  return temp;
}
void VehicleInfo::set_allocated_vehicle_config(::apollo::common::VehicleConfig* vehicle_config) {
  delete vehicle_config_;
  vehicle_config_ = vehicle_config;
  if (vehicle_config) {
    set_has_vehicle_config();
  } else {
    clear_has_vehicle_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.VehicleInfo.vehicle_config)
}

// optional .apollo.control.ControlConf control_config = 7;
bool VehicleInfo::has_control_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleInfo::set_has_control_config() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleInfo::clear_has_control_config() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleInfo::clear_control_config() {
  if (control_config_ != NULL) control_config_->::apollo::control::ControlConf::Clear();
  clear_has_control_config();
}
const ::apollo::control::ControlConf& VehicleInfo::control_config() const {
  // @@protoc_insertion_point(field_get:apollo.data.VehicleInfo.control_config)
  return control_config_ != NULL ? *control_config_ : *default_instance_->control_config_;
}
::apollo::control::ControlConf* VehicleInfo::mutable_control_config() {
  set_has_control_config();
  if (control_config_ == NULL) {
    control_config_ = new ::apollo::control::ControlConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.VehicleInfo.control_config)
  return control_config_;
}
::apollo::control::ControlConf* VehicleInfo::release_control_config() {
  // @@protoc_insertion_point(field_release:apollo.data.VehicleInfo.control_config)
  clear_has_control_config();
  ::apollo::control::ControlConf* temp = control_config_;
  control_config_ = NULL;
  return temp;
}
void VehicleInfo::set_allocated_control_config(::apollo::control::ControlConf* control_config) {
  delete control_config_;
  control_config_ = control_config;
  if (control_config) {
    set_has_control_config();
  } else {
    clear_has_control_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.VehicleInfo.control_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentInfo::kMapNameFieldNumber;
const int EnvironmentInfo::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentInfo::EnvironmentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.EnvironmentInfo)
}

void EnvironmentInfo::InitAsDefaultInstance() {
}

EnvironmentInfo::EnvironmentInfo(const EnvironmentInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.EnvironmentInfo)
}

void EnvironmentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temperature_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvironmentInfo::~EnvironmentInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.EnvironmentInfo)
  SharedDtor();
}

void EnvironmentInfo::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EnvironmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentInfo_descriptor_;
}

const EnvironmentInfo& EnvironmentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

EnvironmentInfo* EnvironmentInfo::default_instance_ = NULL;

EnvironmentInfo* EnvironmentInfo::New(::google::protobuf::Arena* arena) const {
  EnvironmentInfo* n = new EnvironmentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvironmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.EnvironmentInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map_name()) {
      map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    temperature_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnvironmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.EnvironmentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.EnvironmentInfo.map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_temperature;
        break;
      }

      // optional float temperature = 2;
      case 2: {
        if (tag == 21) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.EnvironmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.EnvironmentInfo)
  return false;
#undef DO_
}

void EnvironmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.EnvironmentInfo)
  // optional string map_name = 1;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.EnvironmentInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_name(), output);
  }

  // optional float temperature = 2;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->temperature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.EnvironmentInfo)
}

::google::protobuf::uint8* EnvironmentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.EnvironmentInfo)
  // optional string map_name = 1;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.EnvironmentInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_name(), target);
  }

  // optional float temperature = 2;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->temperature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.EnvironmentInfo)
  return target;
}

int EnvironmentInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.EnvironmentInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string map_name = 1;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional float temperature = 2;
    if (has_temperature()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.EnvironmentInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnvironmentInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.EnvironmentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.EnvironmentInfo)
    MergeFrom(*source);
  }
}

void EnvironmentInfo::MergeFrom(const EnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.EnvironmentInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_name()) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnvironmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.EnvironmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentInfo::CopyFrom(const EnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.EnvironmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentInfo::IsInitialized() const {

  return true;
}

void EnvironmentInfo::Swap(EnvironmentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentInfo::InternalSwap(EnvironmentInfo* other) {
  map_name_.Swap(&other->map_name_);
  std::swap(temperature_, other->temperature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvironmentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvironmentInfo_descriptor_;
  metadata.reflection = EnvironmentInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnvironmentInfo

// optional string map_name = 1;
bool EnvironmentInfo::has_map_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnvironmentInfo::set_has_map_name() {
  _has_bits_[0] |= 0x00000001u;
}
void EnvironmentInfo::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnvironmentInfo::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
 const ::std::string& EnvironmentInfo::map_name() const {
  // @@protoc_insertion_point(field_get:apollo.data.EnvironmentInfo.map_name)
  return map_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnvironmentInfo::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.EnvironmentInfo.map_name)
}
 void EnvironmentInfo::set_map_name(const char* value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.EnvironmentInfo.map_name)
}
 void EnvironmentInfo::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.EnvironmentInfo.map_name)
}
 ::std::string* EnvironmentInfo::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.EnvironmentInfo.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnvironmentInfo::release_map_name() {
  // @@protoc_insertion_point(field_release:apollo.data.EnvironmentInfo.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnvironmentInfo::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.EnvironmentInfo.map_name)
}

// optional float temperature = 2;
bool EnvironmentInfo::has_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnvironmentInfo::set_has_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
void EnvironmentInfo::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnvironmentInfo::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
 float EnvironmentInfo::temperature() const {
  // @@protoc_insertion_point(field_get:apollo.data.EnvironmentInfo.temperature)
  return temperature_;
}
 void EnvironmentInfo::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.EnvironmentInfo.temperature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardwareInfo::kConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardwareInfo::HardwareInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.HardwareInfo)
}

void HardwareInfo::InitAsDefaultInstance() {
}

HardwareInfo::HardwareInfo(const HardwareInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.HardwareInfo)
}

void HardwareInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  configs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  configs_.SetEntryDescriptor(
      &::apollo::data::HardwareInfo_ConfigsEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HardwareInfo::~HardwareInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.HardwareInfo)
  SharedDtor();
}

void HardwareInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HardwareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardwareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardwareInfo_descriptor_;
}

const HardwareInfo& HardwareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

HardwareInfo* HardwareInfo::default_instance_ = NULL;

HardwareInfo* HardwareInfo::New(::google::protobuf::Arena* arena) const {
  HardwareInfo* n = new HardwareInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.HardwareInfo)
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HardwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.HardwareInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> configs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_configs:
          HardwareInfo_ConfigsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&configs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.HardwareInfo.ConfigsEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.HardwareInfo.ConfigsEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_configs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.HardwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.HardwareInfo)
  return false;
#undef DO_
}

void HardwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.HardwareInfo)
  // map<string, string> configs = 1;
  if (!this->configs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.HardwareInfo.ConfigsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.HardwareInfo.ConfigsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->configs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->configs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HardwareInfo_ConfigsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(configs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HardwareInfo_ConfigsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it) {
        entry.reset(configs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.HardwareInfo)
}

::google::protobuf::uint8* HardwareInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.HardwareInfo)
  // map<string, string> configs = 1;
  if (!this->configs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.HardwareInfo.ConfigsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.HardwareInfo.ConfigsEntry.value");
      }
    };

    if (deterministic &&
        this->configs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->configs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HardwareInfo_ConfigsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(configs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HardwareInfo_ConfigsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it) {
        entry.reset(configs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.HardwareInfo)
  return target;
}

int HardwareInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.HardwareInfo)
  int total_size = 0;

  // map<string, string> configs = 1;
  total_size += 1 * this->configs_size();
  {
    ::google::protobuf::scoped_ptr<HardwareInfo_ConfigsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->configs().begin();
        it != this->configs().end(); ++it) {
      entry.reset(configs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardwareInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.HardwareInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HardwareInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HardwareInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.HardwareInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.HardwareInfo)
    MergeFrom(*source);
  }
}

void HardwareInfo::MergeFrom(const HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.HardwareInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  configs_.MergeFrom(from.configs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HardwareInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareInfo::CopyFrom(const HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareInfo::IsInitialized() const {

  return true;
}

void HardwareInfo::Swap(HardwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardwareInfo::InternalSwap(HardwareInfo* other) {
  configs_.Swap(&other->configs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardwareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardwareInfo_descriptor_;
  metadata.reflection = HardwareInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardwareInfo

// map<string, string> configs = 1;
int HardwareInfo::configs_size() const {
  return configs_.size();
}
void HardwareInfo::clear_configs() {
  configs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
HardwareInfo::configs() const {
  // @@protoc_insertion_point(field_map:apollo.data.HardwareInfo.configs)
  return configs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
HardwareInfo::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.HardwareInfo.configs)
  return configs_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftwareInfo::kDockerImageFieldNumber;
const int SoftwareInfo::kCommitIdFieldNumber;
const int SoftwareInfo::kModeFieldNumber;
const int SoftwareInfo::kConfigsFieldNumber;
const int SoftwareInfo::kLatestRoutingRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftwareInfo::SoftwareInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.SoftwareInfo)
}

void SoftwareInfo::InitAsDefaultInstance() {
  latest_routing_request_ = const_cast< ::apollo::routing::RoutingRequest*>(&::apollo::routing::RoutingRequest::default_instance());
}

SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.SoftwareInfo)
}

void SoftwareInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  docker_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commit_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  configs_.SetEntryDescriptor(
      &::apollo::data::SoftwareInfo_ConfigsEntry_descriptor_);
  latest_routing_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.SoftwareInfo)
  SharedDtor();
}

void SoftwareInfo::SharedDtor() {
  docker_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commit_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete latest_routing_request_;
  }
}

void SoftwareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareInfo_descriptor_;
}

const SoftwareInfo& SoftwareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

SoftwareInfo* SoftwareInfo::default_instance_ = NULL;

SoftwareInfo* SoftwareInfo::New(::google::protobuf::Arena* arena) const {
  SoftwareInfo* n = new SoftwareInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.SoftwareInfo)
  if (_has_bits_[0 / 32] & 23u) {
    if (has_docker_image()) {
      docker_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_commit_id()) {
      commit_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mode()) {
      mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_latest_routing_request()) {
      if (latest_routing_request_ != NULL) latest_routing_request_->::apollo::routing::RoutingRequest::Clear();
    }
  }
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SoftwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.SoftwareInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docker_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docker_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docker_image().data(), this->docker_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.SoftwareInfo.docker_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commit_id;
        break;
      }

      // optional string commit_id = 2;
      case 2: {
        if (tag == 18) {
         parse_commit_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commit_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commit_id().data(), this->commit_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.SoftwareInfo.commit_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mode;
        break;
      }

      // optional string mode = 3;
      case 3: {
        if (tag == 26) {
         parse_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.SoftwareInfo.mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_configs;
        break;
      }

      // map<string, string> configs = 4;
      case 4: {
        if (tag == 34) {
         parse_configs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_configs:
          SoftwareInfo_ConfigsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&configs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.SoftwareInfo.ConfigsEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.SoftwareInfo.ConfigsEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_configs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_latest_routing_request;
        break;
      }

      // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
      case 5: {
        if (tag == 42) {
         parse_latest_routing_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest_routing_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.SoftwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.SoftwareInfo)
  return false;
#undef DO_
}

void SoftwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.SoftwareInfo)
  // optional string docker_image = 1;
  if (has_docker_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_image().data(), this->docker_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.docker_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docker_image(), output);
  }

  // optional string commit_id = 2;
  if (has_commit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commit_id().data(), this->commit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.commit_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->commit_id(), output);
  }

  // optional string mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mode(), output);
  }

  // map<string, string> configs = 4;
  if (!this->configs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.SoftwareInfo.ConfigsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.SoftwareInfo.ConfigsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->configs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->configs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SoftwareInfo_ConfigsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(configs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SoftwareInfo_ConfigsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it) {
        entry.reset(configs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
  if (has_latest_routing_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->latest_routing_request_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.SoftwareInfo)
}

::google::protobuf::uint8* SoftwareInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.SoftwareInfo)
  // optional string docker_image = 1;
  if (has_docker_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_image().data(), this->docker_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.docker_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docker_image(), target);
  }

  // optional string commit_id = 2;
  if (has_commit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commit_id().data(), this->commit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.commit_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->commit_id(), target);
  }

  // optional string mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mode(), target);
  }

  // map<string, string> configs = 4;
  if (!this->configs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.SoftwareInfo.ConfigsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.data.SoftwareInfo.ConfigsEntry.value");
      }
    };

    if (deterministic &&
        this->configs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->configs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SoftwareInfo_ConfigsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(configs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SoftwareInfo_ConfigsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it) {
        entry.reset(configs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
  if (has_latest_routing_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->latest_routing_request_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.SoftwareInfo)
  return target;
}

int SoftwareInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.SoftwareInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional string docker_image = 1;
    if (has_docker_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docker_image());
    }

    // optional string commit_id = 2;
    if (has_commit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commit_id());
    }

    // optional string mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

    // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
    if (has_latest_routing_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->latest_routing_request_);
    }

  }
  // map<string, string> configs = 4;
  total_size += 1 * this->configs_size();
  {
    ::google::protobuf::scoped_ptr<SoftwareInfo_ConfigsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->configs().begin();
        it != this->configs().end(); ++it) {
      entry.reset(configs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.SoftwareInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SoftwareInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftwareInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.SoftwareInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.SoftwareInfo)
    MergeFrom(*source);
  }
}

void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.SoftwareInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  configs_.MergeFrom(from.configs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docker_image()) {
      set_has_docker_image();
      docker_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docker_image_);
    }
    if (from.has_commit_id()) {
      set_has_commit_id();
      commit_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commit_id_);
    }
    if (from.has_mode()) {
      set_has_mode();
      mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
    }
    if (from.has_latest_routing_request()) {
      mutable_latest_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from.latest_routing_request());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SoftwareInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {

  return true;
}

void SoftwareInfo::Swap(SoftwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftwareInfo::InternalSwap(SoftwareInfo* other) {
  docker_image_.Swap(&other->docker_image_);
  commit_id_.Swap(&other->commit_id_);
  mode_.Swap(&other->mode_);
  configs_.Swap(&other->configs_);
  std::swap(latest_routing_request_, other->latest_routing_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftwareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftwareInfo_descriptor_;
  metadata.reflection = SoftwareInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftwareInfo

// optional string docker_image = 1;
bool SoftwareInfo::has_docker_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftwareInfo::set_has_docker_image() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftwareInfo::clear_has_docker_image() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftwareInfo::clear_docker_image() {
  docker_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_docker_image();
}
 const ::std::string& SoftwareInfo::docker_image() const {
  // @@protoc_insertion_point(field_get:apollo.data.SoftwareInfo.docker_image)
  return docker_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_docker_image(const ::std::string& value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.SoftwareInfo.docker_image)
}
 void SoftwareInfo::set_docker_image(const char* value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.SoftwareInfo.docker_image)
}
 void SoftwareInfo::set_docker_image(const char* value, size_t size) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.SoftwareInfo.docker_image)
}
 ::std::string* SoftwareInfo::mutable_docker_image() {
  set_has_docker_image();
  // @@protoc_insertion_point(field_mutable:apollo.data.SoftwareInfo.docker_image)
  return docker_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SoftwareInfo::release_docker_image() {
  // @@protoc_insertion_point(field_release:apollo.data.SoftwareInfo.docker_image)
  clear_has_docker_image();
  return docker_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_allocated_docker_image(::std::string* docker_image) {
  if (docker_image != NULL) {
    set_has_docker_image();
  } else {
    clear_has_docker_image();
  }
  docker_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docker_image);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SoftwareInfo.docker_image)
}

// optional string commit_id = 2;
bool SoftwareInfo::has_commit_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SoftwareInfo::set_has_commit_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SoftwareInfo::clear_has_commit_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SoftwareInfo::clear_commit_id() {
  commit_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commit_id();
}
 const ::std::string& SoftwareInfo::commit_id() const {
  // @@protoc_insertion_point(field_get:apollo.data.SoftwareInfo.commit_id)
  return commit_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_commit_id(const ::std::string& value) {
  set_has_commit_id();
  commit_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.SoftwareInfo.commit_id)
}
 void SoftwareInfo::set_commit_id(const char* value) {
  set_has_commit_id();
  commit_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.SoftwareInfo.commit_id)
}
 void SoftwareInfo::set_commit_id(const char* value, size_t size) {
  set_has_commit_id();
  commit_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.SoftwareInfo.commit_id)
}
 ::std::string* SoftwareInfo::mutable_commit_id() {
  set_has_commit_id();
  // @@protoc_insertion_point(field_mutable:apollo.data.SoftwareInfo.commit_id)
  return commit_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SoftwareInfo::release_commit_id() {
  // @@protoc_insertion_point(field_release:apollo.data.SoftwareInfo.commit_id)
  clear_has_commit_id();
  return commit_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_allocated_commit_id(::std::string* commit_id) {
  if (commit_id != NULL) {
    set_has_commit_id();
  } else {
    clear_has_commit_id();
  }
  commit_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commit_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SoftwareInfo.commit_id)
}

// optional string mode = 3;
bool SoftwareInfo::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SoftwareInfo::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void SoftwareInfo::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void SoftwareInfo::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
 const ::std::string& SoftwareInfo::mode() const {
  // @@protoc_insertion_point(field_get:apollo.data.SoftwareInfo.mode)
  return mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.SoftwareInfo.mode)
}
 void SoftwareInfo::set_mode(const char* value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.SoftwareInfo.mode)
}
 void SoftwareInfo::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.SoftwareInfo.mode)
}
 ::std::string* SoftwareInfo::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:apollo.data.SoftwareInfo.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SoftwareInfo::release_mode() {
  // @@protoc_insertion_point(field_release:apollo.data.SoftwareInfo.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SoftwareInfo.mode)
}

// map<string, string> configs = 4;
int SoftwareInfo::configs_size() const {
  return configs_.size();
}
void SoftwareInfo::clear_configs() {
  configs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
SoftwareInfo::configs() const {
  // @@protoc_insertion_point(field_map:apollo.data.SoftwareInfo.configs)
  return configs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
SoftwareInfo::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.SoftwareInfo.configs)
  return configs_.MutableMap();
}

// optional .apollo.routing.RoutingRequest latest_routing_request = 5;
bool SoftwareInfo::has_latest_routing_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SoftwareInfo::set_has_latest_routing_request() {
  _has_bits_[0] |= 0x00000010u;
}
void SoftwareInfo::clear_has_latest_routing_request() {
  _has_bits_[0] &= ~0x00000010u;
}
void SoftwareInfo::clear_latest_routing_request() {
  if (latest_routing_request_ != NULL) latest_routing_request_->::apollo::routing::RoutingRequest::Clear();
  clear_has_latest_routing_request();
}
const ::apollo::routing::RoutingRequest& SoftwareInfo::latest_routing_request() const {
  // @@protoc_insertion_point(field_get:apollo.data.SoftwareInfo.latest_routing_request)
  return latest_routing_request_ != NULL ? *latest_routing_request_ : *default_instance_->latest_routing_request_;
}
::apollo::routing::RoutingRequest* SoftwareInfo::mutable_latest_routing_request() {
  set_has_latest_routing_request();
  if (latest_routing_request_ == NULL) {
    latest_routing_request_ = new ::apollo::routing::RoutingRequest;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.SoftwareInfo.latest_routing_request)
  return latest_routing_request_;
}
::apollo::routing::RoutingRequest* SoftwareInfo::release_latest_routing_request() {
  // @@protoc_insertion_point(field_release:apollo.data.SoftwareInfo.latest_routing_request)
  clear_has_latest_routing_request();
  ::apollo::routing::RoutingRequest* temp = latest_routing_request_;
  latest_routing_request_ = NULL;
  return temp;
}
void SoftwareInfo::set_allocated_latest_routing_request(::apollo::routing::RoutingRequest* latest_routing_request) {
  delete latest_routing_request_;
  latest_routing_request_ = latest_routing_request;
  if (latest_routing_request) {
    set_has_latest_routing_request();
  } else {
    clear_has_latest_routing_request();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SoftwareInfo.latest_routing_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kEntityFieldNumber;
const int UserInfo::kDriverFieldNumber;
const int UserInfo::kCoDriverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  co_driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  entity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  co_driver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.UserInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_entity()) {
      entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_driver()) {
      driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_co_driver()) {
      co_driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity().data(), this->entity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.UserInfo.entity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_driver;
        break;
      }

      // optional string driver = 2;
      case 2: {
        if (tag == 18) {
         parse_driver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->driver().data(), this->driver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.UserInfo.driver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_co_driver;
        break;
      }

      // optional string co_driver = 3;
      case 3: {
        if (tag == 26) {
         parse_co_driver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_co_driver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->co_driver().data(), this->co_driver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.UserInfo.co_driver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.UserInfo)
  // optional string entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity().data(), this->entity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.entity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity(), output);
  }

  // optional string driver = 2;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driver().data(), this->driver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.driver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->driver(), output);
  }

  // optional string co_driver = 3;
  if (has_co_driver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->co_driver().data(), this->co_driver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.co_driver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->co_driver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.UserInfo)
  // optional string entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity().data(), this->entity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.entity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entity(), target);
  }

  // optional string driver = 2;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driver().data(), this->driver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.driver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->driver(), target);
  }

  // optional string co_driver = 3;
  if (has_co_driver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->co_driver().data(), this->co_driver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.co_driver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->co_driver(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.UserInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity());
    }

    // optional string driver = 2;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver());
    }

    // optional string co_driver = 3;
    if (has_co_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->co_driver());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity()) {
      set_has_entity();
      entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_);
    }
    if (from.has_driver()) {
      set_has_driver();
      driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_);
    }
    if (from.has_co_driver()) {
      set_has_co_driver();
      co_driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.co_driver_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  entity_.Swap(&other->entity_);
  driver_.Swap(&other->driver_);
  co_driver_.Swap(&other->co_driver_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional string entity = 1;
bool UserInfo::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_entity() {
  entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity();
}
 const ::std::string& UserInfo::entity() const {
  // @@protoc_insertion_point(field_get:apollo.data.UserInfo.entity)
  return entity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_entity(const ::std::string& value) {
  set_has_entity();
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.UserInfo.entity)
}
 void UserInfo::set_entity(const char* value) {
  set_has_entity();
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.UserInfo.entity)
}
 void UserInfo::set_entity(const char* value, size_t size) {
  set_has_entity();
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.UserInfo.entity)
}
 ::std::string* UserInfo::mutable_entity() {
  set_has_entity();
  // @@protoc_insertion_point(field_mutable:apollo.data.UserInfo.entity)
  return entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_entity() {
  // @@protoc_insertion_point(field_release:apollo.data.UserInfo.entity)
  clear_has_entity();
  return entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_entity(::std::string* entity) {
  if (entity != NULL) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
  entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.UserInfo.entity)
}

// optional string driver = 2;
bool UserInfo::has_driver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfo::set_has_driver() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfo::clear_has_driver() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver();
}
 const ::std::string& UserInfo::driver() const {
  // @@protoc_insertion_point(field_get:apollo.data.UserInfo.driver)
  return driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_driver(const ::std::string& value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.UserInfo.driver)
}
 void UserInfo::set_driver(const char* value) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.UserInfo.driver)
}
 void UserInfo::set_driver(const char* value, size_t size) {
  set_has_driver();
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.UserInfo.driver)
}
 ::std::string* UserInfo::mutable_driver() {
  set_has_driver();
  // @@protoc_insertion_point(field_mutable:apollo.data.UserInfo.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_driver() {
  // @@protoc_insertion_point(field_release:apollo.data.UserInfo.driver)
  clear_has_driver();
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.UserInfo.driver)
}

// optional string co_driver = 3;
bool UserInfo::has_co_driver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfo::set_has_co_driver() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfo::clear_has_co_driver() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfo::clear_co_driver() {
  co_driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_co_driver();
}
 const ::std::string& UserInfo::co_driver() const {
  // @@protoc_insertion_point(field_get:apollo.data.UserInfo.co_driver)
  return co_driver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_co_driver(const ::std::string& value) {
  set_has_co_driver();
  co_driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.UserInfo.co_driver)
}
 void UserInfo::set_co_driver(const char* value) {
  set_has_co_driver();
  co_driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.UserInfo.co_driver)
}
 void UserInfo::set_co_driver(const char* value, size_t size) {
  set_has_co_driver();
  co_driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.UserInfo.co_driver)
}
 ::std::string* UserInfo::mutable_co_driver() {
  set_has_co_driver();
  // @@protoc_insertion_point(field_mutable:apollo.data.UserInfo.co_driver)
  return co_driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_co_driver() {
  // @@protoc_insertion_point(field_release:apollo.data.UserInfo.co_driver)
  clear_has_co_driver();
  return co_driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_co_driver(::std::string* co_driver) {
  if (co_driver != NULL) {
    set_has_co_driver();
  } else {
    clear_has_co_driver();
  }
  co_driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), co_driver);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.UserInfo.co_driver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticInfo::kVehicleFieldNumber;
const int StaticInfo::kEnvironmentFieldNumber;
const int StaticInfo::kHardwareFieldNumber;
const int StaticInfo::kSoftwareFieldNumber;
const int StaticInfo::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticInfo::StaticInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.StaticInfo)
}

void StaticInfo::InitAsDefaultInstance() {
  vehicle_ = const_cast< ::apollo::data::VehicleInfo*>(&::apollo::data::VehicleInfo::default_instance());
  environment_ = const_cast< ::apollo::data::EnvironmentInfo*>(&::apollo::data::EnvironmentInfo::default_instance());
  hardware_ = const_cast< ::apollo::data::HardwareInfo*>(&::apollo::data::HardwareInfo::default_instance());
  software_ = const_cast< ::apollo::data::SoftwareInfo*>(&::apollo::data::SoftwareInfo::default_instance());
  user_ = const_cast< ::apollo::data::UserInfo*>(&::apollo::data::UserInfo::default_instance());
}

StaticInfo::StaticInfo(const StaticInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.StaticInfo)
}

void StaticInfo::SharedCtor() {
  _cached_size_ = 0;
  vehicle_ = NULL;
  environment_ = NULL;
  hardware_ = NULL;
  software_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticInfo::~StaticInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.StaticInfo)
  SharedDtor();
}

void StaticInfo::SharedDtor() {
  if (this != default_instance_) {
    delete vehicle_;
    delete environment_;
    delete hardware_;
    delete software_;
    delete user_;
  }
}

void StaticInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticInfo_descriptor_;
}

const StaticInfo& StaticInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

StaticInfo* StaticInfo::default_instance_ = NULL;

StaticInfo* StaticInfo::New(::google::protobuf::Arena* arena) const {
  StaticInfo* n = new StaticInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.StaticInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_vehicle()) {
      if (vehicle_ != NULL) vehicle_->::apollo::data::VehicleInfo::Clear();
    }
    if (has_environment()) {
      if (environment_ != NULL) environment_->::apollo::data::EnvironmentInfo::Clear();
    }
    if (has_hardware()) {
      if (hardware_ != NULL) hardware_->::apollo::data::HardwareInfo::Clear();
    }
    if (has_software()) {
      if (software_ != NULL) software_->::apollo::data::SoftwareInfo::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::apollo::data::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StaticInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.StaticInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.data.VehicleInfo vehicle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_environment;
        break;
      }

      // optional .apollo.data.EnvironmentInfo environment = 2;
      case 2: {
        if (tag == 18) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hardware;
        break;
      }

      // optional .apollo.data.HardwareInfo hardware = 3;
      case 3: {
        if (tag == 26) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_software;
        break;
      }

      // optional .apollo.data.SoftwareInfo software = 4;
      case 4: {
        if (tag == 34) {
         parse_software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_software()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .apollo.data.UserInfo user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.StaticInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.StaticInfo)
  return false;
#undef DO_
}

void StaticInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.StaticInfo)
  // optional .apollo.data.VehicleInfo vehicle = 1;
  if (has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->vehicle_, output);
  }

  // optional .apollo.data.EnvironmentInfo environment = 2;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->environment_, output);
  }

  // optional .apollo.data.HardwareInfo hardware = 3;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hardware_, output);
  }

  // optional .apollo.data.SoftwareInfo software = 4;
  if (has_software()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->software_, output);
  }

  // optional .apollo.data.UserInfo user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->user_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.StaticInfo)
}

::google::protobuf::uint8* StaticInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.StaticInfo)
  // optional .apollo.data.VehicleInfo vehicle = 1;
  if (has_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->vehicle_, false, target);
  }

  // optional .apollo.data.EnvironmentInfo environment = 2;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->environment_, false, target);
  }

  // optional .apollo.data.HardwareInfo hardware = 3;
  if (has_hardware()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->hardware_, false, target);
  }

  // optional .apollo.data.SoftwareInfo software = 4;
  if (has_software()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->software_, false, target);
  }

  // optional .apollo.data.UserInfo user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->user_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.StaticInfo)
  return target;
}

int StaticInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.StaticInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.data.VehicleInfo vehicle = 1;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_);
    }

    // optional .apollo.data.EnvironmentInfo environment = 2;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->environment_);
    }

    // optional .apollo.data.HardwareInfo hardware = 3;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hardware_);
    }

    // optional .apollo.data.SoftwareInfo software = 4;
    if (has_software()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->software_);
    }

    // optional .apollo.data.UserInfo user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.StaticInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StaticInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.StaticInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.StaticInfo)
    MergeFrom(*source);
  }
}

void StaticInfo::MergeFrom(const StaticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.StaticInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehicle()) {
      mutable_vehicle()->::apollo::data::VehicleInfo::MergeFrom(from.vehicle());
    }
    if (from.has_environment()) {
      mutable_environment()->::apollo::data::EnvironmentInfo::MergeFrom(from.environment());
    }
    if (from.has_hardware()) {
      mutable_hardware()->::apollo::data::HardwareInfo::MergeFrom(from.hardware());
    }
    if (from.has_software()) {
      mutable_software()->::apollo::data::SoftwareInfo::MergeFrom(from.software());
    }
    if (from.has_user()) {
      mutable_user()->::apollo::data::UserInfo::MergeFrom(from.user());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StaticInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.StaticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticInfo::CopyFrom(const StaticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.StaticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfo::IsInitialized() const {

  return true;
}

void StaticInfo::Swap(StaticInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticInfo::InternalSwap(StaticInfo* other) {
  std::swap(vehicle_, other->vehicle_);
  std::swap(environment_, other->environment_);
  std::swap(hardware_, other->hardware_);
  std::swap(software_, other->software_);
  std::swap(user_, other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticInfo_descriptor_;
  metadata.reflection = StaticInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaticInfo

// optional .apollo.data.VehicleInfo vehicle = 1;
bool StaticInfo::has_vehicle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StaticInfo::set_has_vehicle() {
  _has_bits_[0] |= 0x00000001u;
}
void StaticInfo::clear_has_vehicle() {
  _has_bits_[0] &= ~0x00000001u;
}
void StaticInfo::clear_vehicle() {
  if (vehicle_ != NULL) vehicle_->::apollo::data::VehicleInfo::Clear();
  clear_has_vehicle();
}
const ::apollo::data::VehicleInfo& StaticInfo::vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.data.StaticInfo.vehicle)
  return vehicle_ != NULL ? *vehicle_ : *default_instance_->vehicle_;
}
::apollo::data::VehicleInfo* StaticInfo::mutable_vehicle() {
  set_has_vehicle();
  if (vehicle_ == NULL) {
    vehicle_ = new ::apollo::data::VehicleInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.StaticInfo.vehicle)
  return vehicle_;
}
::apollo::data::VehicleInfo* StaticInfo::release_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.data.StaticInfo.vehicle)
  clear_has_vehicle();
  ::apollo::data::VehicleInfo* temp = vehicle_;
  vehicle_ = NULL;
  return temp;
}
void StaticInfo::set_allocated_vehicle(::apollo::data::VehicleInfo* vehicle) {
  delete vehicle_;
  vehicle_ = vehicle;
  if (vehicle) {
    set_has_vehicle();
  } else {
    clear_has_vehicle();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.StaticInfo.vehicle)
}

// optional .apollo.data.EnvironmentInfo environment = 2;
bool StaticInfo::has_environment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StaticInfo::set_has_environment() {
  _has_bits_[0] |= 0x00000002u;
}
void StaticInfo::clear_has_environment() {
  _has_bits_[0] &= ~0x00000002u;
}
void StaticInfo::clear_environment() {
  if (environment_ != NULL) environment_->::apollo::data::EnvironmentInfo::Clear();
  clear_has_environment();
}
const ::apollo::data::EnvironmentInfo& StaticInfo::environment() const {
  // @@protoc_insertion_point(field_get:apollo.data.StaticInfo.environment)
  return environment_ != NULL ? *environment_ : *default_instance_->environment_;
}
::apollo::data::EnvironmentInfo* StaticInfo::mutable_environment() {
  set_has_environment();
  if (environment_ == NULL) {
    environment_ = new ::apollo::data::EnvironmentInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.StaticInfo.environment)
  return environment_;
}
::apollo::data::EnvironmentInfo* StaticInfo::release_environment() {
  // @@protoc_insertion_point(field_release:apollo.data.StaticInfo.environment)
  clear_has_environment();
  ::apollo::data::EnvironmentInfo* temp = environment_;
  environment_ = NULL;
  return temp;
}
void StaticInfo::set_allocated_environment(::apollo::data::EnvironmentInfo* environment) {
  delete environment_;
  environment_ = environment;
  if (environment) {
    set_has_environment();
  } else {
    clear_has_environment();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.StaticInfo.environment)
}

// optional .apollo.data.HardwareInfo hardware = 3;
bool StaticInfo::has_hardware() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StaticInfo::set_has_hardware() {
  _has_bits_[0] |= 0x00000004u;
}
void StaticInfo::clear_has_hardware() {
  _has_bits_[0] &= ~0x00000004u;
}
void StaticInfo::clear_hardware() {
  if (hardware_ != NULL) hardware_->::apollo::data::HardwareInfo::Clear();
  clear_has_hardware();
}
const ::apollo::data::HardwareInfo& StaticInfo::hardware() const {
  // @@protoc_insertion_point(field_get:apollo.data.StaticInfo.hardware)
  return hardware_ != NULL ? *hardware_ : *default_instance_->hardware_;
}
::apollo::data::HardwareInfo* StaticInfo::mutable_hardware() {
  set_has_hardware();
  if (hardware_ == NULL) {
    hardware_ = new ::apollo::data::HardwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.StaticInfo.hardware)
  return hardware_;
}
::apollo::data::HardwareInfo* StaticInfo::release_hardware() {
  // @@protoc_insertion_point(field_release:apollo.data.StaticInfo.hardware)
  clear_has_hardware();
  ::apollo::data::HardwareInfo* temp = hardware_;
  hardware_ = NULL;
  return temp;
}
void StaticInfo::set_allocated_hardware(::apollo::data::HardwareInfo* hardware) {
  delete hardware_;
  hardware_ = hardware;
  if (hardware) {
    set_has_hardware();
  } else {
    clear_has_hardware();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.StaticInfo.hardware)
}

// optional .apollo.data.SoftwareInfo software = 4;
bool StaticInfo::has_software() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StaticInfo::set_has_software() {
  _has_bits_[0] |= 0x00000008u;
}
void StaticInfo::clear_has_software() {
  _has_bits_[0] &= ~0x00000008u;
}
void StaticInfo::clear_software() {
  if (software_ != NULL) software_->::apollo::data::SoftwareInfo::Clear();
  clear_has_software();
}
const ::apollo::data::SoftwareInfo& StaticInfo::software() const {
  // @@protoc_insertion_point(field_get:apollo.data.StaticInfo.software)
  return software_ != NULL ? *software_ : *default_instance_->software_;
}
::apollo::data::SoftwareInfo* StaticInfo::mutable_software() {
  set_has_software();
  if (software_ == NULL) {
    software_ = new ::apollo::data::SoftwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.StaticInfo.software)
  return software_;
}
::apollo::data::SoftwareInfo* StaticInfo::release_software() {
  // @@protoc_insertion_point(field_release:apollo.data.StaticInfo.software)
  clear_has_software();
  ::apollo::data::SoftwareInfo* temp = software_;
  software_ = NULL;
  return temp;
}
void StaticInfo::set_allocated_software(::apollo::data::SoftwareInfo* software) {
  delete software_;
  software_ = software;
  if (software) {
    set_has_software();
  } else {
    clear_has_software();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.StaticInfo.software)
}

// optional .apollo.data.UserInfo user = 5;
bool StaticInfo::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StaticInfo::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
void StaticInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
void StaticInfo::clear_user() {
  if (user_ != NULL) user_->::apollo::data::UserInfo::Clear();
  clear_has_user();
}
const ::apollo::data::UserInfo& StaticInfo::user() const {
  // @@protoc_insertion_point(field_get:apollo.data.StaticInfo.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::apollo::data::UserInfo* StaticInfo::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::apollo::data::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.StaticInfo.user)
  return user_;
}
::apollo::data::UserInfo* StaticInfo::release_user() {
  // @@protoc_insertion_point(field_release:apollo.data.StaticInfo.user)
  clear_has_user();
  ::apollo::data::UserInfo* temp = user_;
  user_ = NULL;
  return temp;
}
void StaticInfo::set_allocated_user(::apollo::data::UserInfo* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.StaticInfo.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticInfoConf::kHardwareConfigsFieldNumber;
const int StaticInfoConf::kSoftwareConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticInfoConf::StaticInfoConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.StaticInfoConf)
}

void StaticInfoConf::InitAsDefaultInstance() {
}

StaticInfoConf::StaticInfoConf(const StaticInfoConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.data.StaticInfoConf)
}

void StaticInfoConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticInfoConf::~StaticInfoConf() {
  // @@protoc_insertion_point(destructor:apollo.data.StaticInfoConf)
  SharedDtor();
}

void StaticInfoConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StaticInfoConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticInfoConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticInfoConf_descriptor_;
}

const StaticInfoConf& StaticInfoConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

StaticInfoConf* StaticInfoConf::default_instance_ = NULL;

StaticInfoConf* StaticInfoConf::New(::google::protobuf::Arena* arena) const {
  StaticInfoConf* n = new StaticInfoConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticInfoConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.StaticInfoConf)
  hardware_configs_.Clear();
  software_configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StaticInfoConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.StaticInfoConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string hardware_configs = 1;
      case 1: {
        if (tag == 10) {
         parse_hardware_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hardware_configs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware_configs(this->hardware_configs_size() - 1).data(),
            this->hardware_configs(this->hardware_configs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.StaticInfoConf.hardware_configs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hardware_configs;
        if (input->ExpectTag(18)) goto parse_software_configs;
        break;
      }

      // repeated string software_configs = 2;
      case 2: {
        if (tag == 18) {
         parse_software_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_software_configs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->software_configs(this->software_configs_size() - 1).data(),
            this->software_configs(this->software_configs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.StaticInfoConf.software_configs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_software_configs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.StaticInfoConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.StaticInfoConf)
  return false;
#undef DO_
}

void StaticInfoConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.StaticInfoConf)
  // repeated string hardware_configs = 1;
  for (int i = 0; i < this->hardware_configs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_configs(i).data(), this->hardware_configs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.hardware_configs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hardware_configs(i), output);
  }

  // repeated string software_configs = 2;
  for (int i = 0; i < this->software_configs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->software_configs(i).data(), this->software_configs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.software_configs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->software_configs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.StaticInfoConf)
}

::google::protobuf::uint8* StaticInfoConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.StaticInfoConf)
  // repeated string hardware_configs = 1;
  for (int i = 0; i < this->hardware_configs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_configs(i).data(), this->hardware_configs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.hardware_configs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->hardware_configs(i), target);
  }

  // repeated string software_configs = 2;
  for (int i = 0; i < this->software_configs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->software_configs(i).data(), this->software_configs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.software_configs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->software_configs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.StaticInfoConf)
  return target;
}

int StaticInfoConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.StaticInfoConf)
  int total_size = 0;

  // repeated string hardware_configs = 1;
  total_size += 1 * this->hardware_configs_size();
  for (int i = 0; i < this->hardware_configs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hardware_configs(i));
  }

  // repeated string software_configs = 2;
  total_size += 1 * this->software_configs_size();
  for (int i = 0; i < this->software_configs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->software_configs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticInfoConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.StaticInfoConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StaticInfoConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticInfoConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.StaticInfoConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.StaticInfoConf)
    MergeFrom(*source);
  }
}

void StaticInfoConf::MergeFrom(const StaticInfoConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.StaticInfoConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  hardware_configs_.MergeFrom(from.hardware_configs_);
  software_configs_.MergeFrom(from.software_configs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StaticInfoConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.StaticInfoConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticInfoConf::CopyFrom(const StaticInfoConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.StaticInfoConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfoConf::IsInitialized() const {

  return true;
}

void StaticInfoConf::Swap(StaticInfoConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticInfoConf::InternalSwap(StaticInfoConf* other) {
  hardware_configs_.UnsafeArenaSwap(&other->hardware_configs_);
  software_configs_.UnsafeArenaSwap(&other->software_configs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticInfoConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticInfoConf_descriptor_;
  metadata.reflection = StaticInfoConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaticInfoConf

// repeated string hardware_configs = 1;
int StaticInfoConf::hardware_configs_size() const {
  return hardware_configs_.size();
}
void StaticInfoConf::clear_hardware_configs() {
  hardware_configs_.Clear();
}
 const ::std::string& StaticInfoConf::hardware_configs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.StaticInfoConf.hardware_configs)
  return hardware_configs_.Get(index);
}
 ::std::string* StaticInfoConf::mutable_hardware_configs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.StaticInfoConf.hardware_configs)
  return hardware_configs_.Mutable(index);
}
 void StaticInfoConf::set_hardware_configs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.data.StaticInfoConf.hardware_configs)
  hardware_configs_.Mutable(index)->assign(value);
}
 void StaticInfoConf::set_hardware_configs(int index, const char* value) {
  hardware_configs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.data.StaticInfoConf.hardware_configs)
}
 void StaticInfoConf::set_hardware_configs(int index, const char* value, size_t size) {
  hardware_configs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.data.StaticInfoConf.hardware_configs)
}
 ::std::string* StaticInfoConf::add_hardware_configs() {
  // @@protoc_insertion_point(field_add_mutable:apollo.data.StaticInfoConf.hardware_configs)
  return hardware_configs_.Add();
}
 void StaticInfoConf::add_hardware_configs(const ::std::string& value) {
  hardware_configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.data.StaticInfoConf.hardware_configs)
}
 void StaticInfoConf::add_hardware_configs(const char* value) {
  hardware_configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.data.StaticInfoConf.hardware_configs)
}
 void StaticInfoConf::add_hardware_configs(const char* value, size_t size) {
  hardware_configs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.data.StaticInfoConf.hardware_configs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StaticInfoConf::hardware_configs() const {
  // @@protoc_insertion_point(field_list:apollo.data.StaticInfoConf.hardware_configs)
  return hardware_configs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StaticInfoConf::mutable_hardware_configs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.StaticInfoConf.hardware_configs)
  return &hardware_configs_;
}

// repeated string software_configs = 2;
int StaticInfoConf::software_configs_size() const {
  return software_configs_.size();
}
void StaticInfoConf::clear_software_configs() {
  software_configs_.Clear();
}
 const ::std::string& StaticInfoConf::software_configs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.StaticInfoConf.software_configs)
  return software_configs_.Get(index);
}
 ::std::string* StaticInfoConf::mutable_software_configs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.StaticInfoConf.software_configs)
  return software_configs_.Mutable(index);
}
 void StaticInfoConf::set_software_configs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.data.StaticInfoConf.software_configs)
  software_configs_.Mutable(index)->assign(value);
}
 void StaticInfoConf::set_software_configs(int index, const char* value) {
  software_configs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.data.StaticInfoConf.software_configs)
}
 void StaticInfoConf::set_software_configs(int index, const char* value, size_t size) {
  software_configs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.data.StaticInfoConf.software_configs)
}
 ::std::string* StaticInfoConf::add_software_configs() {
  // @@protoc_insertion_point(field_add_mutable:apollo.data.StaticInfoConf.software_configs)
  return software_configs_.Add();
}
 void StaticInfoConf::add_software_configs(const ::std::string& value) {
  software_configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.data.StaticInfoConf.software_configs)
}
 void StaticInfoConf::add_software_configs(const char* value) {
  software_configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.data.StaticInfoConf.software_configs)
}
 void StaticInfoConf::add_software_configs(const char* value, size_t size) {
  software_configs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.data.StaticInfoConf.software_configs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StaticInfoConf::software_configs() const {
  // @@protoc_insertion_point(field_list:apollo.data.StaticInfoConf.software_configs)
  return software_configs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StaticInfoConf::mutable_software_configs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.StaticInfoConf.software_configs)
  return &software_configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
