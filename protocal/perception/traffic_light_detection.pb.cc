// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/traffic_light_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {

namespace {

const ::google::protobuf::Descriptor* TrafficLightBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLightBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficLightDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLightDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TrafficLightDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLightDetection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2ftraffic_5flight_5fdetection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2ftraffic_5flight_5fdetection_2eproto() {
  protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/traffic_light_detection.proto");
  GOOGLE_CHECK(file != NULL);
  TrafficLightBox_descriptor_ = file->message_type(0);
  static const int TrafficLightBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, selected_),
  };
  TrafficLightBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLightBox_descriptor_,
      TrafficLightBox::default_instance_,
      TrafficLightBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficLightBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, _internal_metadata_),
      -1);
  TrafficLightDebug_descriptor_ = file->message_type(1);
  static const int TrafficLightDebug_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, cropbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, signal_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, valid_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, ts_diff_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, ts_diff_sys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, project_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, distance_to_stop_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, camera_id_),
  };
  TrafficLightDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLightDebug_descriptor_,
      TrafficLightDebug::default_instance_,
      TrafficLightDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficLightDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, _internal_metadata_),
      -1);
  TrafficLight_descriptor_ = file->message_type(2);
  static const int TrafficLight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tracking_time_),
  };
  TrafficLight_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLight_descriptor_,
      TrafficLight::default_instance_,
      TrafficLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficLight),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
      -1);
  TrafficLight_Color_descriptor_ = TrafficLight_descriptor_->enum_type(0);
  TrafficLightDetection_descriptor_ = file->message_type(3);
  static const int TrafficLightDetection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, traffic_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, traffic_light_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, contain_lights_),
  };
  TrafficLightDetection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLightDetection_descriptor_,
      TrafficLightDetection::default_instance_,
      TrafficLightDetection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficLightDetection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2ftraffic_5flight_5fdetection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLightBox_descriptor_, &TrafficLightBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLightDebug_descriptor_, &TrafficLightDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLight_descriptor_, &TrafficLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLightDetection_descriptor_, &TrafficLightDetection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2ftraffic_5flight_5fdetection_2eproto() {
  delete TrafficLightBox::default_instance_;
  delete TrafficLightBox_reflection_;
  delete TrafficLightDebug::default_instance_;
  delete TrafficLightDebug_reflection_;
  delete TrafficLight::default_instance_;
  delete TrafficLight_reflection_;
  delete TrafficLightDetection::default_instance_;
  delete TrafficLightDetection_reflection_;
}

void protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(perception/traffic_light_detection.pro"
    "to\022\021apollo.perception\032\023common/header.pro"
    "to\"\216\001\n\017TrafficLightBox\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002"
    " \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\0224\n\005c"
    "olor\030\005 \001(\0162%.apollo.perception.TrafficLi"
    "ght.Color\022\020\n\010selected\030\006 \001(\010\"\223\002\n\021TrafficL"
    "ightDebug\0223\n\007cropbox\030\001 \001(\0132\".apollo.perc"
    "eption.TrafficLightBox\022/\n\003box\030\002 \003(\0132\".ap"
    "ollo.perception.TrafficLightBox\022\022\n\nsigna"
    "l_num\030\003 \001(\005\022\021\n\tvalid_pos\030\004 \001(\005\022\023\n\013ts_dif"
    "f_pos\030\005 \001(\001\022\023\n\013ts_diff_sys\030\006 \001(\001\022\025\n\rproj"
    "ect_error\030\007 \001(\005\022\035\n\025distance_to_stop_line"
    "\030\010 \001(\001\022\021\n\tcamera_id\030\t \001(\005\"\277\001\n\014TrafficLig"
    "ht\0224\n\005color\030\001 \001(\0162%.apollo.perception.Tr"
    "afficLight.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfiden"
    "ce\030\003 \001(\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\"\?\n\005Co"
    "lor\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n"
    "\005GREEN\020\003\022\t\n\005BLACK\020\004\"\321\001\n\025TrafficLightDete"
    "ction\022%\n\006header\030\002 \001(\0132\025.apollo.common.He"
    "ader\0226\n\rtraffic_light\030\001 \003(\0132\037.apollo.per"
    "ception.TrafficLight\022A\n\023traffic_light_de"
    "bug\030\003 \001(\0132$.apollo.perception.TrafficLig"
    "htDebug\022\026\n\016contain_lights\030\004 \001(\010", 911);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/traffic_light_detection.proto", &protobuf_RegisterTypes);
  TrafficLightBox::default_instance_ = new TrafficLightBox();
  TrafficLightDebug::default_instance_ = new TrafficLightDebug();
  TrafficLight::default_instance_ = new TrafficLight();
  TrafficLightDetection::default_instance_ = new TrafficLightDetection();
  TrafficLightBox::default_instance_->InitAsDefaultInstance();
  TrafficLightDebug::default_instance_->InitAsDefaultInstance();
  TrafficLight::default_instance_->InitAsDefaultInstance();
  TrafficLightDetection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2ftraffic_5flight_5fdetection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2ftraffic_5flight_5fdetection_2eproto {
  StaticDescriptorInitializer_perception_2ftraffic_5flight_5fdetection_2eproto() {
    protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto();
  }
} static_descriptor_initializer_perception_2ftraffic_5flight_5fdetection_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightBox::kXFieldNumber;
const int TrafficLightBox::kYFieldNumber;
const int TrafficLightBox::kWidthFieldNumber;
const int TrafficLightBox::kHeightFieldNumber;
const int TrafficLightBox::kColorFieldNumber;
const int TrafficLightBox::kSelectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightBox::TrafficLightBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightBox)
}

void TrafficLightBox::InitAsDefaultInstance() {
}

TrafficLightBox::TrafficLightBox(const TrafficLightBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightBox)
}

void TrafficLightBox::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  color_ = 0;
  selected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLightBox::~TrafficLightBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightBox)
  SharedDtor();
}

void TrafficLightBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficLightBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightBox_descriptor_;
}

const TrafficLightBox& TrafficLightBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto();
  return *default_instance_;
}

TrafficLightBox* TrafficLightBox::default_instance_ = NULL;

TrafficLightBox* TrafficLightBox::New(::google::protobuf::Arena* arena) const {
  TrafficLightBox* n = new TrafficLightBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrafficLightBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficLightBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(x_, selected_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficLightBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLightBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }

      // optional .apollo.perception.TrafficLight.Color color = 5;
      case 5: {
        if (tag == 40) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_selected;
        break;
      }

      // optional bool selected = 6;
      case 6: {
        if (tag == 48) {
         parse_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
          set_has_selected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLightBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLightBox)
  return false;
#undef DO_
}

void TrafficLightBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLightBox)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional .apollo.perception.TrafficLight.Color color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->color(), output);
  }

  // optional bool selected = 6;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->selected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLightBox)
}

::google::protobuf::uint8* TrafficLightBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightBox)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->color(), target);
  }

  // optional bool selected = 6;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->selected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightBox)
  return target;
}

int TrafficLightBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightBox)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .apollo.perception.TrafficLight.Color color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool selected = 6;
    if (has_selected()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLightBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightBox)
    MergeFrom(*source);
  }
}

void TrafficLightBox::MergeFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_selected()) {
      set_selected(from.selected());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficLightBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightBox::CopyFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightBox::IsInitialized() const {

  return true;
}

void TrafficLightBox::Swap(TrafficLightBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightBox::InternalSwap(TrafficLightBox* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(color_, other->color_);
  std::swap(selected_, other->selected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLightBox_descriptor_;
  metadata.reflection = TrafficLightBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightBox

// optional int32 x = 1;
bool TrafficLightBox::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightBox::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightBox::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightBox::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 TrafficLightBox::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.x)
  return x_;
}
 void TrafficLightBox::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.x)
}

// optional int32 y = 2;
bool TrafficLightBox::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightBox::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightBox::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightBox::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 TrafficLightBox::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.y)
  return y_;
}
 void TrafficLightBox::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.y)
}

// optional int32 width = 3;
bool TrafficLightBox::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightBox::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightBox::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightBox::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 TrafficLightBox::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.width)
  return width_;
}
 void TrafficLightBox::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.width)
}

// optional int32 height = 4;
bool TrafficLightBox::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightBox::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightBox::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightBox::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 TrafficLightBox::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.height)
  return height_;
}
 void TrafficLightBox::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.height)
}

// optional .apollo.perception.TrafficLight.Color color = 5;
bool TrafficLightBox::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLightBox::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLightBox::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLightBox::clear_color() {
  color_ = 0;
  clear_has_color();
}
 ::apollo::perception::TrafficLight_Color TrafficLightBox::color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
 void TrafficLightBox::set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.color)
}

// optional bool selected = 6;
bool TrafficLightBox::has_selected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficLightBox::set_has_selected() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficLightBox::clear_has_selected() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficLightBox::clear_selected() {
  selected_ = false;
  clear_has_selected();
}
 bool TrafficLightBox::selected() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.selected)
  return selected_;
}
 void TrafficLightBox::set_selected(bool value) {
  set_has_selected();
  selected_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.selected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDebug::kCropboxFieldNumber;
const int TrafficLightDebug::kBoxFieldNumber;
const int TrafficLightDebug::kSignalNumFieldNumber;
const int TrafficLightDebug::kValidPosFieldNumber;
const int TrafficLightDebug::kTsDiffPosFieldNumber;
const int TrafficLightDebug::kTsDiffSysFieldNumber;
const int TrafficLightDebug::kProjectErrorFieldNumber;
const int TrafficLightDebug::kDistanceToStopLineFieldNumber;
const int TrafficLightDebug::kCameraIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDebug::TrafficLightDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightDebug)
}

void TrafficLightDebug::InitAsDefaultInstance() {
  cropbox_ = const_cast< ::apollo::perception::TrafficLightBox*>(&::apollo::perception::TrafficLightBox::default_instance());
}

TrafficLightDebug::TrafficLightDebug(const TrafficLightDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDebug)
}

void TrafficLightDebug::SharedCtor() {
  _cached_size_ = 0;
  cropbox_ = NULL;
  signal_num_ = 0;
  valid_pos_ = 0;
  ts_diff_pos_ = 0;
  ts_diff_sys_ = 0;
  project_error_ = 0;
  distance_to_stop_line_ = 0;
  camera_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLightDebug::~TrafficLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDebug)
  SharedDtor();
}

void TrafficLightDebug::SharedDtor() {
  if (this != default_instance_) {
    delete cropbox_;
  }
}

void TrafficLightDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightDebug_descriptor_;
}

const TrafficLightDebug& TrafficLightDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto();
  return *default_instance_;
}

TrafficLightDebug* TrafficLightDebug::default_instance_ = NULL;

TrafficLightDebug* TrafficLightDebug::New(::google::protobuf::Arena* arena) const {
  TrafficLightDebug* n = new TrafficLightDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrafficLightDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficLightDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(signal_num_, project_error_);
    if (has_cropbox()) {
      if (cropbox_ != NULL) cropbox_->::apollo::perception::TrafficLightBox::Clear();
    }
  }
  camera_id_ = 0;

#undef ZR_HELPER_
#undef ZR_

  box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficLightDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLightDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.TrafficLightBox cropbox = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cropbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // repeated .apollo.perception.TrafficLightBox box = 2;
      case 2: {
        if (tag == 18) {
         parse_box:
          DO_(input->IncrementRecursionDepth());
         parse_loop_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_box;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_signal_num;
        break;
      }

      // optional int32 signal_num = 3;
      case 3: {
        if (tag == 24) {
         parse_signal_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_num_)));
          set_has_signal_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_valid_pos;
        break;
      }

      // optional int32 valid_pos = 4;
      case 4: {
        if (tag == 32) {
         parse_valid_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_pos_)));
          set_has_valid_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_ts_diff_pos;
        break;
      }

      // optional double ts_diff_pos = 5;
      case 5: {
        if (tag == 41) {
         parse_ts_diff_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_diff_pos_)));
          set_has_ts_diff_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_ts_diff_sys;
        break;
      }

      // optional double ts_diff_sys = 6;
      case 6: {
        if (tag == 49) {
         parse_ts_diff_sys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_diff_sys_)));
          set_has_ts_diff_sys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_project_error;
        break;
      }

      // optional int32 project_error = 7;
      case 7: {
        if (tag == 56) {
         parse_project_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_error_)));
          set_has_project_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_distance_to_stop_line;
        break;
      }

      // optional double distance_to_stop_line = 8;
      case 8: {
        if (tag == 65) {
         parse_distance_to_stop_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_stop_line_)));
          set_has_distance_to_stop_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_camera_id;
        break;
      }

      // optional int32 camera_id = 9;
      case 9: {
        if (tag == 72) {
         parse_camera_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLightDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLightDebug)
  return false;
#undef DO_
}

void TrafficLightDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLightDebug)
  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  if (has_cropbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cropbox_, output);
  }

  // repeated .apollo.perception.TrafficLightBox box = 2;
  for (unsigned int i = 0, n = this->box_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->box(i), output);
  }

  // optional int32 signal_num = 3;
  if (has_signal_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_num(), output);
  }

  // optional int32 valid_pos = 4;
  if (has_valid_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->valid_pos(), output);
  }

  // optional double ts_diff_pos = 5;
  if (has_ts_diff_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ts_diff_pos(), output);
  }

  // optional double ts_diff_sys = 6;
  if (has_ts_diff_sys()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ts_diff_sys(), output);
  }

  // optional int32 project_error = 7;
  if (has_project_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->project_error(), output);
  }

  // optional double distance_to_stop_line = 8;
  if (has_distance_to_stop_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance_to_stop_line(), output);
  }

  // optional int32 camera_id = 9;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->camera_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLightDebug)
}

::google::protobuf::uint8* TrafficLightDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDebug)
  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  if (has_cropbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cropbox_, false, target);
  }

  // repeated .apollo.perception.TrafficLightBox box = 2;
  for (unsigned int i = 0, n = this->box_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->box(i), false, target);
  }

  // optional int32 signal_num = 3;
  if (has_signal_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signal_num(), target);
  }

  // optional int32 valid_pos = 4;
  if (has_valid_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->valid_pos(), target);
  }

  // optional double ts_diff_pos = 5;
  if (has_ts_diff_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ts_diff_pos(), target);
  }

  // optional double ts_diff_sys = 6;
  if (has_ts_diff_sys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ts_diff_sys(), target);
  }

  // optional int32 project_error = 7;
  if (has_project_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->project_error(), target);
  }

  // optional double distance_to_stop_line = 8;
  if (has_distance_to_stop_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->distance_to_stop_line(), target);
  }

  // optional int32 camera_id = 9;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->camera_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDebug)
  return target;
}

int TrafficLightDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 253u) {
    // optional .apollo.perception.TrafficLightBox cropbox = 1;
    if (has_cropbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cropbox_);
    }

    // optional int32 signal_num = 3;
    if (has_signal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_num());
    }

    // optional int32 valid_pos = 4;
    if (has_valid_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid_pos());
    }

    // optional double ts_diff_pos = 5;
    if (has_ts_diff_pos()) {
      total_size += 1 + 8;
    }

    // optional double ts_diff_sys = 6;
    if (has_ts_diff_sys()) {
      total_size += 1 + 8;
    }

    // optional int32 project_error = 7;
    if (has_project_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_error());
    }

    // optional double distance_to_stop_line = 8;
    if (has_distance_to_stop_line()) {
      total_size += 1 + 8;
    }

  }
  // optional int32 camera_id = 9;
  if (has_camera_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_id());
  }

  // repeated .apollo.perception.TrafficLightBox box = 2;
  total_size += 1 * this->box_size();
  for (int i = 0; i < this->box_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->box(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLightDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightDebug)
    MergeFrom(*source);
  }
}

void TrafficLightDebug::MergeFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  box_.MergeFrom(from.box_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cropbox()) {
      mutable_cropbox()->::apollo::perception::TrafficLightBox::MergeFrom(from.cropbox());
    }
    if (from.has_signal_num()) {
      set_signal_num(from.signal_num());
    }
    if (from.has_valid_pos()) {
      set_valid_pos(from.valid_pos());
    }
    if (from.has_ts_diff_pos()) {
      set_ts_diff_pos(from.ts_diff_pos());
    }
    if (from.has_ts_diff_sys()) {
      set_ts_diff_sys(from.ts_diff_sys());
    }
    if (from.has_project_error()) {
      set_project_error(from.project_error());
    }
    if (from.has_distance_to_stop_line()) {
      set_distance_to_stop_line(from.distance_to_stop_line());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficLightDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDebug::CopyFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDebug::IsInitialized() const {

  return true;
}

void TrafficLightDebug::Swap(TrafficLightDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDebug::InternalSwap(TrafficLightDebug* other) {
  std::swap(cropbox_, other->cropbox_);
  box_.UnsafeArenaSwap(&other->box_);
  std::swap(signal_num_, other->signal_num_);
  std::swap(valid_pos_, other->valid_pos_);
  std::swap(ts_diff_pos_, other->ts_diff_pos_);
  std::swap(ts_diff_sys_, other->ts_diff_sys_);
  std::swap(project_error_, other->project_error_);
  std::swap(distance_to_stop_line_, other->distance_to_stop_line_);
  std::swap(camera_id_, other->camera_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLightDebug_descriptor_;
  metadata.reflection = TrafficLightDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightDebug

// optional .apollo.perception.TrafficLightBox cropbox = 1;
bool TrafficLightDebug::has_cropbox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightDebug::set_has_cropbox() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightDebug::clear_has_cropbox() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightDebug::clear_cropbox() {
  if (cropbox_ != NULL) cropbox_->::apollo::perception::TrafficLightBox::Clear();
  clear_has_cropbox();
}
const ::apollo::perception::TrafficLightBox& TrafficLightDebug::cropbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.cropbox)
  return cropbox_ != NULL ? *cropbox_ : *default_instance_->cropbox_;
}
::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_cropbox() {
  set_has_cropbox();
  if (cropbox_ == NULL) {
    cropbox_ = new ::apollo::perception::TrafficLightBox;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.cropbox)
  return cropbox_;
}
::apollo::perception::TrafficLightBox* TrafficLightDebug::release_cropbox() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDebug.cropbox)
  clear_has_cropbox();
  ::apollo::perception::TrafficLightBox* temp = cropbox_;
  cropbox_ = NULL;
  return temp;
}
void TrafficLightDebug::set_allocated_cropbox(::apollo::perception::TrafficLightBox* cropbox) {
  delete cropbox_;
  cropbox_ = cropbox;
  if (cropbox) {
    set_has_cropbox();
  } else {
    clear_has_cropbox();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDebug.cropbox)
}

// repeated .apollo.perception.TrafficLightBox box = 2;
int TrafficLightDebug::box_size() const {
  return box_.size();
}
void TrafficLightDebug::clear_box() {
  box_.Clear();
}
const ::apollo::perception::TrafficLightBox& TrafficLightDebug::box(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.box)
  return box_.Get(index);
}
::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_box(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.box)
  return box_.Mutable(index);
}
::apollo::perception::TrafficLightBox* TrafficLightDebug::add_box() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDebug.box)
  return box_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
TrafficLightDebug::mutable_box() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDebug.box)
  return &box_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
TrafficLightDebug::box() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDebug.box)
  return box_;
}

// optional int32 signal_num = 3;
bool TrafficLightDebug::has_signal_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightDebug::set_has_signal_num() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightDebug::clear_has_signal_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightDebug::clear_signal_num() {
  signal_num_ = 0;
  clear_has_signal_num();
}
 ::google::protobuf::int32 TrafficLightDebug::signal_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.signal_num)
  return signal_num_;
}
 void TrafficLightDebug::set_signal_num(::google::protobuf::int32 value) {
  set_has_signal_num();
  signal_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.signal_num)
}

// optional int32 valid_pos = 4;
bool TrafficLightDebug::has_valid_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightDebug::set_has_valid_pos() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightDebug::clear_has_valid_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightDebug::clear_valid_pos() {
  valid_pos_ = 0;
  clear_has_valid_pos();
}
 ::google::protobuf::int32 TrafficLightDebug::valid_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.valid_pos)
  return valid_pos_;
}
 void TrafficLightDebug::set_valid_pos(::google::protobuf::int32 value) {
  set_has_valid_pos();
  valid_pos_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.valid_pos)
}

// optional double ts_diff_pos = 5;
bool TrafficLightDebug::has_ts_diff_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLightDebug::set_has_ts_diff_pos() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLightDebug::clear_has_ts_diff_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLightDebug::clear_ts_diff_pos() {
  ts_diff_pos_ = 0;
  clear_has_ts_diff_pos();
}
 double TrafficLightDebug::ts_diff_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.ts_diff_pos)
  return ts_diff_pos_;
}
 void TrafficLightDebug::set_ts_diff_pos(double value) {
  set_has_ts_diff_pos();
  ts_diff_pos_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.ts_diff_pos)
}

// optional double ts_diff_sys = 6;
bool TrafficLightDebug::has_ts_diff_sys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficLightDebug::set_has_ts_diff_sys() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficLightDebug::clear_has_ts_diff_sys() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficLightDebug::clear_ts_diff_sys() {
  ts_diff_sys_ = 0;
  clear_has_ts_diff_sys();
}
 double TrafficLightDebug::ts_diff_sys() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.ts_diff_sys)
  return ts_diff_sys_;
}
 void TrafficLightDebug::set_ts_diff_sys(double value) {
  set_has_ts_diff_sys();
  ts_diff_sys_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.ts_diff_sys)
}

// optional int32 project_error = 7;
bool TrafficLightDebug::has_project_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrafficLightDebug::set_has_project_error() {
  _has_bits_[0] |= 0x00000040u;
}
void TrafficLightDebug::clear_has_project_error() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrafficLightDebug::clear_project_error() {
  project_error_ = 0;
  clear_has_project_error();
}
 ::google::protobuf::int32 TrafficLightDebug::project_error() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.project_error)
  return project_error_;
}
 void TrafficLightDebug::set_project_error(::google::protobuf::int32 value) {
  set_has_project_error();
  project_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.project_error)
}

// optional double distance_to_stop_line = 8;
bool TrafficLightDebug::has_distance_to_stop_line() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrafficLightDebug::set_has_distance_to_stop_line() {
  _has_bits_[0] |= 0x00000080u;
}
void TrafficLightDebug::clear_has_distance_to_stop_line() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrafficLightDebug::clear_distance_to_stop_line() {
  distance_to_stop_line_ = 0;
  clear_has_distance_to_stop_line();
}
 double TrafficLightDebug::distance_to_stop_line() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.distance_to_stop_line)
  return distance_to_stop_line_;
}
 void TrafficLightDebug::set_distance_to_stop_line(double value) {
  set_has_distance_to_stop_line();
  distance_to_stop_line_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.distance_to_stop_line)
}

// optional int32 camera_id = 9;
bool TrafficLightDebug::has_camera_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrafficLightDebug::set_has_camera_id() {
  _has_bits_[0] |= 0x00000100u;
}
void TrafficLightDebug::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrafficLightDebug::clear_camera_id() {
  camera_id_ = 0;
  clear_has_camera_id();
}
 ::google::protobuf::int32 TrafficLightDebug::camera_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.camera_id)
  return camera_id_;
}
 void TrafficLightDebug::set_camera_id(::google::protobuf::int32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.camera_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_Color_descriptor_;
}
bool TrafficLight_Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Color TrafficLight::UNKNOWN;
const TrafficLight_Color TrafficLight::RED;
const TrafficLight_Color TrafficLight::YELLOW;
const TrafficLight_Color TrafficLight::GREEN;
const TrafficLight_Color TrafficLight::BLACK;
const TrafficLight_Color TrafficLight::Color_MIN;
const TrafficLight_Color TrafficLight::Color_MAX;
const int TrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kConfidenceFieldNumber;
const int TrafficLight::kTrackingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLight)
}

void TrafficLight::InitAsDefaultInstance() {
}

TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  color_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 1;
  tracking_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_descriptor_;
}

const TrafficLight& TrafficLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto();
  return *default_instance_;
}

TrafficLight* TrafficLight::default_instance_ = NULL;

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLight)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrafficLight, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficLight*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(tracking_time_, color_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    confidence_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.TrafficLight.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_confidence;
        break;
      }

      // optional double confidence = 3 [default = 1];
      case 3: {
        if (tag == 25) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (tag == 33) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
          set_has_tracking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLight)
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional double confidence = 3 [default = 1];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // optional double tracking_time = 4;
  if (has_tracking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLight)
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // optional double tracking_time = 4;
  if (has_tracking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLight)
  return target;
}

int TrafficLight::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLight)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.perception.TrafficLight.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double confidence = 3 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLight* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_tracking_time()) {
      set_tracking_time(from.tracking_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {

  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  std::swap(color_, other->color_);
  id_.Swap(&other->id_);
  std::swap(confidence_, other->confidence_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLight_descriptor_;
  metadata.reflection = TrafficLight_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight

// optional .apollo.perception.TrafficLight.Color color = 1;
bool TrafficLight::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLight::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLight::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLight::clear_color() {
  color_ = 0;
  clear_has_color();
}
 ::apollo::perception::TrafficLight_Color TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
 void TrafficLight::set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.color)
}

// optional string id = 2;
bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLight::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLight::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.id)
}
 void TrafficLight::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.TrafficLight.id)
}
 void TrafficLight::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.TrafficLight.id)
}
 ::std::string* TrafficLight::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLight.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLight.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLight::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLight.id)
}

// optional double confidence = 3 [default = 1];
bool TrafficLight::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLight::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLight::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
 double TrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.confidence)
  return confidence_;
}
 void TrafficLight::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.confidence)
}

// optional double tracking_time = 4;
bool TrafficLight::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLight::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLight::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLight::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
 double TrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.tracking_time)
  return tracking_time_;
}
 void TrafficLight::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.tracking_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetection::kHeaderFieldNumber;
const int TrafficLightDetection::kTrafficLightFieldNumber;
const int TrafficLightDetection::kTrafficLightDebugFieldNumber;
const int TrafficLightDetection::kContainLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetection::TrafficLightDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightDetection)
}

void TrafficLightDetection::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  traffic_light_debug_ = const_cast< ::apollo::perception::TrafficLightDebug*>(&::apollo::perception::TrafficLightDebug::default_instance());
}

TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDetection)
}

void TrafficLightDetection::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  traffic_light_debug_ = NULL;
  contain_lights_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDetection)
  SharedDtor();
}

void TrafficLightDetection::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete traffic_light_debug_;
  }
}

void TrafficLightDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightDetection_descriptor_;
}

const TrafficLightDetection& TrafficLightDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto();
  return *default_instance_;
}

TrafficLightDetection* TrafficLightDetection::default_instance_ = NULL;

TrafficLightDetection* TrafficLightDetection::New(::google::protobuf::Arena* arena) const {
  TrafficLightDetection* n = new TrafficLightDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDetection)
  if (_has_bits_[0 / 32] & 13u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_traffic_light_debug()) {
      if (traffic_light_debug_ != NULL) traffic_light_debug_->::apollo::perception::TrafficLightDebug::Clear();
    }
    contain_lights_ = false;
  }
  traffic_light_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficLightDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLightDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.TrafficLight traffic_light = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffic_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_traffic_light;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_traffic_light_debug;
        break;
      }

      // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
      case 3: {
        if (tag == 26) {
         parse_traffic_light_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_light_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_contain_lights;
        break;
      }

      // optional bool contain_lights = 4;
      case 4: {
        if (tag == 32) {
         parse_contain_lights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contain_lights_)));
          set_has_contain_lights();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLightDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLightDetection)
  return false;
#undef DO_
}

void TrafficLightDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLightDetection)
  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traffic_light(i), output);
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  if (has_traffic_light_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->traffic_light_debug_, output);
  }

  // optional bool contain_lights = 4;
  if (has_contain_lights()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->contain_lights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLightDetection)
}

::google::protobuf::uint8* TrafficLightDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDetection)
  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->traffic_light(i), false, target);
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  if (has_traffic_light_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->traffic_light_debug_, false, target);
  }

  // optional bool contain_lights = 4;
  if (has_contain_lights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->contain_lights(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDetection)
  return target;
}

int TrafficLightDetection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDetection)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional .apollo.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
    if (has_traffic_light_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->traffic_light_debug_);
    }

    // optional bool contain_lights = 4;
    if (has_contain_lights()) {
      total_size += 1 + 1;
    }

  }
  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  total_size += 1 * this->traffic_light_size();
  for (int i = 0; i < this->traffic_light_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_light(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightDetection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLightDetection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightDetection)
    MergeFrom(*source);
  }
}

void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDetection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  traffic_light_.MergeFrom(from.traffic_light_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_traffic_light_debug()) {
      mutable_traffic_light_debug()->::apollo::perception::TrafficLightDebug::MergeFrom(from.traffic_light_debug());
    }
    if (from.has_contain_lights()) {
      set_contain_lights(from.contain_lights());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficLightDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {

  return true;
}

void TrafficLightDetection::Swap(TrafficLightDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  std::swap(header_, other->header_);
  traffic_light_.UnsafeArenaSwap(&other->traffic_light_);
  std::swap(traffic_light_debug_, other->traffic_light_debug_);
  std::swap(contain_lights_, other->contain_lights_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLightDetection_descriptor_;
  metadata.reflection = TrafficLightDetection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightDetection

// optional .apollo.common.Header header = 2;
bool TrafficLightDetection::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightDetection::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightDetection::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightDetection::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& TrafficLightDetection::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* TrafficLightDetection::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.header)
  return header_;
}
::apollo::common::Header* TrafficLightDetection::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDetection.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TrafficLightDetection::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDetection.header)
}

// repeated .apollo.perception.TrafficLight traffic_light = 1;
int TrafficLightDetection::traffic_light_size() const {
  return traffic_light_.size();
}
void TrafficLightDetection::clear_traffic_light() {
  traffic_light_.Clear();
}
const ::apollo::perception::TrafficLight& TrafficLightDetection::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Get(index);
}
::apollo::perception::TrafficLight* TrafficLightDetection::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Mutable(index);
}
::apollo::perception::TrafficLight* TrafficLightDetection::add_traffic_light() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >*
TrafficLightDetection::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDetection.traffic_light)
  return &traffic_light_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >&
TrafficLightDetection::traffic_light() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_;
}

// optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
bool TrafficLightDetection::has_traffic_light_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightDetection::set_has_traffic_light_debug() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightDetection::clear_has_traffic_light_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightDetection::clear_traffic_light_debug() {
  if (traffic_light_debug_ != NULL) traffic_light_debug_->::apollo::perception::TrafficLightDebug::Clear();
  clear_has_traffic_light_debug();
}
const ::apollo::perception::TrafficLightDebug& TrafficLightDetection::traffic_light_debug() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.traffic_light_debug)
  return traffic_light_debug_ != NULL ? *traffic_light_debug_ : *default_instance_->traffic_light_debug_;
}
::apollo::perception::TrafficLightDebug* TrafficLightDetection::mutable_traffic_light_debug() {
  set_has_traffic_light_debug();
  if (traffic_light_debug_ == NULL) {
    traffic_light_debug_ = new ::apollo::perception::TrafficLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.traffic_light_debug)
  return traffic_light_debug_;
}
::apollo::perception::TrafficLightDebug* TrafficLightDetection::release_traffic_light_debug() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDetection.traffic_light_debug)
  clear_has_traffic_light_debug();
  ::apollo::perception::TrafficLightDebug* temp = traffic_light_debug_;
  traffic_light_debug_ = NULL;
  return temp;
}
void TrafficLightDetection::set_allocated_traffic_light_debug(::apollo::perception::TrafficLightDebug* traffic_light_debug) {
  delete traffic_light_debug_;
  traffic_light_debug_ = traffic_light_debug;
  if (traffic_light_debug) {
    set_has_traffic_light_debug();
  } else {
    clear_has_traffic_light_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDetection.traffic_light_debug)
}

// optional bool contain_lights = 4;
bool TrafficLightDetection::has_contain_lights() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightDetection::set_has_contain_lights() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightDetection::clear_has_contain_lights() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightDetection::clear_contain_lights() {
  contain_lights_ = false;
  clear_has_contain_lights();
}
 bool TrafficLightDetection::contain_lights() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.contain_lights)
  return contain_lights_;
}
 void TrafficLightDetection::set_contain_lights(bool value) {
  set_has_contain_lights();
  contain_lights_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDetection.contain_lights)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
