// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/st_boundary_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/st_boundary_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* StBoundaryConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StBoundaryConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fst_5fboundary_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fst_5fboundary_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/st_boundary_config.proto");
  GOOGLE_CHECK(file != NULL);
  StBoundaryConfig_descriptor_ = file->message_type(0);
  static const int StBoundaryConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, boundary_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, high_speed_centric_acceleration_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, low_speed_centric_acceleration_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, high_speed_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, low_speed_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, minimal_kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, point_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, lowest_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, num_points_to_avg_kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, static_obs_nudge_speed_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, dynamic_obs_nudge_speed_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, centri_jerk_speed_coeff_),
  };
  StBoundaryConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StBoundaryConfig_descriptor_,
      StBoundaryConfig::default_instance_,
      StBoundaryConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(StBoundaryConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fst_5fboundary_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StBoundaryConfig_descriptor_, &StBoundaryConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fst_5fboundary_5fconfig_2eproto() {
  delete StBoundaryConfig::default_instance_;
  delete StBoundaryConfig_reflection_;
}

void protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!planning/st_boundary_config.proto\022\017apo"
    "llo.planning\"\300\003\n\020StBoundaryConfig\022\034\n\017bou"
    "ndary_buffer\030\001 \001(\001:\0030.1\0222\n%high_speed_ce"
    "ntric_acceleration_limit\030\002 \001(\001:\0031.2\0221\n$l"
    "ow_speed_centric_acceleration_limit\030\003 \001("
    "\001:\0031.4\022 \n\024high_speed_threshold\030\004 \001(\001:\00220"
    "\022\036\n\023low_speed_threshold\030\005 \001(\001:\0017\022\034\n\rmini"
    "mal_kappa\030\006 \001(\001:\0051e-05\022\032\n\017point_extensio"
    "n\030\007 \001(\001:\0011\022\031\n\014lowest_speed\030\010 \001(\001:\0032.5\022\"\n"
    "\027num_points_to_avg_kappa\030\t \001(\r:\0014\022$\n\034sta"
    "tic_obs_nudge_speed_ratio\030\n \001(\001\022%\n\035dynam"
    "ic_obs_nudge_speed_ratio\030\013 \001(\001\022\037\n\027centri"
    "_jerk_speed_coeff\030\014 \001(\001", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/st_boundary_config.proto", &protobuf_RegisterTypes);
  StBoundaryConfig::default_instance_ = new StBoundaryConfig();
  StBoundaryConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fst_5fboundary_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fst_5fboundary_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fst_5fboundary_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fst_5fboundary_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StBoundaryConfig::kBoundaryBufferFieldNumber;
const int StBoundaryConfig::kHighSpeedCentricAccelerationLimitFieldNumber;
const int StBoundaryConfig::kLowSpeedCentricAccelerationLimitFieldNumber;
const int StBoundaryConfig::kHighSpeedThresholdFieldNumber;
const int StBoundaryConfig::kLowSpeedThresholdFieldNumber;
const int StBoundaryConfig::kMinimalKappaFieldNumber;
const int StBoundaryConfig::kPointExtensionFieldNumber;
const int StBoundaryConfig::kLowestSpeedFieldNumber;
const int StBoundaryConfig::kNumPointsToAvgKappaFieldNumber;
const int StBoundaryConfig::kStaticObsNudgeSpeedRatioFieldNumber;
const int StBoundaryConfig::kDynamicObsNudgeSpeedRatioFieldNumber;
const int StBoundaryConfig::kCentriJerkSpeedCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StBoundaryConfig::StBoundaryConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StBoundaryConfig)
}

void StBoundaryConfig::InitAsDefaultInstance() {
}

StBoundaryConfig::StBoundaryConfig(const StBoundaryConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StBoundaryConfig)
}

void StBoundaryConfig::SharedCtor() {
  _cached_size_ = 0;
  boundary_buffer_ = 0.1;
  high_speed_centric_acceleration_limit_ = 1.2;
  low_speed_centric_acceleration_limit_ = 1.4;
  high_speed_threshold_ = 20;
  low_speed_threshold_ = 7;
  minimal_kappa_ = 1e-05;
  point_extension_ = 1;
  lowest_speed_ = 2.5;
  num_points_to_avg_kappa_ = 4u;
  static_obs_nudge_speed_ratio_ = 0;
  dynamic_obs_nudge_speed_ratio_ = 0;
  centri_jerk_speed_coeff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StBoundaryConfig::~StBoundaryConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StBoundaryConfig)
  SharedDtor();
}

void StBoundaryConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StBoundaryConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StBoundaryConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StBoundaryConfig_descriptor_;
}

const StBoundaryConfig& StBoundaryConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  return *default_instance_;
}

StBoundaryConfig* StBoundaryConfig::default_instance_ = NULL;

StBoundaryConfig* StBoundaryConfig::New(::google::protobuf::Arena* arena) const {
  StBoundaryConfig* n = new StBoundaryConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StBoundaryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StBoundaryConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StBoundaryConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StBoundaryConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    boundary_buffer_ = 0.1;
    high_speed_centric_acceleration_limit_ = 1.2;
    low_speed_centric_acceleration_limit_ = 1.4;
    high_speed_threshold_ = 20;
    low_speed_threshold_ = 7;
    minimal_kappa_ = 1e-05;
    point_extension_ = 1;
    lowest_speed_ = 2.5;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(static_obs_nudge_speed_ratio_, centri_jerk_speed_coeff_);
    num_points_to_avg_kappa_ = 4u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StBoundaryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StBoundaryConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double boundary_buffer = 1 [default = 0.1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &boundary_buffer_)));
          set_has_boundary_buffer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_high_speed_centric_acceleration_limit;
        break;
      }

      // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
      case 2: {
        if (tag == 17) {
         parse_high_speed_centric_acceleration_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_speed_centric_acceleration_limit_)));
          set_has_high_speed_centric_acceleration_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_low_speed_centric_acceleration_limit;
        break;
      }

      // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
      case 3: {
        if (tag == 25) {
         parse_low_speed_centric_acceleration_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_centric_acceleration_limit_)));
          set_has_low_speed_centric_acceleration_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_high_speed_threshold;
        break;
      }

      // optional double high_speed_threshold = 4 [default = 20];
      case 4: {
        if (tag == 33) {
         parse_high_speed_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_speed_threshold_)));
          set_has_high_speed_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_low_speed_threshold;
        break;
      }

      // optional double low_speed_threshold = 5 [default = 7];
      case 5: {
        if (tag == 41) {
         parse_low_speed_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_threshold_)));
          set_has_low_speed_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_minimal_kappa;
        break;
      }

      // optional double minimal_kappa = 6 [default = 1e-05];
      case 6: {
        if (tag == 49) {
         parse_minimal_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimal_kappa_)));
          set_has_minimal_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_point_extension;
        break;
      }

      // optional double point_extension = 7 [default = 1];
      case 7: {
        if (tag == 57) {
         parse_point_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_extension_)));
          set_has_point_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lowest_speed;
        break;
      }

      // optional double lowest_speed = 8 [default = 2.5];
      case 8: {
        if (tag == 65) {
         parse_lowest_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowest_speed_)));
          set_has_lowest_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_points_to_avg_kappa;
        break;
      }

      // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
      case 9: {
        if (tag == 72) {
         parse_num_points_to_avg_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_points_to_avg_kappa_)));
          set_has_num_points_to_avg_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_static_obs_nudge_speed_ratio;
        break;
      }

      // optional double static_obs_nudge_speed_ratio = 10;
      case 10: {
        if (tag == 81) {
         parse_static_obs_nudge_speed_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &static_obs_nudge_speed_ratio_)));
          set_has_static_obs_nudge_speed_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_dynamic_obs_nudge_speed_ratio;
        break;
      }

      // optional double dynamic_obs_nudge_speed_ratio = 11;
      case 11: {
        if (tag == 89) {
         parse_dynamic_obs_nudge_speed_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dynamic_obs_nudge_speed_ratio_)));
          set_has_dynamic_obs_nudge_speed_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_centri_jerk_speed_coeff;
        break;
      }

      // optional double centri_jerk_speed_coeff = 12;
      case 12: {
        if (tag == 97) {
         parse_centri_jerk_speed_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centri_jerk_speed_coeff_)));
          set_has_centri_jerk_speed_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StBoundaryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StBoundaryConfig)
  return false;
#undef DO_
}

void StBoundaryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StBoundaryConfig)
  // optional double boundary_buffer = 1 [default = 0.1];
  if (has_boundary_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->boundary_buffer(), output);
  }

  // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
  if (has_high_speed_centric_acceleration_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->high_speed_centric_acceleration_limit(), output);
  }

  // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
  if (has_low_speed_centric_acceleration_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->low_speed_centric_acceleration_limit(), output);
  }

  // optional double high_speed_threshold = 4 [default = 20];
  if (has_high_speed_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high_speed_threshold(), output);
  }

  // optional double low_speed_threshold = 5 [default = 7];
  if (has_low_speed_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low_speed_threshold(), output);
  }

  // optional double minimal_kappa = 6 [default = 1e-05];
  if (has_minimal_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->minimal_kappa(), output);
  }

  // optional double point_extension = 7 [default = 1];
  if (has_point_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->point_extension(), output);
  }

  // optional double lowest_speed = 8 [default = 2.5];
  if (has_lowest_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lowest_speed(), output);
  }

  // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
  if (has_num_points_to_avg_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_points_to_avg_kappa(), output);
  }

  // optional double static_obs_nudge_speed_ratio = 10;
  if (has_static_obs_nudge_speed_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->static_obs_nudge_speed_ratio(), output);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 11;
  if (has_dynamic_obs_nudge_speed_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dynamic_obs_nudge_speed_ratio(), output);
  }

  // optional double centri_jerk_speed_coeff = 12;
  if (has_centri_jerk_speed_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->centri_jerk_speed_coeff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StBoundaryConfig)
}

::google::protobuf::uint8* StBoundaryConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StBoundaryConfig)
  // optional double boundary_buffer = 1 [default = 0.1];
  if (has_boundary_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->boundary_buffer(), target);
  }

  // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
  if (has_high_speed_centric_acceleration_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->high_speed_centric_acceleration_limit(), target);
  }

  // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
  if (has_low_speed_centric_acceleration_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->low_speed_centric_acceleration_limit(), target);
  }

  // optional double high_speed_threshold = 4 [default = 20];
  if (has_high_speed_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high_speed_threshold(), target);
  }

  // optional double low_speed_threshold = 5 [default = 7];
  if (has_low_speed_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low_speed_threshold(), target);
  }

  // optional double minimal_kappa = 6 [default = 1e-05];
  if (has_minimal_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->minimal_kappa(), target);
  }

  // optional double point_extension = 7 [default = 1];
  if (has_point_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->point_extension(), target);
  }

  // optional double lowest_speed = 8 [default = 2.5];
  if (has_lowest_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lowest_speed(), target);
  }

  // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
  if (has_num_points_to_avg_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_points_to_avg_kappa(), target);
  }

  // optional double static_obs_nudge_speed_ratio = 10;
  if (has_static_obs_nudge_speed_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->static_obs_nudge_speed_ratio(), target);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 11;
  if (has_dynamic_obs_nudge_speed_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dynamic_obs_nudge_speed_ratio(), target);
  }

  // optional double centri_jerk_speed_coeff = 12;
  if (has_centri_jerk_speed_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->centri_jerk_speed_coeff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StBoundaryConfig)
  return target;
}

int StBoundaryConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StBoundaryConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double boundary_buffer = 1 [default = 0.1];
    if (has_boundary_buffer()) {
      total_size += 1 + 8;
    }

    // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
    if (has_high_speed_centric_acceleration_limit()) {
      total_size += 1 + 8;
    }

    // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
    if (has_low_speed_centric_acceleration_limit()) {
      total_size += 1 + 8;
    }

    // optional double high_speed_threshold = 4 [default = 20];
    if (has_high_speed_threshold()) {
      total_size += 1 + 8;
    }

    // optional double low_speed_threshold = 5 [default = 7];
    if (has_low_speed_threshold()) {
      total_size += 1 + 8;
    }

    // optional double minimal_kappa = 6 [default = 1e-05];
    if (has_minimal_kappa()) {
      total_size += 1 + 8;
    }

    // optional double point_extension = 7 [default = 1];
    if (has_point_extension()) {
      total_size += 1 + 8;
    }

    // optional double lowest_speed = 8 [default = 2.5];
    if (has_lowest_speed()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
    if (has_num_points_to_avg_kappa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_points_to_avg_kappa());
    }

    // optional double static_obs_nudge_speed_ratio = 10;
    if (has_static_obs_nudge_speed_ratio()) {
      total_size += 1 + 8;
    }

    // optional double dynamic_obs_nudge_speed_ratio = 11;
    if (has_dynamic_obs_nudge_speed_ratio()) {
      total_size += 1 + 8;
    }

    // optional double centri_jerk_speed_coeff = 12;
    if (has_centri_jerk_speed_coeff()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StBoundaryConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StBoundaryConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StBoundaryConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StBoundaryConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StBoundaryConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StBoundaryConfig)
    MergeFrom(*source);
  }
}

void StBoundaryConfig::MergeFrom(const StBoundaryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StBoundaryConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boundary_buffer()) {
      set_boundary_buffer(from.boundary_buffer());
    }
    if (from.has_high_speed_centric_acceleration_limit()) {
      set_high_speed_centric_acceleration_limit(from.high_speed_centric_acceleration_limit());
    }
    if (from.has_low_speed_centric_acceleration_limit()) {
      set_low_speed_centric_acceleration_limit(from.low_speed_centric_acceleration_limit());
    }
    if (from.has_high_speed_threshold()) {
      set_high_speed_threshold(from.high_speed_threshold());
    }
    if (from.has_low_speed_threshold()) {
      set_low_speed_threshold(from.low_speed_threshold());
    }
    if (from.has_minimal_kappa()) {
      set_minimal_kappa(from.minimal_kappa());
    }
    if (from.has_point_extension()) {
      set_point_extension(from.point_extension());
    }
    if (from.has_lowest_speed()) {
      set_lowest_speed(from.lowest_speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_points_to_avg_kappa()) {
      set_num_points_to_avg_kappa(from.num_points_to_avg_kappa());
    }
    if (from.has_static_obs_nudge_speed_ratio()) {
      set_static_obs_nudge_speed_ratio(from.static_obs_nudge_speed_ratio());
    }
    if (from.has_dynamic_obs_nudge_speed_ratio()) {
      set_dynamic_obs_nudge_speed_ratio(from.dynamic_obs_nudge_speed_ratio());
    }
    if (from.has_centri_jerk_speed_coeff()) {
      set_centri_jerk_speed_coeff(from.centri_jerk_speed_coeff());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StBoundaryConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StBoundaryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StBoundaryConfig::CopyFrom(const StBoundaryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StBoundaryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StBoundaryConfig::IsInitialized() const {

  return true;
}

void StBoundaryConfig::Swap(StBoundaryConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StBoundaryConfig::InternalSwap(StBoundaryConfig* other) {
  std::swap(boundary_buffer_, other->boundary_buffer_);
  std::swap(high_speed_centric_acceleration_limit_, other->high_speed_centric_acceleration_limit_);
  std::swap(low_speed_centric_acceleration_limit_, other->low_speed_centric_acceleration_limit_);
  std::swap(high_speed_threshold_, other->high_speed_threshold_);
  std::swap(low_speed_threshold_, other->low_speed_threshold_);
  std::swap(minimal_kappa_, other->minimal_kappa_);
  std::swap(point_extension_, other->point_extension_);
  std::swap(lowest_speed_, other->lowest_speed_);
  std::swap(num_points_to_avg_kappa_, other->num_points_to_avg_kappa_);
  std::swap(static_obs_nudge_speed_ratio_, other->static_obs_nudge_speed_ratio_);
  std::swap(dynamic_obs_nudge_speed_ratio_, other->dynamic_obs_nudge_speed_ratio_);
  std::swap(centri_jerk_speed_coeff_, other->centri_jerk_speed_coeff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StBoundaryConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StBoundaryConfig_descriptor_;
  metadata.reflection = StBoundaryConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StBoundaryConfig

// optional double boundary_buffer = 1 [default = 0.1];
bool StBoundaryConfig::has_boundary_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StBoundaryConfig::set_has_boundary_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void StBoundaryConfig::clear_has_boundary_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void StBoundaryConfig::clear_boundary_buffer() {
  boundary_buffer_ = 0.1;
  clear_has_boundary_buffer();
}
 double StBoundaryConfig::boundary_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.boundary_buffer)
  return boundary_buffer_;
}
 void StBoundaryConfig::set_boundary_buffer(double value) {
  set_has_boundary_buffer();
  boundary_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.boundary_buffer)
}

// optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
bool StBoundaryConfig::has_high_speed_centric_acceleration_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StBoundaryConfig::set_has_high_speed_centric_acceleration_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void StBoundaryConfig::clear_has_high_speed_centric_acceleration_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void StBoundaryConfig::clear_high_speed_centric_acceleration_limit() {
  high_speed_centric_acceleration_limit_ = 1.2;
  clear_has_high_speed_centric_acceleration_limit();
}
 double StBoundaryConfig::high_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
  return high_speed_centric_acceleration_limit_;
}
 void StBoundaryConfig::set_high_speed_centric_acceleration_limit(double value) {
  set_has_high_speed_centric_acceleration_limit();
  high_speed_centric_acceleration_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
}

// optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
bool StBoundaryConfig::has_low_speed_centric_acceleration_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StBoundaryConfig::set_has_low_speed_centric_acceleration_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void StBoundaryConfig::clear_has_low_speed_centric_acceleration_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void StBoundaryConfig::clear_low_speed_centric_acceleration_limit() {
  low_speed_centric_acceleration_limit_ = 1.4;
  clear_has_low_speed_centric_acceleration_limit();
}
 double StBoundaryConfig::low_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
  return low_speed_centric_acceleration_limit_;
}
 void StBoundaryConfig::set_low_speed_centric_acceleration_limit(double value) {
  set_has_low_speed_centric_acceleration_limit();
  low_speed_centric_acceleration_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
}

// optional double high_speed_threshold = 4 [default = 20];
bool StBoundaryConfig::has_high_speed_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StBoundaryConfig::set_has_high_speed_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void StBoundaryConfig::clear_has_high_speed_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void StBoundaryConfig::clear_high_speed_threshold() {
  high_speed_threshold_ = 20;
  clear_has_high_speed_threshold();
}
 double StBoundaryConfig::high_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_threshold)
  return high_speed_threshold_;
}
 void StBoundaryConfig::set_high_speed_threshold(double value) {
  set_has_high_speed_threshold();
  high_speed_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_threshold)
}

// optional double low_speed_threshold = 5 [default = 7];
bool StBoundaryConfig::has_low_speed_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StBoundaryConfig::set_has_low_speed_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void StBoundaryConfig::clear_has_low_speed_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void StBoundaryConfig::clear_low_speed_threshold() {
  low_speed_threshold_ = 7;
  clear_has_low_speed_threshold();
}
 double StBoundaryConfig::low_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_threshold)
  return low_speed_threshold_;
}
 void StBoundaryConfig::set_low_speed_threshold(double value) {
  set_has_low_speed_threshold();
  low_speed_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_threshold)
}

// optional double minimal_kappa = 6 [default = 1e-05];
bool StBoundaryConfig::has_minimal_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StBoundaryConfig::set_has_minimal_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
void StBoundaryConfig::clear_has_minimal_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
void StBoundaryConfig::clear_minimal_kappa() {
  minimal_kappa_ = 1e-05;
  clear_has_minimal_kappa();
}
 double StBoundaryConfig::minimal_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.minimal_kappa)
  return minimal_kappa_;
}
 void StBoundaryConfig::set_minimal_kappa(double value) {
  set_has_minimal_kappa();
  minimal_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.minimal_kappa)
}

// optional double point_extension = 7 [default = 1];
bool StBoundaryConfig::has_point_extension() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StBoundaryConfig::set_has_point_extension() {
  _has_bits_[0] |= 0x00000040u;
}
void StBoundaryConfig::clear_has_point_extension() {
  _has_bits_[0] &= ~0x00000040u;
}
void StBoundaryConfig::clear_point_extension() {
  point_extension_ = 1;
  clear_has_point_extension();
}
 double StBoundaryConfig::point_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.point_extension)
  return point_extension_;
}
 void StBoundaryConfig::set_point_extension(double value) {
  set_has_point_extension();
  point_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.point_extension)
}

// optional double lowest_speed = 8 [default = 2.5];
bool StBoundaryConfig::has_lowest_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StBoundaryConfig::set_has_lowest_speed() {
  _has_bits_[0] |= 0x00000080u;
}
void StBoundaryConfig::clear_has_lowest_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
void StBoundaryConfig::clear_lowest_speed() {
  lowest_speed_ = 2.5;
  clear_has_lowest_speed();
}
 double StBoundaryConfig::lowest_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.lowest_speed)
  return lowest_speed_;
}
 void StBoundaryConfig::set_lowest_speed(double value) {
  set_has_lowest_speed();
  lowest_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.lowest_speed)
}

// optional uint32 num_points_to_avg_kappa = 9 [default = 4];
bool StBoundaryConfig::has_num_points_to_avg_kappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StBoundaryConfig::set_has_num_points_to_avg_kappa() {
  _has_bits_[0] |= 0x00000100u;
}
void StBoundaryConfig::clear_has_num_points_to_avg_kappa() {
  _has_bits_[0] &= ~0x00000100u;
}
void StBoundaryConfig::clear_num_points_to_avg_kappa() {
  num_points_to_avg_kappa_ = 4u;
  clear_has_num_points_to_avg_kappa();
}
 ::google::protobuf::uint32 StBoundaryConfig::num_points_to_avg_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
  return num_points_to_avg_kappa_;
}
 void StBoundaryConfig::set_num_points_to_avg_kappa(::google::protobuf::uint32 value) {
  set_has_num_points_to_avg_kappa();
  num_points_to_avg_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
}

// optional double static_obs_nudge_speed_ratio = 10;
bool StBoundaryConfig::has_static_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StBoundaryConfig::set_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
void StBoundaryConfig::clear_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
void StBoundaryConfig::clear_static_obs_nudge_speed_ratio() {
  static_obs_nudge_speed_ratio_ = 0;
  clear_has_static_obs_nudge_speed_ratio();
}
 double StBoundaryConfig::static_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
  return static_obs_nudge_speed_ratio_;
}
 void StBoundaryConfig::set_static_obs_nudge_speed_ratio(double value) {
  set_has_static_obs_nudge_speed_ratio();
  static_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
}

// optional double dynamic_obs_nudge_speed_ratio = 11;
bool StBoundaryConfig::has_dynamic_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StBoundaryConfig::set_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
void StBoundaryConfig::clear_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
void StBoundaryConfig::clear_dynamic_obs_nudge_speed_ratio() {
  dynamic_obs_nudge_speed_ratio_ = 0;
  clear_has_dynamic_obs_nudge_speed_ratio();
}
 double StBoundaryConfig::dynamic_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
  return dynamic_obs_nudge_speed_ratio_;
}
 void StBoundaryConfig::set_dynamic_obs_nudge_speed_ratio(double value) {
  set_has_dynamic_obs_nudge_speed_ratio();
  dynamic_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
}

// optional double centri_jerk_speed_coeff = 12;
bool StBoundaryConfig::has_centri_jerk_speed_coeff() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void StBoundaryConfig::set_has_centri_jerk_speed_coeff() {
  _has_bits_[0] |= 0x00000800u;
}
void StBoundaryConfig::clear_has_centri_jerk_speed_coeff() {
  _has_bits_[0] &= ~0x00000800u;
}
void StBoundaryConfig::clear_centri_jerk_speed_coeff() {
  centri_jerk_speed_coeff_ = 0;
  clear_has_centri_jerk_speed_coeff();
}
 double StBoundaryConfig::centri_jerk_speed_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.centri_jerk_speed_coeff)
  return centri_jerk_speed_coeff_;
}
 void StBoundaryConfig::set_centri_jerk_speed_coeff(double value) {
  set_has_centri_jerk_speed_coeff();
  centri_jerk_speed_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.centri_jerk_speed_coeff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
