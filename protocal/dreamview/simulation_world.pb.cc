// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dreamview/simulation_world.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dreamview/simulation_world.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace dreamview {

namespace {

const ::google::protobuf::Descriptor* PolygonPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolygonPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Prediction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Prediction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Decision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Decision_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Decision_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Decision_StopReasonCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Object_DisengageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Object_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DelaysInMs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelaysInMs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutePath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutePath_reflection_ = NULL;
const ::google::protobuf::Descriptor* Latency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Latency_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapElementIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapElementIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimulationWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimulationWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimulationWorld_LatencyEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dreamview_2fsimulation_5fworld_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dreamview_2fsimulation_5fworld_2eproto() {
  protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dreamview/simulation_world.proto");
  GOOGLE_CHECK(file != NULL);
  PolygonPoint_descriptor_ = file->message_type(0);
  static const int PolygonPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonPoint, z_),
  };
  PolygonPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PolygonPoint_descriptor_,
      PolygonPoint::default_instance_,
      PolygonPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(PolygonPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonPoint, _internal_metadata_),
      -1);
  Prediction_descriptor_ = file->message_type(1);
  static const int Prediction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prediction, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prediction, predicted_trajectory_),
  };
  Prediction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Prediction_descriptor_,
      Prediction::default_instance_,
      Prediction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prediction, _has_bits_[0]),
      -1,
      -1,
      sizeof(Prediction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prediction, _internal_metadata_),
      -1);
  Decision_descriptor_ = file->message_type(2);
  static const int Decision_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, polygon_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, stopreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, change_lane_type_),
  };
  Decision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Decision_descriptor_,
      Decision::default_instance_,
      Decision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, _has_bits_[0]),
      -1,
      -1,
      sizeof(Decision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, _internal_metadata_),
      -1);
  Decision_Type_descriptor_ = Decision_descriptor_->enum_type(0);
  Decision_StopReasonCode_descriptor_ = Decision_descriptor_->enum_type(1);
  Object_descriptor_ = file->message_type(3);
  static const int Object_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, polygon_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, speed_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, speed_jerk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, spin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, spin_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, spin_jerk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, speed_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, signal_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, current_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, timestamp_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, yielded_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, throttle_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, brake_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, steering_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, steering_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, steering_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, disengage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, prediction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, confidence_),
  };
  Object_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      -1,
      -1,
      sizeof(Object),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
      -1);
  Object_DisengageType_descriptor_ = Object_descriptor_->enum_type(0);
  Object_Type_descriptor_ = Object_descriptor_->enum_type(1);
  DelaysInMs_descriptor_ = file->message_type(4);
  static const int DelaysInMs_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, chassis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, localization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, perception_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, planning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, prediction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, traffic_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, control_),
  };
  DelaysInMs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DelaysInMs_descriptor_,
      DelaysInMs::default_instance_,
      DelaysInMs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, _has_bits_[0]),
      -1,
      -1,
      sizeof(DelaysInMs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelaysInMs, _internal_metadata_),
      -1);
  RoutePath_descriptor_ = file->message_type(5);
  static const int RoutePath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, point_),
  };
  RoutePath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoutePath_descriptor_,
      RoutePath::default_instance_,
      RoutePath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoutePath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, _internal_metadata_),
      -1);
  Latency_descriptor_ = file->message_type(6);
  static const int Latency_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, timestamp_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, total_time_ms_),
  };
  Latency_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Latency_descriptor_,
      Latency::default_instance_,
      Latency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, _has_bits_[0]),
      -1,
      -1,
      sizeof(Latency),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latency, _internal_metadata_),
      -1);
  MapElementIds_descriptor_ = file->message_type(7);
  static const int MapElementIds_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, crosswalk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, junction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, stop_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, yield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, overlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, road_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, clear_area_),
  };
  MapElementIds_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapElementIds_descriptor_,
      MapElementIds::default_instance_,
      MapElementIds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapElementIds),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapElementIds, _internal_metadata_),
      -1);
  ControlData_descriptor_ = file->message_type(8);
  static const int ControlData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlData, timestamp_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlData, station_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlData, lateral_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlData, heading_error_),
  };
  ControlData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlData_descriptor_,
      ControlData::default_instance_,
      ControlData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ControlData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlData, _internal_metadata_),
      -1);
  Notification_descriptor_ = file->message_type(9);
  static const int Notification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, timestamp_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, item_),
  };
  Notification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Notification_descriptor_,
      Notification::default_instance_,
      Notification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, _has_bits_[0]),
      -1,
      -1,
      sizeof(Notification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, _internal_metadata_),
      -1);
  SimulationWorld_descriptor_ = file->message_type(10);
  static const int SimulationWorld_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, sequence_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, auto_driving_car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, traffic_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, route_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, routing_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, planning_trajectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, main_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, main_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, speed_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, monitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, engage_advice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, map_element_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, map_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, map_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, planning_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, lane_marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, control_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, navigation_path_),
  };
  SimulationWorld_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimulationWorld_descriptor_,
      SimulationWorld::default_instance_,
      SimulationWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimulationWorld),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationWorld, _internal_metadata_),
      -1);
  SimulationWorld_LatencyEntry_descriptor_ = SimulationWorld_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dreamview_2fsimulation_5fworld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PolygonPoint_descriptor_, &PolygonPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Prediction_descriptor_, &Prediction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Decision_descriptor_, &Decision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DelaysInMs_descriptor_, &DelaysInMs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoutePath_descriptor_, &RoutePath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Latency_descriptor_, &Latency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapElementIds_descriptor_, &MapElementIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlData_descriptor_, &ControlData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Notification_descriptor_, &Notification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimulationWorld_descriptor_, &SimulationWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SimulationWorld_LatencyEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::dreamview::Latency,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                SimulationWorld_LatencyEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_dreamview_2fsimulation_5fworld_2eproto() {
  delete PolygonPoint::default_instance_;
  delete PolygonPoint_reflection_;
  delete Prediction::default_instance_;
  delete Prediction_reflection_;
  delete Decision::default_instance_;
  delete Decision_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete DelaysInMs::default_instance_;
  delete DelaysInMs_reflection_;
  delete RoutePath::default_instance_;
  delete RoutePath_reflection_;
  delete Latency::default_instance_;
  delete Latency_reflection_;
  delete MapElementIds::default_instance_;
  delete MapElementIds_reflection_;
  delete ControlData::default_instance_;
  delete ControlData_reflection_;
  delete Notification::default_instance_;
  delete Notification_reflection_;
  delete SimulationWorld::default_instance_;
  delete SimulationWorld_reflection_;
}

void protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::monitor::protobuf_AddDesc_common_2fmonitor_5flog_2fmonitor_5flog_2eproto();
  ::apollo::planning_internal::protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  ::apollo::perception::protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::apollo::routing::protobuf_AddDesc_routing_2frouting_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n dreamview/simulation_world.proto\022\020apol"
    "lo.dreamview\032$common/monitor_log/monitor"
    "_log.proto\032 planning/planning_internal.p"
    "roto\032$perception/perception_obstacle.pro"
    "to\032\026common/pnc_point.proto\032\025routing/rout"
    "ing.proto\"2\n\014PolygonPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001"
    "y\030\002 \001(\001\022\014\n\001z\030\003 \001(\001:\0010\"_\n\nPrediction\022\023\n\013p"
    "robability\030\001 \001(\001\022<\n\024predicted_trajectory"
    "\030\002 \003(\0132\036.apollo.dreamview.PolygonPoint\"\304"
    "\006\n\010Decision\0225\n\004type\030\001 \001(\0162\037.apollo.dream"
    "view.Decision.Type:\006IGNORE\0225\n\rpolygon_po"
    "int\030\002 \003(\0132\036.apollo.dreamview.PolygonPoin"
    "t\022\017\n\007heading\030\003 \001(\001\022\020\n\010latitude\030\004 \001(\001\022\021\n\t"
    "longitude\030\005 \001(\001\022\022\n\nposition_x\030\006 \001(\001\022\022\n\np"
    "osition_y\030\007 \001(\001\022\023\n\006length\030\010 \001(\001:\0032.8\022\022\n\005"
    "width\030\t \001(\001:\0031.4\022\023\n\006height\030\n \001(\001:\0031.8\022=\n"
    "\nstopReason\030\013 \001(\0162).apollo.dreamview.Dec"
    "ision.StopReasonCode\0228\n\020change_lane_type"
    "\030\014 \001(\0162\036.apollo.routing.ChangeLaneType\"Z"
    "\n\004Type\022\n\n\006IGNORE\020\000\022\010\n\004STOP\020\001\022\t\n\005NUDGE\020\002\022"
    "\t\n\005YIELD\020\003\022\014\n\010OVERTAKE\020\004\022\n\n\006FOLLOW\020\005\022\014\n\010"
    "SIDEPASS\020\006\"\330\002\n\016StopReasonCode\022\034\n\030STOP_RE"
    "ASON_HEAD_VEHICLE\020\001\022\033\n\027STOP_REASON_DESTI"
    "NATION\020\002\022\032\n\026STOP_REASON_PEDESTRIAN\020\003\022\030\n\024"
    "STOP_REASON_OBSTACLE\020\004\022\026\n\022STOP_REASON_SI"
    "GNAL\020d\022\031\n\025STOP_REASON_STOP_SIGN\020e\022\032\n\026STO"
    "P_REASON_YIELD_SIGN\020f\022\032\n\026STOP_REASON_CLE"
    "AR_ZONE\020g\022\031\n\025STOP_REASON_CROSSWALK\020h\022\031\n\025"
    "STOP_REASON_EMERGENCY\020i\022\031\n\025STOP_REASON_N"
    "OT_READY\020j\022\031\n\025STOP_REASON_PULL_OVER\020k\"\236\t"
    "\n\006Object\022\n\n\002id\030\001 \001(\t\0225\n\rpolygon_point\030\002 "
    "\003(\0132\036.apollo.dreamview.PolygonPoint\022\017\n\007h"
    "eading\030\003 \001(\001\022\020\n\010latitude\030\004 \001(\001\022\021\n\tlongit"
    "ude\030\005 \001(\001\022\022\n\nposition_x\030\006 \001(\001\022\022\n\npositio"
    "n_y\030\007 \001(\001\022\023\n\006length\030\010 \001(\001:\0032.8\022\022\n\005width\030"
    "\t \001(\001:\0031.4\022\023\n\006height\030\n \001(\001:\0031.8\022\r\n\005speed"
    "\030\013 \001(\001\022\032\n\022speed_acceleration\030\014 \001(\001\022\022\n\nsp"
    "eed_jerk\030\r \001(\001\022\014\n\004spin\030\016 \001(\001\022\031\n\021spin_acc"
    "eleration\030\017 \001(\001\022\021\n\tspin_jerk\030\020 \001(\001\022\025\n\rsp"
    "eed_heading\030\021 \001(\001\022\r\n\005kappa\030\022 \001(\001\022\022\n\nsign"
    "al_set\030\023 \003(\t\022\026\n\016current_signal\030\024 \001(\t\022\025\n\r"
    "timestamp_sec\030\025 \001(\001\022,\n\010decision\030\026 \003(\0132\032."
    "apollo.dreamview.Decision\022\037\n\020yielded_obs"
    "tacle\030  \001(\010:\005false\022\033\n\023throttle_percentag"
    "e\030\027 \001(\001\022\030\n\020brake_percentage\030\030 \001(\001\022\033\n\023ste"
    "ering_percentage\030\031 \001(\001\022\026\n\016steering_angle"
    "\030\032 \001(\001\022\026\n\016steering_ratio\030\033 \001(\001\022>\n\016diseng"
    "age_type\030\034 \001(\0162&.apollo.dreamview.Object"
    ".DisengageType\022+\n\004type\030\035 \001(\0162\035.apollo.dr"
    "eamview.Object.Type\0220\n\nprediction\030\036 \003(\0132"
    "\034.apollo.dreamview.Prediction\022\025\n\nconfide"
    "nce\030\037 \001(\001:\0011\"\304\001\n\rDisengageType\022\022\n\016DISENG"
    "AGE_NONE\020\000\022\025\n\021DISENGAGE_UNKNOWN\020\001\022\024\n\020DIS"
    "ENGAGE_MANUAL\020\002\022\027\n\023DISENGAGE_EMERGENCY\020\003"
    "\022\035\n\031DISENGAGE_AUTO_STEER_ONLY\020\004\022\035\n\031DISEN"
    "GAGE_AUTO_SPEED_ONLY\020\005\022\033\n\027DISENGAGE_CHAS"
    "SIS_ERROR\020\006\"\200\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017UNK"
    "NOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022\016\n"
    "\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020\005\022"
    "\013\n\007VIRTUAL\020\006\022\010\n\004CIPV\020\007\"\236\001\n\nDelaysInMs\022\017\n"
    "\007chassis\030\001 \001(\001\022\024\n\014localization\030\003 \001(\001\022\033\n\023"
    "perception_obstacle\030\004 \001(\001\022\020\n\010planning\030\005 "
    "\001(\001\022\022\n\nprediction\030\007 \001(\001\022\025\n\rtraffic_light"
    "\030\010 \001(\001\022\017\n\007control\030\t \001(\001\":\n\tRoutePath\022-\n\005"
    "point\030\001 \003(\0132\036.apollo.dreamview.PolygonPo"
    "int\"7\n\007Latency\022\025\n\rtimestamp_sec\030\001 \001(\001\022\025\n"
    "\rtotal_time_ms\030\002 \001(\001\"\247\001\n\rMapElementIds\022\014"
    "\n\004lane\030\001 \003(\t\022\021\n\tcrosswalk\030\002 \003(\t\022\020\n\010junct"
    "ion\030\003 \003(\t\022\016\n\006signal\030\004 \003(\t\022\021\n\tstop_sign\030\005"
    " \003(\t\022\r\n\005yield\030\006 \003(\t\022\017\n\007overlap\030\007 \003(\t\022\014\n\004"
    "road\030\010 \003(\t\022\022\n\nclear_area\030\t \003(\t\"i\n\013Contro"
    "lData\022\025\n\rtimestamp_sec\030\001 \001(\001\022\025\n\rstation_"
    "error\030\002 \001(\001\022\025\n\rlateral_error\030\003 \001(\001\022\025\n\rhe"
    "ading_error\030\004 \001(\001\"^\n\014Notification\022\025\n\rtim"
    "estamp_sec\030\001 \001(\001\0227\n\004item\030\002 \001(\0132).apollo."
    "common.monitor.MonitorMessageItem\"\337\010\n\017Si"
    "mulationWorld\022\021\n\ttimestamp\030\001 \001(\001\022\024\n\014sequ"
    "ence_num\030\002 \001(\r\022(\n\006object\030\003 \003(\0132\030.apollo."
    "dreamview.Object\0222\n\020auto_driving_car\030\004 \001"
    "(\0132\030.apollo.dreamview.Object\0220\n\016traffic_"
    "signal\030\005 \001(\0132\030.apollo.dreamview.Object\022/"
    "\n\nroute_path\030\006 \003(\0132\033.apollo.dreamview.Ro"
    "utePath\022\024\n\014routing_time\030\007 \001(\001\0225\n\023plannin"
    "g_trajectory\030\010 \003(\0132\030.apollo.dreamview.Ob"
    "ject\022/\n\tmain_stop\030\t \001(\0132\030.apollo.dreamvi"
    "ew.ObjectB\002\030\001\022/\n\rmain_decision\030\n \001(\0132\030.a"
    "pollo.dreamview.Object\022\023\n\013speed_limit\030\013 "
    "\001(\001\022+\n\005delay\030\014 \001(\0132\034.apollo.dreamview.De"
    "laysInMs\022:\n\007monitor\030\r \001(\0132%.apollo.commo"
    "n.monitor.MonitorMessageB\002\030\001\0224\n\014notifica"
    "tion\030\016 \003(\0132\036.apollo.dreamview.Notificati"
    "on\022\025\n\rengage_advice\030\017 \001(\t\022\?\n\007latency\030\020 \003"
    "(\0132..apollo.dreamview.SimulationWorld.La"
    "tencyEntry\0228\n\017map_element_ids\030\021 \001(\0132\037.ap"
    "ollo.dreamview.MapElementIds\022\020\n\010map_hash"
    "\030\022 \001(\004\022\022\n\nmap_radius\030\023 \001(\001\022=\n\rplanning_d"
    "ata\030\024 \001(\0132&.apollo.planning_internal.Pla"
    "nningData\022%\n\003gps\030\025 \001(\0132\030.apollo.dreamvie"
    "w.Object\0223\n\013lane_marker\030\026 \001(\0132\036.apollo.p"
    "erception.LaneMarkers\0223\n\014control_data\030\027 "
    "\001(\0132\035.apollo.dreamview.ControlData\022,\n\017na"
    "vigation_path\030\030 \003(\0132\023.apollo.common.Path"
    "\032I\n\014LatencyEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002"
    " \001(\0132\031.apollo.dreamview.Latency:\0028\001", 4155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dreamview/simulation_world.proto", &protobuf_RegisterTypes);
  PolygonPoint::default_instance_ = new PolygonPoint();
  Prediction::default_instance_ = new Prediction();
  Decision::default_instance_ = new Decision();
  Object::default_instance_ = new Object();
  DelaysInMs::default_instance_ = new DelaysInMs();
  RoutePath::default_instance_ = new RoutePath();
  Latency::default_instance_ = new Latency();
  MapElementIds::default_instance_ = new MapElementIds();
  ControlData::default_instance_ = new ControlData();
  Notification::default_instance_ = new Notification();
  SimulationWorld::default_instance_ = new SimulationWorld();
  PolygonPoint::default_instance_->InitAsDefaultInstance();
  Prediction::default_instance_->InitAsDefaultInstance();
  Decision::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  DelaysInMs::default_instance_->InitAsDefaultInstance();
  RoutePath::default_instance_->InitAsDefaultInstance();
  Latency::default_instance_->InitAsDefaultInstance();
  MapElementIds::default_instance_->InitAsDefaultInstance();
  ControlData::default_instance_->InitAsDefaultInstance();
  Notification::default_instance_->InitAsDefaultInstance();
  SimulationWorld::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dreamview_2fsimulation_5fworld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dreamview_2fsimulation_5fworld_2eproto {
  StaticDescriptorInitializer_dreamview_2fsimulation_5fworld_2eproto() {
    protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  }
} static_descriptor_initializer_dreamview_2fsimulation_5fworld_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolygonPoint::kXFieldNumber;
const int PolygonPoint::kYFieldNumber;
const int PolygonPoint::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolygonPoint::PolygonPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.PolygonPoint)
}

void PolygonPoint::InitAsDefaultInstance() {
}

PolygonPoint::PolygonPoint(const PolygonPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.PolygonPoint)
}

void PolygonPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolygonPoint::~PolygonPoint() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.PolygonPoint)
  SharedDtor();
}

void PolygonPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PolygonPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolygonPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolygonPoint_descriptor_;
}

const PolygonPoint& PolygonPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

PolygonPoint* PolygonPoint::default_instance_ = NULL;

PolygonPoint* PolygonPoint::New(::google::protobuf::Arena* arena) const {
  PolygonPoint* n = new PolygonPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolygonPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.PolygonPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PolygonPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PolygonPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PolygonPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.PolygonPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.PolygonPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.PolygonPoint)
  return false;
#undef DO_
}

void PolygonPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.PolygonPoint)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.PolygonPoint)
}

::google::protobuf::uint8* PolygonPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.PolygonPoint)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.PolygonPoint)
  return target;
}

int PolygonPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.PolygonPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolygonPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.PolygonPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PolygonPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PolygonPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.PolygonPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.PolygonPoint)
    MergeFrom(*source);
  }
}

void PolygonPoint::MergeFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.PolygonPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PolygonPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.PolygonPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonPoint::CopyFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.PolygonPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonPoint::IsInitialized() const {

  return true;
}

void PolygonPoint::Swap(PolygonPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolygonPoint::InternalSwap(PolygonPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolygonPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolygonPoint_descriptor_;
  metadata.reflection = PolygonPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolygonPoint

// optional double x = 1;
bool PolygonPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolygonPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PolygonPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolygonPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double PolygonPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.x)
  return x_;
}
 void PolygonPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.x)
}

// optional double y = 2;
bool PolygonPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolygonPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PolygonPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolygonPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double PolygonPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.y)
  return y_;
}
 void PolygonPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.y)
}

// optional double z = 3 [default = 0];
bool PolygonPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolygonPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void PolygonPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolygonPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double PolygonPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.z)
  return z_;
}
 void PolygonPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Prediction::kProbabilityFieldNumber;
const int Prediction::kPredictedTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Prediction::Prediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Prediction)
}

void Prediction::InitAsDefaultInstance() {
}

Prediction::Prediction(const Prediction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Prediction)
}

void Prediction::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Prediction::~Prediction() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Prediction)
  SharedDtor();
}

void Prediction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Prediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prediction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Prediction_descriptor_;
}

const Prediction& Prediction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

Prediction* Prediction::default_instance_ = NULL;

Prediction* Prediction::New(::google::protobuf::Arena* arena) const {
  Prediction* n = new Prediction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Prediction)
  probability_ = 0;
  predicted_trajectory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Prediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_predicted_trajectory;
        break;
      }

      // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
      case 2: {
        if (tag == 18) {
         parse_predicted_trajectory:
          DO_(input->IncrementRecursionDepth());
         parse_loop_predicted_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_predicted_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_predicted_trajectory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Prediction)
  return false;
#undef DO_
}

void Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Prediction)
  // optional double probability = 1;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  for (unsigned int i = 0, n = this->predicted_trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->predicted_trajectory(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Prediction)
}

::google::protobuf::uint8* Prediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Prediction)
  // optional double probability = 1;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  for (unsigned int i = 0, n = this->predicted_trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->predicted_trajectory(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Prediction)
  return target;
}

int Prediction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Prediction)
  int total_size = 0;

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  total_size += 1 * this->predicted_trajectory_size();
  for (int i = 0; i < this->predicted_trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->predicted_trajectory(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Prediction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Prediction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Prediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Prediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Prediction)
    MergeFrom(*source);
  }
}

void Prediction::MergeFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Prediction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  predicted_trajectory_.MergeFrom(from.predicted_trajectory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Prediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prediction::CopyFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prediction::IsInitialized() const {

  return true;
}

void Prediction::Swap(Prediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Prediction::InternalSwap(Prediction* other) {
  std::swap(probability_, other->probability_);
  predicted_trajectory_.UnsafeArenaSwap(&other->predicted_trajectory_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Prediction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Prediction_descriptor_;
  metadata.reflection = Prediction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Prediction

// optional double probability = 1;
bool Prediction::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Prediction::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void Prediction::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void Prediction::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double Prediction::probability() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Prediction.probability)
  return probability_;
}
 void Prediction::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Prediction.probability)
}

// repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
int Prediction::predicted_trajectory_size() const {
  return predicted_trajectory_.size();
}
void Prediction::clear_predicted_trajectory() {
  predicted_trajectory_.Clear();
}
const ::apollo::dreamview::PolygonPoint& Prediction::predicted_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_.Get(index);
}
::apollo::dreamview::PolygonPoint* Prediction::mutable_predicted_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_.Mutable(index);
}
::apollo::dreamview::PolygonPoint* Prediction::add_predicted_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Prediction::mutable_predicted_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Prediction.predicted_trajectory)
  return &predicted_trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Prediction::predicted_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Decision_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Decision_Type_descriptor_;
}
bool Decision_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Decision_Type Decision::IGNORE;
const Decision_Type Decision::STOP;
const Decision_Type Decision::NUDGE;
const Decision_Type Decision::YIELD;
const Decision_Type Decision::OVERTAKE;
const Decision_Type Decision::FOLLOW;
const Decision_Type Decision::SIDEPASS;
const Decision_Type Decision::Type_MIN;
const Decision_Type Decision::Type_MAX;
const int Decision::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Decision_StopReasonCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Decision_StopReasonCode_descriptor_;
}
bool Decision_StopReasonCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Decision_StopReasonCode Decision::STOP_REASON_HEAD_VEHICLE;
const Decision_StopReasonCode Decision::STOP_REASON_DESTINATION;
const Decision_StopReasonCode Decision::STOP_REASON_PEDESTRIAN;
const Decision_StopReasonCode Decision::STOP_REASON_OBSTACLE;
const Decision_StopReasonCode Decision::STOP_REASON_SIGNAL;
const Decision_StopReasonCode Decision::STOP_REASON_STOP_SIGN;
const Decision_StopReasonCode Decision::STOP_REASON_YIELD_SIGN;
const Decision_StopReasonCode Decision::STOP_REASON_CLEAR_ZONE;
const Decision_StopReasonCode Decision::STOP_REASON_CROSSWALK;
const Decision_StopReasonCode Decision::STOP_REASON_EMERGENCY;
const Decision_StopReasonCode Decision::STOP_REASON_NOT_READY;
const Decision_StopReasonCode Decision::STOP_REASON_PULL_OVER;
const Decision_StopReasonCode Decision::StopReasonCode_MIN;
const Decision_StopReasonCode Decision::StopReasonCode_MAX;
const int Decision::StopReasonCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Decision::kTypeFieldNumber;
const int Decision::kPolygonPointFieldNumber;
const int Decision::kHeadingFieldNumber;
const int Decision::kLatitudeFieldNumber;
const int Decision::kLongitudeFieldNumber;
const int Decision::kPositionXFieldNumber;
const int Decision::kPositionYFieldNumber;
const int Decision::kLengthFieldNumber;
const int Decision::kWidthFieldNumber;
const int Decision::kHeightFieldNumber;
const int Decision::kStopReasonFieldNumber;
const int Decision::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Decision::Decision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Decision)
}

void Decision::InitAsDefaultInstance() {
}

Decision::Decision(const Decision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Decision)
}

void Decision::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  heading_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  length_ = 2.8;
  width_ = 1.4;
  height_ = 1.8;
  stopreason_ = 1;
  change_lane_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Decision::~Decision() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Decision)
  SharedDtor();
}

void Decision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Decision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Decision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Decision_descriptor_;
}

const Decision& Decision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

Decision* Decision::default_instance_ = NULL;

Decision* Decision::New(::google::protobuf::Arena* arena) const {
  Decision* n = new Decision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Decision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Decision)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Decision, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Decision*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(heading_, type_);
    position_y_ = 0;
    length_ = 2.8;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    width_ = 1.4;
    height_ = 1.8;
    stopreason_ = 1;
    change_lane_type_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  polygon_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Decision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Decision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Decision_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::dreamview::Decision_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_polygon_point;
        break;
      }

      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2: {
        if (tag == 18) {
         parse_polygon_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygon_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_polygon_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (tag == 25) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }

      // optional double latitude = 4;
      case 4: {
        if (tag == 33) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_longitude;
        break;
      }

      // optional double longitude = 5;
      case 5: {
        if (tag == 41) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_position_x;
        break;
      }

      // optional double position_x = 6;
      case 6: {
        if (tag == 49) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_position_y;
        break;
      }

      // optional double position_y = 7;
      case 7: {
        if (tag == 57) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_length;
        break;
      }

      // optional double length = 8 [default = 2.8];
      case 8: {
        if (tag == 65) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_width;
        break;
      }

      // optional double width = 9 [default = 1.4];
      case 9: {
        if (tag == 73) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_height;
        break;
      }

      // optional double height = 10 [default = 1.8];
      case 10: {
        if (tag == 81) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_stopReason;
        break;
      }

      // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
      case 11: {
        if (tag == 88) {
         parse_stopReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Decision_StopReasonCode_IsValid(value)) {
            set_stopreason(static_cast< ::apollo::dreamview::Decision_StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_change_lane_type;
        break;
      }

      // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
      case 12: {
        if (tag == 96) {
         parse_change_lane_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::apollo::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Decision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Decision)
  return false;
#undef DO_
}

void Decision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Decision)
  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->polygon_point(i), output);
  }

  // optional double heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // optional double longitude = 5;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // optional double position_x = 6;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_x(), output);
  }

  // optional double position_y = 7;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_y(), output);
  }

  // optional double length = 8 [default = 2.8];
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->length(), output);
  }

  // optional double width = 9 [default = 1.4];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->width(), output);
  }

  // optional double height = 10 [default = 1.8];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->height(), output);
  }

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  if (has_stopreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->stopreason(), output);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
  if (has_change_lane_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Decision)
}

::google::protobuf::uint8* Decision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Decision)
  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->polygon_point(i), false, target);
  }

  // optional double heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // optional double longitude = 5;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // optional double position_x = 6;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_x(), target);
  }

  // optional double position_y = 7;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_y(), target);
  }

  // optional double length = 8 [default = 2.8];
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->height(), target);
  }

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  if (has_stopreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->stopreason(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
  if (has_change_lane_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Decision)
  return target;
}

int Decision::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Decision)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 253u) {
    // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double position_x = 6;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional double position_y = 7;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional double length = 8 [default = 2.8];
    if (has_length()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double width = 9 [default = 1.4];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
    if (has_stopreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stopreason());
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
    if (has_change_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
    }

  }
  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  total_size += 1 * this->polygon_point_size();
  for (int i = 0; i < this->polygon_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Decision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Decision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Decision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Decision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Decision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Decision)
    MergeFrom(*source);
  }
}

void Decision::MergeFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Decision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygon_point_.MergeFrom(from.polygon_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_stopreason()) {
      set_stopreason(from.stopreason());
    }
    if (from.has_change_lane_type()) {
      set_change_lane_type(from.change_lane_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Decision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decision::CopyFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decision::IsInitialized() const {

  return true;
}

void Decision::Swap(Decision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Decision::InternalSwap(Decision* other) {
  std::swap(type_, other->type_);
  polygon_point_.UnsafeArenaSwap(&other->polygon_point_);
  std::swap(heading_, other->heading_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(stopreason_, other->stopreason_);
  std::swap(change_lane_type_, other->change_lane_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Decision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Decision_descriptor_;
  metadata.reflection = Decision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Decision

// optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
bool Decision::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Decision::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Decision::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Decision::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::dreamview::Decision_Type Decision::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.type)
  return static_cast< ::apollo::dreamview::Decision_Type >(type_);
}
 void Decision::set_type(::apollo::dreamview::Decision_Type value) {
  assert(::apollo::dreamview::Decision_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.type)
}

// repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
int Decision::polygon_point_size() const {
  return polygon_point_.size();
}
void Decision::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::apollo::dreamview::PolygonPoint& Decision::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.polygon_point)
  return polygon_point_.Get(index);
}
::apollo::dreamview::PolygonPoint* Decision::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Decision.polygon_point)
  return polygon_point_.Mutable(index);
}
::apollo::dreamview::PolygonPoint* Decision::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Decision.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Decision::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Decision.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Decision::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Decision.polygon_point)
  return polygon_point_;
}

// optional double heading = 3;
bool Decision::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Decision::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void Decision::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void Decision::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double Decision::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.heading)
  return heading_;
}
 void Decision::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.heading)
}

// optional double latitude = 4;
bool Decision::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Decision::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void Decision::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void Decision::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double Decision::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.latitude)
  return latitude_;
}
 void Decision::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.latitude)
}

// optional double longitude = 5;
bool Decision::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Decision::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void Decision::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void Decision::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double Decision::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.longitude)
  return longitude_;
}
 void Decision::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.longitude)
}

// optional double position_x = 6;
bool Decision::has_position_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Decision::set_has_position_x() {
  _has_bits_[0] |= 0x00000020u;
}
void Decision::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void Decision::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
 double Decision::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.position_x)
  return position_x_;
}
 void Decision::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.position_x)
}

// optional double position_y = 7;
bool Decision::has_position_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Decision::set_has_position_y() {
  _has_bits_[0] |= 0x00000040u;
}
void Decision::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void Decision::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
 double Decision::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.position_y)
  return position_y_;
}
 void Decision::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.position_y)
}

// optional double length = 8 [default = 2.8];
bool Decision::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Decision::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
void Decision::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
void Decision::clear_length() {
  length_ = 2.8;
  clear_has_length();
}
 double Decision::length() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.length)
  return length_;
}
 void Decision::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.length)
}

// optional double width = 9 [default = 1.4];
bool Decision::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Decision::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void Decision::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void Decision::clear_width() {
  width_ = 1.4;
  clear_has_width();
}
 double Decision::width() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.width)
  return width_;
}
 void Decision::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.width)
}

// optional double height = 10 [default = 1.8];
bool Decision::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Decision::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
void Decision::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void Decision::clear_height() {
  height_ = 1.8;
  clear_has_height();
}
 double Decision::height() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.height)
  return height_;
}
 void Decision::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.height)
}

// optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
bool Decision::has_stopreason() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Decision::set_has_stopreason() {
  _has_bits_[0] |= 0x00000400u;
}
void Decision::clear_has_stopreason() {
  _has_bits_[0] &= ~0x00000400u;
}
void Decision::clear_stopreason() {
  stopreason_ = 1;
  clear_has_stopreason();
}
 ::apollo::dreamview::Decision_StopReasonCode Decision::stopreason() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.stopReason)
  return static_cast< ::apollo::dreamview::Decision_StopReasonCode >(stopreason_);
}
 void Decision::set_stopreason(::apollo::dreamview::Decision_StopReasonCode value) {
  assert(::apollo::dreamview::Decision_StopReasonCode_IsValid(value));
  set_has_stopreason();
  stopreason_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.stopReason)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 12;
bool Decision::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Decision::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000800u;
}
void Decision::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void Decision::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
 ::apollo::routing::ChangeLaneType Decision::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.change_lane_type)
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
 void Decision::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.change_lane_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Object_DisengageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_DisengageType_descriptor_;
}
bool Object_DisengageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_DisengageType Object::DISENGAGE_NONE;
const Object_DisengageType Object::DISENGAGE_UNKNOWN;
const Object_DisengageType Object::DISENGAGE_MANUAL;
const Object_DisengageType Object::DISENGAGE_EMERGENCY;
const Object_DisengageType Object::DISENGAGE_AUTO_STEER_ONLY;
const Object_DisengageType Object::DISENGAGE_AUTO_SPEED_ONLY;
const Object_DisengageType Object::DISENGAGE_CHASSIS_ERROR;
const Object_DisengageType Object::DisengageType_MIN;
const Object_DisengageType Object::DisengageType_MAX;
const int Object::DisengageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_Type_descriptor_;
}
bool Object_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_Type Object::UNKNOWN;
const Object_Type Object::UNKNOWN_MOVABLE;
const Object_Type Object::UNKNOWN_UNMOVABLE;
const Object_Type Object::PEDESTRIAN;
const Object_Type Object::BICYCLE;
const Object_Type Object::VEHICLE;
const Object_Type Object::VIRTUAL;
const Object_Type Object::CIPV;
const Object_Type Object::Type_MIN;
const Object_Type Object::Type_MAX;
const int Object::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kIdFieldNumber;
const int Object::kPolygonPointFieldNumber;
const int Object::kHeadingFieldNumber;
const int Object::kLatitudeFieldNumber;
const int Object::kLongitudeFieldNumber;
const int Object::kPositionXFieldNumber;
const int Object::kPositionYFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kWidthFieldNumber;
const int Object::kHeightFieldNumber;
const int Object::kSpeedFieldNumber;
const int Object::kSpeedAccelerationFieldNumber;
const int Object::kSpeedJerkFieldNumber;
const int Object::kSpinFieldNumber;
const int Object::kSpinAccelerationFieldNumber;
const int Object::kSpinJerkFieldNumber;
const int Object::kSpeedHeadingFieldNumber;
const int Object::kKappaFieldNumber;
const int Object::kSignalSetFieldNumber;
const int Object::kCurrentSignalFieldNumber;
const int Object::kTimestampSecFieldNumber;
const int Object::kDecisionFieldNumber;
const int Object::kYieldedObstacleFieldNumber;
const int Object::kThrottlePercentageFieldNumber;
const int Object::kBrakePercentageFieldNumber;
const int Object::kSteeringPercentageFieldNumber;
const int Object::kSteeringAngleFieldNumber;
const int Object::kSteeringRatioFieldNumber;
const int Object::kDisengageTypeFieldNumber;
const int Object::kTypeFieldNumber;
const int Object::kPredictionFieldNumber;
const int Object::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Object)
}

void Object::InitAsDefaultInstance() {
}

Object::Object(const Object& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Object)
}

void Object::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heading_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  length_ = 2.8;
  width_ = 1.4;
  height_ = 1.8;
  speed_ = 0;
  speed_acceleration_ = 0;
  speed_jerk_ = 0;
  spin_ = 0;
  spin_acceleration_ = 0;
  spin_jerk_ = 0;
  speed_heading_ = 0;
  kappa_ = 0;
  current_signal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_sec_ = 0;
  yielded_obstacle_ = false;
  throttle_percentage_ = 0;
  brake_percentage_ = 0;
  steering_percentage_ = 0;
  steering_angle_ = 0;
  steering_ratio_ = 0;
  disengage_type_ = 0;
  type_ = 0;
  confidence_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_signal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Object)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Object, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Object*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(heading_, position_y_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    length_ = 2.8;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(speed_, spin_jerk_);
    width_ = 1.4;
    height_ = 1.8;
  }
  if (_has_bits_[16 / 32] & 14352384u) {
    ZR_(speed_heading_, kappa_);
    if (has_current_signal()) {
      current_signal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    timestamp_sec_ = 0;
    yielded_obstacle_ = false;
    throttle_percentage_ = 0;
  }
  if (_has_bits_[24 / 32] & 3204448256u) {
    ZR_(brake_percentage_, steering_percentage_);
    ZR_(disengage_type_, steering_ratio_);
    type_ = 0;
    confidence_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  polygon_point_.Clear();
  signal_set_.Clear();
  decision_.Clear();
  prediction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Object.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_polygon_point;
        break;
      }

      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2: {
        if (tag == 18) {
         parse_polygon_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygon_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_polygon_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (tag == 25) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }

      // optional double latitude = 4;
      case 4: {
        if (tag == 33) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_longitude;
        break;
      }

      // optional double longitude = 5;
      case 5: {
        if (tag == 41) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_position_x;
        break;
      }

      // optional double position_x = 6;
      case 6: {
        if (tag == 49) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_position_y;
        break;
      }

      // optional double position_y = 7;
      case 7: {
        if (tag == 57) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_length;
        break;
      }

      // optional double length = 8 [default = 2.8];
      case 8: {
        if (tag == 65) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_width;
        break;
      }

      // optional double width = 9 [default = 1.4];
      case 9: {
        if (tag == 73) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_height;
        break;
      }

      // optional double height = 10 [default = 1.8];
      case 10: {
        if (tag == 81) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_speed;
        break;
      }

      // optional double speed = 11;
      case 11: {
        if (tag == 89) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_speed_acceleration;
        break;
      }

      // optional double speed_acceleration = 12;
      case 12: {
        if (tag == 97) {
         parse_speed_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_acceleration_)));
          set_has_speed_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_speed_jerk;
        break;
      }

      // optional double speed_jerk = 13;
      case 13: {
        if (tag == 105) {
         parse_speed_jerk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_jerk_)));
          set_has_speed_jerk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_spin;
        break;
      }

      // optional double spin = 14;
      case 14: {
        if (tag == 113) {
         parse_spin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spin_)));
          set_has_spin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_spin_acceleration;
        break;
      }

      // optional double spin_acceleration = 15;
      case 15: {
        if (tag == 121) {
         parse_spin_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spin_acceleration_)));
          set_has_spin_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_spin_jerk;
        break;
      }

      // optional double spin_jerk = 16;
      case 16: {
        if (tag == 129) {
         parse_spin_jerk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spin_jerk_)));
          set_has_spin_jerk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_speed_heading;
        break;
      }

      // optional double speed_heading = 17;
      case 17: {
        if (tag == 137) {
         parse_speed_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_heading_)));
          set_has_speed_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_kappa;
        break;
      }

      // optional double kappa = 18;
      case 18: {
        if (tag == 145) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
          set_has_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_signal_set;
        break;
      }

      // repeated string signal_set = 19;
      case 19: {
        if (tag == 154) {
         parse_signal_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signal_set()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signal_set(this->signal_set_size() - 1).data(),
            this->signal_set(this->signal_set_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Object.signal_set");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_signal_set;
        if (input->ExpectTag(162)) goto parse_current_signal;
        break;
      }

      // optional string current_signal = 20;
      case 20: {
        if (tag == 162) {
         parse_current_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_signal().data(), this->current_signal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Object.current_signal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_timestamp_sec;
        break;
      }

      // optional double timestamp_sec = 21;
      case 21: {
        if (tag == 169) {
         parse_timestamp_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
          set_has_timestamp_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_decision;
        break;
      }

      // repeated .apollo.dreamview.Decision decision = 22;
      case 22: {
        if (tag == 178) {
         parse_decision:
          DO_(input->IncrementRecursionDepth());
         parse_loop_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_decision;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(185)) goto parse_throttle_percentage;
        break;
      }

      // optional double throttle_percentage = 23;
      case 23: {
        if (tag == 185) {
         parse_throttle_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_percentage_)));
          set_has_throttle_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_brake_percentage;
        break;
      }

      // optional double brake_percentage = 24;
      case 24: {
        if (tag == 193) {
         parse_brake_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_percentage_)));
          set_has_brake_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_steering_percentage;
        break;
      }

      // optional double steering_percentage = 25;
      case 25: {
        if (tag == 201) {
         parse_steering_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_percentage_)));
          set_has_steering_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_steering_angle;
        break;
      }

      // optional double steering_angle = 26;
      case 26: {
        if (tag == 209) {
         parse_steering_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
          set_has_steering_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_steering_ratio;
        break;
      }

      // optional double steering_ratio = 27;
      case 27: {
        if (tag == 217) {
         parse_steering_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_ratio_)));
          set_has_steering_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_disengage_type;
        break;
      }

      // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
      case 28: {
        if (tag == 224) {
         parse_disengage_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Object_DisengageType_IsValid(value)) {
            set_disengage_type(static_cast< ::apollo::dreamview::Object_DisengageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_type;
        break;
      }

      // optional .apollo.dreamview.Object.Type type = 29;
      case 29: {
        if (tag == 232) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Object_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::dreamview::Object_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_prediction;
        break;
      }

      // repeated .apollo.dreamview.Prediction prediction = 30;
      case 30: {
        if (tag == 242) {
         parse_prediction:
          DO_(input->IncrementRecursionDepth());
         parse_loop_prediction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prediction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_prediction;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(249)) goto parse_confidence;
        break;
      }

      // optional double confidence = 31 [default = 1];
      case 31: {
        if (tag == 249) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_yielded_obstacle;
        break;
      }

      // optional bool yielded_obstacle = 32 [default = false];
      case 32: {
        if (tag == 256) {
         parse_yielded_obstacle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yielded_obstacle_)));
          set_has_yielded_obstacle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Object)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->polygon_point(i), output);
  }

  // optional double heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // optional double longitude = 5;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // optional double position_x = 6;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_x(), output);
  }

  // optional double position_y = 7;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_y(), output);
  }

  // optional double length = 8 [default = 2.8];
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->length(), output);
  }

  // optional double width = 9 [default = 1.4];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->width(), output);
  }

  // optional double height = 10 [default = 1.8];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->height(), output);
  }

  // optional double speed = 11;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->speed(), output);
  }

  // optional double speed_acceleration = 12;
  if (has_speed_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->speed_acceleration(), output);
  }

  // optional double speed_jerk = 13;
  if (has_speed_jerk()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->speed_jerk(), output);
  }

  // optional double spin = 14;
  if (has_spin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->spin(), output);
  }

  // optional double spin_acceleration = 15;
  if (has_spin_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->spin_acceleration(), output);
  }

  // optional double spin_jerk = 16;
  if (has_spin_jerk()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->spin_jerk(), output);
  }

  // optional double speed_heading = 17;
  if (has_speed_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->speed_heading(), output);
  }

  // optional double kappa = 18;
  if (has_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->kappa(), output);
  }

  // repeated string signal_set = 19;
  for (int i = 0; i < this->signal_set_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal_set(i).data(), this->signal_set(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.signal_set");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->signal_set(i), output);
  }

  // optional string current_signal = 20;
  if (has_current_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_signal().data(), this->current_signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.current_signal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->current_signal(), output);
  }

  // optional double timestamp_sec = 21;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->timestamp_sec(), output);
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->decision(i), output);
  }

  // optional double throttle_percentage = 23;
  if (has_throttle_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->throttle_percentage(), output);
  }

  // optional double brake_percentage = 24;
  if (has_brake_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->brake_percentage(), output);
  }

  // optional double steering_percentage = 25;
  if (has_steering_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->steering_percentage(), output);
  }

  // optional double steering_angle = 26;
  if (has_steering_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->steering_angle(), output);
  }

  // optional double steering_ratio = 27;
  if (has_steering_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->steering_ratio(), output);
  }

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
  if (has_disengage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->disengage_type(), output);
  }

  // optional .apollo.dreamview.Object.Type type = 29;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->type(), output);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  for (unsigned int i = 0, n = this->prediction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->prediction(i), output);
  }

  // optional double confidence = 31 [default = 1];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->confidence(), output);
  }

  // optional bool yielded_obstacle = 32 [default = false];
  if (has_yielded_obstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->yielded_obstacle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Object)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->polygon_point(i), false, target);
  }

  // optional double heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // optional double longitude = 5;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // optional double position_x = 6;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_x(), target);
  }

  // optional double position_y = 7;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_y(), target);
  }

  // optional double length = 8 [default = 2.8];
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->height(), target);
  }

  // optional double speed = 11;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->speed(), target);
  }

  // optional double speed_acceleration = 12;
  if (has_speed_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->speed_acceleration(), target);
  }

  // optional double speed_jerk = 13;
  if (has_speed_jerk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->speed_jerk(), target);
  }

  // optional double spin = 14;
  if (has_spin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->spin(), target);
  }

  // optional double spin_acceleration = 15;
  if (has_spin_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->spin_acceleration(), target);
  }

  // optional double spin_jerk = 16;
  if (has_spin_jerk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->spin_jerk(), target);
  }

  // optional double speed_heading = 17;
  if (has_speed_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->speed_heading(), target);
  }

  // optional double kappa = 18;
  if (has_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->kappa(), target);
  }

  // repeated string signal_set = 19;
  for (int i = 0; i < this->signal_set_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal_set(i).data(), this->signal_set(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.signal_set");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->signal_set(i), target);
  }

  // optional string current_signal = 20;
  if (has_current_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_signal().data(), this->current_signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.current_signal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->current_signal(), target);
  }

  // optional double timestamp_sec = 21;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->timestamp_sec(), target);
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->decision(i), false, target);
  }

  // optional double throttle_percentage = 23;
  if (has_throttle_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->throttle_percentage(), target);
  }

  // optional double brake_percentage = 24;
  if (has_brake_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->brake_percentage(), target);
  }

  // optional double steering_percentage = 25;
  if (has_steering_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->steering_percentage(), target);
  }

  // optional double steering_angle = 26;
  if (has_steering_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->steering_angle(), target);
  }

  // optional double steering_ratio = 27;
  if (has_steering_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->steering_ratio(), target);
  }

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
  if (has_disengage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->disengage_type(), target);
  }

  // optional .apollo.dreamview.Object.Type type = 29;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->type(), target);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  for (unsigned int i = 0, n = this->prediction_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, this->prediction(i), false, target);
  }

  // optional double confidence = 31 [default = 1];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->confidence(), target);
  }

  // optional bool yielded_obstacle = 32 [default = false];
  if (has_yielded_obstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->yielded_obstacle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Object)
  return target;
}

int Object::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Object)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 253u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double position_x = 6;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional double position_y = 7;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional double length = 8 [default = 2.8];
    if (has_length()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double width = 9 [default = 1.4];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double speed = 11;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double speed_acceleration = 12;
    if (has_speed_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double speed_jerk = 13;
    if (has_speed_jerk()) {
      total_size += 1 + 8;
    }

    // optional double spin = 14;
    if (has_spin()) {
      total_size += 1 + 8;
    }

    // optional double spin_acceleration = 15;
    if (has_spin_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double spin_jerk = 16;
    if (has_spin_jerk()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 14352384u) {
    // optional double speed_heading = 17;
    if (has_speed_heading()) {
      total_size += 2 + 8;
    }

    // optional double kappa = 18;
    if (has_kappa()) {
      total_size += 2 + 8;
    }

    // optional string current_signal = 20;
    if (has_current_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_signal());
    }

    // optional double timestamp_sec = 21;
    if (has_timestamp_sec()) {
      total_size += 2 + 8;
    }

    // optional bool yielded_obstacle = 32 [default = false];
    if (has_yielded_obstacle()) {
      total_size += 2 + 1;
    }

    // optional double throttle_percentage = 23;
    if (has_throttle_percentage()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 3204448256u) {
    // optional double brake_percentage = 24;
    if (has_brake_percentage()) {
      total_size += 2 + 8;
    }

    // optional double steering_percentage = 25;
    if (has_steering_percentage()) {
      total_size += 2 + 8;
    }

    // optional double steering_angle = 26;
    if (has_steering_angle()) {
      total_size += 2 + 8;
    }

    // optional double steering_ratio = 27;
    if (has_steering_ratio()) {
      total_size += 2 + 8;
    }

    // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
    if (has_disengage_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disengage_type());
    }

    // optional .apollo.dreamview.Object.Type type = 29;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double confidence = 31 [default = 1];
    if (has_confidence()) {
      total_size += 2 + 8;
    }

  }
  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  total_size += 1 * this->polygon_point_size();
  for (int i = 0; i < this->polygon_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon_point(i));
  }

  // repeated string signal_set = 19;
  total_size += 2 * this->signal_set_size();
  for (int i = 0; i < this->signal_set_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signal_set(i));
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  total_size += 2 * this->decision_size();
  for (int i = 0; i < this->decision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decision(i));
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  total_size += 2 * this->prediction_size();
  for (int i = 0; i < this->prediction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prediction(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Object)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Object* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Object)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygon_point_.MergeFrom(from.polygon_point_);
  signal_set_.MergeFrom(from.signal_set_);
  decision_.MergeFrom(from.decision_);
  prediction_.MergeFrom(from.prediction_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_speed_acceleration()) {
      set_speed_acceleration(from.speed_acceleration());
    }
    if (from.has_speed_jerk()) {
      set_speed_jerk(from.speed_jerk());
    }
    if (from.has_spin()) {
      set_spin(from.spin());
    }
    if (from.has_spin_acceleration()) {
      set_spin_acceleration(from.spin_acceleration());
    }
    if (from.has_spin_jerk()) {
      set_spin_jerk(from.spin_jerk());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_speed_heading()) {
      set_speed_heading(from.speed_heading());
    }
    if (from.has_kappa()) {
      set_kappa(from.kappa());
    }
    if (from.has_current_signal()) {
      set_has_current_signal();
      current_signal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_signal_);
    }
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
    if (from.has_yielded_obstacle()) {
      set_yielded_obstacle(from.yielded_obstacle());
    }
    if (from.has_throttle_percentage()) {
      set_throttle_percentage(from.throttle_percentage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_brake_percentage()) {
      set_brake_percentage(from.brake_percentage());
    }
    if (from.has_steering_percentage()) {
      set_steering_percentage(from.steering_percentage());
    }
    if (from.has_steering_angle()) {
      set_steering_angle(from.steering_angle());
    }
    if (from.has_steering_ratio()) {
      set_steering_ratio(from.steering_ratio());
    }
    if (from.has_disengage_type()) {
      set_disengage_type(from.disengage_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  id_.Swap(&other->id_);
  polygon_point_.UnsafeArenaSwap(&other->polygon_point_);
  std::swap(heading_, other->heading_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(speed_, other->speed_);
  std::swap(speed_acceleration_, other->speed_acceleration_);
  std::swap(speed_jerk_, other->speed_jerk_);
  std::swap(spin_, other->spin_);
  std::swap(spin_acceleration_, other->spin_acceleration_);
  std::swap(spin_jerk_, other->spin_jerk_);
  std::swap(speed_heading_, other->speed_heading_);
  std::swap(kappa_, other->kappa_);
  signal_set_.UnsafeArenaSwap(&other->signal_set_);
  current_signal_.Swap(&other->current_signal_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  decision_.UnsafeArenaSwap(&other->decision_);
  std::swap(yielded_obstacle_, other->yielded_obstacle_);
  std::swap(throttle_percentage_, other->throttle_percentage_);
  std::swap(brake_percentage_, other->brake_percentage_);
  std::swap(steering_percentage_, other->steering_percentage_);
  std::swap(steering_angle_, other->steering_angle_);
  std::swap(steering_ratio_, other->steering_ratio_);
  std::swap(disengage_type_, other->disengage_type_);
  std::swap(type_, other->type_);
  prediction_.UnsafeArenaSwap(&other->prediction_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// optional string id = 1;
bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Object::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Object::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Object::id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.id)
}
 void Object::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.id)
}
 void Object::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.id)
}
 ::std::string* Object::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_id() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.id)
}

// repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
int Object::polygon_point_size() const {
  return polygon_point_.size();
}
void Object::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::apollo::dreamview::PolygonPoint& Object::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.polygon_point)
  return polygon_point_.Get(index);
}
::apollo::dreamview::PolygonPoint* Object::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.polygon_point)
  return polygon_point_.Mutable(index);
}
::apollo::dreamview::PolygonPoint* Object::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Object::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Object::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.polygon_point)
  return polygon_point_;
}

// optional double heading = 3;
bool Object::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Object::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void Object::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void Object::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double Object::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.heading)
  return heading_;
}
 void Object::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.heading)
}

// optional double latitude = 4;
bool Object::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Object::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void Object::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void Object::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double Object::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.latitude)
  return latitude_;
}
 void Object::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.latitude)
}

// optional double longitude = 5;
bool Object::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Object::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void Object::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void Object::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double Object::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.longitude)
  return longitude_;
}
 void Object::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.longitude)
}

// optional double position_x = 6;
bool Object::has_position_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Object::set_has_position_x() {
  _has_bits_[0] |= 0x00000020u;
}
void Object::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void Object::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
 double Object::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.position_x)
  return position_x_;
}
 void Object::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.position_x)
}

// optional double position_y = 7;
bool Object::has_position_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Object::set_has_position_y() {
  _has_bits_[0] |= 0x00000040u;
}
void Object::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void Object::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
 double Object::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.position_y)
  return position_y_;
}
 void Object::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.position_y)
}

// optional double length = 8 [default = 2.8];
bool Object::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Object::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
void Object::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
void Object::clear_length() {
  length_ = 2.8;
  clear_has_length();
}
 double Object::length() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.length)
  return length_;
}
 void Object::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.length)
}

// optional double width = 9 [default = 1.4];
bool Object::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Object::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void Object::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void Object::clear_width() {
  width_ = 1.4;
  clear_has_width();
}
 double Object::width() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.width)
  return width_;
}
 void Object::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.width)
}

// optional double height = 10 [default = 1.8];
bool Object::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Object::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
void Object::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void Object::clear_height() {
  height_ = 1.8;
  clear_has_height();
}
 double Object::height() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.height)
  return height_;
}
 void Object::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.height)
}

// optional double speed = 11;
bool Object::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Object::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
void Object::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
void Object::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 double Object::speed() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed)
  return speed_;
}
 void Object::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed)
}

// optional double speed_acceleration = 12;
bool Object::has_speed_acceleration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Object::set_has_speed_acceleration() {
  _has_bits_[0] |= 0x00000800u;
}
void Object::clear_has_speed_acceleration() {
  _has_bits_[0] &= ~0x00000800u;
}
void Object::clear_speed_acceleration() {
  speed_acceleration_ = 0;
  clear_has_speed_acceleration();
}
 double Object::speed_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_acceleration)
  return speed_acceleration_;
}
 void Object::set_speed_acceleration(double value) {
  set_has_speed_acceleration();
  speed_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_acceleration)
}

// optional double speed_jerk = 13;
bool Object::has_speed_jerk() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Object::set_has_speed_jerk() {
  _has_bits_[0] |= 0x00001000u;
}
void Object::clear_has_speed_jerk() {
  _has_bits_[0] &= ~0x00001000u;
}
void Object::clear_speed_jerk() {
  speed_jerk_ = 0;
  clear_has_speed_jerk();
}
 double Object::speed_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_jerk)
  return speed_jerk_;
}
 void Object::set_speed_jerk(double value) {
  set_has_speed_jerk();
  speed_jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_jerk)
}

// optional double spin = 14;
bool Object::has_spin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Object::set_has_spin() {
  _has_bits_[0] |= 0x00002000u;
}
void Object::clear_has_spin() {
  _has_bits_[0] &= ~0x00002000u;
}
void Object::clear_spin() {
  spin_ = 0;
  clear_has_spin();
}
 double Object::spin() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin)
  return spin_;
}
 void Object::set_spin(double value) {
  set_has_spin();
  spin_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin)
}

// optional double spin_acceleration = 15;
bool Object::has_spin_acceleration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Object::set_has_spin_acceleration() {
  _has_bits_[0] |= 0x00004000u;
}
void Object::clear_has_spin_acceleration() {
  _has_bits_[0] &= ~0x00004000u;
}
void Object::clear_spin_acceleration() {
  spin_acceleration_ = 0;
  clear_has_spin_acceleration();
}
 double Object::spin_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin_acceleration)
  return spin_acceleration_;
}
 void Object::set_spin_acceleration(double value) {
  set_has_spin_acceleration();
  spin_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin_acceleration)
}

// optional double spin_jerk = 16;
bool Object::has_spin_jerk() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Object::set_has_spin_jerk() {
  _has_bits_[0] |= 0x00008000u;
}
void Object::clear_has_spin_jerk() {
  _has_bits_[0] &= ~0x00008000u;
}
void Object::clear_spin_jerk() {
  spin_jerk_ = 0;
  clear_has_spin_jerk();
}
 double Object::spin_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin_jerk)
  return spin_jerk_;
}
 void Object::set_spin_jerk(double value) {
  set_has_spin_jerk();
  spin_jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin_jerk)
}

// optional double speed_heading = 17;
bool Object::has_speed_heading() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Object::set_has_speed_heading() {
  _has_bits_[0] |= 0x00010000u;
}
void Object::clear_has_speed_heading() {
  _has_bits_[0] &= ~0x00010000u;
}
void Object::clear_speed_heading() {
  speed_heading_ = 0;
  clear_has_speed_heading();
}
 double Object::speed_heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_heading)
  return speed_heading_;
}
 void Object::set_speed_heading(double value) {
  set_has_speed_heading();
  speed_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_heading)
}

// optional double kappa = 18;
bool Object::has_kappa() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Object::set_has_kappa() {
  _has_bits_[0] |= 0x00020000u;
}
void Object::clear_has_kappa() {
  _has_bits_[0] &= ~0x00020000u;
}
void Object::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
 double Object::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.kappa)
  return kappa_;
}
 void Object::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.kappa)
}

// repeated string signal_set = 19;
int Object::signal_set_size() const {
  return signal_set_.size();
}
void Object::clear_signal_set() {
  signal_set_.Clear();
}
 const ::std::string& Object::signal_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.signal_set)
  return signal_set_.Get(index);
}
 ::std::string* Object::mutable_signal_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.signal_set)
  return signal_set_.Mutable(index);
}
 void Object::set_signal_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.signal_set)
  signal_set_.Mutable(index)->assign(value);
}
 void Object::set_signal_set(int index, const char* value) {
  signal_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.signal_set)
}
 void Object::set_signal_set(int index, const char* value, size_t size) {
  signal_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.signal_set)
}
 ::std::string* Object::add_signal_set() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Object.signal_set)
  return signal_set_.Add();
}
 void Object::add_signal_set(const ::std::string& value) {
  signal_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.signal_set)
}
 void Object::add_signal_set(const char* value) {
  signal_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Object.signal_set)
}
 void Object::add_signal_set(const char* value, size_t size) {
  signal_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Object.signal_set)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Object::signal_set() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.signal_set)
  return signal_set_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Object::mutable_signal_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.signal_set)
  return &signal_set_;
}

// optional string current_signal = 20;
bool Object::has_current_signal() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Object::set_has_current_signal() {
  _has_bits_[0] |= 0x00080000u;
}
void Object::clear_has_current_signal() {
  _has_bits_[0] &= ~0x00080000u;
}
void Object::clear_current_signal() {
  current_signal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_signal();
}
 const ::std::string& Object::current_signal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.current_signal)
  return current_signal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_current_signal(const ::std::string& value) {
  set_has_current_signal();
  current_signal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.current_signal)
}
 void Object::set_current_signal(const char* value) {
  set_has_current_signal();
  current_signal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.current_signal)
}
 void Object::set_current_signal(const char* value, size_t size) {
  set_has_current_signal();
  current_signal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.current_signal)
}
 ::std::string* Object::mutable_current_signal() {
  set_has_current_signal();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.current_signal)
  return current_signal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_current_signal() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.current_signal)
  clear_has_current_signal();
  return current_signal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_current_signal(::std::string* current_signal) {
  if (current_signal != NULL) {
    set_has_current_signal();
  } else {
    clear_has_current_signal();
  }
  current_signal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_signal);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.current_signal)
}

// optional double timestamp_sec = 21;
bool Object::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Object::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00100000u;
}
void Object::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00100000u;
}
void Object::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
 double Object::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.timestamp_sec)
  return timestamp_sec_;
}
 void Object::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.timestamp_sec)
}

// repeated .apollo.dreamview.Decision decision = 22;
int Object::decision_size() const {
  return decision_.size();
}
void Object::clear_decision() {
  decision_.Clear();
}
const ::apollo::dreamview::Decision& Object::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.decision)
  return decision_.Get(index);
}
::apollo::dreamview::Decision* Object::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.decision)
  return decision_.Mutable(index);
}
::apollo::dreamview::Decision* Object::add_decision() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.decision)
  return decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Decision >*
Object::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.decision)
  return &decision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Decision >&
Object::decision() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.decision)
  return decision_;
}

// optional bool yielded_obstacle = 32 [default = false];
bool Object::has_yielded_obstacle() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Object::set_has_yielded_obstacle() {
  _has_bits_[0] |= 0x00400000u;
}
void Object::clear_has_yielded_obstacle() {
  _has_bits_[0] &= ~0x00400000u;
}
void Object::clear_yielded_obstacle() {
  yielded_obstacle_ = false;
  clear_has_yielded_obstacle();
}
 bool Object::yielded_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.yielded_obstacle)
  return yielded_obstacle_;
}
 void Object::set_yielded_obstacle(bool value) {
  set_has_yielded_obstacle();
  yielded_obstacle_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.yielded_obstacle)
}

// optional double throttle_percentage = 23;
bool Object::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Object::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00800000u;
}
void Object::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00800000u;
}
void Object::clear_throttle_percentage() {
  throttle_percentage_ = 0;
  clear_has_throttle_percentage();
}
 double Object::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.throttle_percentage)
  return throttle_percentage_;
}
 void Object::set_throttle_percentage(double value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.throttle_percentage)
}

// optional double brake_percentage = 24;
bool Object::has_brake_percentage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Object::set_has_brake_percentage() {
  _has_bits_[0] |= 0x01000000u;
}
void Object::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x01000000u;
}
void Object::clear_brake_percentage() {
  brake_percentage_ = 0;
  clear_has_brake_percentage();
}
 double Object::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.brake_percentage)
  return brake_percentage_;
}
 void Object::set_brake_percentage(double value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.brake_percentage)
}

// optional double steering_percentage = 25;
bool Object::has_steering_percentage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Object::set_has_steering_percentage() {
  _has_bits_[0] |= 0x02000000u;
}
void Object::clear_has_steering_percentage() {
  _has_bits_[0] &= ~0x02000000u;
}
void Object::clear_steering_percentage() {
  steering_percentage_ = 0;
  clear_has_steering_percentage();
}
 double Object::steering_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.steering_percentage)
  return steering_percentage_;
}
 void Object::set_steering_percentage(double value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.steering_percentage)
}

// optional double steering_angle = 26;
bool Object::has_steering_angle() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Object::set_has_steering_angle() {
  _has_bits_[0] |= 0x04000000u;
}
void Object::clear_has_steering_angle() {
  _has_bits_[0] &= ~0x04000000u;
}
void Object::clear_steering_angle() {
  steering_angle_ = 0;
  clear_has_steering_angle();
}
 double Object::steering_angle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.steering_angle)
  return steering_angle_;
}
 void Object::set_steering_angle(double value) {
  set_has_steering_angle();
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.steering_angle)
}

// optional double steering_ratio = 27;
bool Object::has_steering_ratio() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Object::set_has_steering_ratio() {
  _has_bits_[0] |= 0x08000000u;
}
void Object::clear_has_steering_ratio() {
  _has_bits_[0] &= ~0x08000000u;
}
void Object::clear_steering_ratio() {
  steering_ratio_ = 0;
  clear_has_steering_ratio();
}
 double Object::steering_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.steering_ratio)
  return steering_ratio_;
}
 void Object::set_steering_ratio(double value) {
  set_has_steering_ratio();
  steering_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.steering_ratio)
}

// optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
bool Object::has_disengage_type() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Object::set_has_disengage_type() {
  _has_bits_[0] |= 0x10000000u;
}
void Object::clear_has_disengage_type() {
  _has_bits_[0] &= ~0x10000000u;
}
void Object::clear_disengage_type() {
  disengage_type_ = 0;
  clear_has_disengage_type();
}
 ::apollo::dreamview::Object_DisengageType Object::disengage_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.disengage_type)
  return static_cast< ::apollo::dreamview::Object_DisengageType >(disengage_type_);
}
 void Object::set_disengage_type(::apollo::dreamview::Object_DisengageType value) {
  assert(::apollo::dreamview::Object_DisengageType_IsValid(value));
  set_has_disengage_type();
  disengage_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.disengage_type)
}

// optional .apollo.dreamview.Object.Type type = 29;
bool Object::has_type() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Object::set_has_type() {
  _has_bits_[0] |= 0x20000000u;
}
void Object::clear_has_type() {
  _has_bits_[0] &= ~0x20000000u;
}
void Object::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::dreamview::Object_Type Object::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.type)
  return static_cast< ::apollo::dreamview::Object_Type >(type_);
}
 void Object::set_type(::apollo::dreamview::Object_Type value) {
  assert(::apollo::dreamview::Object_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.type)
}

// repeated .apollo.dreamview.Prediction prediction = 30;
int Object::prediction_size() const {
  return prediction_.size();
}
void Object::clear_prediction() {
  prediction_.Clear();
}
const ::apollo::dreamview::Prediction& Object::prediction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.prediction)
  return prediction_.Get(index);
}
::apollo::dreamview::Prediction* Object::mutable_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.prediction)
  return prediction_.Mutable(index);
}
::apollo::dreamview::Prediction* Object::add_prediction() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.prediction)
  return prediction_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Prediction >*
Object::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.prediction)
  return &prediction_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Prediction >&
Object::prediction() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.prediction)
  return prediction_;
}

// optional double confidence = 31 [default = 1];
bool Object::has_confidence() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Object::set_has_confidence() {
  _has_bits_[0] |= 0x80000000u;
}
void Object::clear_has_confidence() {
  _has_bits_[0] &= ~0x80000000u;
}
void Object::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
 double Object::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.confidence)
  return confidence_;
}
 void Object::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelaysInMs::kChassisFieldNumber;
const int DelaysInMs::kLocalizationFieldNumber;
const int DelaysInMs::kPerceptionObstacleFieldNumber;
const int DelaysInMs::kPlanningFieldNumber;
const int DelaysInMs::kPredictionFieldNumber;
const int DelaysInMs::kTrafficLightFieldNumber;
const int DelaysInMs::kControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelaysInMs::DelaysInMs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.DelaysInMs)
}

void DelaysInMs::InitAsDefaultInstance() {
}

DelaysInMs::DelaysInMs(const DelaysInMs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DelaysInMs)
}

void DelaysInMs::SharedCtor() {
  _cached_size_ = 0;
  chassis_ = 0;
  localization_ = 0;
  perception_obstacle_ = 0;
  planning_ = 0;
  prediction_ = 0;
  traffic_light_ = 0;
  control_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelaysInMs::~DelaysInMs() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DelaysInMs)
  SharedDtor();
}

void DelaysInMs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelaysInMs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelaysInMs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelaysInMs_descriptor_;
}

const DelaysInMs& DelaysInMs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

DelaysInMs* DelaysInMs::default_instance_ = NULL;

DelaysInMs* DelaysInMs::New(::google::protobuf::Arena* arena) const {
  DelaysInMs* n = new DelaysInMs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelaysInMs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DelaysInMs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DelaysInMs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DelaysInMs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(chassis_, control_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DelaysInMs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.DelaysInMs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double chassis = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chassis_)));
          set_has_chassis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_localization;
        break;
      }

      // optional double localization = 3;
      case 3: {
        if (tag == 25) {
         parse_localization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &localization_)));
          set_has_localization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_perception_obstacle;
        break;
      }

      // optional double perception_obstacle = 4;
      case 4: {
        if (tag == 33) {
         parse_perception_obstacle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_obstacle_)));
          set_has_perception_obstacle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_planning;
        break;
      }

      // optional double planning = 5;
      case 5: {
        if (tag == 41) {
         parse_planning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &planning_)));
          set_has_planning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_prediction;
        break;
      }

      // optional double prediction = 7;
      case 7: {
        if (tag == 57) {
         parse_prediction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prediction_)));
          set_has_prediction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_traffic_light;
        break;
      }

      // optional double traffic_light = 8;
      case 8: {
        if (tag == 65) {
         parse_traffic_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traffic_light_)));
          set_has_traffic_light();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_control;
        break;
      }

      // optional double control = 9;
      case 9: {
        if (tag == 73) {
         parse_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_)));
          set_has_control();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.DelaysInMs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.DelaysInMs)
  return false;
#undef DO_
}

void DelaysInMs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.DelaysInMs)
  // optional double chassis = 1;
  if (has_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->chassis(), output);
  }

  // optional double localization = 3;
  if (has_localization()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->localization(), output);
  }

  // optional double perception_obstacle = 4;
  if (has_perception_obstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->perception_obstacle(), output);
  }

  // optional double planning = 5;
  if (has_planning()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->planning(), output);
  }

  // optional double prediction = 7;
  if (has_prediction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prediction(), output);
  }

  // optional double traffic_light = 8;
  if (has_traffic_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traffic_light(), output);
  }

  // optional double control = 9;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->control(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.DelaysInMs)
}

::google::protobuf::uint8* DelaysInMs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DelaysInMs)
  // optional double chassis = 1;
  if (has_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->chassis(), target);
  }

  // optional double localization = 3;
  if (has_localization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->localization(), target);
  }

  // optional double perception_obstacle = 4;
  if (has_perception_obstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->perception_obstacle(), target);
  }

  // optional double planning = 5;
  if (has_planning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->planning(), target);
  }

  // optional double prediction = 7;
  if (has_prediction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prediction(), target);
  }

  // optional double traffic_light = 8;
  if (has_traffic_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traffic_light(), target);
  }

  // optional double control = 9;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->control(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DelaysInMs)
  return target;
}

int DelaysInMs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DelaysInMs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional double chassis = 1;
    if (has_chassis()) {
      total_size += 1 + 8;
    }

    // optional double localization = 3;
    if (has_localization()) {
      total_size += 1 + 8;
    }

    // optional double perception_obstacle = 4;
    if (has_perception_obstacle()) {
      total_size += 1 + 8;
    }

    // optional double planning = 5;
    if (has_planning()) {
      total_size += 1 + 8;
    }

    // optional double prediction = 7;
    if (has_prediction()) {
      total_size += 1 + 8;
    }

    // optional double traffic_light = 8;
    if (has_traffic_light()) {
      total_size += 1 + 8;
    }

    // optional double control = 9;
    if (has_control()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelaysInMs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.DelaysInMs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DelaysInMs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DelaysInMs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.DelaysInMs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.DelaysInMs)
    MergeFrom(*source);
  }
}

void DelaysInMs::MergeFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DelaysInMs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chassis()) {
      set_chassis(from.chassis());
    }
    if (from.has_localization()) {
      set_localization(from.localization());
    }
    if (from.has_perception_obstacle()) {
      set_perception_obstacle(from.perception_obstacle());
    }
    if (from.has_planning()) {
      set_planning(from.planning());
    }
    if (from.has_prediction()) {
      set_prediction(from.prediction());
    }
    if (from.has_traffic_light()) {
      set_traffic_light(from.traffic_light());
    }
    if (from.has_control()) {
      set_control(from.control());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DelaysInMs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.DelaysInMs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelaysInMs::CopyFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DelaysInMs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelaysInMs::IsInitialized() const {

  return true;
}

void DelaysInMs::Swap(DelaysInMs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelaysInMs::InternalSwap(DelaysInMs* other) {
  std::swap(chassis_, other->chassis_);
  std::swap(localization_, other->localization_);
  std::swap(perception_obstacle_, other->perception_obstacle_);
  std::swap(planning_, other->planning_);
  std::swap(prediction_, other->prediction_);
  std::swap(traffic_light_, other->traffic_light_);
  std::swap(control_, other->control_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelaysInMs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelaysInMs_descriptor_;
  metadata.reflection = DelaysInMs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelaysInMs

// optional double chassis = 1;
bool DelaysInMs::has_chassis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelaysInMs::set_has_chassis() {
  _has_bits_[0] |= 0x00000001u;
}
void DelaysInMs::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelaysInMs::clear_chassis() {
  chassis_ = 0;
  clear_has_chassis();
}
 double DelaysInMs::chassis() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.chassis)
  return chassis_;
}
 void DelaysInMs::set_chassis(double value) {
  set_has_chassis();
  chassis_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.chassis)
}

// optional double localization = 3;
bool DelaysInMs::has_localization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelaysInMs::set_has_localization() {
  _has_bits_[0] |= 0x00000002u;
}
void DelaysInMs::clear_has_localization() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelaysInMs::clear_localization() {
  localization_ = 0;
  clear_has_localization();
}
 double DelaysInMs::localization() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.localization)
  return localization_;
}
 void DelaysInMs::set_localization(double value) {
  set_has_localization();
  localization_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.localization)
}

// optional double perception_obstacle = 4;
bool DelaysInMs::has_perception_obstacle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DelaysInMs::set_has_perception_obstacle() {
  _has_bits_[0] |= 0x00000004u;
}
void DelaysInMs::clear_has_perception_obstacle() {
  _has_bits_[0] &= ~0x00000004u;
}
void DelaysInMs::clear_perception_obstacle() {
  perception_obstacle_ = 0;
  clear_has_perception_obstacle();
}
 double DelaysInMs::perception_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.perception_obstacle)
  return perception_obstacle_;
}
 void DelaysInMs::set_perception_obstacle(double value) {
  set_has_perception_obstacle();
  perception_obstacle_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.perception_obstacle)
}

// optional double planning = 5;
bool DelaysInMs::has_planning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DelaysInMs::set_has_planning() {
  _has_bits_[0] |= 0x00000008u;
}
void DelaysInMs::clear_has_planning() {
  _has_bits_[0] &= ~0x00000008u;
}
void DelaysInMs::clear_planning() {
  planning_ = 0;
  clear_has_planning();
}
 double DelaysInMs::planning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.planning)
  return planning_;
}
 void DelaysInMs::set_planning(double value) {
  set_has_planning();
  planning_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.planning)
}

// optional double prediction = 7;
bool DelaysInMs::has_prediction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DelaysInMs::set_has_prediction() {
  _has_bits_[0] |= 0x00000010u;
}
void DelaysInMs::clear_has_prediction() {
  _has_bits_[0] &= ~0x00000010u;
}
void DelaysInMs::clear_prediction() {
  prediction_ = 0;
  clear_has_prediction();
}
 double DelaysInMs::prediction() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.prediction)
  return prediction_;
}
 void DelaysInMs::set_prediction(double value) {
  set_has_prediction();
  prediction_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.prediction)
}

// optional double traffic_light = 8;
bool DelaysInMs::has_traffic_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DelaysInMs::set_has_traffic_light() {
  _has_bits_[0] |= 0x00000020u;
}
void DelaysInMs::clear_has_traffic_light() {
  _has_bits_[0] &= ~0x00000020u;
}
void DelaysInMs::clear_traffic_light() {
  traffic_light_ = 0;
  clear_has_traffic_light();
}
 double DelaysInMs::traffic_light() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.traffic_light)
  return traffic_light_;
}
 void DelaysInMs::set_traffic_light(double value) {
  set_has_traffic_light();
  traffic_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.traffic_light)
}

// optional double control = 9;
bool DelaysInMs::has_control() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DelaysInMs::set_has_control() {
  _has_bits_[0] |= 0x00000040u;
}
void DelaysInMs::clear_has_control() {
  _has_bits_[0] &= ~0x00000040u;
}
void DelaysInMs::clear_control() {
  control_ = 0;
  clear_has_control();
}
 double DelaysInMs::control() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.control)
  return control_;
}
 void DelaysInMs::set_control(double value) {
  set_has_control();
  control_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.control)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutePath::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutePath::RoutePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.RoutePath)
}

void RoutePath::InitAsDefaultInstance() {
}

RoutePath::RoutePath(const RoutePath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.RoutePath)
}

void RoutePath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutePath::~RoutePath() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.RoutePath)
  SharedDtor();
}

void RoutePath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoutePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutePath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutePath_descriptor_;
}

const RoutePath& RoutePath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

RoutePath* RoutePath::default_instance_ = NULL;

RoutePath* RoutePath::New(::google::protobuf::Arena* arena) const {
  RoutePath* n = new RoutePath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutePath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.RoutePath)
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoutePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.RoutePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.dreamview.PolygonPoint point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.RoutePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.RoutePath)
  return false;
#undef DO_
}

void RoutePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.RoutePath)
  // repeated .apollo.dreamview.PolygonPoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.RoutePath)
}

::google::protobuf::uint8* RoutePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.RoutePath)
  // repeated .apollo.dreamview.PolygonPoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.RoutePath)
  return target;
}

int RoutePath::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.RoutePath)
  int total_size = 0;

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.RoutePath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoutePath* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.RoutePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.RoutePath)
    MergeFrom(*source);
  }
}

void RoutePath::MergeFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.RoutePath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoutePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePath::CopyFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePath::IsInitialized() const {

  return true;
}

void RoutePath::Swap(RoutePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutePath::InternalSwap(RoutePath* other) {
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutePath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutePath_descriptor_;
  metadata.reflection = RoutePath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutePath

// repeated .apollo.dreamview.PolygonPoint point = 1;
int RoutePath::point_size() const {
  return point_.size();
}
void RoutePath::clear_point() {
  point_.Clear();
}
const ::apollo::dreamview::PolygonPoint& RoutePath::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.RoutePath.point)
  return point_.Get(index);
}
::apollo::dreamview::PolygonPoint* RoutePath::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.RoutePath.point)
  return point_.Mutable(index);
}
::apollo::dreamview::PolygonPoint* RoutePath::add_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.RoutePath.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
RoutePath::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.RoutePath.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
RoutePath::point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.RoutePath.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Latency::kTimestampSecFieldNumber;
const int Latency::kTotalTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Latency::Latency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Latency)
}

void Latency::InitAsDefaultInstance() {
}

Latency::Latency(const Latency& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Latency)
}

void Latency::SharedCtor() {
  _cached_size_ = 0;
  timestamp_sec_ = 0;
  total_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Latency::~Latency() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Latency)
  SharedDtor();
}

void Latency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Latency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Latency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Latency_descriptor_;
}

const Latency& Latency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

Latency* Latency::default_instance_ = NULL;

Latency* Latency::New(::google::protobuf::Arena* arena) const {
  Latency* n = new Latency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Latency::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Latency)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Latency, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Latency*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_sec_, total_time_ms_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Latency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Latency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
          set_has_timestamp_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_time_ms;
        break;
      }

      // optional double total_time_ms = 2;
      case 2: {
        if (tag == 17) {
         parse_total_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
          set_has_total_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Latency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Latency)
  return false;
#undef DO_
}

void Latency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Latency)
  // optional double timestamp_sec = 1;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional double total_time_ms = 2;
  if (has_total_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Latency)
}

::google::protobuf::uint8* Latency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Latency)
  // optional double timestamp_sec = 1;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional double total_time_ms = 2;
  if (has_total_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Latency)
  return target;
}

int Latency::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Latency)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double total_time_ms = 2;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Latency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Latency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Latency* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Latency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Latency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Latency)
    MergeFrom(*source);
  }
}

void Latency::MergeFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Latency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
    if (from.has_total_time_ms()) {
      set_total_time_ms(from.total_time_ms());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Latency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Latency::CopyFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Latency::IsInitialized() const {

  return true;
}

void Latency::Swap(Latency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Latency::InternalSwap(Latency* other) {
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(total_time_ms_, other->total_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Latency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Latency_descriptor_;
  metadata.reflection = Latency_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Latency

// optional double timestamp_sec = 1;
bool Latency::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Latency::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void Latency::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void Latency::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
 double Latency::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Latency.timestamp_sec)
  return timestamp_sec_;
}
 void Latency::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Latency.timestamp_sec)
}

// optional double total_time_ms = 2;
bool Latency::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Latency::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void Latency::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void Latency::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
 double Latency::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Latency.total_time_ms)
  return total_time_ms_;
}
 void Latency::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Latency.total_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapElementIds::kLaneFieldNumber;
const int MapElementIds::kCrosswalkFieldNumber;
const int MapElementIds::kJunctionFieldNumber;
const int MapElementIds::kSignalFieldNumber;
const int MapElementIds::kStopSignFieldNumber;
const int MapElementIds::kYieldFieldNumber;
const int MapElementIds::kOverlapFieldNumber;
const int MapElementIds::kRoadFieldNumber;
const int MapElementIds::kClearAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapElementIds::MapElementIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.MapElementIds)
}

void MapElementIds::InitAsDefaultInstance() {
}

MapElementIds::MapElementIds(const MapElementIds& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.MapElementIds)
}

void MapElementIds::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapElementIds::~MapElementIds() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.MapElementIds)
  SharedDtor();
}

void MapElementIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapElementIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapElementIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapElementIds_descriptor_;
}

const MapElementIds& MapElementIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

MapElementIds* MapElementIds::default_instance_ = NULL;

MapElementIds* MapElementIds::New(::google::protobuf::Arena* arena) const {
  MapElementIds* n = new MapElementIds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapElementIds::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.MapElementIds)
  lane_.Clear();
  crosswalk_.Clear();
  junction_.Clear();
  signal_.Clear();
  stop_sign_.Clear();
  yield_.Clear();
  overlap_.Clear();
  road_.Clear();
  clear_area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapElementIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.MapElementIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lane = 1;
      case 1: {
        if (tag == 10) {
         parse_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lane()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane(this->lane_size() - 1).data(),
            this->lane(this->lane_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.lane");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lane;
        if (input->ExpectTag(18)) goto parse_crosswalk;
        break;
      }

      // repeated string crosswalk = 2;
      case 2: {
        if (tag == 18) {
         parse_crosswalk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_crosswalk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crosswalk(this->crosswalk_size() - 1).data(),
            this->crosswalk(this->crosswalk_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.crosswalk");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_crosswalk;
        if (input->ExpectTag(26)) goto parse_junction;
        break;
      }

      // repeated string junction = 3;
      case 3: {
        if (tag == 26) {
         parse_junction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_junction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->junction(this->junction_size() - 1).data(),
            this->junction(this->junction_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.junction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_junction;
        if (input->ExpectTag(34)) goto parse_signal;
        break;
      }

      // repeated string signal = 4;
      case 4: {
        if (tag == 34) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signal(this->signal_size() - 1).data(),
            this->signal(this->signal_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.signal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_signal;
        if (input->ExpectTag(42)) goto parse_stop_sign;
        break;
      }

      // repeated string stop_sign = 5;
      case 5: {
        if (tag == 42) {
         parse_stop_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stop_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_sign(this->stop_sign_size() - 1).data(),
            this->stop_sign(this->stop_sign_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.stop_sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stop_sign;
        if (input->ExpectTag(50)) goto parse_yield;
        break;
      }

      // repeated string yield = 6;
      case 6: {
        if (tag == 50) {
         parse_yield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_yield()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->yield(this->yield_size() - 1).data(),
            this->yield(this->yield_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.yield");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_yield;
        if (input->ExpectTag(58)) goto parse_overlap;
        break;
      }

      // repeated string overlap = 7;
      case 7: {
        if (tag == 58) {
         parse_overlap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_overlap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->overlap(this->overlap_size() - 1).data(),
            this->overlap(this->overlap_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.overlap");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_overlap;
        if (input->ExpectTag(66)) goto parse_road;
        break;
      }

      // repeated string road = 8;
      case 8: {
        if (tag == 66) {
         parse_road:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_road()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->road(this->road_size() - 1).data(),
            this->road(this->road_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.road");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_road;
        if (input->ExpectTag(74)) goto parse_clear_area;
        break;
      }

      // repeated string clear_area = 9;
      case 9: {
        if (tag == 74) {
         parse_clear_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_clear_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clear_area(this->clear_area_size() - 1).data(),
            this->clear_area(this->clear_area_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.clear_area");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_clear_area;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.MapElementIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.MapElementIds)
  return false;
#undef DO_
}

void MapElementIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.MapElementIds)
  // repeated string lane = 1;
  for (int i = 0; i < this->lane_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane(i).data(), this->lane(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.lane");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lane(i), output);
  }

  // repeated string crosswalk = 2;
  for (int i = 0; i < this->crosswalk_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk(i).data(), this->crosswalk(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.crosswalk");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->crosswalk(i), output);
  }

  // repeated string junction = 3;
  for (int i = 0; i < this->junction_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction(i).data(), this->junction(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.junction");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->junction(i), output);
  }

  // repeated string signal = 4;
  for (int i = 0; i < this->signal_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal(i).data(), this->signal(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.signal");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->signal(i), output);
  }

  // repeated string stop_sign = 5;
  for (int i = 0; i < this->stop_sign_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign(i).data(), this->stop_sign(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.stop_sign");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stop_sign(i), output);
  }

  // repeated string yield = 6;
  for (int i = 0; i < this->yield_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yield(i).data(), this->yield(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.yield");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->yield(i), output);
  }

  // repeated string overlap = 7;
  for (int i = 0; i < this->overlap_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->overlap(i).data(), this->overlap(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.overlap");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->overlap(i), output);
  }

  // repeated string road = 8;
  for (int i = 0; i < this->road_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road(i).data(), this->road(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.road");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->road(i), output);
  }

  // repeated string clear_area = 9;
  for (int i = 0; i < this->clear_area_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clear_area(i).data(), this->clear_area(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.clear_area");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->clear_area(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.MapElementIds)
}

::google::protobuf::uint8* MapElementIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.MapElementIds)
  // repeated string lane = 1;
  for (int i = 0; i < this->lane_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane(i).data(), this->lane(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.lane");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lane(i), target);
  }

  // repeated string crosswalk = 2;
  for (int i = 0; i < this->crosswalk_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk(i).data(), this->crosswalk(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.crosswalk");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->crosswalk(i), target);
  }

  // repeated string junction = 3;
  for (int i = 0; i < this->junction_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction(i).data(), this->junction(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.junction");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->junction(i), target);
  }

  // repeated string signal = 4;
  for (int i = 0; i < this->signal_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal(i).data(), this->signal(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.signal");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->signal(i), target);
  }

  // repeated string stop_sign = 5;
  for (int i = 0; i < this->stop_sign_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign(i).data(), this->stop_sign(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.stop_sign");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->stop_sign(i), target);
  }

  // repeated string yield = 6;
  for (int i = 0; i < this->yield_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yield(i).data(), this->yield(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.yield");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->yield(i), target);
  }

  // repeated string overlap = 7;
  for (int i = 0; i < this->overlap_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->overlap(i).data(), this->overlap(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.overlap");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->overlap(i), target);
  }

  // repeated string road = 8;
  for (int i = 0; i < this->road_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road(i).data(), this->road(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.road");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->road(i), target);
  }

  // repeated string clear_area = 9;
  for (int i = 0; i < this->clear_area_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clear_area(i).data(), this->clear_area(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.clear_area");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->clear_area(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.MapElementIds)
  return target;
}

int MapElementIds::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.MapElementIds)
  int total_size = 0;

  // repeated string lane = 1;
  total_size += 1 * this->lane_size();
  for (int i = 0; i < this->lane_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lane(i));
  }

  // repeated string crosswalk = 2;
  total_size += 1 * this->crosswalk_size();
  for (int i = 0; i < this->crosswalk_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->crosswalk(i));
  }

  // repeated string junction = 3;
  total_size += 1 * this->junction_size();
  for (int i = 0; i < this->junction_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->junction(i));
  }

  // repeated string signal = 4;
  total_size += 1 * this->signal_size();
  for (int i = 0; i < this->signal_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signal(i));
  }

  // repeated string stop_sign = 5;
  total_size += 1 * this->stop_sign_size();
  for (int i = 0; i < this->stop_sign_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stop_sign(i));
  }

  // repeated string yield = 6;
  total_size += 1 * this->yield_size();
  for (int i = 0; i < this->yield_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->yield(i));
  }

  // repeated string overlap = 7;
  total_size += 1 * this->overlap_size();
  for (int i = 0; i < this->overlap_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->overlap(i));
  }

  // repeated string road = 8;
  total_size += 1 * this->road_size();
  for (int i = 0; i < this->road_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->road(i));
  }

  // repeated string clear_area = 9;
  total_size += 1 * this->clear_area_size();
  for (int i = 0; i < this->clear_area_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->clear_area(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapElementIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.MapElementIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapElementIds* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapElementIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.MapElementIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.MapElementIds)
    MergeFrom(*source);
  }
}

void MapElementIds::MergeFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.MapElementIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lane_.MergeFrom(from.lane_);
  crosswalk_.MergeFrom(from.crosswalk_);
  junction_.MergeFrom(from.junction_);
  signal_.MergeFrom(from.signal_);
  stop_sign_.MergeFrom(from.stop_sign_);
  yield_.MergeFrom(from.yield_);
  overlap_.MergeFrom(from.overlap_);
  road_.MergeFrom(from.road_);
  clear_area_.MergeFrom(from.clear_area_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapElementIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.MapElementIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapElementIds::CopyFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.MapElementIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapElementIds::IsInitialized() const {

  return true;
}

void MapElementIds::Swap(MapElementIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapElementIds::InternalSwap(MapElementIds* other) {
  lane_.UnsafeArenaSwap(&other->lane_);
  crosswalk_.UnsafeArenaSwap(&other->crosswalk_);
  junction_.UnsafeArenaSwap(&other->junction_);
  signal_.UnsafeArenaSwap(&other->signal_);
  stop_sign_.UnsafeArenaSwap(&other->stop_sign_);
  yield_.UnsafeArenaSwap(&other->yield_);
  overlap_.UnsafeArenaSwap(&other->overlap_);
  road_.UnsafeArenaSwap(&other->road_);
  clear_area_.UnsafeArenaSwap(&other->clear_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapElementIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapElementIds_descriptor_;
  metadata.reflection = MapElementIds_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapElementIds

// repeated string lane = 1;
int MapElementIds::lane_size() const {
  return lane_.size();
}
void MapElementIds::clear_lane() {
  lane_.Clear();
}
 const ::std::string& MapElementIds::lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.lane)
  return lane_.Get(index);
}
 ::std::string* MapElementIds::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.lane)
  return lane_.Mutable(index);
}
 void MapElementIds::set_lane(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.lane)
  lane_.Mutable(index)->assign(value);
}
 void MapElementIds::set_lane(int index, const char* value) {
  lane_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.lane)
}
 void MapElementIds::set_lane(int index, const char* value, size_t size) {
  lane_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.lane)
}
 ::std::string* MapElementIds::add_lane() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.lane)
  return lane_.Add();
}
 void MapElementIds::add_lane(const ::std::string& value) {
  lane_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.lane)
}
 void MapElementIds::add_lane(const char* value) {
  lane_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.lane)
}
 void MapElementIds::add_lane(const char* value, size_t size) {
  lane_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.lane)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::lane() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.lane)
  return lane_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.lane)
  return &lane_;
}

// repeated string crosswalk = 2;
int MapElementIds::crosswalk_size() const {
  return crosswalk_.size();
}
void MapElementIds::clear_crosswalk() {
  crosswalk_.Clear();
}
 const ::std::string& MapElementIds::crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.crosswalk)
  return crosswalk_.Get(index);
}
 ::std::string* MapElementIds::mutable_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.crosswalk)
  return crosswalk_.Mutable(index);
}
 void MapElementIds::set_crosswalk(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.crosswalk)
  crosswalk_.Mutable(index)->assign(value);
}
 void MapElementIds::set_crosswalk(int index, const char* value) {
  crosswalk_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.crosswalk)
}
 void MapElementIds::set_crosswalk(int index, const char* value, size_t size) {
  crosswalk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.crosswalk)
}
 ::std::string* MapElementIds::add_crosswalk() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.crosswalk)
  return crosswalk_.Add();
}
 void MapElementIds::add_crosswalk(const ::std::string& value) {
  crosswalk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.crosswalk)
}
 void MapElementIds::add_crosswalk(const char* value) {
  crosswalk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.crosswalk)
}
 void MapElementIds::add_crosswalk(const char* value, size_t size) {
  crosswalk_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.crosswalk)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::crosswalk() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.crosswalk)
  return crosswalk_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.crosswalk)
  return &crosswalk_;
}

// repeated string junction = 3;
int MapElementIds::junction_size() const {
  return junction_.size();
}
void MapElementIds::clear_junction() {
  junction_.Clear();
}
 const ::std::string& MapElementIds::junction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.junction)
  return junction_.Get(index);
}
 ::std::string* MapElementIds::mutable_junction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.junction)
  return junction_.Mutable(index);
}
 void MapElementIds::set_junction(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.junction)
  junction_.Mutable(index)->assign(value);
}
 void MapElementIds::set_junction(int index, const char* value) {
  junction_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.junction)
}
 void MapElementIds::set_junction(int index, const char* value, size_t size) {
  junction_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.junction)
}
 ::std::string* MapElementIds::add_junction() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.junction)
  return junction_.Add();
}
 void MapElementIds::add_junction(const ::std::string& value) {
  junction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.junction)
}
 void MapElementIds::add_junction(const char* value) {
  junction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.junction)
}
 void MapElementIds::add_junction(const char* value, size_t size) {
  junction_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.junction)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::junction() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.junction)
  return junction_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_junction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.junction)
  return &junction_;
}

// repeated string signal = 4;
int MapElementIds::signal_size() const {
  return signal_.size();
}
void MapElementIds::clear_signal() {
  signal_.Clear();
}
 const ::std::string& MapElementIds::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.signal)
  return signal_.Get(index);
}
 ::std::string* MapElementIds::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.signal)
  return signal_.Mutable(index);
}
 void MapElementIds::set_signal(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.signal)
  signal_.Mutable(index)->assign(value);
}
 void MapElementIds::set_signal(int index, const char* value) {
  signal_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.signal)
}
 void MapElementIds::set_signal(int index, const char* value, size_t size) {
  signal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.signal)
}
 ::std::string* MapElementIds::add_signal() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.signal)
  return signal_.Add();
}
 void MapElementIds::add_signal(const ::std::string& value) {
  signal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.signal)
}
 void MapElementIds::add_signal(const char* value) {
  signal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.signal)
}
 void MapElementIds::add_signal(const char* value, size_t size) {
  signal_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.signal)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::signal() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.signal)
  return signal_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.signal)
  return &signal_;
}

// repeated string stop_sign = 5;
int MapElementIds::stop_sign_size() const {
  return stop_sign_.size();
}
void MapElementIds::clear_stop_sign() {
  stop_sign_.Clear();
}
 const ::std::string& MapElementIds::stop_sign(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.stop_sign)
  return stop_sign_.Get(index);
}
 ::std::string* MapElementIds::mutable_stop_sign(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.stop_sign)
  return stop_sign_.Mutable(index);
}
 void MapElementIds::set_stop_sign(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.stop_sign)
  stop_sign_.Mutable(index)->assign(value);
}
 void MapElementIds::set_stop_sign(int index, const char* value) {
  stop_sign_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.stop_sign)
}
 void MapElementIds::set_stop_sign(int index, const char* value, size_t size) {
  stop_sign_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.stop_sign)
}
 ::std::string* MapElementIds::add_stop_sign() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.stop_sign)
  return stop_sign_.Add();
}
 void MapElementIds::add_stop_sign(const ::std::string& value) {
  stop_sign_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.stop_sign)
}
 void MapElementIds::add_stop_sign(const char* value) {
  stop_sign_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.stop_sign)
}
 void MapElementIds::add_stop_sign(const char* value, size_t size) {
  stop_sign_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.stop_sign)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::stop_sign() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.stop_sign)
  return stop_sign_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_stop_sign() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.stop_sign)
  return &stop_sign_;
}

// repeated string yield = 6;
int MapElementIds::yield_size() const {
  return yield_.size();
}
void MapElementIds::clear_yield() {
  yield_.Clear();
}
 const ::std::string& MapElementIds::yield(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.yield)
  return yield_.Get(index);
}
 ::std::string* MapElementIds::mutable_yield(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.yield)
  return yield_.Mutable(index);
}
 void MapElementIds::set_yield(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.yield)
  yield_.Mutable(index)->assign(value);
}
 void MapElementIds::set_yield(int index, const char* value) {
  yield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.yield)
}
 void MapElementIds::set_yield(int index, const char* value, size_t size) {
  yield_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.yield)
}
 ::std::string* MapElementIds::add_yield() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.yield)
  return yield_.Add();
}
 void MapElementIds::add_yield(const ::std::string& value) {
  yield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.yield)
}
 void MapElementIds::add_yield(const char* value) {
  yield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.yield)
}
 void MapElementIds::add_yield(const char* value, size_t size) {
  yield_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.yield)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::yield() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.yield)
  return yield_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_yield() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.yield)
  return &yield_;
}

// repeated string overlap = 7;
int MapElementIds::overlap_size() const {
  return overlap_.size();
}
void MapElementIds::clear_overlap() {
  overlap_.Clear();
}
 const ::std::string& MapElementIds::overlap(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.overlap)
  return overlap_.Get(index);
}
 ::std::string* MapElementIds::mutable_overlap(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.overlap)
  return overlap_.Mutable(index);
}
 void MapElementIds::set_overlap(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.overlap)
  overlap_.Mutable(index)->assign(value);
}
 void MapElementIds::set_overlap(int index, const char* value) {
  overlap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.overlap)
}
 void MapElementIds::set_overlap(int index, const char* value, size_t size) {
  overlap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.overlap)
}
 ::std::string* MapElementIds::add_overlap() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.overlap)
  return overlap_.Add();
}
 void MapElementIds::add_overlap(const ::std::string& value) {
  overlap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.overlap)
}
 void MapElementIds::add_overlap(const char* value) {
  overlap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.overlap)
}
 void MapElementIds::add_overlap(const char* value, size_t size) {
  overlap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.overlap)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::overlap() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.overlap)
  return overlap_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_overlap() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.overlap)
  return &overlap_;
}

// repeated string road = 8;
int MapElementIds::road_size() const {
  return road_.size();
}
void MapElementIds::clear_road() {
  road_.Clear();
}
 const ::std::string& MapElementIds::road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.road)
  return road_.Get(index);
}
 ::std::string* MapElementIds::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.road)
  return road_.Mutable(index);
}
 void MapElementIds::set_road(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.road)
  road_.Mutable(index)->assign(value);
}
 void MapElementIds::set_road(int index, const char* value) {
  road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.road)
}
 void MapElementIds::set_road(int index, const char* value, size_t size) {
  road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.road)
}
 ::std::string* MapElementIds::add_road() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.road)
  return road_.Add();
}
 void MapElementIds::add_road(const ::std::string& value) {
  road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.road)
}
 void MapElementIds::add_road(const char* value) {
  road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.road)
}
 void MapElementIds::add_road(const char* value, size_t size) {
  road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.road)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::road() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.road)
  return road_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.road)
  return &road_;
}

// repeated string clear_area = 9;
int MapElementIds::clear_area_size() const {
  return clear_area_.size();
}
void MapElementIds::clear_clear_area() {
  clear_area_.Clear();
}
 const ::std::string& MapElementIds::clear_area(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.clear_area)
  return clear_area_.Get(index);
}
 ::std::string* MapElementIds::mutable_clear_area(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.clear_area)
  return clear_area_.Mutable(index);
}
 void MapElementIds::set_clear_area(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.clear_area)
  clear_area_.Mutable(index)->assign(value);
}
 void MapElementIds::set_clear_area(int index, const char* value) {
  clear_area_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.clear_area)
}
 void MapElementIds::set_clear_area(int index, const char* value, size_t size) {
  clear_area_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.clear_area)
}
 ::std::string* MapElementIds::add_clear_area() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.clear_area)
  return clear_area_.Add();
}
 void MapElementIds::add_clear_area(const ::std::string& value) {
  clear_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.clear_area)
}
 void MapElementIds::add_clear_area(const char* value) {
  clear_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.clear_area)
}
 void MapElementIds::add_clear_area(const char* value, size_t size) {
  clear_area_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.clear_area)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapElementIds::clear_area() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.clear_area)
  return clear_area_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapElementIds::mutable_clear_area() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.clear_area)
  return &clear_area_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlData::kTimestampSecFieldNumber;
const int ControlData::kStationErrorFieldNumber;
const int ControlData::kLateralErrorFieldNumber;
const int ControlData::kHeadingErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlData::ControlData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.ControlData)
}

void ControlData::InitAsDefaultInstance() {
}

ControlData::ControlData(const ControlData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ControlData)
}

void ControlData::SharedCtor() {
  _cached_size_ = 0;
  timestamp_sec_ = 0;
  station_error_ = 0;
  lateral_error_ = 0;
  heading_error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlData::~ControlData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ControlData)
  SharedDtor();
}

void ControlData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlData_descriptor_;
}

const ControlData& ControlData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

ControlData* ControlData::default_instance_ = NULL;

ControlData* ControlData::New(::google::protobuf::Arena* arena) const {
  ControlData* n = new ControlData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ControlData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ControlData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControlData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_sec_, heading_error_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControlData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.ControlData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
          set_has_timestamp_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_station_error;
        break;
      }

      // optional double station_error = 2;
      case 2: {
        if (tag == 17) {
         parse_station_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
          set_has_station_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lateral_error;
        break;
      }

      // optional double lateral_error = 3;
      case 3: {
        if (tag == 25) {
         parse_lateral_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
          set_has_lateral_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_heading_error;
        break;
      }

      // optional double heading_error = 4;
      case 4: {
        if (tag == 33) {
         parse_heading_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
          set_has_heading_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.ControlData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.ControlData)
  return false;
#undef DO_
}

void ControlData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.ControlData)
  // optional double timestamp_sec = 1;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional double station_error = 2;
  if (has_station_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->station_error(), output);
  }

  // optional double lateral_error = 3;
  if (has_lateral_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lateral_error(), output);
  }

  // optional double heading_error = 4;
  if (has_heading_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.ControlData)
}

::google::protobuf::uint8* ControlData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ControlData)
  // optional double timestamp_sec = 1;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional double station_error = 2;
  if (has_station_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->station_error(), target);
  }

  // optional double lateral_error = 3;
  if (has_lateral_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lateral_error(), target);
  }

  // optional double heading_error = 4;
  if (has_heading_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ControlData)
  return target;
}

int ControlData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ControlData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (has_station_error()) {
      total_size += 1 + 8;
    }

    // optional double lateral_error = 3;
    if (has_lateral_error()) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (has_heading_error()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ControlData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ControlData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ControlData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ControlData)
    MergeFrom(*source);
  }
}

void ControlData::MergeFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ControlData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
    if (from.has_station_error()) {
      set_station_error(from.station_error());
    }
    if (from.has_lateral_error()) {
      set_lateral_error(from.lateral_error());
    }
    if (from.has_heading_error()) {
      set_heading_error(from.heading_error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ControlData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlData::CopyFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlData::IsInitialized() const {

  return true;
}

void ControlData::Swap(ControlData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlData::InternalSwap(ControlData* other) {
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(station_error_, other->station_error_);
  std::swap(lateral_error_, other->lateral_error_);
  std::swap(heading_error_, other->heading_error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlData_descriptor_;
  metadata.reflection = ControlData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlData

// optional double timestamp_sec = 1;
bool ControlData::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControlData::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void ControlData::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControlData::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
 double ControlData::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.timestamp_sec)
  return timestamp_sec_;
}
 void ControlData::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.timestamp_sec)
}

// optional double station_error = 2;
bool ControlData::has_station_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControlData::set_has_station_error() {
  _has_bits_[0] |= 0x00000002u;
}
void ControlData::clear_has_station_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControlData::clear_station_error() {
  station_error_ = 0;
  clear_has_station_error();
}
 double ControlData::station_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.station_error)
  return station_error_;
}
 void ControlData::set_station_error(double value) {
  set_has_station_error();
  station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.station_error)
}

// optional double lateral_error = 3;
bool ControlData::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ControlData::set_has_lateral_error() {
  _has_bits_[0] |= 0x00000004u;
}
void ControlData::clear_has_lateral_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void ControlData::clear_lateral_error() {
  lateral_error_ = 0;
  clear_has_lateral_error();
}
 double ControlData::lateral_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.lateral_error)
  return lateral_error_;
}
 void ControlData::set_lateral_error(double value) {
  set_has_lateral_error();
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.lateral_error)
}

// optional double heading_error = 4;
bool ControlData::has_heading_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ControlData::set_has_heading_error() {
  _has_bits_[0] |= 0x00000008u;
}
void ControlData::clear_has_heading_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void ControlData::clear_heading_error() {
  heading_error_ = 0;
  clear_has_heading_error();
}
 double ControlData::heading_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.heading_error)
  return heading_error_;
}
 void ControlData::set_heading_error(double value) {
  set_has_heading_error();
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.heading_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notification::kTimestampSecFieldNumber;
const int Notification::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notification::Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Notification)
}

void Notification::InitAsDefaultInstance() {
  item_ = const_cast< ::apollo::common::monitor::MonitorMessageItem*>(&::apollo::common::monitor::MonitorMessageItem::default_instance());
}

Notification::Notification(const Notification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Notification)
}

void Notification::SharedCtor() {
  _cached_size_ = 0;
  timestamp_sec_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notification_descriptor_;
}

const Notification& Notification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

Notification* Notification::default_instance_ = NULL;

Notification* Notification::New(::google::protobuf::Arena* arena) const {
  Notification* n = new Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Notification)
  if (_has_bits_[0 / 32] & 3u) {
    timestamp_sec_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::apollo::common::monitor::MonitorMessageItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
          set_has_timestamp_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .apollo.common.monitor.MonitorMessageItem item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Notification)
  return false;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Notification)
  // optional double timestamp_sec = 1;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .apollo.common.monitor.MonitorMessageItem item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->item_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Notification)
}

::google::protobuf::uint8* Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Notification)
  // optional double timestamp_sec = 1;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .apollo.common.monitor.MonitorMessageItem item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->item_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Notification)
  return target;
}

int Notification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Notification)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.monitor.MonitorMessageItem item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->item_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Notification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Notification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Notification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
    if (from.has_item()) {
      mutable_item()->::apollo::common::monitor::MonitorMessageItem::MergeFrom(from.item());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {

  return true;
}

void Notification::Swap(Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notification::InternalSwap(Notification* other) {
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(item_, other->item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notification_descriptor_;
  metadata.reflection = Notification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Notification

// optional double timestamp_sec = 1;
bool Notification::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Notification::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void Notification::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void Notification::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
 double Notification::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Notification.timestamp_sec)
  return timestamp_sec_;
}
 void Notification::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Notification.timestamp_sec)
}

// optional .apollo.common.monitor.MonitorMessageItem item = 2;
bool Notification::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Notification::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
void Notification::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
void Notification::clear_item() {
  if (item_ != NULL) item_->::apollo::common::monitor::MonitorMessageItem::Clear();
  clear_has_item();
}
const ::apollo::common::monitor::MonitorMessageItem& Notification::item() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Notification.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
::apollo::common::monitor::MonitorMessageItem* Notification::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::apollo::common::monitor::MonitorMessageItem;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Notification.item)
  return item_;
}
::apollo::common::monitor::MonitorMessageItem* Notification::release_item() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Notification.item)
  clear_has_item();
  ::apollo::common::monitor::MonitorMessageItem* temp = item_;
  item_ = NULL;
  return temp;
}
void Notification::set_allocated_item(::apollo::common::monitor::MonitorMessageItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Notification.item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulationWorld::kTimestampFieldNumber;
const int SimulationWorld::kSequenceNumFieldNumber;
const int SimulationWorld::kObjectFieldNumber;
const int SimulationWorld::kAutoDrivingCarFieldNumber;
const int SimulationWorld::kTrafficSignalFieldNumber;
const int SimulationWorld::kRoutePathFieldNumber;
const int SimulationWorld::kRoutingTimeFieldNumber;
const int SimulationWorld::kPlanningTrajectoryFieldNumber;
const int SimulationWorld::kMainStopFieldNumber;
const int SimulationWorld::kMainDecisionFieldNumber;
const int SimulationWorld::kSpeedLimitFieldNumber;
const int SimulationWorld::kDelayFieldNumber;
const int SimulationWorld::kMonitorFieldNumber;
const int SimulationWorld::kNotificationFieldNumber;
const int SimulationWorld::kEngageAdviceFieldNumber;
const int SimulationWorld::kLatencyFieldNumber;
const int SimulationWorld::kMapElementIdsFieldNumber;
const int SimulationWorld::kMapHashFieldNumber;
const int SimulationWorld::kMapRadiusFieldNumber;
const int SimulationWorld::kPlanningDataFieldNumber;
const int SimulationWorld::kGpsFieldNumber;
const int SimulationWorld::kLaneMarkerFieldNumber;
const int SimulationWorld::kControlDataFieldNumber;
const int SimulationWorld::kNavigationPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulationWorld::SimulationWorld()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.SimulationWorld)
}

void SimulationWorld::InitAsDefaultInstance() {
  auto_driving_car_ = const_cast< ::apollo::dreamview::Object*>(&::apollo::dreamview::Object::default_instance());
  traffic_signal_ = const_cast< ::apollo::dreamview::Object*>(&::apollo::dreamview::Object::default_instance());
  main_stop_ = const_cast< ::apollo::dreamview::Object*>(&::apollo::dreamview::Object::default_instance());
  main_decision_ = const_cast< ::apollo::dreamview::Object*>(&::apollo::dreamview::Object::default_instance());
  delay_ = const_cast< ::apollo::dreamview::DelaysInMs*>(&::apollo::dreamview::DelaysInMs::default_instance());
  monitor_ = const_cast< ::apollo::common::monitor::MonitorMessage*>(&::apollo::common::monitor::MonitorMessage::default_instance());
  map_element_ids_ = const_cast< ::apollo::dreamview::MapElementIds*>(&::apollo::dreamview::MapElementIds::default_instance());
  planning_data_ = const_cast< ::apollo::planning_internal::PlanningData*>(&::apollo::planning_internal::PlanningData::default_instance());
  gps_ = const_cast< ::apollo::dreamview::Object*>(&::apollo::dreamview::Object::default_instance());
  lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(&::apollo::perception::LaneMarkers::default_instance());
  control_data_ = const_cast< ::apollo::dreamview::ControlData*>(&::apollo::dreamview::ControlData::default_instance());
}

SimulationWorld::SimulationWorld(const SimulationWorld& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.SimulationWorld)
}

void SimulationWorld::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0;
  sequence_num_ = 0u;
  auto_driving_car_ = NULL;
  traffic_signal_ = NULL;
  routing_time_ = 0;
  main_stop_ = NULL;
  main_decision_ = NULL;
  speed_limit_ = 0;
  delay_ = NULL;
  monitor_ = NULL;
  engage_advice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latency_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  latency_.SetEntryDescriptor(
      &::apollo::dreamview::SimulationWorld_LatencyEntry_descriptor_);
  map_element_ids_ = NULL;
  map_hash_ = GOOGLE_ULONGLONG(0);
  map_radius_ = 0;
  planning_data_ = NULL;
  gps_ = NULL;
  lane_marker_ = NULL;
  control_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimulationWorld::~SimulationWorld() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.SimulationWorld)
  SharedDtor();
}

void SimulationWorld::SharedDtor() {
  engage_advice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete auto_driving_car_;
    delete traffic_signal_;
    delete main_stop_;
    delete main_decision_;
    delete delay_;
    delete monitor_;
    delete map_element_ids_;
    delete planning_data_;
    delete gps_;
    delete lane_marker_;
    delete control_data_;
  }
}

void SimulationWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimulationWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimulationWorld_descriptor_;
}

const SimulationWorld& SimulationWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fsimulation_5fworld_2eproto();
  return *default_instance_;
}

SimulationWorld* SimulationWorld::default_instance_ = NULL;

SimulationWorld* SimulationWorld::New(::google::protobuf::Arena* arena) const {
  SimulationWorld* n = new SimulationWorld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimulationWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.SimulationWorld)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimulationWorld, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimulationWorld*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 91u) {
    timestamp_ = 0;
    sequence_num_ = 0u;
    if (has_auto_driving_car()) {
      if (auto_driving_car_ != NULL) auto_driving_car_->::apollo::dreamview::Object::Clear();
    }
    if (has_traffic_signal()) {
      if (traffic_signal_ != NULL) traffic_signal_->::apollo::dreamview::Object::Clear();
    }
    routing_time_ = 0;
  }
  if (_has_bits_[8 / 32] & 24320u) {
    if (has_main_stop()) {
      if (main_stop_ != NULL) main_stop_->::apollo::dreamview::Object::Clear();
    }
    if (has_main_decision()) {
      if (main_decision_ != NULL) main_decision_->::apollo::dreamview::Object::Clear();
    }
    speed_limit_ = 0;
    if (has_delay()) {
      if (delay_ != NULL) delay_->::apollo::dreamview::DelaysInMs::Clear();
    }
    if (has_monitor()) {
      if (monitor_ != NULL) monitor_->::apollo::common::monitor::MonitorMessage::Clear();
    }
    if (has_engage_advice()) {
      engage_advice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ZR_(map_hash_, map_radius_);
    if (has_map_element_ids()) {
      if (map_element_ids_ != NULL) map_element_ids_->::apollo::dreamview::MapElementIds::Clear();
    }
    if (has_planning_data()) {
      if (planning_data_ != NULL) planning_data_->::apollo::planning_internal::PlanningData::Clear();
    }
    if (has_gps()) {
      if (gps_ != NULL) gps_->::apollo::dreamview::Object::Clear();
    }
    if (has_lane_marker()) {
      if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
    }
    if (has_control_data()) {
      if (control_data_ != NULL) control_data_->::apollo::dreamview::ControlData::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  object_.Clear();
  route_path_.Clear();
  planning_trajectory_.Clear();
  notification_.Clear();
  latency_.Clear();
  navigation_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimulationWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.SimulationWorld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_num;
        break;
      }

      // optional uint32 sequence_num = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
          set_has_sequence_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // repeated .apollo.dreamview.Object object = 3;
      case 3: {
        if (tag == 26) {
         parse_object:
          DO_(input->IncrementRecursionDepth());
         parse_loop_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_object;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_auto_driving_car;
        break;
      }

      // optional .apollo.dreamview.Object auto_driving_car = 4;
      case 4: {
        if (tag == 34) {
         parse_auto_driving_car:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_driving_car()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_traffic_signal;
        break;
      }

      // optional .apollo.dreamview.Object traffic_signal = 5;
      case 5: {
        if (tag == 42) {
         parse_traffic_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_route_path;
        break;
      }

      // repeated .apollo.dreamview.RoutePath route_path = 6;
      case 6: {
        if (tag == 50) {
         parse_route_path:
          DO_(input->IncrementRecursionDepth());
         parse_loop_route_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_route_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_route_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(57)) goto parse_routing_time;
        break;
      }

      // optional double routing_time = 7;
      case 7: {
        if (tag == 57) {
         parse_routing_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &routing_time_)));
          set_has_routing_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_planning_trajectory;
        break;
      }

      // repeated .apollo.dreamview.Object planning_trajectory = 8;
      case 8: {
        if (tag == 66) {
         parse_planning_trajectory:
          DO_(input->IncrementRecursionDepth());
         parse_loop_planning_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_planning_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_planning_trajectory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_main_stop;
        break;
      }

      // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
      case 9: {
        if (tag == 74) {
         parse_main_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_main_decision;
        break;
      }

      // optional .apollo.dreamview.Object main_decision = 10;
      case 10: {
        if (tag == 82) {
         parse_main_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_speed_limit;
        break;
      }

      // optional double speed_limit = 11;
      case 11: {
        if (tag == 89) {
         parse_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
          set_has_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_delay;
        break;
      }

      // optional .apollo.dreamview.DelaysInMs delay = 12;
      case 12: {
        if (tag == 98) {
         parse_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_monitor;
        break;
      }

      // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
      case 13: {
        if (tag == 106) {
         parse_monitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monitor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_notification;
        break;
      }

      // repeated .apollo.dreamview.Notification notification = 14;
      case 14: {
        if (tag == 114) {
         parse_notification:
          DO_(input->IncrementRecursionDepth());
         parse_loop_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_notification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_notification;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(122)) goto parse_engage_advice;
        break;
      }

      // optional string engage_advice = 15;
      case 15: {
        if (tag == 122) {
         parse_engage_advice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engage_advice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->engage_advice().data(), this->engage_advice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.SimulationWorld.engage_advice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_latency;
        break;
      }

      // map<string, .apollo.dreamview.Latency> latency = 16;
      case 16: {
        if (tag == 130) {
         parse_latency:
          DO_(input->IncrementRecursionDepth());
         parse_loop_latency:
          SimulationWorld_LatencyEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::dreamview::Latency,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency > > parser(&latency_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.SimulationWorld.LatencyEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_latency;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(138)) goto parse_map_element_ids;
        break;
      }

      // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
      case 17: {
        if (tag == 138) {
         parse_map_element_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_element_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_map_hash;
        break;
      }

      // optional uint64 map_hash = 18;
      case 18: {
        if (tag == 144) {
         parse_map_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_hash_)));
          set_has_map_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_map_radius;
        break;
      }

      // optional double map_radius = 19;
      case 19: {
        if (tag == 153) {
         parse_map_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_radius_)));
          set_has_map_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_planning_data;
        break;
      }

      // optional .apollo.planning_internal.PlanningData planning_data = 20;
      case 20: {
        if (tag == 162) {
         parse_planning_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_gps;
        break;
      }

      // optional .apollo.dreamview.Object gps = 21;
      case 21: {
        if (tag == 170) {
         parse_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_lane_marker;
        break;
      }

      // optional .apollo.perception.LaneMarkers lane_marker = 22;
      case 22: {
        if (tag == 178) {
         parse_lane_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_control_data;
        break;
      }

      // optional .apollo.dreamview.ControlData control_data = 23;
      case 23: {
        if (tag == 186) {
         parse_control_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_navigation_path;
        break;
      }

      // repeated .apollo.common.Path navigation_path = 24;
      case 24: {
        if (tag == 194) {
         parse_navigation_path:
          DO_(input->IncrementRecursionDepth());
         parse_loop_navigation_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_navigation_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_loop_navigation_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.SimulationWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.SimulationWorld)
  return false;
#undef DO_
}

void SimulationWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.SimulationWorld)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional uint32 sequence_num = 2;
  if (has_sequence_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence_num(), output);
  }

  // repeated .apollo.dreamview.Object object = 3;
  for (unsigned int i = 0, n = this->object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object(i), output);
  }

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  if (has_auto_driving_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->auto_driving_car_, output);
  }

  // optional .apollo.dreamview.Object traffic_signal = 5;
  if (has_traffic_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->traffic_signal_, output);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  for (unsigned int i = 0, n = this->route_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->route_path(i), output);
  }

  // optional double routing_time = 7;
  if (has_routing_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->routing_time(), output);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  for (unsigned int i = 0, n = this->planning_trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->planning_trajectory(i), output);
  }

  // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
  if (has_main_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->main_stop_, output);
  }

  // optional .apollo.dreamview.Object main_decision = 10;
  if (has_main_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->main_decision_, output);
  }

  // optional double speed_limit = 11;
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->speed_limit(), output);
  }

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->delay_, output);
  }

  // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
  if (has_monitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->monitor_, output);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  for (unsigned int i = 0, n = this->notification_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->notification(i), output);
  }

  // optional string engage_advice = 15;
  if (has_engage_advice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engage_advice().data(), this->engage_advice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimulationWorld.engage_advice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->engage_advice(), output);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  if (!this->latency().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.LatencyEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->latency().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->latency().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SimulationWorld_LatencyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latency_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SimulationWorld_LatencyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it) {
        entry.reset(latency_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
  if (has_map_element_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->map_element_ids_, output);
  }

  // optional uint64 map_hash = 18;
  if (has_map_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->map_hash(), output);
  }

  // optional double map_radius = 19;
  if (has_map_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->map_radius(), output);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 20;
  if (has_planning_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->planning_data_, output);
  }

  // optional .apollo.dreamview.Object gps = 21;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->gps_, output);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 22;
  if (has_lane_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->lane_marker_, output);
  }

  // optional .apollo.dreamview.ControlData control_data = 23;
  if (has_control_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->control_data_, output);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  for (unsigned int i = 0, n = this->navigation_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->navigation_path(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.SimulationWorld)
}

::google::protobuf::uint8* SimulationWorld::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.SimulationWorld)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional uint32 sequence_num = 2;
  if (has_sequence_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence_num(), target);
  }

  // repeated .apollo.dreamview.Object object = 3;
  for (unsigned int i = 0, n = this->object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->object(i), false, target);
  }

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  if (has_auto_driving_car()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->auto_driving_car_, false, target);
  }

  // optional .apollo.dreamview.Object traffic_signal = 5;
  if (has_traffic_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->traffic_signal_, false, target);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  for (unsigned int i = 0, n = this->route_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->route_path(i), false, target);
  }

  // optional double routing_time = 7;
  if (has_routing_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->routing_time(), target);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  for (unsigned int i = 0, n = this->planning_trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->planning_trajectory(i), false, target);
  }

  // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
  if (has_main_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->main_stop_, false, target);
  }

  // optional .apollo.dreamview.Object main_decision = 10;
  if (has_main_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->main_decision_, false, target);
  }

  // optional double speed_limit = 11;
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->speed_limit(), target);
  }

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->delay_, false, target);
  }

  // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
  if (has_monitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->monitor_, false, target);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  for (unsigned int i = 0, n = this->notification_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->notification(i), false, target);
  }

  // optional string engage_advice = 15;
  if (has_engage_advice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engage_advice().data(), this->engage_advice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimulationWorld.engage_advice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->engage_advice(), target);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  if (!this->latency().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.LatencyEntry.key");
      }
    };

    if (deterministic &&
        this->latency().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->latency().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SimulationWorld_LatencyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latency_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SimulationWorld_LatencyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it) {
        entry.reset(latency_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
  if (has_map_element_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->map_element_ids_, false, target);
  }

  // optional uint64 map_hash = 18;
  if (has_map_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->map_hash(), target);
  }

  // optional double map_radius = 19;
  if (has_map_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->map_radius(), target);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 20;
  if (has_planning_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->planning_data_, false, target);
  }

  // optional .apollo.dreamview.Object gps = 21;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->gps_, false, target);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 22;
  if (has_lane_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->lane_marker_, false, target);
  }

  // optional .apollo.dreamview.ControlData control_data = 23;
  if (has_control_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->control_data_, false, target);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  for (unsigned int i = 0, n = this->navigation_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->navigation_path(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.SimulationWorld)
  return target;
}

int SimulationWorld::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.SimulationWorld)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 91u) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 sequence_num = 2;
    if (has_sequence_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_num());
    }

    // optional .apollo.dreamview.Object auto_driving_car = 4;
    if (has_auto_driving_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_driving_car_);
    }

    // optional .apollo.dreamview.Object traffic_signal = 5;
    if (has_traffic_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->traffic_signal_);
    }

    // optional double routing_time = 7;
    if (has_routing_time()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 24320u) {
    // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
    if (has_main_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->main_stop_);
    }

    // optional .apollo.dreamview.Object main_decision = 10;
    if (has_main_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->main_decision_);
    }

    // optional double speed_limit = 11;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.DelaysInMs delay = 12;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delay_);
    }

    // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
    if (has_monitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->monitor_);
    }

    // optional string engage_advice = 15;
    if (has_engage_advice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engage_advice());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
    if (has_map_element_ids()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_element_ids_);
    }

    // optional uint64 map_hash = 18;
    if (has_map_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_hash());
    }

    // optional double map_radius = 19;
    if (has_map_radius()) {
      total_size += 2 + 8;
    }

    // optional .apollo.planning_internal.PlanningData planning_data = 20;
    if (has_planning_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->planning_data_);
    }

    // optional .apollo.dreamview.Object gps = 21;
    if (has_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gps_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 22;
    if (has_lane_marker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_marker_);
    }

    // optional .apollo.dreamview.ControlData control_data = 23;
    if (has_control_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->control_data_);
    }

  }
  // repeated .apollo.dreamview.Object object = 3;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  total_size += 1 * this->route_path_size();
  for (int i = 0; i < this->route_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->route_path(i));
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  total_size += 1 * this->planning_trajectory_size();
  for (int i = 0; i < this->planning_trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planning_trajectory(i));
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  total_size += 1 * this->notification_size();
  for (int i = 0; i < this->notification_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notification(i));
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  total_size += 2 * this->latency_size();
  {
    ::google::protobuf::scoped_ptr<SimulationWorld_LatencyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
        it = this->latency().begin();
        it != this->latency().end(); ++it) {
      entry.reset(latency_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .apollo.common.Path navigation_path = 24;
  total_size += 2 * this->navigation_path_size();
  for (int i = 0; i < this->navigation_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->navigation_path(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimulationWorld::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.SimulationWorld)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimulationWorld* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulationWorld>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.SimulationWorld)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.SimulationWorld)
    MergeFrom(*source);
  }
}

void SimulationWorld::MergeFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.SimulationWorld)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_.MergeFrom(from.object_);
  route_path_.MergeFrom(from.route_path_);
  planning_trajectory_.MergeFrom(from.planning_trajectory_);
  notification_.MergeFrom(from.notification_);
  latency_.MergeFrom(from.latency_);
  navigation_path_.MergeFrom(from.navigation_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sequence_num()) {
      set_sequence_num(from.sequence_num());
    }
    if (from.has_auto_driving_car()) {
      mutable_auto_driving_car()->::apollo::dreamview::Object::MergeFrom(from.auto_driving_car());
    }
    if (from.has_traffic_signal()) {
      mutable_traffic_signal()->::apollo::dreamview::Object::MergeFrom(from.traffic_signal());
    }
    if (from.has_routing_time()) {
      set_routing_time(from.routing_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_main_stop()) {
      mutable_main_stop()->::apollo::dreamview::Object::MergeFrom(from.main_stop());
    }
    if (from.has_main_decision()) {
      mutable_main_decision()->::apollo::dreamview::Object::MergeFrom(from.main_decision());
    }
    if (from.has_speed_limit()) {
      set_speed_limit(from.speed_limit());
    }
    if (from.has_delay()) {
      mutable_delay()->::apollo::dreamview::DelaysInMs::MergeFrom(from.delay());
    }
    if (from.has_monitor()) {
      mutable_monitor()->::apollo::common::monitor::MonitorMessage::MergeFrom(from.monitor());
    }
    if (from.has_engage_advice()) {
      set_has_engage_advice();
      engage_advice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engage_advice_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_map_element_ids()) {
      mutable_map_element_ids()->::apollo::dreamview::MapElementIds::MergeFrom(from.map_element_ids());
    }
    if (from.has_map_hash()) {
      set_map_hash(from.map_hash());
    }
    if (from.has_map_radius()) {
      set_map_radius(from.map_radius());
    }
    if (from.has_planning_data()) {
      mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from.planning_data());
    }
    if (from.has_gps()) {
      mutable_gps()->::apollo::dreamview::Object::MergeFrom(from.gps());
    }
    if (from.has_lane_marker()) {
      mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (from.has_control_data()) {
      mutable_control_data()->::apollo::dreamview::ControlData::MergeFrom(from.control_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimulationWorld::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.SimulationWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationWorld::CopyFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.SimulationWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationWorld::IsInitialized() const {

  return true;
}

void SimulationWorld::Swap(SimulationWorld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulationWorld::InternalSwap(SimulationWorld* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(sequence_num_, other->sequence_num_);
  object_.UnsafeArenaSwap(&other->object_);
  std::swap(auto_driving_car_, other->auto_driving_car_);
  std::swap(traffic_signal_, other->traffic_signal_);
  route_path_.UnsafeArenaSwap(&other->route_path_);
  std::swap(routing_time_, other->routing_time_);
  planning_trajectory_.UnsafeArenaSwap(&other->planning_trajectory_);
  std::swap(main_stop_, other->main_stop_);
  std::swap(main_decision_, other->main_decision_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(delay_, other->delay_);
  std::swap(monitor_, other->monitor_);
  notification_.UnsafeArenaSwap(&other->notification_);
  engage_advice_.Swap(&other->engage_advice_);
  latency_.Swap(&other->latency_);
  std::swap(map_element_ids_, other->map_element_ids_);
  std::swap(map_hash_, other->map_hash_);
  std::swap(map_radius_, other->map_radius_);
  std::swap(planning_data_, other->planning_data_);
  std::swap(gps_, other->gps_);
  std::swap(lane_marker_, other->lane_marker_);
  std::swap(control_data_, other->control_data_);
  navigation_path_.UnsafeArenaSwap(&other->navigation_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimulationWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimulationWorld_descriptor_;
  metadata.reflection = SimulationWorld_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimulationWorld

// optional double timestamp = 1;
bool SimulationWorld::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimulationWorld::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void SimulationWorld::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimulationWorld::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double SimulationWorld::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.timestamp)
  return timestamp_;
}
 void SimulationWorld::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.timestamp)
}

// optional uint32 sequence_num = 2;
bool SimulationWorld::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimulationWorld::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SimulationWorld::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimulationWorld::clear_sequence_num() {
  sequence_num_ = 0u;
  clear_has_sequence_num();
}
 ::google::protobuf::uint32 SimulationWorld::sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.sequence_num)
  return sequence_num_;
}
 void SimulationWorld::set_sequence_num(::google::protobuf::uint32 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.sequence_num)
}

// repeated .apollo.dreamview.Object object = 3;
int SimulationWorld::object_size() const {
  return object_.size();
}
void SimulationWorld::clear_object() {
  object_.Clear();
}
const ::apollo::dreamview::Object& SimulationWorld::object(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.object)
  return object_.Get(index);
}
::apollo::dreamview::Object* SimulationWorld::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.object)
  return object_.Mutable(index);
}
::apollo::dreamview::Object* SimulationWorld::add_object() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.object)
  return object_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >*
SimulationWorld::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.object)
  return &object_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >&
SimulationWorld::object() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.object)
  return object_;
}

// optional .apollo.dreamview.Object auto_driving_car = 4;
bool SimulationWorld::has_auto_driving_car() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimulationWorld::set_has_auto_driving_car() {
  _has_bits_[0] |= 0x00000008u;
}
void SimulationWorld::clear_has_auto_driving_car() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimulationWorld::clear_auto_driving_car() {
  if (auto_driving_car_ != NULL) auto_driving_car_->::apollo::dreamview::Object::Clear();
  clear_has_auto_driving_car();
}
const ::apollo::dreamview::Object& SimulationWorld::auto_driving_car() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.auto_driving_car)
  return auto_driving_car_ != NULL ? *auto_driving_car_ : *default_instance_->auto_driving_car_;
}
::apollo::dreamview::Object* SimulationWorld::mutable_auto_driving_car() {
  set_has_auto_driving_car();
  if (auto_driving_car_ == NULL) {
    auto_driving_car_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.auto_driving_car)
  return auto_driving_car_;
}
::apollo::dreamview::Object* SimulationWorld::release_auto_driving_car() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.auto_driving_car)
  clear_has_auto_driving_car();
  ::apollo::dreamview::Object* temp = auto_driving_car_;
  auto_driving_car_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_auto_driving_car(::apollo::dreamview::Object* auto_driving_car) {
  delete auto_driving_car_;
  auto_driving_car_ = auto_driving_car;
  if (auto_driving_car) {
    set_has_auto_driving_car();
  } else {
    clear_has_auto_driving_car();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.auto_driving_car)
}

// optional .apollo.dreamview.Object traffic_signal = 5;
bool SimulationWorld::has_traffic_signal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SimulationWorld::set_has_traffic_signal() {
  _has_bits_[0] |= 0x00000010u;
}
void SimulationWorld::clear_has_traffic_signal() {
  _has_bits_[0] &= ~0x00000010u;
}
void SimulationWorld::clear_traffic_signal() {
  if (traffic_signal_ != NULL) traffic_signal_->::apollo::dreamview::Object::Clear();
  clear_has_traffic_signal();
}
const ::apollo::dreamview::Object& SimulationWorld::traffic_signal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.traffic_signal)
  return traffic_signal_ != NULL ? *traffic_signal_ : *default_instance_->traffic_signal_;
}
::apollo::dreamview::Object* SimulationWorld::mutable_traffic_signal() {
  set_has_traffic_signal();
  if (traffic_signal_ == NULL) {
    traffic_signal_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.traffic_signal)
  return traffic_signal_;
}
::apollo::dreamview::Object* SimulationWorld::release_traffic_signal() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.traffic_signal)
  clear_has_traffic_signal();
  ::apollo::dreamview::Object* temp = traffic_signal_;
  traffic_signal_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_traffic_signal(::apollo::dreamview::Object* traffic_signal) {
  delete traffic_signal_;
  traffic_signal_ = traffic_signal;
  if (traffic_signal) {
    set_has_traffic_signal();
  } else {
    clear_has_traffic_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.traffic_signal)
}

// repeated .apollo.dreamview.RoutePath route_path = 6;
int SimulationWorld::route_path_size() const {
  return route_path_.size();
}
void SimulationWorld::clear_route_path() {
  route_path_.Clear();
}
const ::apollo::dreamview::RoutePath& SimulationWorld::route_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.route_path)
  return route_path_.Get(index);
}
::apollo::dreamview::RoutePath* SimulationWorld::mutable_route_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.route_path)
  return route_path_.Mutable(index);
}
::apollo::dreamview::RoutePath* SimulationWorld::add_route_path() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.route_path)
  return route_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::RoutePath >*
SimulationWorld::mutable_route_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.route_path)
  return &route_path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::RoutePath >&
SimulationWorld::route_path() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.route_path)
  return route_path_;
}

// optional double routing_time = 7;
bool SimulationWorld::has_routing_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimulationWorld::set_has_routing_time() {
  _has_bits_[0] |= 0x00000040u;
}
void SimulationWorld::clear_has_routing_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimulationWorld::clear_routing_time() {
  routing_time_ = 0;
  clear_has_routing_time();
}
 double SimulationWorld::routing_time() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.routing_time)
  return routing_time_;
}
 void SimulationWorld::set_routing_time(double value) {
  set_has_routing_time();
  routing_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.routing_time)
}

// repeated .apollo.dreamview.Object planning_trajectory = 8;
int SimulationWorld::planning_trajectory_size() const {
  return planning_trajectory_.size();
}
void SimulationWorld::clear_planning_trajectory() {
  planning_trajectory_.Clear();
}
const ::apollo::dreamview::Object& SimulationWorld::planning_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_.Get(index);
}
::apollo::dreamview::Object* SimulationWorld::mutable_planning_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_.Mutable(index);
}
::apollo::dreamview::Object* SimulationWorld::add_planning_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >*
SimulationWorld::mutable_planning_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.planning_trajectory)
  return &planning_trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >&
SimulationWorld::planning_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_;
}

// optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
bool SimulationWorld::has_main_stop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimulationWorld::set_has_main_stop() {
  _has_bits_[0] |= 0x00000100u;
}
void SimulationWorld::clear_has_main_stop() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimulationWorld::clear_main_stop() {
  if (main_stop_ != NULL) main_stop_->::apollo::dreamview::Object::Clear();
  clear_has_main_stop();
}
const ::apollo::dreamview::Object& SimulationWorld::main_stop() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.main_stop)
  return main_stop_ != NULL ? *main_stop_ : *default_instance_->main_stop_;
}
::apollo::dreamview::Object* SimulationWorld::mutable_main_stop() {
  set_has_main_stop();
  if (main_stop_ == NULL) {
    main_stop_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.main_stop)
  return main_stop_;
}
::apollo::dreamview::Object* SimulationWorld::release_main_stop() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.main_stop)
  clear_has_main_stop();
  ::apollo::dreamview::Object* temp = main_stop_;
  main_stop_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_main_stop(::apollo::dreamview::Object* main_stop) {
  delete main_stop_;
  main_stop_ = main_stop;
  if (main_stop) {
    set_has_main_stop();
  } else {
    clear_has_main_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.main_stop)
}

// optional .apollo.dreamview.Object main_decision = 10;
bool SimulationWorld::has_main_decision() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimulationWorld::set_has_main_decision() {
  _has_bits_[0] |= 0x00000200u;
}
void SimulationWorld::clear_has_main_decision() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimulationWorld::clear_main_decision() {
  if (main_decision_ != NULL) main_decision_->::apollo::dreamview::Object::Clear();
  clear_has_main_decision();
}
const ::apollo::dreamview::Object& SimulationWorld::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.main_decision)
  return main_decision_ != NULL ? *main_decision_ : *default_instance_->main_decision_;
}
::apollo::dreamview::Object* SimulationWorld::mutable_main_decision() {
  set_has_main_decision();
  if (main_decision_ == NULL) {
    main_decision_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.main_decision)
  return main_decision_;
}
::apollo::dreamview::Object* SimulationWorld::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.main_decision)
  clear_has_main_decision();
  ::apollo::dreamview::Object* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_main_decision(::apollo::dreamview::Object* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    set_has_main_decision();
  } else {
    clear_has_main_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.main_decision)
}

// optional double speed_limit = 11;
bool SimulationWorld::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimulationWorld::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000400u;
}
void SimulationWorld::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimulationWorld::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
 double SimulationWorld::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.speed_limit)
  return speed_limit_;
}
 void SimulationWorld::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.speed_limit)
}

// optional .apollo.dreamview.DelaysInMs delay = 12;
bool SimulationWorld::has_delay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimulationWorld::set_has_delay() {
  _has_bits_[0] |= 0x00000800u;
}
void SimulationWorld::clear_has_delay() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimulationWorld::clear_delay() {
  if (delay_ != NULL) delay_->::apollo::dreamview::DelaysInMs::Clear();
  clear_has_delay();
}
const ::apollo::dreamview::DelaysInMs& SimulationWorld::delay() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.delay)
  return delay_ != NULL ? *delay_ : *default_instance_->delay_;
}
::apollo::dreamview::DelaysInMs* SimulationWorld::mutable_delay() {
  set_has_delay();
  if (delay_ == NULL) {
    delay_ = new ::apollo::dreamview::DelaysInMs;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.delay)
  return delay_;
}
::apollo::dreamview::DelaysInMs* SimulationWorld::release_delay() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.delay)
  clear_has_delay();
  ::apollo::dreamview::DelaysInMs* temp = delay_;
  delay_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_delay(::apollo::dreamview::DelaysInMs* delay) {
  delete delay_;
  delay_ = delay;
  if (delay) {
    set_has_delay();
  } else {
    clear_has_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.delay)
}

// optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
bool SimulationWorld::has_monitor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimulationWorld::set_has_monitor() {
  _has_bits_[0] |= 0x00001000u;
}
void SimulationWorld::clear_has_monitor() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimulationWorld::clear_monitor() {
  if (monitor_ != NULL) monitor_->::apollo::common::monitor::MonitorMessage::Clear();
  clear_has_monitor();
}
const ::apollo::common::monitor::MonitorMessage& SimulationWorld::monitor() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.monitor)
  return monitor_ != NULL ? *monitor_ : *default_instance_->monitor_;
}
::apollo::common::monitor::MonitorMessage* SimulationWorld::mutable_monitor() {
  set_has_monitor();
  if (monitor_ == NULL) {
    monitor_ = new ::apollo::common::monitor::MonitorMessage;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.monitor)
  return monitor_;
}
::apollo::common::monitor::MonitorMessage* SimulationWorld::release_monitor() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.monitor)
  clear_has_monitor();
  ::apollo::common::monitor::MonitorMessage* temp = monitor_;
  monitor_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_monitor(::apollo::common::monitor::MonitorMessage* monitor) {
  delete monitor_;
  monitor_ = monitor;
  if (monitor) {
    set_has_monitor();
  } else {
    clear_has_monitor();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.monitor)
}

// repeated .apollo.dreamview.Notification notification = 14;
int SimulationWorld::notification_size() const {
  return notification_.size();
}
void SimulationWorld::clear_notification() {
  notification_.Clear();
}
const ::apollo::dreamview::Notification& SimulationWorld::notification(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.notification)
  return notification_.Get(index);
}
::apollo::dreamview::Notification* SimulationWorld::mutable_notification(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.notification)
  return notification_.Mutable(index);
}
::apollo::dreamview::Notification* SimulationWorld::add_notification() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.notification)
  return notification_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Notification >*
SimulationWorld::mutable_notification() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.notification)
  return &notification_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Notification >&
SimulationWorld::notification() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.notification)
  return notification_;
}

// optional string engage_advice = 15;
bool SimulationWorld::has_engage_advice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimulationWorld::set_has_engage_advice() {
  _has_bits_[0] |= 0x00004000u;
}
void SimulationWorld::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimulationWorld::clear_engage_advice() {
  engage_advice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_engage_advice();
}
 const ::std::string& SimulationWorld::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.engage_advice)
  return engage_advice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimulationWorld::set_engage_advice(const ::std::string& value) {
  set_has_engage_advice();
  engage_advice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.engage_advice)
}
 void SimulationWorld::set_engage_advice(const char* value) {
  set_has_engage_advice();
  engage_advice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimulationWorld.engage_advice)
}
 void SimulationWorld::set_engage_advice(const char* value, size_t size) {
  set_has_engage_advice();
  engage_advice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimulationWorld.engage_advice)
}
 ::std::string* SimulationWorld::mutable_engage_advice() {
  set_has_engage_advice();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.engage_advice)
  return engage_advice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimulationWorld::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.engage_advice)
  clear_has_engage_advice();
  return engage_advice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimulationWorld::set_allocated_engage_advice(::std::string* engage_advice) {
  if (engage_advice != NULL) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  engage_advice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engage_advice);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.engage_advice)
}

// map<string, .apollo.dreamview.Latency> latency = 16;
int SimulationWorld::latency_size() const {
  return latency_.size();
}
void SimulationWorld::clear_latency() {
  latency_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >&
SimulationWorld::latency() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.SimulationWorld.latency)
  return latency_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >*
SimulationWorld::mutable_latency() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.SimulationWorld.latency)
  return latency_.MutableMap();
}

// optional .apollo.dreamview.MapElementIds map_element_ids = 17;
bool SimulationWorld::has_map_element_ids() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimulationWorld::set_has_map_element_ids() {
  _has_bits_[0] |= 0x00010000u;
}
void SimulationWorld::clear_has_map_element_ids() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimulationWorld::clear_map_element_ids() {
  if (map_element_ids_ != NULL) map_element_ids_->::apollo::dreamview::MapElementIds::Clear();
  clear_has_map_element_ids();
}
const ::apollo::dreamview::MapElementIds& SimulationWorld::map_element_ids() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.map_element_ids)
  return map_element_ids_ != NULL ? *map_element_ids_ : *default_instance_->map_element_ids_;
}
::apollo::dreamview::MapElementIds* SimulationWorld::mutable_map_element_ids() {
  set_has_map_element_ids();
  if (map_element_ids_ == NULL) {
    map_element_ids_ = new ::apollo::dreamview::MapElementIds;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.map_element_ids)
  return map_element_ids_;
}
::apollo::dreamview::MapElementIds* SimulationWorld::release_map_element_ids() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.map_element_ids)
  clear_has_map_element_ids();
  ::apollo::dreamview::MapElementIds* temp = map_element_ids_;
  map_element_ids_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_map_element_ids(::apollo::dreamview::MapElementIds* map_element_ids) {
  delete map_element_ids_;
  map_element_ids_ = map_element_ids;
  if (map_element_ids) {
    set_has_map_element_ids();
  } else {
    clear_has_map_element_ids();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.map_element_ids)
}

// optional uint64 map_hash = 18;
bool SimulationWorld::has_map_hash() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SimulationWorld::set_has_map_hash() {
  _has_bits_[0] |= 0x00020000u;
}
void SimulationWorld::clear_has_map_hash() {
  _has_bits_[0] &= ~0x00020000u;
}
void SimulationWorld::clear_map_hash() {
  map_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_map_hash();
}
 ::google::protobuf::uint64 SimulationWorld::map_hash() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.map_hash)
  return map_hash_;
}
 void SimulationWorld::set_map_hash(::google::protobuf::uint64 value) {
  set_has_map_hash();
  map_hash_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.map_hash)
}

// optional double map_radius = 19;
bool SimulationWorld::has_map_radius() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SimulationWorld::set_has_map_radius() {
  _has_bits_[0] |= 0x00040000u;
}
void SimulationWorld::clear_has_map_radius() {
  _has_bits_[0] &= ~0x00040000u;
}
void SimulationWorld::clear_map_radius() {
  map_radius_ = 0;
  clear_has_map_radius();
}
 double SimulationWorld::map_radius() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.map_radius)
  return map_radius_;
}
 void SimulationWorld::set_map_radius(double value) {
  set_has_map_radius();
  map_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.map_radius)
}

// optional .apollo.planning_internal.PlanningData planning_data = 20;
bool SimulationWorld::has_planning_data() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SimulationWorld::set_has_planning_data() {
  _has_bits_[0] |= 0x00080000u;
}
void SimulationWorld::clear_has_planning_data() {
  _has_bits_[0] &= ~0x00080000u;
}
void SimulationWorld::clear_planning_data() {
  if (planning_data_ != NULL) planning_data_->::apollo::planning_internal::PlanningData::Clear();
  clear_has_planning_data();
}
const ::apollo::planning_internal::PlanningData& SimulationWorld::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.planning_data)
  return planning_data_ != NULL ? *planning_data_ : *default_instance_->planning_data_;
}
::apollo::planning_internal::PlanningData* SimulationWorld::mutable_planning_data() {
  set_has_planning_data();
  if (planning_data_ == NULL) {
    planning_data_ = new ::apollo::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.planning_data)
  return planning_data_;
}
::apollo::planning_internal::PlanningData* SimulationWorld::release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.planning_data)
  clear_has_planning_data();
  ::apollo::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    set_has_planning_data();
  } else {
    clear_has_planning_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.planning_data)
}

// optional .apollo.dreamview.Object gps = 21;
bool SimulationWorld::has_gps() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SimulationWorld::set_has_gps() {
  _has_bits_[0] |= 0x00100000u;
}
void SimulationWorld::clear_has_gps() {
  _has_bits_[0] &= ~0x00100000u;
}
void SimulationWorld::clear_gps() {
  if (gps_ != NULL) gps_->::apollo::dreamview::Object::Clear();
  clear_has_gps();
}
const ::apollo::dreamview::Object& SimulationWorld::gps() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.gps)
  return gps_ != NULL ? *gps_ : *default_instance_->gps_;
}
::apollo::dreamview::Object* SimulationWorld::mutable_gps() {
  set_has_gps();
  if (gps_ == NULL) {
    gps_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.gps)
  return gps_;
}
::apollo::dreamview::Object* SimulationWorld::release_gps() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.gps)
  clear_has_gps();
  ::apollo::dreamview::Object* temp = gps_;
  gps_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_gps(::apollo::dreamview::Object* gps) {
  delete gps_;
  gps_ = gps;
  if (gps) {
    set_has_gps();
  } else {
    clear_has_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.gps)
}

// optional .apollo.perception.LaneMarkers lane_marker = 22;
bool SimulationWorld::has_lane_marker() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SimulationWorld::set_has_lane_marker() {
  _has_bits_[0] |= 0x00200000u;
}
void SimulationWorld::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00200000u;
}
void SimulationWorld::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
  clear_has_lane_marker();
}
const ::apollo::perception::LaneMarkers& SimulationWorld::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_ : *default_instance_->lane_marker_;
}
::apollo::perception::LaneMarkers* SimulationWorld::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::apollo::perception::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.lane_marker)
  return lane_marker_;
}
::apollo::perception::LaneMarkers* SimulationWorld::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.lane_marker)
  clear_has_lane_marker();
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.lane_marker)
}

// optional .apollo.dreamview.ControlData control_data = 23;
bool SimulationWorld::has_control_data() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SimulationWorld::set_has_control_data() {
  _has_bits_[0] |= 0x00400000u;
}
void SimulationWorld::clear_has_control_data() {
  _has_bits_[0] &= ~0x00400000u;
}
void SimulationWorld::clear_control_data() {
  if (control_data_ != NULL) control_data_->::apollo::dreamview::ControlData::Clear();
  clear_has_control_data();
}
const ::apollo::dreamview::ControlData& SimulationWorld::control_data() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.control_data)
  return control_data_ != NULL ? *control_data_ : *default_instance_->control_data_;
}
::apollo::dreamview::ControlData* SimulationWorld::mutable_control_data() {
  set_has_control_data();
  if (control_data_ == NULL) {
    control_data_ = new ::apollo::dreamview::ControlData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.control_data)
  return control_data_;
}
::apollo::dreamview::ControlData* SimulationWorld::release_control_data() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.control_data)
  clear_has_control_data();
  ::apollo::dreamview::ControlData* temp = control_data_;
  control_data_ = NULL;
  return temp;
}
void SimulationWorld::set_allocated_control_data(::apollo::dreamview::ControlData* control_data) {
  delete control_data_;
  control_data_ = control_data;
  if (control_data) {
    set_has_control_data();
  } else {
    clear_has_control_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.control_data)
}

// repeated .apollo.common.Path navigation_path = 24;
int SimulationWorld::navigation_path_size() const {
  return navigation_path_.size();
}
void SimulationWorld::clear_navigation_path() {
  navigation_path_.Clear();
}
const ::apollo::common::Path& SimulationWorld::navigation_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.navigation_path)
  return navigation_path_.Get(index);
}
::apollo::common::Path* SimulationWorld::mutable_navigation_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.navigation_path)
  return navigation_path_.Mutable(index);
}
::apollo::common::Path* SimulationWorld::add_navigation_path() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.navigation_path)
  return navigation_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Path >*
SimulationWorld::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.navigation_path)
  return &navigation_path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >&
SimulationWorld::navigation_path() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.navigation_path)
  return navigation_path_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
