// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/planning_config.proto

#ifndef PROTOBUF_planning_2fplanning_5fconfig_2eproto__INCLUDED
#define PROTOBUF_planning_2fplanning_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "planning/dp_poly_path_config.pb.h"
#include "planning/dp_st_speed_config.pb.h"
#include "planning/qp_spline_path_config.pb.h"
#include "planning/qp_st_speed_config.pb.h"
#include "planning/poly_st_speed_config.pb.h"
#include "planning/navi_path_decider_config.pb.h"
#include "planning/navi_speed_decider_config.pb.h"
#include "planning/navi_obstacle_decider_config.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

class NavigationPlanningConfig;
class PathDeciderConfig;
class PlannerNaviConfig;
class PlannerOnRoadConfig;
class PlanningConfig;
class RtkPlanningConfig;
class ScenarioConfig;
class ScenarioConfig_ScenarioTaskConfig;
class StandardPlanningConfig;

enum ScenarioConfig_ScenarioType {
  ScenarioConfig_ScenarioType_LANE_FOLLOW = 0,
  ScenarioConfig_ScenarioType_CHANGE_LANE = 1,
  ScenarioConfig_ScenarioType_SIDE_PASS = 2,
  ScenarioConfig_ScenarioType_APPROACH = 3,
  ScenarioConfig_ScenarioType_INTERSECTION_STOP_SIGN_FOUR_WAY = 4,
  ScenarioConfig_ScenarioType_INTERSECTION_STOP_SIGN_ONE_OR_TWO_WAY = 5,
  ScenarioConfig_ScenarioType_INTERSECTION_TRAFFIC_LIGHT_LEFT_TURN = 6,
  ScenarioConfig_ScenarioType_INTERSECTION_TRAFFIC_LIGHT_RIGHT_TURN = 7,
  ScenarioConfig_ScenarioType_INTERSECTION_TRAFFIC_LIGHT_GO_THROUGH = 8
};
bool ScenarioConfig_ScenarioType_IsValid(int value);
const ScenarioConfig_ScenarioType ScenarioConfig_ScenarioType_ScenarioType_MIN = ScenarioConfig_ScenarioType_LANE_FOLLOW;
const ScenarioConfig_ScenarioType ScenarioConfig_ScenarioType_ScenarioType_MAX = ScenarioConfig_ScenarioType_INTERSECTION_TRAFFIC_LIGHT_GO_THROUGH;
const int ScenarioConfig_ScenarioType_ScenarioType_ARRAYSIZE = ScenarioConfig_ScenarioType_ScenarioType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScenarioConfig_ScenarioType_descriptor();
inline const ::std::string& ScenarioConfig_ScenarioType_Name(ScenarioConfig_ScenarioType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScenarioConfig_ScenarioType_descriptor(), value);
}
inline bool ScenarioConfig_ScenarioType_Parse(
    const ::std::string& name, ScenarioConfig_ScenarioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScenarioConfig_ScenarioType>(
    ScenarioConfig_ScenarioType_descriptor(), name, value);
}
enum TaskType {
  DP_POLY_PATH_OPTIMIZER = 0,
  DP_ST_SPEED_OPTIMIZER = 1,
  QP_SPLINE_PATH_OPTIMIZER = 2,
  QP_SPLINE_ST_SPEED_OPTIMIZER = 3,
  PATH_DECIDER = 4,
  SPEED_DECIDER = 5,
  POLY_ST_SPEED_OPTIMIZER = 6,
  NAVI_PATH_DECIDER = 7,
  NAVI_SPEED_DECIDER = 8,
  NAVI_OBSTACLE_DECIDER = 9
};
bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = DP_POLY_PATH_OPTIMIZER;
const TaskType TaskType_MAX = NAVI_OBSTACLE_DECIDER;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
enum PlannerType {
  RTK = 0,
  ONROAD = 1,
  OPENSPACE = 2,
  NAVI = 3
};
bool PlannerType_IsValid(int value);
const PlannerType PlannerType_MIN = RTK;
const PlannerType PlannerType_MAX = NAVI;
const int PlannerType_ARRAYSIZE = PlannerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlannerType_descriptor();
inline const ::std::string& PlannerType_Name(PlannerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlannerType_descriptor(), value);
}
inline bool PlannerType_Parse(
    const ::std::string& name, PlannerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlannerType>(
    PlannerType_descriptor(), name, value);
}
// ===================================================================

class PathDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathDeciderConfig) */ {
 public:
  PathDeciderConfig();
  virtual ~PathDeciderConfig();

  PathDeciderConfig(const PathDeciderConfig& from);

  inline PathDeciderConfig& operator=(const PathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathDeciderConfig& default_instance();

  void Swap(PathDeciderConfig* other);

  // implements Message ----------------------------------------------

  inline PathDeciderConfig* New() const { return New(NULL); }

  PathDeciderConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathDeciderConfig& from);
  void MergeFrom(const PathDeciderConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.PathDeciderConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PathDeciderConfig* default_instance_;
};
// -------------------------------------------------------------------

class ScenarioConfig_ScenarioTaskConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioConfig.ScenarioTaskConfig) */ {
 public:
  ScenarioConfig_ScenarioTaskConfig();
  virtual ~ScenarioConfig_ScenarioTaskConfig();

  ScenarioConfig_ScenarioTaskConfig(const ScenarioConfig_ScenarioTaskConfig& from);

  inline ScenarioConfig_ScenarioTaskConfig& operator=(const ScenarioConfig_ScenarioTaskConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenarioConfig_ScenarioTaskConfig& default_instance();

  enum TaskConfigCase {
    kDpPolyPathConfig = 2,
    kDpStSpeedConfig = 3,
    kQpSplinePathConfig = 4,
    kQpStSpeedConfig = 5,
    kPolyStSpeedConfig = 6,
    kPathDeciderConfig = 7,
    TASK_CONFIG_NOT_SET = 0,
  };

  void Swap(ScenarioConfig_ScenarioTaskConfig* other);

  // implements Message ----------------------------------------------

  inline ScenarioConfig_ScenarioTaskConfig* New() const { return New(NULL); }

  ScenarioConfig_ScenarioTaskConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScenarioConfig_ScenarioTaskConfig& from);
  void MergeFrom(const ScenarioConfig_ScenarioTaskConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScenarioConfig_ScenarioTaskConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.TaskType task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  ::apollo::planning::TaskType task() const;
  void set_task(::apollo::planning::TaskType value);

  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  bool has_dp_poly_path_config() const;
  void clear_dp_poly_path_config();
  static const int kDpPolyPathConfigFieldNumber = 2;
  const ::apollo::planning::DpPolyPathConfig& dp_poly_path_config() const;
  ::apollo::planning::DpPolyPathConfig* mutable_dp_poly_path_config();
  ::apollo::planning::DpPolyPathConfig* release_dp_poly_path_config();
  void set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config);

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  bool has_dp_st_speed_config() const;
  void clear_dp_st_speed_config();
  static const int kDpStSpeedConfigFieldNumber = 3;
  const ::apollo::planning::DpStSpeedConfig& dp_st_speed_config() const;
  ::apollo::planning::DpStSpeedConfig* mutable_dp_st_speed_config();
  ::apollo::planning::DpStSpeedConfig* release_dp_st_speed_config();
  void set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config);

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  bool has_qp_spline_path_config() const;
  void clear_qp_spline_path_config();
  static const int kQpSplinePathConfigFieldNumber = 4;
  const ::apollo::planning::QpSplinePathConfig& qp_spline_path_config() const;
  ::apollo::planning::QpSplinePathConfig* mutable_qp_spline_path_config();
  ::apollo::planning::QpSplinePathConfig* release_qp_spline_path_config();
  void set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config);

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  bool has_qp_st_speed_config() const;
  void clear_qp_st_speed_config();
  static const int kQpStSpeedConfigFieldNumber = 5;
  const ::apollo::planning::QpStSpeedConfig& qp_st_speed_config() const;
  ::apollo::planning::QpStSpeedConfig* mutable_qp_st_speed_config();
  ::apollo::planning::QpStSpeedConfig* release_qp_st_speed_config();
  void set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config);

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  bool has_poly_st_speed_config() const;
  void clear_poly_st_speed_config();
  static const int kPolyStSpeedConfigFieldNumber = 6;
  const ::apollo::planning::PolyStSpeedConfig& poly_st_speed_config() const;
  ::apollo::planning::PolyStSpeedConfig* mutable_poly_st_speed_config();
  ::apollo::planning::PolyStSpeedConfig* release_poly_st_speed_config();
  void set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config);

  // optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
  bool has_path_decider_config() const;
  void clear_path_decider_config();
  static const int kPathDeciderConfigFieldNumber = 7;
  const ::apollo::planning::PathDeciderConfig& path_decider_config() const;
  ::apollo::planning::PathDeciderConfig* mutable_path_decider_config();
  ::apollo::planning::PathDeciderConfig* release_path_decider_config();
  void set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config);

  TaskConfigCase task_config_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioConfig.ScenarioTaskConfig)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_dp_poly_path_config();
  inline void set_has_dp_st_speed_config();
  inline void set_has_qp_spline_path_config();
  inline void set_has_qp_st_speed_config();
  inline void set_has_poly_st_speed_config();
  inline void set_has_path_decider_config();

  inline bool has_task_config() const;
  void clear_task_config();
  inline void clear_has_task_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int task_;
  union TaskConfigUnion {
    TaskConfigUnion() {}
    ::apollo::planning::DpPolyPathConfig* dp_poly_path_config_;
    ::apollo::planning::DpStSpeedConfig* dp_st_speed_config_;
    ::apollo::planning::QpSplinePathConfig* qp_spline_path_config_;
    ::apollo::planning::QpStSpeedConfig* qp_st_speed_config_;
    ::apollo::planning::PolyStSpeedConfig* poly_st_speed_config_;
    ::apollo::planning::PathDeciderConfig* path_decider_config_;
  } task_config_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ScenarioConfig_ScenarioTaskConfig* default_instance_;
};
// -------------------------------------------------------------------

class ScenarioConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioConfig) */ {
 public:
  ScenarioConfig();
  virtual ~ScenarioConfig();

  ScenarioConfig(const ScenarioConfig& from);

  inline ScenarioConfig& operator=(const ScenarioConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenarioConfig& default_instance();

  void Swap(ScenarioConfig* other);

  // implements Message ----------------------------------------------

  inline ScenarioConfig* New() const { return New(NULL); }

  ScenarioConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScenarioConfig& from);
  void MergeFrom(const ScenarioConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScenarioConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ScenarioConfig_ScenarioTaskConfig ScenarioTaskConfig;

  typedef ScenarioConfig_ScenarioType ScenarioType;
  static const ScenarioType LANE_FOLLOW =
    ScenarioConfig_ScenarioType_LANE_FOLLOW;
  static const ScenarioType CHANGE_LANE =
    ScenarioConfig_ScenarioType_CHANGE_LANE;
  static const ScenarioType SIDE_PASS =
    ScenarioConfig_ScenarioType_SIDE_PASS;
  static const ScenarioType APPROACH =
    ScenarioConfig_ScenarioType_APPROACH;
  static const ScenarioType INTERSECTION_STOP_SIGN_FOUR_WAY =
    ScenarioConfig_ScenarioType_INTERSECTION_STOP_SIGN_FOUR_WAY;
  static const ScenarioType INTERSECTION_STOP_SIGN_ONE_OR_TWO_WAY =
    ScenarioConfig_ScenarioType_INTERSECTION_STOP_SIGN_ONE_OR_TWO_WAY;
  static const ScenarioType INTERSECTION_TRAFFIC_LIGHT_LEFT_TURN =
    ScenarioConfig_ScenarioType_INTERSECTION_TRAFFIC_LIGHT_LEFT_TURN;
  static const ScenarioType INTERSECTION_TRAFFIC_LIGHT_RIGHT_TURN =
    ScenarioConfig_ScenarioType_INTERSECTION_TRAFFIC_LIGHT_RIGHT_TURN;
  static const ScenarioType INTERSECTION_TRAFFIC_LIGHT_GO_THROUGH =
    ScenarioConfig_ScenarioType_INTERSECTION_TRAFFIC_LIGHT_GO_THROUGH;
  static inline bool ScenarioType_IsValid(int value) {
    return ScenarioConfig_ScenarioType_IsValid(value);
  }
  static const ScenarioType ScenarioType_MIN =
    ScenarioConfig_ScenarioType_ScenarioType_MIN;
  static const ScenarioType ScenarioType_MAX =
    ScenarioConfig_ScenarioType_ScenarioType_MAX;
  static const int ScenarioType_ARRAYSIZE =
    ScenarioConfig_ScenarioType_ScenarioType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScenarioType_descriptor() {
    return ScenarioConfig_ScenarioType_descriptor();
  }
  static inline const ::std::string& ScenarioType_Name(ScenarioType value) {
    return ScenarioConfig_ScenarioType_Name(value);
  }
  static inline bool ScenarioType_Parse(const ::std::string& name,
      ScenarioType* value) {
    return ScenarioConfig_ScenarioType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  bool has_scenario_type() const;
  void clear_scenario_type();
  static const int kScenarioTypeFieldNumber = 1;
  ::apollo::planning::ScenarioConfig_ScenarioType scenario_type() const;
  void set_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value);

  // repeated .apollo.planning.ScenarioConfig.ScenarioTaskConfig scenario_task_config = 2;
  int scenario_task_config_size() const;
  void clear_scenario_task_config();
  static const int kScenarioTaskConfigFieldNumber = 2;
  const ::apollo::planning::ScenarioConfig_ScenarioTaskConfig& scenario_task_config(int index) const;
  ::apollo::planning::ScenarioConfig_ScenarioTaskConfig* mutable_scenario_task_config(int index);
  ::apollo::planning::ScenarioConfig_ScenarioTaskConfig* add_scenario_task_config();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ScenarioConfig_ScenarioTaskConfig >*
      mutable_scenario_task_config();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ScenarioConfig_ScenarioTaskConfig >&
      scenario_task_config() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioConfig)
 private:
  inline void set_has_scenario_type();
  inline void clear_has_scenario_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ScenarioConfig_ScenarioTaskConfig > scenario_task_config_;
  int scenario_type_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ScenarioConfig* default_instance_;
};
// -------------------------------------------------------------------

class PlannerOnRoadConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlannerOnRoadConfig) */ {
 public:
  PlannerOnRoadConfig();
  virtual ~PlannerOnRoadConfig();

  PlannerOnRoadConfig(const PlannerOnRoadConfig& from);

  inline PlannerOnRoadConfig& operator=(const PlannerOnRoadConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerOnRoadConfig& default_instance();

  void Swap(PlannerOnRoadConfig* other);

  // implements Message ----------------------------------------------

  inline PlannerOnRoadConfig* New() const { return New(NULL); }

  PlannerOnRoadConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerOnRoadConfig& from);
  void MergeFrom(const PlannerOnRoadConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlannerOnRoadConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  int scenario_type_size() const;
  void clear_scenario_type();
  static const int kScenarioTypeFieldNumber = 1;
  ::apollo::planning::ScenarioConfig_ScenarioType scenario_type(int index) const;
  void set_scenario_type(int index, ::apollo::planning::ScenarioConfig_ScenarioType value);
  void add_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value);
  const ::google::protobuf::RepeatedField<int>& scenario_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_scenario_type();

  // @@protoc_insertion_point(class_scope:apollo.planning.PlannerOnRoadConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> scenario_type_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PlannerOnRoadConfig* default_instance_;
};
// -------------------------------------------------------------------

class PlannerNaviConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlannerNaviConfig) */ {
 public:
  PlannerNaviConfig();
  virtual ~PlannerNaviConfig();

  PlannerNaviConfig(const PlannerNaviConfig& from);

  inline PlannerNaviConfig& operator=(const PlannerNaviConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerNaviConfig& default_instance();

  void Swap(PlannerNaviConfig* other);

  // implements Message ----------------------------------------------

  inline PlannerNaviConfig* New() const { return New(NULL); }

  PlannerNaviConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerNaviConfig& from);
  void MergeFrom(const PlannerNaviConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlannerNaviConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.TaskType task = 1;
  int task_size() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  ::apollo::planning::TaskType task(int index) const;
  void set_task(int index, ::apollo::planning::TaskType value);
  void add_task(::apollo::planning::TaskType value);
  const ::google::protobuf::RepeatedField<int>& task() const;
  ::google::protobuf::RepeatedField<int>* mutable_task();

  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  bool has_navi_path_decider_config() const;
  void clear_navi_path_decider_config();
  static const int kNaviPathDeciderConfigFieldNumber = 2;
  const ::apollo::planning::NaviPathDeciderConfig& navi_path_decider_config() const;
  ::apollo::planning::NaviPathDeciderConfig* mutable_navi_path_decider_config();
  ::apollo::planning::NaviPathDeciderConfig* release_navi_path_decider_config();
  void set_allocated_navi_path_decider_config(::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config);

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  bool has_navi_speed_decider_config() const;
  void clear_navi_speed_decider_config();
  static const int kNaviSpeedDeciderConfigFieldNumber = 3;
  const ::apollo::planning::NaviSpeedDeciderConfig& navi_speed_decider_config() const;
  ::apollo::planning::NaviSpeedDeciderConfig* mutable_navi_speed_decider_config();
  ::apollo::planning::NaviSpeedDeciderConfig* release_navi_speed_decider_config();
  void set_allocated_navi_speed_decider_config(::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config);

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  bool has_navi_obstacle_decider_config() const;
  void clear_navi_obstacle_decider_config();
  static const int kNaviObstacleDeciderConfigFieldNumber = 4;
  const ::apollo::planning::NaviObstacleDeciderConfig& navi_obstacle_decider_config() const;
  ::apollo::planning::NaviObstacleDeciderConfig* mutable_navi_obstacle_decider_config();
  ::apollo::planning::NaviObstacleDeciderConfig* release_navi_obstacle_decider_config();
  void set_allocated_navi_obstacle_decider_config(::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.PlannerNaviConfig)
 private:
  inline void set_has_navi_path_decider_config();
  inline void clear_has_navi_path_decider_config();
  inline void set_has_navi_speed_decider_config();
  inline void clear_has_navi_speed_decider_config();
  inline void set_has_navi_obstacle_decider_config();
  inline void clear_has_navi_obstacle_decider_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> task_;
  ::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config_;
  ::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config_;
  ::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PlannerNaviConfig* default_instance_;
};
// -------------------------------------------------------------------

class RtkPlanningConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.RtkPlanningConfig) */ {
 public:
  RtkPlanningConfig();
  virtual ~RtkPlanningConfig();

  RtkPlanningConfig(const RtkPlanningConfig& from);

  inline RtkPlanningConfig& operator=(const RtkPlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RtkPlanningConfig& default_instance();

  void Swap(RtkPlanningConfig* other);

  // implements Message ----------------------------------------------

  inline RtkPlanningConfig* New() const { return New(NULL); }

  RtkPlanningConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtkPlanningConfig& from);
  void MergeFrom(const RtkPlanningConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtkPlanningConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.PlannerType planner_type = 1;
  bool has_planner_type() const;
  void clear_planner_type();
  static const int kPlannerTypeFieldNumber = 1;
  ::apollo::planning::PlannerType planner_type() const;
  void set_planner_type(::apollo::planning::PlannerType value);

  // @@protoc_insertion_point(class_scope:apollo.planning.RtkPlanningConfig)
 private:
  inline void set_has_planner_type();
  inline void clear_has_planner_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int planner_type_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RtkPlanningConfig* default_instance_;
};
// -------------------------------------------------------------------

class StandardPlanningConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StandardPlanningConfig) */ {
 public:
  StandardPlanningConfig();
  virtual ~StandardPlanningConfig();

  StandardPlanningConfig(const StandardPlanningConfig& from);

  inline StandardPlanningConfig& operator=(const StandardPlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StandardPlanningConfig& default_instance();

  void Swap(StandardPlanningConfig* other);

  // implements Message ----------------------------------------------

  inline StandardPlanningConfig* New() const { return New(NULL); }

  StandardPlanningConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StandardPlanningConfig& from);
  void MergeFrom(const StandardPlanningConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StandardPlanningConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.PlannerType planner_type = 1;
  int planner_type_size() const;
  void clear_planner_type();
  static const int kPlannerTypeFieldNumber = 1;
  ::apollo::planning::PlannerType planner_type(int index) const;
  void set_planner_type(int index, ::apollo::planning::PlannerType value);
  void add_planner_type(::apollo::planning::PlannerType value);
  const ::google::protobuf::RepeatedField<int>& planner_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_planner_type();

  // optional .apollo.planning.PlannerOnRoadConfig planner_onroad_config = 2;
  bool has_planner_onroad_config() const;
  void clear_planner_onroad_config();
  static const int kPlannerOnroadConfigFieldNumber = 2;
  const ::apollo::planning::PlannerOnRoadConfig& planner_onroad_config() const;
  ::apollo::planning::PlannerOnRoadConfig* mutable_planner_onroad_config();
  ::apollo::planning::PlannerOnRoadConfig* release_planner_onroad_config();
  void set_allocated_planner_onroad_config(::apollo::planning::PlannerOnRoadConfig* planner_onroad_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.StandardPlanningConfig)
 private:
  inline void set_has_planner_onroad_config();
  inline void clear_has_planner_onroad_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> planner_type_;
  ::apollo::planning::PlannerOnRoadConfig* planner_onroad_config_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static StandardPlanningConfig* default_instance_;
};
// -------------------------------------------------------------------

class NavigationPlanningConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NavigationPlanningConfig) */ {
 public:
  NavigationPlanningConfig();
  virtual ~NavigationPlanningConfig();

  NavigationPlanningConfig(const NavigationPlanningConfig& from);

  inline NavigationPlanningConfig& operator=(const NavigationPlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationPlanningConfig& default_instance();

  void Swap(NavigationPlanningConfig* other);

  // implements Message ----------------------------------------------

  inline NavigationPlanningConfig* New() const { return New(NULL); }

  NavigationPlanningConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavigationPlanningConfig& from);
  void MergeFrom(const NavigationPlanningConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NavigationPlanningConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.PlannerType planner_type = 1;
  int planner_type_size() const;
  void clear_planner_type();
  static const int kPlannerTypeFieldNumber = 1;
  ::apollo::planning::PlannerType planner_type(int index) const;
  void set_planner_type(int index, ::apollo::planning::PlannerType value);
  void add_planner_type(::apollo::planning::PlannerType value);
  const ::google::protobuf::RepeatedField<int>& planner_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_planner_type();

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  bool has_planner_navi_config() const;
  void clear_planner_navi_config();
  static const int kPlannerNaviConfigFieldNumber = 4;
  const ::apollo::planning::PlannerNaviConfig& planner_navi_config() const;
  ::apollo::planning::PlannerNaviConfig* mutable_planner_navi_config();
  ::apollo::planning::PlannerNaviConfig* release_planner_navi_config();
  void set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.NavigationPlanningConfig)
 private:
  inline void set_has_planner_navi_config();
  inline void clear_has_planner_navi_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> planner_type_;
  ::apollo::planning::PlannerNaviConfig* planner_navi_config_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static NavigationPlanningConfig* default_instance_;
};
// -------------------------------------------------------------------

class PlanningConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningConfig) */ {
 public:
  PlanningConfig();
  virtual ~PlanningConfig();

  PlanningConfig(const PlanningConfig& from);

  inline PlanningConfig& operator=(const PlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningConfig& default_instance();

  enum PlanningConfigCase {
    kRtkPlanningConfig = 3,
    kStandardPlanningConfig = 4,
    kNavigationPlanningConfig = 5,
    PLANNING_CONFIG_NOT_SET = 0,
  };

  void Swap(PlanningConfig* other);

  // implements Message ----------------------------------------------

  inline PlanningConfig* New() const { return New(NULL); }

  PlanningConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanningConfig& from);
  void MergeFrom(const PlanningConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlanningConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.PlannerType planner_type = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_planner_type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_planner_type();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kPlannerTypeFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::PlannerType planner_type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_planner_type(::apollo::planning::PlannerType value);

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 2;
  bool has_planner_navi_config() const;
  void clear_planner_navi_config();
  static const int kPlannerNaviConfigFieldNumber = 2;
  const ::apollo::planning::PlannerNaviConfig& planner_navi_config() const;
  ::apollo::planning::PlannerNaviConfig* mutable_planner_navi_config();
  ::apollo::planning::PlannerNaviConfig* release_planner_navi_config();
  void set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config);

  // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
  bool has_rtk_planning_config() const;
  void clear_rtk_planning_config();
  static const int kRtkPlanningConfigFieldNumber = 3;
  const ::apollo::planning::RtkPlanningConfig& rtk_planning_config() const;
  ::apollo::planning::RtkPlanningConfig* mutable_rtk_planning_config();
  ::apollo::planning::RtkPlanningConfig* release_rtk_planning_config();
  void set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config);

  // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
  bool has_standard_planning_config() const;
  void clear_standard_planning_config();
  static const int kStandardPlanningConfigFieldNumber = 4;
  const ::apollo::planning::StandardPlanningConfig& standard_planning_config() const;
  ::apollo::planning::StandardPlanningConfig* mutable_standard_planning_config();
  ::apollo::planning::StandardPlanningConfig* release_standard_planning_config();
  void set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config);

  // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
  bool has_navigation_planning_config() const;
  void clear_navigation_planning_config();
  static const int kNavigationPlanningConfigFieldNumber = 5;
  const ::apollo::planning::NavigationPlanningConfig& navigation_planning_config() const;
  ::apollo::planning::NavigationPlanningConfig* mutable_navigation_planning_config();
  ::apollo::planning::NavigationPlanningConfig* release_navigation_planning_config();
  void set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config);

  PlanningConfigCase planning_config_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningConfig)
 private:
  inline void set_has_planner_type();
  inline void clear_has_planner_type();
  inline void set_has_planner_navi_config();
  inline void clear_has_planner_navi_config();
  inline void set_has_rtk_planning_config();
  inline void set_has_standard_planning_config();
  inline void set_has_navigation_planning_config();

  inline bool has_planning_config() const;
  void clear_planning_config();
  inline void clear_has_planning_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::PlannerNaviConfig* planner_navi_config_;
  int planner_type_;
  union PlanningConfigUnion {
    PlanningConfigUnion() {}
    ::apollo::planning::RtkPlanningConfig* rtk_planning_config_;
    ::apollo::planning::StandardPlanningConfig* standard_planning_config_;
    ::apollo::planning::NavigationPlanningConfig* navigation_planning_config_;
  } planning_config_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PlanningConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PathDeciderConfig

// -------------------------------------------------------------------

// ScenarioConfig_ScenarioTaskConfig

// optional .apollo.planning.TaskType task = 1;
inline bool ScenarioConfig_ScenarioTaskConfig::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenarioConfig_ScenarioTaskConfig::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_task() {
  task_ = 0;
  clear_has_task();
}
inline ::apollo::planning::TaskType ScenarioConfig_ScenarioTaskConfig::task() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.task)
  return static_cast< ::apollo::planning::TaskType >(task_);
}
inline void ScenarioConfig_ScenarioTaskConfig::set_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  set_has_task();
  task_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.ScenarioTaskConfig.task)
}

// optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
inline bool ScenarioConfig_ScenarioTaskConfig::has_dp_poly_path_config() const {
  return task_config_case() == kDpPolyPathConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::set_has_dp_poly_path_config() {
  _oneof_case_[0] = kDpPolyPathConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_dp_poly_path_config() {
  if (has_dp_poly_path_config()) {
    delete task_config_.dp_poly_path_config_;
    clear_has_task_config();
  }
}
inline  const ::apollo::planning::DpPolyPathConfig& ScenarioConfig_ScenarioTaskConfig::dp_poly_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
  return has_dp_poly_path_config()
      ? *task_config_.dp_poly_path_config_
      : ::apollo::planning::DpPolyPathConfig::default_instance();
}
inline ::apollo::planning::DpPolyPathConfig* ScenarioConfig_ScenarioTaskConfig::mutable_dp_poly_path_config() {
  if (!has_dp_poly_path_config()) {
    clear_task_config();
    set_has_dp_poly_path_config();
    task_config_.dp_poly_path_config_ = new ::apollo::planning::DpPolyPathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
  return task_config_.dp_poly_path_config_;
}
inline ::apollo::planning::DpPolyPathConfig* ScenarioConfig_ScenarioTaskConfig::release_dp_poly_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
  if (has_dp_poly_path_config()) {
    clear_has_task_config();
    ::apollo::planning::DpPolyPathConfig* temp = task_config_.dp_poly_path_config_;
    task_config_.dp_poly_path_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ScenarioConfig_ScenarioTaskConfig::set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config) {
  clear_task_config();
  if (dp_poly_path_config) {
    set_has_dp_poly_path_config();
    task_config_.dp_poly_path_config_ = dp_poly_path_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_poly_path_config)
}

// optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
inline bool ScenarioConfig_ScenarioTaskConfig::has_dp_st_speed_config() const {
  return task_config_case() == kDpStSpeedConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::set_has_dp_st_speed_config() {
  _oneof_case_[0] = kDpStSpeedConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_dp_st_speed_config() {
  if (has_dp_st_speed_config()) {
    delete task_config_.dp_st_speed_config_;
    clear_has_task_config();
  }
}
inline  const ::apollo::planning::DpStSpeedConfig& ScenarioConfig_ScenarioTaskConfig::dp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
  return has_dp_st_speed_config()
      ? *task_config_.dp_st_speed_config_
      : ::apollo::planning::DpStSpeedConfig::default_instance();
}
inline ::apollo::planning::DpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::mutable_dp_st_speed_config() {
  if (!has_dp_st_speed_config()) {
    clear_task_config();
    set_has_dp_st_speed_config();
    task_config_.dp_st_speed_config_ = new ::apollo::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
  return task_config_.dp_st_speed_config_;
}
inline ::apollo::planning::DpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::release_dp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
  if (has_dp_st_speed_config()) {
    clear_has_task_config();
    ::apollo::planning::DpStSpeedConfig* temp = task_config_.dp_st_speed_config_;
    task_config_.dp_st_speed_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ScenarioConfig_ScenarioTaskConfig::set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config) {
  clear_task_config();
  if (dp_st_speed_config) {
    set_has_dp_st_speed_config();
    task_config_.dp_st_speed_config_ = dp_st_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.dp_st_speed_config)
}

// optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
inline bool ScenarioConfig_ScenarioTaskConfig::has_qp_spline_path_config() const {
  return task_config_case() == kQpSplinePathConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::set_has_qp_spline_path_config() {
  _oneof_case_[0] = kQpSplinePathConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_qp_spline_path_config() {
  if (has_qp_spline_path_config()) {
    delete task_config_.qp_spline_path_config_;
    clear_has_task_config();
  }
}
inline  const ::apollo::planning::QpSplinePathConfig& ScenarioConfig_ScenarioTaskConfig::qp_spline_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
  return has_qp_spline_path_config()
      ? *task_config_.qp_spline_path_config_
      : ::apollo::planning::QpSplinePathConfig::default_instance();
}
inline ::apollo::planning::QpSplinePathConfig* ScenarioConfig_ScenarioTaskConfig::mutable_qp_spline_path_config() {
  if (!has_qp_spline_path_config()) {
    clear_task_config();
    set_has_qp_spline_path_config();
    task_config_.qp_spline_path_config_ = new ::apollo::planning::QpSplinePathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
  return task_config_.qp_spline_path_config_;
}
inline ::apollo::planning::QpSplinePathConfig* ScenarioConfig_ScenarioTaskConfig::release_qp_spline_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
  if (has_qp_spline_path_config()) {
    clear_has_task_config();
    ::apollo::planning::QpSplinePathConfig* temp = task_config_.qp_spline_path_config_;
    task_config_.qp_spline_path_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ScenarioConfig_ScenarioTaskConfig::set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config) {
  clear_task_config();
  if (qp_spline_path_config) {
    set_has_qp_spline_path_config();
    task_config_.qp_spline_path_config_ = qp_spline_path_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_spline_path_config)
}

// optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
inline bool ScenarioConfig_ScenarioTaskConfig::has_qp_st_speed_config() const {
  return task_config_case() == kQpStSpeedConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::set_has_qp_st_speed_config() {
  _oneof_case_[0] = kQpStSpeedConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_qp_st_speed_config() {
  if (has_qp_st_speed_config()) {
    delete task_config_.qp_st_speed_config_;
    clear_has_task_config();
  }
}
inline  const ::apollo::planning::QpStSpeedConfig& ScenarioConfig_ScenarioTaskConfig::qp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
  return has_qp_st_speed_config()
      ? *task_config_.qp_st_speed_config_
      : ::apollo::planning::QpStSpeedConfig::default_instance();
}
inline ::apollo::planning::QpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::mutable_qp_st_speed_config() {
  if (!has_qp_st_speed_config()) {
    clear_task_config();
    set_has_qp_st_speed_config();
    task_config_.qp_st_speed_config_ = new ::apollo::planning::QpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
  return task_config_.qp_st_speed_config_;
}
inline ::apollo::planning::QpStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::release_qp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
  if (has_qp_st_speed_config()) {
    clear_has_task_config();
    ::apollo::planning::QpStSpeedConfig* temp = task_config_.qp_st_speed_config_;
    task_config_.qp_st_speed_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ScenarioConfig_ScenarioTaskConfig::set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config) {
  clear_task_config();
  if (qp_st_speed_config) {
    set_has_qp_st_speed_config();
    task_config_.qp_st_speed_config_ = qp_st_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.qp_st_speed_config)
}

// optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
inline bool ScenarioConfig_ScenarioTaskConfig::has_poly_st_speed_config() const {
  return task_config_case() == kPolyStSpeedConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::set_has_poly_st_speed_config() {
  _oneof_case_[0] = kPolyStSpeedConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_poly_st_speed_config() {
  if (has_poly_st_speed_config()) {
    delete task_config_.poly_st_speed_config_;
    clear_has_task_config();
  }
}
inline  const ::apollo::planning::PolyStSpeedConfig& ScenarioConfig_ScenarioTaskConfig::poly_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
  return has_poly_st_speed_config()
      ? *task_config_.poly_st_speed_config_
      : ::apollo::planning::PolyStSpeedConfig::default_instance();
}
inline ::apollo::planning::PolyStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::mutable_poly_st_speed_config() {
  if (!has_poly_st_speed_config()) {
    clear_task_config();
    set_has_poly_st_speed_config();
    task_config_.poly_st_speed_config_ = new ::apollo::planning::PolyStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
  return task_config_.poly_st_speed_config_;
}
inline ::apollo::planning::PolyStSpeedConfig* ScenarioConfig_ScenarioTaskConfig::release_poly_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
  if (has_poly_st_speed_config()) {
    clear_has_task_config();
    ::apollo::planning::PolyStSpeedConfig* temp = task_config_.poly_st_speed_config_;
    task_config_.poly_st_speed_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ScenarioConfig_ScenarioTaskConfig::set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config) {
  clear_task_config();
  if (poly_st_speed_config) {
    set_has_poly_st_speed_config();
    task_config_.poly_st_speed_config_ = poly_st_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.poly_st_speed_config)
}

// optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
inline bool ScenarioConfig_ScenarioTaskConfig::has_path_decider_config() const {
  return task_config_case() == kPathDeciderConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::set_has_path_decider_config() {
  _oneof_case_[0] = kPathDeciderConfig;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_path_decider_config() {
  if (has_path_decider_config()) {
    delete task_config_.path_decider_config_;
    clear_has_task_config();
  }
}
inline  const ::apollo::planning::PathDeciderConfig& ScenarioConfig_ScenarioTaskConfig::path_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
  return has_path_decider_config()
      ? *task_config_.path_decider_config_
      : ::apollo::planning::PathDeciderConfig::default_instance();
}
inline ::apollo::planning::PathDeciderConfig* ScenarioConfig_ScenarioTaskConfig::mutable_path_decider_config() {
  if (!has_path_decider_config()) {
    clear_task_config();
    set_has_path_decider_config();
    task_config_.path_decider_config_ = new ::apollo::planning::PathDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
  return task_config_.path_decider_config_;
}
inline ::apollo::planning::PathDeciderConfig* ScenarioConfig_ScenarioTaskConfig::release_path_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
  if (has_path_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathDeciderConfig* temp = task_config_.path_decider_config_;
    task_config_.path_decider_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ScenarioConfig_ScenarioTaskConfig::set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config) {
  clear_task_config();
  if (path_decider_config) {
    set_has_path_decider_config();
    task_config_.path_decider_config_ = path_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.ScenarioTaskConfig.path_decider_config)
}

inline bool ScenarioConfig_ScenarioTaskConfig::has_task_config() const {
  return task_config_case() != TASK_CONFIG_NOT_SET;
}
inline void ScenarioConfig_ScenarioTaskConfig::clear_has_task_config() {
  _oneof_case_[0] = TASK_CONFIG_NOT_SET;
}
inline ScenarioConfig_ScenarioTaskConfig::TaskConfigCase ScenarioConfig_ScenarioTaskConfig::task_config_case() const {
  return ScenarioConfig_ScenarioTaskConfig::TaskConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScenarioConfig

// optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
inline bool ScenarioConfig::has_scenario_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenarioConfig::set_has_scenario_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenarioConfig::clear_has_scenario_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenarioConfig::clear_scenario_type() {
  scenario_type_ = 0;
  clear_has_scenario_type();
}
inline ::apollo::planning::ScenarioConfig_ScenarioType ScenarioConfig::scenario_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.scenario_type)
  return static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(scenario_type_);
}
inline void ScenarioConfig::set_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value) {
  assert(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value));
  set_has_scenario_type();
  scenario_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.scenario_type)
}

// repeated .apollo.planning.ScenarioConfig.ScenarioTaskConfig scenario_task_config = 2;
inline int ScenarioConfig::scenario_task_config_size() const {
  return scenario_task_config_.size();
}
inline void ScenarioConfig::clear_scenario_task_config() {
  scenario_task_config_.Clear();
}
inline const ::apollo::planning::ScenarioConfig_ScenarioTaskConfig& ScenarioConfig::scenario_task_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_.Get(index);
}
inline ::apollo::planning::ScenarioConfig_ScenarioTaskConfig* ScenarioConfig::mutable_scenario_task_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_.Mutable(index);
}
inline ::apollo::planning::ScenarioConfig_ScenarioTaskConfig* ScenarioConfig::add_scenario_task_config() {
  // @@protoc_insertion_point(field_add:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ScenarioConfig_ScenarioTaskConfig >*
ScenarioConfig::mutable_scenario_task_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ScenarioConfig.scenario_task_config)
  return &scenario_task_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ScenarioConfig_ScenarioTaskConfig >&
ScenarioConfig::scenario_task_config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ScenarioConfig.scenario_task_config)
  return scenario_task_config_;
}

// -------------------------------------------------------------------

// PlannerOnRoadConfig

// repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
inline int PlannerOnRoadConfig::scenario_type_size() const {
  return scenario_type_.size();
}
inline void PlannerOnRoadConfig::clear_scenario_type() {
  scenario_type_.Clear();
}
inline ::apollo::planning::ScenarioConfig_ScenarioType PlannerOnRoadConfig::scenario_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOnRoadConfig.scenario_type)
  return static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(scenario_type_.Get(index));
}
inline void PlannerOnRoadConfig::set_scenario_type(int index, ::apollo::planning::ScenarioConfig_ScenarioType value) {
  assert(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value));
  scenario_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOnRoadConfig.scenario_type)
}
inline void PlannerOnRoadConfig::add_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value) {
  assert(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value));
  scenario_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.PlannerOnRoadConfig.scenario_type)
}
inline const ::google::protobuf::RepeatedField<int>&
PlannerOnRoadConfig::scenario_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlannerOnRoadConfig.scenario_type)
  return scenario_type_;
}
inline ::google::protobuf::RepeatedField<int>*
PlannerOnRoadConfig::mutable_scenario_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlannerOnRoadConfig.scenario_type)
  return &scenario_type_;
}

// -------------------------------------------------------------------

// PlannerNaviConfig

// repeated .apollo.planning.TaskType task = 1;
inline int PlannerNaviConfig::task_size() const {
  return task_.size();
}
inline void PlannerNaviConfig::clear_task() {
  task_.Clear();
}
inline ::apollo::planning::TaskType PlannerNaviConfig::task(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.task)
  return static_cast< ::apollo::planning::TaskType >(task_.Get(index));
}
inline void PlannerNaviConfig::set_task(int index, ::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerNaviConfig.task)
}
inline void PlannerNaviConfig::add_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.PlannerNaviConfig.task)
}
inline const ::google::protobuf::RepeatedField<int>&
PlannerNaviConfig::task() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlannerNaviConfig.task)
  return task_;
}
inline ::google::protobuf::RepeatedField<int>*
PlannerNaviConfig::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlannerNaviConfig.task)
  return &task_;
}

// optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
inline bool PlannerNaviConfig::has_navi_path_decider_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlannerNaviConfig::set_has_navi_path_decider_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlannerNaviConfig::clear_has_navi_path_decider_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlannerNaviConfig::clear_navi_path_decider_config() {
  if (navi_path_decider_config_ != NULL) navi_path_decider_config_->::apollo::planning::NaviPathDeciderConfig::Clear();
  clear_has_navi_path_decider_config();
}
inline const ::apollo::planning::NaviPathDeciderConfig& PlannerNaviConfig::navi_path_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  return navi_path_decider_config_ != NULL ? *navi_path_decider_config_ : *default_instance_->navi_path_decider_config_;
}
inline ::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::mutable_navi_path_decider_config() {
  set_has_navi_path_decider_config();
  if (navi_path_decider_config_ == NULL) {
    navi_path_decider_config_ = new ::apollo::planning::NaviPathDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  return navi_path_decider_config_;
}
inline ::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::release_navi_path_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  clear_has_navi_path_decider_config();
  ::apollo::planning::NaviPathDeciderConfig* temp = navi_path_decider_config_;
  navi_path_decider_config_ = NULL;
  return temp;
}
inline void PlannerNaviConfig::set_allocated_navi_path_decider_config(::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config) {
  delete navi_path_decider_config_;
  navi_path_decider_config_ = navi_path_decider_config;
  if (navi_path_decider_config) {
    set_has_navi_path_decider_config();
  } else {
    clear_has_navi_path_decider_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
}

// optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
inline bool PlannerNaviConfig::has_navi_speed_decider_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlannerNaviConfig::set_has_navi_speed_decider_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlannerNaviConfig::clear_has_navi_speed_decider_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlannerNaviConfig::clear_navi_speed_decider_config() {
  if (navi_speed_decider_config_ != NULL) navi_speed_decider_config_->::apollo::planning::NaviSpeedDeciderConfig::Clear();
  clear_has_navi_speed_decider_config();
}
inline const ::apollo::planning::NaviSpeedDeciderConfig& PlannerNaviConfig::navi_speed_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  return navi_speed_decider_config_ != NULL ? *navi_speed_decider_config_ : *default_instance_->navi_speed_decider_config_;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::mutable_navi_speed_decider_config() {
  set_has_navi_speed_decider_config();
  if (navi_speed_decider_config_ == NULL) {
    navi_speed_decider_config_ = new ::apollo::planning::NaviSpeedDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  return navi_speed_decider_config_;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::release_navi_speed_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  clear_has_navi_speed_decider_config();
  ::apollo::planning::NaviSpeedDeciderConfig* temp = navi_speed_decider_config_;
  navi_speed_decider_config_ = NULL;
  return temp;
}
inline void PlannerNaviConfig::set_allocated_navi_speed_decider_config(::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config) {
  delete navi_speed_decider_config_;
  navi_speed_decider_config_ = navi_speed_decider_config;
  if (navi_speed_decider_config) {
    set_has_navi_speed_decider_config();
  } else {
    clear_has_navi_speed_decider_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
}

// optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
inline bool PlannerNaviConfig::has_navi_obstacle_decider_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlannerNaviConfig::set_has_navi_obstacle_decider_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlannerNaviConfig::clear_has_navi_obstacle_decider_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlannerNaviConfig::clear_navi_obstacle_decider_config() {
  if (navi_obstacle_decider_config_ != NULL) navi_obstacle_decider_config_->::apollo::planning::NaviObstacleDeciderConfig::Clear();
  clear_has_navi_obstacle_decider_config();
}
inline const ::apollo::planning::NaviObstacleDeciderConfig& PlannerNaviConfig::navi_obstacle_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  return navi_obstacle_decider_config_ != NULL ? *navi_obstacle_decider_config_ : *default_instance_->navi_obstacle_decider_config_;
}
inline ::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::mutable_navi_obstacle_decider_config() {
  set_has_navi_obstacle_decider_config();
  if (navi_obstacle_decider_config_ == NULL) {
    navi_obstacle_decider_config_ = new ::apollo::planning::NaviObstacleDeciderConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  return navi_obstacle_decider_config_;
}
inline ::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::release_navi_obstacle_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  clear_has_navi_obstacle_decider_config();
  ::apollo::planning::NaviObstacleDeciderConfig* temp = navi_obstacle_decider_config_;
  navi_obstacle_decider_config_ = NULL;
  return temp;
}
inline void PlannerNaviConfig::set_allocated_navi_obstacle_decider_config(::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config) {
  delete navi_obstacle_decider_config_;
  navi_obstacle_decider_config_ = navi_obstacle_decider_config;
  if (navi_obstacle_decider_config) {
    set_has_navi_obstacle_decider_config();
  } else {
    clear_has_navi_obstacle_decider_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
}

// -------------------------------------------------------------------

// RtkPlanningConfig

// optional .apollo.planning.PlannerType planner_type = 1;
inline bool RtkPlanningConfig::has_planner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtkPlanningConfig::set_has_planner_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtkPlanningConfig::clear_has_planner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtkPlanningConfig::clear_planner_type() {
  planner_type_ = 0;
  clear_has_planner_type();
}
inline ::apollo::planning::PlannerType RtkPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RtkPlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_);
}
inline void RtkPlanningConfig::set_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  set_has_planner_type();
  planner_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RtkPlanningConfig.planner_type)
}

// -------------------------------------------------------------------

// StandardPlanningConfig

// repeated .apollo.planning.PlannerType planner_type = 1;
inline int StandardPlanningConfig::planner_type_size() const {
  return planner_type_.size();
}
inline void StandardPlanningConfig::clear_planner_type() {
  planner_type_.Clear();
}
inline ::apollo::planning::PlannerType StandardPlanningConfig::planner_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.StandardPlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_.Get(index));
}
inline void StandardPlanningConfig::set_planner_type(int index, ::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.StandardPlanningConfig.planner_type)
}
inline void StandardPlanningConfig::add_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.StandardPlanningConfig.planner_type)
}
inline const ::google::protobuf::RepeatedField<int>&
StandardPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.StandardPlanningConfig.planner_type)
  return planner_type_;
}
inline ::google::protobuf::RepeatedField<int>*
StandardPlanningConfig::mutable_planner_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.StandardPlanningConfig.planner_type)
  return &planner_type_;
}

// optional .apollo.planning.PlannerOnRoadConfig planner_onroad_config = 2;
inline bool StandardPlanningConfig::has_planner_onroad_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StandardPlanningConfig::set_has_planner_onroad_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StandardPlanningConfig::clear_has_planner_onroad_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StandardPlanningConfig::clear_planner_onroad_config() {
  if (planner_onroad_config_ != NULL) planner_onroad_config_->::apollo::planning::PlannerOnRoadConfig::Clear();
  clear_has_planner_onroad_config();
}
inline const ::apollo::planning::PlannerOnRoadConfig& StandardPlanningConfig::planner_onroad_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StandardPlanningConfig.planner_onroad_config)
  return planner_onroad_config_ != NULL ? *planner_onroad_config_ : *default_instance_->planner_onroad_config_;
}
inline ::apollo::planning::PlannerOnRoadConfig* StandardPlanningConfig::mutable_planner_onroad_config() {
  set_has_planner_onroad_config();
  if (planner_onroad_config_ == NULL) {
    planner_onroad_config_ = new ::apollo::planning::PlannerOnRoadConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.StandardPlanningConfig.planner_onroad_config)
  return planner_onroad_config_;
}
inline ::apollo::planning::PlannerOnRoadConfig* StandardPlanningConfig::release_planner_onroad_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.StandardPlanningConfig.planner_onroad_config)
  clear_has_planner_onroad_config();
  ::apollo::planning::PlannerOnRoadConfig* temp = planner_onroad_config_;
  planner_onroad_config_ = NULL;
  return temp;
}
inline void StandardPlanningConfig::set_allocated_planner_onroad_config(::apollo::planning::PlannerOnRoadConfig* planner_onroad_config) {
  delete planner_onroad_config_;
  planner_onroad_config_ = planner_onroad_config;
  if (planner_onroad_config) {
    set_has_planner_onroad_config();
  } else {
    clear_has_planner_onroad_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.StandardPlanningConfig.planner_onroad_config)
}

// -------------------------------------------------------------------

// NavigationPlanningConfig

// repeated .apollo.planning.PlannerType planner_type = 1;
inline int NavigationPlanningConfig::planner_type_size() const {
  return planner_type_.size();
}
inline void NavigationPlanningConfig::clear_planner_type() {
  planner_type_.Clear();
}
inline ::apollo::planning::PlannerType NavigationPlanningConfig::planner_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.NavigationPlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_.Get(index));
}
inline void NavigationPlanningConfig::set_planner_type(int index, ::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.NavigationPlanningConfig.planner_type)
}
inline void NavigationPlanningConfig::add_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  planner_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.NavigationPlanningConfig.planner_type)
}
inline const ::google::protobuf::RepeatedField<int>&
NavigationPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.NavigationPlanningConfig.planner_type)
  return planner_type_;
}
inline ::google::protobuf::RepeatedField<int>*
NavigationPlanningConfig::mutable_planner_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.NavigationPlanningConfig.planner_type)
  return &planner_type_;
}

// optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
inline bool NavigationPlanningConfig::has_planner_navi_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigationPlanningConfig::set_has_planner_navi_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigationPlanningConfig::clear_has_planner_navi_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavigationPlanningConfig::clear_planner_navi_config() {
  if (planner_navi_config_ != NULL) planner_navi_config_->::apollo::planning::PlannerNaviConfig::Clear();
  clear_has_planner_navi_config();
}
inline const ::apollo::planning::PlannerNaviConfig& NavigationPlanningConfig::planner_navi_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  return planner_navi_config_ != NULL ? *planner_navi_config_ : *default_instance_->planner_navi_config_;
}
inline ::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::mutable_planner_navi_config() {
  set_has_planner_navi_config();
  if (planner_navi_config_ == NULL) {
    planner_navi_config_ = new ::apollo::planning::PlannerNaviConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  return planner_navi_config_;
}
inline ::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::release_planner_navi_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  clear_has_planner_navi_config();
  ::apollo::planning::PlannerNaviConfig* temp = planner_navi_config_;
  planner_navi_config_ = NULL;
  return temp;
}
inline void NavigationPlanningConfig::set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config) {
  delete planner_navi_config_;
  planner_navi_config_ = planner_navi_config;
  if (planner_navi_config) {
    set_has_planner_navi_config();
  } else {
    clear_has_planner_navi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NavigationPlanningConfig.planner_navi_config)
}

// -------------------------------------------------------------------

// PlanningConfig

// optional .apollo.planning.PlannerType planner_type = 1 [deprecated = true];
inline bool PlanningConfig::has_planner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningConfig::set_has_planner_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningConfig::clear_has_planner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningConfig::clear_planner_type() {
  planner_type_ = 0;
  clear_has_planner_type();
}
inline ::apollo::planning::PlannerType PlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlannerType >(planner_type_);
}
inline void PlanningConfig::set_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  set_has_planner_type();
  planner_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningConfig.planner_type)
}

// optional .apollo.planning.PlannerNaviConfig planner_navi_config = 2;
inline bool PlanningConfig::has_planner_navi_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningConfig::set_has_planner_navi_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningConfig::clear_has_planner_navi_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningConfig::clear_planner_navi_config() {
  if (planner_navi_config_ != NULL) planner_navi_config_->::apollo::planning::PlannerNaviConfig::Clear();
  clear_has_planner_navi_config();
}
inline const ::apollo::planning::PlannerNaviConfig& PlanningConfig::planner_navi_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.planner_navi_config)
  return planner_navi_config_ != NULL ? *planner_navi_config_ : *default_instance_->planner_navi_config_;
}
inline ::apollo::planning::PlannerNaviConfig* PlanningConfig::mutable_planner_navi_config() {
  set_has_planner_navi_config();
  if (planner_navi_config_ == NULL) {
    planner_navi_config_ = new ::apollo::planning::PlannerNaviConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.planner_navi_config)
  return planner_navi_config_;
}
inline ::apollo::planning::PlannerNaviConfig* PlanningConfig::release_planner_navi_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.planner_navi_config)
  clear_has_planner_navi_config();
  ::apollo::planning::PlannerNaviConfig* temp = planner_navi_config_;
  planner_navi_config_ = NULL;
  return temp;
}
inline void PlanningConfig::set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config) {
  delete planner_navi_config_;
  planner_navi_config_ = planner_navi_config;
  if (planner_navi_config) {
    set_has_planner_navi_config();
  } else {
    clear_has_planner_navi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.planner_navi_config)
}

// optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
inline bool PlanningConfig::has_rtk_planning_config() const {
  return planning_config_case() == kRtkPlanningConfig;
}
inline void PlanningConfig::set_has_rtk_planning_config() {
  _oneof_case_[0] = kRtkPlanningConfig;
}
inline void PlanningConfig::clear_rtk_planning_config() {
  if (has_rtk_planning_config()) {
    delete planning_config_.rtk_planning_config_;
    clear_has_planning_config();
  }
}
inline  const ::apollo::planning::RtkPlanningConfig& PlanningConfig::rtk_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.rtk_planning_config)
  return has_rtk_planning_config()
      ? *planning_config_.rtk_planning_config_
      : ::apollo::planning::RtkPlanningConfig::default_instance();
}
inline ::apollo::planning::RtkPlanningConfig* PlanningConfig::mutable_rtk_planning_config() {
  if (!has_rtk_planning_config()) {
    clear_planning_config();
    set_has_rtk_planning_config();
    planning_config_.rtk_planning_config_ = new ::apollo::planning::RtkPlanningConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.rtk_planning_config)
  return planning_config_.rtk_planning_config_;
}
inline ::apollo::planning::RtkPlanningConfig* PlanningConfig::release_rtk_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.rtk_planning_config)
  if (has_rtk_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::RtkPlanningConfig* temp = planning_config_.rtk_planning_config_;
    planning_config_.rtk_planning_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PlanningConfig::set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config) {
  clear_planning_config();
  if (rtk_planning_config) {
    set_has_rtk_planning_config();
    planning_config_.rtk_planning_config_ = rtk_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.rtk_planning_config)
}

// optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
inline bool PlanningConfig::has_standard_planning_config() const {
  return planning_config_case() == kStandardPlanningConfig;
}
inline void PlanningConfig::set_has_standard_planning_config() {
  _oneof_case_[0] = kStandardPlanningConfig;
}
inline void PlanningConfig::clear_standard_planning_config() {
  if (has_standard_planning_config()) {
    delete planning_config_.standard_planning_config_;
    clear_has_planning_config();
  }
}
inline  const ::apollo::planning::StandardPlanningConfig& PlanningConfig::standard_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.standard_planning_config)
  return has_standard_planning_config()
      ? *planning_config_.standard_planning_config_
      : ::apollo::planning::StandardPlanningConfig::default_instance();
}
inline ::apollo::planning::StandardPlanningConfig* PlanningConfig::mutable_standard_planning_config() {
  if (!has_standard_planning_config()) {
    clear_planning_config();
    set_has_standard_planning_config();
    planning_config_.standard_planning_config_ = new ::apollo::planning::StandardPlanningConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.standard_planning_config)
  return planning_config_.standard_planning_config_;
}
inline ::apollo::planning::StandardPlanningConfig* PlanningConfig::release_standard_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.standard_planning_config)
  if (has_standard_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::StandardPlanningConfig* temp = planning_config_.standard_planning_config_;
    planning_config_.standard_planning_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PlanningConfig::set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config) {
  clear_planning_config();
  if (standard_planning_config) {
    set_has_standard_planning_config();
    planning_config_.standard_planning_config_ = standard_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.standard_planning_config)
}

// optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
inline bool PlanningConfig::has_navigation_planning_config() const {
  return planning_config_case() == kNavigationPlanningConfig;
}
inline void PlanningConfig::set_has_navigation_planning_config() {
  _oneof_case_[0] = kNavigationPlanningConfig;
}
inline void PlanningConfig::clear_navigation_planning_config() {
  if (has_navigation_planning_config()) {
    delete planning_config_.navigation_planning_config_;
    clear_has_planning_config();
  }
}
inline  const ::apollo::planning::NavigationPlanningConfig& PlanningConfig::navigation_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.navigation_planning_config)
  return has_navigation_planning_config()
      ? *planning_config_.navigation_planning_config_
      : ::apollo::planning::NavigationPlanningConfig::default_instance();
}
inline ::apollo::planning::NavigationPlanningConfig* PlanningConfig::mutable_navigation_planning_config() {
  if (!has_navigation_planning_config()) {
    clear_planning_config();
    set_has_navigation_planning_config();
    planning_config_.navigation_planning_config_ = new ::apollo::planning::NavigationPlanningConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.navigation_planning_config)
  return planning_config_.navigation_planning_config_;
}
inline ::apollo::planning::NavigationPlanningConfig* PlanningConfig::release_navigation_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.navigation_planning_config)
  if (has_navigation_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::NavigationPlanningConfig* temp = planning_config_.navigation_planning_config_;
    planning_config_.navigation_planning_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PlanningConfig::set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config) {
  clear_planning_config();
  if (navigation_planning_config) {
    set_has_navigation_planning_config();
    planning_config_.navigation_planning_config_ = navigation_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.navigation_planning_config)
}

inline bool PlanningConfig::has_planning_config() const {
  return planning_config_case() != PLANNING_CONFIG_NOT_SET;
}
inline void PlanningConfig::clear_has_planning_config() {
  _oneof_case_[0] = PLANNING_CONFIG_NOT_SET;
}
inline PlanningConfig::PlanningConfigCase PlanningConfig::planning_config_case() const {
  return PlanningConfig::PlanningConfigCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::ScenarioConfig_ScenarioType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ScenarioConfig_ScenarioType>() {
  return ::apollo::planning::ScenarioConfig_ScenarioType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::TaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::TaskType>() {
  return ::apollo::planning::TaskType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::PlannerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::PlannerType>() {
  return ::apollo::planning::PlannerType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fplanning_5fconfig_2eproto__INCLUDED
