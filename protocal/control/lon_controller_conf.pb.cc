// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/lon_controller_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control/lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

namespace {

const ::google::protobuf::Descriptor* FilterConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* LonControllerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LonControllerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_control_2flon_5fcontroller_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_control_2flon_5fcontroller_5fconf_2eproto() {
  protobuf_AddDesc_control_2flon_5fcontroller_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "control/lon_controller_conf.proto");
  GOOGLE_CHECK(file != NULL);
  FilterConf_descriptor_ = file->message_type(0);
  static const int FilterConf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, cutoff_freq_),
  };
  FilterConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilterConf_descriptor_,
      FilterConf::default_instance_,
      FilterConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(FilterConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _internal_metadata_),
      -1);
  LonControllerConf_descriptor_ = file->message_type(1);
  static const int LonControllerConf_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, brake_deadzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, throttle_deadzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, speed_controller_input_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, station_error_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, preview_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, standstill_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, station_pid_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, low_speed_pid_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, high_speed_pid_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, switch_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, pitch_angle_filter_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, calibration_table_),
  };
  LonControllerConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LonControllerConf_descriptor_,
      LonControllerConf::default_instance_,
      LonControllerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(LonControllerConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_control_2flon_5fcontroller_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilterConf_descriptor_, &FilterConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LonControllerConf_descriptor_, &LonControllerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_control_2flon_5fcontroller_5fconf_2eproto() {
  delete FilterConf::default_instance_;
  delete FilterConf_reflection_;
  delete LonControllerConf::default_instance_;
  delete LonControllerConf_reflection_;
}

void protobuf_AddDesc_control_2flon_5fcontroller_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_control_2flon_5fcontroller_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::control::calibrationtable::protobuf_AddDesc_control_2fcalibration_5ftable_2eproto();
  ::apollo::control::protobuf_AddDesc_control_2fpid_5fconf_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!control/lon_controller_conf.proto\022\016apo"
    "llo.control\032\037control/calibration_table.p"
    "roto\032\026control/pid_conf.proto\"!\n\nFilterCo"
    "nf\022\023\n\013cutoff_freq\030\001 \001(\005\"\224\004\n\021LonControlle"
    "rConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016brake_deadzone\030\002 \001("
    "\001\022\031\n\021throttle_deadzone\030\003 \001(\001\022$\n\034speed_co"
    "ntroller_input_limit\030\004 \001(\001\022\033\n\023station_er"
    "ror_limit\030\005 \001(\001\022\026\n\016preview_window\030\006 \001(\001\022"
    "\037\n\027standstill_acceleration\030\007 \001(\001\0221\n\020stat"
    "ion_pid_conf\030\010 \001(\0132\027.apollo.control.PidC"
    "onf\0223\n\022low_speed_pid_conf\030\t \001(\0132\027.apollo"
    ".control.PidConf\0224\n\023high_speed_pid_conf\030"
    "\n \001(\0132\027.apollo.control.PidConf\022\024\n\014switch"
    "_speed\030\013 \001(\001\022;\n\027pitch_angle_filter_conf\030"
    "\014 \001(\0132\032.apollo.control.FilterConf\022S\n\021cal"
    "ibration_table\030\r \001(\01328.apollo.control.ca"
    "librationtable.ControlCalibrationTable", 678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control/lon_controller_conf.proto", &protobuf_RegisterTypes);
  FilterConf::default_instance_ = new FilterConf();
  LonControllerConf::default_instance_ = new LonControllerConf();
  FilterConf::default_instance_->InitAsDefaultInstance();
  LonControllerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_control_2flon_5fcontroller_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_control_2flon_5fcontroller_5fconf_2eproto {
  StaticDescriptorInitializer_control_2flon_5fcontroller_5fconf_2eproto() {
    protobuf_AddDesc_control_2flon_5fcontroller_5fconf_2eproto();
  }
} static_descriptor_initializer_control_2flon_5fcontroller_5fconf_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterConf::kCutoffFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterConf::FilterConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.FilterConf)
}

void FilterConf::InitAsDefaultInstance() {
}

FilterConf::FilterConf(const FilterConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.FilterConf)
}

void FilterConf::SharedCtor() {
  _cached_size_ = 0;
  cutoff_freq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:apollo.control.FilterConf)
  SharedDtor();
}

void FilterConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FilterConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterConf_descriptor_;
}

const FilterConf& FilterConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2flon_5fcontroller_5fconf_2eproto();
  return *default_instance_;
}

FilterConf* FilterConf::default_instance_ = NULL;

FilterConf* FilterConf::New(::google::protobuf::Arena* arena) const {
  FilterConf* n = new FilterConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.FilterConf)
  cutoff_freq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FilterConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.FilterConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cutoff_freq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
          set_has_cutoff_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.FilterConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.FilterConf)
  return false;
#undef DO_
}

void FilterConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.FilterConf)
  // optional int32 cutoff_freq = 1;
  if (has_cutoff_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_freq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.FilterConf)
}

::google::protobuf::uint8* FilterConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.FilterConf)
  // optional int32 cutoff_freq = 1;
  if (has_cutoff_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_freq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.FilterConf)
  return target;
}

int FilterConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.FilterConf)
  int total_size = 0;

  // optional int32 cutoff_freq = 1;
  if (has_cutoff_freq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_freq());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.FilterConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FilterConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.FilterConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.FilterConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cutoff_freq()) {
      set_cutoff_freq(from.cutoff_freq());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FilterConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {

  return true;
}

void FilterConf::Swap(FilterConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterConf::InternalSwap(FilterConf* other) {
  std::swap(cutoff_freq_, other->cutoff_freq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterConf_descriptor_;
  metadata.reflection = FilterConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterConf

// optional int32 cutoff_freq = 1;
bool FilterConf::has_cutoff_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FilterConf::set_has_cutoff_freq() {
  _has_bits_[0] |= 0x00000001u;
}
void FilterConf::clear_has_cutoff_freq() {
  _has_bits_[0] &= ~0x00000001u;
}
void FilterConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  clear_has_cutoff_freq();
}
 ::google::protobuf::int32 FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.FilterConf.cutoff_freq)
  return cutoff_freq_;
}
 void FilterConf::set_cutoff_freq(::google::protobuf::int32 value) {
  set_has_cutoff_freq();
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.FilterConf.cutoff_freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LonControllerConf::kTsFieldNumber;
const int LonControllerConf::kBrakeDeadzoneFieldNumber;
const int LonControllerConf::kThrottleDeadzoneFieldNumber;
const int LonControllerConf::kSpeedControllerInputLimitFieldNumber;
const int LonControllerConf::kStationErrorLimitFieldNumber;
const int LonControllerConf::kPreviewWindowFieldNumber;
const int LonControllerConf::kStandstillAccelerationFieldNumber;
const int LonControllerConf::kStationPidConfFieldNumber;
const int LonControllerConf::kLowSpeedPidConfFieldNumber;
const int LonControllerConf::kHighSpeedPidConfFieldNumber;
const int LonControllerConf::kSwitchSpeedFieldNumber;
const int LonControllerConf::kPitchAngleFilterConfFieldNumber;
const int LonControllerConf::kCalibrationTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LonControllerConf::LonControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LonControllerConf)
}

void LonControllerConf::InitAsDefaultInstance() {
  station_pid_conf_ = const_cast< ::apollo::control::PidConf*>(&::apollo::control::PidConf::default_instance());
  low_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(&::apollo::control::PidConf::default_instance());
  high_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(&::apollo::control::PidConf::default_instance());
  pitch_angle_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(&::apollo::control::FilterConf::default_instance());
  calibration_table_ = const_cast< ::apollo::control::calibrationtable::ControlCalibrationTable*>(&::apollo::control::calibrationtable::ControlCalibrationTable::default_instance());
}

LonControllerConf::LonControllerConf(const LonControllerConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.LonControllerConf)
}

void LonControllerConf::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0;
  brake_deadzone_ = 0;
  throttle_deadzone_ = 0;
  speed_controller_input_limit_ = 0;
  station_error_limit_ = 0;
  preview_window_ = 0;
  standstill_acceleration_ = 0;
  station_pid_conf_ = NULL;
  low_speed_pid_conf_ = NULL;
  high_speed_pid_conf_ = NULL;
  switch_speed_ = 0;
  pitch_angle_filter_conf_ = NULL;
  calibration_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LonControllerConf::~LonControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LonControllerConf)
  SharedDtor();
}

void LonControllerConf::SharedDtor() {
  if (this != default_instance_) {
    delete station_pid_conf_;
    delete low_speed_pid_conf_;
    delete high_speed_pid_conf_;
    delete pitch_angle_filter_conf_;
    delete calibration_table_;
  }
}

void LonControllerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LonControllerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LonControllerConf_descriptor_;
}

const LonControllerConf& LonControllerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2flon_5fcontroller_5fconf_2eproto();
  return *default_instance_;
}

LonControllerConf* LonControllerConf::default_instance_ = NULL;

LonControllerConf* LonControllerConf::New(::google::protobuf::Arena* arena) const {
  LonControllerConf* n = new LonControllerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LonControllerConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LonControllerConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LonControllerConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ts_, standstill_acceleration_);
    if (has_station_pid_conf()) {
      if (station_pid_conf_ != NULL) station_pid_conf_->::apollo::control::PidConf::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_low_speed_pid_conf()) {
      if (low_speed_pid_conf_ != NULL) low_speed_pid_conf_->::apollo::control::PidConf::Clear();
    }
    if (has_high_speed_pid_conf()) {
      if (high_speed_pid_conf_ != NULL) high_speed_pid_conf_->::apollo::control::PidConf::Clear();
    }
    switch_speed_ = 0;
    if (has_pitch_angle_filter_conf()) {
      if (pitch_angle_filter_conf_ != NULL) pitch_angle_filter_conf_->::apollo::control::FilterConf::Clear();
    }
    if (has_calibration_table()) {
      if (calibration_table_ != NULL) calibration_table_->::apollo::control::calibrationtable::ControlCalibrationTable::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LonControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LonControllerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_brake_deadzone;
        break;
      }

      // optional double brake_deadzone = 2;
      case 2: {
        if (tag == 17) {
         parse_brake_deadzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));
          set_has_brake_deadzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_throttle_deadzone;
        break;
      }

      // optional double throttle_deadzone = 3;
      case 3: {
        if (tag == 25) {
         parse_throttle_deadzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));
          set_has_throttle_deadzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed_controller_input_limit;
        break;
      }

      // optional double speed_controller_input_limit = 4;
      case 4: {
        if (tag == 33) {
         parse_speed_controller_input_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limit_)));
          set_has_speed_controller_input_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_station_error_limit;
        break;
      }

      // optional double station_error_limit = 5;
      case 5: {
        if (tag == 41) {
         parse_station_error_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limit_)));
          set_has_station_error_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_preview_window;
        break;
      }

      // optional double preview_window = 6;
      case 6: {
        if (tag == 49) {
         parse_preview_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_window_)));
          set_has_preview_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_standstill_acceleration;
        break;
      }

      // optional double standstill_acceleration = 7;
      case 7: {
        if (tag == 57) {
         parse_standstill_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standstill_acceleration_)));
          set_has_standstill_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_station_pid_conf;
        break;
      }

      // optional .apollo.control.PidConf station_pid_conf = 8;
      case 8: {
        if (tag == 66) {
         parse_station_pid_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_low_speed_pid_conf;
        break;
      }

      // optional .apollo.control.PidConf low_speed_pid_conf = 9;
      case 9: {
        if (tag == 74) {
         parse_low_speed_pid_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_high_speed_pid_conf;
        break;
      }

      // optional .apollo.control.PidConf high_speed_pid_conf = 10;
      case 10: {
        if (tag == 82) {
         parse_high_speed_pid_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_switch_speed;
        break;
      }

      // optional double switch_speed = 11;
      case 11: {
        if (tag == 89) {
         parse_switch_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_speed_)));
          set_has_switch_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pitch_angle_filter_conf;
        break;
      }

      // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
      case 12: {
        if (tag == 98) {
         parse_pitch_angle_filter_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pitch_angle_filter_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_calibration_table;
        break;
      }

      // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
      case 13: {
        if (tag == 106) {
         parse_calibration_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LonControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LonControllerConf)
  return false;
#undef DO_
}

void LonControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LonControllerConf)
  // optional double ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional double brake_deadzone = 2;
  if (has_brake_deadzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake_deadzone(), output);
  }

  // optional double throttle_deadzone = 3;
  if (has_throttle_deadzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle_deadzone(), output);
  }

  // optional double speed_controller_input_limit = 4;
  if (has_speed_controller_input_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_controller_input_limit(), output);
  }

  // optional double station_error_limit = 5;
  if (has_station_error_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->station_error_limit(), output);
  }

  // optional double preview_window = 6;
  if (has_preview_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->preview_window(), output);
  }

  // optional double standstill_acceleration = 7;
  if (has_standstill_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->standstill_acceleration(), output);
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (has_station_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->station_pid_conf_, output);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (has_low_speed_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->low_speed_pid_conf_, output);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (has_high_speed_pid_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->high_speed_pid_conf_, output);
  }

  // optional double switch_speed = 11;
  if (has_switch_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->switch_speed(), output);
  }

  // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
  if (has_pitch_angle_filter_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->pitch_angle_filter_conf_, output);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
  if (has_calibration_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->calibration_table_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.LonControllerConf)
}

::google::protobuf::uint8* LonControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LonControllerConf)
  // optional double ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional double brake_deadzone = 2;
  if (has_brake_deadzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 3;
  if (has_throttle_deadzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle_deadzone(), target);
  }

  // optional double speed_controller_input_limit = 4;
  if (has_speed_controller_input_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_controller_input_limit(), target);
  }

  // optional double station_error_limit = 5;
  if (has_station_error_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->station_error_limit(), target);
  }

  // optional double preview_window = 6;
  if (has_preview_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->preview_window(), target);
  }

  // optional double standstill_acceleration = 7;
  if (has_standstill_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->standstill_acceleration(), target);
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (has_station_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->station_pid_conf_, false, target);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (has_low_speed_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->low_speed_pid_conf_, false, target);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (has_high_speed_pid_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->high_speed_pid_conf_, false, target);
  }

  // optional double switch_speed = 11;
  if (has_switch_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->switch_speed(), target);
  }

  // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
  if (has_pitch_angle_filter_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->pitch_angle_filter_conf_, false, target);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
  if (has_calibration_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->calibration_table_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LonControllerConf)
  return target;
}

int LonControllerConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LonControllerConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double ts = 1;
    if (has_ts()) {
      total_size += 1 + 8;
    }

    // optional double brake_deadzone = 2;
    if (has_brake_deadzone()) {
      total_size += 1 + 8;
    }

    // optional double throttle_deadzone = 3;
    if (has_throttle_deadzone()) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limit = 4;
    if (has_speed_controller_input_limit()) {
      total_size += 1 + 8;
    }

    // optional double station_error_limit = 5;
    if (has_station_error_limit()) {
      total_size += 1 + 8;
    }

    // optional double preview_window = 6;
    if (has_preview_window()) {
      total_size += 1 + 8;
    }

    // optional double standstill_acceleration = 7;
    if (has_standstill_acceleration()) {
      total_size += 1 + 8;
    }

    // optional .apollo.control.PidConf station_pid_conf = 8;
    if (has_station_pid_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->station_pid_conf_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .apollo.control.PidConf low_speed_pid_conf = 9;
    if (has_low_speed_pid_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->low_speed_pid_conf_);
    }

    // optional .apollo.control.PidConf high_speed_pid_conf = 10;
    if (has_high_speed_pid_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->high_speed_pid_conf_);
    }

    // optional double switch_speed = 11;
    if (has_switch_speed()) {
      total_size += 1 + 8;
    }

    // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
    if (has_pitch_angle_filter_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pitch_angle_filter_conf_);
    }

    // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
    if (has_calibration_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calibration_table_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LonControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LonControllerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LonControllerConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LonControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LonControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LonControllerConf)
    MergeFrom(*source);
  }
}

void LonControllerConf::MergeFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LonControllerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_brake_deadzone()) {
      set_brake_deadzone(from.brake_deadzone());
    }
    if (from.has_throttle_deadzone()) {
      set_throttle_deadzone(from.throttle_deadzone());
    }
    if (from.has_speed_controller_input_limit()) {
      set_speed_controller_input_limit(from.speed_controller_input_limit());
    }
    if (from.has_station_error_limit()) {
      set_station_error_limit(from.station_error_limit());
    }
    if (from.has_preview_window()) {
      set_preview_window(from.preview_window());
    }
    if (from.has_standstill_acceleration()) {
      set_standstill_acceleration(from.standstill_acceleration());
    }
    if (from.has_station_pid_conf()) {
      mutable_station_pid_conf()->::apollo::control::PidConf::MergeFrom(from.station_pid_conf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_low_speed_pid_conf()) {
      mutable_low_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.low_speed_pid_conf());
    }
    if (from.has_high_speed_pid_conf()) {
      mutable_high_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.high_speed_pid_conf());
    }
    if (from.has_switch_speed()) {
      set_switch_speed(from.switch_speed());
    }
    if (from.has_pitch_angle_filter_conf()) {
      mutable_pitch_angle_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.pitch_angle_filter_conf());
    }
    if (from.has_calibration_table()) {
      mutable_calibration_table()->::apollo::control::calibrationtable::ControlCalibrationTable::MergeFrom(from.calibration_table());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LonControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonControllerConf::CopyFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonControllerConf::IsInitialized() const {

  return true;
}

void LonControllerConf::Swap(LonControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LonControllerConf::InternalSwap(LonControllerConf* other) {
  std::swap(ts_, other->ts_);
  std::swap(brake_deadzone_, other->brake_deadzone_);
  std::swap(throttle_deadzone_, other->throttle_deadzone_);
  std::swap(speed_controller_input_limit_, other->speed_controller_input_limit_);
  std::swap(station_error_limit_, other->station_error_limit_);
  std::swap(preview_window_, other->preview_window_);
  std::swap(standstill_acceleration_, other->standstill_acceleration_);
  std::swap(station_pid_conf_, other->station_pid_conf_);
  std::swap(low_speed_pid_conf_, other->low_speed_pid_conf_);
  std::swap(high_speed_pid_conf_, other->high_speed_pid_conf_);
  std::swap(switch_speed_, other->switch_speed_);
  std::swap(pitch_angle_filter_conf_, other->pitch_angle_filter_conf_);
  std::swap(calibration_table_, other->calibration_table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LonControllerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LonControllerConf_descriptor_;
  metadata.reflection = LonControllerConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LonControllerConf

// optional double ts = 1;
bool LonControllerConf::has_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LonControllerConf::set_has_ts() {
  _has_bits_[0] |= 0x00000001u;
}
void LonControllerConf::clear_has_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
void LonControllerConf::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
 double LonControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.ts)
  return ts_;
}
 void LonControllerConf::set_ts(double value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.ts)
}

// optional double brake_deadzone = 2;
bool LonControllerConf::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LonControllerConf::set_has_brake_deadzone() {
  _has_bits_[0] |= 0x00000002u;
}
void LonControllerConf::clear_has_brake_deadzone() {
  _has_bits_[0] &= ~0x00000002u;
}
void LonControllerConf::clear_brake_deadzone() {
  brake_deadzone_ = 0;
  clear_has_brake_deadzone();
}
 double LonControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_deadzone)
  return brake_deadzone_;
}
 void LonControllerConf::set_brake_deadzone(double value) {
  set_has_brake_deadzone();
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.brake_deadzone)
}

// optional double throttle_deadzone = 3;
bool LonControllerConf::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LonControllerConf::set_has_throttle_deadzone() {
  _has_bits_[0] |= 0x00000004u;
}
void LonControllerConf::clear_has_throttle_deadzone() {
  _has_bits_[0] &= ~0x00000004u;
}
void LonControllerConf::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
  clear_has_throttle_deadzone();
}
 double LonControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_deadzone)
  return throttle_deadzone_;
}
 void LonControllerConf::set_throttle_deadzone(double value) {
  set_has_throttle_deadzone();
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.throttle_deadzone)
}

// optional double speed_controller_input_limit = 4;
bool LonControllerConf::has_speed_controller_input_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LonControllerConf::set_has_speed_controller_input_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void LonControllerConf::clear_has_speed_controller_input_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void LonControllerConf::clear_speed_controller_input_limit() {
  speed_controller_input_limit_ = 0;
  clear_has_speed_controller_input_limit();
}
 double LonControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.speed_controller_input_limit)
  return speed_controller_input_limit_;
}
 void LonControllerConf::set_speed_controller_input_limit(double value) {
  set_has_speed_controller_input_limit();
  speed_controller_input_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.speed_controller_input_limit)
}

// optional double station_error_limit = 5;
bool LonControllerConf::has_station_error_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LonControllerConf::set_has_station_error_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void LonControllerConf::clear_has_station_error_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void LonControllerConf::clear_station_error_limit() {
  station_error_limit_ = 0;
  clear_has_station_error_limit();
}
 double LonControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_error_limit)
  return station_error_limit_;
}
 void LonControllerConf::set_station_error_limit(double value) {
  set_has_station_error_limit();
  station_error_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.station_error_limit)
}

// optional double preview_window = 6;
bool LonControllerConf::has_preview_window() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LonControllerConf::set_has_preview_window() {
  _has_bits_[0] |= 0x00000020u;
}
void LonControllerConf::clear_has_preview_window() {
  _has_bits_[0] &= ~0x00000020u;
}
void LonControllerConf::clear_preview_window() {
  preview_window_ = 0;
  clear_has_preview_window();
}
 double LonControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.preview_window)
  return preview_window_;
}
 void LonControllerConf::set_preview_window(double value) {
  set_has_preview_window();
  preview_window_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.preview_window)
}

// optional double standstill_acceleration = 7;
bool LonControllerConf::has_standstill_acceleration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LonControllerConf::set_has_standstill_acceleration() {
  _has_bits_[0] |= 0x00000040u;
}
void LonControllerConf::clear_has_standstill_acceleration() {
  _has_bits_[0] &= ~0x00000040u;
}
void LonControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  clear_has_standstill_acceleration();
}
 double LonControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
 void LonControllerConf::set_standstill_acceleration(double value) {
  set_has_standstill_acceleration();
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.standstill_acceleration)
}

// optional .apollo.control.PidConf station_pid_conf = 8;
bool LonControllerConf::has_station_pid_conf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LonControllerConf::set_has_station_pid_conf() {
  _has_bits_[0] |= 0x00000080u;
}
void LonControllerConf::clear_has_station_pid_conf() {
  _has_bits_[0] &= ~0x00000080u;
}
void LonControllerConf::clear_station_pid_conf() {
  if (station_pid_conf_ != NULL) station_pid_conf_->::apollo::control::PidConf::Clear();
  clear_has_station_pid_conf();
}
const ::apollo::control::PidConf& LonControllerConf::station_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_ != NULL ? *station_pid_conf_ : *default_instance_->station_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::mutable_station_pid_conf() {
  set_has_station_pid_conf();
  if (station_pid_conf_ == NULL) {
    station_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.station_pid_conf)
  clear_has_station_pid_conf();
  ::apollo::control::PidConf* temp = station_pid_conf_;
  station_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf) {
  delete station_pid_conf_;
  station_pid_conf_ = station_pid_conf;
  if (station_pid_conf) {
    set_has_station_pid_conf();
  } else {
    clear_has_station_pid_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.station_pid_conf)
}

// optional .apollo.control.PidConf low_speed_pid_conf = 9;
bool LonControllerConf::has_low_speed_pid_conf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LonControllerConf::set_has_low_speed_pid_conf() {
  _has_bits_[0] |= 0x00000100u;
}
void LonControllerConf::clear_has_low_speed_pid_conf() {
  _has_bits_[0] &= ~0x00000100u;
}
void LonControllerConf::clear_low_speed_pid_conf() {
  if (low_speed_pid_conf_ != NULL) low_speed_pid_conf_->::apollo::control::PidConf::Clear();
  clear_has_low_speed_pid_conf();
}
const ::apollo::control::PidConf& LonControllerConf::low_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_ != NULL ? *low_speed_pid_conf_ : *default_instance_->low_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::mutable_low_speed_pid_conf() {
  set_has_low_speed_pid_conf();
  if (low_speed_pid_conf_ == NULL) {
    low_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.low_speed_pid_conf)
  clear_has_low_speed_pid_conf();
  ::apollo::control::PidConf* temp = low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf) {
  delete low_speed_pid_conf_;
  low_speed_pid_conf_ = low_speed_pid_conf;
  if (low_speed_pid_conf) {
    set_has_low_speed_pid_conf();
  } else {
    clear_has_low_speed_pid_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.low_speed_pid_conf)
}

// optional .apollo.control.PidConf high_speed_pid_conf = 10;
bool LonControllerConf::has_high_speed_pid_conf() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LonControllerConf::set_has_high_speed_pid_conf() {
  _has_bits_[0] |= 0x00000200u;
}
void LonControllerConf::clear_has_high_speed_pid_conf() {
  _has_bits_[0] &= ~0x00000200u;
}
void LonControllerConf::clear_high_speed_pid_conf() {
  if (high_speed_pid_conf_ != NULL) high_speed_pid_conf_->::apollo::control::PidConf::Clear();
  clear_has_high_speed_pid_conf();
}
const ::apollo::control::PidConf& LonControllerConf::high_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_ != NULL ? *high_speed_pid_conf_ : *default_instance_->high_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::mutable_high_speed_pid_conf() {
  set_has_high_speed_pid_conf();
  if (high_speed_pid_conf_ == NULL) {
    high_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.high_speed_pid_conf)
  clear_has_high_speed_pid_conf();
  ::apollo::control::PidConf* temp = high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf) {
  delete high_speed_pid_conf_;
  high_speed_pid_conf_ = high_speed_pid_conf;
  if (high_speed_pid_conf) {
    set_has_high_speed_pid_conf();
  } else {
    clear_has_high_speed_pid_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
bool LonControllerConf::has_switch_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LonControllerConf::set_has_switch_speed() {
  _has_bits_[0] |= 0x00000400u;
}
void LonControllerConf::clear_has_switch_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
void LonControllerConf::clear_switch_speed() {
  switch_speed_ = 0;
  clear_has_switch_speed();
}
 double LonControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.switch_speed)
  return switch_speed_;
}
 void LonControllerConf::set_switch_speed(double value) {
  set_has_switch_speed();
  switch_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.switch_speed)
}

// optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
bool LonControllerConf::has_pitch_angle_filter_conf() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LonControllerConf::set_has_pitch_angle_filter_conf() {
  _has_bits_[0] |= 0x00000800u;
}
void LonControllerConf::clear_has_pitch_angle_filter_conf() {
  _has_bits_[0] &= ~0x00000800u;
}
void LonControllerConf::clear_pitch_angle_filter_conf() {
  if (pitch_angle_filter_conf_ != NULL) pitch_angle_filter_conf_->::apollo::control::FilterConf::Clear();
  clear_has_pitch_angle_filter_conf();
}
const ::apollo::control::FilterConf& LonControllerConf::pitch_angle_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  return pitch_angle_filter_conf_ != NULL ? *pitch_angle_filter_conf_ : *default_instance_->pitch_angle_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::mutable_pitch_angle_filter_conf() {
  set_has_pitch_angle_filter_conf();
  if (pitch_angle_filter_conf_ == NULL) {
    pitch_angle_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  return pitch_angle_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::release_pitch_angle_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  clear_has_pitch_angle_filter_conf();
  ::apollo::control::FilterConf* temp = pitch_angle_filter_conf_;
  pitch_angle_filter_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_pitch_angle_filter_conf(::apollo::control::FilterConf* pitch_angle_filter_conf) {
  delete pitch_angle_filter_conf_;
  pitch_angle_filter_conf_ = pitch_angle_filter_conf;
  if (pitch_angle_filter_conf) {
    set_has_pitch_angle_filter_conf();
  } else {
    clear_has_pitch_angle_filter_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.pitch_angle_filter_conf)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
bool LonControllerConf::has_calibration_table() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LonControllerConf::set_has_calibration_table() {
  _has_bits_[0] |= 0x00001000u;
}
void LonControllerConf::clear_has_calibration_table() {
  _has_bits_[0] &= ~0x00001000u;
}
void LonControllerConf::clear_calibration_table() {
  if (calibration_table_ != NULL) calibration_table_->::apollo::control::calibrationtable::ControlCalibrationTable::Clear();
  clear_has_calibration_table();
}
const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_ != NULL ? *calibration_table_ : *default_instance_->calibration_table_;
}
::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::mutable_calibration_table() {
  set_has_calibration_table();
  if (calibration_table_ == NULL) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_;
}
::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.calibration_table)
  clear_has_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  delete calibration_table_;
  calibration_table_ = calibration_table;
  if (calibration_table) {
    set_has_calibration_table();
  } else {
    clear_has_calibration_table();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.calibration_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
