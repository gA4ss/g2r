// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/ultrasonic_radar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/ultrasonic_radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {

namespace {

const ::google::protobuf::Descriptor* Ultrasonic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ultrasonic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fultrasonic_5fradar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fultrasonic_5fradar_2eproto() {
  protobuf_AddDesc_drivers_2fultrasonic_5fradar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/ultrasonic_radar.proto");
  GOOGLE_CHECK(file != NULL);
  Ultrasonic_descriptor_ = file->message_type(0);
  static const int Ultrasonic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ultrasonic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ultrasonic, ranges_),
  };
  Ultrasonic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ultrasonic_descriptor_,
      Ultrasonic::default_instance_,
      Ultrasonic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ultrasonic, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ultrasonic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ultrasonic, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fultrasonic_5fradar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ultrasonic_descriptor_, &Ultrasonic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fultrasonic_5fradar_2eproto() {
  delete Ultrasonic::default_instance_;
  delete Ultrasonic_reflection_;
}

void protobuf_AddDesc_drivers_2fultrasonic_5fradar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fultrasonic_5fradar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036drivers/ultrasonic_radar.proto\022\016apollo"
    ".drivers\032\023common/header.proto\"C\n\nUltraso"
    "nic\022%\n\006header\030\001 \001(\0132\025.apollo.common.Head"
    "er\022\016\n\006ranges\030\002 \003(\002", 138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/ultrasonic_radar.proto", &protobuf_RegisterTypes);
  Ultrasonic::default_instance_ = new Ultrasonic();
  Ultrasonic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fultrasonic_5fradar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fultrasonic_5fradar_2eproto {
  StaticDescriptorInitializer_drivers_2fultrasonic_5fradar_2eproto() {
    protobuf_AddDesc_drivers_2fultrasonic_5fradar_2eproto();
  }
} static_descriptor_initializer_drivers_2fultrasonic_5fradar_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ultrasonic::kHeaderFieldNumber;
const int Ultrasonic::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ultrasonic::Ultrasonic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Ultrasonic)
}

void Ultrasonic::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

Ultrasonic::Ultrasonic(const Ultrasonic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Ultrasonic)
}

void Ultrasonic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ultrasonic::~Ultrasonic() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Ultrasonic)
  SharedDtor();
}

void Ultrasonic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void Ultrasonic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ultrasonic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ultrasonic_descriptor_;
}

const Ultrasonic& Ultrasonic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fultrasonic_5fradar_2eproto();
  return *default_instance_;
}

Ultrasonic* Ultrasonic::default_instance_ = NULL;

Ultrasonic* Ultrasonic::New(::google::protobuf::Arena* arena) const {
  Ultrasonic* n = new Ultrasonic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ultrasonic::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Ultrasonic)
  if (has_header()) {
    if (header_ != NULL) header_->::apollo::common::Header::Clear();
  }
  ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ultrasonic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Ultrasonic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ranges;
        break;
      }

      // repeated float ranges = 2;
      case 2: {
        if (tag == 21) {
         parse_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_ranges())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ranges;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Ultrasonic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Ultrasonic)
  return false;
#undef DO_
}

void Ultrasonic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Ultrasonic)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated float ranges = 2;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->ranges(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Ultrasonic)
}

::google::protobuf::uint8* Ultrasonic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Ultrasonic)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated float ranges = 2;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->ranges(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Ultrasonic)
  return target;
}

int Ultrasonic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Ultrasonic)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated float ranges = 2;
  {
    int data_size = 0;
    data_size = 4 * this->ranges_size();
    total_size += 1 * this->ranges_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ultrasonic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Ultrasonic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ultrasonic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ultrasonic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Ultrasonic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Ultrasonic)
    MergeFrom(*source);
  }
}

void Ultrasonic::MergeFrom(const Ultrasonic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Ultrasonic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ranges_.MergeFrom(from.ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ultrasonic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Ultrasonic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ultrasonic::CopyFrom(const Ultrasonic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Ultrasonic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ultrasonic::IsInitialized() const {

  return true;
}

void Ultrasonic::Swap(Ultrasonic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ultrasonic::InternalSwap(Ultrasonic* other) {
  std::swap(header_, other->header_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ultrasonic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ultrasonic_descriptor_;
  metadata.reflection = Ultrasonic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ultrasonic

// optional .apollo.common.Header header = 1;
bool Ultrasonic::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ultrasonic::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Ultrasonic::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ultrasonic::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& Ultrasonic::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Ultrasonic.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* Ultrasonic::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Ultrasonic.header)
  return header_;
}
::apollo::common::Header* Ultrasonic::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Ultrasonic.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Ultrasonic::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Ultrasonic.header)
}

// repeated float ranges = 2;
int Ultrasonic::ranges_size() const {
  return ranges_.size();
}
void Ultrasonic::clear_ranges() {
  ranges_.Clear();
}
 float Ultrasonic::ranges(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Ultrasonic.ranges)
  return ranges_.Get(index);
}
 void Ultrasonic::set_ranges(int index, float value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Ultrasonic.ranges)
}
 void Ultrasonic::add_ranges(float value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.Ultrasonic.ranges)
}
 const ::google::protobuf::RepeatedField< float >&
Ultrasonic::ranges() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Ultrasonic.ranges)
  return ranges_;
}
 ::google::protobuf::RepeatedField< float >*
Ultrasonic::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Ultrasonic.ranges)
  return &ranges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
