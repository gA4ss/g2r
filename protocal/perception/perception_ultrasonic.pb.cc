// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/perception_ultrasonic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/perception_ultrasonic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {

namespace {

const ::google::protobuf::Descriptor* ImpendingCollisionEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImpendingCollisionEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImpendingCollisionEdges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImpendingCollisionEdges_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2fperception_5fultrasonic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2fperception_5fultrasonic_2eproto() {
  protobuf_AddDesc_perception_2fperception_5fultrasonic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/perception_ultrasonic.proto");
  GOOGLE_CHECK(file != NULL);
  ImpendingCollisionEdge_descriptor_ = file->message_type(0);
  static const int ImpendingCollisionEdge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, cone_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, tracking_time_),
  };
  ImpendingCollisionEdge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImpendingCollisionEdge_descriptor_,
      ImpendingCollisionEdge::default_instance_,
      ImpendingCollisionEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImpendingCollisionEdge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, _internal_metadata_),
      -1);
  ImpendingCollisionEdges_descriptor_ = file->message_type(1);
  static const int ImpendingCollisionEdges_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, impending_collision_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, header_),
  };
  ImpendingCollisionEdges_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImpendingCollisionEdges_descriptor_,
      ImpendingCollisionEdges::default_instance_,
      ImpendingCollisionEdges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImpendingCollisionEdges),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2fperception_5fultrasonic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImpendingCollisionEdge_descriptor_, &ImpendingCollisionEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImpendingCollisionEdges_descriptor_, &ImpendingCollisionEdges::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2fperception_5fultrasonic_2eproto() {
  delete ImpendingCollisionEdge::default_instance_;
  delete ImpendingCollisionEdge_reflection_;
  delete ImpendingCollisionEdges::default_instance_;
  delete ImpendingCollisionEdges_reflection_;
}

void protobuf_AddDesc_perception_2fperception_5fultrasonic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2fperception_5fultrasonic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&perception/perception_ultrasonic.proto"
    "\022\021apollo.perception\032\023common/header.proto"
    "\032\025common/geometry.proto\"x\n\026ImpendingColl"
    "isionEdge\022\n\n\002id\030\001 \001(\005\022\024\n\014cone_id_list\030\002 "
    "\003(\005\022%\n\005point\030\003 \003(\0132\026.apollo.common.Point"
    "3D\022\025\n\rtracking_time\030\004 \001(\001\"\215\001\n\027ImpendingC"
    "ollisionEdges\022K\n\030impending_collision_edg"
    "e\030\001 \003(\0132).apollo.perception.ImpendingCol"
    "lisionEdge\022%\n\006header\030\002 \001(\0132\025.apollo.comm"
    "on.Header", 369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/perception_ultrasonic.proto", &protobuf_RegisterTypes);
  ImpendingCollisionEdge::default_instance_ = new ImpendingCollisionEdge();
  ImpendingCollisionEdges::default_instance_ = new ImpendingCollisionEdges();
  ImpendingCollisionEdge::default_instance_->InitAsDefaultInstance();
  ImpendingCollisionEdges::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2fperception_5fultrasonic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2fperception_5fultrasonic_2eproto {
  StaticDescriptorInitializer_perception_2fperception_5fultrasonic_2eproto() {
    protobuf_AddDesc_perception_2fperception_5fultrasonic_2eproto();
  }
} static_descriptor_initializer_perception_2fperception_5fultrasonic_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImpendingCollisionEdge::kIdFieldNumber;
const int ImpendingCollisionEdge::kConeIdListFieldNumber;
const int ImpendingCollisionEdge::kPointFieldNumber;
const int ImpendingCollisionEdge::kTrackingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImpendingCollisionEdge::ImpendingCollisionEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.ImpendingCollisionEdge)
}

void ImpendingCollisionEdge::InitAsDefaultInstance() {
}

ImpendingCollisionEdge::ImpendingCollisionEdge(const ImpendingCollisionEdge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.ImpendingCollisionEdge)
}

void ImpendingCollisionEdge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  tracking_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImpendingCollisionEdge::~ImpendingCollisionEdge() {
  // @@protoc_insertion_point(destructor:apollo.perception.ImpendingCollisionEdge)
  SharedDtor();
}

void ImpendingCollisionEdge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImpendingCollisionEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpendingCollisionEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpendingCollisionEdge_descriptor_;
}

const ImpendingCollisionEdge& ImpendingCollisionEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fultrasonic_2eproto();
  return *default_instance_;
}

ImpendingCollisionEdge* ImpendingCollisionEdge::default_instance_ = NULL;

ImpendingCollisionEdge* ImpendingCollisionEdge::New(::google::protobuf::Arena* arena) const {
  ImpendingCollisionEdge* n = new ImpendingCollisionEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImpendingCollisionEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.ImpendingCollisionEdge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImpendingCollisionEdge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImpendingCollisionEdge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tracking_time_, id_);

#undef ZR_HELPER_
#undef ZR_

  cone_id_list_.Clear();
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImpendingCollisionEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.ImpendingCollisionEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cone_id_list;
        break;
      }

      // repeated int32 cone_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_cone_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cone_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cone_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cone_id_list;
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // repeated .apollo.common.Point3D point = 3;
      case 3: {
        if (tag == 26) {
         parse_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(33)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (tag == 33) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
          set_has_tracking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.ImpendingCollisionEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.ImpendingCollisionEdge)
  return false;
#undef DO_
}

void ImpendingCollisionEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.ImpendingCollisionEdge)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 cone_id_list = 2;
  for (int i = 0; i < this->cone_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cone_id_list(i), output);
  }

  // repeated .apollo.common.Point3D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(i), output);
  }

  // optional double tracking_time = 4;
  if (has_tracking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.ImpendingCollisionEdge)
}

::google::protobuf::uint8* ImpendingCollisionEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.ImpendingCollisionEdge)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 cone_id_list = 2;
  for (int i = 0; i < this->cone_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cone_id_list(i), target);
  }

  // repeated .apollo.common.Point3D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->point(i), false, target);
  }

  // optional double tracking_time = 4;
  if (has_tracking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.ImpendingCollisionEdge)
  return target;
}

int ImpendingCollisionEdge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.ImpendingCollisionEdge)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 9u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 cone_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cone_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cone_id_list(i));
    }
    total_size += 1 * this->cone_id_list_size() + data_size;
  }

  // repeated .apollo.common.Point3D point = 3;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpendingCollisionEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.ImpendingCollisionEdge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImpendingCollisionEdge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImpendingCollisionEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.ImpendingCollisionEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.ImpendingCollisionEdge)
    MergeFrom(*source);
  }
}

void ImpendingCollisionEdge::MergeFrom(const ImpendingCollisionEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.ImpendingCollisionEdge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cone_id_list_.MergeFrom(from.cone_id_list_);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tracking_time()) {
      set_tracking_time(from.tracking_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImpendingCollisionEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.ImpendingCollisionEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpendingCollisionEdge::CopyFrom(const ImpendingCollisionEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.ImpendingCollisionEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpendingCollisionEdge::IsInitialized() const {

  return true;
}

void ImpendingCollisionEdge::Swap(ImpendingCollisionEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImpendingCollisionEdge::InternalSwap(ImpendingCollisionEdge* other) {
  std::swap(id_, other->id_);
  cone_id_list_.UnsafeArenaSwap(&other->cone_id_list_);
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImpendingCollisionEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImpendingCollisionEdge_descriptor_;
  metadata.reflection = ImpendingCollisionEdge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImpendingCollisionEdge

// optional int32 id = 1;
bool ImpendingCollisionEdge::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImpendingCollisionEdge::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ImpendingCollisionEdge::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImpendingCollisionEdge::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ImpendingCollisionEdge::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ImpendingCollisionEdge.id)
  return id_;
}
 void ImpendingCollisionEdge::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.ImpendingCollisionEdge.id)
}

// repeated int32 cone_id_list = 2;
int ImpendingCollisionEdge::cone_id_list_size() const {
  return cone_id_list_.size();
}
void ImpendingCollisionEdge::clear_cone_id_list() {
  cone_id_list_.Clear();
}
 ::google::protobuf::int32 ImpendingCollisionEdge::cone_id_list(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.ImpendingCollisionEdge.cone_id_list)
  return cone_id_list_.Get(index);
}
 void ImpendingCollisionEdge::set_cone_id_list(int index, ::google::protobuf::int32 value) {
  cone_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.ImpendingCollisionEdge.cone_id_list)
}
 void ImpendingCollisionEdge::add_cone_id_list(::google::protobuf::int32 value) {
  cone_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.ImpendingCollisionEdge.cone_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ImpendingCollisionEdge::cone_id_list() const {
  // @@protoc_insertion_point(field_list:apollo.perception.ImpendingCollisionEdge.cone_id_list)
  return cone_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ImpendingCollisionEdge::mutable_cone_id_list() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.ImpendingCollisionEdge.cone_id_list)
  return &cone_id_list_;
}

// repeated .apollo.common.Point3D point = 3;
int ImpendingCollisionEdge::point_size() const {
  return point_.size();
}
void ImpendingCollisionEdge::clear_point() {
  point_.Clear();
}
const ::apollo::common::Point3D& ImpendingCollisionEdge::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.ImpendingCollisionEdge.point)
  return point_.Get(index);
}
::apollo::common::Point3D* ImpendingCollisionEdge::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.ImpendingCollisionEdge.point)
  return point_.Mutable(index);
}
::apollo::common::Point3D* ImpendingCollisionEdge::add_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.ImpendingCollisionEdge.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
ImpendingCollisionEdge::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.ImpendingCollisionEdge.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
ImpendingCollisionEdge::point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.ImpendingCollisionEdge.point)
  return point_;
}

// optional double tracking_time = 4;
bool ImpendingCollisionEdge::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImpendingCollisionEdge::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ImpendingCollisionEdge::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImpendingCollisionEdge::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
 double ImpendingCollisionEdge::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ImpendingCollisionEdge.tracking_time)
  return tracking_time_;
}
 void ImpendingCollisionEdge::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.ImpendingCollisionEdge.tracking_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImpendingCollisionEdges::kImpendingCollisionEdgeFieldNumber;
const int ImpendingCollisionEdges::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImpendingCollisionEdges::ImpendingCollisionEdges()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.ImpendingCollisionEdges)
}

void ImpendingCollisionEdges::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

ImpendingCollisionEdges::ImpendingCollisionEdges(const ImpendingCollisionEdges& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.ImpendingCollisionEdges)
}

void ImpendingCollisionEdges::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImpendingCollisionEdges::~ImpendingCollisionEdges() {
  // @@protoc_insertion_point(destructor:apollo.perception.ImpendingCollisionEdges)
  SharedDtor();
}

void ImpendingCollisionEdges::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void ImpendingCollisionEdges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpendingCollisionEdges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpendingCollisionEdges_descriptor_;
}

const ImpendingCollisionEdges& ImpendingCollisionEdges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fultrasonic_2eproto();
  return *default_instance_;
}

ImpendingCollisionEdges* ImpendingCollisionEdges::default_instance_ = NULL;

ImpendingCollisionEdges* ImpendingCollisionEdges::New(::google::protobuf::Arena* arena) const {
  ImpendingCollisionEdges* n = new ImpendingCollisionEdges;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImpendingCollisionEdges::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.ImpendingCollisionEdges)
  if (has_header()) {
    if (header_ != NULL) header_->::apollo::common::Header::Clear();
  }
  impending_collision_edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImpendingCollisionEdges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.ImpendingCollisionEdges)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.ImpendingCollisionEdge impending_collision_edge = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_impending_collision_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_impending_collision_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_impending_collision_edge;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.ImpendingCollisionEdges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.ImpendingCollisionEdges)
  return false;
#undef DO_
}

void ImpendingCollisionEdges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.ImpendingCollisionEdges)
  // repeated .apollo.perception.ImpendingCollisionEdge impending_collision_edge = 1;
  for (unsigned int i = 0, n = this->impending_collision_edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->impending_collision_edge(i), output);
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.ImpendingCollisionEdges)
}

::google::protobuf::uint8* ImpendingCollisionEdges::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.ImpendingCollisionEdges)
  // repeated .apollo.perception.ImpendingCollisionEdge impending_collision_edge = 1;
  for (unsigned int i = 0, n = this->impending_collision_edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->impending_collision_edge(i), false, target);
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.ImpendingCollisionEdges)
  return target;
}

int ImpendingCollisionEdges::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.ImpendingCollisionEdges)
  int total_size = 0;

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .apollo.perception.ImpendingCollisionEdge impending_collision_edge = 1;
  total_size += 1 * this->impending_collision_edge_size();
  for (int i = 0; i < this->impending_collision_edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impending_collision_edge(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpendingCollisionEdges::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.ImpendingCollisionEdges)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImpendingCollisionEdges* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImpendingCollisionEdges>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.ImpendingCollisionEdges)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.ImpendingCollisionEdges)
    MergeFrom(*source);
  }
}

void ImpendingCollisionEdges::MergeFrom(const ImpendingCollisionEdges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.ImpendingCollisionEdges)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  impending_collision_edge_.MergeFrom(from.impending_collision_edge_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImpendingCollisionEdges::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.ImpendingCollisionEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpendingCollisionEdges::CopyFrom(const ImpendingCollisionEdges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.ImpendingCollisionEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpendingCollisionEdges::IsInitialized() const {

  return true;
}

void ImpendingCollisionEdges::Swap(ImpendingCollisionEdges* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImpendingCollisionEdges::InternalSwap(ImpendingCollisionEdges* other) {
  impending_collision_edge_.UnsafeArenaSwap(&other->impending_collision_edge_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImpendingCollisionEdges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImpendingCollisionEdges_descriptor_;
  metadata.reflection = ImpendingCollisionEdges_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImpendingCollisionEdges

// repeated .apollo.perception.ImpendingCollisionEdge impending_collision_edge = 1;
int ImpendingCollisionEdges::impending_collision_edge_size() const {
  return impending_collision_edge_.size();
}
void ImpendingCollisionEdges::clear_impending_collision_edge() {
  impending_collision_edge_.Clear();
}
const ::apollo::perception::ImpendingCollisionEdge& ImpendingCollisionEdges::impending_collision_edge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_.Get(index);
}
::apollo::perception::ImpendingCollisionEdge* ImpendingCollisionEdges::mutable_impending_collision_edge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_.Mutable(index);
}
::apollo::perception::ImpendingCollisionEdge* ImpendingCollisionEdges::add_impending_collision_edge() {
  // @@protoc_insertion_point(field_add:apollo.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::ImpendingCollisionEdge >*
ImpendingCollisionEdges::mutable_impending_collision_edge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.ImpendingCollisionEdges.impending_collision_edge)
  return &impending_collision_edge_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::ImpendingCollisionEdge >&
ImpendingCollisionEdges::impending_collision_edge() const {
  // @@protoc_insertion_point(field_list:apollo.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_;
}

// optional .apollo.common.Header header = 2;
bool ImpendingCollisionEdges::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImpendingCollisionEdges::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void ImpendingCollisionEdges::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImpendingCollisionEdges::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& ImpendingCollisionEdges::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ImpendingCollisionEdges.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* ImpendingCollisionEdges::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.ImpendingCollisionEdges.header)
  return header_;
}
::apollo::common::Header* ImpendingCollisionEdges::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.ImpendingCollisionEdges.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ImpendingCollisionEdges::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.ImpendingCollisionEdges.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
