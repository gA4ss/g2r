// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/dp_st_speed_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/dp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* DpStSpeedConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DpStSpeedConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/dp_st_speed_config.proto");
  GOOGLE_CHECK(file != NULL);
  DpStSpeedConfig_descriptor_ = file->message_type(0);
  static const int DpStSpeedConfig_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, total_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, matrix_dimension_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, matrix_dimension_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, speed_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, accel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, jerk_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, obstacle_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, reference_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, go_down_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, go_up_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, default_obstacle_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, default_speed_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, exceed_speed_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, low_speed_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, keep_clear_low_speed_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, accel_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, decel_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, positive_jerk_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, negative_jerk_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, max_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, max_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, st_boundary_config_),
  };
  DpStSpeedConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DpStSpeedConfig_descriptor_,
      DpStSpeedConfig::default_instance_,
      DpStSpeedConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(DpStSpeedConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DpStSpeedConfig_descriptor_, &DpStSpeedConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fdp_5fst_5fspeed_5fconfig_2eproto() {
  delete DpStSpeedConfig::default_instance_;
  delete DpStSpeedConfig_reflection_;
}

void protobuf_AddDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::planning::protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!planning/dp_st_speed_config.proto\022\017apo"
    "llo.planning\032!planning/st_boundary_confi"
    "g.proto\"\355\005\n\017DpStSpeedConfig\022\036\n\021total_pat"
    "h_length\030\001 \001(\001:\0030.1\022\025\n\ntotal_time\030\002 \001(\001:"
    "\0013\022\037\n\022matrix_dimension_s\030\003 \001(\005:\003100\022\036\n\022m"
    "atrix_dimension_t\030\004 \001(\005:\00210\022\027\n\014speed_wei"
    "ght\030\005 \001(\001:\0010\022\030\n\014accel_weight\030\006 \001(\001:\00210\022\027"
    "\n\013jerk_weight\030\007 \001(\001:\00210\022\032\n\017obstacle_weig"
    "ht\030\010 \001(\001:\0011\022\033\n\020reference_weight\030\t \001(\001:\0010"
    "\022\031\n\016go_down_buffer\030\n \001(\001:\0015\022\027\n\014go_up_buf"
    "fer\030\013 \001(\001:\0015\022*\n\025default_obstacle_cost\030\014 "
    "\001(\001:\01310000000000\022\035\n\022default_speed_cost\030\r"
    " \001(\001:\0011\022 \n\024exceed_speed_penalty\030\016 \001(\001:\0021"
    "0\022\036\n\021low_speed_penalty\030\017 \001(\001:\0032.5\022(\n\034kee"
    "p_clear_low_speed_penalty\030\020 \001(\001:\00210\022\030\n\ra"
    "ccel_penalty\030\024 \001(\001:\0012\022\030\n\rdecel_penalty\030\025"
    " \001(\001:\0012\022\036\n\023positive_jerk_coeff\030\036 \001(\001:\0011\022"
    " \n\023negative_jerk_coeff\030\037 \001(\001:\003300\022\035\n\020max"
    "_acceleration\030( \001(\001:\0034.5\022\036\n\020max_decelera"
    "tion\030) \001(\001:\004-4.5\022=\n\022st_boundary_config\0302"
    " \001(\0132!.apollo.planning.StBoundaryConfig", 839);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/dp_st_speed_config.proto", &protobuf_RegisterTypes);
  DpStSpeedConfig::default_instance_ = new DpStSpeedConfig();
  DpStSpeedConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fdp_5fst_5fspeed_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fdp_5fst_5fspeed_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fdp_5fst_5fspeed_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fdp_5fst_5fspeed_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpStSpeedConfig::kTotalPathLengthFieldNumber;
const int DpStSpeedConfig::kTotalTimeFieldNumber;
const int DpStSpeedConfig::kMatrixDimensionSFieldNumber;
const int DpStSpeedConfig::kMatrixDimensionTFieldNumber;
const int DpStSpeedConfig::kSpeedWeightFieldNumber;
const int DpStSpeedConfig::kAccelWeightFieldNumber;
const int DpStSpeedConfig::kJerkWeightFieldNumber;
const int DpStSpeedConfig::kObstacleWeightFieldNumber;
const int DpStSpeedConfig::kReferenceWeightFieldNumber;
const int DpStSpeedConfig::kGoDownBufferFieldNumber;
const int DpStSpeedConfig::kGoUpBufferFieldNumber;
const int DpStSpeedConfig::kDefaultObstacleCostFieldNumber;
const int DpStSpeedConfig::kDefaultSpeedCostFieldNumber;
const int DpStSpeedConfig::kExceedSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kLowSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kKeepClearLowSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kAccelPenaltyFieldNumber;
const int DpStSpeedConfig::kDecelPenaltyFieldNumber;
const int DpStSpeedConfig::kPositiveJerkCoeffFieldNumber;
const int DpStSpeedConfig::kNegativeJerkCoeffFieldNumber;
const int DpStSpeedConfig::kMaxAccelerationFieldNumber;
const int DpStSpeedConfig::kMaxDecelerationFieldNumber;
const int DpStSpeedConfig::kStBoundaryConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpStSpeedConfig::DpStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DpStSpeedConfig)
}

void DpStSpeedConfig::InitAsDefaultInstance() {
  st_boundary_config_ = const_cast< ::apollo::planning::StBoundaryConfig*>(&::apollo::planning::StBoundaryConfig::default_instance());
}

DpStSpeedConfig::DpStSpeedConfig(const DpStSpeedConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpStSpeedConfig)
}

void DpStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  total_path_length_ = 0.1;
  total_time_ = 3;
  matrix_dimension_s_ = 100;
  matrix_dimension_t_ = 10;
  speed_weight_ = 0;
  accel_weight_ = 10;
  jerk_weight_ = 10;
  obstacle_weight_ = 1;
  reference_weight_ = 0;
  go_down_buffer_ = 5;
  go_up_buffer_ = 5;
  default_obstacle_cost_ = 10000000000;
  default_speed_cost_ = 1;
  exceed_speed_penalty_ = 10;
  low_speed_penalty_ = 2.5;
  keep_clear_low_speed_penalty_ = 10;
  accel_penalty_ = 2;
  decel_penalty_ = 2;
  positive_jerk_coeff_ = 1;
  negative_jerk_coeff_ = 300;
  max_acceleration_ = 4.5;
  max_deceleration_ = -4.5;
  st_boundary_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DpStSpeedConfig::~DpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpStSpeedConfig)
  SharedDtor();
}

void DpStSpeedConfig::SharedDtor() {
  if (this != default_instance_) {
    delete st_boundary_config_;
  }
}

void DpStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpStSpeedConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DpStSpeedConfig_descriptor_;
}

const DpStSpeedConfig& DpStSpeedConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdp_5fst_5fspeed_5fconfig_2eproto();
  return *default_instance_;
}

DpStSpeedConfig* DpStSpeedConfig::default_instance_ = NULL;

DpStSpeedConfig* DpStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  DpStSpeedConfig* n = new DpStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpStSpeedConfig)
  if (_has_bits_[0 / 32] & 255u) {
    total_path_length_ = 0.1;
    total_time_ = 3;
    matrix_dimension_s_ = 100;
    matrix_dimension_t_ = 10;
    speed_weight_ = 0;
    accel_weight_ = 10;
    jerk_weight_ = 10;
    obstacle_weight_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    reference_weight_ = 0;
    go_down_buffer_ = 5;
    go_up_buffer_ = 5;
    default_obstacle_cost_ = 10000000000;
    default_speed_cost_ = 1;
    exceed_speed_penalty_ = 10;
    low_speed_penalty_ = 2.5;
    keep_clear_low_speed_penalty_ = 10;
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    accel_penalty_ = 2;
    decel_penalty_ = 2;
    positive_jerk_coeff_ = 1;
    negative_jerk_coeff_ = 300;
    max_acceleration_ = 4.5;
    max_deceleration_ = -4.5;
    if (has_st_boundary_config()) {
      if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DpStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DpStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_path_length = 1 [default = 0.1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
          set_has_total_path_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_time;
        break;
      }

      // optional double total_time = 2 [default = 3];
      case 2: {
        if (tag == 17) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_matrix_dimension_s;
        break;
      }

      // optional int32 matrix_dimension_s = 3 [default = 100];
      case 3: {
        if (tag == 24) {
         parse_matrix_dimension_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrix_dimension_s_)));
          set_has_matrix_dimension_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_matrix_dimension_t;
        break;
      }

      // optional int32 matrix_dimension_t = 4 [default = 10];
      case 4: {
        if (tag == 32) {
         parse_matrix_dimension_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrix_dimension_t_)));
          set_has_matrix_dimension_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_speed_weight;
        break;
      }

      // optional double speed_weight = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_speed_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_weight_)));
          set_has_speed_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_accel_weight;
        break;
      }

      // optional double accel_weight = 6 [default = 10];
      case 6: {
        if (tag == 49) {
         parse_accel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_weight_)));
          set_has_accel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_jerk_weight;
        break;
      }

      // optional double jerk_weight = 7 [default = 10];
      case 7: {
        if (tag == 57) {
         parse_jerk_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
          set_has_jerk_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_obstacle_weight;
        break;
      }

      // optional double obstacle_weight = 8 [default = 1];
      case 8: {
        if (tag == 65) {
         parse_obstacle_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
          set_has_obstacle_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_reference_weight;
        break;
      }

      // optional double reference_weight = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_reference_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_weight_)));
          set_has_reference_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_go_down_buffer;
        break;
      }

      // optional double go_down_buffer = 10 [default = 5];
      case 10: {
        if (tag == 81) {
         parse_go_down_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_down_buffer_)));
          set_has_go_down_buffer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_go_up_buffer;
        break;
      }

      // optional double go_up_buffer = 11 [default = 5];
      case 11: {
        if (tag == 89) {
         parse_go_up_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_up_buffer_)));
          set_has_go_up_buffer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_default_obstacle_cost;
        break;
      }

      // optional double default_obstacle_cost = 12 [default = 10000000000];
      case 12: {
        if (tag == 97) {
         parse_default_obstacle_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_obstacle_cost_)));
          set_has_default_obstacle_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_default_speed_cost;
        break;
      }

      // optional double default_speed_cost = 13 [default = 1];
      case 13: {
        if (tag == 105) {
         parse_default_speed_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_cost_)));
          set_has_default_speed_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_exceed_speed_penalty;
        break;
      }

      // optional double exceed_speed_penalty = 14 [default = 10];
      case 14: {
        if (tag == 113) {
         parse_exceed_speed_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exceed_speed_penalty_)));
          set_has_exceed_speed_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_low_speed_penalty;
        break;
      }

      // optional double low_speed_penalty = 15 [default = 2.5];
      case 15: {
        if (tag == 121) {
         parse_low_speed_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_penalty_)));
          set_has_low_speed_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_keep_clear_low_speed_penalty;
        break;
      }

      // optional double keep_clear_low_speed_penalty = 16 [default = 10];
      case 16: {
        if (tag == 129) {
         parse_keep_clear_low_speed_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_clear_low_speed_penalty_)));
          set_has_keep_clear_low_speed_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_accel_penalty;
        break;
      }

      // optional double accel_penalty = 20 [default = 2];
      case 20: {
        if (tag == 161) {
         parse_accel_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_penalty_)));
          set_has_accel_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_decel_penalty;
        break;
      }

      // optional double decel_penalty = 21 [default = 2];
      case 21: {
        if (tag == 169) {
         parse_decel_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decel_penalty_)));
          set_has_decel_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_positive_jerk_coeff;
        break;
      }

      // optional double positive_jerk_coeff = 30 [default = 1];
      case 30: {
        if (tag == 241) {
         parse_positive_jerk_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positive_jerk_coeff_)));
          set_has_positive_jerk_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_negative_jerk_coeff;
        break;
      }

      // optional double negative_jerk_coeff = 31 [default = 300];
      case 31: {
        if (tag == 249) {
         parse_negative_jerk_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &negative_jerk_coeff_)));
          set_has_negative_jerk_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_max_acceleration;
        break;
      }

      // optional double max_acceleration = 40 [default = 4.5];
      case 40: {
        if (tag == 321) {
         parse_max_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
          set_has_max_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_max_deceleration;
        break;
      }

      // optional double max_deceleration = 41 [default = -4.5];
      case 41: {
        if (tag == 329) {
         parse_max_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
          set_has_max_deceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_st_boundary_config;
        break;
      }

      // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
      case 50: {
        if (tag == 402) {
         parse_st_boundary_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st_boundary_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DpStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DpStSpeedConfig)
  return false;
#undef DO_
}

void DpStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DpStSpeedConfig)
  // optional double total_path_length = 1 [default = 0.1];
  if (has_total_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_path_length(), output);
  }

  // optional double total_time = 2 [default = 3];
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time(), output);
  }

  // optional int32 matrix_dimension_s = 3 [default = 100];
  if (has_matrix_dimension_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->matrix_dimension_s(), output);
  }

  // optional int32 matrix_dimension_t = 4 [default = 10];
  if (has_matrix_dimension_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->matrix_dimension_t(), output);
  }

  // optional double speed_weight = 5 [default = 0];
  if (has_speed_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed_weight(), output);
  }

  // optional double accel_weight = 6 [default = 10];
  if (has_accel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->accel_weight(), output);
  }

  // optional double jerk_weight = 7 [default = 10];
  if (has_jerk_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->jerk_weight(), output);
  }

  // optional double obstacle_weight = 8 [default = 1];
  if (has_obstacle_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->obstacle_weight(), output);
  }

  // optional double reference_weight = 9 [default = 0];
  if (has_reference_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->reference_weight(), output);
  }

  // optional double go_down_buffer = 10 [default = 5];
  if (has_go_down_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->go_down_buffer(), output);
  }

  // optional double go_up_buffer = 11 [default = 5];
  if (has_go_up_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->go_up_buffer(), output);
  }

  // optional double default_obstacle_cost = 12 [default = 10000000000];
  if (has_default_obstacle_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->default_obstacle_cost(), output);
  }

  // optional double default_speed_cost = 13 [default = 1];
  if (has_default_speed_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->default_speed_cost(), output);
  }

  // optional double exceed_speed_penalty = 14 [default = 10];
  if (has_exceed_speed_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->exceed_speed_penalty(), output);
  }

  // optional double low_speed_penalty = 15 [default = 2.5];
  if (has_low_speed_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->low_speed_penalty(), output);
  }

  // optional double keep_clear_low_speed_penalty = 16 [default = 10];
  if (has_keep_clear_low_speed_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->keep_clear_low_speed_penalty(), output);
  }

  // optional double accel_penalty = 20 [default = 2];
  if (has_accel_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->accel_penalty(), output);
  }

  // optional double decel_penalty = 21 [default = 2];
  if (has_decel_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->decel_penalty(), output);
  }

  // optional double positive_jerk_coeff = 30 [default = 1];
  if (has_positive_jerk_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->positive_jerk_coeff(), output);
  }

  // optional double negative_jerk_coeff = 31 [default = 300];
  if (has_negative_jerk_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->negative_jerk_coeff(), output);
  }

  // optional double max_acceleration = 40 [default = 4.5];
  if (has_max_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 41 [default = -4.5];
  if (has_max_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->max_deceleration(), output);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
  if (has_st_boundary_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->st_boundary_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DpStSpeedConfig)
}

::google::protobuf::uint8* DpStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpStSpeedConfig)
  // optional double total_path_length = 1 [default = 0.1];
  if (has_total_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_path_length(), target);
  }

  // optional double total_time = 2 [default = 3];
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time(), target);
  }

  // optional int32 matrix_dimension_s = 3 [default = 100];
  if (has_matrix_dimension_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->matrix_dimension_s(), target);
  }

  // optional int32 matrix_dimension_t = 4 [default = 10];
  if (has_matrix_dimension_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->matrix_dimension_t(), target);
  }

  // optional double speed_weight = 5 [default = 0];
  if (has_speed_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed_weight(), target);
  }

  // optional double accel_weight = 6 [default = 10];
  if (has_accel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->accel_weight(), target);
  }

  // optional double jerk_weight = 7 [default = 10];
  if (has_jerk_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->jerk_weight(), target);
  }

  // optional double obstacle_weight = 8 [default = 1];
  if (has_obstacle_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->obstacle_weight(), target);
  }

  // optional double reference_weight = 9 [default = 0];
  if (has_reference_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->reference_weight(), target);
  }

  // optional double go_down_buffer = 10 [default = 5];
  if (has_go_down_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->go_down_buffer(), target);
  }

  // optional double go_up_buffer = 11 [default = 5];
  if (has_go_up_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->go_up_buffer(), target);
  }

  // optional double default_obstacle_cost = 12 [default = 10000000000];
  if (has_default_obstacle_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->default_obstacle_cost(), target);
  }

  // optional double default_speed_cost = 13 [default = 1];
  if (has_default_speed_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->default_speed_cost(), target);
  }

  // optional double exceed_speed_penalty = 14 [default = 10];
  if (has_exceed_speed_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->exceed_speed_penalty(), target);
  }

  // optional double low_speed_penalty = 15 [default = 2.5];
  if (has_low_speed_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->low_speed_penalty(), target);
  }

  // optional double keep_clear_low_speed_penalty = 16 [default = 10];
  if (has_keep_clear_low_speed_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->keep_clear_low_speed_penalty(), target);
  }

  // optional double accel_penalty = 20 [default = 2];
  if (has_accel_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->accel_penalty(), target);
  }

  // optional double decel_penalty = 21 [default = 2];
  if (has_decel_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->decel_penalty(), target);
  }

  // optional double positive_jerk_coeff = 30 [default = 1];
  if (has_positive_jerk_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->positive_jerk_coeff(), target);
  }

  // optional double negative_jerk_coeff = 31 [default = 300];
  if (has_negative_jerk_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->negative_jerk_coeff(), target);
  }

  // optional double max_acceleration = 40 [default = 4.5];
  if (has_max_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 41 [default = -4.5];
  if (has_max_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->max_deceleration(), target);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
  if (has_st_boundary_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->st_boundary_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpStSpeedConfig)
  return target;
}

int DpStSpeedConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpStSpeedConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double total_path_length = 1 [default = 0.1];
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2 [default = 3];
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional int32 matrix_dimension_s = 3 [default = 100];
    if (has_matrix_dimension_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrix_dimension_s());
    }

    // optional int32 matrix_dimension_t = 4 [default = 10];
    if (has_matrix_dimension_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrix_dimension_t());
    }

    // optional double speed_weight = 5 [default = 0];
    if (has_speed_weight()) {
      total_size += 1 + 8;
    }

    // optional double accel_weight = 6 [default = 10];
    if (has_accel_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 7 [default = 10];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 8 [default = 1];
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double reference_weight = 9 [default = 0];
    if (has_reference_weight()) {
      total_size += 1 + 8;
    }

    // optional double go_down_buffer = 10 [default = 5];
    if (has_go_down_buffer()) {
      total_size += 1 + 8;
    }

    // optional double go_up_buffer = 11 [default = 5];
    if (has_go_up_buffer()) {
      total_size += 1 + 8;
    }

    // optional double default_obstacle_cost = 12 [default = 10000000000];
    if (has_default_obstacle_cost()) {
      total_size += 1 + 8;
    }

    // optional double default_speed_cost = 13 [default = 1];
    if (has_default_speed_cost()) {
      total_size += 1 + 8;
    }

    // optional double exceed_speed_penalty = 14 [default = 10];
    if (has_exceed_speed_penalty()) {
      total_size += 1 + 8;
    }

    // optional double low_speed_penalty = 15 [default = 2.5];
    if (has_low_speed_penalty()) {
      total_size += 1 + 8;
    }

    // optional double keep_clear_low_speed_penalty = 16 [default = 10];
    if (has_keep_clear_low_speed_penalty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional double accel_penalty = 20 [default = 2];
    if (has_accel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double decel_penalty = 21 [default = 2];
    if (has_decel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double positive_jerk_coeff = 30 [default = 1];
    if (has_positive_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double negative_jerk_coeff = 31 [default = 300];
    if (has_negative_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration = 40 [default = 4.5];
    if (has_max_acceleration()) {
      total_size += 2 + 8;
    }

    // optional double max_deceleration = 41 [default = -4.5];
    if (has_max_deceleration()) {
      total_size += 2 + 8;
    }

    // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
    if (has_st_boundary_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->st_boundary_config_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DpStSpeedConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DpStSpeedConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DpStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DpStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DpStSpeedConfig)
    MergeFrom(*source);
  }
}

void DpStSpeedConfig::MergeFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpStSpeedConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_path_length()) {
      set_total_path_length(from.total_path_length());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_matrix_dimension_s()) {
      set_matrix_dimension_s(from.matrix_dimension_s());
    }
    if (from.has_matrix_dimension_t()) {
      set_matrix_dimension_t(from.matrix_dimension_t());
    }
    if (from.has_speed_weight()) {
      set_speed_weight(from.speed_weight());
    }
    if (from.has_accel_weight()) {
      set_accel_weight(from.accel_weight());
    }
    if (from.has_jerk_weight()) {
      set_jerk_weight(from.jerk_weight());
    }
    if (from.has_obstacle_weight()) {
      set_obstacle_weight(from.obstacle_weight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reference_weight()) {
      set_reference_weight(from.reference_weight());
    }
    if (from.has_go_down_buffer()) {
      set_go_down_buffer(from.go_down_buffer());
    }
    if (from.has_go_up_buffer()) {
      set_go_up_buffer(from.go_up_buffer());
    }
    if (from.has_default_obstacle_cost()) {
      set_default_obstacle_cost(from.default_obstacle_cost());
    }
    if (from.has_default_speed_cost()) {
      set_default_speed_cost(from.default_speed_cost());
    }
    if (from.has_exceed_speed_penalty()) {
      set_exceed_speed_penalty(from.exceed_speed_penalty());
    }
    if (from.has_low_speed_penalty()) {
      set_low_speed_penalty(from.low_speed_penalty());
    }
    if (from.has_keep_clear_low_speed_penalty()) {
      set_keep_clear_low_speed_penalty(from.keep_clear_low_speed_penalty());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_accel_penalty()) {
      set_accel_penalty(from.accel_penalty());
    }
    if (from.has_decel_penalty()) {
      set_decel_penalty(from.decel_penalty());
    }
    if (from.has_positive_jerk_coeff()) {
      set_positive_jerk_coeff(from.positive_jerk_coeff());
    }
    if (from.has_negative_jerk_coeff()) {
      set_negative_jerk_coeff(from.negative_jerk_coeff());
    }
    if (from.has_max_acceleration()) {
      set_max_acceleration(from.max_acceleration());
    }
    if (from.has_max_deceleration()) {
      set_max_deceleration(from.max_deceleration());
    }
    if (from.has_st_boundary_config()) {
      mutable_st_boundary_config()->::apollo::planning::StBoundaryConfig::MergeFrom(from.st_boundary_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DpStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpStSpeedConfig::CopyFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpStSpeedConfig::IsInitialized() const {

  return true;
}

void DpStSpeedConfig::Swap(DpStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpStSpeedConfig::InternalSwap(DpStSpeedConfig* other) {
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_time_, other->total_time_);
  std::swap(matrix_dimension_s_, other->matrix_dimension_s_);
  std::swap(matrix_dimension_t_, other->matrix_dimension_t_);
  std::swap(speed_weight_, other->speed_weight_);
  std::swap(accel_weight_, other->accel_weight_);
  std::swap(jerk_weight_, other->jerk_weight_);
  std::swap(obstacle_weight_, other->obstacle_weight_);
  std::swap(reference_weight_, other->reference_weight_);
  std::swap(go_down_buffer_, other->go_down_buffer_);
  std::swap(go_up_buffer_, other->go_up_buffer_);
  std::swap(default_obstacle_cost_, other->default_obstacle_cost_);
  std::swap(default_speed_cost_, other->default_speed_cost_);
  std::swap(exceed_speed_penalty_, other->exceed_speed_penalty_);
  std::swap(low_speed_penalty_, other->low_speed_penalty_);
  std::swap(keep_clear_low_speed_penalty_, other->keep_clear_low_speed_penalty_);
  std::swap(accel_penalty_, other->accel_penalty_);
  std::swap(decel_penalty_, other->decel_penalty_);
  std::swap(positive_jerk_coeff_, other->positive_jerk_coeff_);
  std::swap(negative_jerk_coeff_, other->negative_jerk_coeff_);
  std::swap(max_acceleration_, other->max_acceleration_);
  std::swap(max_deceleration_, other->max_deceleration_);
  std::swap(st_boundary_config_, other->st_boundary_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpStSpeedConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DpStSpeedConfig_descriptor_;
  metadata.reflection = DpStSpeedConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpStSpeedConfig

// optional double total_path_length = 1 [default = 0.1];
bool DpStSpeedConfig::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DpStSpeedConfig::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000001u;
}
void DpStSpeedConfig::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void DpStSpeedConfig::clear_total_path_length() {
  total_path_length_ = 0.1;
  clear_has_total_path_length();
}
 double DpStSpeedConfig::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.total_path_length)
  return total_path_length_;
}
 void DpStSpeedConfig::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.total_path_length)
}

// optional double total_time = 2 [default = 3];
bool DpStSpeedConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DpStSpeedConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
void DpStSpeedConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void DpStSpeedConfig::clear_total_time() {
  total_time_ = 3;
  clear_has_total_time();
}
 double DpStSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.total_time)
  return total_time_;
}
 void DpStSpeedConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.total_time)
}

// optional int32 matrix_dimension_s = 3 [default = 100];
bool DpStSpeedConfig::has_matrix_dimension_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DpStSpeedConfig::set_has_matrix_dimension_s() {
  _has_bits_[0] |= 0x00000004u;
}
void DpStSpeedConfig::clear_has_matrix_dimension_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void DpStSpeedConfig::clear_matrix_dimension_s() {
  matrix_dimension_s_ = 100;
  clear_has_matrix_dimension_s();
}
 ::google::protobuf::int32 DpStSpeedConfig::matrix_dimension_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.matrix_dimension_s)
  return matrix_dimension_s_;
}
 void DpStSpeedConfig::set_matrix_dimension_s(::google::protobuf::int32 value) {
  set_has_matrix_dimension_s();
  matrix_dimension_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.matrix_dimension_s)
}

// optional int32 matrix_dimension_t = 4 [default = 10];
bool DpStSpeedConfig::has_matrix_dimension_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DpStSpeedConfig::set_has_matrix_dimension_t() {
  _has_bits_[0] |= 0x00000008u;
}
void DpStSpeedConfig::clear_has_matrix_dimension_t() {
  _has_bits_[0] &= ~0x00000008u;
}
void DpStSpeedConfig::clear_matrix_dimension_t() {
  matrix_dimension_t_ = 10;
  clear_has_matrix_dimension_t();
}
 ::google::protobuf::int32 DpStSpeedConfig::matrix_dimension_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.matrix_dimension_t)
  return matrix_dimension_t_;
}
 void DpStSpeedConfig::set_matrix_dimension_t(::google::protobuf::int32 value) {
  set_has_matrix_dimension_t();
  matrix_dimension_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.matrix_dimension_t)
}

// optional double speed_weight = 5 [default = 0];
bool DpStSpeedConfig::has_speed_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DpStSpeedConfig::set_has_speed_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void DpStSpeedConfig::clear_has_speed_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void DpStSpeedConfig::clear_speed_weight() {
  speed_weight_ = 0;
  clear_has_speed_weight();
}
 double DpStSpeedConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.speed_weight)
  return speed_weight_;
}
 void DpStSpeedConfig::set_speed_weight(double value) {
  set_has_speed_weight();
  speed_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.speed_weight)
}

// optional double accel_weight = 6 [default = 10];
bool DpStSpeedConfig::has_accel_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DpStSpeedConfig::set_has_accel_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void DpStSpeedConfig::clear_has_accel_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void DpStSpeedConfig::clear_accel_weight() {
  accel_weight_ = 10;
  clear_has_accel_weight();
}
 double DpStSpeedConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.accel_weight)
  return accel_weight_;
}
 void DpStSpeedConfig::set_accel_weight(double value) {
  set_has_accel_weight();
  accel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.accel_weight)
}

// optional double jerk_weight = 7 [default = 10];
bool DpStSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DpStSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void DpStSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void DpStSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  clear_has_jerk_weight();
}
 double DpStSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.jerk_weight)
  return jerk_weight_;
}
 void DpStSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.jerk_weight)
}

// optional double obstacle_weight = 8 [default = 1];
bool DpStSpeedConfig::has_obstacle_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DpStSpeedConfig::set_has_obstacle_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void DpStSpeedConfig::clear_has_obstacle_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void DpStSpeedConfig::clear_obstacle_weight() {
  obstacle_weight_ = 1;
  clear_has_obstacle_weight();
}
 double DpStSpeedConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.obstacle_weight)
  return obstacle_weight_;
}
 void DpStSpeedConfig::set_obstacle_weight(double value) {
  set_has_obstacle_weight();
  obstacle_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.obstacle_weight)
}

// optional double reference_weight = 9 [default = 0];
bool DpStSpeedConfig::has_reference_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DpStSpeedConfig::set_has_reference_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void DpStSpeedConfig::clear_has_reference_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void DpStSpeedConfig::clear_reference_weight() {
  reference_weight_ = 0;
  clear_has_reference_weight();
}
 double DpStSpeedConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.reference_weight)
  return reference_weight_;
}
 void DpStSpeedConfig::set_reference_weight(double value) {
  set_has_reference_weight();
  reference_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.reference_weight)
}

// optional double go_down_buffer = 10 [default = 5];
bool DpStSpeedConfig::has_go_down_buffer() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DpStSpeedConfig::set_has_go_down_buffer() {
  _has_bits_[0] |= 0x00000200u;
}
void DpStSpeedConfig::clear_has_go_down_buffer() {
  _has_bits_[0] &= ~0x00000200u;
}
void DpStSpeedConfig::clear_go_down_buffer() {
  go_down_buffer_ = 5;
  clear_has_go_down_buffer();
}
 double DpStSpeedConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.go_down_buffer)
  return go_down_buffer_;
}
 void DpStSpeedConfig::set_go_down_buffer(double value) {
  set_has_go_down_buffer();
  go_down_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.go_down_buffer)
}

// optional double go_up_buffer = 11 [default = 5];
bool DpStSpeedConfig::has_go_up_buffer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DpStSpeedConfig::set_has_go_up_buffer() {
  _has_bits_[0] |= 0x00000400u;
}
void DpStSpeedConfig::clear_has_go_up_buffer() {
  _has_bits_[0] &= ~0x00000400u;
}
void DpStSpeedConfig::clear_go_up_buffer() {
  go_up_buffer_ = 5;
  clear_has_go_up_buffer();
}
 double DpStSpeedConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.go_up_buffer)
  return go_up_buffer_;
}
 void DpStSpeedConfig::set_go_up_buffer(double value) {
  set_has_go_up_buffer();
  go_up_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.go_up_buffer)
}

// optional double default_obstacle_cost = 12 [default = 10000000000];
bool DpStSpeedConfig::has_default_obstacle_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DpStSpeedConfig::set_has_default_obstacle_cost() {
  _has_bits_[0] |= 0x00000800u;
}
void DpStSpeedConfig::clear_has_default_obstacle_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
void DpStSpeedConfig::clear_default_obstacle_cost() {
  default_obstacle_cost_ = 10000000000;
  clear_has_default_obstacle_cost();
}
 double DpStSpeedConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.default_obstacle_cost)
  return default_obstacle_cost_;
}
 void DpStSpeedConfig::set_default_obstacle_cost(double value) {
  set_has_default_obstacle_cost();
  default_obstacle_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.default_obstacle_cost)
}

// optional double default_speed_cost = 13 [default = 1];
bool DpStSpeedConfig::has_default_speed_cost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DpStSpeedConfig::set_has_default_speed_cost() {
  _has_bits_[0] |= 0x00001000u;
}
void DpStSpeedConfig::clear_has_default_speed_cost() {
  _has_bits_[0] &= ~0x00001000u;
}
void DpStSpeedConfig::clear_default_speed_cost() {
  default_speed_cost_ = 1;
  clear_has_default_speed_cost();
}
 double DpStSpeedConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.default_speed_cost)
  return default_speed_cost_;
}
 void DpStSpeedConfig::set_default_speed_cost(double value) {
  set_has_default_speed_cost();
  default_speed_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.default_speed_cost)
}

// optional double exceed_speed_penalty = 14 [default = 10];
bool DpStSpeedConfig::has_exceed_speed_penalty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DpStSpeedConfig::set_has_exceed_speed_penalty() {
  _has_bits_[0] |= 0x00002000u;
}
void DpStSpeedConfig::clear_has_exceed_speed_penalty() {
  _has_bits_[0] &= ~0x00002000u;
}
void DpStSpeedConfig::clear_exceed_speed_penalty() {
  exceed_speed_penalty_ = 10;
  clear_has_exceed_speed_penalty();
}
 double DpStSpeedConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.exceed_speed_penalty)
  return exceed_speed_penalty_;
}
 void DpStSpeedConfig::set_exceed_speed_penalty(double value) {
  set_has_exceed_speed_penalty();
  exceed_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.exceed_speed_penalty)
}

// optional double low_speed_penalty = 15 [default = 2.5];
bool DpStSpeedConfig::has_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DpStSpeedConfig::set_has_low_speed_penalty() {
  _has_bits_[0] |= 0x00004000u;
}
void DpStSpeedConfig::clear_has_low_speed_penalty() {
  _has_bits_[0] &= ~0x00004000u;
}
void DpStSpeedConfig::clear_low_speed_penalty() {
  low_speed_penalty_ = 2.5;
  clear_has_low_speed_penalty();
}
 double DpStSpeedConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.low_speed_penalty)
  return low_speed_penalty_;
}
 void DpStSpeedConfig::set_low_speed_penalty(double value) {
  set_has_low_speed_penalty();
  low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.low_speed_penalty)
}

// optional double keep_clear_low_speed_penalty = 16 [default = 10];
bool DpStSpeedConfig::has_keep_clear_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DpStSpeedConfig::set_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] |= 0x00008000u;
}
void DpStSpeedConfig::clear_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] &= ~0x00008000u;
}
void DpStSpeedConfig::clear_keep_clear_low_speed_penalty() {
  keep_clear_low_speed_penalty_ = 10;
  clear_has_keep_clear_low_speed_penalty();
}
 double DpStSpeedConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
  return keep_clear_low_speed_penalty_;
}
 void DpStSpeedConfig::set_keep_clear_low_speed_penalty(double value) {
  set_has_keep_clear_low_speed_penalty();
  keep_clear_low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
}

// optional double accel_penalty = 20 [default = 2];
bool DpStSpeedConfig::has_accel_penalty() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DpStSpeedConfig::set_has_accel_penalty() {
  _has_bits_[0] |= 0x00010000u;
}
void DpStSpeedConfig::clear_has_accel_penalty() {
  _has_bits_[0] &= ~0x00010000u;
}
void DpStSpeedConfig::clear_accel_penalty() {
  accel_penalty_ = 2;
  clear_has_accel_penalty();
}
 double DpStSpeedConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.accel_penalty)
  return accel_penalty_;
}
 void DpStSpeedConfig::set_accel_penalty(double value) {
  set_has_accel_penalty();
  accel_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.accel_penalty)
}

// optional double decel_penalty = 21 [default = 2];
bool DpStSpeedConfig::has_decel_penalty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DpStSpeedConfig::set_has_decel_penalty() {
  _has_bits_[0] |= 0x00020000u;
}
void DpStSpeedConfig::clear_has_decel_penalty() {
  _has_bits_[0] &= ~0x00020000u;
}
void DpStSpeedConfig::clear_decel_penalty() {
  decel_penalty_ = 2;
  clear_has_decel_penalty();
}
 double DpStSpeedConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.decel_penalty)
  return decel_penalty_;
}
 void DpStSpeedConfig::set_decel_penalty(double value) {
  set_has_decel_penalty();
  decel_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.decel_penalty)
}

// optional double positive_jerk_coeff = 30 [default = 1];
bool DpStSpeedConfig::has_positive_jerk_coeff() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DpStSpeedConfig::set_has_positive_jerk_coeff() {
  _has_bits_[0] |= 0x00040000u;
}
void DpStSpeedConfig::clear_has_positive_jerk_coeff() {
  _has_bits_[0] &= ~0x00040000u;
}
void DpStSpeedConfig::clear_positive_jerk_coeff() {
  positive_jerk_coeff_ = 1;
  clear_has_positive_jerk_coeff();
}
 double DpStSpeedConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.positive_jerk_coeff)
  return positive_jerk_coeff_;
}
 void DpStSpeedConfig::set_positive_jerk_coeff(double value) {
  set_has_positive_jerk_coeff();
  positive_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.positive_jerk_coeff)
}

// optional double negative_jerk_coeff = 31 [default = 300];
bool DpStSpeedConfig::has_negative_jerk_coeff() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DpStSpeedConfig::set_has_negative_jerk_coeff() {
  _has_bits_[0] |= 0x00080000u;
}
void DpStSpeedConfig::clear_has_negative_jerk_coeff() {
  _has_bits_[0] &= ~0x00080000u;
}
void DpStSpeedConfig::clear_negative_jerk_coeff() {
  negative_jerk_coeff_ = 300;
  clear_has_negative_jerk_coeff();
}
 double DpStSpeedConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.negative_jerk_coeff)
  return negative_jerk_coeff_;
}
 void DpStSpeedConfig::set_negative_jerk_coeff(double value) {
  set_has_negative_jerk_coeff();
  negative_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.negative_jerk_coeff)
}

// optional double max_acceleration = 40 [default = 4.5];
bool DpStSpeedConfig::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DpStSpeedConfig::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00100000u;
}
void DpStSpeedConfig::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00100000u;
}
void DpStSpeedConfig::clear_max_acceleration() {
  max_acceleration_ = 4.5;
  clear_has_max_acceleration();
}
 double DpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.max_acceleration)
  return max_acceleration_;
}
 void DpStSpeedConfig::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.max_acceleration)
}

// optional double max_deceleration = 41 [default = -4.5];
bool DpStSpeedConfig::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DpStSpeedConfig::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00200000u;
}
void DpStSpeedConfig::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00200000u;
}
void DpStSpeedConfig::clear_max_deceleration() {
  max_deceleration_ = -4.5;
  clear_has_max_deceleration();
}
 double DpStSpeedConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.max_deceleration)
  return max_deceleration_;
}
 void DpStSpeedConfig::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.max_deceleration)
}

// optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
bool DpStSpeedConfig::has_st_boundary_config() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DpStSpeedConfig::set_has_st_boundary_config() {
  _has_bits_[0] |= 0x00400000u;
}
void DpStSpeedConfig::clear_has_st_boundary_config() {
  _has_bits_[0] &= ~0x00400000u;
}
void DpStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
  clear_has_st_boundary_config();
}
const ::apollo::planning::StBoundaryConfig& DpStSpeedConfig::st_boundary_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.st_boundary_config)
  return st_boundary_config_ != NULL ? *st_boundary_config_ : *default_instance_->st_boundary_config_;
}
::apollo::planning::StBoundaryConfig* DpStSpeedConfig::mutable_st_boundary_config() {
  set_has_st_boundary_config();
  if (st_boundary_config_ == NULL) {
    st_boundary_config_ = new ::apollo::planning::StBoundaryConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DpStSpeedConfig.st_boundary_config)
  return st_boundary_config_;
}
::apollo::planning::StBoundaryConfig* DpStSpeedConfig::release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DpStSpeedConfig.st_boundary_config)
  clear_has_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* temp = st_boundary_config_;
  st_boundary_config_ = NULL;
  return temp;
}
void DpStSpeedConfig::set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config) {
  delete st_boundary_config_;
  st_boundary_config_ = st_boundary_config;
  if (st_boundary_config) {
    set_has_st_boundary_config();
  } else {
    clear_has_st_boundary_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DpStSpeedConfig.st_boundary_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
