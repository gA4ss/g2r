// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/heading.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/gnss/heading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss {

namespace {

const ::google::protobuf::Descriptor* Heading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heading_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fgnss_2fheading_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fgnss_2fheading_2eproto() {
  protobuf_AddDesc_drivers_2fgnss_2fheading_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/gnss/heading.proto");
  GOOGLE_CHECK(file != NULL);
  Heading_descriptor_ = file->message_type(0);
  static const int Heading_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, solution_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, position_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, baseline_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, heading_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, pitch_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, satellite_tracked_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, satellite_soulution_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, satellite_number_obs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, satellite_number_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, solution_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, extended_solution_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, galileo_beidou_sig_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, gps_glonass_sig_mask_),
  };
  Heading_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Heading_descriptor_,
      Heading::default_instance_,
      Heading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, _has_bits_[0]),
      -1,
      -1,
      sizeof(Heading),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fgnss_2fheading_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Heading_descriptor_, &Heading::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fgnss_2fheading_2eproto() {
  delete Heading::default_instance_;
  delete Heading_reflection_;
}

void protobuf_AddDesc_drivers_2fgnss_2fheading_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fgnss_2fheading_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032drivers/gnss/heading.proto\022\023apollo.dri"
    "vers.gnss\032\023common/header.proto\"\207\004\n\007Headi"
    "ng\022%\n\006header\030\001 \001(\0132\025.apollo.common.Heade"
    "r\022\030\n\020measurement_time\030\002 \001(\001\022\027\n\017solution_"
    "status\030\003 \001(\r\022\025\n\rposition_type\030\004 \001(\r\022\027\n\017b"
    "aseline_length\030\005 \001(\002\022\017\n\007heading\030\006 \001(\002\022\r\n"
    "\005pitch\030\007 \001(\002\022\020\n\010reserved\030\010 \001(\002\022\027\n\017headin"
    "g_std_dev\030\t \001(\002\022\025\n\rpitch_std_dev\030\n \001(\002\022\022"
    "\n\nstation_id\030\013 \001(\014\022 \n\030satellite_tracked_"
    "number\030\014 \001(\r\022\"\n\032satellite_soulution_numb"
    "er\030\r \001(\r\022\034\n\024satellite_number_obs\030\016 \001(\r\022\036"
    "\n\026satellite_number_multi\030\017 \001(\r\022\027\n\017soluti"
    "on_source\030\020 \001(\r\022 \n\030extended_solution_sta"
    "tus\030\021 \001(\r\022\037\n\027galileo_beidou_sig_mask\030\022 \001"
    "(\r\022\034\n\024gps_glonass_sig_mask\030\023 \001(\r", 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/gnss/heading.proto", &protobuf_RegisterTypes);
  Heading::default_instance_ = new Heading();
  Heading::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fgnss_2fheading_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fgnss_2fheading_2eproto {
  StaticDescriptorInitializer_drivers_2fgnss_2fheading_2eproto() {
    protobuf_AddDesc_drivers_2fgnss_2fheading_2eproto();
  }
} static_descriptor_initializer_drivers_2fgnss_2fheading_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heading::kHeaderFieldNumber;
const int Heading::kMeasurementTimeFieldNumber;
const int Heading::kSolutionStatusFieldNumber;
const int Heading::kPositionTypeFieldNumber;
const int Heading::kBaselineLengthFieldNumber;
const int Heading::kHeadingFieldNumber;
const int Heading::kPitchFieldNumber;
const int Heading::kReservedFieldNumber;
const int Heading::kHeadingStdDevFieldNumber;
const int Heading::kPitchStdDevFieldNumber;
const int Heading::kStationIdFieldNumber;
const int Heading::kSatelliteTrackedNumberFieldNumber;
const int Heading::kSatelliteSoulutionNumberFieldNumber;
const int Heading::kSatelliteNumberObsFieldNumber;
const int Heading::kSatelliteNumberMultiFieldNumber;
const int Heading::kSolutionSourceFieldNumber;
const int Heading::kExtendedSolutionStatusFieldNumber;
const int Heading::kGalileoBeidouSigMaskFieldNumber;
const int Heading::kGpsGlonassSigMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heading::Heading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.Heading)
}

void Heading::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

Heading::Heading(const Heading& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Heading)
}

void Heading::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  measurement_time_ = 0;
  solution_status_ = 0u;
  position_type_ = 0u;
  baseline_length_ = 0;
  heading_ = 0;
  pitch_ = 0;
  reserved_ = 0;
  heading_std_dev_ = 0;
  pitch_std_dev_ = 0;
  station_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  satellite_tracked_number_ = 0u;
  satellite_soulution_number_ = 0u;
  satellite_number_obs_ = 0u;
  satellite_number_multi_ = 0u;
  solution_source_ = 0u;
  extended_solution_status_ = 0u;
  galileo_beidou_sig_mask_ = 0u;
  gps_glonass_sig_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heading::~Heading() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Heading)
  SharedDtor();
}

void Heading::SharedDtor() {
  station_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void Heading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heading_descriptor_;
}

const Heading& Heading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fheading_2eproto();
  return *default_instance_;
}

Heading* Heading::default_instance_ = NULL;

Heading* Heading::New(::google::protobuf::Arena* arena) const {
  Heading* n = new Heading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Heading)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Heading, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Heading*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(measurement_time_, reserved_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(heading_std_dev_, pitch_std_dev_);
    ZR_(satellite_tracked_number_, solution_source_);
    if (has_station_id()) {
      station_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(extended_solution_status_, gps_glonass_sig_mask_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Heading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.Heading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (tag == 17) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_solution_status;
        break;
      }

      // optional uint32 solution_status = 3;
      case 3: {
        if (tag == 24) {
         parse_solution_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
          set_has_solution_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_position_type;
        break;
      }

      // optional uint32 position_type = 4;
      case 4: {
        if (tag == 32) {
         parse_position_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
          set_has_position_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_baseline_length;
        break;
      }

      // optional float baseline_length = 5;
      case 5: {
        if (tag == 45) {
         parse_baseline_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baseline_length_)));
          set_has_baseline_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_heading;
        break;
      }

      // optional float heading = 6;
      case 6: {
        if (tag == 53) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_pitch;
        break;
      }

      // optional float pitch = 7;
      case 7: {
        if (tag == 61) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_reserved;
        break;
      }

      // optional float reserved = 8;
      case 8: {
        if (tag == 69) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_heading_std_dev;
        break;
      }

      // optional float heading_std_dev = 9;
      case 9: {
        if (tag == 77) {
         parse_heading_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_std_dev_)));
          set_has_heading_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_pitch_std_dev;
        break;
      }

      // optional float pitch_std_dev = 10;
      case 10: {
        if (tag == 85) {
         parse_pitch_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_std_dev_)));
          set_has_pitch_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_station_id;
        break;
      }

      // optional bytes station_id = 11;
      case 11: {
        if (tag == 90) {
         parse_station_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_station_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_satellite_tracked_number;
        break;
      }

      // optional uint32 satellite_tracked_number = 12;
      case 12: {
        if (tag == 96) {
         parse_satellite_tracked_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_tracked_number_)));
          set_has_satellite_tracked_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_satellite_soulution_number;
        break;
      }

      // optional uint32 satellite_soulution_number = 13;
      case 13: {
        if (tag == 104) {
         parse_satellite_soulution_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_soulution_number_)));
          set_has_satellite_soulution_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_satellite_number_obs;
        break;
      }

      // optional uint32 satellite_number_obs = 14;
      case 14: {
        if (tag == 112) {
         parse_satellite_number_obs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_number_obs_)));
          set_has_satellite_number_obs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_satellite_number_multi;
        break;
      }

      // optional uint32 satellite_number_multi = 15;
      case 15: {
        if (tag == 120) {
         parse_satellite_number_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_number_multi_)));
          set_has_satellite_number_multi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_solution_source;
        break;
      }

      // optional uint32 solution_source = 16;
      case 16: {
        if (tag == 128) {
         parse_solution_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_source_)));
          set_has_solution_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_extended_solution_status;
        break;
      }

      // optional uint32 extended_solution_status = 17;
      case 17: {
        if (tag == 136) {
         parse_extended_solution_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_solution_status_)));
          set_has_extended_solution_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_galileo_beidou_sig_mask;
        break;
      }

      // optional uint32 galileo_beidou_sig_mask = 18;
      case 18: {
        if (tag == 144) {
         parse_galileo_beidou_sig_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &galileo_beidou_sig_mask_)));
          set_has_galileo_beidou_sig_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_gps_glonass_sig_mask;
        break;
      }

      // optional uint32 gps_glonass_sig_mask = 19;
      case 19: {
        if (tag == 152) {
         parse_gps_glonass_sig_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_glonass_sig_mask_)));
          set_has_gps_glonass_sig_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.Heading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.Heading)
  return false;
#undef DO_
}

void Heading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.Heading)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional uint32 solution_status = 3;
  if (has_solution_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->solution_status(), output);
  }

  // optional uint32 position_type = 4;
  if (has_position_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position_type(), output);
  }

  // optional float baseline_length = 5;
  if (has_baseline_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->baseline_length(), output);
  }

  // optional float heading = 6;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->heading(), output);
  }

  // optional float pitch = 7;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pitch(), output);
  }

  // optional float reserved = 8;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->reserved(), output);
  }

  // optional float heading_std_dev = 9;
  if (has_heading_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->heading_std_dev(), output);
  }

  // optional float pitch_std_dev = 10;
  if (has_pitch_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pitch_std_dev(), output);
  }

  // optional bytes station_id = 11;
  if (has_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->station_id(), output);
  }

  // optional uint32 satellite_tracked_number = 12;
  if (has_satellite_tracked_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->satellite_tracked_number(), output);
  }

  // optional uint32 satellite_soulution_number = 13;
  if (has_satellite_soulution_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->satellite_soulution_number(), output);
  }

  // optional uint32 satellite_number_obs = 14;
  if (has_satellite_number_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->satellite_number_obs(), output);
  }

  // optional uint32 satellite_number_multi = 15;
  if (has_satellite_number_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->satellite_number_multi(), output);
  }

  // optional uint32 solution_source = 16;
  if (has_solution_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->solution_source(), output);
  }

  // optional uint32 extended_solution_status = 17;
  if (has_extended_solution_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->extended_solution_status(), output);
  }

  // optional uint32 galileo_beidou_sig_mask = 18;
  if (has_galileo_beidou_sig_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->galileo_beidou_sig_mask(), output);
  }

  // optional uint32 gps_glonass_sig_mask = 19;
  if (has_gps_glonass_sig_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->gps_glonass_sig_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.Heading)
}

::google::protobuf::uint8* Heading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Heading)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional uint32 solution_status = 3;
  if (has_solution_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->solution_status(), target);
  }

  // optional uint32 position_type = 4;
  if (has_position_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position_type(), target);
  }

  // optional float baseline_length = 5;
  if (has_baseline_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->baseline_length(), target);
  }

  // optional float heading = 6;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->heading(), target);
  }

  // optional float pitch = 7;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pitch(), target);
  }

  // optional float reserved = 8;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->reserved(), target);
  }

  // optional float heading_std_dev = 9;
  if (has_heading_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->heading_std_dev(), target);
  }

  // optional float pitch_std_dev = 10;
  if (has_pitch_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pitch_std_dev(), target);
  }

  // optional bytes station_id = 11;
  if (has_station_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->station_id(), target);
  }

  // optional uint32 satellite_tracked_number = 12;
  if (has_satellite_tracked_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->satellite_tracked_number(), target);
  }

  // optional uint32 satellite_soulution_number = 13;
  if (has_satellite_soulution_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->satellite_soulution_number(), target);
  }

  // optional uint32 satellite_number_obs = 14;
  if (has_satellite_number_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->satellite_number_obs(), target);
  }

  // optional uint32 satellite_number_multi = 15;
  if (has_satellite_number_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->satellite_number_multi(), target);
  }

  // optional uint32 solution_source = 16;
  if (has_solution_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->solution_source(), target);
  }

  // optional uint32 extended_solution_status = 17;
  if (has_extended_solution_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->extended_solution_status(), target);
  }

  // optional uint32 galileo_beidou_sig_mask = 18;
  if (has_galileo_beidou_sig_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->galileo_beidou_sig_mask(), target);
  }

  // optional uint32 gps_glonass_sig_mask = 19;
  if (has_gps_glonass_sig_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->gps_glonass_sig_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Heading)
  return target;
}

int Heading::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Heading)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 solution_status = 3;
    if (has_solution_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_status());
    }

    // optional uint32 position_type = 4;
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_type());
    }

    // optional float baseline_length = 5;
    if (has_baseline_length()) {
      total_size += 1 + 4;
    }

    // optional float heading = 6;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 7;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float reserved = 8;
    if (has_reserved()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float heading_std_dev = 9;
    if (has_heading_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float pitch_std_dev = 10;
    if (has_pitch_std_dev()) {
      total_size += 1 + 4;
    }

    // optional bytes station_id = 11;
    if (has_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->station_id());
    }

    // optional uint32 satellite_tracked_number = 12;
    if (has_satellite_tracked_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_tracked_number());
    }

    // optional uint32 satellite_soulution_number = 13;
    if (has_satellite_soulution_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_soulution_number());
    }

    // optional uint32 satellite_number_obs = 14;
    if (has_satellite_number_obs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_number_obs());
    }

    // optional uint32 satellite_number_multi = 15;
    if (has_satellite_number_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_number_multi());
    }

    // optional uint32 solution_source = 16;
    if (has_solution_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_source());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 extended_solution_status = 17;
    if (has_extended_solution_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_solution_status());
    }

    // optional uint32 galileo_beidou_sig_mask = 18;
    if (has_galileo_beidou_sig_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->galileo_beidou_sig_mask());
    }

    // optional uint32 gps_glonass_sig_mask = 19;
    if (has_gps_glonass_sig_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_glonass_sig_mask());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.Heading)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Heading* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Heading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.Heading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.Heading)
    MergeFrom(*source);
  }
}

void Heading::MergeFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Heading)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
    if (from.has_solution_status()) {
      set_solution_status(from.solution_status());
    }
    if (from.has_position_type()) {
      set_position_type(from.position_type());
    }
    if (from.has_baseline_length()) {
      set_baseline_length(from.baseline_length());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heading_std_dev()) {
      set_heading_std_dev(from.heading_std_dev());
    }
    if (from.has_pitch_std_dev()) {
      set_pitch_std_dev(from.pitch_std_dev());
    }
    if (from.has_station_id()) {
      set_has_station_id();
      station_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.station_id_);
    }
    if (from.has_satellite_tracked_number()) {
      set_satellite_tracked_number(from.satellite_tracked_number());
    }
    if (from.has_satellite_soulution_number()) {
      set_satellite_soulution_number(from.satellite_soulution_number());
    }
    if (from.has_satellite_number_obs()) {
      set_satellite_number_obs(from.satellite_number_obs());
    }
    if (from.has_satellite_number_multi()) {
      set_satellite_number_multi(from.satellite_number_multi());
    }
    if (from.has_solution_source()) {
      set_solution_source(from.solution_source());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_extended_solution_status()) {
      set_extended_solution_status(from.extended_solution_status());
    }
    if (from.has_galileo_beidou_sig_mask()) {
      set_galileo_beidou_sig_mask(from.galileo_beidou_sig_mask());
    }
    if (from.has_gps_glonass_sig_mask()) {
      set_gps_glonass_sig_mask(from.gps_glonass_sig_mask());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Heading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heading::IsInitialized() const {

  return true;
}

void Heading::Swap(Heading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heading::InternalSwap(Heading* other) {
  std::swap(header_, other->header_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(solution_status_, other->solution_status_);
  std::swap(position_type_, other->position_type_);
  std::swap(baseline_length_, other->baseline_length_);
  std::swap(heading_, other->heading_);
  std::swap(pitch_, other->pitch_);
  std::swap(reserved_, other->reserved_);
  std::swap(heading_std_dev_, other->heading_std_dev_);
  std::swap(pitch_std_dev_, other->pitch_std_dev_);
  station_id_.Swap(&other->station_id_);
  std::swap(satellite_tracked_number_, other->satellite_tracked_number_);
  std::swap(satellite_soulution_number_, other->satellite_soulution_number_);
  std::swap(satellite_number_obs_, other->satellite_number_obs_);
  std::swap(satellite_number_multi_, other->satellite_number_multi_);
  std::swap(solution_source_, other->solution_source_);
  std::swap(extended_solution_status_, other->extended_solution_status_);
  std::swap(galileo_beidou_sig_mask_, other->galileo_beidou_sig_mask_);
  std::swap(gps_glonass_sig_mask_, other->gps_glonass_sig_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heading_descriptor_;
  metadata.reflection = Heading_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heading

// optional .apollo.common.Header header = 1;
bool Heading::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Heading::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Heading::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Heading::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& Heading::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* Heading::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Heading.header)
  return header_;
}
::apollo::common::Header* Heading::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Heading.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Heading::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Heading.header)
}

// optional double measurement_time = 2;
bool Heading::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Heading::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Heading::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Heading::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double Heading::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.measurement_time)
  return measurement_time_;
}
 void Heading::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.measurement_time)
}

// optional uint32 solution_status = 3;
bool Heading::has_solution_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Heading::set_has_solution_status() {
  _has_bits_[0] |= 0x00000004u;
}
void Heading::clear_has_solution_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void Heading::clear_solution_status() {
  solution_status_ = 0u;
  clear_has_solution_status();
}
 ::google::protobuf::uint32 Heading::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.solution_status)
  return solution_status_;
}
 void Heading::set_solution_status(::google::protobuf::uint32 value) {
  set_has_solution_status();
  solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.solution_status)
}

// optional uint32 position_type = 4;
bool Heading::has_position_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Heading::set_has_position_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Heading::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Heading::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
 ::google::protobuf::uint32 Heading::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.position_type)
  return position_type_;
}
 void Heading::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.position_type)
}

// optional float baseline_length = 5;
bool Heading::has_baseline_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Heading::set_has_baseline_length() {
  _has_bits_[0] |= 0x00000010u;
}
void Heading::clear_has_baseline_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void Heading::clear_baseline_length() {
  baseline_length_ = 0;
  clear_has_baseline_length();
}
 float Heading::baseline_length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.baseline_length)
  return baseline_length_;
}
 void Heading::set_baseline_length(float value) {
  set_has_baseline_length();
  baseline_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.baseline_length)
}

// optional float heading = 6;
bool Heading::has_heading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Heading::set_has_heading() {
  _has_bits_[0] |= 0x00000020u;
}
void Heading::clear_has_heading() {
  _has_bits_[0] &= ~0x00000020u;
}
void Heading::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 float Heading::heading() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.heading)
  return heading_;
}
 void Heading::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.heading)
}

// optional float pitch = 7;
bool Heading::has_pitch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Heading::set_has_pitch() {
  _has_bits_[0] |= 0x00000040u;
}
void Heading::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000040u;
}
void Heading::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
 float Heading::pitch() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.pitch)
  return pitch_;
}
 void Heading::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.pitch)
}

// optional float reserved = 8;
bool Heading::has_reserved() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Heading::set_has_reserved() {
  _has_bits_[0] |= 0x00000080u;
}
void Heading::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000080u;
}
void Heading::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
 float Heading::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.reserved)
  return reserved_;
}
 void Heading::set_reserved(float value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.reserved)
}

// optional float heading_std_dev = 9;
bool Heading::has_heading_std_dev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Heading::set_has_heading_std_dev() {
  _has_bits_[0] |= 0x00000100u;
}
void Heading::clear_has_heading_std_dev() {
  _has_bits_[0] &= ~0x00000100u;
}
void Heading::clear_heading_std_dev() {
  heading_std_dev_ = 0;
  clear_has_heading_std_dev();
}
 float Heading::heading_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.heading_std_dev)
  return heading_std_dev_;
}
 void Heading::set_heading_std_dev(float value) {
  set_has_heading_std_dev();
  heading_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.heading_std_dev)
}

// optional float pitch_std_dev = 10;
bool Heading::has_pitch_std_dev() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Heading::set_has_pitch_std_dev() {
  _has_bits_[0] |= 0x00000200u;
}
void Heading::clear_has_pitch_std_dev() {
  _has_bits_[0] &= ~0x00000200u;
}
void Heading::clear_pitch_std_dev() {
  pitch_std_dev_ = 0;
  clear_has_pitch_std_dev();
}
 float Heading::pitch_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.pitch_std_dev)
  return pitch_std_dev_;
}
 void Heading::set_pitch_std_dev(float value) {
  set_has_pitch_std_dev();
  pitch_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.pitch_std_dev)
}

// optional bytes station_id = 11;
bool Heading::has_station_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Heading::set_has_station_id() {
  _has_bits_[0] |= 0x00000400u;
}
void Heading::clear_has_station_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void Heading::clear_station_id() {
  station_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_station_id();
}
 const ::std::string& Heading::station_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.station_id)
  return station_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Heading::set_station_id(const ::std::string& value) {
  set_has_station_id();
  station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.station_id)
}
 void Heading::set_station_id(const char* value) {
  set_has_station_id();
  station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.Heading.station_id)
}
 void Heading::set_station_id(const void* value, size_t size) {
  set_has_station_id();
  station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.Heading.station_id)
}
 ::std::string* Heading::mutable_station_id() {
  set_has_station_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Heading.station_id)
  return station_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Heading::release_station_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Heading.station_id)
  clear_has_station_id();
  return station_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Heading::set_allocated_station_id(::std::string* station_id) {
  if (station_id != NULL) {
    set_has_station_id();
  } else {
    clear_has_station_id();
  }
  station_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), station_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Heading.station_id)
}

// optional uint32 satellite_tracked_number = 12;
bool Heading::has_satellite_tracked_number() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Heading::set_has_satellite_tracked_number() {
  _has_bits_[0] |= 0x00000800u;
}
void Heading::clear_has_satellite_tracked_number() {
  _has_bits_[0] &= ~0x00000800u;
}
void Heading::clear_satellite_tracked_number() {
  satellite_tracked_number_ = 0u;
  clear_has_satellite_tracked_number();
}
 ::google::protobuf::uint32 Heading::satellite_tracked_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_tracked_number)
  return satellite_tracked_number_;
}
 void Heading::set_satellite_tracked_number(::google::protobuf::uint32 value) {
  set_has_satellite_tracked_number();
  satellite_tracked_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_tracked_number)
}

// optional uint32 satellite_soulution_number = 13;
bool Heading::has_satellite_soulution_number() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Heading::set_has_satellite_soulution_number() {
  _has_bits_[0] |= 0x00001000u;
}
void Heading::clear_has_satellite_soulution_number() {
  _has_bits_[0] &= ~0x00001000u;
}
void Heading::clear_satellite_soulution_number() {
  satellite_soulution_number_ = 0u;
  clear_has_satellite_soulution_number();
}
 ::google::protobuf::uint32 Heading::satellite_soulution_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_soulution_number)
  return satellite_soulution_number_;
}
 void Heading::set_satellite_soulution_number(::google::protobuf::uint32 value) {
  set_has_satellite_soulution_number();
  satellite_soulution_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_soulution_number)
}

// optional uint32 satellite_number_obs = 14;
bool Heading::has_satellite_number_obs() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Heading::set_has_satellite_number_obs() {
  _has_bits_[0] |= 0x00002000u;
}
void Heading::clear_has_satellite_number_obs() {
  _has_bits_[0] &= ~0x00002000u;
}
void Heading::clear_satellite_number_obs() {
  satellite_number_obs_ = 0u;
  clear_has_satellite_number_obs();
}
 ::google::protobuf::uint32 Heading::satellite_number_obs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_number_obs)
  return satellite_number_obs_;
}
 void Heading::set_satellite_number_obs(::google::protobuf::uint32 value) {
  set_has_satellite_number_obs();
  satellite_number_obs_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_number_obs)
}

// optional uint32 satellite_number_multi = 15;
bool Heading::has_satellite_number_multi() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Heading::set_has_satellite_number_multi() {
  _has_bits_[0] |= 0x00004000u;
}
void Heading::clear_has_satellite_number_multi() {
  _has_bits_[0] &= ~0x00004000u;
}
void Heading::clear_satellite_number_multi() {
  satellite_number_multi_ = 0u;
  clear_has_satellite_number_multi();
}
 ::google::protobuf::uint32 Heading::satellite_number_multi() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_number_multi)
  return satellite_number_multi_;
}
 void Heading::set_satellite_number_multi(::google::protobuf::uint32 value) {
  set_has_satellite_number_multi();
  satellite_number_multi_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_number_multi)
}

// optional uint32 solution_source = 16;
bool Heading::has_solution_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Heading::set_has_solution_source() {
  _has_bits_[0] |= 0x00008000u;
}
void Heading::clear_has_solution_source() {
  _has_bits_[0] &= ~0x00008000u;
}
void Heading::clear_solution_source() {
  solution_source_ = 0u;
  clear_has_solution_source();
}
 ::google::protobuf::uint32 Heading::solution_source() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.solution_source)
  return solution_source_;
}
 void Heading::set_solution_source(::google::protobuf::uint32 value) {
  set_has_solution_source();
  solution_source_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.solution_source)
}

// optional uint32 extended_solution_status = 17;
bool Heading::has_extended_solution_status() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Heading::set_has_extended_solution_status() {
  _has_bits_[0] |= 0x00010000u;
}
void Heading::clear_has_extended_solution_status() {
  _has_bits_[0] &= ~0x00010000u;
}
void Heading::clear_extended_solution_status() {
  extended_solution_status_ = 0u;
  clear_has_extended_solution_status();
}
 ::google::protobuf::uint32 Heading::extended_solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.extended_solution_status)
  return extended_solution_status_;
}
 void Heading::set_extended_solution_status(::google::protobuf::uint32 value) {
  set_has_extended_solution_status();
  extended_solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.extended_solution_status)
}

// optional uint32 galileo_beidou_sig_mask = 18;
bool Heading::has_galileo_beidou_sig_mask() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Heading::set_has_galileo_beidou_sig_mask() {
  _has_bits_[0] |= 0x00020000u;
}
void Heading::clear_has_galileo_beidou_sig_mask() {
  _has_bits_[0] &= ~0x00020000u;
}
void Heading::clear_galileo_beidou_sig_mask() {
  galileo_beidou_sig_mask_ = 0u;
  clear_has_galileo_beidou_sig_mask();
}
 ::google::protobuf::uint32 Heading::galileo_beidou_sig_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.galileo_beidou_sig_mask)
  return galileo_beidou_sig_mask_;
}
 void Heading::set_galileo_beidou_sig_mask(::google::protobuf::uint32 value) {
  set_has_galileo_beidou_sig_mask();
  galileo_beidou_sig_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.galileo_beidou_sig_mask)
}

// optional uint32 gps_glonass_sig_mask = 19;
bool Heading::has_gps_glonass_sig_mask() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Heading::set_has_gps_glonass_sig_mask() {
  _has_bits_[0] |= 0x00040000u;
}
void Heading::clear_has_gps_glonass_sig_mask() {
  _has_bits_[0] &= ~0x00040000u;
}
void Heading::clear_gps_glonass_sig_mask() {
  gps_glonass_sig_mask_ = 0u;
  clear_has_gps_glonass_sig_mask();
}
 ::google::protobuf::uint32 Heading::gps_glonass_sig_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.gps_glonass_sig_mask)
  return gps_glonass_sig_mask_;
}
 void Heading::set_gps_glonass_sig_mask(::google::protobuf::uint32 value) {
  set_has_gps_glonass_sig_mask();
  gps_glonass_sig_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.gps_glonass_sig_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
