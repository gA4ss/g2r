// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map/relative_map/relative_map_config.proto

#ifndef PROTOBUF_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto__INCLUDED
#define PROTOBUF_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace relative_map {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
void protobuf_AssignDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
void protobuf_ShutdownFile_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();

class MapGenerationParam;
class NavigationLaneConfig;
class RelativeMapConfig;

enum NavigationLaneConfig_LaneSource {
  NavigationLaneConfig_LaneSource_PERCEPTION = 1,
  NavigationLaneConfig_LaneSource_OFFLINE_GENERATED = 2
};
bool NavigationLaneConfig_LaneSource_IsValid(int value);
const NavigationLaneConfig_LaneSource NavigationLaneConfig_LaneSource_LaneSource_MIN = NavigationLaneConfig_LaneSource_PERCEPTION;
const NavigationLaneConfig_LaneSource NavigationLaneConfig_LaneSource_LaneSource_MAX = NavigationLaneConfig_LaneSource_OFFLINE_GENERATED;
const int NavigationLaneConfig_LaneSource_LaneSource_ARRAYSIZE = NavigationLaneConfig_LaneSource_LaneSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor();
inline const ::std::string& NavigationLaneConfig_LaneSource_Name(NavigationLaneConfig_LaneSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavigationLaneConfig_LaneSource_descriptor(), value);
}
inline bool NavigationLaneConfig_LaneSource_Parse(
    const ::std::string& name, NavigationLaneConfig_LaneSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavigationLaneConfig_LaneSource>(
    NavigationLaneConfig_LaneSource_descriptor(), name, value);
}
// ===================================================================

class MapGenerationParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.MapGenerationParam) */ {
 public:
  MapGenerationParam();
  virtual ~MapGenerationParam();

  MapGenerationParam(const MapGenerationParam& from);

  inline MapGenerationParam& operator=(const MapGenerationParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapGenerationParam& default_instance();

  void Swap(MapGenerationParam* other);

  // implements Message ----------------------------------------------

  inline MapGenerationParam* New() const { return New(NULL); }

  MapGenerationParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapGenerationParam& from);
  void MergeFrom(const MapGenerationParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapGenerationParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double default_left_width = 1 [default = 1.75];
  bool has_default_left_width() const;
  void clear_default_left_width();
  static const int kDefaultLeftWidthFieldNumber = 1;
  double default_left_width() const;
  void set_default_left_width(double value);

  // optional double default_right_width = 2 [default = 1.75];
  bool has_default_right_width() const;
  void clear_default_right_width();
  static const int kDefaultRightWidthFieldNumber = 2;
  double default_right_width() const;
  void set_default_right_width(double value);

  // optional double default_speed_limit = 3 [default = 29.0576];
  bool has_default_speed_limit() const;
  void clear_default_speed_limit();
  static const int kDefaultSpeedLimitFieldNumber = 3;
  double default_speed_limit() const;
  void set_default_speed_limit(double value);

  // @@protoc_insertion_point(class_scope:apollo.relative_map.MapGenerationParam)
 private:
  inline void set_has_default_left_width();
  inline void clear_has_default_left_width();
  inline void set_has_default_right_width();
  inline void clear_has_default_right_width();
  inline void set_has_default_speed_limit();
  inline void clear_has_default_speed_limit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double default_left_width_;
  double default_right_width_;
  double default_speed_limit_;
  friend void  protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  friend void protobuf_AssignDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static MapGenerationParam* default_instance_;
};
// -------------------------------------------------------------------

class NavigationLaneConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.NavigationLaneConfig) */ {
 public:
  NavigationLaneConfig();
  virtual ~NavigationLaneConfig();

  NavigationLaneConfig(const NavigationLaneConfig& from);

  inline NavigationLaneConfig& operator=(const NavigationLaneConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationLaneConfig& default_instance();

  void Swap(NavigationLaneConfig* other);

  // implements Message ----------------------------------------------

  inline NavigationLaneConfig* New() const { return New(NULL); }

  NavigationLaneConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavigationLaneConfig& from);
  void MergeFrom(const NavigationLaneConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NavigationLaneConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NavigationLaneConfig_LaneSource LaneSource;
  static const LaneSource PERCEPTION =
    NavigationLaneConfig_LaneSource_PERCEPTION;
  static const LaneSource OFFLINE_GENERATED =
    NavigationLaneConfig_LaneSource_OFFLINE_GENERATED;
  static inline bool LaneSource_IsValid(int value) {
    return NavigationLaneConfig_LaneSource_IsValid(value);
  }
  static const LaneSource LaneSource_MIN =
    NavigationLaneConfig_LaneSource_LaneSource_MIN;
  static const LaneSource LaneSource_MAX =
    NavigationLaneConfig_LaneSource_LaneSource_MAX;
  static const int LaneSource_ARRAYSIZE =
    NavigationLaneConfig_LaneSource_LaneSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneSource_descriptor() {
    return NavigationLaneConfig_LaneSource_descriptor();
  }
  static inline const ::std::string& LaneSource_Name(LaneSource value) {
    return NavigationLaneConfig_LaneSource_Name(value);
  }
  static inline bool LaneSource_Parse(const ::std::string& name,
      LaneSource* value) {
    return NavigationLaneConfig_LaneSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double min_lane_marker_quality = 1 [default = 0.5];
  bool has_min_lane_marker_quality() const;
  void clear_min_lane_marker_quality();
  static const int kMinLaneMarkerQualityFieldNumber = 1;
  double min_lane_marker_quality() const;
  void set_min_lane_marker_quality(double value);

  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  bool has_lane_source() const;
  void clear_lane_source();
  static const int kLaneSourceFieldNumber = 2;
  ::apollo::relative_map::NavigationLaneConfig_LaneSource lane_source() const;
  void set_lane_source(::apollo::relative_map::NavigationLaneConfig_LaneSource value);

  // @@protoc_insertion_point(class_scope:apollo.relative_map.NavigationLaneConfig)
 private:
  inline void set_has_min_lane_marker_quality();
  inline void clear_has_min_lane_marker_quality();
  inline void set_has_lane_source();
  inline void clear_has_lane_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double min_lane_marker_quality_;
  int lane_source_;
  friend void  protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  friend void protobuf_AssignDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static NavigationLaneConfig* default_instance_;
};
// -------------------------------------------------------------------

class RelativeMapConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.RelativeMapConfig) */ {
 public:
  RelativeMapConfig();
  virtual ~RelativeMapConfig();

  RelativeMapConfig(const RelativeMapConfig& from);

  inline RelativeMapConfig& operator=(const RelativeMapConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativeMapConfig& default_instance();

  void Swap(RelativeMapConfig* other);

  // implements Message ----------------------------------------------

  inline RelativeMapConfig* New() const { return New(NULL); }

  RelativeMapConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelativeMapConfig& from);
  void MergeFrom(const RelativeMapConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelativeMapConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  bool has_map_param() const;
  void clear_map_param();
  static const int kMapParamFieldNumber = 1;
  const ::apollo::relative_map::MapGenerationParam& map_param() const;
  ::apollo::relative_map::MapGenerationParam* mutable_map_param();
  ::apollo::relative_map::MapGenerationParam* release_map_param();
  void set_allocated_map_param(::apollo::relative_map::MapGenerationParam* map_param);

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  bool has_navigation_lane() const;
  void clear_navigation_lane();
  static const int kNavigationLaneFieldNumber = 2;
  const ::apollo::relative_map::NavigationLaneConfig& navigation_lane() const;
  ::apollo::relative_map::NavigationLaneConfig* mutable_navigation_lane();
  ::apollo::relative_map::NavigationLaneConfig* release_navigation_lane();
  void set_allocated_navigation_lane(::apollo::relative_map::NavigationLaneConfig* navigation_lane);

  // @@protoc_insertion_point(class_scope:apollo.relative_map.RelativeMapConfig)
 private:
  inline void set_has_map_param();
  inline void clear_has_map_param();
  inline void set_has_navigation_lane();
  inline void clear_has_navigation_lane();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::relative_map::MapGenerationParam* map_param_;
  ::apollo::relative_map::NavigationLaneConfig* navigation_lane_;
  friend void  protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  friend void protobuf_AssignDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RelativeMapConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MapGenerationParam

// optional double default_left_width = 1 [default = 1.75];
inline bool MapGenerationParam::has_default_left_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapGenerationParam::set_has_default_left_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapGenerationParam::clear_has_default_left_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapGenerationParam::clear_default_left_width() {
  default_left_width_ = 1.75;
  clear_has_default_left_width();
}
inline double MapGenerationParam::default_left_width() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_left_width)
  return default_left_width_;
}
inline void MapGenerationParam::set_default_left_width(double value) {
  set_has_default_left_width();
  default_left_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_left_width)
}

// optional double default_right_width = 2 [default = 1.75];
inline bool MapGenerationParam::has_default_right_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapGenerationParam::set_has_default_right_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapGenerationParam::clear_has_default_right_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapGenerationParam::clear_default_right_width() {
  default_right_width_ = 1.75;
  clear_has_default_right_width();
}
inline double MapGenerationParam::default_right_width() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_right_width)
  return default_right_width_;
}
inline void MapGenerationParam::set_default_right_width(double value) {
  set_has_default_right_width();
  default_right_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_right_width)
}

// optional double default_speed_limit = 3 [default = 29.0576];
inline bool MapGenerationParam::has_default_speed_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapGenerationParam::set_has_default_speed_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapGenerationParam::clear_has_default_speed_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapGenerationParam::clear_default_speed_limit() {
  default_speed_limit_ = 29.0576;
  clear_has_default_speed_limit();
}
inline double MapGenerationParam::default_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_speed_limit)
  return default_speed_limit_;
}
inline void MapGenerationParam::set_default_speed_limit(double value) {
  set_has_default_speed_limit();
  default_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_speed_limit)
}

// -------------------------------------------------------------------

// NavigationLaneConfig

// optional double min_lane_marker_quality = 1 [default = 0.5];
inline bool NavigationLaneConfig::has_min_lane_marker_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationLaneConfig::set_has_min_lane_marker_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationLaneConfig::clear_has_min_lane_marker_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationLaneConfig::clear_min_lane_marker_quality() {
  min_lane_marker_quality_ = 0.5;
  clear_has_min_lane_marker_quality();
}
inline double NavigationLaneConfig::min_lane_marker_quality() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationLaneConfig.min_lane_marker_quality)
  return min_lane_marker_quality_;
}
inline void NavigationLaneConfig::set_min_lane_marker_quality(double value) {
  set_has_min_lane_marker_quality();
  min_lane_marker_quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationLaneConfig.min_lane_marker_quality)
}

// optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
inline bool NavigationLaneConfig::has_lane_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigationLaneConfig::set_has_lane_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigationLaneConfig::clear_has_lane_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavigationLaneConfig::clear_lane_source() {
  lane_source_ = 1;
  clear_has_lane_source();
}
inline ::apollo::relative_map::NavigationLaneConfig_LaneSource NavigationLaneConfig::lane_source() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationLaneConfig.lane_source)
  return static_cast< ::apollo::relative_map::NavigationLaneConfig_LaneSource >(lane_source_);
}
inline void NavigationLaneConfig::set_lane_source(::apollo::relative_map::NavigationLaneConfig_LaneSource value) {
  assert(::apollo::relative_map::NavigationLaneConfig_LaneSource_IsValid(value));
  set_has_lane_source();
  lane_source_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationLaneConfig.lane_source)
}

// -------------------------------------------------------------------

// RelativeMapConfig

// optional .apollo.relative_map.MapGenerationParam map_param = 1;
inline bool RelativeMapConfig::has_map_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelativeMapConfig::set_has_map_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelativeMapConfig::clear_has_map_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelativeMapConfig::clear_map_param() {
  if (map_param_ != NULL) map_param_->::apollo::relative_map::MapGenerationParam::Clear();
  clear_has_map_param();
}
inline const ::apollo::relative_map::MapGenerationParam& RelativeMapConfig::map_param() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.RelativeMapConfig.map_param)
  return map_param_ != NULL ? *map_param_ : *default_instance_->map_param_;
}
inline ::apollo::relative_map::MapGenerationParam* RelativeMapConfig::mutable_map_param() {
  set_has_map_param();
  if (map_param_ == NULL) {
    map_param_ = new ::apollo::relative_map::MapGenerationParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.RelativeMapConfig.map_param)
  return map_param_;
}
inline ::apollo::relative_map::MapGenerationParam* RelativeMapConfig::release_map_param() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.RelativeMapConfig.map_param)
  clear_has_map_param();
  ::apollo::relative_map::MapGenerationParam* temp = map_param_;
  map_param_ = NULL;
  return temp;
}
inline void RelativeMapConfig::set_allocated_map_param(::apollo::relative_map::MapGenerationParam* map_param) {
  delete map_param_;
  map_param_ = map_param;
  if (map_param) {
    set_has_map_param();
  } else {
    clear_has_map_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.RelativeMapConfig.map_param)
}

// optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
inline bool RelativeMapConfig::has_navigation_lane() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelativeMapConfig::set_has_navigation_lane() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelativeMapConfig::clear_has_navigation_lane() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelativeMapConfig::clear_navigation_lane() {
  if (navigation_lane_ != NULL) navigation_lane_->::apollo::relative_map::NavigationLaneConfig::Clear();
  clear_has_navigation_lane();
}
inline const ::apollo::relative_map::NavigationLaneConfig& RelativeMapConfig::navigation_lane() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.RelativeMapConfig.navigation_lane)
  return navigation_lane_ != NULL ? *navigation_lane_ : *default_instance_->navigation_lane_;
}
inline ::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::mutable_navigation_lane() {
  set_has_navigation_lane();
  if (navigation_lane_ == NULL) {
    navigation_lane_ = new ::apollo::relative_map::NavigationLaneConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.RelativeMapConfig.navigation_lane)
  return navigation_lane_;
}
inline ::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::release_navigation_lane() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.RelativeMapConfig.navigation_lane)
  clear_has_navigation_lane();
  ::apollo::relative_map::NavigationLaneConfig* temp = navigation_lane_;
  navigation_lane_ = NULL;
  return temp;
}
inline void RelativeMapConfig::set_allocated_navigation_lane(::apollo::relative_map::NavigationLaneConfig* navigation_lane) {
  delete navigation_lane_;
  navigation_lane_ = navigation_lane;
  if (navigation_lane) {
    set_has_navigation_lane();
  } else {
    clear_has_navigation_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.RelativeMapConfig.navigation_lane)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::relative_map::NavigationLaneConfig_LaneSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::relative_map::NavigationLaneConfig_LaneSource>() {
  return ::apollo::relative_map::NavigationLaneConfig_LaneSource_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto__INCLUDED
