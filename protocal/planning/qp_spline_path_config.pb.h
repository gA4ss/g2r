// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/qp_spline_path_config.proto

#ifndef PROTOBUF_planning_2fqp_5fspline_5fpath_5fconfig_2eproto__INCLUDED
#define PROTOBUF_planning_2fqp_5fspline_5fpath_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
void protobuf_AssignDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
void protobuf_ShutdownFile_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();

class QpSplinePathConfig;

// ===================================================================

class QpSplinePathConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpSplinePathConfig) */ {
 public:
  QpSplinePathConfig();
  virtual ~QpSplinePathConfig();

  QpSplinePathConfig(const QpSplinePathConfig& from);

  inline QpSplinePathConfig& operator=(const QpSplinePathConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QpSplinePathConfig& default_instance();

  void Swap(QpSplinePathConfig* other);

  // implements Message ----------------------------------------------

  inline QpSplinePathConfig* New() const { return New(NULL); }

  QpSplinePathConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QpSplinePathConfig& from);
  void MergeFrom(const QpSplinePathConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QpSplinePathConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 spline_order = 1 [default = 6];
  bool has_spline_order() const;
  void clear_spline_order();
  static const int kSplineOrderFieldNumber = 1;
  ::google::protobuf::uint32 spline_order() const;
  void set_spline_order(::google::protobuf::uint32 value);

  // optional double max_spline_length = 2 [default = 15];
  bool has_max_spline_length() const;
  void clear_max_spline_length();
  static const int kMaxSplineLengthFieldNumber = 2;
  double max_spline_length() const;
  void set_max_spline_length(double value);

  // optional double max_constraint_interval = 3 [default = 15];
  bool has_max_constraint_interval() const;
  void clear_max_constraint_interval();
  static const int kMaxConstraintIntervalFieldNumber = 3;
  double max_constraint_interval() const;
  void set_max_constraint_interval(double value);

  // optional double time_resolution = 4 [default = 0.1];
  bool has_time_resolution() const;
  void clear_time_resolution();
  static const int kTimeResolutionFieldNumber = 4;
  double time_resolution() const;
  void set_time_resolution(double value);

  // optional double regularization_weight = 5 [default = 0.001];
  bool has_regularization_weight() const;
  void clear_regularization_weight();
  static const int kRegularizationWeightFieldNumber = 5;
  double regularization_weight() const;
  void set_regularization_weight(double value);

  // optional double first_spline_weight_factor = 6 [default = 10];
  bool has_first_spline_weight_factor() const;
  void clear_first_spline_weight_factor();
  static const int kFirstSplineWeightFactorFieldNumber = 6;
  double first_spline_weight_factor() const;
  void set_first_spline_weight_factor(double value);

  // optional double derivative_weight = 7 [default = 0];
  bool has_derivative_weight() const;
  void clear_derivative_weight();
  static const int kDerivativeWeightFieldNumber = 7;
  double derivative_weight() const;
  void set_derivative_weight(double value);

  // optional double second_derivative_weight = 8 [default = 0];
  bool has_second_derivative_weight() const;
  void clear_second_derivative_weight();
  static const int kSecondDerivativeWeightFieldNumber = 8;
  double second_derivative_weight() const;
  void set_second_derivative_weight(double value);

  // optional double third_derivative_weight = 9 [default = 100];
  bool has_third_derivative_weight() const;
  void clear_third_derivative_weight();
  static const int kThirdDerivativeWeightFieldNumber = 9;
  double third_derivative_weight() const;
  void set_third_derivative_weight(double value);

  // optional double reference_line_weight = 10 [default = 0];
  bool has_reference_line_weight() const;
  void clear_reference_line_weight();
  static const int kReferenceLineWeightFieldNumber = 10;
  double reference_line_weight() const;
  void set_reference_line_weight(double value);

  // optional uint32 num_output = 11 [default = 100];
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 11;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional double cross_lane_lateral_extension = 12 [default = 1.2];
  bool has_cross_lane_lateral_extension() const;
  void clear_cross_lane_lateral_extension();
  static const int kCrossLaneLateralExtensionFieldNumber = 12;
  double cross_lane_lateral_extension() const;
  void set_cross_lane_lateral_extension(double value);

  // optional double cross_lane_longitudinal_extension = 13 [default = 50];
  bool has_cross_lane_longitudinal_extension() const;
  void clear_cross_lane_longitudinal_extension();
  static const int kCrossLaneLongitudinalExtensionFieldNumber = 13;
  double cross_lane_longitudinal_extension() const;
  void set_cross_lane_longitudinal_extension(double value);

  // optional double history_path_weight = 14 [default = 0];
  bool has_history_path_weight() const;
  void clear_history_path_weight();
  static const int kHistoryPathWeightFieldNumber = 14;
  double history_path_weight() const;
  void set_history_path_weight(double value);

  // optional double lane_change_mid_l = 15 [default = 0.6];
  bool has_lane_change_mid_l() const;
  void clear_lane_change_mid_l();
  static const int kLaneChangeMidLFieldNumber = 15;
  double lane_change_mid_l() const;
  void set_lane_change_mid_l(double value);

  // optional double point_constraint_s_position = 16 [default = 110];
  bool has_point_constraint_s_position() const;
  void clear_point_constraint_s_position();
  static const int kPointConstraintSPositionFieldNumber = 16;
  double point_constraint_s_position() const;
  void set_point_constraint_s_position(double value);

  // optional double lane_change_lateral_shift = 17 [default = 1];
  bool has_lane_change_lateral_shift() const;
  void clear_lane_change_lateral_shift();
  static const int kLaneChangeLateralShiftFieldNumber = 17;
  double lane_change_lateral_shift() const;
  void set_lane_change_lateral_shift(double value);

  // optional double uturn_speed_limit = 18 [default = 5];
  bool has_uturn_speed_limit() const;
  void clear_uturn_speed_limit();
  static const int kUturnSpeedLimitFieldNumber = 18;
  double uturn_speed_limit() const;
  void set_uturn_speed_limit(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.QpSplinePathConfig)
 private:
  inline void set_has_spline_order();
  inline void clear_has_spline_order();
  inline void set_has_max_spline_length();
  inline void clear_has_max_spline_length();
  inline void set_has_max_constraint_interval();
  inline void clear_has_max_constraint_interval();
  inline void set_has_time_resolution();
  inline void clear_has_time_resolution();
  inline void set_has_regularization_weight();
  inline void clear_has_regularization_weight();
  inline void set_has_first_spline_weight_factor();
  inline void clear_has_first_spline_weight_factor();
  inline void set_has_derivative_weight();
  inline void clear_has_derivative_weight();
  inline void set_has_second_derivative_weight();
  inline void clear_has_second_derivative_weight();
  inline void set_has_third_derivative_weight();
  inline void clear_has_third_derivative_weight();
  inline void set_has_reference_line_weight();
  inline void clear_has_reference_line_weight();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_cross_lane_lateral_extension();
  inline void clear_has_cross_lane_lateral_extension();
  inline void set_has_cross_lane_longitudinal_extension();
  inline void clear_has_cross_lane_longitudinal_extension();
  inline void set_has_history_path_weight();
  inline void clear_has_history_path_weight();
  inline void set_has_lane_change_mid_l();
  inline void clear_has_lane_change_mid_l();
  inline void set_has_point_constraint_s_position();
  inline void clear_has_point_constraint_s_position();
  inline void set_has_lane_change_lateral_shift();
  inline void clear_has_lane_change_lateral_shift();
  inline void set_has_uturn_speed_limit();
  inline void clear_has_uturn_speed_limit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_spline_length_;
  double max_constraint_interval_;
  double time_resolution_;
  double regularization_weight_;
  double first_spline_weight_factor_;
  ::google::protobuf::uint32 spline_order_;
  ::google::protobuf::uint32 num_output_;
  double derivative_weight_;
  double second_derivative_weight_;
  double third_derivative_weight_;
  double reference_line_weight_;
  double cross_lane_lateral_extension_;
  double cross_lane_longitudinal_extension_;
  double history_path_weight_;
  double lane_change_mid_l_;
  double point_constraint_s_position_;
  double lane_change_lateral_shift_;
  double uturn_speed_limit_;
  friend void  protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static QpSplinePathConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplinePathConfig

// optional uint32 spline_order = 1 [default = 6];
inline bool QpSplinePathConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpSplinePathConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpSplinePathConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpSplinePathConfig::clear_spline_order() {
  spline_order_ = 6u;
  clear_has_spline_order();
}
inline ::google::protobuf::uint32 QpSplinePathConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.spline_order)
  return spline_order_;
}
inline void QpSplinePathConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 15];
inline bool QpSplinePathConfig::has_max_spline_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpSplinePathConfig::set_has_max_spline_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpSplinePathConfig::clear_has_max_spline_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpSplinePathConfig::clear_max_spline_length() {
  max_spline_length_ = 15;
  clear_has_max_spline_length();
}
inline double QpSplinePathConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.max_spline_length)
  return max_spline_length_;
}
inline void QpSplinePathConfig::set_max_spline_length(double value) {
  set_has_max_spline_length();
  max_spline_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.max_spline_length)
}

// optional double max_constraint_interval = 3 [default = 15];
inline bool QpSplinePathConfig::has_max_constraint_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QpSplinePathConfig::set_has_max_constraint_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QpSplinePathConfig::clear_has_max_constraint_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QpSplinePathConfig::clear_max_constraint_interval() {
  max_constraint_interval_ = 15;
  clear_has_max_constraint_interval();
}
inline double QpSplinePathConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.max_constraint_interval)
  return max_constraint_interval_;
}
inline void QpSplinePathConfig::set_max_constraint_interval(double value) {
  set_has_max_constraint_interval();
  max_constraint_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.max_constraint_interval)
}

// optional double time_resolution = 4 [default = 0.1];
inline bool QpSplinePathConfig::has_time_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QpSplinePathConfig::set_has_time_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QpSplinePathConfig::clear_has_time_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QpSplinePathConfig::clear_time_resolution() {
  time_resolution_ = 0.1;
  clear_has_time_resolution();
}
inline double QpSplinePathConfig::time_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.time_resolution)
  return time_resolution_;
}
inline void QpSplinePathConfig::set_time_resolution(double value) {
  set_has_time_resolution();
  time_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.time_resolution)
}

// optional double regularization_weight = 5 [default = 0.001];
inline bool QpSplinePathConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QpSplinePathConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QpSplinePathConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QpSplinePathConfig::clear_regularization_weight() {
  regularization_weight_ = 0.001;
  clear_has_regularization_weight();
}
inline double QpSplinePathConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.regularization_weight)
  return regularization_weight_;
}
inline void QpSplinePathConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.regularization_weight)
}

// optional double first_spline_weight_factor = 6 [default = 10];
inline bool QpSplinePathConfig::has_first_spline_weight_factor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QpSplinePathConfig::set_has_first_spline_weight_factor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QpSplinePathConfig::clear_has_first_spline_weight_factor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QpSplinePathConfig::clear_first_spline_weight_factor() {
  first_spline_weight_factor_ = 10;
  clear_has_first_spline_weight_factor();
}
inline double QpSplinePathConfig::first_spline_weight_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.first_spline_weight_factor)
  return first_spline_weight_factor_;
}
inline void QpSplinePathConfig::set_first_spline_weight_factor(double value) {
  set_has_first_spline_weight_factor();
  first_spline_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.first_spline_weight_factor)
}

// optional double derivative_weight = 7 [default = 0];
inline bool QpSplinePathConfig::has_derivative_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QpSplinePathConfig::set_has_derivative_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QpSplinePathConfig::clear_has_derivative_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QpSplinePathConfig::clear_derivative_weight() {
  derivative_weight_ = 0;
  clear_has_derivative_weight();
}
inline double QpSplinePathConfig::derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.derivative_weight)
  return derivative_weight_;
}
inline void QpSplinePathConfig::set_derivative_weight(double value) {
  set_has_derivative_weight();
  derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.derivative_weight)
}

// optional double second_derivative_weight = 8 [default = 0];
inline bool QpSplinePathConfig::has_second_derivative_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QpSplinePathConfig::set_has_second_derivative_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QpSplinePathConfig::clear_has_second_derivative_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QpSplinePathConfig::clear_second_derivative_weight() {
  second_derivative_weight_ = 0;
  clear_has_second_derivative_weight();
}
inline double QpSplinePathConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.second_derivative_weight)
  return second_derivative_weight_;
}
inline void QpSplinePathConfig::set_second_derivative_weight(double value) {
  set_has_second_derivative_weight();
  second_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 9 [default = 100];
inline bool QpSplinePathConfig::has_third_derivative_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QpSplinePathConfig::set_has_third_derivative_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QpSplinePathConfig::clear_has_third_derivative_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QpSplinePathConfig::clear_third_derivative_weight() {
  third_derivative_weight_ = 100;
  clear_has_third_derivative_weight();
}
inline double QpSplinePathConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.third_derivative_weight)
  return third_derivative_weight_;
}
inline void QpSplinePathConfig::set_third_derivative_weight(double value) {
  set_has_third_derivative_weight();
  third_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.third_derivative_weight)
}

// optional double reference_line_weight = 10 [default = 0];
inline bool QpSplinePathConfig::has_reference_line_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QpSplinePathConfig::set_has_reference_line_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QpSplinePathConfig::clear_has_reference_line_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QpSplinePathConfig::clear_reference_line_weight() {
  reference_line_weight_ = 0;
  clear_has_reference_line_weight();
}
inline double QpSplinePathConfig::reference_line_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.reference_line_weight)
  return reference_line_weight_;
}
inline void QpSplinePathConfig::set_reference_line_weight(double value) {
  set_has_reference_line_weight();
  reference_line_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.reference_line_weight)
}

// optional uint32 num_output = 11 [default = 100];
inline bool QpSplinePathConfig::has_num_output() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QpSplinePathConfig::set_has_num_output() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QpSplinePathConfig::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QpSplinePathConfig::clear_num_output() {
  num_output_ = 100u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 QpSplinePathConfig::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.num_output)
  return num_output_;
}
inline void QpSplinePathConfig::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.num_output)
}

// optional double cross_lane_lateral_extension = 12 [default = 1.2];
inline bool QpSplinePathConfig::has_cross_lane_lateral_extension() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QpSplinePathConfig::set_has_cross_lane_lateral_extension() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QpSplinePathConfig::clear_has_cross_lane_lateral_extension() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QpSplinePathConfig::clear_cross_lane_lateral_extension() {
  cross_lane_lateral_extension_ = 1.2;
  clear_has_cross_lane_lateral_extension();
}
inline double QpSplinePathConfig::cross_lane_lateral_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.cross_lane_lateral_extension)
  return cross_lane_lateral_extension_;
}
inline void QpSplinePathConfig::set_cross_lane_lateral_extension(double value) {
  set_has_cross_lane_lateral_extension();
  cross_lane_lateral_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.cross_lane_lateral_extension)
}

// optional double cross_lane_longitudinal_extension = 13 [default = 50];
inline bool QpSplinePathConfig::has_cross_lane_longitudinal_extension() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QpSplinePathConfig::set_has_cross_lane_longitudinal_extension() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QpSplinePathConfig::clear_has_cross_lane_longitudinal_extension() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QpSplinePathConfig::clear_cross_lane_longitudinal_extension() {
  cross_lane_longitudinal_extension_ = 50;
  clear_has_cross_lane_longitudinal_extension();
}
inline double QpSplinePathConfig::cross_lane_longitudinal_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.cross_lane_longitudinal_extension)
  return cross_lane_longitudinal_extension_;
}
inline void QpSplinePathConfig::set_cross_lane_longitudinal_extension(double value) {
  set_has_cross_lane_longitudinal_extension();
  cross_lane_longitudinal_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.cross_lane_longitudinal_extension)
}

// optional double history_path_weight = 14 [default = 0];
inline bool QpSplinePathConfig::has_history_path_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QpSplinePathConfig::set_has_history_path_weight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QpSplinePathConfig::clear_has_history_path_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QpSplinePathConfig::clear_history_path_weight() {
  history_path_weight_ = 0;
  clear_has_history_path_weight();
}
inline double QpSplinePathConfig::history_path_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.history_path_weight)
  return history_path_weight_;
}
inline void QpSplinePathConfig::set_history_path_weight(double value) {
  set_has_history_path_weight();
  history_path_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.history_path_weight)
}

// optional double lane_change_mid_l = 15 [default = 0.6];
inline bool QpSplinePathConfig::has_lane_change_mid_l() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QpSplinePathConfig::set_has_lane_change_mid_l() {
  _has_bits_[0] |= 0x00004000u;
}
inline void QpSplinePathConfig::clear_has_lane_change_mid_l() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void QpSplinePathConfig::clear_lane_change_mid_l() {
  lane_change_mid_l_ = 0.6;
  clear_has_lane_change_mid_l();
}
inline double QpSplinePathConfig::lane_change_mid_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.lane_change_mid_l)
  return lane_change_mid_l_;
}
inline void QpSplinePathConfig::set_lane_change_mid_l(double value) {
  set_has_lane_change_mid_l();
  lane_change_mid_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.lane_change_mid_l)
}

// optional double point_constraint_s_position = 16 [default = 110];
inline bool QpSplinePathConfig::has_point_constraint_s_position() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void QpSplinePathConfig::set_has_point_constraint_s_position() {
  _has_bits_[0] |= 0x00008000u;
}
inline void QpSplinePathConfig::clear_has_point_constraint_s_position() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void QpSplinePathConfig::clear_point_constraint_s_position() {
  point_constraint_s_position_ = 110;
  clear_has_point_constraint_s_position();
}
inline double QpSplinePathConfig::point_constraint_s_position() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.point_constraint_s_position)
  return point_constraint_s_position_;
}
inline void QpSplinePathConfig::set_point_constraint_s_position(double value) {
  set_has_point_constraint_s_position();
  point_constraint_s_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.point_constraint_s_position)
}

// optional double lane_change_lateral_shift = 17 [default = 1];
inline bool QpSplinePathConfig::has_lane_change_lateral_shift() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void QpSplinePathConfig::set_has_lane_change_lateral_shift() {
  _has_bits_[0] |= 0x00010000u;
}
inline void QpSplinePathConfig::clear_has_lane_change_lateral_shift() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void QpSplinePathConfig::clear_lane_change_lateral_shift() {
  lane_change_lateral_shift_ = 1;
  clear_has_lane_change_lateral_shift();
}
inline double QpSplinePathConfig::lane_change_lateral_shift() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.lane_change_lateral_shift)
  return lane_change_lateral_shift_;
}
inline void QpSplinePathConfig::set_lane_change_lateral_shift(double value) {
  set_has_lane_change_lateral_shift();
  lane_change_lateral_shift_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.lane_change_lateral_shift)
}

// optional double uturn_speed_limit = 18 [default = 5];
inline bool QpSplinePathConfig::has_uturn_speed_limit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void QpSplinePathConfig::set_has_uturn_speed_limit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void QpSplinePathConfig::clear_has_uturn_speed_limit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void QpSplinePathConfig::clear_uturn_speed_limit() {
  uturn_speed_limit_ = 5;
  clear_has_uturn_speed_limit();
}
inline double QpSplinePathConfig::uturn_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.uturn_speed_limit)
  return uturn_speed_limit_;
}
inline void QpSplinePathConfig::set_uturn_speed_limit(double value) {
  set_has_uturn_speed_limit();
  uturn_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.uturn_speed_limit)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fqp_5fspline_5fpath_5fconfig_2eproto__INCLUDED
