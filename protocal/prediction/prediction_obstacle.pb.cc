// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/prediction_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prediction/prediction_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace prediction {

namespace {

const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleIntent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleIntent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObstacleIntent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Intent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Intent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Intent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PredictionObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredictionObstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredictionObstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredictionObstacles_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prediction_2fprediction_5fobstacle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prediction_2fprediction_5fobstacle_2eproto() {
  protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prediction/prediction_obstacle.proto");
  GOOGLE_CHECK(file != NULL);
  Trajectory_descriptor_ = file->message_type(0);
  static const int Trajectory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_point_),
  };
  Trajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_[0]),
      -1,
      -1,
      sizeof(Trajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
      -1);
  ObstacleIntent_descriptor_ = file->message_type(1);
  static const int ObstacleIntent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleIntent, type_),
  };
  ObstacleIntent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObstacleIntent_descriptor_,
      ObstacleIntent::default_instance_,
      ObstacleIntent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleIntent, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObstacleIntent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleIntent, _internal_metadata_),
      -1);
  ObstacleIntent_Type_descriptor_ = ObstacleIntent_descriptor_->enum_type(0);
  Intent_descriptor_ = file->message_type(2);
  static const int Intent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, type_),
  };
  Intent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Intent_descriptor_,
      Intent::default_instance_,
      Intent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _has_bits_[0]),
      -1,
      -1,
      sizeof(Intent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _internal_metadata_),
      -1);
  Intent_Type_descriptor_ = Intent_descriptor_->enum_type(0);
  PredictionObstacle_descriptor_ = file->message_type(3);
  static const int PredictionObstacle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, perception_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, predicted_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, trajectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, intent_),
  };
  PredictionObstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PredictionObstacle_descriptor_,
      PredictionObstacle::default_instance_,
      PredictionObstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, _has_bits_[0]),
      -1,
      -1,
      sizeof(PredictionObstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, _internal_metadata_),
      -1);
  PredictionObstacles_descriptor_ = file->message_type(4);
  static const int PredictionObstacles_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, prediction_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, perception_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, end_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, intent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, scenario_),
  };
  PredictionObstacles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PredictionObstacles_descriptor_,
      PredictionObstacles::default_instance_,
      PredictionObstacles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, _has_bits_[0]),
      -1,
      -1,
      sizeof(PredictionObstacles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prediction_2fprediction_5fobstacle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObstacleIntent_descriptor_, &ObstacleIntent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Intent_descriptor_, &Intent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PredictionObstacle_descriptor_, &PredictionObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PredictionObstacles_descriptor_, &PredictionObstacles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prediction_2fprediction_5fobstacle_2eproto() {
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete ObstacleIntent::default_instance_;
  delete ObstacleIntent_reflection_;
  delete Intent::default_instance_;
  delete Intent_reflection_;
  delete PredictionObstacle::default_instance_;
  delete PredictionObstacle_reflection_;
  delete PredictionObstacles::default_instance_;
  delete PredictionObstacles_reflection_;
}

void protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2ferror_5fcode_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fscenario_2eproto();
  ::apollo::perception::protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$prediction/prediction_obstacle.proto\022\021"
    "apollo.prediction\032\027common/error_code.pro"
    "to\032\023common/header.proto\032\026common/pnc_poin"
    "t.proto\032\025common/scenario.proto\032$percepti"
    "on/perception_obstacle.proto\"[\n\nTrajecto"
    "ry\022\023\n\013probability\030\001 \001(\001\0228\n\020trajectory_po"
    "int\030\002 \003(\0132\036.apollo.common.TrajectoryPoin"
    "t\"\366\001\n\016ObstacleIntent\022=\n\004type\030\001 \001(\0162&.apo"
    "llo.prediction.ObstacleIntent.Type:\007UNKN"
    "OWN\"\244\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\016\n\nS"
    "TATIONARY\020\002\022\n\n\006MOVING\020\003\022\017\n\013CHANGE_LANE\020\004"
    "\022\024\n\020LOW_ACCELERATION\020\005\022\025\n\021HIGH_ACCELERAT"
    "ION\020\006\022\024\n\020LOW_DECELERATION\020\007\022\025\n\021HIGH_DECE"
    "LERATION\020\010\"{\n\006Intent\0225\n\004type\030\001 \001(\0162\036.apo"
    "llo.prediction.Intent.Type:\007UNKNOWN\":\n\004T"
    "ype\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\n\n\006CRUISE\020\002\022\017"
    "\n\013CHANGE_LANE\020\003\"\353\001\n\022PredictionObstacle\022B"
    "\n\023perception_obstacle\030\001 \001(\0132%.apollo.per"
    "ception.PerceptionObstacle\022\021\n\ttimestamp\030"
    "\002 \001(\001\022\030\n\020predicted_period\030\003 \001(\001\0221\n\ntraje"
    "ctory\030\004 \003(\0132\035.apollo.prediction.Trajecto"
    "ry\0221\n\006intent\030\005 \001(\0132!.apollo.prediction.O"
    "bstacleIntent\"\277\002\n\023PredictionObstacles\022%\n"
    "\006header\030\001 \001(\0132\025.apollo.common.Header\022B\n\023"
    "prediction_obstacle\030\002 \003(\0132%.apollo.predi"
    "ction.PredictionObstacle\0227\n\025perception_e"
    "rror_code\030\003 \001(\0162\030.apollo.common.ErrorCod"
    "e\022\027\n\017start_timestamp\030\004 \001(\001\022\025\n\rend_timest"
    "amp\030\005 \001(\001\022)\n\006intent\030\006 \001(\0132\031.apollo.predi"
    "ction.Intent\022)\n\010scenario\030\007 \001(\0132\027.apollo."
    "common.Scenario", 1215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction/prediction_obstacle.proto", &protobuf_RegisterTypes);
  Trajectory::default_instance_ = new Trajectory();
  ObstacleIntent::default_instance_ = new ObstacleIntent();
  Intent::default_instance_ = new Intent();
  PredictionObstacle::default_instance_ = new PredictionObstacle();
  PredictionObstacles::default_instance_ = new PredictionObstacles();
  Trajectory::default_instance_->InitAsDefaultInstance();
  ObstacleIntent::default_instance_->InitAsDefaultInstance();
  Intent::default_instance_->InitAsDefaultInstance();
  PredictionObstacle::default_instance_->InitAsDefaultInstance();
  PredictionObstacles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prediction_2fprediction_5fobstacle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prediction_2fprediction_5fobstacle_2eproto {
  StaticDescriptorInitializer_prediction_2fprediction_5fobstacle_2eproto() {
    protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto();
  }
} static_descriptor_initializer_prediction_2fprediction_5fobstacle_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kProbabilityFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Trajectory)
  probability_ = 0;
  trajectory_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trajectory_point;
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (tag == 18) {
         parse_trajectory_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_trajectory_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.Trajectory)
  // optional double probability = 1;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Trajectory)
  // optional double probability = 1;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trajectory_point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Trajectory)
  int total_size = 0;

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  total_size += 1 * this->trajectory_point_size();
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Trajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Trajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Trajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  std::swap(probability_, other->probability_);
  trajectory_point_.UnsafeArenaSwap(&other->trajectory_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional double probability = 1;
bool Trajectory::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trajectory::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void Trajectory::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trajectory::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double Trajectory::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Trajectory.probability)
  return probability_;
}
 void Trajectory::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Trajectory.probability)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::apollo::common::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
::apollo::common::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::apollo::common::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Trajectory.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Trajectory.trajectory_point)
  return trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObstacleIntent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleIntent_Type_descriptor_;
}
bool ObstacleIntent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleIntent_Type ObstacleIntent::UNKNOWN;
const ObstacleIntent_Type ObstacleIntent::STOP;
const ObstacleIntent_Type ObstacleIntent::STATIONARY;
const ObstacleIntent_Type ObstacleIntent::MOVING;
const ObstacleIntent_Type ObstacleIntent::CHANGE_LANE;
const ObstacleIntent_Type ObstacleIntent::LOW_ACCELERATION;
const ObstacleIntent_Type ObstacleIntent::HIGH_ACCELERATION;
const ObstacleIntent_Type ObstacleIntent::LOW_DECELERATION;
const ObstacleIntent_Type ObstacleIntent::HIGH_DECELERATION;
const ObstacleIntent_Type ObstacleIntent::Type_MIN;
const ObstacleIntent_Type ObstacleIntent::Type_MAX;
const int ObstacleIntent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleIntent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleIntent::ObstacleIntent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstacleIntent)
}

void ObstacleIntent::InitAsDefaultInstance() {
}

ObstacleIntent::ObstacleIntent(const ObstacleIntent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleIntent)
}

void ObstacleIntent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleIntent::~ObstacleIntent() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleIntent)
  SharedDtor();
}

void ObstacleIntent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleIntent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleIntent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleIntent_descriptor_;
}

const ObstacleIntent& ObstacleIntent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto();
  return *default_instance_;
}

ObstacleIntent* ObstacleIntent::default_instance_ = NULL;

ObstacleIntent* ObstacleIntent::New(::google::protobuf::Arena* arena) const {
  ObstacleIntent* n = new ObstacleIntent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleIntent)
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObstacleIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.ObstacleIntent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::ObstacleIntent_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::prediction::ObstacleIntent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.ObstacleIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.ObstacleIntent)
  return false;
#undef DO_
}

void ObstacleIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.ObstacleIntent)
  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.ObstacleIntent)
}

::google::protobuf::uint8* ObstacleIntent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleIntent)
  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleIntent)
  return target;
}

int ObstacleIntent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleIntent)
  int total_size = 0;

  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstacleIntent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObstacleIntent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleIntent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstacleIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstacleIntent)
    MergeFrom(*source);
  }
}

void ObstacleIntent::MergeFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleIntent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObstacleIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleIntent::CopyFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleIntent::IsInitialized() const {

  return true;
}

void ObstacleIntent::Swap(ObstacleIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleIntent::InternalSwap(ObstacleIntent* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleIntent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleIntent_descriptor_;
  metadata.reflection = ObstacleIntent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleIntent

// optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
bool ObstacleIntent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleIntent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleIntent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleIntent::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::prediction::ObstacleIntent_Type ObstacleIntent::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleIntent.type)
  return static_cast< ::apollo::prediction::ObstacleIntent_Type >(type_);
}
 void ObstacleIntent::set_type(::apollo::prediction::ObstacleIntent_Type value) {
  assert(::apollo::prediction::ObstacleIntent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleIntent.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Intent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Intent_Type_descriptor_;
}
bool Intent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Intent_Type Intent::UNKNOWN;
const Intent_Type Intent::STOP;
const Intent_Type Intent::CRUISE;
const Intent_Type Intent::CHANGE_LANE;
const Intent_Type Intent::Type_MIN;
const Intent_Type Intent::Type_MAX;
const int Intent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Intent)
}

void Intent::InitAsDefaultInstance() {
}

Intent::Intent(const Intent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Intent)
}

void Intent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Intent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Intent_descriptor_;
}

const Intent& Intent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto();
  return *default_instance_;
}

Intent* Intent::default_instance_ = NULL;

Intent* Intent::New(::google::protobuf::Arena* arena) const {
  Intent* n = new Intent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Intent)
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.Intent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::Intent_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::prediction::Intent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.Intent)
  return false;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.Intent)
  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.Intent)
}

::google::protobuf::uint8* Intent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Intent)
  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Intent)
  return target;
}

int Intent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Intent)
  int total_size = 0;

  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Intent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Intent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Intent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Intent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Intent)
    MergeFrom(*source);
  }
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Intent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Intent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {

  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Intent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Intent_descriptor_;
  metadata.reflection = Intent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Intent

// optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
bool Intent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Intent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Intent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Intent::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::prediction::Intent_Type Intent::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Intent.type)
  return static_cast< ::apollo::prediction::Intent_Type >(type_);
}
 void Intent::set_type(::apollo::prediction::Intent_Type value) {
  assert(::apollo::prediction::Intent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Intent.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacle::kPerceptionObstacleFieldNumber;
const int PredictionObstacle::kTimestampFieldNumber;
const int PredictionObstacle::kPredictedPeriodFieldNumber;
const int PredictionObstacle::kTrajectoryFieldNumber;
const int PredictionObstacle::kIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacle::PredictionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.PredictionObstacle)
}

void PredictionObstacle::InitAsDefaultInstance() {
  perception_obstacle_ = const_cast< ::apollo::perception::PerceptionObstacle*>(&::apollo::perception::PerceptionObstacle::default_instance());
  intent_ = const_cast< ::apollo::prediction::ObstacleIntent*>(&::apollo::prediction::ObstacleIntent::default_instance());
}

PredictionObstacle::PredictionObstacle(const PredictionObstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionObstacle)
}

void PredictionObstacle::SharedCtor() {
  _cached_size_ = 0;
  perception_obstacle_ = NULL;
  timestamp_ = 0;
  predicted_period_ = 0;
  intent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredictionObstacle::~PredictionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionObstacle)
  SharedDtor();
}

void PredictionObstacle::SharedDtor() {
  if (this != default_instance_) {
    delete perception_obstacle_;
    delete intent_;
  }
}

void PredictionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredictionObstacle_descriptor_;
}

const PredictionObstacle& PredictionObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto();
  return *default_instance_;
}

PredictionObstacle* PredictionObstacle::default_instance_ = NULL;

PredictionObstacle* PredictionObstacle::New(::google::protobuf::Arena* arena) const {
  PredictionObstacle* n = new PredictionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionObstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PredictionObstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PredictionObstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(timestamp_, predicted_period_);
    if (has_perception_obstacle()) {
      if (perception_obstacle_ != NULL) perception_obstacle_->::apollo::perception::PerceptionObstacle::Clear();
    }
    if (has_intent()) {
      if (intent_ != NULL) intent_->::apollo::prediction::ObstacleIntent::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  trajectory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PredictionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.PredictionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_predicted_period;
        break;
      }

      // optional double predicted_period = 3;
      case 3: {
        if (tag == 25) {
         parse_predicted_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predicted_period_)));
          set_has_predicted_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_trajectory;
        break;
      }

      // repeated .apollo.prediction.Trajectory trajectory = 4;
      case 4: {
        if (tag == 34) {
         parse_trajectory:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_trajectory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_intent;
        break;
      }

      // optional .apollo.prediction.ObstacleIntent intent = 5;
      case 5: {
        if (tag == 42) {
         parse_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.PredictionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.PredictionObstacle)
  return false;
#undef DO_
}

void PredictionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.PredictionObstacle)
  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  if (has_perception_obstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->perception_obstacle_, output);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional double predicted_period = 3;
  if (has_predicted_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->predicted_period(), output);
  }

  // repeated .apollo.prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trajectory(i), output);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 5;
  if (has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->intent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.PredictionObstacle)
}

::google::protobuf::uint8* PredictionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionObstacle)
  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  if (has_perception_obstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->perception_obstacle_, false, target);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional double predicted_period = 3;
  if (has_predicted_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->predicted_period(), target);
  }

  // repeated .apollo.prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->trajectory(i), false, target);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 5;
  if (has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->intent_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionObstacle)
  return target;
}

int PredictionObstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionObstacle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
    if (has_perception_obstacle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->perception_obstacle_);
    }

    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 3;
    if (has_predicted_period()) {
      total_size += 1 + 8;
    }

    // optional .apollo.prediction.ObstacleIntent intent = 5;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->intent_);
    }

  }
  // repeated .apollo.prediction.Trajectory trajectory = 4;
  total_size += 1 * this->trajectory_size();
  for (int i = 0; i < this->trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.PredictionObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PredictionObstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.PredictionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.PredictionObstacle)
    MergeFrom(*source);
  }
}

void PredictionObstacle::MergeFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  trajectory_.MergeFrom(from.trajectory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_perception_obstacle()) {
      mutable_perception_obstacle()->::apollo::perception::PerceptionObstacle::MergeFrom(from.perception_obstacle());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_predicted_period()) {
      set_predicted_period(from.predicted_period());
    }
    if (from.has_intent()) {
      mutable_intent()->::apollo::prediction::ObstacleIntent::MergeFrom(from.intent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PredictionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacle::CopyFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacle::IsInitialized() const {

  return true;
}

void PredictionObstacle::Swap(PredictionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacle::InternalSwap(PredictionObstacle* other) {
  std::swap(perception_obstacle_, other->perception_obstacle_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(predicted_period_, other->predicted_period_);
  trajectory_.UnsafeArenaSwap(&other->trajectory_);
  std::swap(intent_, other->intent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredictionObstacle_descriptor_;
  metadata.reflection = PredictionObstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionObstacle

// optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
bool PredictionObstacle::has_perception_obstacle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictionObstacle::set_has_perception_obstacle() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictionObstacle::clear_has_perception_obstacle() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacle::clear_perception_obstacle() {
  if (perception_obstacle_ != NULL) perception_obstacle_->::apollo::perception::PerceptionObstacle::Clear();
  clear_has_perception_obstacle();
}
const ::apollo::perception::PerceptionObstacle& PredictionObstacle::perception_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.perception_obstacle)
  return perception_obstacle_ != NULL ? *perception_obstacle_ : *default_instance_->perception_obstacle_;
}
::apollo::perception::PerceptionObstacle* PredictionObstacle::mutable_perception_obstacle() {
  set_has_perception_obstacle();
  if (perception_obstacle_ == NULL) {
    perception_obstacle_ = new ::apollo::perception::PerceptionObstacle;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.perception_obstacle)
  return perception_obstacle_;
}
::apollo::perception::PerceptionObstacle* PredictionObstacle::release_perception_obstacle() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.perception_obstacle)
  clear_has_perception_obstacle();
  ::apollo::perception::PerceptionObstacle* temp = perception_obstacle_;
  perception_obstacle_ = NULL;
  return temp;
}
void PredictionObstacle::set_allocated_perception_obstacle(::apollo::perception::PerceptionObstacle* perception_obstacle) {
  delete perception_obstacle_;
  perception_obstacle_ = perception_obstacle;
  if (perception_obstacle) {
    set_has_perception_obstacle();
  } else {
    clear_has_perception_obstacle();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.perception_obstacle)
}

// optional double timestamp = 2;
bool PredictionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PredictionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void PredictionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void PredictionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double PredictionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.timestamp)
  return timestamp_;
}
 void PredictionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.timestamp)
}

// optional double predicted_period = 3;
bool PredictionObstacle::has_predicted_period() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictionObstacle::set_has_predicted_period() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictionObstacle::clear_has_predicted_period() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictionObstacle::clear_predicted_period() {
  predicted_period_ = 0;
  clear_has_predicted_period();
}
 double PredictionObstacle::predicted_period() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.predicted_period)
  return predicted_period_;
}
 void PredictionObstacle::set_predicted_period(double value) {
  set_has_predicted_period();
  predicted_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.predicted_period)
}

// repeated .apollo.prediction.Trajectory trajectory = 4;
int PredictionObstacle::trajectory_size() const {
  return trajectory_.size();
}
void PredictionObstacle::clear_trajectory() {
  trajectory_.Clear();
}
const ::apollo::prediction::Trajectory& PredictionObstacle::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_.Get(index);
}
::apollo::prediction::Trajectory* PredictionObstacle::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_.Mutable(index);
}
::apollo::prediction::Trajectory* PredictionObstacle::add_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >*
PredictionObstacle::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacle.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >&
PredictionObstacle::trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_;
}

// optional .apollo.prediction.ObstacleIntent intent = 5;
bool PredictionObstacle::has_intent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictionObstacle::set_has_intent() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictionObstacle::clear_has_intent() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictionObstacle::clear_intent() {
  if (intent_ != NULL) intent_->::apollo::prediction::ObstacleIntent::Clear();
  clear_has_intent();
}
const ::apollo::prediction::ObstacleIntent& PredictionObstacle::intent() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.intent)
  return intent_ != NULL ? *intent_ : *default_instance_->intent_;
}
::apollo::prediction::ObstacleIntent* PredictionObstacle::mutable_intent() {
  set_has_intent();
  if (intent_ == NULL) {
    intent_ = new ::apollo::prediction::ObstacleIntent;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.intent)
  return intent_;
}
::apollo::prediction::ObstacleIntent* PredictionObstacle::release_intent() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.intent)
  clear_has_intent();
  ::apollo::prediction::ObstacleIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void PredictionObstacle::set_allocated_intent(::apollo::prediction::ObstacleIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    set_has_intent();
  } else {
    clear_has_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.intent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacles::kHeaderFieldNumber;
const int PredictionObstacles::kPredictionObstacleFieldNumber;
const int PredictionObstacles::kPerceptionErrorCodeFieldNumber;
const int PredictionObstacles::kStartTimestampFieldNumber;
const int PredictionObstacles::kEndTimestampFieldNumber;
const int PredictionObstacles::kIntentFieldNumber;
const int PredictionObstacles::kScenarioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacles::PredictionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.PredictionObstacles)
}

void PredictionObstacles::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  intent_ = const_cast< ::apollo::prediction::Intent*>(&::apollo::prediction::Intent::default_instance());
  scenario_ = const_cast< ::apollo::common::Scenario*>(&::apollo::common::Scenario::default_instance());
}

PredictionObstacles::PredictionObstacles(const PredictionObstacles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionObstacles)
}

void PredictionObstacles::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  perception_error_code_ = 0;
  start_timestamp_ = 0;
  end_timestamp_ = 0;
  intent_ = NULL;
  scenario_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredictionObstacles::~PredictionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionObstacles)
  SharedDtor();
}

void PredictionObstacles::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete intent_;
    delete scenario_;
  }
}

void PredictionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionObstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredictionObstacles_descriptor_;
}

const PredictionObstacles& PredictionObstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fprediction_5fobstacle_2eproto();
  return *default_instance_;
}

PredictionObstacles* PredictionObstacles::default_instance_ = NULL;

PredictionObstacles* PredictionObstacles::New(::google::protobuf::Arena* arena) const {
  PredictionObstacles* n = new PredictionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionObstacles)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PredictionObstacles, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PredictionObstacles*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 125u) {
    ZR_(start_timestamp_, end_timestamp_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    perception_error_code_ = 0;
    if (has_intent()) {
      if (intent_ != NULL) intent_->::apollo::prediction::Intent::Clear();
    }
    if (has_scenario()) {
      if (scenario_ != NULL) scenario_->::apollo::common::Scenario::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  prediction_obstacle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PredictionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.PredictionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_prediction_obstacle;
        break;
      }

      // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
      case 2: {
        if (tag == 18) {
         parse_prediction_obstacle:
          DO_(input->IncrementRecursionDepth());
         parse_loop_prediction_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prediction_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_prediction_obstacle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_perception_error_code;
        break;
      }

      // optional .apollo.common.ErrorCode perception_error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_perception_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::ErrorCode_IsValid(value)) {
            set_perception_error_code(static_cast< ::apollo::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_start_timestamp;
        break;
      }

      // optional double start_timestamp = 4;
      case 4: {
        if (tag == 33) {
         parse_start_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_timestamp_)));
          set_has_start_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_end_timestamp;
        break;
      }

      // optional double end_timestamp = 5;
      case 5: {
        if (tag == 41) {
         parse_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_timestamp_)));
          set_has_end_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_intent;
        break;
      }

      // optional .apollo.prediction.Intent intent = 6;
      case 6: {
        if (tag == 50) {
         parse_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scenario;
        break;
      }

      // optional .apollo.common.Scenario scenario = 7;
      case 7: {
        if (tag == 58) {
         parse_scenario:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenario()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.PredictionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.PredictionObstacles)
  return false;
#undef DO_
}

void PredictionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.PredictionObstacles)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  for (unsigned int i = 0, n = this->prediction_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prediction_obstacle(i), output);
  }

  // optional .apollo.common.ErrorCode perception_error_code = 3;
  if (has_perception_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->perception_error_code(), output);
  }

  // optional double start_timestamp = 4;
  if (has_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start_timestamp(), output);
  }

  // optional double end_timestamp = 5;
  if (has_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->end_timestamp(), output);
  }

  // optional .apollo.prediction.Intent intent = 6;
  if (has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->intent_, output);
  }

  // optional .apollo.common.Scenario scenario = 7;
  if (has_scenario()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scenario_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.PredictionObstacles)
}

::google::protobuf::uint8* PredictionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionObstacles)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  for (unsigned int i = 0, n = this->prediction_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->prediction_obstacle(i), false, target);
  }

  // optional .apollo.common.ErrorCode perception_error_code = 3;
  if (has_perception_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->perception_error_code(), target);
  }

  // optional double start_timestamp = 4;
  if (has_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start_timestamp(), target);
  }

  // optional double end_timestamp = 5;
  if (has_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->end_timestamp(), target);
  }

  // optional .apollo.prediction.Intent intent = 6;
  if (has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->intent_, false, target);
  }

  // optional .apollo.common.Scenario scenario = 7;
  if (has_scenario()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->scenario_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionObstacles)
  return target;
}

int PredictionObstacles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionObstacles)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 125u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.ErrorCode perception_error_code = 3;
    if (has_perception_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->perception_error_code());
    }

    // optional double start_timestamp = 4;
    if (has_start_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double end_timestamp = 5;
    if (has_end_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .apollo.prediction.Intent intent = 6;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->intent_);
    }

    // optional .apollo.common.Scenario scenario = 7;
    if (has_scenario()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scenario_);
    }

  }
  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  total_size += 1 * this->prediction_obstacle_size();
  for (int i = 0; i < this->prediction_obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prediction_obstacle(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.PredictionObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PredictionObstacles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.PredictionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.PredictionObstacles)
    MergeFrom(*source);
  }
}

void PredictionObstacles::MergeFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  prediction_obstacle_.MergeFrom(from.prediction_obstacle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_perception_error_code()) {
      set_perception_error_code(from.perception_error_code());
    }
    if (from.has_start_timestamp()) {
      set_start_timestamp(from.start_timestamp());
    }
    if (from.has_end_timestamp()) {
      set_end_timestamp(from.end_timestamp());
    }
    if (from.has_intent()) {
      mutable_intent()->::apollo::prediction::Intent::MergeFrom(from.intent());
    }
    if (from.has_scenario()) {
      mutable_scenario()->::apollo::common::Scenario::MergeFrom(from.scenario());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PredictionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacles::CopyFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacles::IsInitialized() const {

  return true;
}

void PredictionObstacles::Swap(PredictionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacles::InternalSwap(PredictionObstacles* other) {
  std::swap(header_, other->header_);
  prediction_obstacle_.UnsafeArenaSwap(&other->prediction_obstacle_);
  std::swap(perception_error_code_, other->perception_error_code_);
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(end_timestamp_, other->end_timestamp_);
  std::swap(intent_, other->intent_);
  std::swap(scenario_, other->scenario_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionObstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredictionObstacles_descriptor_;
  metadata.reflection = PredictionObstacles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionObstacles

// optional .apollo.common.Header header = 1;
bool PredictionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacles::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& PredictionObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* PredictionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.header)
  return header_;
}
::apollo::common::Header* PredictionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PredictionObstacles::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.header)
}

// repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
int PredictionObstacles::prediction_obstacle_size() const {
  return prediction_obstacle_.size();
}
void PredictionObstacles::clear_prediction_obstacle() {
  prediction_obstacle_.Clear();
}
const ::apollo::prediction::PredictionObstacle& PredictionObstacles::prediction_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Get(index);
}
::apollo::prediction::PredictionObstacle* PredictionObstacles::mutable_prediction_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Mutable(index);
}
::apollo::prediction::PredictionObstacle* PredictionObstacles::add_prediction_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >*
PredictionObstacles::mutable_prediction_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return &prediction_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >&
PredictionObstacles::prediction_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_;
}

// optional .apollo.common.ErrorCode perception_error_code = 3;
bool PredictionObstacles::has_perception_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictionObstacles::set_has_perception_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictionObstacles::clear_has_perception_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictionObstacles::clear_perception_error_code() {
  perception_error_code_ = 0;
  clear_has_perception_error_code();
}
 ::apollo::common::ErrorCode PredictionObstacles::perception_error_code() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.perception_error_code)
  return static_cast< ::apollo::common::ErrorCode >(perception_error_code_);
}
 void PredictionObstacles::set_perception_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_perception_error_code();
  perception_error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.perception_error_code)
}

// optional double start_timestamp = 4;
bool PredictionObstacles::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PredictionObstacles::set_has_start_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void PredictionObstacles::clear_has_start_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void PredictionObstacles::clear_start_timestamp() {
  start_timestamp_ = 0;
  clear_has_start_timestamp();
}
 double PredictionObstacles::start_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.start_timestamp)
  return start_timestamp_;
}
 void PredictionObstacles::set_start_timestamp(double value) {
  set_has_start_timestamp();
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.start_timestamp)
}

// optional double end_timestamp = 5;
bool PredictionObstacles::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictionObstacles::set_has_end_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictionObstacles::clear_has_end_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictionObstacles::clear_end_timestamp() {
  end_timestamp_ = 0;
  clear_has_end_timestamp();
}
 double PredictionObstacles::end_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.end_timestamp)
  return end_timestamp_;
}
 void PredictionObstacles::set_end_timestamp(double value) {
  set_has_end_timestamp();
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.end_timestamp)
}

// optional .apollo.prediction.Intent intent = 6;
bool PredictionObstacles::has_intent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PredictionObstacles::set_has_intent() {
  _has_bits_[0] |= 0x00000020u;
}
void PredictionObstacles::clear_has_intent() {
  _has_bits_[0] &= ~0x00000020u;
}
void PredictionObstacles::clear_intent() {
  if (intent_ != NULL) intent_->::apollo::prediction::Intent::Clear();
  clear_has_intent();
}
const ::apollo::prediction::Intent& PredictionObstacles::intent() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.intent)
  return intent_ != NULL ? *intent_ : *default_instance_->intent_;
}
::apollo::prediction::Intent* PredictionObstacles::mutable_intent() {
  set_has_intent();
  if (intent_ == NULL) {
    intent_ = new ::apollo::prediction::Intent;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.intent)
  return intent_;
}
::apollo::prediction::Intent* PredictionObstacles::release_intent() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.intent)
  clear_has_intent();
  ::apollo::prediction::Intent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void PredictionObstacles::set_allocated_intent(::apollo::prediction::Intent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    set_has_intent();
  } else {
    clear_has_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.intent)
}

// optional .apollo.common.Scenario scenario = 7;
bool PredictionObstacles::has_scenario() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PredictionObstacles::set_has_scenario() {
  _has_bits_[0] |= 0x00000040u;
}
void PredictionObstacles::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000040u;
}
void PredictionObstacles::clear_scenario() {
  if (scenario_ != NULL) scenario_->::apollo::common::Scenario::Clear();
  clear_has_scenario();
}
const ::apollo::common::Scenario& PredictionObstacles::scenario() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.scenario)
  return scenario_ != NULL ? *scenario_ : *default_instance_->scenario_;
}
::apollo::common::Scenario* PredictionObstacles::mutable_scenario() {
  set_has_scenario();
  if (scenario_ == NULL) {
    scenario_ = new ::apollo::common::Scenario;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.scenario)
  return scenario_;
}
::apollo::common::Scenario* PredictionObstacles::release_scenario() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.scenario)
  clear_has_scenario();
  ::apollo::common::Scenario* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
void PredictionObstacles::set_allocated_scenario(::apollo::common::Scenario* scenario) {
  delete scenario_;
  scenario_ = scenario;
  if (scenario) {
    set_has_scenario();
  } else {
    clear_has_scenario();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.scenario)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
