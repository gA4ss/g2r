// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/auto_tuning_model_input.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/auto_tuning_model_input.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
namespace autotuning {

namespace {

const ::google::protobuf::Descriptor* PathPointwiseFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPointwiseFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPointwiseFeature_ObstacleFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPointwiseFeature_ObstacleFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPointwiseFeature_BoundRelatedFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPointwiseFeature_BoundRelatedFeature_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SpeedPointwiseFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPointwiseFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedPointwiseFeature_ObstacleFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPointwiseFeature_ObstacleFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryPointwiseFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryPointwiseFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryFeature_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/auto_tuning_model_input.proto");
  GOOGLE_CHECK(file != NULL);
  PathPointwiseFeature_descriptor_ = file->message_type(0);
  static const int PathPointwiseFeature_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, dl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, ddl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, obstacle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, left_bound_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, right_bound_feature_),
  };
  PathPointwiseFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPointwiseFeature_descriptor_,
      PathPointwiseFeature::default_instance_,
      PathPointwiseFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathPointwiseFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature, _internal_metadata_),
      -1);
  PathPointwiseFeature_ObstacleFeature_descriptor_ = PathPointwiseFeature_descriptor_->nested_type(0);
  static const int PathPointwiseFeature_ObstacleFeature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature_ObstacleFeature, lateral_distance_),
  };
  PathPointwiseFeature_ObstacleFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPointwiseFeature_ObstacleFeature_descriptor_,
      PathPointwiseFeature_ObstacleFeature::default_instance_,
      PathPointwiseFeature_ObstacleFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature_ObstacleFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathPointwiseFeature_ObstacleFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature_ObstacleFeature, _internal_metadata_),
      -1);
  PathPointwiseFeature_BoundRelatedFeature_descriptor_ = PathPointwiseFeature_descriptor_->nested_type(1);
  static const int PathPointwiseFeature_BoundRelatedFeature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature_BoundRelatedFeature, bound_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature_BoundRelatedFeature, crossable_level_),
  };
  PathPointwiseFeature_BoundRelatedFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPointwiseFeature_BoundRelatedFeature_descriptor_,
      PathPointwiseFeature_BoundRelatedFeature::default_instance_,
      PathPointwiseFeature_BoundRelatedFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature_BoundRelatedFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathPointwiseFeature_BoundRelatedFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointwiseFeature_BoundRelatedFeature, _internal_metadata_),
      -1);
  PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor_ = PathPointwiseFeature_BoundRelatedFeature_descriptor_->enum_type(0);
  SpeedPointwiseFeature_descriptor_ = file->message_type(1);
  static const int SpeedPointwiseFeature_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, speed_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, jerk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, follow_obs_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, overtake_obs_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, nudge_obs_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, stop_obs_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, collision_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, virtual_obs_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, lateral_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, path_curvature_abs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, sidepass_front_obs_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, sidepass_rear_obs_feature_),
  };
  SpeedPointwiseFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeedPointwiseFeature_descriptor_,
      SpeedPointwiseFeature::default_instance_,
      SpeedPointwiseFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpeedPointwiseFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature, _internal_metadata_),
      -1);
  SpeedPointwiseFeature_ObstacleFeature_descriptor_ = SpeedPointwiseFeature_descriptor_->nested_type(0);
  static const int SpeedPointwiseFeature_ObstacleFeature_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, longitudinal_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, obstacle_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, lateral_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, relative_v_),
  };
  SpeedPointwiseFeature_ObstacleFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeedPointwiseFeature_ObstacleFeature_descriptor_,
      SpeedPointwiseFeature_ObstacleFeature::default_instance_,
      SpeedPointwiseFeature_ObstacleFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpeedPointwiseFeature_ObstacleFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, _internal_metadata_),
      -1);
  TrajectoryPointwiseFeature_descriptor_ = file->message_type(2);
  static const int TrajectoryPointwiseFeature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointwiseFeature, path_input_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointwiseFeature, speed_input_feature_),
  };
  TrajectoryPointwiseFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryPointwiseFeature_descriptor_,
      TrajectoryPointwiseFeature::default_instance_,
      TrajectoryPointwiseFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointwiseFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrajectoryPointwiseFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointwiseFeature, _internal_metadata_),
      -1);
  TrajectoryFeature_descriptor_ = file->message_type(3);
  static const int TrajectoryFeature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryFeature, point_feature_),
  };
  TrajectoryFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryFeature_descriptor_,
      TrajectoryFeature::default_instance_,
      TrajectoryFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrajectoryFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryFeature, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPointwiseFeature_descriptor_, &PathPointwiseFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPointwiseFeature_ObstacleFeature_descriptor_, &PathPointwiseFeature_ObstacleFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPointwiseFeature_BoundRelatedFeature_descriptor_, &PathPointwiseFeature_BoundRelatedFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeedPointwiseFeature_descriptor_, &SpeedPointwiseFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeedPointwiseFeature_ObstacleFeature_descriptor_, &SpeedPointwiseFeature_ObstacleFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryPointwiseFeature_descriptor_, &TrajectoryPointwiseFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryFeature_descriptor_, &TrajectoryFeature::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  delete PathPointwiseFeature::default_instance_;
  delete PathPointwiseFeature_reflection_;
  delete PathPointwiseFeature_ObstacleFeature::default_instance_;
  delete PathPointwiseFeature_ObstacleFeature_reflection_;
  delete PathPointwiseFeature_BoundRelatedFeature::default_instance_;
  delete PathPointwiseFeature_BoundRelatedFeature_reflection_;
  delete SpeedPointwiseFeature::default_instance_;
  delete SpeedPointwiseFeature_reflection_;
  delete SpeedPointwiseFeature_ObstacleFeature::default_instance_;
  delete SpeedPointwiseFeature_ObstacleFeature_reflection_;
  delete TrajectoryPointwiseFeature::default_instance_;
  delete TrajectoryPointwiseFeature_reflection_;
  delete TrajectoryFeature::default_instance_;
  delete TrajectoryFeature_reflection_;
}

void protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&planning/auto_tuning_model_input.proto"
    "\022\032apollo.planning.autotuning\"\371\004\n\024PathPoi"
    "ntwiseFeature\022\t\n\001l\030\001 \001(\001\022\n\n\002dl\030\002 \001(\001\022\013\n\003"
    "ddl\030\003 \001(\001\022\r\n\005kappa\030\004 \001(\001\022W\n\robstacle_inf"
    "o\030\005 \003(\0132@.apollo.planning.autotuning.Pat"
    "hPointwiseFeature.ObstacleFeature\022`\n\022lef"
    "t_bound_feature\030\006 \001(\0132D.apollo.planning."
    "autotuning.PathPointwiseFeature.BoundRel"
    "atedFeature\022a\n\023right_bound_feature\030\007 \001(\013"
    "2D.apollo.planning.autotuning.PathPointw"
    "iseFeature.BoundRelatedFeature\032+\n\017Obstac"
    "leFeature\022\030\n\020lateral_distance\030\001 \001(\001\032\342\001\n\023"
    "BoundRelatedFeature\022\026\n\016bound_distance\030\001 "
    "\001(\001\022l\n\017crossable_level\030\002 \001(\0162S.apollo.pl"
    "anning.autotuning.PathPointwiseFeature.B"
    "oundRelatedFeature.CrossableLevel\"E\n\016Cro"
    "ssableLevel\022\016\n\nCROSS_FREE\020\000\022\016\n\nCROSS_ABL"
    "E\020\001\022\023\n\017CROSS_FORBIDDEN\020\002\"\207\010\n\025SpeedPointw"
    "iseFeature\022\014\n\001s\030\001 \001(\001:\0010\022\014\n\001t\030\002 \001(\001:\0010\022\014"
    "\n\001v\030\003 \001(\001:\0010\022\026\n\013speed_limit\030\004 \001(\001:\0010\022\016\n\003"
    "acc\030\005 \001(\001:\0010\022\017\n\004jerk\030\006 \001(\001:\0010\022]\n\022follow_"
    "obs_feature\030\007 \003(\0132A.apollo.planning.auto"
    "tuning.SpeedPointwiseFeature.ObstacleFea"
    "ture\022_\n\024overtake_obs_feature\030\010 \003(\0132A.apo"
    "llo.planning.autotuning.SpeedPointwiseFe"
    "ature.ObstacleFeature\022\\\n\021nudge_obs_featu"
    "re\030\t \003(\0132A.apollo.planning.autotuning.Sp"
    "eedPointwiseFeature.ObstacleFeature\022[\n\020s"
    "top_obs_feature\030\n \003(\0132A.apollo.planning."
    "autotuning.SpeedPointwiseFeature.Obstacl"
    "eFeature\022\032\n\017collision_times\030\013 \001(\005:\0010\022^\n\023"
    "virtual_obs_feature\030\014 \003(\0132A.apollo.plann"
    "ing.autotuning.SpeedPointwiseFeature.Obs"
    "tacleFeature\022\026\n\013lateral_acc\030\r \001(\001:\0010\022\035\n\022"
    "path_curvature_abs\030\016 \001(\001:\0010\022e\n\032sidepass_"
    "front_obs_feature\030\017 \003(\0132A.apollo.plannin"
    "g.autotuning.SpeedPointwiseFeature.Obsta"
    "cleFeature\022d\n\031sidepass_rear_obs_feature\030"
    "\020 \003(\0132A.apollo.planning.autotuning.Speed"
    "PointwiseFeature.ObstacleFeature\032\217\001\n\017Obs"
    "tacleFeature\022\035\n\025longitudinal_distance\030\001 "
    "\001(\001\022\026\n\016obstacle_speed\030\002 \001(\001\022\034\n\020lateral_d"
    "istance\030\003 \001(\001:\00210\022\023\n\013probability\030\004 \001(\001\022\022"
    "\n\nrelative_v\030\005 \001(\001\"\272\001\n\032TrajectoryPointwi"
    "seFeature\022L\n\022path_input_feature\030\001 \001(\01320."
    "apollo.planning.autotuning.PathPointwise"
    "Feature\022N\n\023speed_input_feature\030\002 \001(\01321.a"
    "pollo.planning.autotuning.SpeedPointwise"
    "Feature\"b\n\021TrajectoryFeature\022M\n\rpoint_fe"
    "ature\030\001 \003(\01326.apollo.planning.autotuning"
    ".TrajectoryPointwiseFeature", 2027);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/auto_tuning_model_input.proto", &protobuf_RegisterTypes);
  PathPointwiseFeature::default_instance_ = new PathPointwiseFeature();
  PathPointwiseFeature_ObstacleFeature::default_instance_ = new PathPointwiseFeature_ObstacleFeature();
  PathPointwiseFeature_BoundRelatedFeature::default_instance_ = new PathPointwiseFeature_BoundRelatedFeature();
  SpeedPointwiseFeature::default_instance_ = new SpeedPointwiseFeature();
  SpeedPointwiseFeature_ObstacleFeature::default_instance_ = new SpeedPointwiseFeature_ObstacleFeature();
  TrajectoryPointwiseFeature::default_instance_ = new TrajectoryPointwiseFeature();
  TrajectoryFeature::default_instance_ = new TrajectoryFeature();
  PathPointwiseFeature::default_instance_->InitAsDefaultInstance();
  PathPointwiseFeature_ObstacleFeature::default_instance_->InitAsDefaultInstance();
  PathPointwiseFeature_BoundRelatedFeature::default_instance_->InitAsDefaultInstance();
  SpeedPointwiseFeature::default_instance_->InitAsDefaultInstance();
  SpeedPointwiseFeature_ObstacleFeature::default_instance_->InitAsDefaultInstance();
  TrajectoryPointwiseFeature::default_instance_->InitAsDefaultInstance();
  TrajectoryFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fauto_5ftuning_5fmodel_5finput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fauto_5ftuning_5fmodel_5finput_2eproto {
  StaticDescriptorInitializer_planning_2fauto_5ftuning_5fmodel_5finput_2eproto() {
    protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  }
} static_descriptor_initializer_planning_2fauto_5ftuning_5fmodel_5finput_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointwiseFeature_ObstacleFeature::kLateralDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}

void PathPointwiseFeature_ObstacleFeature::InitAsDefaultInstance() {
}

PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature(const PathPointwiseFeature_ObstacleFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}

void PathPointwiseFeature_ObstacleFeature::SharedCtor() {
  _cached_size_ = 0;
  lateral_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPointwiseFeature_ObstacleFeature::~PathPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  SharedDtor();
}

void PathPointwiseFeature_ObstacleFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointwiseFeature_ObstacleFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPointwiseFeature_ObstacleFeature_descriptor_;
}

const PathPointwiseFeature_ObstacleFeature& PathPointwiseFeature_ObstacleFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  return *default_instance_;
}

PathPointwiseFeature_ObstacleFeature* PathPointwiseFeature_ObstacleFeature::default_instance_ = NULL;

PathPointwiseFeature_ObstacleFeature* PathPointwiseFeature_ObstacleFeature::New(::google::protobuf::Arena* arena) const {
  PathPointwiseFeature_ObstacleFeature* n = new PathPointwiseFeature_ObstacleFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  lateral_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathPointwiseFeature_ObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lateral_distance = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_distance_)));
          set_has_lateral_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return false;
#undef DO_
}

void PathPointwiseFeature_ObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  // optional double lateral_distance = 1;
  if (has_lateral_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}

::google::protobuf::uint8* PathPointwiseFeature_ObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  // optional double lateral_distance = 1;
  if (has_lateral_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return target;
}

int PathPointwiseFeature_ObstacleFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  int total_size = 0;

  // optional double lateral_distance = 1;
  if (has_lateral_distance()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointwiseFeature_ObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPointwiseFeature_ObstacleFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointwiseFeature_ObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature_ObstacleFeature::MergeFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lateral_distance()) {
      set_lateral_distance(from.lateral_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathPointwiseFeature_ObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature_ObstacleFeature::CopyFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_ObstacleFeature::IsInitialized() const {

  return true;
}

void PathPointwiseFeature_ObstacleFeature::Swap(PathPointwiseFeature_ObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointwiseFeature_ObstacleFeature::InternalSwap(PathPointwiseFeature_ObstacleFeature* other) {
  std::swap(lateral_distance_, other->lateral_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointwiseFeature_ObstacleFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPointwiseFeature_ObstacleFeature_descriptor_;
  metadata.reflection = PathPointwiseFeature_ObstacleFeature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor_;
}
bool PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FREE;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_ABLE;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FORBIDDEN;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MIN;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MAX;
const int PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointwiseFeature_BoundRelatedFeature::kBoundDistanceFieldNumber;
const int PathPointwiseFeature_BoundRelatedFeature::kCrossableLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}

void PathPointwiseFeature_BoundRelatedFeature::InitAsDefaultInstance() {
}

PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature(const PathPointwiseFeature_BoundRelatedFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}

void PathPointwiseFeature_BoundRelatedFeature::SharedCtor() {
  _cached_size_ = 0;
  bound_distance_ = 0;
  crossable_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPointwiseFeature_BoundRelatedFeature::~PathPointwiseFeature_BoundRelatedFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  SharedDtor();
}

void PathPointwiseFeature_BoundRelatedFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathPointwiseFeature_BoundRelatedFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointwiseFeature_BoundRelatedFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPointwiseFeature_BoundRelatedFeature_descriptor_;
}

const PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature_BoundRelatedFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  return *default_instance_;
}

PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature_BoundRelatedFeature::default_instance_ = NULL;

PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature_BoundRelatedFeature::New(::google::protobuf::Arena* arena) const {
  PathPointwiseFeature_BoundRelatedFeature* n = new PathPointwiseFeature_BoundRelatedFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointwiseFeature_BoundRelatedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathPointwiseFeature_BoundRelatedFeature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathPointwiseFeature_BoundRelatedFeature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bound_distance_, crossable_level_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathPointwiseFeature_BoundRelatedFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double bound_distance = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bound_distance_)));
          set_has_bound_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_crossable_level;
        break;
      }

      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
      case 2: {
        if (tag == 16) {
         parse_crossable_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(value)) {
            set_crossable_level(static_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return false;
#undef DO_
}

void PathPointwiseFeature_BoundRelatedFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  // optional double bound_distance = 1;
  if (has_bound_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->bound_distance(), output);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
  if (has_crossable_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->crossable_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}

::google::protobuf::uint8* PathPointwiseFeature_BoundRelatedFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  // optional double bound_distance = 1;
  if (has_bound_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->bound_distance(), target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
  if (has_crossable_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->crossable_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return target;
}

int PathPointwiseFeature_BoundRelatedFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double bound_distance = 1;
    if (has_bound_distance()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
    if (has_crossable_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crossable_level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointwiseFeature_BoundRelatedFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPointwiseFeature_BoundRelatedFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointwiseFeature_BoundRelatedFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature_BoundRelatedFeature::MergeFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bound_distance()) {
      set_bound_distance(from.bound_distance());
    }
    if (from.has_crossable_level()) {
      set_crossable_level(from.crossable_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathPointwiseFeature_BoundRelatedFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature_BoundRelatedFeature::CopyFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_BoundRelatedFeature::IsInitialized() const {

  return true;
}

void PathPointwiseFeature_BoundRelatedFeature::Swap(PathPointwiseFeature_BoundRelatedFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointwiseFeature_BoundRelatedFeature::InternalSwap(PathPointwiseFeature_BoundRelatedFeature* other) {
  std::swap(bound_distance_, other->bound_distance_);
  std::swap(crossable_level_, other->crossable_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointwiseFeature_BoundRelatedFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPointwiseFeature_BoundRelatedFeature_descriptor_;
  metadata.reflection = PathPointwiseFeature_BoundRelatedFeature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointwiseFeature::kLFieldNumber;
const int PathPointwiseFeature::kDlFieldNumber;
const int PathPointwiseFeature::kDdlFieldNumber;
const int PathPointwiseFeature::kKappaFieldNumber;
const int PathPointwiseFeature::kObstacleInfoFieldNumber;
const int PathPointwiseFeature::kLeftBoundFeatureFieldNumber;
const int PathPointwiseFeature::kRightBoundFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointwiseFeature::PathPointwiseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature)
}

void PathPointwiseFeature::InitAsDefaultInstance() {
  left_bound_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(&::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::default_instance());
  right_bound_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(&::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::default_instance());
}

PathPointwiseFeature::PathPointwiseFeature(const PathPointwiseFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature)
}

void PathPointwiseFeature::SharedCtor() {
  _cached_size_ = 0;
  l_ = 0;
  dl_ = 0;
  ddl_ = 0;
  kappa_ = 0;
  left_bound_feature_ = NULL;
  right_bound_feature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPointwiseFeature::~PathPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature)
  SharedDtor();
}

void PathPointwiseFeature::SharedDtor() {
  if (this != default_instance_) {
    delete left_bound_feature_;
    delete right_bound_feature_;
  }
}

void PathPointwiseFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointwiseFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPointwiseFeature_descriptor_;
}

const PathPointwiseFeature& PathPointwiseFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  return *default_instance_;
}

PathPointwiseFeature* PathPointwiseFeature::default_instance_ = NULL;

PathPointwiseFeature* PathPointwiseFeature::New(::google::protobuf::Arena* arena) const {
  PathPointwiseFeature* n = new PathPointwiseFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathPointwiseFeature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathPointwiseFeature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 111u) {
    ZR_(l_, kappa_);
    if (has_left_bound_feature()) {
      if (left_bound_feature_ != NULL) left_bound_feature_->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::Clear();
    }
    if (has_right_bound_feature()) {
      if (right_bound_feature_ != NULL) right_bound_feature_->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  obstacle_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathPointwiseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointwiseFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double l = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_dl;
        break;
      }

      // optional double dl = 2;
      case 2: {
        if (tag == 17) {
         parse_dl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_)));
          set_has_dl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ddl;
        break;
      }

      // optional double ddl = 3;
      case 3: {
        if (tag == 25) {
         parse_ddl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_)));
          set_has_ddl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_kappa;
        break;
      }

      // optional double kappa = 4;
      case 4: {
        if (tag == 33) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
          set_has_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_obstacle_info;
        break;
      }

      // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
      case 5: {
        if (tag == 42) {
         parse_obstacle_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_obstacle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_obstacle_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_obstacle_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_left_bound_feature;
        break;
      }

      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
      case 6: {
        if (tag == 50) {
         parse_left_bound_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_bound_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_right_bound_feature;
        break;
      }

      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
      case 7: {
        if (tag == 58) {
         parse_right_bound_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_bound_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointwiseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointwiseFeature)
  return false;
#undef DO_
}

void PathPointwiseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointwiseFeature)
  // optional double l = 1;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->l(), output);
  }

  // optional double dl = 2;
  if (has_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dl(), output);
  }

  // optional double ddl = 3;
  if (has_ddl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ddl(), output);
  }

  // optional double kappa = 4;
  if (has_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->kappa(), output);
  }

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  for (unsigned int i = 0, n = this->obstacle_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->obstacle_info(i), output);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
  if (has_left_bound_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->left_bound_feature_, output);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
  if (has_right_bound_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->right_bound_feature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointwiseFeature)
}

::google::protobuf::uint8* PathPointwiseFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature)
  // optional double l = 1;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->l(), target);
  }

  // optional double dl = 2;
  if (has_dl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dl(), target);
  }

  // optional double ddl = 3;
  if (has_ddl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ddl(), target);
  }

  // optional double kappa = 4;
  if (has_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->kappa(), target);
  }

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  for (unsigned int i = 0, n = this->obstacle_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->obstacle_info(i), false, target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
  if (has_left_bound_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->left_bound_feature_, false, target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
  if (has_right_bound_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->right_bound_feature_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature)
  return target;
}

int PathPointwiseFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 111u) {
    // optional double l = 1;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double dl = 2;
    if (has_dl()) {
      total_size += 1 + 8;
    }

    // optional double ddl = 3;
    if (has_ddl()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 4;
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
    if (has_left_bound_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_bound_feature_);
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
    if (has_right_bound_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_bound_feature_);
    }

  }
  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  total_size += 1 * this->obstacle_info_size();
  for (int i = 0; i < this->obstacle_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacle_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointwiseFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPointwiseFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointwiseFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature::MergeFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  obstacle_info_.MergeFrom(from.obstacle_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_l()) {
      set_l(from.l());
    }
    if (from.has_dl()) {
      set_dl(from.dl());
    }
    if (from.has_ddl()) {
      set_ddl(from.ddl());
    }
    if (from.has_kappa()) {
      set_kappa(from.kappa());
    }
    if (from.has_left_bound_feature()) {
      mutable_left_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from.left_bound_feature());
    }
    if (from.has_right_bound_feature()) {
      mutable_right_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from.right_bound_feature());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathPointwiseFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature::CopyFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature::IsInitialized() const {

  return true;
}

void PathPointwiseFeature::Swap(PathPointwiseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointwiseFeature::InternalSwap(PathPointwiseFeature* other) {
  std::swap(l_, other->l_);
  std::swap(dl_, other->dl_);
  std::swap(ddl_, other->ddl_);
  std::swap(kappa_, other->kappa_);
  obstacle_info_.UnsafeArenaSwap(&other->obstacle_info_);
  std::swap(left_bound_feature_, other->left_bound_feature_);
  std::swap(right_bound_feature_, other->right_bound_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointwiseFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPointwiseFeature_descriptor_;
  metadata.reflection = PathPointwiseFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPointwiseFeature_ObstacleFeature

// optional double lateral_distance = 1;
bool PathPointwiseFeature_ObstacleFeature::has_lateral_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPointwiseFeature_ObstacleFeature::set_has_lateral_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPointwiseFeature_ObstacleFeature::clear_has_lateral_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPointwiseFeature_ObstacleFeature::clear_lateral_distance() {
  lateral_distance_ = 0;
  clear_has_lateral_distance();
}
 double PathPointwiseFeature_ObstacleFeature::lateral_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.lateral_distance)
  return lateral_distance_;
}
 void PathPointwiseFeature_ObstacleFeature::set_lateral_distance(double value) {
  set_has_lateral_distance();
  lateral_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.lateral_distance)
}

// -------------------------------------------------------------------

// PathPointwiseFeature_BoundRelatedFeature

// optional double bound_distance = 1;
bool PathPointwiseFeature_BoundRelatedFeature::has_bound_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPointwiseFeature_BoundRelatedFeature::set_has_bound_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPointwiseFeature_BoundRelatedFeature::clear_has_bound_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPointwiseFeature_BoundRelatedFeature::clear_bound_distance() {
  bound_distance_ = 0;
  clear_has_bound_distance();
}
 double PathPointwiseFeature_BoundRelatedFeature::bound_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.bound_distance)
  return bound_distance_;
}
 void PathPointwiseFeature_BoundRelatedFeature::set_bound_distance(double value) {
  set_has_bound_distance();
  bound_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.bound_distance)
}

// optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
bool PathPointwiseFeature_BoundRelatedFeature::has_crossable_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathPointwiseFeature_BoundRelatedFeature::set_has_crossable_level() {
  _has_bits_[0] |= 0x00000002u;
}
void PathPointwiseFeature_BoundRelatedFeature::clear_has_crossable_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathPointwiseFeature_BoundRelatedFeature::clear_crossable_level() {
  crossable_level_ = 0;
  clear_has_crossable_level();
}
 ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::crossable_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.crossable_level)
  return static_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel >(crossable_level_);
}
 void PathPointwiseFeature_BoundRelatedFeature::set_crossable_level(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel value) {
  assert(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(value));
  set_has_crossable_level();
  crossable_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.crossable_level)
}

// -------------------------------------------------------------------

// PathPointwiseFeature

// optional double l = 1;
bool PathPointwiseFeature::has_l() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPointwiseFeature::set_has_l() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPointwiseFeature::clear_has_l() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPointwiseFeature::clear_l() {
  l_ = 0;
  clear_has_l();
}
 double PathPointwiseFeature::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.l)
  return l_;
}
 void PathPointwiseFeature::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.l)
}

// optional double dl = 2;
bool PathPointwiseFeature::has_dl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathPointwiseFeature::set_has_dl() {
  _has_bits_[0] |= 0x00000002u;
}
void PathPointwiseFeature::clear_has_dl() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathPointwiseFeature::clear_dl() {
  dl_ = 0;
  clear_has_dl();
}
 double PathPointwiseFeature::dl() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.dl)
  return dl_;
}
 void PathPointwiseFeature::set_dl(double value) {
  set_has_dl();
  dl_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.dl)
}

// optional double ddl = 3;
bool PathPointwiseFeature::has_ddl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathPointwiseFeature::set_has_ddl() {
  _has_bits_[0] |= 0x00000004u;
}
void PathPointwiseFeature::clear_has_ddl() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathPointwiseFeature::clear_ddl() {
  ddl_ = 0;
  clear_has_ddl();
}
 double PathPointwiseFeature::ddl() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.ddl)
  return ddl_;
}
 void PathPointwiseFeature::set_ddl(double value) {
  set_has_ddl();
  ddl_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.ddl)
}

// optional double kappa = 4;
bool PathPointwiseFeature::has_kappa() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PathPointwiseFeature::set_has_kappa() {
  _has_bits_[0] |= 0x00000008u;
}
void PathPointwiseFeature::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000008u;
}
void PathPointwiseFeature::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
 double PathPointwiseFeature::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.kappa)
  return kappa_;
}
 void PathPointwiseFeature::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.kappa)
}

// repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
int PathPointwiseFeature::obstacle_info_size() const {
  return obstacle_info_.size();
}
void PathPointwiseFeature::clear_obstacle_info() {
  obstacle_info_.Clear();
}
const ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature& PathPointwiseFeature::obstacle_info(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_.Get(index);
}
::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* PathPointwiseFeature::mutable_obstacle_info(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_.Mutable(index);
}
::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* PathPointwiseFeature::add_obstacle_info() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >*
PathPointwiseFeature::mutable_obstacle_info() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return &obstacle_info_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >&
PathPointwiseFeature::obstacle_info() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_;
}

// optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
bool PathPointwiseFeature::has_left_bound_feature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PathPointwiseFeature::set_has_left_bound_feature() {
  _has_bits_[0] |= 0x00000020u;
}
void PathPointwiseFeature::clear_has_left_bound_feature() {
  _has_bits_[0] &= ~0x00000020u;
}
void PathPointwiseFeature::clear_left_bound_feature() {
  if (left_bound_feature_ != NULL) left_bound_feature_->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::Clear();
  clear_has_left_bound_feature();
}
const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature::left_bound_feature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
  return left_bound_feature_ != NULL ? *left_bound_feature_ : *default_instance_->left_bound_feature_;
}
::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::mutable_left_bound_feature() {
  set_has_left_bound_feature();
  if (left_bound_feature_ == NULL) {
    left_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
  return left_bound_feature_;
}
::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::release_left_bound_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
  clear_has_left_bound_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* temp = left_bound_feature_;
  left_bound_feature_ = NULL;
  return temp;
}
void PathPointwiseFeature::set_allocated_left_bound_feature(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* left_bound_feature) {
  delete left_bound_feature_;
  left_bound_feature_ = left_bound_feature;
  if (left_bound_feature) {
    set_has_left_bound_feature();
  } else {
    clear_has_left_bound_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
}

// optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
bool PathPointwiseFeature::has_right_bound_feature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PathPointwiseFeature::set_has_right_bound_feature() {
  _has_bits_[0] |= 0x00000040u;
}
void PathPointwiseFeature::clear_has_right_bound_feature() {
  _has_bits_[0] &= ~0x00000040u;
}
void PathPointwiseFeature::clear_right_bound_feature() {
  if (right_bound_feature_ != NULL) right_bound_feature_->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::Clear();
  clear_has_right_bound_feature();
}
const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature::right_bound_feature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
  return right_bound_feature_ != NULL ? *right_bound_feature_ : *default_instance_->right_bound_feature_;
}
::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::mutable_right_bound_feature() {
  set_has_right_bound_feature();
  if (right_bound_feature_ == NULL) {
    right_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
  return right_bound_feature_;
}
::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::release_right_bound_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
  clear_has_right_bound_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* temp = right_bound_feature_;
  right_bound_feature_ = NULL;
  return temp;
}
void PathPointwiseFeature::set_allocated_right_bound_feature(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* right_bound_feature) {
  delete right_bound_feature_;
  right_bound_feature_ = right_bound_feature;
  if (right_bound_feature) {
    set_has_right_bound_feature();
  } else {
    clear_has_right_bound_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointwiseFeature_ObstacleFeature::kLongitudinalDistanceFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kObstacleSpeedFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kLateralDistanceFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kProbabilityFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kRelativeVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}

void SpeedPointwiseFeature_ObstacleFeature::InitAsDefaultInstance() {
}

SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature(const SpeedPointwiseFeature_ObstacleFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}

void SpeedPointwiseFeature_ObstacleFeature::SharedCtor() {
  _cached_size_ = 0;
  longitudinal_distance_ = 0;
  obstacle_speed_ = 0;
  lateral_distance_ = 10;
  probability_ = 0;
  relative_v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedPointwiseFeature_ObstacleFeature::~SpeedPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  SharedDtor();
}

void SpeedPointwiseFeature_ObstacleFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPointwiseFeature_ObstacleFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPointwiseFeature_ObstacleFeature_descriptor_;
}

const SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature_ObstacleFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  return *default_instance_;
}

SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature_ObstacleFeature::default_instance_ = NULL;

SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature_ObstacleFeature::New(::google::protobuf::Arena* arena) const {
  SpeedPointwiseFeature_ObstacleFeature* n = new SpeedPointwiseFeature_ObstacleFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpeedPointwiseFeature_ObstacleFeature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpeedPointwiseFeature_ObstacleFeature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(longitudinal_distance_, obstacle_speed_);
    ZR_(probability_, relative_v_);
    lateral_distance_ = 10;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpeedPointwiseFeature_ObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitudinal_distance = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_distance_)));
          set_has_longitudinal_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_obstacle_speed;
        break;
      }

      // optional double obstacle_speed = 2;
      case 2: {
        if (tag == 17) {
         parse_obstacle_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_speed_)));
          set_has_obstacle_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lateral_distance;
        break;
      }

      // optional double lateral_distance = 3 [default = 10];
      case 3: {
        if (tag == 25) {
         parse_lateral_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_distance_)));
          set_has_lateral_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_probability;
        break;
      }

      // optional double probability = 4;
      case 4: {
        if (tag == 33) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_relative_v;
        break;
      }

      // optional double relative_v = 5;
      case 5: {
        if (tag == 41) {
         parse_relative_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_v_)));
          set_has_relative_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return false;
#undef DO_
}

void SpeedPointwiseFeature_ObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  // optional double longitudinal_distance = 1;
  if (has_longitudinal_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitudinal_distance(), output);
  }

  // optional double obstacle_speed = 2;
  if (has_obstacle_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->obstacle_speed(), output);
  }

  // optional double lateral_distance = 3 [default = 10];
  if (has_lateral_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lateral_distance(), output);
  }

  // optional double probability = 4;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->probability(), output);
  }

  // optional double relative_v = 5;
  if (has_relative_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}

::google::protobuf::uint8* SpeedPointwiseFeature_ObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  // optional double longitudinal_distance = 1;
  if (has_longitudinal_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitudinal_distance(), target);
  }

  // optional double obstacle_speed = 2;
  if (has_obstacle_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->obstacle_speed(), target);
  }

  // optional double lateral_distance = 3 [default = 10];
  if (has_lateral_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lateral_distance(), target);
  }

  // optional double probability = 4;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->probability(), target);
  }

  // optional double relative_v = 5;
  if (has_relative_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return target;
}

int SpeedPointwiseFeature_ObstacleFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double longitudinal_distance = 1;
    if (has_longitudinal_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_speed = 2;
    if (has_obstacle_speed()) {
      total_size += 1 + 8;
    }

    // optional double lateral_distance = 3 [default = 10];
    if (has_lateral_distance()) {
      total_size += 1 + 8;
    }

    // optional double probability = 4;
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 5;
    if (has_relative_v()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPointwiseFeature_ObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeedPointwiseFeature_ObstacleFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointwiseFeature_ObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
    MergeFrom(*source);
  }
}

void SpeedPointwiseFeature_ObstacleFeature::MergeFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitudinal_distance()) {
      set_longitudinal_distance(from.longitudinal_distance());
    }
    if (from.has_obstacle_speed()) {
      set_obstacle_speed(from.obstacle_speed());
    }
    if (from.has_lateral_distance()) {
      set_lateral_distance(from.lateral_distance());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_relative_v()) {
      set_relative_v(from.relative_v());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpeedPointwiseFeature_ObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointwiseFeature_ObstacleFeature::CopyFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature_ObstacleFeature::IsInitialized() const {

  return true;
}

void SpeedPointwiseFeature_ObstacleFeature::Swap(SpeedPointwiseFeature_ObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointwiseFeature_ObstacleFeature::InternalSwap(SpeedPointwiseFeature_ObstacleFeature* other) {
  std::swap(longitudinal_distance_, other->longitudinal_distance_);
  std::swap(obstacle_speed_, other->obstacle_speed_);
  std::swap(lateral_distance_, other->lateral_distance_);
  std::swap(probability_, other->probability_);
  std::swap(relative_v_, other->relative_v_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPointwiseFeature_ObstacleFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPointwiseFeature_ObstacleFeature_descriptor_;
  metadata.reflection = SpeedPointwiseFeature_ObstacleFeature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointwiseFeature::kSFieldNumber;
const int SpeedPointwiseFeature::kTFieldNumber;
const int SpeedPointwiseFeature::kVFieldNumber;
const int SpeedPointwiseFeature::kSpeedLimitFieldNumber;
const int SpeedPointwiseFeature::kAccFieldNumber;
const int SpeedPointwiseFeature::kJerkFieldNumber;
const int SpeedPointwiseFeature::kFollowObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kOvertakeObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kNudgeObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kStopObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kCollisionTimesFieldNumber;
const int SpeedPointwiseFeature::kVirtualObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kLateralAccFieldNumber;
const int SpeedPointwiseFeature::kPathCurvatureAbsFieldNumber;
const int SpeedPointwiseFeature::kSidepassFrontObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kSidepassRearObsFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointwiseFeature::SpeedPointwiseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}

void SpeedPointwiseFeature::InitAsDefaultInstance() {
}

SpeedPointwiseFeature::SpeedPointwiseFeature(const SpeedPointwiseFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}

void SpeedPointwiseFeature::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  t_ = 0;
  v_ = 0;
  speed_limit_ = 0;
  acc_ = 0;
  jerk_ = 0;
  collision_times_ = 0;
  lateral_acc_ = 0;
  path_curvature_abs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedPointwiseFeature::~SpeedPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature)
  SharedDtor();
}

void SpeedPointwiseFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedPointwiseFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPointwiseFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPointwiseFeature_descriptor_;
}

const SpeedPointwiseFeature& SpeedPointwiseFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  return *default_instance_;
}

SpeedPointwiseFeature* SpeedPointwiseFeature::default_instance_ = NULL;

SpeedPointwiseFeature* SpeedPointwiseFeature::New(::google::protobuf::Arena* arena) const {
  SpeedPointwiseFeature* n = new SpeedPointwiseFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpeedPointwiseFeature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpeedPointwiseFeature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(s_, jerk_);
  }
  if (_has_bits_[8 / 32] & 13312u) {
    ZR_(lateral_acc_, path_curvature_abs_);
    collision_times_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  follow_obs_feature_.Clear();
  overtake_obs_feature_.Clear();
  nudge_obs_feature_.Clear();
  stop_obs_feature_.Clear();
  virtual_obs_feature_.Clear();
  sidepass_front_obs_feature_.Clear();
  sidepass_rear_obs_feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpeedPointwiseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t;
        break;
      }

      // optional double t = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_v;
        break;
      }

      // optional double v = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed_limit;
        break;
      }

      // optional double speed_limit = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
          set_has_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_acc;
        break;
      }

      // optional double acc = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_jerk;
        break;
      }

      // optional double jerk = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_jerk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_)));
          set_has_jerk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_follow_obs_feature;
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
      case 7: {
        if (tag == 58) {
         parse_follow_obs_feature:
          DO_(input->IncrementRecursionDepth());
         parse_loop_follow_obs_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_follow_obs_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_follow_obs_feature;
        if (input->ExpectTag(66)) goto parse_loop_overtake_obs_feature;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_overtake_obs_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_overtake_obs_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_overtake_obs_feature;
        if (input->ExpectTag(74)) goto parse_loop_nudge_obs_feature;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nudge_obs_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nudge_obs_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_nudge_obs_feature;
        if (input->ExpectTag(82)) goto parse_loop_stop_obs_feature;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_obs_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_obs_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_stop_obs_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_collision_times;
        break;
      }

      // optional int32 collision_times = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_collision_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collision_times_)));
          set_has_collision_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_virtual_obs_feature;
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
      case 12: {
        if (tag == 98) {
         parse_virtual_obs_feature:
          DO_(input->IncrementRecursionDepth());
         parse_loop_virtual_obs_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_virtual_obs_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_virtual_obs_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(105)) goto parse_lateral_acc;
        break;
      }

      // optional double lateral_acc = 13 [default = 0];
      case 13: {
        if (tag == 105) {
         parse_lateral_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_acc_)));
          set_has_lateral_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_path_curvature_abs;
        break;
      }

      // optional double path_curvature_abs = 14 [default = 0];
      case 14: {
        if (tag == 113) {
         parse_path_curvature_abs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_curvature_abs_)));
          set_has_path_curvature_abs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_sidepass_front_obs_feature;
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
      case 15: {
        if (tag == 122) {
         parse_sidepass_front_obs_feature:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sidepass_front_obs_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sidepass_front_obs_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_sidepass_front_obs_feature;
        if (input->ExpectTag(130)) goto parse_loop_sidepass_rear_obs_feature;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sidepass_rear_obs_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sidepass_rear_obs_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_sidepass_rear_obs_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointwiseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointwiseFeature)
  return false;
#undef DO_
}

void SpeedPointwiseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  // optional double s = 1 [default = 0];
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2 [default = 0];
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3 [default = 0];
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double speed_limit = 4 [default = 0];
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_limit(), output);
  }

  // optional double acc = 5 [default = 0];
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acc(), output);
  }

  // optional double jerk = 6 [default = 0];
  if (has_jerk()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->jerk(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  for (unsigned int i = 0, n = this->follow_obs_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->follow_obs_feature(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  for (unsigned int i = 0, n = this->overtake_obs_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->overtake_obs_feature(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  for (unsigned int i = 0, n = this->nudge_obs_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->nudge_obs_feature(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  for (unsigned int i = 0, n = this->stop_obs_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stop_obs_feature(i), output);
  }

  // optional int32 collision_times = 11 [default = 0];
  if (has_collision_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->collision_times(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  for (unsigned int i = 0, n = this->virtual_obs_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->virtual_obs_feature(i), output);
  }

  // optional double lateral_acc = 13 [default = 0];
  if (has_lateral_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lateral_acc(), output);
  }

  // optional double path_curvature_abs = 14 [default = 0];
  if (has_path_curvature_abs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->path_curvature_abs(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  for (unsigned int i = 0, n = this->sidepass_front_obs_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sidepass_front_obs_feature(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  for (unsigned int i = 0, n = this->sidepass_rear_obs_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sidepass_rear_obs_feature(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointwiseFeature)
}

::google::protobuf::uint8* SpeedPointwiseFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  // optional double s = 1 [default = 0];
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2 [default = 0];
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3 [default = 0];
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double speed_limit = 4 [default = 0];
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_limit(), target);
  }

  // optional double acc = 5 [default = 0];
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acc(), target);
  }

  // optional double jerk = 6 [default = 0];
  if (has_jerk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->jerk(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  for (unsigned int i = 0, n = this->follow_obs_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->follow_obs_feature(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  for (unsigned int i = 0, n = this->overtake_obs_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->overtake_obs_feature(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  for (unsigned int i = 0, n = this->nudge_obs_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->nudge_obs_feature(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  for (unsigned int i = 0, n = this->stop_obs_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->stop_obs_feature(i), false, target);
  }

  // optional int32 collision_times = 11 [default = 0];
  if (has_collision_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->collision_times(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  for (unsigned int i = 0, n = this->virtual_obs_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->virtual_obs_feature(i), false, target);
  }

  // optional double lateral_acc = 13 [default = 0];
  if (has_lateral_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lateral_acc(), target);
  }

  // optional double path_curvature_abs = 14 [default = 0];
  if (has_path_curvature_abs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->path_curvature_abs(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  for (unsigned int i = 0, n = this->sidepass_front_obs_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->sidepass_front_obs_feature(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  for (unsigned int i = 0, n = this->sidepass_rear_obs_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->sidepass_rear_obs_feature(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature)
  return target;
}

int SpeedPointwiseFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double s = 1 [default = 0];
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2 [default = 0];
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3 [default = 0];
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4 [default = 0];
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional double acc = 5 [default = 0];
    if (has_acc()) {
      total_size += 1 + 8;
    }

    // optional double jerk = 6 [default = 0];
    if (has_jerk()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[10 / 32] & 13312u) {
    // optional int32 collision_times = 11 [default = 0];
    if (has_collision_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collision_times());
    }

    // optional double lateral_acc = 13 [default = 0];
    if (has_lateral_acc()) {
      total_size += 1 + 8;
    }

    // optional double path_curvature_abs = 14 [default = 0];
    if (has_path_curvature_abs()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  total_size += 1 * this->follow_obs_feature_size();
  for (int i = 0; i < this->follow_obs_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->follow_obs_feature(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  total_size += 1 * this->overtake_obs_feature_size();
  for (int i = 0; i < this->overtake_obs_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->overtake_obs_feature(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  total_size += 1 * this->nudge_obs_feature_size();
  for (int i = 0; i < this->nudge_obs_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nudge_obs_feature(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  total_size += 1 * this->stop_obs_feature_size();
  for (int i = 0; i < this->stop_obs_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_obs_feature(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  total_size += 1 * this->virtual_obs_feature_size();
  for (int i = 0; i < this->virtual_obs_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtual_obs_feature(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  total_size += 1 * this->sidepass_front_obs_feature_size();
  for (int i = 0; i < this->sidepass_front_obs_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidepass_front_obs_feature(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  total_size += 2 * this->sidepass_rear_obs_feature_size();
  for (int i = 0; i < this->sidepass_rear_obs_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidepass_rear_obs_feature(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPointwiseFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeedPointwiseFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointwiseFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointwiseFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointwiseFeature)
    MergeFrom(*source);
  }
}

void SpeedPointwiseFeature::MergeFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  follow_obs_feature_.MergeFrom(from.follow_obs_feature_);
  overtake_obs_feature_.MergeFrom(from.overtake_obs_feature_);
  nudge_obs_feature_.MergeFrom(from.nudge_obs_feature_);
  stop_obs_feature_.MergeFrom(from.stop_obs_feature_);
  virtual_obs_feature_.MergeFrom(from.virtual_obs_feature_);
  sidepass_front_obs_feature_.MergeFrom(from.sidepass_front_obs_feature_);
  sidepass_rear_obs_feature_.MergeFrom(from.sidepass_rear_obs_feature_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_speed_limit()) {
      set_speed_limit(from.speed_limit());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_jerk()) {
      set_jerk(from.jerk());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_collision_times()) {
      set_collision_times(from.collision_times());
    }
    if (from.has_lateral_acc()) {
      set_lateral_acc(from.lateral_acc());
    }
    if (from.has_path_curvature_abs()) {
      set_path_curvature_abs(from.path_curvature_abs());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpeedPointwiseFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointwiseFeature::CopyFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature::IsInitialized() const {

  return true;
}

void SpeedPointwiseFeature::Swap(SpeedPointwiseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointwiseFeature::InternalSwap(SpeedPointwiseFeature* other) {
  std::swap(s_, other->s_);
  std::swap(t_, other->t_);
  std::swap(v_, other->v_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(acc_, other->acc_);
  std::swap(jerk_, other->jerk_);
  follow_obs_feature_.UnsafeArenaSwap(&other->follow_obs_feature_);
  overtake_obs_feature_.UnsafeArenaSwap(&other->overtake_obs_feature_);
  nudge_obs_feature_.UnsafeArenaSwap(&other->nudge_obs_feature_);
  stop_obs_feature_.UnsafeArenaSwap(&other->stop_obs_feature_);
  std::swap(collision_times_, other->collision_times_);
  virtual_obs_feature_.UnsafeArenaSwap(&other->virtual_obs_feature_);
  std::swap(lateral_acc_, other->lateral_acc_);
  std::swap(path_curvature_abs_, other->path_curvature_abs_);
  sidepass_front_obs_feature_.UnsafeArenaSwap(&other->sidepass_front_obs_feature_);
  sidepass_rear_obs_feature_.UnsafeArenaSwap(&other->sidepass_rear_obs_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPointwiseFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPointwiseFeature_descriptor_;
  metadata.reflection = SpeedPointwiseFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPointwiseFeature_ObstacleFeature

// optional double longitudinal_distance = 1;
bool SpeedPointwiseFeature_ObstacleFeature::has_longitudinal_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPointwiseFeature_ObstacleFeature::set_has_longitudinal_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_has_longitudinal_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_longitudinal_distance() {
  longitudinal_distance_ = 0;
  clear_has_longitudinal_distance();
}
 double SpeedPointwiseFeature_ObstacleFeature::longitudinal_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.longitudinal_distance)
  return longitudinal_distance_;
}
 void SpeedPointwiseFeature_ObstacleFeature::set_longitudinal_distance(double value) {
  set_has_longitudinal_distance();
  longitudinal_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.longitudinal_distance)
}

// optional double obstacle_speed = 2;
bool SpeedPointwiseFeature_ObstacleFeature::has_obstacle_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPointwiseFeature_ObstacleFeature::set_has_obstacle_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_has_obstacle_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_obstacle_speed() {
  obstacle_speed_ = 0;
  clear_has_obstacle_speed();
}
 double SpeedPointwiseFeature_ObstacleFeature::obstacle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.obstacle_speed)
  return obstacle_speed_;
}
 void SpeedPointwiseFeature_ObstacleFeature::set_obstacle_speed(double value) {
  set_has_obstacle_speed();
  obstacle_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.obstacle_speed)
}

// optional double lateral_distance = 3 [default = 10];
bool SpeedPointwiseFeature_ObstacleFeature::has_lateral_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPointwiseFeature_ObstacleFeature::set_has_lateral_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_has_lateral_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_lateral_distance() {
  lateral_distance_ = 10;
  clear_has_lateral_distance();
}
 double SpeedPointwiseFeature_ObstacleFeature::lateral_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.lateral_distance)
  return lateral_distance_;
}
 void SpeedPointwiseFeature_ObstacleFeature::set_lateral_distance(double value) {
  set_has_lateral_distance();
  lateral_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.lateral_distance)
}

// optional double probability = 4;
bool SpeedPointwiseFeature_ObstacleFeature::has_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPointwiseFeature_ObstacleFeature::set_has_probability() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_has_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double SpeedPointwiseFeature_ObstacleFeature::probability() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.probability)
  return probability_;
}
 void SpeedPointwiseFeature_ObstacleFeature::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.probability)
}

// optional double relative_v = 5;
bool SpeedPointwiseFeature_ObstacleFeature::has_relative_v() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPointwiseFeature_ObstacleFeature::set_has_relative_v() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_has_relative_v() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPointwiseFeature_ObstacleFeature::clear_relative_v() {
  relative_v_ = 0;
  clear_has_relative_v();
}
 double SpeedPointwiseFeature_ObstacleFeature::relative_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.relative_v)
  return relative_v_;
}
 void SpeedPointwiseFeature_ObstacleFeature::set_relative_v(double value) {
  set_has_relative_v();
  relative_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.relative_v)
}

// -------------------------------------------------------------------

// SpeedPointwiseFeature

// optional double s = 1 [default = 0];
bool SpeedPointwiseFeature::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPointwiseFeature::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPointwiseFeature::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPointwiseFeature::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double SpeedPointwiseFeature::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.s)
  return s_;
}
 void SpeedPointwiseFeature::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.s)
}

// optional double t = 2 [default = 0];
bool SpeedPointwiseFeature::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPointwiseFeature::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPointwiseFeature::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPointwiseFeature::clear_t() {
  t_ = 0;
  clear_has_t();
}
 double SpeedPointwiseFeature::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.t)
  return t_;
}
 void SpeedPointwiseFeature::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.t)
}

// optional double v = 3 [default = 0];
bool SpeedPointwiseFeature::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPointwiseFeature::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPointwiseFeature::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPointwiseFeature::clear_v() {
  v_ = 0;
  clear_has_v();
}
 double SpeedPointwiseFeature::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.v)
  return v_;
}
 void SpeedPointwiseFeature::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.v)
}

// optional double speed_limit = 4 [default = 0];
bool SpeedPointwiseFeature::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPointwiseFeature::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPointwiseFeature::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPointwiseFeature::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
 double SpeedPointwiseFeature::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.speed_limit)
  return speed_limit_;
}
 void SpeedPointwiseFeature::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.speed_limit)
}

// optional double acc = 5 [default = 0];
bool SpeedPointwiseFeature::has_acc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPointwiseFeature::set_has_acc() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPointwiseFeature::clear_has_acc() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPointwiseFeature::clear_acc() {
  acc_ = 0;
  clear_has_acc();
}
 double SpeedPointwiseFeature::acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.acc)
  return acc_;
}
 void SpeedPointwiseFeature::set_acc(double value) {
  set_has_acc();
  acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.acc)
}

// optional double jerk = 6 [default = 0];
bool SpeedPointwiseFeature::has_jerk() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpeedPointwiseFeature::set_has_jerk() {
  _has_bits_[0] |= 0x00000020u;
}
void SpeedPointwiseFeature::clear_has_jerk() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpeedPointwiseFeature::clear_jerk() {
  jerk_ = 0;
  clear_has_jerk();
}
 double SpeedPointwiseFeature::jerk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.jerk)
  return jerk_;
}
 void SpeedPointwiseFeature::set_jerk(double value) {
  set_has_jerk();
  jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.jerk)
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
int SpeedPointwiseFeature::follow_obs_feature_size() const {
  return follow_obs_feature_.size();
}
void SpeedPointwiseFeature::clear_follow_obs_feature() {
  follow_obs_feature_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::follow_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_.Get(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_follow_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_follow_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_follow_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return &follow_obs_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::follow_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
int SpeedPointwiseFeature::overtake_obs_feature_size() const {
  return overtake_obs_feature_.size();
}
void SpeedPointwiseFeature::clear_overtake_obs_feature() {
  overtake_obs_feature_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::overtake_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_.Get(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_overtake_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_overtake_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_overtake_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return &overtake_obs_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::overtake_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
int SpeedPointwiseFeature::nudge_obs_feature_size() const {
  return nudge_obs_feature_.size();
}
void SpeedPointwiseFeature::clear_nudge_obs_feature() {
  nudge_obs_feature_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::nudge_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_.Get(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_nudge_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_nudge_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_nudge_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return &nudge_obs_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::nudge_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
int SpeedPointwiseFeature::stop_obs_feature_size() const {
  return stop_obs_feature_.size();
}
void SpeedPointwiseFeature::clear_stop_obs_feature() {
  stop_obs_feature_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::stop_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_.Get(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_stop_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_stop_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_stop_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return &stop_obs_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::stop_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_;
}

// optional int32 collision_times = 11 [default = 0];
bool SpeedPointwiseFeature::has_collision_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SpeedPointwiseFeature::set_has_collision_times() {
  _has_bits_[0] |= 0x00000400u;
}
void SpeedPointwiseFeature::clear_has_collision_times() {
  _has_bits_[0] &= ~0x00000400u;
}
void SpeedPointwiseFeature::clear_collision_times() {
  collision_times_ = 0;
  clear_has_collision_times();
}
 ::google::protobuf::int32 SpeedPointwiseFeature::collision_times() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.collision_times)
  return collision_times_;
}
 void SpeedPointwiseFeature::set_collision_times(::google::protobuf::int32 value) {
  set_has_collision_times();
  collision_times_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.collision_times)
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
int SpeedPointwiseFeature::virtual_obs_feature_size() const {
  return virtual_obs_feature_.size();
}
void SpeedPointwiseFeature::clear_virtual_obs_feature() {
  virtual_obs_feature_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::virtual_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_.Get(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_virtual_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_virtual_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_virtual_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return &virtual_obs_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::virtual_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_;
}

// optional double lateral_acc = 13 [default = 0];
bool SpeedPointwiseFeature::has_lateral_acc() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SpeedPointwiseFeature::set_has_lateral_acc() {
  _has_bits_[0] |= 0x00001000u;
}
void SpeedPointwiseFeature::clear_has_lateral_acc() {
  _has_bits_[0] &= ~0x00001000u;
}
void SpeedPointwiseFeature::clear_lateral_acc() {
  lateral_acc_ = 0;
  clear_has_lateral_acc();
}
 double SpeedPointwiseFeature::lateral_acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.lateral_acc)
  return lateral_acc_;
}
 void SpeedPointwiseFeature::set_lateral_acc(double value) {
  set_has_lateral_acc();
  lateral_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.lateral_acc)
}

// optional double path_curvature_abs = 14 [default = 0];
bool SpeedPointwiseFeature::has_path_curvature_abs() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SpeedPointwiseFeature::set_has_path_curvature_abs() {
  _has_bits_[0] |= 0x00002000u;
}
void SpeedPointwiseFeature::clear_has_path_curvature_abs() {
  _has_bits_[0] &= ~0x00002000u;
}
void SpeedPointwiseFeature::clear_path_curvature_abs() {
  path_curvature_abs_ = 0;
  clear_has_path_curvature_abs();
}
 double SpeedPointwiseFeature::path_curvature_abs() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.path_curvature_abs)
  return path_curvature_abs_;
}
 void SpeedPointwiseFeature::set_path_curvature_abs(double value) {
  set_has_path_curvature_abs();
  path_curvature_abs_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.path_curvature_abs)
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
int SpeedPointwiseFeature::sidepass_front_obs_feature_size() const {
  return sidepass_front_obs_feature_.size();
}
void SpeedPointwiseFeature::clear_sidepass_front_obs_feature() {
  sidepass_front_obs_feature_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::sidepass_front_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_.Get(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_sidepass_front_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_sidepass_front_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_sidepass_front_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return &sidepass_front_obs_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::sidepass_front_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
int SpeedPointwiseFeature::sidepass_rear_obs_feature_size() const {
  return sidepass_rear_obs_feature_.size();
}
void SpeedPointwiseFeature::clear_sidepass_rear_obs_feature() {
  sidepass_rear_obs_feature_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::sidepass_rear_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_.Get(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_sidepass_rear_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_sidepass_rear_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_sidepass_rear_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return &sidepass_rear_obs_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::sidepass_rear_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPointwiseFeature::kPathInputFeatureFieldNumber;
const int TrajectoryPointwiseFeature::kSpeedInputFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPointwiseFeature::TrajectoryPointwiseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}

void TrajectoryPointwiseFeature::InitAsDefaultInstance() {
  path_input_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature*>(&::apollo::planning::autotuning::PathPointwiseFeature::default_instance());
  speed_input_feature_ = const_cast< ::apollo::planning::autotuning::SpeedPointwiseFeature*>(&::apollo::planning::autotuning::SpeedPointwiseFeature::default_instance());
}

TrajectoryPointwiseFeature::TrajectoryPointwiseFeature(const TrajectoryPointwiseFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}

void TrajectoryPointwiseFeature::SharedCtor() {
  _cached_size_ = 0;
  path_input_feature_ = NULL;
  speed_input_feature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryPointwiseFeature::~TrajectoryPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  SharedDtor();
}

void TrajectoryPointwiseFeature::SharedDtor() {
  if (this != default_instance_) {
    delete path_input_feature_;
    delete speed_input_feature_;
  }
}

void TrajectoryPointwiseFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPointwiseFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryPointwiseFeature_descriptor_;
}

const TrajectoryPointwiseFeature& TrajectoryPointwiseFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  return *default_instance_;
}

TrajectoryPointwiseFeature* TrajectoryPointwiseFeature::default_instance_ = NULL;

TrajectoryPointwiseFeature* TrajectoryPointwiseFeature::New(::google::protobuf::Arena* arena) const {
  TrajectoryPointwiseFeature* n = new TrajectoryPointwiseFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path_input_feature()) {
      if (path_input_feature_ != NULL) path_input_feature_->::apollo::planning::autotuning::PathPointwiseFeature::Clear();
    }
    if (has_speed_input_feature()) {
      if (speed_input_feature_ != NULL) speed_input_feature_->::apollo::planning::autotuning::SpeedPointwiseFeature::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrajectoryPointwiseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_input_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_speed_input_feature;
        break;
      }

      // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
      case 2: {
        if (tag == 18) {
         parse_speed_input_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_input_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return false;
#undef DO_
}

void TrajectoryPointwiseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
  if (has_path_input_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_input_feature_, output);
  }

  // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
  if (has_speed_input_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->speed_input_feature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}

::google::protobuf::uint8* TrajectoryPointwiseFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
  if (has_path_input_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_input_feature_, false, target);
  }

  // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
  if (has_speed_input_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->speed_input_feature_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return target;
}

int TrajectoryPointwiseFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
    if (has_path_input_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_input_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
    if (has_speed_input_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speed_input_feature_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPointwiseFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryPointwiseFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPointwiseFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryPointwiseFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryPointwiseFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointwiseFeature::MergeFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_input_feature()) {
      mutable_path_input_feature()->::apollo::planning::autotuning::PathPointwiseFeature::MergeFrom(from.path_input_feature());
    }
    if (from.has_speed_input_feature()) {
      mutable_speed_input_feature()->::apollo::planning::autotuning::SpeedPointwiseFeature::MergeFrom(from.speed_input_feature());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrajectoryPointwiseFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointwiseFeature::CopyFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointwiseFeature::IsInitialized() const {

  return true;
}

void TrajectoryPointwiseFeature::Swap(TrajectoryPointwiseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPointwiseFeature::InternalSwap(TrajectoryPointwiseFeature* other) {
  std::swap(path_input_feature_, other->path_input_feature_);
  std::swap(speed_input_feature_, other->speed_input_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPointwiseFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryPointwiseFeature_descriptor_;
  metadata.reflection = TrajectoryPointwiseFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPointwiseFeature

// optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
bool TrajectoryPointwiseFeature::has_path_input_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPointwiseFeature::set_has_path_input_feature() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPointwiseFeature::clear_has_path_input_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPointwiseFeature::clear_path_input_feature() {
  if (path_input_feature_ != NULL) path_input_feature_->::apollo::planning::autotuning::PathPointwiseFeature::Clear();
  clear_has_path_input_feature();
}
const ::apollo::planning::autotuning::PathPointwiseFeature& TrajectoryPointwiseFeature::path_input_feature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
  return path_input_feature_ != NULL ? *path_input_feature_ : *default_instance_->path_input_feature_;
}
::apollo::planning::autotuning::PathPointwiseFeature* TrajectoryPointwiseFeature::mutable_path_input_feature() {
  set_has_path_input_feature();
  if (path_input_feature_ == NULL) {
    path_input_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
  return path_input_feature_;
}
::apollo::planning::autotuning::PathPointwiseFeature* TrajectoryPointwiseFeature::release_path_input_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
  clear_has_path_input_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature* temp = path_input_feature_;
  path_input_feature_ = NULL;
  return temp;
}
void TrajectoryPointwiseFeature::set_allocated_path_input_feature(::apollo::planning::autotuning::PathPointwiseFeature* path_input_feature) {
  delete path_input_feature_;
  path_input_feature_ = path_input_feature;
  if (path_input_feature) {
    set_has_path_input_feature();
  } else {
    clear_has_path_input_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
}

// optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
bool TrajectoryPointwiseFeature::has_speed_input_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPointwiseFeature::set_has_speed_input_feature() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPointwiseFeature::clear_has_speed_input_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPointwiseFeature::clear_speed_input_feature() {
  if (speed_input_feature_ != NULL) speed_input_feature_->::apollo::planning::autotuning::SpeedPointwiseFeature::Clear();
  clear_has_speed_input_feature();
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature& TrajectoryPointwiseFeature::speed_input_feature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
  return speed_input_feature_ != NULL ? *speed_input_feature_ : *default_instance_->speed_input_feature_;
}
::apollo::planning::autotuning::SpeedPointwiseFeature* TrajectoryPointwiseFeature::mutable_speed_input_feature() {
  set_has_speed_input_feature();
  if (speed_input_feature_ == NULL) {
    speed_input_feature_ = new ::apollo::planning::autotuning::SpeedPointwiseFeature;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
  return speed_input_feature_;
}
::apollo::planning::autotuning::SpeedPointwiseFeature* TrajectoryPointwiseFeature::release_speed_input_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
  clear_has_speed_input_feature();
  ::apollo::planning::autotuning::SpeedPointwiseFeature* temp = speed_input_feature_;
  speed_input_feature_ = NULL;
  return temp;
}
void TrajectoryPointwiseFeature::set_allocated_speed_input_feature(::apollo::planning::autotuning::SpeedPointwiseFeature* speed_input_feature) {
  delete speed_input_feature_;
  speed_input_feature_ = speed_input_feature;
  if (speed_input_feature) {
    set_has_speed_input_feature();
  } else {
    clear_has_speed_input_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryFeature::kPointFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryFeature::TrajectoryFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryFeature)
}

void TrajectoryFeature::InitAsDefaultInstance() {
}

TrajectoryFeature::TrajectoryFeature(const TrajectoryFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryFeature)
}

void TrajectoryFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryFeature::~TrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryFeature)
  SharedDtor();
}

void TrajectoryFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryFeature_descriptor_;
}

const TrajectoryFeature& TrajectoryFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fmodel_5finput_2eproto();
  return *default_instance_;
}

TrajectoryFeature* TrajectoryFeature::default_instance_ = NULL;

TrajectoryFeature* TrajectoryFeature::New(::google::protobuf::Arena* arena) const {
  TrajectoryFeature* n = new TrajectoryFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryFeature)
  point_feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrajectoryFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryFeature)
  return false;
#undef DO_
}

void TrajectoryFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryFeature)
  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  for (unsigned int i = 0, n = this->point_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point_feature(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryFeature)
}

::google::protobuf::uint8* TrajectoryFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryFeature)
  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  for (unsigned int i = 0, n = this->point_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point_feature(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryFeature)
  return target;
}

int TrajectoryFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryFeature)
  int total_size = 0;

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  total_size += 1 * this->point_feature_size();
  for (int i = 0; i < this->point_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_feature(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryFeature)
    MergeFrom(*source);
  }
}

void TrajectoryFeature::MergeFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_feature_.MergeFrom(from.point_feature_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrajectoryFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryFeature::CopyFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryFeature::IsInitialized() const {

  return true;
}

void TrajectoryFeature::Swap(TrajectoryFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryFeature::InternalSwap(TrajectoryFeature* other) {
  point_feature_.UnsafeArenaSwap(&other->point_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryFeature_descriptor_;
  metadata.reflection = TrajectoryFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryFeature

// repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
int TrajectoryFeature::point_feature_size() const {
  return point_feature_.size();
}
void TrajectoryFeature::clear_point_feature() {
  point_feature_.Clear();
}
const ::apollo::planning::autotuning::TrajectoryPointwiseFeature& TrajectoryFeature::point_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_.Get(index);
}
::apollo::planning::autotuning::TrajectoryPointwiseFeature* TrajectoryFeature::mutable_point_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_.Mutable(index);
}
::apollo::planning::autotuning::TrajectoryPointwiseFeature* TrajectoryFeature::add_point_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >*
TrajectoryFeature::mutable_point_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return &point_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >&
TrajectoryFeature::point_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace autotuning
}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
