// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dreamview/audio_capture.proto

#ifndef PROTOBUF_dreamview_2faudio_5fcapture_2eproto__INCLUDED
#define PROTOBUF_dreamview_2faudio_5fcapture_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace dreamview {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dreamview_2faudio_5fcapture_2eproto();
void protobuf_AssignDesc_dreamview_2faudio_5fcapture_2eproto();
void protobuf_ShutdownFile_dreamview_2faudio_5fcapture_2eproto();

class AudioCapture;

// ===================================================================

class AudioCapture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.AudioCapture) */ {
 public:
  AudioCapture();
  virtual ~AudioCapture();

  AudioCapture(const AudioCapture& from);

  inline AudioCapture& operator=(const AudioCapture& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioCapture& default_instance();

  void Swap(AudioCapture* other);

  // implements Message ----------------------------------------------

  inline AudioCapture* New() const { return New(NULL); }

  AudioCapture* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioCapture& from);
  void MergeFrom(const AudioCapture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioCapture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint64 connection_id() const;
  void set_connection_id(::google::protobuf::uint64 value);

  // optional bytes wav_stream = 2;
  bool has_wav_stream() const;
  void clear_wav_stream();
  static const int kWavStreamFieldNumber = 2;
  const ::std::string& wav_stream() const;
  void set_wav_stream(const ::std::string& value);
  void set_wav_stream(const char* value);
  void set_wav_stream(const void* value, size_t size);
  ::std::string* mutable_wav_stream();
  ::std::string* release_wav_stream();
  void set_allocated_wav_stream(::std::string* wav_stream);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.AudioCapture)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_wav_stream();
  inline void clear_has_wav_stream();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 connection_id_;
  ::google::protobuf::internal::ArenaStringPtr wav_stream_;
  friend void  protobuf_AddDesc_dreamview_2faudio_5fcapture_2eproto();
  friend void protobuf_AssignDesc_dreamview_2faudio_5fcapture_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2faudio_5fcapture_2eproto();

  void InitAsDefaultInstance();
  static AudioCapture* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioCapture

// optional uint64 connection_id = 1;
inline bool AudioCapture::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioCapture::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioCapture::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioCapture::clear_connection_id() {
  connection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_connection_id();
}
inline ::google::protobuf::uint64 AudioCapture::connection_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapture.connection_id)
  return connection_id_;
}
inline void AudioCapture::set_connection_id(::google::protobuf::uint64 value) {
  set_has_connection_id();
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapture.connection_id)
}

// optional bytes wav_stream = 2;
inline bool AudioCapture::has_wav_stream() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioCapture::set_has_wav_stream() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioCapture::clear_has_wav_stream() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioCapture::clear_wav_stream() {
  wav_stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wav_stream();
}
inline const ::std::string& AudioCapture::wav_stream() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapture.wav_stream)
  return wav_stream_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioCapture::set_wav_stream(const ::std::string& value) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapture.wav_stream)
}
inline void AudioCapture::set_wav_stream(const char* value) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.AudioCapture.wav_stream)
}
inline void AudioCapture::set_wav_stream(const void* value, size_t size) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.AudioCapture.wav_stream)
}
inline ::std::string* AudioCapture::mutable_wav_stream() {
  set_has_wav_stream();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.AudioCapture.wav_stream)
  return wav_stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioCapture::release_wav_stream() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.AudioCapture.wav_stream)
  clear_has_wav_stream();
  return wav_stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioCapture::set_allocated_wav_stream(::std::string* wav_stream) {
  if (wav_stream != NULL) {
    set_has_wav_stream();
  } else {
    clear_has_wav_stream();
  }
  wav_stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wav_stream);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.AudioCapture.wav_stream)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dreamview_2faudio_5fcapture_2eproto__INCLUDED
