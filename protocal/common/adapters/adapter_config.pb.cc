// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/adapters/adapter_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common/adapters/adapter_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {
namespace adapter {

namespace {

const ::google::protobuf::Descriptor* AdapterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdapterConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdapterConfig_MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdapterConfig_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AdapterManagerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdapterManagerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fadapters_2fadapter_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2fadapters_2fadapter_5fconfig_2eproto() {
  protobuf_AddDesc_common_2fadapters_2fadapter_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/adapters/adapter_config.proto");
  GOOGLE_CHECK(file != NULL);
  AdapterConfig_descriptor_ = file->message_type(0);
  static const int AdapterConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterConfig, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterConfig, message_history_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterConfig, latch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterConfig, topic_),
  };
  AdapterConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdapterConfig_descriptor_,
      AdapterConfig::default_instance_,
      AdapterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(AdapterConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterConfig, _internal_metadata_),
      -1);
  AdapterConfig_MessageType_descriptor_ = AdapterConfig_descriptor_->enum_type(0);
  AdapterConfig_Mode_descriptor_ = AdapterConfig_descriptor_->enum_type(1);
  AdapterManagerConfig_descriptor_ = file->message_type(1);
  static const int AdapterManagerConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterManagerConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterManagerConfig, is_ros_),
  };
  AdapterManagerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdapterManagerConfig_descriptor_,
      AdapterManagerConfig::default_instance_,
      AdapterManagerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterManagerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(AdapterManagerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdapterManagerConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fadapters_2fadapter_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdapterConfig_descriptor_, &AdapterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdapterManagerConfig_descriptor_, &AdapterManagerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fadapters_2fadapter_5fconfig_2eproto() {
  delete AdapterConfig::default_instance_;
  delete AdapterConfig_reflection_;
  delete AdapterManagerConfig::default_instance_;
  delete AdapterManagerConfig_reflection_;
}

void protobuf_AddDesc_common_2fadapters_2fadapter_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2fadapters_2fadapter_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$common/adapters/adapter_config.proto\022\025"
    "apollo.common.adapter\"\237\016\n\rAdapterConfig\022"
    ">\n\004type\030\001 \002(\01620.apollo.common.adapter.Ad"
    "apterConfig.MessageType\0227\n\004mode\030\002 \002(\0162)."
    "apollo.common.adapter.AdapterConfig.Mode"
    "\022!\n\025message_history_limit\030\003 \001(\005:\00210\022\024\n\005l"
    "atch\030\004 \001(\010:\005false\022\r\n\005topic\030\005 \001(\t\"\224\014\n\013Mes"
    "sageType\022\017\n\013POINT_CLOUD\020\001\022\025\n\021VLP16_POINT"
    "_CLOUD\020:\022\007\n\003GPS\020\002\022\007\n\003IMU\020\003\022\013\n\007CHASSIS\020\004\022"
    "\020\n\014LOCALIZATION\020\005\022\027\n\023PLANNING_TRAJECTORY"
    "\020\006\022\013\n\007MONITOR\020\007\022\007\n\003PAD\020\010\022\023\n\017CONTROL_COMM"
    "AND\020\t\022\016\n\nPREDICTION\020\n\022\030\n\024PERCEPTION_OBST"
    "ACLES\020\013\022\033\n\027TRAFFIC_LIGHT_DETECTION\020\014\022\022\n\016"
    "CHASSIS_DETAIL\020\r\022\020\n\010DECISION\020\016\032\002\010\001\022\n\n\006CA"
    "NBUS\020\017\022\023\n\017ROUTING_REQUEST\020\020\022\024\n\020ROUTING_R"
    "ESPONSE\020\021\022\025\n\021RELATIVE_ODOMETRY\020\022\022\014\n\010INS_"
    "STAT\020\023\022\023\n\013HMI_COMMAND\020\024\032\002\010\001\022\014\n\010MOBILEYE\020"
    "\025\022\r\n\tDELPHIESR\020\026\022\024\n\020COMPRESSED_IMAGE\020\027\022\021"
    "\n\rSYSTEM_STATUS\020\030\022\016\n\nINS_STATUS\020\031\022\017\n\013GNS"
    "S_STATUS\020\032\022\017\n\013CONTI_RADAR\020\033\022\017\n\013IMAGE_SHO"
    "RT\020\034\022\016\n\nIMAGE_LONG\020\035\022\017\n\013DRIVE_EVENT\020\036\022\020\n"
    "\014GNSS_RTK_OBS\020\037\022\020\n\014GNSS_RTK_EPH\020 \022\022\n\016GNS"
    "S_BEST_POSE\020!\022\031\n\025LOCALIZATION_MSF_GNSS\020\""
    "\022\032\n\026LOCALIZATION_MSF_LIDAR\020#\022\035\n\031LOCALIZA"
    "TION_MSF_SINS_PVA\020$\022\013\n\007RAW_IMU\020%\022\033\n\027LOCA"
    "LIZATION_MSF_STATUS\020&\022\017\n\013STATIC_INFO\020\'\022\020"
    "\n\014RELATIVE_MAP\020(\022\016\n\nNAVIGATION\020)\022\024\n\020ULTR"
    "ASONIC_RADAR\020*\022\021\n\rAUDIO_CAPTURE\020+\022\017\n\013IMA"
    "GE_FRONT\020-\022\027\n\023PANDORA_POINT_CLOUD\020.\022\036\n\032P"
    "ANDORA_CAMERA_FRONT_COLOR\020/\022\035\n\031PANDORA_C"
    "AMERA_RIGHT_GRAY\0200\022\034\n\030PANDORA_CAMERA_LEF"
    "T_GRAY\0201\022\035\n\031PANDORA_CAMERA_FRONT_GRAY\0202\022"
    "\034\n\030PANDORA_CAMERA_BACK_GRAY\0203\022\030\n\024PERCEPT"
    "ION_LANE_MASK\0204\022\014\n\010GUARDIAN\0205\022\021\n\rGNSS_RA"
    "W_DATA\0206\022\021\n\rSTREAM_STATUS\0207\022\020\n\014GNSS_HEAD"
    "ING\0208\022\r\n\tRTCM_DATA\0209\022\021\n\rRACOBIT_RADAR\020;\022"
    "\025\n\021POINT_CLOUD_DENSE\020<\022\031\n\025POINT_CLOUD_DE"
    "NSE_RAW\020=\022\027\n\023VELODYNE_SCAN_DENSE\020>\022\030\n\024PO"
    "INT_CLOUD_SPARSE_1\020\?\022\034\n\030POINT_CLOUD_SPAR"
    "SE_RAW_1\020@\022\032\n\026VELODYNE_SCAN_SPARSE_1\020A\022\030"
    "\n\024POINT_CLOUD_SPARSE_2\020B\022\034\n\030POINT_CLOUD_"
    "SPARSE_RAW_2\020C\022\032\n\026VELODYNE_SCAN_SPARSE_2"
    "\020D\022\030\n\024POINT_CLOUD_SPARSE_3\020E\022\034\n\030POINT_CL"
    "OUD_SPARSE_RAW_3\020F\022\032\n\026VELODYNE_SCAN_SPAR"
    "SE_3\020G\022\025\n\021CAMERA_IMAGE_LONG\020H\022\026\n\022CAMERA_"
    "IMAGE_SHORT\020I\022\020\n\014PLANNING_PAD\020J\"6\n\004Mode\022"
    "\020\n\014RECEIVE_ONLY\020\000\022\020\n\014PUBLISH_ONLY\020\001\022\n\n\006D"
    "UPLEX\020\002\"\\\n\024AdapterManagerConfig\0224\n\006confi"
    "g\030\001 \003(\0132$.apollo.common.adapter.AdapterC"
    "onfig\022\016\n\006is_ros\030\002 \002(\010", 1981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/adapters/adapter_config.proto", &protobuf_RegisterTypes);
  AdapterConfig::default_instance_ = new AdapterConfig();
  AdapterManagerConfig::default_instance_ = new AdapterManagerConfig();
  AdapterConfig::default_instance_->InitAsDefaultInstance();
  AdapterManagerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fadapters_2fadapter_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fadapters_2fadapter_5fconfig_2eproto {
  StaticDescriptorInitializer_common_2fadapters_2fadapter_5fconfig_2eproto() {
    protobuf_AddDesc_common_2fadapters_2fadapter_5fconfig_2eproto();
  }
} static_descriptor_initializer_common_2fadapters_2fadapter_5fconfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AdapterConfig_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdapterConfig_MessageType_descriptor_;
}
bool AdapterConfig_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD;
const AdapterConfig_MessageType AdapterConfig::VLP16_POINT_CLOUD;
const AdapterConfig_MessageType AdapterConfig::GPS;
const AdapterConfig_MessageType AdapterConfig::IMU;
const AdapterConfig_MessageType AdapterConfig::CHASSIS;
const AdapterConfig_MessageType AdapterConfig::LOCALIZATION;
const AdapterConfig_MessageType AdapterConfig::PLANNING_TRAJECTORY;
const AdapterConfig_MessageType AdapterConfig::MONITOR;
const AdapterConfig_MessageType AdapterConfig::PAD;
const AdapterConfig_MessageType AdapterConfig::CONTROL_COMMAND;
const AdapterConfig_MessageType AdapterConfig::PREDICTION;
const AdapterConfig_MessageType AdapterConfig::PERCEPTION_OBSTACLES;
const AdapterConfig_MessageType AdapterConfig::TRAFFIC_LIGHT_DETECTION;
const AdapterConfig_MessageType AdapterConfig::CHASSIS_DETAIL;
const AdapterConfig_MessageType AdapterConfig::DECISION;
const AdapterConfig_MessageType AdapterConfig::CANBUS;
const AdapterConfig_MessageType AdapterConfig::ROUTING_REQUEST;
const AdapterConfig_MessageType AdapterConfig::ROUTING_RESPONSE;
const AdapterConfig_MessageType AdapterConfig::RELATIVE_ODOMETRY;
const AdapterConfig_MessageType AdapterConfig::INS_STAT;
const AdapterConfig_MessageType AdapterConfig::HMI_COMMAND;
const AdapterConfig_MessageType AdapterConfig::MOBILEYE;
const AdapterConfig_MessageType AdapterConfig::DELPHIESR;
const AdapterConfig_MessageType AdapterConfig::COMPRESSED_IMAGE;
const AdapterConfig_MessageType AdapterConfig::SYSTEM_STATUS;
const AdapterConfig_MessageType AdapterConfig::INS_STATUS;
const AdapterConfig_MessageType AdapterConfig::GNSS_STATUS;
const AdapterConfig_MessageType AdapterConfig::CONTI_RADAR;
const AdapterConfig_MessageType AdapterConfig::IMAGE_SHORT;
const AdapterConfig_MessageType AdapterConfig::IMAGE_LONG;
const AdapterConfig_MessageType AdapterConfig::DRIVE_EVENT;
const AdapterConfig_MessageType AdapterConfig::GNSS_RTK_OBS;
const AdapterConfig_MessageType AdapterConfig::GNSS_RTK_EPH;
const AdapterConfig_MessageType AdapterConfig::GNSS_BEST_POSE;
const AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_GNSS;
const AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_LIDAR;
const AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_SINS_PVA;
const AdapterConfig_MessageType AdapterConfig::RAW_IMU;
const AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_STATUS;
const AdapterConfig_MessageType AdapterConfig::STATIC_INFO;
const AdapterConfig_MessageType AdapterConfig::RELATIVE_MAP;
const AdapterConfig_MessageType AdapterConfig::NAVIGATION;
const AdapterConfig_MessageType AdapterConfig::ULTRASONIC_RADAR;
const AdapterConfig_MessageType AdapterConfig::AUDIO_CAPTURE;
const AdapterConfig_MessageType AdapterConfig::IMAGE_FRONT;
const AdapterConfig_MessageType AdapterConfig::PANDORA_POINT_CLOUD;
const AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_FRONT_COLOR;
const AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_RIGHT_GRAY;
const AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_LEFT_GRAY;
const AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_FRONT_GRAY;
const AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_BACK_GRAY;
const AdapterConfig_MessageType AdapterConfig::PERCEPTION_LANE_MASK;
const AdapterConfig_MessageType AdapterConfig::GUARDIAN;
const AdapterConfig_MessageType AdapterConfig::GNSS_RAW_DATA;
const AdapterConfig_MessageType AdapterConfig::STREAM_STATUS;
const AdapterConfig_MessageType AdapterConfig::GNSS_HEADING;
const AdapterConfig_MessageType AdapterConfig::RTCM_DATA;
const AdapterConfig_MessageType AdapterConfig::RACOBIT_RADAR;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_DENSE;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_DENSE_RAW;
const AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_DENSE;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_1;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_RAW_1;
const AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_SPARSE_1;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_2;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_RAW_2;
const AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_SPARSE_2;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_3;
const AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_RAW_3;
const AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_SPARSE_3;
const AdapterConfig_MessageType AdapterConfig::CAMERA_IMAGE_LONG;
const AdapterConfig_MessageType AdapterConfig::CAMERA_IMAGE_SHORT;
const AdapterConfig_MessageType AdapterConfig::PLANNING_PAD;
const AdapterConfig_MessageType AdapterConfig::MessageType_MIN;
const AdapterConfig_MessageType AdapterConfig::MessageType_MAX;
const int AdapterConfig::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AdapterConfig_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdapterConfig_Mode_descriptor_;
}
bool AdapterConfig_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdapterConfig_Mode AdapterConfig::RECEIVE_ONLY;
const AdapterConfig_Mode AdapterConfig::PUBLISH_ONLY;
const AdapterConfig_Mode AdapterConfig::DUPLEX;
const AdapterConfig_Mode AdapterConfig::Mode_MIN;
const AdapterConfig_Mode AdapterConfig::Mode_MAX;
const int AdapterConfig::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdapterConfig::kTypeFieldNumber;
const int AdapterConfig::kModeFieldNumber;
const int AdapterConfig::kMessageHistoryLimitFieldNumber;
const int AdapterConfig::kLatchFieldNumber;
const int AdapterConfig::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdapterConfig::AdapterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.adapter.AdapterConfig)
}

void AdapterConfig::InitAsDefaultInstance() {
}

AdapterConfig::AdapterConfig(const AdapterConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.adapter.AdapterConfig)
}

void AdapterConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  mode_ = 0;
  message_history_limit_ = 10;
  latch_ = false;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdapterConfig::~AdapterConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.adapter.AdapterConfig)
  SharedDtor();
}

void AdapterConfig::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AdapterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdapterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdapterConfig_descriptor_;
}

const AdapterConfig& AdapterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fadapters_2fadapter_5fconfig_2eproto();
  return *default_instance_;
}

AdapterConfig* AdapterConfig::default_instance_ = NULL;

AdapterConfig* AdapterConfig::New(::google::protobuf::Arena* arena) const {
  AdapterConfig* n = new AdapterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdapterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.adapter.AdapterConfig)
  if (_has_bits_[0 / 32] & 31u) {
    type_ = 1;
    mode_ = 0;
    message_history_limit_ = 10;
    latch_ = false;
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdapterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.adapter.AdapterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::adapter::AdapterConfig_MessageType_IsValid(value)) {
            set_type(static_cast< ::apollo::common::adapter::AdapterConfig_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::adapter::AdapterConfig_Mode_IsValid(value)) {
            set_mode(static_cast< ::apollo::common::adapter::AdapterConfig_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_history_limit;
        break;
      }

      // optional int32 message_history_limit = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_message_history_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_history_limit_)));
          set_has_message_history_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latch;
        break;
      }

      // optional bool latch = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_latch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &latch_)));
          set_has_latch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_topic;
        break;
      }

      // optional string topic = 5;
      case 5: {
        if (tag == 42) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.adapter.AdapterConfig.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.adapter.AdapterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.adapter.AdapterConfig)
  return false;
#undef DO_
}

void AdapterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.adapter.AdapterConfig)
  // required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional int32 message_history_limit = 3 [default = 10];
  if (has_message_history_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message_history_limit(), output);
  }

  // optional bool latch = 4 [default = false];
  if (has_latch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->latch(), output);
  }

  // optional string topic = 5;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.adapter.AdapterConfig.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.adapter.AdapterConfig)
}

::google::protobuf::uint8* AdapterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.adapter.AdapterConfig)
  // required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional int32 message_history_limit = 3 [default = 10];
  if (has_message_history_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message_history_limit(), target);
  }

  // optional bool latch = 4 [default = false];
  if (has_latch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->latch(), target);
  }

  // optional string topic = 5;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.adapter.AdapterConfig.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.adapter.AdapterConfig)
  return target;
}

int AdapterConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.common.adapter.AdapterConfig)
  int total_size = 0;

  if (has_type()) {
    // required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_mode()) {
    // required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
int AdapterConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.adapter.AdapterConfig)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 message_history_limit = 3 [default = 10];
    if (has_message_history_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_history_limit());
    }

    // optional bool latch = 4 [default = false];
    if (has_latch()) {
      total_size += 1 + 1;
    }

    // optional string topic = 5;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdapterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.adapter.AdapterConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdapterConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdapterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.adapter.AdapterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.adapter.AdapterConfig)
    MergeFrom(*source);
  }
}

void AdapterConfig::MergeFrom(const AdapterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.adapter.AdapterConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_message_history_limit()) {
      set_message_history_limit(from.message_history_limit());
    }
    if (from.has_latch()) {
      set_latch(from.latch());
    }
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AdapterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.adapter.AdapterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdapterConfig::CopyFrom(const AdapterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.adapter.AdapterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdapterConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdapterConfig::Swap(AdapterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdapterConfig::InternalSwap(AdapterConfig* other) {
  std::swap(type_, other->type_);
  std::swap(mode_, other->mode_);
  std::swap(message_history_limit_, other->message_history_limit_);
  std::swap(latch_, other->latch_);
  topic_.Swap(&other->topic_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdapterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdapterConfig_descriptor_;
  metadata.reflection = AdapterConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdapterConfig

// required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
bool AdapterConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdapterConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AdapterConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdapterConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::common::adapter::AdapterConfig_MessageType AdapterConfig::type() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.type)
  return static_cast< ::apollo::common::adapter::AdapterConfig_MessageType >(type_);
}
 void AdapterConfig::set_type(::apollo::common::adapter::AdapterConfig_MessageType value) {
  assert(::apollo::common::adapter::AdapterConfig_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.type)
}

// required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
bool AdapterConfig::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdapterConfig::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void AdapterConfig::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdapterConfig::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::apollo::common::adapter::AdapterConfig_Mode AdapterConfig::mode() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.mode)
  return static_cast< ::apollo::common::adapter::AdapterConfig_Mode >(mode_);
}
 void AdapterConfig::set_mode(::apollo::common::adapter::AdapterConfig_Mode value) {
  assert(::apollo::common::adapter::AdapterConfig_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.mode)
}

// optional int32 message_history_limit = 3 [default = 10];
bool AdapterConfig::has_message_history_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdapterConfig::set_has_message_history_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void AdapterConfig::clear_has_message_history_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdapterConfig::clear_message_history_limit() {
  message_history_limit_ = 10;
  clear_has_message_history_limit();
}
 ::google::protobuf::int32 AdapterConfig::message_history_limit() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.message_history_limit)
  return message_history_limit_;
}
 void AdapterConfig::set_message_history_limit(::google::protobuf::int32 value) {
  set_has_message_history_limit();
  message_history_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.message_history_limit)
}

// optional bool latch = 4 [default = false];
bool AdapterConfig::has_latch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AdapterConfig::set_has_latch() {
  _has_bits_[0] |= 0x00000008u;
}
void AdapterConfig::clear_has_latch() {
  _has_bits_[0] &= ~0x00000008u;
}
void AdapterConfig::clear_latch() {
  latch_ = false;
  clear_has_latch();
}
 bool AdapterConfig::latch() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.latch)
  return latch_;
}
 void AdapterConfig::set_latch(bool value) {
  set_has_latch();
  latch_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.latch)
}

// optional string topic = 5;
bool AdapterConfig::has_topic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AdapterConfig::set_has_topic() {
  _has_bits_[0] |= 0x00000010u;
}
void AdapterConfig::clear_has_topic() {
  _has_bits_[0] &= ~0x00000010u;
}
void AdapterConfig::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
 const ::std::string& AdapterConfig::topic() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdapterConfig::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.topic)
}
 void AdapterConfig::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.adapter.AdapterConfig.topic)
}
 void AdapterConfig::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.adapter.AdapterConfig.topic)
}
 ::std::string* AdapterConfig::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:apollo.common.adapter.AdapterConfig.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AdapterConfig::release_topic() {
  // @@protoc_insertion_point(field_release:apollo.common.adapter.AdapterConfig.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdapterConfig::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.adapter.AdapterConfig.topic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdapterManagerConfig::kConfigFieldNumber;
const int AdapterManagerConfig::kIsRosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdapterManagerConfig::AdapterManagerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.adapter.AdapterManagerConfig)
}

void AdapterManagerConfig::InitAsDefaultInstance() {
}

AdapterManagerConfig::AdapterManagerConfig(const AdapterManagerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.adapter.AdapterManagerConfig)
}

void AdapterManagerConfig::SharedCtor() {
  _cached_size_ = 0;
  is_ros_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdapterManagerConfig::~AdapterManagerConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.adapter.AdapterManagerConfig)
  SharedDtor();
}

void AdapterManagerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdapterManagerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdapterManagerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdapterManagerConfig_descriptor_;
}

const AdapterManagerConfig& AdapterManagerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fadapters_2fadapter_5fconfig_2eproto();
  return *default_instance_;
}

AdapterManagerConfig* AdapterManagerConfig::default_instance_ = NULL;

AdapterManagerConfig* AdapterManagerConfig::New(::google::protobuf::Arena* arena) const {
  AdapterManagerConfig* n = new AdapterManagerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdapterManagerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.adapter.AdapterManagerConfig)
  is_ros_ = false;
  config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdapterManagerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.adapter.AdapterManagerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.adapter.AdapterConfig config = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_is_ros;
        break;
      }

      // required bool is_ros = 2;
      case 2: {
        if (tag == 16) {
         parse_is_ros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ros_)));
          set_has_is_ros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.adapter.AdapterManagerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.adapter.AdapterManagerConfig)
  return false;
#undef DO_
}

void AdapterManagerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.adapter.AdapterManagerConfig)
  // repeated .apollo.common.adapter.AdapterConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  // required bool is_ros = 2;
  if (has_is_ros()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ros(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.adapter.AdapterManagerConfig)
}

::google::protobuf::uint8* AdapterManagerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.adapter.AdapterManagerConfig)
  // repeated .apollo.common.adapter.AdapterConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config(i), false, target);
  }

  // required bool is_ros = 2;
  if (has_is_ros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ros(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.adapter.AdapterManagerConfig)
  return target;
}

int AdapterManagerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.adapter.AdapterManagerConfig)
  int total_size = 0;

  // required bool is_ros = 2;
  if (has_is_ros()) {
    total_size += 1 + 1;
  }
  // repeated .apollo.common.adapter.AdapterConfig config = 1;
  total_size += 1 * this->config_size();
  for (int i = 0; i < this->config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdapterManagerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.adapter.AdapterManagerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdapterManagerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdapterManagerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.adapter.AdapterManagerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.adapter.AdapterManagerConfig)
    MergeFrom(*source);
  }
}

void AdapterManagerConfig::MergeFrom(const AdapterManagerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.adapter.AdapterManagerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  config_.MergeFrom(from.config_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_ros()) {
      set_is_ros(from.is_ros());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AdapterManagerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.adapter.AdapterManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdapterManagerConfig::CopyFrom(const AdapterManagerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.adapter.AdapterManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdapterManagerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->config())) return false;
  return true;
}

void AdapterManagerConfig::Swap(AdapterManagerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdapterManagerConfig::InternalSwap(AdapterManagerConfig* other) {
  config_.UnsafeArenaSwap(&other->config_);
  std::swap(is_ros_, other->is_ros_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdapterManagerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdapterManagerConfig_descriptor_;
  metadata.reflection = AdapterManagerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdapterManagerConfig

// repeated .apollo.common.adapter.AdapterConfig config = 1;
int AdapterManagerConfig::config_size() const {
  return config_.size();
}
void AdapterManagerConfig::clear_config() {
  config_.Clear();
}
const ::apollo::common::adapter::AdapterConfig& AdapterManagerConfig::config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterManagerConfig.config)
  return config_.Get(index);
}
::apollo::common::adapter::AdapterConfig* AdapterManagerConfig::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.adapter.AdapterManagerConfig.config)
  return config_.Mutable(index);
}
::apollo::common::adapter::AdapterConfig* AdapterManagerConfig::add_config() {
  // @@protoc_insertion_point(field_add:apollo.common.adapter.AdapterManagerConfig.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::adapter::AdapterConfig >*
AdapterManagerConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.adapter.AdapterManagerConfig.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::adapter::AdapterConfig >&
AdapterManagerConfig::config() const {
  // @@protoc_insertion_point(field_list:apollo.common.adapter.AdapterManagerConfig.config)
  return config_;
}

// required bool is_ros = 2;
bool AdapterManagerConfig::has_is_ros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdapterManagerConfig::set_has_is_ros() {
  _has_bits_[0] |= 0x00000002u;
}
void AdapterManagerConfig::clear_has_is_ros() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdapterManagerConfig::clear_is_ros() {
  is_ros_ = false;
  clear_has_is_ros();
}
 bool AdapterManagerConfig::is_ros() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterManagerConfig.is_ros)
  return is_ros_;
}
 void AdapterManagerConfig::set_is_ros(bool value) {
  set_has_is_ros();
  is_ros_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterManagerConfig.is_ros)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace adapter
}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
