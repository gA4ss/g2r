// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/planning_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/planning_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* ChangeLaneStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeLaneStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeLaneStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StopTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrosswalkStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrosswalkStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullOverStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullOverStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PullOverStatus_Reason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PullOverStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReroutingStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReroutingStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RightOfWayStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RightOfWayStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RightOfWayStatus_JunctionEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SidePassStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SidePassStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SidePassStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StopSignStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopSignStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopSignStatus_LaneWatchVehicles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopSignStatus_LaneWatchVehicles_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StopSignStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DestinationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestinationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanningStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fplanning_5fstatus_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fplanning_5fstatus_2eproto() {
  protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/planning_status.proto");
  GOOGLE_CHECK(file != NULL);
  ChangeLaneStatus_descriptor_ = file->message_type(0);
  static const int ChangeLaneStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneStatus, path_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneStatus, timestamp_),
  };
  ChangeLaneStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeLaneStatus_descriptor_,
      ChangeLaneStatus::default_instance_,
      ChangeLaneStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChangeLaneStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneStatus, _internal_metadata_),
      -1);
  ChangeLaneStatus_Status_descriptor_ = ChangeLaneStatus_descriptor_->enum_type(0);
  StopTimer_descriptor_ = file->message_type(1);
  static const int StopTimer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimer, obstacle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimer, stop_time_),
  };
  StopTimer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopTimer_descriptor_,
      StopTimer::default_instance_,
      StopTimer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimer, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopTimer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimer, _internal_metadata_),
      -1);
  CrosswalkStatus_descriptor_ = file->message_type(2);
  static const int CrosswalkStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkStatus, crosswalk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkStatus, stop_timers_),
  };
  CrosswalkStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CrosswalkStatus_descriptor_,
      CrosswalkStatus::default_instance_,
      CrosswalkStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(CrosswalkStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkStatus, _internal_metadata_),
      -1);
  PullOverStatus_descriptor_ = file->message_type(3);
  static const int PullOverStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, in_pull_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, inlane_dest_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, start_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, stop_point_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, status_set_time_),
  };
  PullOverStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PullOverStatus_descriptor_,
      PullOverStatus::default_instance_,
      PullOverStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(PullOverStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverStatus, _internal_metadata_),
      -1);
  PullOverStatus_Reason_descriptor_ = PullOverStatus_descriptor_->enum_type(0);
  PullOverStatus_Status_descriptor_ = PullOverStatus_descriptor_->enum_type(1);
  ReroutingStatus_descriptor_ = file->message_type(4);
  static const int ReroutingStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingStatus, last_rerouting_time_),
  };
  ReroutingStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReroutingStatus_descriptor_,
      ReroutingStatus::default_instance_,
      ReroutingStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReroutingStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingStatus, _internal_metadata_),
      -1);
  RightOfWayStatus_descriptor_ = file->message_type(5);
  static const int RightOfWayStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RightOfWayStatus, junction_),
  };
  RightOfWayStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RightOfWayStatus_descriptor_,
      RightOfWayStatus::default_instance_,
      RightOfWayStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RightOfWayStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(RightOfWayStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RightOfWayStatus, _internal_metadata_),
      -1);
  RightOfWayStatus_JunctionEntry_descriptor_ = RightOfWayStatus_descriptor_->nested_type(0);
  SidePassStatus_descriptor_ = file->message_type(6);
  static const int SidePassStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidePassStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidePassStatus, wait_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidePassStatus, pass_obstacle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidePassStatus, pass_side_),
  };
  SidePassStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SidePassStatus_descriptor_,
      SidePassStatus::default_instance_,
      SidePassStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidePassStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(SidePassStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidePassStatus, _internal_metadata_),
      -1);
  SidePassStatus_Status_descriptor_ = SidePassStatus_descriptor_->enum_type(0);
  StopSignStatus_descriptor_ = file->message_type(7);
  static const int StopSignStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus, stop_sign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus, stop_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus, lane_watch_vehicles_),
  };
  StopSignStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopSignStatus_descriptor_,
      StopSignStatus::default_instance_,
      StopSignStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopSignStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus, _internal_metadata_),
      -1);
  StopSignStatus_LaneWatchVehicles_descriptor_ = StopSignStatus_descriptor_->nested_type(0);
  static const int StopSignStatus_LaneWatchVehicles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus_LaneWatchVehicles, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus_LaneWatchVehicles, watch_vehicles_),
  };
  StopSignStatus_LaneWatchVehicles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopSignStatus_LaneWatchVehicles_descriptor_,
      StopSignStatus_LaneWatchVehicles::default_instance_,
      StopSignStatus_LaneWatchVehicles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus_LaneWatchVehicles, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopSignStatus_LaneWatchVehicles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignStatus_LaneWatchVehicles, _internal_metadata_),
      -1);
  StopSignStatus_Status_descriptor_ = StopSignStatus_descriptor_->enum_type(0);
  DestinationStatus_descriptor_ = file->message_type(8);
  static const int DestinationStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationStatus, has_passed_destination_),
  };
  DestinationStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DestinationStatus_descriptor_,
      DestinationStatus::default_instance_,
      DestinationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(DestinationStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationStatus, _internal_metadata_),
      -1);
  PlanningStatus_descriptor_ = file->message_type(9);
  static const int PlanningStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, change_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, crosswalk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, engage_advice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, rerouting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, right_of_way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, side_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, stop_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, pull_over_),
  };
  PlanningStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlanningStatus_descriptor_,
      PlanningStatus::default_instance_,
      PlanningStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlanningStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStatus, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fplanning_5fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeLaneStatus_descriptor_, &ChangeLaneStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopTimer_descriptor_, &StopTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CrosswalkStatus_descriptor_, &CrosswalkStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PullOverStatus_descriptor_, &PullOverStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReroutingStatus_descriptor_, &ReroutingStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RightOfWayStatus_descriptor_, &RightOfWayStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RightOfWayStatus_JunctionEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            bool,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            0>::CreateDefaultInstance(
                RightOfWayStatus_JunctionEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SidePassStatus_descriptor_, &SidePassStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopSignStatus_descriptor_, &StopSignStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopSignStatus_LaneWatchVehicles_descriptor_, &StopSignStatus_LaneWatchVehicles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DestinationStatus_descriptor_, &DestinationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlanningStatus_descriptor_, &PlanningStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fplanning_5fstatus_2eproto() {
  delete ChangeLaneStatus::default_instance_;
  delete ChangeLaneStatus_reflection_;
  delete StopTimer::default_instance_;
  delete StopTimer_reflection_;
  delete CrosswalkStatus::default_instance_;
  delete CrosswalkStatus_reflection_;
  delete PullOverStatus::default_instance_;
  delete PullOverStatus_reflection_;
  delete ReroutingStatus::default_instance_;
  delete ReroutingStatus_reflection_;
  delete RightOfWayStatus::default_instance_;
  delete RightOfWayStatus_reflection_;
  delete SidePassStatus::default_instance_;
  delete SidePassStatus_reflection_;
  delete StopSignStatus::default_instance_;
  delete StopSignStatus_reflection_;
  delete StopSignStatus_LaneWatchVehicles::default_instance_;
  delete StopSignStatus_LaneWatchVehicles_reflection_;
  delete DestinationStatus::default_instance_;
  delete DestinationStatus_reflection_;
  delete PlanningStatus::default_instance_;
  delete PlanningStatus_reflection_;
}

void protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::planning::protobuf_AddDesc_planning_2fdecision_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fdrive_5fstate_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036planning/planning_status.proto\022\017apollo"
    ".planning\032\027planning/decision.proto\032\030comm"
    "on/drive_state.proto\032\025common/geometry.pr"
    "oto\"\277\001\n\020ChangeLaneStatus\0228\n\006status\030\001 \001(\016"
    "2(.apollo.planning.ChangeLaneStatus.Stat"
    "us\022\017\n\007path_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\001\"M"
    "\n\006Status\022\022\n\016IN_CHANGE_LANE\020\001\022\026\n\022CHANGE_L"
    "ANE_FAILED\020\002\022\027\n\023CHANGE_LANE_SUCCESS\020\003\"3\n"
    "\tStopTimer\022\023\n\013obstacle_id\030\001 \001(\t\022\021\n\tstop_"
    "time\030\002 \001(\001\"X\n\017CrosswalkStatus\022\024\n\014crosswa"
    "lk_id\030\001 \001(\t\022/\n\013stop_timers\030\002 \003(\0132\032.apoll"
    "o.planning.StopTimer\"\275\003\n\016PullOverStatus\022"
    "\033\n\014in_pull_over\030\001 \001(\010:\005false\0226\n\006status\030\002"
    " \001(\0162&.apollo.planning.PullOverStatus.St"
    "atus\0222\n\021inlane_dest_point\030\003 \001(\0132\027.apollo"
    ".common.PointENU\022,\n\013start_point\030\004 \001(\0132\027."
    "apollo.common.PointENU\022+\n\nstop_point\030\005 \001"
    "(\0132\027.apollo.common.PointENU\022\032\n\022stop_poin"
    "t_heading\030\006 \001(\001\0226\n\006reason\030\007 \001(\0162&.apollo"
    ".planning.PullOverStatus.Reason\022\027\n\017statu"
    "s_set_time\030\010 \001(\001\"\031\n\006Reason\022\017\n\013DESTINATIO"
    "N\020\001\"\?\n\006Status\022\013\n\007UNKNOWN\020\001\022\020\n\014IN_OPERATI"
    "ON\020\002\022\010\n\004DONE\020\003\022\014\n\010DISABLED\020\004\".\n\017Reroutin"
    "gStatus\022\033\n\023last_rerouting_time\030\001 \001(\001\"\206\001\n"
    "\020RightOfWayStatus\022A\n\010junction\030\001 \003(\0132/.ap"
    "ollo.planning.RightOfWayStatus.JunctionE"
    "ntry\032/\n\rJunctionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\010:\0028\001\"\356\001\n\016SidePassStatus\0226\n\006stat"
    "us\030\001 \001(\0162&.apollo.planning.SidePassStatu"
    "s.Status\022\027\n\017wait_start_time\030\002 \001(\001\022\030\n\020pas"
    "s_obstacle_id\030\003 \001(\t\0227\n\tpass_side\030\004 \001(\0162$"
    ".apollo.planning.ObjectSidePass.Type\"8\n\006"
    "Status\022\013\n\007UNKNOWN\020\000\022\t\n\005DRIVE\020\001\022\010\n\004WAIT\020\002"
    "\022\014\n\010SIDEPASS\020\003\"\325\002\n\016StopSignStatus\022\024\n\014sto"
    "p_sign_id\030\001 \001(\t\0226\n\006status\030\002 \001(\0162&.apollo"
    ".planning.StopSignStatus.Status\022\027\n\017stop_"
    "start_time\030\003 \001(\001\022N\n\023lane_watch_vehicles\030"
    "\004 \003(\01321.apollo.planning.StopSignStatus.L"
    "aneWatchVehicles\032<\n\021LaneWatchVehicles\022\017\n"
    "\007lane_id\030\001 \001(\t\022\026\n\016watch_vehicles\030\002 \003(\t\"N"
    "\n\006Status\022\013\n\007UNKNOWN\020\000\022\t\n\005DRIVE\020\001\022\010\n\004STOP"
    "\020\002\022\010\n\004WAIT\020\003\022\t\n\005CREEP\020\004\022\r\n\tSTOP_DONE\020\005\":"
    "\n\021DestinationStatus\022%\n\026has_passed_destin"
    "ation\030\001 \001(\010:\005false\"\364\003\n\016PlanningStatus\0226\n"
    "\013change_lane\030\001 \001(\0132!.apollo.planning.Cha"
    "ngeLaneStatus\0223\n\tcrosswalk\030\002 \001(\0132 .apoll"
    "o.planning.CrosswalkStatus\0222\n\rengage_adv"
    "ice\030\003 \001(\0132\033.apollo.common.EngageAdvice\0223"
    "\n\trerouting\030\004 \001(\0132 .apollo.planning.Rero"
    "utingStatus\0227\n\014right_of_way\030\005 \001(\0132!.apol"
    "lo.planning.RightOfWayStatus\0222\n\tside_pas"
    "s\030\006 \001(\0132\037.apollo.planning.SidePassStatus"
    "\0222\n\tstop_sign\030\007 \001(\0132\037.apollo.planning.St"
    "opSignStatus\0227\n\013destination\030\010 \001(\0132\".apol"
    "lo.planning.DestinationStatus\0222\n\tpull_ov"
    "er\030\t \001(\0132\037.apollo.planning.PullOverStatu"
    "s", 2241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/planning_status.proto", &protobuf_RegisterTypes);
  ChangeLaneStatus::default_instance_ = new ChangeLaneStatus();
  StopTimer::default_instance_ = new StopTimer();
  CrosswalkStatus::default_instance_ = new CrosswalkStatus();
  PullOverStatus::default_instance_ = new PullOverStatus();
  ReroutingStatus::default_instance_ = new ReroutingStatus();
  RightOfWayStatus::default_instance_ = new RightOfWayStatus();
  SidePassStatus::default_instance_ = new SidePassStatus();
  StopSignStatus::default_instance_ = new StopSignStatus();
  StopSignStatus_LaneWatchVehicles::default_instance_ = new StopSignStatus_LaneWatchVehicles();
  DestinationStatus::default_instance_ = new DestinationStatus();
  PlanningStatus::default_instance_ = new PlanningStatus();
  ChangeLaneStatus::default_instance_->InitAsDefaultInstance();
  StopTimer::default_instance_->InitAsDefaultInstance();
  CrosswalkStatus::default_instance_->InitAsDefaultInstance();
  PullOverStatus::default_instance_->InitAsDefaultInstance();
  ReroutingStatus::default_instance_->InitAsDefaultInstance();
  RightOfWayStatus::default_instance_->InitAsDefaultInstance();
  SidePassStatus::default_instance_->InitAsDefaultInstance();
  StopSignStatus::default_instance_->InitAsDefaultInstance();
  StopSignStatus_LaneWatchVehicles::default_instance_->InitAsDefaultInstance();
  DestinationStatus::default_instance_->InitAsDefaultInstance();
  PlanningStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fplanning_5fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fplanning_5fstatus_2eproto {
  StaticDescriptorInitializer_planning_2fplanning_5fstatus_2eproto() {
    protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  }
} static_descriptor_initializer_planning_2fplanning_5fstatus_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeLaneStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLaneStatus_Status_descriptor_;
}
bool ChangeLaneStatus_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeLaneStatus_Status ChangeLaneStatus::IN_CHANGE_LANE;
const ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_FAILED;
const ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_SUCCESS;
const ChangeLaneStatus_Status ChangeLaneStatus::Status_MIN;
const ChangeLaneStatus_Status ChangeLaneStatus::Status_MAX;
const int ChangeLaneStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeLaneStatus::kStatusFieldNumber;
const int ChangeLaneStatus::kPathIdFieldNumber;
const int ChangeLaneStatus::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeLaneStatus::ChangeLaneStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ChangeLaneStatus)
}

void ChangeLaneStatus::InitAsDefaultInstance() {
}

ChangeLaneStatus::ChangeLaneStatus(const ChangeLaneStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChangeLaneStatus)
}

void ChangeLaneStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 1;
  path_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeLaneStatus::~ChangeLaneStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChangeLaneStatus)
  SharedDtor();
}

void ChangeLaneStatus::SharedDtor() {
  path_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChangeLaneStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLaneStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLaneStatus_descriptor_;
}

const ChangeLaneStatus& ChangeLaneStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

ChangeLaneStatus* ChangeLaneStatus::default_instance_ = NULL;

ChangeLaneStatus* ChangeLaneStatus::New(::google::protobuf::Arena* arena) const {
  ChangeLaneStatus* n = new ChangeLaneStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeLaneStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChangeLaneStatus)
  if (_has_bits_[0 / 32] & 7u) {
    status_ = 1;
    if (has_path_id()) {
      path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangeLaneStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ChangeLaneStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ChangeLaneStatus_Status_IsValid(value)) {
            set_status(static_cast< ::apollo::planning::ChangeLaneStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path_id;
        break;
      }

      // optional string path_id = 2;
      case 2: {
        if (tag == 18) {
         parse_path_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path_id().data(), this->path_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.ChangeLaneStatus.path_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ChangeLaneStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ChangeLaneStatus)
  return false;
#undef DO_
}

void ChangeLaneStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ChangeLaneStatus)
  // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string path_id = 2;
  if (has_path_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_id().data(), this->path_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ChangeLaneStatus.path_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path_id(), output);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ChangeLaneStatus)
}

::google::protobuf::uint8* ChangeLaneStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChangeLaneStatus)
  // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string path_id = 2;
  if (has_path_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_id().data(), this->path_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ChangeLaneStatus.path_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path_id(), target);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChangeLaneStatus)
  return target;
}

int ChangeLaneStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChangeLaneStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string path_id = 2;
    if (has_path_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_id());
    }

    // optional double timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLaneStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ChangeLaneStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeLaneStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeLaneStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ChangeLaneStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ChangeLaneStatus)
    MergeFrom(*source);
  }
}

void ChangeLaneStatus::MergeFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChangeLaneStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_path_id()) {
      set_has_path_id();
      path_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_id_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChangeLaneStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ChangeLaneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLaneStatus::CopyFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChangeLaneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneStatus::IsInitialized() const {

  return true;
}

void ChangeLaneStatus::Swap(ChangeLaneStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeLaneStatus::InternalSwap(ChangeLaneStatus* other) {
  std::swap(status_, other->status_);
  path_id_.Swap(&other->path_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeLaneStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeLaneStatus_descriptor_;
  metadata.reflection = ChangeLaneStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeLaneStatus

// optional .apollo.planning.ChangeLaneStatus.Status status = 1;
bool ChangeLaneStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeLaneStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeLaneStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeLaneStatus::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::apollo::planning::ChangeLaneStatus_Status ChangeLaneStatus::status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneStatus.status)
  return static_cast< ::apollo::planning::ChangeLaneStatus_Status >(status_);
}
 void ChangeLaneStatus::set_status(::apollo::planning::ChangeLaneStatus_Status value) {
  assert(::apollo::planning::ChangeLaneStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneStatus.status)
}

// optional string path_id = 2;
bool ChangeLaneStatus::has_path_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeLaneStatus::set_has_path_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeLaneStatus::clear_has_path_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeLaneStatus::clear_path_id() {
  path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path_id();
}
 const ::std::string& ChangeLaneStatus::path_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneStatus.path_id)
  return path_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChangeLaneStatus::set_path_id(const ::std::string& value) {
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneStatus.path_id)
}
 void ChangeLaneStatus::set_path_id(const char* value) {
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.ChangeLaneStatus.path_id)
}
 void ChangeLaneStatus::set_path_id(const char* value, size_t size) {
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ChangeLaneStatus.path_id)
}
 ::std::string* ChangeLaneStatus::mutable_path_id() {
  set_has_path_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ChangeLaneStatus.path_id)
  return path_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChangeLaneStatus::release_path_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.ChangeLaneStatus.path_id)
  clear_has_path_id();
  return path_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChangeLaneStatus::set_allocated_path_id(::std::string* path_id) {
  if (path_id != NULL) {
    set_has_path_id();
  } else {
    clear_has_path_id();
  }
  path_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ChangeLaneStatus.path_id)
}

// optional double timestamp = 3;
bool ChangeLaneStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChangeLaneStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void ChangeLaneStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChangeLaneStatus::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double ChangeLaneStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneStatus.timestamp)
  return timestamp_;
}
 void ChangeLaneStatus::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneStatus.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopTimer::kObstacleIdFieldNumber;
const int StopTimer::kStopTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopTimer::StopTimer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopTimer)
}

void StopTimer::InitAsDefaultInstance() {
}

StopTimer::StopTimer(const StopTimer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopTimer)
}

void StopTimer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopTimer::~StopTimer() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopTimer)
  SharedDtor();
}

void StopTimer::SharedDtor() {
  obstacle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopTimer_descriptor_;
}

const StopTimer& StopTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

StopTimer* StopTimer::default_instance_ = NULL;

StopTimer* StopTimer::New(::google::protobuf::Arena* arena) const {
  StopTimer* n = new StopTimer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopTimer::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopTimer)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_obstacle_id()) {
      obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    stop_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopTimer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string obstacle_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obstacle_id().data(), this->obstacle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopTimer.obstacle_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_stop_time;
        break;
      }

      // optional double stop_time = 2;
      case 2: {
        if (tag == 17) {
         parse_stop_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_time_)));
          set_has_stop_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopTimer)
  return false;
#undef DO_
}

void StopTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopTimer)
  // optional string obstacle_id = 1;
  if (has_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), this->obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopTimer.obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obstacle_id(), output);
  }

  // optional double stop_time = 2;
  if (has_stop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopTimer)
}

::google::protobuf::uint8* StopTimer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopTimer)
  // optional string obstacle_id = 1;
  if (has_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), this->obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopTimer.obstacle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obstacle_id(), target);
  }

  // optional double stop_time = 2;
  if (has_stop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopTimer)
  return target;
}

int StopTimer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopTimer)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string obstacle_id = 1;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obstacle_id());
    }

    // optional double stop_time = 2;
    if (has_stop_time()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopTimer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopTimer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopTimer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopTimer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopTimer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopTimer)
    MergeFrom(*source);
  }
}

void StopTimer::MergeFrom(const StopTimer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopTimer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obstacle_id()) {
      set_has_obstacle_id();
      obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obstacle_id_);
    }
    if (from.has_stop_time()) {
      set_stop_time(from.stop_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopTimer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopTimer::CopyFrom(const StopTimer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTimer::IsInitialized() const {

  return true;
}

void StopTimer::Swap(StopTimer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopTimer::InternalSwap(StopTimer* other) {
  obstacle_id_.Swap(&other->obstacle_id_);
  std::swap(stop_time_, other->stop_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopTimer_descriptor_;
  metadata.reflection = StopTimer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopTimer

// optional string obstacle_id = 1;
bool StopTimer::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopTimer::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StopTimer::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopTimer::clear_obstacle_id() {
  obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obstacle_id();
}
 const ::std::string& StopTimer::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopTimer.obstacle_id)
  return obstacle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTimer::set_obstacle_id(const ::std::string& value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.StopTimer.obstacle_id)
}
 void StopTimer::set_obstacle_id(const char* value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.StopTimer.obstacle_id)
}
 void StopTimer::set_obstacle_id(const char* value, size_t size) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.StopTimer.obstacle_id)
}
 ::std::string* StopTimer::mutable_obstacle_id() {
  set_has_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.StopTimer.obstacle_id)
  return obstacle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopTimer::release_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.StopTimer.obstacle_id)
  clear_has_obstacle_id();
  return obstacle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTimer::set_allocated_obstacle_id(::std::string* obstacle_id) {
  if (obstacle_id != NULL) {
    set_has_obstacle_id();
  } else {
    clear_has_obstacle_id();
  }
  obstacle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obstacle_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.StopTimer.obstacle_id)
}

// optional double stop_time = 2;
bool StopTimer::has_stop_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopTimer::set_has_stop_time() {
  _has_bits_[0] |= 0x00000002u;
}
void StopTimer::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopTimer::clear_stop_time() {
  stop_time_ = 0;
  clear_has_stop_time();
}
 double StopTimer::stop_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopTimer.stop_time)
  return stop_time_;
}
 void StopTimer::set_stop_time(double value) {
  set_has_stop_time();
  stop_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopTimer.stop_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrosswalkStatus::kCrosswalkIdFieldNumber;
const int CrosswalkStatus::kStopTimersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrosswalkStatus::CrosswalkStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CrosswalkStatus)
}

void CrosswalkStatus::InitAsDefaultInstance() {
}

CrosswalkStatus::CrosswalkStatus(const CrosswalkStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkStatus)
}

void CrosswalkStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  crosswalk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrosswalkStatus::~CrosswalkStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkStatus)
  SharedDtor();
}

void CrosswalkStatus::SharedDtor() {
  crosswalk_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CrosswalkStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrosswalkStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrosswalkStatus_descriptor_;
}

const CrosswalkStatus& CrosswalkStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

CrosswalkStatus* CrosswalkStatus::default_instance_ = NULL;

CrosswalkStatus* CrosswalkStatus::New(::google::protobuf::Arena* arena) const {
  CrosswalkStatus* n = new CrosswalkStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrosswalkStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkStatus)
  if (has_crosswalk_id()) {
    crosswalk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  stop_timers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CrosswalkStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CrosswalkStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crosswalk_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crosswalk_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crosswalk_id().data(), this->crosswalk_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.CrosswalkStatus.crosswalk_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop_timers;
        break;
      }

      // repeated .apollo.planning.StopTimer stop_timers = 2;
      case 2: {
        if (tag == 18) {
         parse_stop_timers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_timers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stop_timers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CrosswalkStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CrosswalkStatus)
  return false;
#undef DO_
}

void CrosswalkStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CrosswalkStatus)
  // optional string crosswalk_id = 1;
  if (has_crosswalk_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk_id().data(), this->crosswalk_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.crosswalk_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->crosswalk_id(), output);
  }

  // repeated .apollo.planning.StopTimer stop_timers = 2;
  for (unsigned int i = 0, n = this->stop_timers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stop_timers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CrosswalkStatus)
}

::google::protobuf::uint8* CrosswalkStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkStatus)
  // optional string crosswalk_id = 1;
  if (has_crosswalk_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk_id().data(), this->crosswalk_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.crosswalk_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crosswalk_id(), target);
  }

  // repeated .apollo.planning.StopTimer stop_timers = 2;
  for (unsigned int i = 0, n = this->stop_timers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stop_timers(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkStatus)
  return target;
}

int CrosswalkStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkStatus)
  int total_size = 0;

  // optional string crosswalk_id = 1;
  if (has_crosswalk_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->crosswalk_id());
  }

  // repeated .apollo.planning.StopTimer stop_timers = 2;
  total_size += 1 * this->stop_timers_size();
  for (int i = 0; i < this->stop_timers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_timers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrosswalkStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CrosswalkStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CrosswalkStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CrosswalkStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CrosswalkStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CrosswalkStatus)
    MergeFrom(*source);
  }
}

void CrosswalkStatus::MergeFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stop_timers_.MergeFrom(from.stop_timers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crosswalk_id()) {
      set_has_crosswalk_id();
      crosswalk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crosswalk_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CrosswalkStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CrosswalkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkStatus::CopyFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkStatus::IsInitialized() const {

  return true;
}

void CrosswalkStatus::Swap(CrosswalkStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrosswalkStatus::InternalSwap(CrosswalkStatus* other) {
  crosswalk_id_.Swap(&other->crosswalk_id_);
  stop_timers_.UnsafeArenaSwap(&other->stop_timers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrosswalkStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrosswalkStatus_descriptor_;
  metadata.reflection = CrosswalkStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrosswalkStatus

// optional string crosswalk_id = 1;
bool CrosswalkStatus::has_crosswalk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrosswalkStatus::set_has_crosswalk_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CrosswalkStatus::clear_has_crosswalk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrosswalkStatus::clear_crosswalk_id() {
  crosswalk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_crosswalk_id();
}
 const ::std::string& CrosswalkStatus::crosswalk_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkStatus.crosswalk_id)
  return crosswalk_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CrosswalkStatus::set_crosswalk_id(const ::std::string& value) {
  set_has_crosswalk_id();
  crosswalk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkStatus.crosswalk_id)
}
 void CrosswalkStatus::set_crosswalk_id(const char* value) {
  set_has_crosswalk_id();
  crosswalk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.CrosswalkStatus.crosswalk_id)
}
 void CrosswalkStatus::set_crosswalk_id(const char* value, size_t size) {
  set_has_crosswalk_id();
  crosswalk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.CrosswalkStatus.crosswalk_id)
}
 ::std::string* CrosswalkStatus::mutable_crosswalk_id() {
  set_has_crosswalk_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.CrosswalkStatus.crosswalk_id)
  return crosswalk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CrosswalkStatus::release_crosswalk_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.CrosswalkStatus.crosswalk_id)
  clear_has_crosswalk_id();
  return crosswalk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CrosswalkStatus::set_allocated_crosswalk_id(::std::string* crosswalk_id) {
  if (crosswalk_id != NULL) {
    set_has_crosswalk_id();
  } else {
    clear_has_crosswalk_id();
  }
  crosswalk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crosswalk_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.CrosswalkStatus.crosswalk_id)
}

// repeated .apollo.planning.StopTimer stop_timers = 2;
int CrosswalkStatus::stop_timers_size() const {
  return stop_timers_.size();
}
void CrosswalkStatus::clear_stop_timers() {
  stop_timers_.Clear();
}
const ::apollo::planning::StopTimer& CrosswalkStatus::stop_timers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkStatus.stop_timers)
  return stop_timers_.Get(index);
}
::apollo::planning::StopTimer* CrosswalkStatus::mutable_stop_timers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.CrosswalkStatus.stop_timers)
  return stop_timers_.Mutable(index);
}
::apollo::planning::StopTimer* CrosswalkStatus::add_stop_timers() {
  // @@protoc_insertion_point(field_add:apollo.planning.CrosswalkStatus.stop_timers)
  return stop_timers_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::StopTimer >*
CrosswalkStatus::mutable_stop_timers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.CrosswalkStatus.stop_timers)
  return &stop_timers_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::StopTimer >&
CrosswalkStatus::stop_timers() const {
  // @@protoc_insertion_point(field_list:apollo.planning.CrosswalkStatus.stop_timers)
  return stop_timers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PullOverStatus_Reason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullOverStatus_Reason_descriptor_;
}
bool PullOverStatus_Reason_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PullOverStatus_Reason PullOverStatus::DESTINATION;
const PullOverStatus_Reason PullOverStatus::Reason_MIN;
const PullOverStatus_Reason PullOverStatus::Reason_MAX;
const int PullOverStatus::Reason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PullOverStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullOverStatus_Status_descriptor_;
}
bool PullOverStatus_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PullOverStatus_Status PullOverStatus::UNKNOWN;
const PullOverStatus_Status PullOverStatus::IN_OPERATION;
const PullOverStatus_Status PullOverStatus::DONE;
const PullOverStatus_Status PullOverStatus::DISABLED;
const PullOverStatus_Status PullOverStatus::Status_MIN;
const PullOverStatus_Status PullOverStatus::Status_MAX;
const int PullOverStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullOverStatus::kInPullOverFieldNumber;
const int PullOverStatus::kStatusFieldNumber;
const int PullOverStatus::kInlaneDestPointFieldNumber;
const int PullOverStatus::kStartPointFieldNumber;
const int PullOverStatus::kStopPointFieldNumber;
const int PullOverStatus::kStopPointHeadingFieldNumber;
const int PullOverStatus::kReasonFieldNumber;
const int PullOverStatus::kStatusSetTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullOverStatus::PullOverStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PullOverStatus)
}

void PullOverStatus::InitAsDefaultInstance() {
  inlane_dest_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
  start_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
  stop_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

PullOverStatus::PullOverStatus(const PullOverStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PullOverStatus)
}

void PullOverStatus::SharedCtor() {
  _cached_size_ = 0;
  in_pull_over_ = false;
  status_ = 1;
  inlane_dest_point_ = NULL;
  start_point_ = NULL;
  stop_point_ = NULL;
  stop_point_heading_ = 0;
  reason_ = 1;
  status_set_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullOverStatus::~PullOverStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PullOverStatus)
  SharedDtor();
}

void PullOverStatus::SharedDtor() {
  if (this != default_instance_) {
    delete inlane_dest_point_;
    delete start_point_;
    delete stop_point_;
  }
}

void PullOverStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullOverStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullOverStatus_descriptor_;
}

const PullOverStatus& PullOverStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

PullOverStatus* PullOverStatus::default_instance_ = NULL;

PullOverStatus* PullOverStatus::New(::google::protobuf::Arena* arena) const {
  PullOverStatus* n = new PullOverStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PullOverStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PullOverStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PullOverStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PullOverStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(stop_point_heading_, status_set_time_);
    in_pull_over_ = false;
    status_ = 1;
    if (has_inlane_dest_point()) {
      if (inlane_dest_point_ != NULL) inlane_dest_point_->::apollo::common::PointENU::Clear();
    }
    if (has_start_point()) {
      if (start_point_ != NULL) start_point_->::apollo::common::PointENU::Clear();
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
    }
    reason_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PullOverStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PullOverStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool in_pull_over = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_pull_over_)));
          set_has_in_pull_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .apollo.planning.PullOverStatus.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PullOverStatus_Status_IsValid(value)) {
            set_status(static_cast< ::apollo::planning::PullOverStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_inlane_dest_point;
        break;
      }

      // optional .apollo.common.PointENU inlane_dest_point = 3;
      case 3: {
        if (tag == 26) {
         parse_inlane_dest_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inlane_dest_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_point;
        break;
      }

      // optional .apollo.common.PointENU start_point = 4;
      case 4: {
        if (tag == 34) {
         parse_start_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stop_point;
        break;
      }

      // optional .apollo.common.PointENU stop_point = 5;
      case 5: {
        if (tag == 42) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_stop_point_heading;
        break;
      }

      // optional double stop_point_heading = 6;
      case 6: {
        if (tag == 49) {
         parse_stop_point_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_point_heading_)));
          set_has_stop_point_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reason;
        break;
      }

      // optional .apollo.planning.PullOverStatus.Reason reason = 7;
      case 7: {
        if (tag == 56) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PullOverStatus_Reason_IsValid(value)) {
            set_reason(static_cast< ::apollo::planning::PullOverStatus_Reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_status_set_time;
        break;
      }

      // optional double status_set_time = 8;
      case 8: {
        if (tag == 65) {
         parse_status_set_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &status_set_time_)));
          set_has_status_set_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PullOverStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PullOverStatus)
  return false;
#undef DO_
}

void PullOverStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PullOverStatus)
  // optional bool in_pull_over = 1 [default = false];
  if (has_in_pull_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->in_pull_over(), output);
  }

  // optional .apollo.planning.PullOverStatus.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .apollo.common.PointENU inlane_dest_point = 3;
  if (has_inlane_dest_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->inlane_dest_point_, output);
  }

  // optional .apollo.common.PointENU start_point = 4;
  if (has_start_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_point_, output);
  }

  // optional .apollo.common.PointENU stop_point = 5;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stop_point_, output);
  }

  // optional double stop_point_heading = 6;
  if (has_stop_point_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stop_point_heading(), output);
  }

  // optional .apollo.planning.PullOverStatus.Reason reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reason(), output);
  }

  // optional double status_set_time = 8;
  if (has_status_set_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->status_set_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PullOverStatus)
}

::google::protobuf::uint8* PullOverStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PullOverStatus)
  // optional bool in_pull_over = 1 [default = false];
  if (has_in_pull_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->in_pull_over(), target);
  }

  // optional .apollo.planning.PullOverStatus.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .apollo.common.PointENU inlane_dest_point = 3;
  if (has_inlane_dest_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->inlane_dest_point_, false, target);
  }

  // optional .apollo.common.PointENU start_point = 4;
  if (has_start_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->start_point_, false, target);
  }

  // optional .apollo.common.PointENU stop_point = 5;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stop_point_, false, target);
  }

  // optional double stop_point_heading = 6;
  if (has_stop_point_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stop_point_heading(), target);
  }

  // optional .apollo.planning.PullOverStatus.Reason reason = 7;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reason(), target);
  }

  // optional double status_set_time = 8;
  if (has_status_set_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->status_set_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PullOverStatus)
  return target;
}

int PullOverStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PullOverStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool in_pull_over = 1 [default = false];
    if (has_in_pull_over()) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.PullOverStatus.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .apollo.common.PointENU inlane_dest_point = 3;
    if (has_inlane_dest_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inlane_dest_point_);
    }

    // optional .apollo.common.PointENU start_point = 4;
    if (has_start_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_point_);
    }

    // optional .apollo.common.PointENU stop_point = 5;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double stop_point_heading = 6;
    if (has_stop_point_heading()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.PullOverStatus.Reason reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

    // optional double status_set_time = 8;
    if (has_status_set_time()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullOverStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PullOverStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PullOverStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PullOverStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PullOverStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PullOverStatus)
    MergeFrom(*source);
  }
}

void PullOverStatus::MergeFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PullOverStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in_pull_over()) {
      set_in_pull_over(from.in_pull_over());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_inlane_dest_point()) {
      mutable_inlane_dest_point()->::apollo::common::PointENU::MergeFrom(from.inlane_dest_point());
    }
    if (from.has_start_point()) {
      mutable_start_point()->::apollo::common::PointENU::MergeFrom(from.start_point());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from.stop_point());
    }
    if (from.has_stop_point_heading()) {
      set_stop_point_heading(from.stop_point_heading());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_status_set_time()) {
      set_status_set_time(from.status_set_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PullOverStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PullOverStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullOverStatus::CopyFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PullOverStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullOverStatus::IsInitialized() const {

  return true;
}

void PullOverStatus::Swap(PullOverStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullOverStatus::InternalSwap(PullOverStatus* other) {
  std::swap(in_pull_over_, other->in_pull_over_);
  std::swap(status_, other->status_);
  std::swap(inlane_dest_point_, other->inlane_dest_point_);
  std::swap(start_point_, other->start_point_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(stop_point_heading_, other->stop_point_heading_);
  std::swap(reason_, other->reason_);
  std::swap(status_set_time_, other->status_set_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullOverStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullOverStatus_descriptor_;
  metadata.reflection = PullOverStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PullOverStatus

// optional bool in_pull_over = 1 [default = false];
bool PullOverStatus::has_in_pull_over() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PullOverStatus::set_has_in_pull_over() {
  _has_bits_[0] |= 0x00000001u;
}
void PullOverStatus::clear_has_in_pull_over() {
  _has_bits_[0] &= ~0x00000001u;
}
void PullOverStatus::clear_in_pull_over() {
  in_pull_over_ = false;
  clear_has_in_pull_over();
}
 bool PullOverStatus::in_pull_over() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.in_pull_over)
  return in_pull_over_;
}
 void PullOverStatus::set_in_pull_over(bool value) {
  set_has_in_pull_over();
  in_pull_over_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverStatus.in_pull_over)
}

// optional .apollo.planning.PullOverStatus.Status status = 2;
bool PullOverStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PullOverStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void PullOverStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void PullOverStatus::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::apollo::planning::PullOverStatus_Status PullOverStatus::status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.status)
  return static_cast< ::apollo::planning::PullOverStatus_Status >(status_);
}
 void PullOverStatus::set_status(::apollo::planning::PullOverStatus_Status value) {
  assert(::apollo::planning::PullOverStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverStatus.status)
}

// optional .apollo.common.PointENU inlane_dest_point = 3;
bool PullOverStatus::has_inlane_dest_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PullOverStatus::set_has_inlane_dest_point() {
  _has_bits_[0] |= 0x00000004u;
}
void PullOverStatus::clear_has_inlane_dest_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void PullOverStatus::clear_inlane_dest_point() {
  if (inlane_dest_point_ != NULL) inlane_dest_point_->::apollo::common::PointENU::Clear();
  clear_has_inlane_dest_point();
}
const ::apollo::common::PointENU& PullOverStatus::inlane_dest_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.inlane_dest_point)
  return inlane_dest_point_ != NULL ? *inlane_dest_point_ : *default_instance_->inlane_dest_point_;
}
::apollo::common::PointENU* PullOverStatus::mutable_inlane_dest_point() {
  set_has_inlane_dest_point();
  if (inlane_dest_point_ == NULL) {
    inlane_dest_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PullOverStatus.inlane_dest_point)
  return inlane_dest_point_;
}
::apollo::common::PointENU* PullOverStatus::release_inlane_dest_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.PullOverStatus.inlane_dest_point)
  clear_has_inlane_dest_point();
  ::apollo::common::PointENU* temp = inlane_dest_point_;
  inlane_dest_point_ = NULL;
  return temp;
}
void PullOverStatus::set_allocated_inlane_dest_point(::apollo::common::PointENU* inlane_dest_point) {
  delete inlane_dest_point_;
  inlane_dest_point_ = inlane_dest_point;
  if (inlane_dest_point) {
    set_has_inlane_dest_point();
  } else {
    clear_has_inlane_dest_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PullOverStatus.inlane_dest_point)
}

// optional .apollo.common.PointENU start_point = 4;
bool PullOverStatus::has_start_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PullOverStatus::set_has_start_point() {
  _has_bits_[0] |= 0x00000008u;
}
void PullOverStatus::clear_has_start_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void PullOverStatus::clear_start_point() {
  if (start_point_ != NULL) start_point_->::apollo::common::PointENU::Clear();
  clear_has_start_point();
}
const ::apollo::common::PointENU& PullOverStatus::start_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.start_point)
  return start_point_ != NULL ? *start_point_ : *default_instance_->start_point_;
}
::apollo::common::PointENU* PullOverStatus::mutable_start_point() {
  set_has_start_point();
  if (start_point_ == NULL) {
    start_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PullOverStatus.start_point)
  return start_point_;
}
::apollo::common::PointENU* PullOverStatus::release_start_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.PullOverStatus.start_point)
  clear_has_start_point();
  ::apollo::common::PointENU* temp = start_point_;
  start_point_ = NULL;
  return temp;
}
void PullOverStatus::set_allocated_start_point(::apollo::common::PointENU* start_point) {
  delete start_point_;
  start_point_ = start_point;
  if (start_point) {
    set_has_start_point();
  } else {
    clear_has_start_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PullOverStatus.start_point)
}

// optional .apollo.common.PointENU stop_point = 5;
bool PullOverStatus::has_stop_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PullOverStatus::set_has_stop_point() {
  _has_bits_[0] |= 0x00000010u;
}
void PullOverStatus::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000010u;
}
void PullOverStatus::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
  clear_has_stop_point();
}
const ::apollo::common::PointENU& PullOverStatus::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::common::PointENU* PullOverStatus::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PullOverStatus.stop_point)
  return stop_point_;
}
::apollo::common::PointENU* PullOverStatus::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.PullOverStatus.stop_point)
  clear_has_stop_point();
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void PullOverStatus::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PullOverStatus.stop_point)
}

// optional double stop_point_heading = 6;
bool PullOverStatus::has_stop_point_heading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PullOverStatus::set_has_stop_point_heading() {
  _has_bits_[0] |= 0x00000020u;
}
void PullOverStatus::clear_has_stop_point_heading() {
  _has_bits_[0] &= ~0x00000020u;
}
void PullOverStatus::clear_stop_point_heading() {
  stop_point_heading_ = 0;
  clear_has_stop_point_heading();
}
 double PullOverStatus::stop_point_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.stop_point_heading)
  return stop_point_heading_;
}
 void PullOverStatus::set_stop_point_heading(double value) {
  set_has_stop_point_heading();
  stop_point_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverStatus.stop_point_heading)
}

// optional .apollo.planning.PullOverStatus.Reason reason = 7;
bool PullOverStatus::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PullOverStatus::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
void PullOverStatus::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
void PullOverStatus::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
 ::apollo::planning::PullOverStatus_Reason PullOverStatus::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.reason)
  return static_cast< ::apollo::planning::PullOverStatus_Reason >(reason_);
}
 void PullOverStatus::set_reason(::apollo::planning::PullOverStatus_Reason value) {
  assert(::apollo::planning::PullOverStatus_Reason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverStatus.reason)
}

// optional double status_set_time = 8;
bool PullOverStatus::has_status_set_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PullOverStatus::set_has_status_set_time() {
  _has_bits_[0] |= 0x00000080u;
}
void PullOverStatus::clear_has_status_set_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void PullOverStatus::clear_status_set_time() {
  status_set_time_ = 0;
  clear_has_status_set_time();
}
 double PullOverStatus::status_set_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverStatus.status_set_time)
  return status_set_time_;
}
 void PullOverStatus::set_status_set_time(double value) {
  set_has_status_set_time();
  status_set_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverStatus.status_set_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReroutingStatus::kLastReroutingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReroutingStatus::ReroutingStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReroutingStatus)
}

void ReroutingStatus::InitAsDefaultInstance() {
}

ReroutingStatus::ReroutingStatus(const ReroutingStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingStatus)
}

void ReroutingStatus::SharedCtor() {
  _cached_size_ = 0;
  last_rerouting_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReroutingStatus::~ReroutingStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingStatus)
  SharedDtor();
}

void ReroutingStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReroutingStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReroutingStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReroutingStatus_descriptor_;
}

const ReroutingStatus& ReroutingStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

ReroutingStatus* ReroutingStatus::default_instance_ = NULL;

ReroutingStatus* ReroutingStatus::New(::google::protobuf::Arena* arena) const {
  ReroutingStatus* n = new ReroutingStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReroutingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingStatus)
  last_rerouting_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReroutingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ReroutingStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double last_rerouting_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_rerouting_time_)));
          set_has_last_rerouting_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ReroutingStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ReroutingStatus)
  return false;
#undef DO_
}

void ReroutingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ReroutingStatus)
  // optional double last_rerouting_time = 1;
  if (has_last_rerouting_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->last_rerouting_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ReroutingStatus)
}

::google::protobuf::uint8* ReroutingStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingStatus)
  // optional double last_rerouting_time = 1;
  if (has_last_rerouting_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->last_rerouting_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingStatus)
  return target;
}

int ReroutingStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingStatus)
  int total_size = 0;

  // optional double last_rerouting_time = 1;
  if (has_last_rerouting_time()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReroutingStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReroutingStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReroutingStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReroutingStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReroutingStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReroutingStatus)
    MergeFrom(*source);
  }
}

void ReroutingStatus::MergeFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_rerouting_time()) {
      set_last_rerouting_time(from.last_rerouting_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReroutingStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReroutingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReroutingStatus::CopyFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingStatus::IsInitialized() const {

  return true;
}

void ReroutingStatus::Swap(ReroutingStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReroutingStatus::InternalSwap(ReroutingStatus* other) {
  std::swap(last_rerouting_time_, other->last_rerouting_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReroutingStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReroutingStatus_descriptor_;
  metadata.reflection = ReroutingStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReroutingStatus

// optional double last_rerouting_time = 1;
bool ReroutingStatus::has_last_rerouting_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReroutingStatus::set_has_last_rerouting_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ReroutingStatus::clear_has_last_rerouting_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReroutingStatus::clear_last_rerouting_time() {
  last_rerouting_time_ = 0;
  clear_has_last_rerouting_time();
}
 double ReroutingStatus::last_rerouting_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReroutingStatus.last_rerouting_time)
  return last_rerouting_time_;
}
 void ReroutingStatus::set_last_rerouting_time(double value) {
  set_has_last_rerouting_time();
  last_rerouting_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReroutingStatus.last_rerouting_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RightOfWayStatus::kJunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RightOfWayStatus::RightOfWayStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RightOfWayStatus)
}

void RightOfWayStatus::InitAsDefaultInstance() {
}

RightOfWayStatus::RightOfWayStatus(const RightOfWayStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RightOfWayStatus)
}

void RightOfWayStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  junction_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  junction_.SetEntryDescriptor(
      &::apollo::planning::RightOfWayStatus_JunctionEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RightOfWayStatus::~RightOfWayStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.RightOfWayStatus)
  SharedDtor();
}

void RightOfWayStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RightOfWayStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RightOfWayStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RightOfWayStatus_descriptor_;
}

const RightOfWayStatus& RightOfWayStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

RightOfWayStatus* RightOfWayStatus::default_instance_ = NULL;

RightOfWayStatus* RightOfWayStatus::New(::google::protobuf::Arena* arena) const {
  RightOfWayStatus* n = new RightOfWayStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RightOfWayStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RightOfWayStatus)
  junction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RightOfWayStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RightOfWayStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, bool> junction = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_junction:
          RightOfWayStatus_JunctionEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&junction_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.RightOfWayStatus.JunctionEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_junction;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RightOfWayStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RightOfWayStatus)
  return false;
#undef DO_
}

void RightOfWayStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RightOfWayStatus)
  // map<string, bool> junction = 1;
  if (!this->junction().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.planning.RightOfWayStatus.JunctionEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->junction().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->junction().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->junction().begin();
          it != this->junction().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RightOfWayStatus_JunctionEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(junction_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RightOfWayStatus_JunctionEntry> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->junction().begin();
          it != this->junction().end(); ++it) {
        entry.reset(junction_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RightOfWayStatus)
}

::google::protobuf::uint8* RightOfWayStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RightOfWayStatus)
  // map<string, bool> junction = 1;
  if (!this->junction().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.planning.RightOfWayStatus.JunctionEntry.key");
      }
    };

    if (deterministic &&
        this->junction().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->junction().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->junction().begin();
          it != this->junction().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RightOfWayStatus_JunctionEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(junction_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RightOfWayStatus_JunctionEntry> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->junction().begin();
          it != this->junction().end(); ++it) {
        entry.reset(junction_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RightOfWayStatus)
  return target;
}

int RightOfWayStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RightOfWayStatus)
  int total_size = 0;

  // map<string, bool> junction = 1;
  total_size += 1 * this->junction_size();
  {
    ::google::protobuf::scoped_ptr<RightOfWayStatus_JunctionEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->junction().begin();
        it != this->junction().end(); ++it) {
      entry.reset(junction_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RightOfWayStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RightOfWayStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RightOfWayStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RightOfWayStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RightOfWayStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RightOfWayStatus)
    MergeFrom(*source);
  }
}

void RightOfWayStatus::MergeFrom(const RightOfWayStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RightOfWayStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  junction_.MergeFrom(from.junction_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RightOfWayStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RightOfWayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightOfWayStatus::CopyFrom(const RightOfWayStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RightOfWayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightOfWayStatus::IsInitialized() const {

  return true;
}

void RightOfWayStatus::Swap(RightOfWayStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RightOfWayStatus::InternalSwap(RightOfWayStatus* other) {
  junction_.Swap(&other->junction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RightOfWayStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RightOfWayStatus_descriptor_;
  metadata.reflection = RightOfWayStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RightOfWayStatus

// map<string, bool> junction = 1;
int RightOfWayStatus::junction_size() const {
  return junction_.size();
}
void RightOfWayStatus::clear_junction() {
  junction_.Clear();
}
 const ::google::protobuf::Map< ::std::string, bool >&
RightOfWayStatus::junction() const {
  // @@protoc_insertion_point(field_map:apollo.planning.RightOfWayStatus.junction)
  return junction_.GetMap();
}
 ::google::protobuf::Map< ::std::string, bool >*
RightOfWayStatus::mutable_junction() {
  // @@protoc_insertion_point(field_mutable_map:apollo.planning.RightOfWayStatus.junction)
  return junction_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SidePassStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SidePassStatus_Status_descriptor_;
}
bool SidePassStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SidePassStatus_Status SidePassStatus::UNKNOWN;
const SidePassStatus_Status SidePassStatus::DRIVE;
const SidePassStatus_Status SidePassStatus::WAIT;
const SidePassStatus_Status SidePassStatus::SIDEPASS;
const SidePassStatus_Status SidePassStatus::Status_MIN;
const SidePassStatus_Status SidePassStatus::Status_MAX;
const int SidePassStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SidePassStatus::kStatusFieldNumber;
const int SidePassStatus::kWaitStartTimeFieldNumber;
const int SidePassStatus::kPassObstacleIdFieldNumber;
const int SidePassStatus::kPassSideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SidePassStatus::SidePassStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SidePassStatus)
}

void SidePassStatus::InitAsDefaultInstance() {
}

SidePassStatus::SidePassStatus(const SidePassStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SidePassStatus)
}

void SidePassStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  wait_start_time_ = 0;
  pass_obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_side_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SidePassStatus::~SidePassStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.SidePassStatus)
  SharedDtor();
}

void SidePassStatus::SharedDtor() {
  pass_obstacle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SidePassStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SidePassStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SidePassStatus_descriptor_;
}

const SidePassStatus& SidePassStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

SidePassStatus* SidePassStatus::default_instance_ = NULL;

SidePassStatus* SidePassStatus::New(::google::protobuf::Arena* arena) const {
  SidePassStatus* n = new SidePassStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SidePassStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SidePassStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SidePassStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SidePassStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(wait_start_time_, status_);
    if (has_pass_obstacle_id()) {
      pass_obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pass_side_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SidePassStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SidePassStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.SidePassStatus.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::SidePassStatus_Status_IsValid(value)) {
            set_status(static_cast< ::apollo::planning::SidePassStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_wait_start_time;
        break;
      }

      // optional double wait_start_time = 2;
      case 2: {
        if (tag == 17) {
         parse_wait_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wait_start_time_)));
          set_has_wait_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pass_obstacle_id;
        break;
      }

      // optional string pass_obstacle_id = 3;
      case 3: {
        if (tag == 26) {
         parse_pass_obstacle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_obstacle_id().data(), this->pass_obstacle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.SidePassStatus.pass_obstacle_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pass_side;
        break;
      }

      // optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
      case 4: {
        if (tag == 32) {
         parse_pass_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ObjectSidePass_Type_IsValid(value)) {
            set_pass_side(static_cast< ::apollo::planning::ObjectSidePass_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SidePassStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SidePassStatus)
  return false;
#undef DO_
}

void SidePassStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SidePassStatus)
  // optional .apollo.planning.SidePassStatus.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional double wait_start_time = 2;
  if (has_wait_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->wait_start_time(), output);
  }

  // optional string pass_obstacle_id = 3;
  if (has_pass_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_obstacle_id().data(), this->pass_obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.SidePassStatus.pass_obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass_obstacle_id(), output);
  }

  // optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
  if (has_pass_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pass_side(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SidePassStatus)
}

::google::protobuf::uint8* SidePassStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SidePassStatus)
  // optional .apollo.planning.SidePassStatus.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional double wait_start_time = 2;
  if (has_wait_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->wait_start_time(), target);
  }

  // optional string pass_obstacle_id = 3;
  if (has_pass_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_obstacle_id().data(), this->pass_obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.SidePassStatus.pass_obstacle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass_obstacle_id(), target);
  }

  // optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
  if (has_pass_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pass_side(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SidePassStatus)
  return target;
}

int SidePassStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SidePassStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.planning.SidePassStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional double wait_start_time = 2;
    if (has_wait_start_time()) {
      total_size += 1 + 8;
    }

    // optional string pass_obstacle_id = 3;
    if (has_pass_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_obstacle_id());
    }

    // optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
    if (has_pass_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pass_side());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SidePassStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SidePassStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SidePassStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SidePassStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SidePassStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SidePassStatus)
    MergeFrom(*source);
  }
}

void SidePassStatus::MergeFrom(const SidePassStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SidePassStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_wait_start_time()) {
      set_wait_start_time(from.wait_start_time());
    }
    if (from.has_pass_obstacle_id()) {
      set_has_pass_obstacle_id();
      pass_obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_obstacle_id_);
    }
    if (from.has_pass_side()) {
      set_pass_side(from.pass_side());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SidePassStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SidePassStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidePassStatus::CopyFrom(const SidePassStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SidePassStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidePassStatus::IsInitialized() const {

  return true;
}

void SidePassStatus::Swap(SidePassStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SidePassStatus::InternalSwap(SidePassStatus* other) {
  std::swap(status_, other->status_);
  std::swap(wait_start_time_, other->wait_start_time_);
  pass_obstacle_id_.Swap(&other->pass_obstacle_id_);
  std::swap(pass_side_, other->pass_side_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SidePassStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SidePassStatus_descriptor_;
  metadata.reflection = SidePassStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SidePassStatus

// optional .apollo.planning.SidePassStatus.Status status = 1;
bool SidePassStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SidePassStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void SidePassStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void SidePassStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::apollo::planning::SidePassStatus_Status SidePassStatus::status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SidePassStatus.status)
  return static_cast< ::apollo::planning::SidePassStatus_Status >(status_);
}
 void SidePassStatus::set_status(::apollo::planning::SidePassStatus_Status value) {
  assert(::apollo::planning::SidePassStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SidePassStatus.status)
}

// optional double wait_start_time = 2;
bool SidePassStatus::has_wait_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SidePassStatus::set_has_wait_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SidePassStatus::clear_has_wait_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SidePassStatus::clear_wait_start_time() {
  wait_start_time_ = 0;
  clear_has_wait_start_time();
}
 double SidePassStatus::wait_start_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SidePassStatus.wait_start_time)
  return wait_start_time_;
}
 void SidePassStatus::set_wait_start_time(double value) {
  set_has_wait_start_time();
  wait_start_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SidePassStatus.wait_start_time)
}

// optional string pass_obstacle_id = 3;
bool SidePassStatus::has_pass_obstacle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SidePassStatus::set_has_pass_obstacle_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SidePassStatus::clear_has_pass_obstacle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SidePassStatus::clear_pass_obstacle_id() {
  pass_obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_obstacle_id();
}
 const ::std::string& SidePassStatus::pass_obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SidePassStatus.pass_obstacle_id)
  return pass_obstacle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SidePassStatus::set_pass_obstacle_id(const ::std::string& value) {
  set_has_pass_obstacle_id();
  pass_obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.SidePassStatus.pass_obstacle_id)
}
 void SidePassStatus::set_pass_obstacle_id(const char* value) {
  set_has_pass_obstacle_id();
  pass_obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.SidePassStatus.pass_obstacle_id)
}
 void SidePassStatus::set_pass_obstacle_id(const char* value, size_t size) {
  set_has_pass_obstacle_id();
  pass_obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.SidePassStatus.pass_obstacle_id)
}
 ::std::string* SidePassStatus::mutable_pass_obstacle_id() {
  set_has_pass_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.SidePassStatus.pass_obstacle_id)
  return pass_obstacle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SidePassStatus::release_pass_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.SidePassStatus.pass_obstacle_id)
  clear_has_pass_obstacle_id();
  return pass_obstacle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SidePassStatus::set_allocated_pass_obstacle_id(::std::string* pass_obstacle_id) {
  if (pass_obstacle_id != NULL) {
    set_has_pass_obstacle_id();
  } else {
    clear_has_pass_obstacle_id();
  }
  pass_obstacle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_obstacle_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SidePassStatus.pass_obstacle_id)
}

// optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
bool SidePassStatus::has_pass_side() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SidePassStatus::set_has_pass_side() {
  _has_bits_[0] |= 0x00000008u;
}
void SidePassStatus::clear_has_pass_side() {
  _has_bits_[0] &= ~0x00000008u;
}
void SidePassStatus::clear_pass_side() {
  pass_side_ = 1;
  clear_has_pass_side();
}
 ::apollo::planning::ObjectSidePass_Type SidePassStatus::pass_side() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SidePassStatus.pass_side)
  return static_cast< ::apollo::planning::ObjectSidePass_Type >(pass_side_);
}
 void SidePassStatus::set_pass_side(::apollo::planning::ObjectSidePass_Type value) {
  assert(::apollo::planning::ObjectSidePass_Type_IsValid(value));
  set_has_pass_side();
  pass_side_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SidePassStatus.pass_side)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* StopSignStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopSignStatus_Status_descriptor_;
}
bool StopSignStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StopSignStatus_Status StopSignStatus::UNKNOWN;
const StopSignStatus_Status StopSignStatus::DRIVE;
const StopSignStatus_Status StopSignStatus::STOP;
const StopSignStatus_Status StopSignStatus::WAIT;
const StopSignStatus_Status StopSignStatus::CREEP;
const StopSignStatus_Status StopSignStatus::STOP_DONE;
const StopSignStatus_Status StopSignStatus::Status_MIN;
const StopSignStatus_Status StopSignStatus::Status_MAX;
const int StopSignStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSignStatus_LaneWatchVehicles::kLaneIdFieldNumber;
const int StopSignStatus_LaneWatchVehicles::kWatchVehiclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignStatus_LaneWatchVehicles::StopSignStatus_LaneWatchVehicles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopSignStatus.LaneWatchVehicles)
}

void StopSignStatus_LaneWatchVehicles::InitAsDefaultInstance() {
}

StopSignStatus_LaneWatchVehicles::StopSignStatus_LaneWatchVehicles(const StopSignStatus_LaneWatchVehicles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignStatus.LaneWatchVehicles)
}

void StopSignStatus_LaneWatchVehicles::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopSignStatus_LaneWatchVehicles::~StopSignStatus_LaneWatchVehicles() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignStatus.LaneWatchVehicles)
  SharedDtor();
}

void StopSignStatus_LaneWatchVehicles::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopSignStatus_LaneWatchVehicles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopSignStatus_LaneWatchVehicles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopSignStatus_LaneWatchVehicles_descriptor_;
}

const StopSignStatus_LaneWatchVehicles& StopSignStatus_LaneWatchVehicles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

StopSignStatus_LaneWatchVehicles* StopSignStatus_LaneWatchVehicles::default_instance_ = NULL;

StopSignStatus_LaneWatchVehicles* StopSignStatus_LaneWatchVehicles::New(::google::protobuf::Arena* arena) const {
  StopSignStatus_LaneWatchVehicles* n = new StopSignStatus_LaneWatchVehicles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopSignStatus_LaneWatchVehicles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  if (has_lane_id()) {
    lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  watch_vehicles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopSignStatus_LaneWatchVehicles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_watch_vehicles;
        break;
      }

      // repeated string watch_vehicles = 2;
      case 2: {
        if (tag == 18) {
         parse_watch_vehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_watch_vehicles()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->watch_vehicles(this->watch_vehicles_size() - 1).data(),
            this->watch_vehicles(this->watch_vehicles_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_watch_vehicles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopSignStatus.LaneWatchVehicles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopSignStatus.LaneWatchVehicles)
  return false;
#undef DO_
}

void StopSignStatus_LaneWatchVehicles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  // optional string lane_id = 1;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // repeated string watch_vehicles = 2;
  for (int i = 0; i < this->watch_vehicles_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->watch_vehicles(i).data(), this->watch_vehicles(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->watch_vehicles(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopSignStatus.LaneWatchVehicles)
}

::google::protobuf::uint8* StopSignStatus_LaneWatchVehicles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  // optional string lane_id = 1;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // repeated string watch_vehicles = 2;
  for (int i = 0; i < this->watch_vehicles_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->watch_vehicles(i).data(), this->watch_vehicles(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->watch_vehicles(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignStatus.LaneWatchVehicles)
  return target;
}

int StopSignStatus_LaneWatchVehicles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  int total_size = 0;

  // optional string lane_id = 1;
  if (has_lane_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // repeated string watch_vehicles = 2;
  total_size += 1 * this->watch_vehicles_size();
  for (int i = 0; i < this->watch_vehicles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->watch_vehicles(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopSignStatus_LaneWatchVehicles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopSignStatus_LaneWatchVehicles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignStatus_LaneWatchVehicles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopSignStatus.LaneWatchVehicles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopSignStatus.LaneWatchVehicles)
    MergeFrom(*source);
  }
}

void StopSignStatus_LaneWatchVehicles::MergeFrom(const StopSignStatus_LaneWatchVehicles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  watch_vehicles_.MergeFrom(from.watch_vehicles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lane_id()) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopSignStatus_LaneWatchVehicles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignStatus_LaneWatchVehicles::CopyFrom(const StopSignStatus_LaneWatchVehicles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignStatus_LaneWatchVehicles::IsInitialized() const {

  return true;
}

void StopSignStatus_LaneWatchVehicles::Swap(StopSignStatus_LaneWatchVehicles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignStatus_LaneWatchVehicles::InternalSwap(StopSignStatus_LaneWatchVehicles* other) {
  lane_id_.Swap(&other->lane_id_);
  watch_vehicles_.UnsafeArenaSwap(&other->watch_vehicles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopSignStatus_LaneWatchVehicles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopSignStatus_LaneWatchVehicles_descriptor_;
  metadata.reflection = StopSignStatus_LaneWatchVehicles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSignStatus::kStopSignIdFieldNumber;
const int StopSignStatus::kStatusFieldNumber;
const int StopSignStatus::kStopStartTimeFieldNumber;
const int StopSignStatus::kLaneWatchVehiclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignStatus::StopSignStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopSignStatus)
}

void StopSignStatus::InitAsDefaultInstance() {
}

StopSignStatus::StopSignStatus(const StopSignStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignStatus)
}

void StopSignStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stop_sign_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  stop_start_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopSignStatus::~StopSignStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignStatus)
  SharedDtor();
}

void StopSignStatus::SharedDtor() {
  stop_sign_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopSignStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopSignStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopSignStatus_descriptor_;
}

const StopSignStatus& StopSignStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

StopSignStatus* StopSignStatus::default_instance_ = NULL;

StopSignStatus* StopSignStatus::New(::google::protobuf::Arena* arena) const {
  StopSignStatus* n = new StopSignStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopSignStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignStatus)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_stop_sign_id()) {
      stop_sign_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
    stop_start_time_ = 0;
  }
  lane_watch_vehicles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopSignStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopSignStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stop_sign_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_sign_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_sign_id().data(), this->stop_sign_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopSignStatus.stop_sign_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .apollo.planning.StopSignStatus.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::StopSignStatus_Status_IsValid(value)) {
            set_status(static_cast< ::apollo::planning::StopSignStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_stop_start_time;
        break;
      }

      // optional double stop_start_time = 3;
      case 3: {
        if (tag == 25) {
         parse_stop_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_start_time_)));
          set_has_stop_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lane_watch_vehicles;
        break;
      }

      // repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
      case 4: {
        if (tag == 34) {
         parse_lane_watch_vehicles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_watch_vehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_watch_vehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_lane_watch_vehicles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopSignStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopSignStatus)
  return false;
#undef DO_
}

void StopSignStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopSignStatus)
  // optional string stop_sign_id = 1;
  if (has_stop_sign_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign_id().data(), this->stop_sign_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.stop_sign_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stop_sign_id(), output);
  }

  // optional .apollo.planning.StopSignStatus.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional double stop_start_time = 3;
  if (has_stop_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stop_start_time(), output);
  }

  // repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
  for (unsigned int i = 0, n = this->lane_watch_vehicles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lane_watch_vehicles(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopSignStatus)
}

::google::protobuf::uint8* StopSignStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignStatus)
  // optional string stop_sign_id = 1;
  if (has_stop_sign_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign_id().data(), this->stop_sign_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.stop_sign_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stop_sign_id(), target);
  }

  // optional .apollo.planning.StopSignStatus.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional double stop_start_time = 3;
  if (has_stop_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stop_start_time(), target);
  }

  // repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
  for (unsigned int i = 0, n = this->lane_watch_vehicles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->lane_watch_vehicles(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignStatus)
  return target;
}

int StopSignStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string stop_sign_id = 1;
    if (has_stop_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_sign_id());
    }

    // optional .apollo.planning.StopSignStatus.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional double stop_start_time = 3;
    if (has_stop_start_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
  total_size += 1 * this->lane_watch_vehicles_size();
  for (int i = 0; i < this->lane_watch_vehicles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_watch_vehicles(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopSignStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopSignStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopSignStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopSignStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopSignStatus)
    MergeFrom(*source);
  }
}

void StopSignStatus::MergeFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lane_watch_vehicles_.MergeFrom(from.lane_watch_vehicles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_sign_id()) {
      set_has_stop_sign_id();
      stop_sign_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_sign_id_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_stop_start_time()) {
      set_stop_start_time(from.stop_start_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopSignStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignStatus::CopyFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignStatus::IsInitialized() const {

  return true;
}

void StopSignStatus::Swap(StopSignStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignStatus::InternalSwap(StopSignStatus* other) {
  stop_sign_id_.Swap(&other->stop_sign_id_);
  std::swap(status_, other->status_);
  std::swap(stop_start_time_, other->stop_start_time_);
  lane_watch_vehicles_.UnsafeArenaSwap(&other->lane_watch_vehicles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopSignStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopSignStatus_descriptor_;
  metadata.reflection = StopSignStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopSignStatus_LaneWatchVehicles

// optional string lane_id = 1;
bool StopSignStatus_LaneWatchVehicles::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopSignStatus_LaneWatchVehicles::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StopSignStatus_LaneWatchVehicles::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopSignStatus_LaneWatchVehicles::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
 const ::std::string& StopSignStatus_LaneWatchVehicles::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopSignStatus_LaneWatchVehicles::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id)
}
 void StopSignStatus_LaneWatchVehicles::set_lane_id(const char* value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id)
}
 void StopSignStatus_LaneWatchVehicles::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id)
}
 ::std::string* StopSignStatus_LaneWatchVehicles::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopSignStatus_LaneWatchVehicles::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopSignStatus_LaneWatchVehicles::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id)
}

// repeated string watch_vehicles = 2;
int StopSignStatus_LaneWatchVehicles::watch_vehicles_size() const {
  return watch_vehicles_.size();
}
void StopSignStatus_LaneWatchVehicles::clear_watch_vehicles() {
  watch_vehicles_.Clear();
}
 const ::std::string& StopSignStatus_LaneWatchVehicles::watch_vehicles(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
  return watch_vehicles_.Get(index);
}
 ::std::string* StopSignStatus_LaneWatchVehicles::mutable_watch_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
  return watch_vehicles_.Mutable(index);
}
 void StopSignStatus_LaneWatchVehicles::set_watch_vehicles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
  watch_vehicles_.Mutable(index)->assign(value);
}
 void StopSignStatus_LaneWatchVehicles::set_watch_vehicles(int index, const char* value) {
  watch_vehicles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
}
 void StopSignStatus_LaneWatchVehicles::set_watch_vehicles(int index, const char* value, size_t size) {
  watch_vehicles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
}
 ::std::string* StopSignStatus_LaneWatchVehicles::add_watch_vehicles() {
  // @@protoc_insertion_point(field_add_mutable:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
  return watch_vehicles_.Add();
}
 void StopSignStatus_LaneWatchVehicles::add_watch_vehicles(const ::std::string& value) {
  watch_vehicles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
}
 void StopSignStatus_LaneWatchVehicles::add_watch_vehicles(const char* value) {
  watch_vehicles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
}
 void StopSignStatus_LaneWatchVehicles::add_watch_vehicles(const char* value, size_t size) {
  watch_vehicles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StopSignStatus_LaneWatchVehicles::watch_vehicles() const {
  // @@protoc_insertion_point(field_list:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
  return watch_vehicles_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StopSignStatus_LaneWatchVehicles::mutable_watch_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles)
  return &watch_vehicles_;
}

// -------------------------------------------------------------------

// StopSignStatus

// optional string stop_sign_id = 1;
bool StopSignStatus::has_stop_sign_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopSignStatus::set_has_stop_sign_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StopSignStatus::clear_has_stop_sign_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopSignStatus::clear_stop_sign_id() {
  stop_sign_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stop_sign_id();
}
 const ::std::string& StopSignStatus::stop_sign_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignStatus.stop_sign_id)
  return stop_sign_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopSignStatus::set_stop_sign_id(const ::std::string& value) {
  set_has_stop_sign_id();
  stop_sign_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignStatus.stop_sign_id)
}
 void StopSignStatus::set_stop_sign_id(const char* value) {
  set_has_stop_sign_id();
  stop_sign_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.StopSignStatus.stop_sign_id)
}
 void StopSignStatus::set_stop_sign_id(const char* value, size_t size) {
  set_has_stop_sign_id();
  stop_sign_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.StopSignStatus.stop_sign_id)
}
 ::std::string* StopSignStatus::mutable_stop_sign_id() {
  set_has_stop_sign_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.StopSignStatus.stop_sign_id)
  return stop_sign_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopSignStatus::release_stop_sign_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.StopSignStatus.stop_sign_id)
  clear_has_stop_sign_id();
  return stop_sign_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopSignStatus::set_allocated_stop_sign_id(::std::string* stop_sign_id) {
  if (stop_sign_id != NULL) {
    set_has_stop_sign_id();
  } else {
    clear_has_stop_sign_id();
  }
  stop_sign_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stop_sign_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.StopSignStatus.stop_sign_id)
}

// optional .apollo.planning.StopSignStatus.Status status = 2;
bool StopSignStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopSignStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void StopSignStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopSignStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::apollo::planning::StopSignStatus_Status StopSignStatus::status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignStatus.status)
  return static_cast< ::apollo::planning::StopSignStatus_Status >(status_);
}
 void StopSignStatus::set_status(::apollo::planning::StopSignStatus_Status value) {
  assert(::apollo::planning::StopSignStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignStatus.status)
}

// optional double stop_start_time = 3;
bool StopSignStatus::has_stop_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopSignStatus::set_has_stop_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void StopSignStatus::clear_has_stop_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopSignStatus::clear_stop_start_time() {
  stop_start_time_ = 0;
  clear_has_stop_start_time();
}
 double StopSignStatus::stop_start_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignStatus.stop_start_time)
  return stop_start_time_;
}
 void StopSignStatus::set_stop_start_time(double value) {
  set_has_stop_start_time();
  stop_start_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignStatus.stop_start_time)
}

// repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
int StopSignStatus::lane_watch_vehicles_size() const {
  return lane_watch_vehicles_.size();
}
void StopSignStatus::clear_lane_watch_vehicles() {
  lane_watch_vehicles_.Clear();
}
const ::apollo::planning::StopSignStatus_LaneWatchVehicles& StopSignStatus::lane_watch_vehicles(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignStatus.lane_watch_vehicles)
  return lane_watch_vehicles_.Get(index);
}
::apollo::planning::StopSignStatus_LaneWatchVehicles* StopSignStatus::mutable_lane_watch_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.StopSignStatus.lane_watch_vehicles)
  return lane_watch_vehicles_.Mutable(index);
}
::apollo::planning::StopSignStatus_LaneWatchVehicles* StopSignStatus::add_lane_watch_vehicles() {
  // @@protoc_insertion_point(field_add:apollo.planning.StopSignStatus.lane_watch_vehicles)
  return lane_watch_vehicles_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::StopSignStatus_LaneWatchVehicles >*
StopSignStatus::mutable_lane_watch_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.StopSignStatus.lane_watch_vehicles)
  return &lane_watch_vehicles_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::StopSignStatus_LaneWatchVehicles >&
StopSignStatus::lane_watch_vehicles() const {
  // @@protoc_insertion_point(field_list:apollo.planning.StopSignStatus.lane_watch_vehicles)
  return lane_watch_vehicles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestinationStatus::kHasPassedDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestinationStatus::DestinationStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DestinationStatus)
}

void DestinationStatus::InitAsDefaultInstance() {
}

DestinationStatus::DestinationStatus(const DestinationStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DestinationStatus)
}

void DestinationStatus::SharedCtor() {
  _cached_size_ = 0;
  has_passed_destination_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestinationStatus::~DestinationStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.DestinationStatus)
  SharedDtor();
}

void DestinationStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestinationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestinationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestinationStatus_descriptor_;
}

const DestinationStatus& DestinationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

DestinationStatus* DestinationStatus::default_instance_ = NULL;

DestinationStatus* DestinationStatus::New(::google::protobuf::Arena* arena) const {
  DestinationStatus* n = new DestinationStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestinationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DestinationStatus)
  has_passed_destination_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DestinationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DestinationStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_passed_destination = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_passed_destination_)));
          set_has_has_passed_destination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DestinationStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DestinationStatus)
  return false;
#undef DO_
}

void DestinationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DestinationStatus)
  // optional bool has_passed_destination = 1 [default = false];
  if (has_has_passed_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_passed_destination(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DestinationStatus)
}

::google::protobuf::uint8* DestinationStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DestinationStatus)
  // optional bool has_passed_destination = 1 [default = false];
  if (has_has_passed_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_passed_destination(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DestinationStatus)
  return target;
}

int DestinationStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DestinationStatus)
  int total_size = 0;

  // optional bool has_passed_destination = 1 [default = false];
  if (has_has_passed_destination()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestinationStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DestinationStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DestinationStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DestinationStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DestinationStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DestinationStatus)
    MergeFrom(*source);
  }
}

void DestinationStatus::MergeFrom(const DestinationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DestinationStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_passed_destination()) {
      set_has_passed_destination(from.has_passed_destination());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DestinationStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DestinationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationStatus::CopyFrom(const DestinationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DestinationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationStatus::IsInitialized() const {

  return true;
}

void DestinationStatus::Swap(DestinationStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestinationStatus::InternalSwap(DestinationStatus* other) {
  std::swap(has_passed_destination_, other->has_passed_destination_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestinationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestinationStatus_descriptor_;
  metadata.reflection = DestinationStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestinationStatus

// optional bool has_passed_destination = 1 [default = false];
bool DestinationStatus::has_has_passed_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DestinationStatus::set_has_has_passed_destination() {
  _has_bits_[0] |= 0x00000001u;
}
void DestinationStatus::clear_has_has_passed_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
void DestinationStatus::clear_has_passed_destination() {
  has_passed_destination_ = false;
  clear_has_has_passed_destination();
}
 bool DestinationStatus::has_passed_destination() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DestinationStatus.has_passed_destination)
  return has_passed_destination_;
}
 void DestinationStatus::set_has_passed_destination(bool value) {
  set_has_has_passed_destination();
  has_passed_destination_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DestinationStatus.has_passed_destination)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningStatus::kChangeLaneFieldNumber;
const int PlanningStatus::kCrosswalkFieldNumber;
const int PlanningStatus::kEngageAdviceFieldNumber;
const int PlanningStatus::kReroutingFieldNumber;
const int PlanningStatus::kRightOfWayFieldNumber;
const int PlanningStatus::kSidePassFieldNumber;
const int PlanningStatus::kStopSignFieldNumber;
const int PlanningStatus::kDestinationFieldNumber;
const int PlanningStatus::kPullOverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningStatus::PlanningStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningStatus)
}

void PlanningStatus::InitAsDefaultInstance() {
  change_lane_ = const_cast< ::apollo::planning::ChangeLaneStatus*>(&::apollo::planning::ChangeLaneStatus::default_instance());
  crosswalk_ = const_cast< ::apollo::planning::CrosswalkStatus*>(&::apollo::planning::CrosswalkStatus::default_instance());
  engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(&::apollo::common::EngageAdvice::default_instance());
  rerouting_ = const_cast< ::apollo::planning::ReroutingStatus*>(&::apollo::planning::ReroutingStatus::default_instance());
  right_of_way_ = const_cast< ::apollo::planning::RightOfWayStatus*>(&::apollo::planning::RightOfWayStatus::default_instance());
  side_pass_ = const_cast< ::apollo::planning::SidePassStatus*>(&::apollo::planning::SidePassStatus::default_instance());
  stop_sign_ = const_cast< ::apollo::planning::StopSignStatus*>(&::apollo::planning::StopSignStatus::default_instance());
  destination_ = const_cast< ::apollo::planning::DestinationStatus*>(&::apollo::planning::DestinationStatus::default_instance());
  pull_over_ = const_cast< ::apollo::planning::PullOverStatus*>(&::apollo::planning::PullOverStatus::default_instance());
}

PlanningStatus::PlanningStatus(const PlanningStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningStatus)
}

void PlanningStatus::SharedCtor() {
  _cached_size_ = 0;
  change_lane_ = NULL;
  crosswalk_ = NULL;
  engage_advice_ = NULL;
  rerouting_ = NULL;
  right_of_way_ = NULL;
  side_pass_ = NULL;
  stop_sign_ = NULL;
  destination_ = NULL;
  pull_over_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanningStatus::~PlanningStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningStatus)
  SharedDtor();
}

void PlanningStatus::SharedDtor() {
  if (this != default_instance_) {
    delete change_lane_;
    delete crosswalk_;
    delete engage_advice_;
    delete rerouting_;
    delete right_of_way_;
    delete side_pass_;
    delete stop_sign_;
    delete destination_;
    delete pull_over_;
  }
}

void PlanningStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningStatus_descriptor_;
}

const PlanningStatus& PlanningStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5fstatus_2eproto();
  return *default_instance_;
}

PlanningStatus* PlanningStatus::default_instance_ = NULL;

PlanningStatus* PlanningStatus::New(::google::protobuf::Arena* arena) const {
  PlanningStatus* n = new PlanningStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningStatus)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_change_lane()) {
      if (change_lane_ != NULL) change_lane_->::apollo::planning::ChangeLaneStatus::Clear();
    }
    if (has_crosswalk()) {
      if (crosswalk_ != NULL) crosswalk_->::apollo::planning::CrosswalkStatus::Clear();
    }
    if (has_engage_advice()) {
      if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
    }
    if (has_rerouting()) {
      if (rerouting_ != NULL) rerouting_->::apollo::planning::ReroutingStatus::Clear();
    }
    if (has_right_of_way()) {
      if (right_of_way_ != NULL) right_of_way_->::apollo::planning::RightOfWayStatus::Clear();
    }
    if (has_side_pass()) {
      if (side_pass_ != NULL) side_pass_->::apollo::planning::SidePassStatus::Clear();
    }
    if (has_stop_sign()) {
      if (stop_sign_ != NULL) stop_sign_->::apollo::planning::StopSignStatus::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::apollo::planning::DestinationStatus::Clear();
    }
  }
  if (has_pull_over()) {
    if (pull_over_ != NULL) pull_over_->::apollo::planning::PullOverStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlanningStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ChangeLaneStatus change_lane = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_crosswalk;
        break;
      }

      // optional .apollo.planning.CrosswalkStatus crosswalk = 2;
      case 2: {
        if (tag == 18) {
         parse_crosswalk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_engage_advice;
        break;
      }

      // optional .apollo.common.EngageAdvice engage_advice = 3;
      case 3: {
        if (tag == 26) {
         parse_engage_advice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rerouting;
        break;
      }

      // optional .apollo.planning.ReroutingStatus rerouting = 4;
      case 4: {
        if (tag == 34) {
         parse_rerouting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rerouting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_right_of_way;
        break;
      }

      // optional .apollo.planning.RightOfWayStatus right_of_way = 5;
      case 5: {
        if (tag == 42) {
         parse_right_of_way:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_of_way()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_side_pass;
        break;
      }

      // optional .apollo.planning.SidePassStatus side_pass = 6;
      case 6: {
        if (tag == 50) {
         parse_side_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_side_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stop_sign;
        break;
      }

      // optional .apollo.planning.StopSignStatus stop_sign = 7;
      case 7: {
        if (tag == 58) {
         parse_stop_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_destination;
        break;
      }

      // optional .apollo.planning.DestinationStatus destination = 8;
      case 8: {
        if (tag == 66) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pull_over;
        break;
      }

      // optional .apollo.planning.PullOverStatus pull_over = 9;
      case 9: {
        if (tag == 74) {
         parse_pull_over:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull_over()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningStatus)
  return false;
#undef DO_
}

void PlanningStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningStatus)
  // optional .apollo.planning.ChangeLaneStatus change_lane = 1;
  if (has_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->change_lane_, output);
  }

  // optional .apollo.planning.CrosswalkStatus crosswalk = 2;
  if (has_crosswalk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->crosswalk_, output);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 3;
  if (has_engage_advice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->engage_advice_, output);
  }

  // optional .apollo.planning.ReroutingStatus rerouting = 4;
  if (has_rerouting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rerouting_, output);
  }

  // optional .apollo.planning.RightOfWayStatus right_of_way = 5;
  if (has_right_of_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->right_of_way_, output);
  }

  // optional .apollo.planning.SidePassStatus side_pass = 6;
  if (has_side_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->side_pass_, output);
  }

  // optional .apollo.planning.StopSignStatus stop_sign = 7;
  if (has_stop_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stop_sign_, output);
  }

  // optional .apollo.planning.DestinationStatus destination = 8;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->destination_, output);
  }

  // optional .apollo.planning.PullOverStatus pull_over = 9;
  if (has_pull_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->pull_over_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningStatus)
}

::google::protobuf::uint8* PlanningStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningStatus)
  // optional .apollo.planning.ChangeLaneStatus change_lane = 1;
  if (has_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->change_lane_, false, target);
  }

  // optional .apollo.planning.CrosswalkStatus crosswalk = 2;
  if (has_crosswalk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->crosswalk_, false, target);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 3;
  if (has_engage_advice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->engage_advice_, false, target);
  }

  // optional .apollo.planning.ReroutingStatus rerouting = 4;
  if (has_rerouting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rerouting_, false, target);
  }

  // optional .apollo.planning.RightOfWayStatus right_of_way = 5;
  if (has_right_of_way()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->right_of_way_, false, target);
  }

  // optional .apollo.planning.SidePassStatus side_pass = 6;
  if (has_side_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->side_pass_, false, target);
  }

  // optional .apollo.planning.StopSignStatus stop_sign = 7;
  if (has_stop_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stop_sign_, false, target);
  }

  // optional .apollo.planning.DestinationStatus destination = 8;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->destination_, false, target);
  }

  // optional .apollo.planning.PullOverStatus pull_over = 9;
  if (has_pull_over()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->pull_over_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningStatus)
  return target;
}

int PlanningStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.ChangeLaneStatus change_lane = 1;
    if (has_change_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_lane_);
    }

    // optional .apollo.planning.CrosswalkStatus crosswalk = 2;
    if (has_crosswalk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crosswalk_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 3;
    if (has_engage_advice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engage_advice_);
    }

    // optional .apollo.planning.ReroutingStatus rerouting = 4;
    if (has_rerouting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rerouting_);
    }

    // optional .apollo.planning.RightOfWayStatus right_of_way = 5;
    if (has_right_of_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_of_way_);
    }

    // optional .apollo.planning.SidePassStatus side_pass = 6;
    if (has_side_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->side_pass_);
    }

    // optional .apollo.planning.StopSignStatus stop_sign = 7;
    if (has_stop_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_sign_);
    }

    // optional .apollo.planning.DestinationStatus destination = 8;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

  }
  // optional .apollo.planning.PullOverStatus pull_over = 9;
  if (has_pull_over()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pull_over_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlanningStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningStatus)
    MergeFrom(*source);
  }
}

void PlanningStatus::MergeFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_lane()) {
      mutable_change_lane()->::apollo::planning::ChangeLaneStatus::MergeFrom(from.change_lane());
    }
    if (from.has_crosswalk()) {
      mutable_crosswalk()->::apollo::planning::CrosswalkStatus::MergeFrom(from.crosswalk());
    }
    if (from.has_engage_advice()) {
      mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (from.has_rerouting()) {
      mutable_rerouting()->::apollo::planning::ReroutingStatus::MergeFrom(from.rerouting());
    }
    if (from.has_right_of_way()) {
      mutable_right_of_way()->::apollo::planning::RightOfWayStatus::MergeFrom(from.right_of_way());
    }
    if (from.has_side_pass()) {
      mutable_side_pass()->::apollo::planning::SidePassStatus::MergeFrom(from.side_pass());
    }
    if (from.has_stop_sign()) {
      mutable_stop_sign()->::apollo::planning::StopSignStatus::MergeFrom(from.stop_sign());
    }
    if (from.has_destination()) {
      mutable_destination()->::apollo::planning::DestinationStatus::MergeFrom(from.destination());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pull_over()) {
      mutable_pull_over()->::apollo::planning::PullOverStatus::MergeFrom(from.pull_over());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlanningStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStatus::CopyFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStatus::IsInitialized() const {

  return true;
}

void PlanningStatus::Swap(PlanningStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningStatus::InternalSwap(PlanningStatus* other) {
  std::swap(change_lane_, other->change_lane_);
  std::swap(crosswalk_, other->crosswalk_);
  std::swap(engage_advice_, other->engage_advice_);
  std::swap(rerouting_, other->rerouting_);
  std::swap(right_of_way_, other->right_of_way_);
  std::swap(side_pass_, other->side_pass_);
  std::swap(stop_sign_, other->stop_sign_);
  std::swap(destination_, other->destination_);
  std::swap(pull_over_, other->pull_over_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningStatus_descriptor_;
  metadata.reflection = PlanningStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningStatus

// optional .apollo.planning.ChangeLaneStatus change_lane = 1;
bool PlanningStatus::has_change_lane() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningStatus::set_has_change_lane() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningStatus::clear_has_change_lane() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningStatus::clear_change_lane() {
  if (change_lane_ != NULL) change_lane_->::apollo::planning::ChangeLaneStatus::Clear();
  clear_has_change_lane();
}
const ::apollo::planning::ChangeLaneStatus& PlanningStatus::change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.change_lane)
  return change_lane_ != NULL ? *change_lane_ : *default_instance_->change_lane_;
}
::apollo::planning::ChangeLaneStatus* PlanningStatus::mutable_change_lane() {
  set_has_change_lane();
  if (change_lane_ == NULL) {
    change_lane_ = new ::apollo::planning::ChangeLaneStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.change_lane)
  return change_lane_;
}
::apollo::planning::ChangeLaneStatus* PlanningStatus::release_change_lane() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.change_lane)
  clear_has_change_lane();
  ::apollo::planning::ChangeLaneStatus* temp = change_lane_;
  change_lane_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_change_lane(::apollo::planning::ChangeLaneStatus* change_lane) {
  delete change_lane_;
  change_lane_ = change_lane;
  if (change_lane) {
    set_has_change_lane();
  } else {
    clear_has_change_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.change_lane)
}

// optional .apollo.planning.CrosswalkStatus crosswalk = 2;
bool PlanningStatus::has_crosswalk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningStatus::set_has_crosswalk() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningStatus::clear_has_crosswalk() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningStatus::clear_crosswalk() {
  if (crosswalk_ != NULL) crosswalk_->::apollo::planning::CrosswalkStatus::Clear();
  clear_has_crosswalk();
}
const ::apollo::planning::CrosswalkStatus& PlanningStatus::crosswalk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.crosswalk)
  return crosswalk_ != NULL ? *crosswalk_ : *default_instance_->crosswalk_;
}
::apollo::planning::CrosswalkStatus* PlanningStatus::mutable_crosswalk() {
  set_has_crosswalk();
  if (crosswalk_ == NULL) {
    crosswalk_ = new ::apollo::planning::CrosswalkStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.crosswalk)
  return crosswalk_;
}
::apollo::planning::CrosswalkStatus* PlanningStatus::release_crosswalk() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.crosswalk)
  clear_has_crosswalk();
  ::apollo::planning::CrosswalkStatus* temp = crosswalk_;
  crosswalk_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_crosswalk(::apollo::planning::CrosswalkStatus* crosswalk) {
  delete crosswalk_;
  crosswalk_ = crosswalk;
  if (crosswalk) {
    set_has_crosswalk();
  } else {
    clear_has_crosswalk();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.crosswalk)
}

// optional .apollo.common.EngageAdvice engage_advice = 3;
bool PlanningStatus::has_engage_advice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanningStatus::set_has_engage_advice() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanningStatus::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningStatus::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
const ::apollo::common::EngageAdvice& PlanningStatus::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_ : *default_instance_->engage_advice_;
}
::apollo::common::EngageAdvice* PlanningStatus::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::apollo::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.engage_advice)
  return engage_advice_;
}
::apollo::common::EngageAdvice* PlanningStatus::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.engage_advice)
  clear_has_engage_advice();
  ::apollo::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.engage_advice)
}

// optional .apollo.planning.ReroutingStatus rerouting = 4;
bool PlanningStatus::has_rerouting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlanningStatus::set_has_rerouting() {
  _has_bits_[0] |= 0x00000008u;
}
void PlanningStatus::clear_has_rerouting() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlanningStatus::clear_rerouting() {
  if (rerouting_ != NULL) rerouting_->::apollo::planning::ReroutingStatus::Clear();
  clear_has_rerouting();
}
const ::apollo::planning::ReroutingStatus& PlanningStatus::rerouting() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.rerouting)
  return rerouting_ != NULL ? *rerouting_ : *default_instance_->rerouting_;
}
::apollo::planning::ReroutingStatus* PlanningStatus::mutable_rerouting() {
  set_has_rerouting();
  if (rerouting_ == NULL) {
    rerouting_ = new ::apollo::planning::ReroutingStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.rerouting)
  return rerouting_;
}
::apollo::planning::ReroutingStatus* PlanningStatus::release_rerouting() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.rerouting)
  clear_has_rerouting();
  ::apollo::planning::ReroutingStatus* temp = rerouting_;
  rerouting_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_rerouting(::apollo::planning::ReroutingStatus* rerouting) {
  delete rerouting_;
  rerouting_ = rerouting;
  if (rerouting) {
    set_has_rerouting();
  } else {
    clear_has_rerouting();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.rerouting)
}

// optional .apollo.planning.RightOfWayStatus right_of_way = 5;
bool PlanningStatus::has_right_of_way() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlanningStatus::set_has_right_of_way() {
  _has_bits_[0] |= 0x00000010u;
}
void PlanningStatus::clear_has_right_of_way() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlanningStatus::clear_right_of_way() {
  if (right_of_way_ != NULL) right_of_way_->::apollo::planning::RightOfWayStatus::Clear();
  clear_has_right_of_way();
}
const ::apollo::planning::RightOfWayStatus& PlanningStatus::right_of_way() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.right_of_way)
  return right_of_way_ != NULL ? *right_of_way_ : *default_instance_->right_of_way_;
}
::apollo::planning::RightOfWayStatus* PlanningStatus::mutable_right_of_way() {
  set_has_right_of_way();
  if (right_of_way_ == NULL) {
    right_of_way_ = new ::apollo::planning::RightOfWayStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.right_of_way)
  return right_of_way_;
}
::apollo::planning::RightOfWayStatus* PlanningStatus::release_right_of_way() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.right_of_way)
  clear_has_right_of_way();
  ::apollo::planning::RightOfWayStatus* temp = right_of_way_;
  right_of_way_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_right_of_way(::apollo::planning::RightOfWayStatus* right_of_way) {
  delete right_of_way_;
  right_of_way_ = right_of_way;
  if (right_of_way) {
    set_has_right_of_way();
  } else {
    clear_has_right_of_way();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.right_of_way)
}

// optional .apollo.planning.SidePassStatus side_pass = 6;
bool PlanningStatus::has_side_pass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlanningStatus::set_has_side_pass() {
  _has_bits_[0] |= 0x00000020u;
}
void PlanningStatus::clear_has_side_pass() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlanningStatus::clear_side_pass() {
  if (side_pass_ != NULL) side_pass_->::apollo::planning::SidePassStatus::Clear();
  clear_has_side_pass();
}
const ::apollo::planning::SidePassStatus& PlanningStatus::side_pass() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.side_pass)
  return side_pass_ != NULL ? *side_pass_ : *default_instance_->side_pass_;
}
::apollo::planning::SidePassStatus* PlanningStatus::mutable_side_pass() {
  set_has_side_pass();
  if (side_pass_ == NULL) {
    side_pass_ = new ::apollo::planning::SidePassStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.side_pass)
  return side_pass_;
}
::apollo::planning::SidePassStatus* PlanningStatus::release_side_pass() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.side_pass)
  clear_has_side_pass();
  ::apollo::planning::SidePassStatus* temp = side_pass_;
  side_pass_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_side_pass(::apollo::planning::SidePassStatus* side_pass) {
  delete side_pass_;
  side_pass_ = side_pass;
  if (side_pass) {
    set_has_side_pass();
  } else {
    clear_has_side_pass();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.side_pass)
}

// optional .apollo.planning.StopSignStatus stop_sign = 7;
bool PlanningStatus::has_stop_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlanningStatus::set_has_stop_sign() {
  _has_bits_[0] |= 0x00000040u;
}
void PlanningStatus::clear_has_stop_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlanningStatus::clear_stop_sign() {
  if (stop_sign_ != NULL) stop_sign_->::apollo::planning::StopSignStatus::Clear();
  clear_has_stop_sign();
}
const ::apollo::planning::StopSignStatus& PlanningStatus::stop_sign() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.stop_sign)
  return stop_sign_ != NULL ? *stop_sign_ : *default_instance_->stop_sign_;
}
::apollo::planning::StopSignStatus* PlanningStatus::mutable_stop_sign() {
  set_has_stop_sign();
  if (stop_sign_ == NULL) {
    stop_sign_ = new ::apollo::planning::StopSignStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.stop_sign)
  return stop_sign_;
}
::apollo::planning::StopSignStatus* PlanningStatus::release_stop_sign() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.stop_sign)
  clear_has_stop_sign();
  ::apollo::planning::StopSignStatus* temp = stop_sign_;
  stop_sign_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_stop_sign(::apollo::planning::StopSignStatus* stop_sign) {
  delete stop_sign_;
  stop_sign_ = stop_sign;
  if (stop_sign) {
    set_has_stop_sign();
  } else {
    clear_has_stop_sign();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.stop_sign)
}

// optional .apollo.planning.DestinationStatus destination = 8;
bool PlanningStatus::has_destination() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlanningStatus::set_has_destination() {
  _has_bits_[0] |= 0x00000080u;
}
void PlanningStatus::clear_has_destination() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlanningStatus::clear_destination() {
  if (destination_ != NULL) destination_->::apollo::planning::DestinationStatus::Clear();
  clear_has_destination();
}
const ::apollo::planning::DestinationStatus& PlanningStatus::destination() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::apollo::planning::DestinationStatus* PlanningStatus::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::apollo::planning::DestinationStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.destination)
  return destination_;
}
::apollo::planning::DestinationStatus* PlanningStatus::release_destination() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.destination)
  clear_has_destination();
  ::apollo::planning::DestinationStatus* temp = destination_;
  destination_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_destination(::apollo::planning::DestinationStatus* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.destination)
}

// optional .apollo.planning.PullOverStatus pull_over = 9;
bool PlanningStatus::has_pull_over() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlanningStatus::set_has_pull_over() {
  _has_bits_[0] |= 0x00000100u;
}
void PlanningStatus::clear_has_pull_over() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlanningStatus::clear_pull_over() {
  if (pull_over_ != NULL) pull_over_->::apollo::planning::PullOverStatus::Clear();
  clear_has_pull_over();
}
const ::apollo::planning::PullOverStatus& PlanningStatus::pull_over() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStatus.pull_over)
  return pull_over_ != NULL ? *pull_over_ : *default_instance_->pull_over_;
}
::apollo::planning::PullOverStatus* PlanningStatus::mutable_pull_over() {
  set_has_pull_over();
  if (pull_over_ == NULL) {
    pull_over_ = new ::apollo::planning::PullOverStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStatus.pull_over)
  return pull_over_;
}
::apollo::planning::PullOverStatus* PlanningStatus::release_pull_over() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStatus.pull_over)
  clear_has_pull_over();
  ::apollo::planning::PullOverStatus* temp = pull_over_;
  pull_over_ = NULL;
  return temp;
}
void PlanningStatus::set_allocated_pull_over(::apollo::planning::PullOverStatus* pull_over) {
  delete pull_over_;
  pull_over_ = pull_over;
  if (pull_over) {
    set_has_pull_over();
  } else {
    clear_has_pull_over();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStatus.pull_over)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
