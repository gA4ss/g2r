// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/decision.proto

#ifndef PROTOBUF_planning_2fdecision_2eproto__INCLUDED
#define PROTOBUF_planning_2fdecision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/geometry.pb.h"
#include "common/vehicle_signal.pb.h"
#include "routing/routing.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fdecision_2eproto();
void protobuf_AssignDesc_planning_2fdecision_2eproto();
void protobuf_ShutdownFile_planning_2fdecision_2eproto();

class DecisionResult;
class EmergencyStopCruiseToStop;
class EmergencyStopHardBrake;
class MainChangeLane;
class MainCruise;
class MainDecision;
class MainEmergencyStop;
class MainMissionComplete;
class MainNotReady;
class MainParking;
class MainStop;
class ObjectAvoid;
class ObjectDecision;
class ObjectDecisionType;
class ObjectDecisions;
class ObjectFollow;
class ObjectIgnore;
class ObjectNudge;
class ObjectOvertake;
class ObjectSidePass;
class ObjectStop;
class ObjectYield;
class TargetLane;

enum ObjectNudge_Type {
  ObjectNudge_Type_LEFT_NUDGE = 1,
  ObjectNudge_Type_RIGHT_NUDGE = 2,
  ObjectNudge_Type_NO_NUDGE = 3
};
bool ObjectNudge_Type_IsValid(int value);
const ObjectNudge_Type ObjectNudge_Type_Type_MIN = ObjectNudge_Type_LEFT_NUDGE;
const ObjectNudge_Type ObjectNudge_Type_Type_MAX = ObjectNudge_Type_NO_NUDGE;
const int ObjectNudge_Type_Type_ARRAYSIZE = ObjectNudge_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor();
inline const ::std::string& ObjectNudge_Type_Name(ObjectNudge_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectNudge_Type_descriptor(), value);
}
inline bool ObjectNudge_Type_Parse(
    const ::std::string& name, ObjectNudge_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectNudge_Type>(
    ObjectNudge_Type_descriptor(), name, value);
}
enum ObjectSidePass_Type {
  ObjectSidePass_Type_LEFT = 1,
  ObjectSidePass_Type_RIGHT = 2
};
bool ObjectSidePass_Type_IsValid(int value);
const ObjectSidePass_Type ObjectSidePass_Type_Type_MIN = ObjectSidePass_Type_LEFT;
const ObjectSidePass_Type ObjectSidePass_Type_Type_MAX = ObjectSidePass_Type_RIGHT;
const int ObjectSidePass_Type_Type_ARRAYSIZE = ObjectSidePass_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor();
inline const ::std::string& ObjectSidePass_Type_Name(ObjectSidePass_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectSidePass_Type_descriptor(), value);
}
inline bool ObjectSidePass_Type_Parse(
    const ::std::string& name, ObjectSidePass_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectSidePass_Type>(
    ObjectSidePass_Type_descriptor(), name, value);
}
enum MainEmergencyStop_ReasonCode {
  MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR = 1,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_COLLISION = 2,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_FIND_PATH = 3,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_MAKE_DECISION = 4,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR = 5
};
bool MainEmergencyStop_ReasonCode_IsValid(int value);
const MainEmergencyStop_ReasonCode MainEmergencyStop_ReasonCode_ReasonCode_MIN = MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR;
const MainEmergencyStop_ReasonCode MainEmergencyStop_ReasonCode_ReasonCode_MAX = MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR;
const int MainEmergencyStop_ReasonCode_ReasonCode_ARRAYSIZE = MainEmergencyStop_ReasonCode_ReasonCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor();
inline const ::std::string& MainEmergencyStop_ReasonCode_Name(MainEmergencyStop_ReasonCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MainEmergencyStop_ReasonCode_descriptor(), value);
}
inline bool MainEmergencyStop_ReasonCode_Parse(
    const ::std::string& name, MainEmergencyStop_ReasonCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MainEmergencyStop_ReasonCode>(
    MainEmergencyStop_ReasonCode_descriptor(), name, value);
}
enum MainChangeLane_Type {
  MainChangeLane_Type_LEFT = 1,
  MainChangeLane_Type_RIGHT = 2
};
bool MainChangeLane_Type_IsValid(int value);
const MainChangeLane_Type MainChangeLane_Type_Type_MIN = MainChangeLane_Type_LEFT;
const MainChangeLane_Type MainChangeLane_Type_Type_MAX = MainChangeLane_Type_RIGHT;
const int MainChangeLane_Type_Type_ARRAYSIZE = MainChangeLane_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor();
inline const ::std::string& MainChangeLane_Type_Name(MainChangeLane_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MainChangeLane_Type_descriptor(), value);
}
inline bool MainChangeLane_Type_Parse(
    const ::std::string& name, MainChangeLane_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MainChangeLane_Type>(
    MainChangeLane_Type_descriptor(), name, value);
}
enum StopReasonCode {
  STOP_REASON_HEAD_VEHICLE = 1,
  STOP_REASON_DESTINATION = 2,
  STOP_REASON_PEDESTRIAN = 3,
  STOP_REASON_OBSTACLE = 4,
  STOP_REASON_PREPARKING = 5,
  STOP_REASON_SIGNAL = 100,
  STOP_REASON_STOP_SIGN = 101,
  STOP_REASON_YIELD_SIGN = 102,
  STOP_REASON_CLEAR_ZONE = 103,
  STOP_REASON_CROSSWALK = 104,
  STOP_REASON_CREEPER = 105,
  STOP_REASON_REFERENCE_END = 106,
  STOP_REASON_YELLOW_SIGNAL = 107,
  STOP_REASON_PULL_OVER = 108
};
bool StopReasonCode_IsValid(int value);
const StopReasonCode StopReasonCode_MIN = STOP_REASON_HEAD_VEHICLE;
const StopReasonCode StopReasonCode_MAX = STOP_REASON_PULL_OVER;
const int StopReasonCode_ARRAYSIZE = StopReasonCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor();
inline const ::std::string& StopReasonCode_Name(StopReasonCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopReasonCode_descriptor(), value);
}
inline bool StopReasonCode_Parse(
    const ::std::string& name, StopReasonCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopReasonCode>(
    StopReasonCode_descriptor(), name, value);
}
// ===================================================================

class TargetLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TargetLane) */ {
 public:
  TargetLane();
  virtual ~TargetLane();

  TargetLane(const TargetLane& from);

  inline TargetLane& operator=(const TargetLane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetLane& default_instance();

  void Swap(TargetLane* other);

  // implements Message ----------------------------------------------

  inline TargetLane* New() const { return New(NULL); }

  TargetLane* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetLane& from);
  void MergeFrom(const TargetLane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double start_s = 2;
  bool has_start_s() const;
  void clear_start_s();
  static const int kStartSFieldNumber = 2;
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 3;
  bool has_end_s() const;
  void clear_end_s();
  static const int kEndSFieldNumber = 3;
  double end_s() const;
  void set_end_s(double value);

  // optional double speed_limit = 4;
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 4;
  double speed_limit() const;
  void set_speed_limit(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.TargetLane)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_start_s();
  inline void clear_has_start_s();
  inline void set_has_end_s();
  inline void clear_has_end_s();
  inline void set_has_speed_limit();
  inline void clear_has_speed_limit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double start_s_;
  double end_s_;
  double speed_limit_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static TargetLane* default_instance_;
};
// -------------------------------------------------------------------

class ObjectIgnore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectIgnore) */ {
 public:
  ObjectIgnore();
  virtual ~ObjectIgnore();

  ObjectIgnore(const ObjectIgnore& from);

  inline ObjectIgnore& operator=(const ObjectIgnore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectIgnore& default_instance();

  void Swap(ObjectIgnore* other);

  // implements Message ----------------------------------------------

  inline ObjectIgnore* New() const { return New(NULL); }

  ObjectIgnore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectIgnore& from);
  void MergeFrom(const ObjectIgnore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectIgnore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectIgnore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectIgnore* default_instance_;
};
// -------------------------------------------------------------------

class ObjectStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectStop) */ {
 public:
  ObjectStop();
  virtual ~ObjectStop();

  ObjectStop(const ObjectStop& from);

  inline ObjectStop& operator=(const ObjectStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectStop& default_instance();

  void Swap(ObjectStop* other);

  // implements Message ----------------------------------------------

  inline ObjectStop* New() const { return New(NULL); }

  ObjectStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectStop& from);
  void MergeFrom(const ObjectStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.StopReasonCode reason_code = 1;
  bool has_reason_code() const;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 1;
  ::apollo::planning::StopReasonCode reason_code() const;
  void set_reason_code(::apollo::planning::StopReasonCode value);

  // optional double distance_s = 2;
  bool has_distance_s() const;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 2;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.common.PointENU stop_point = 3;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 3;
  const ::apollo::common::PointENU& stop_point() const;
  ::apollo::common::PointENU* mutable_stop_point();
  ::apollo::common::PointENU* release_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);

  // optional double stop_heading = 4;
  bool has_stop_heading() const;
  void clear_stop_heading();
  static const int kStopHeadingFieldNumber = 4;
  double stop_heading() const;
  void set_stop_heading(double value);

  // repeated string wait_for_obstacle = 5;
  int wait_for_obstacle_size() const;
  void clear_wait_for_obstacle();
  static const int kWaitForObstacleFieldNumber = 5;
  const ::std::string& wait_for_obstacle(int index) const;
  ::std::string* mutable_wait_for_obstacle(int index);
  void set_wait_for_obstacle(int index, const ::std::string& value);
  void set_wait_for_obstacle(int index, const char* value);
  void set_wait_for_obstacle(int index, const char* value, size_t size);
  ::std::string* add_wait_for_obstacle();
  void add_wait_for_obstacle(const ::std::string& value);
  void add_wait_for_obstacle(const char* value);
  void add_wait_for_obstacle(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& wait_for_obstacle() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wait_for_obstacle();

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectStop)
 private:
  inline void set_has_reason_code();
  inline void clear_has_reason_code();
  inline void set_has_distance_s();
  inline void clear_has_distance_s();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_stop_heading();
  inline void clear_has_stop_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double distance_s_;
  ::apollo::common::PointENU* stop_point_;
  double stop_heading_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wait_for_obstacle_;
  int reason_code_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectStop* default_instance_;
};
// -------------------------------------------------------------------

class ObjectNudge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectNudge) */ {
 public:
  ObjectNudge();
  virtual ~ObjectNudge();

  ObjectNudge(const ObjectNudge& from);

  inline ObjectNudge& operator=(const ObjectNudge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectNudge& default_instance();

  void Swap(ObjectNudge* other);

  // implements Message ----------------------------------------------

  inline ObjectNudge* New() const { return New(NULL); }

  ObjectNudge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectNudge& from);
  void MergeFrom(const ObjectNudge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectNudge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ObjectNudge_Type Type;
  static const Type LEFT_NUDGE =
    ObjectNudge_Type_LEFT_NUDGE;
  static const Type RIGHT_NUDGE =
    ObjectNudge_Type_RIGHT_NUDGE;
  static const Type NO_NUDGE =
    ObjectNudge_Type_NO_NUDGE;
  static inline bool Type_IsValid(int value) {
    return ObjectNudge_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ObjectNudge_Type_Type_MIN;
  static const Type Type_MAX =
    ObjectNudge_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ObjectNudge_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ObjectNudge_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ObjectNudge_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ObjectNudge_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.ObjectNudge.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::planning::ObjectNudge_Type type() const;
  void set_type(::apollo::planning::ObjectNudge_Type value);

  // optional double distance_l = 2;
  bool has_distance_l() const;
  void clear_distance_l();
  static const int kDistanceLFieldNumber = 2;
  double distance_l() const;
  void set_distance_l(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectNudge)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_distance_l();
  inline void clear_has_distance_l();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double distance_l_;
  int type_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectNudge* default_instance_;
};
// -------------------------------------------------------------------

class ObjectYield : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectYield) */ {
 public:
  ObjectYield();
  virtual ~ObjectYield();

  ObjectYield(const ObjectYield& from);

  inline ObjectYield& operator=(const ObjectYield& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectYield& default_instance();

  void Swap(ObjectYield* other);

  // implements Message ----------------------------------------------

  inline ObjectYield* New() const { return New(NULL); }

  ObjectYield* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectYield& from);
  void MergeFrom(const ObjectYield& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectYield* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  bool has_distance_s() const;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.common.PointENU fence_point = 2;
  bool has_fence_point() const;
  void clear_fence_point();
  static const int kFencePointFieldNumber = 2;
  const ::apollo::common::PointENU& fence_point() const;
  ::apollo::common::PointENU* mutable_fence_point();
  ::apollo::common::PointENU* release_fence_point();
  void set_allocated_fence_point(::apollo::common::PointENU* fence_point);

  // optional double fence_heading = 3;
  bool has_fence_heading() const;
  void clear_fence_heading();
  static const int kFenceHeadingFieldNumber = 3;
  double fence_heading() const;
  void set_fence_heading(double value);

  // optional double time_buffer = 4;
  bool has_time_buffer() const;
  void clear_time_buffer();
  static const int kTimeBufferFieldNumber = 4;
  double time_buffer() const;
  void set_time_buffer(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectYield)
 private:
  inline void set_has_distance_s();
  inline void clear_has_distance_s();
  inline void set_has_fence_point();
  inline void clear_has_fence_point();
  inline void set_has_fence_heading();
  inline void clear_has_fence_heading();
  inline void set_has_time_buffer();
  inline void clear_has_time_buffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double distance_s_;
  ::apollo::common::PointENU* fence_point_;
  double fence_heading_;
  double time_buffer_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectYield* default_instance_;
};
// -------------------------------------------------------------------

class ObjectFollow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectFollow) */ {
 public:
  ObjectFollow();
  virtual ~ObjectFollow();

  ObjectFollow(const ObjectFollow& from);

  inline ObjectFollow& operator=(const ObjectFollow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectFollow& default_instance();

  void Swap(ObjectFollow* other);

  // implements Message ----------------------------------------------

  inline ObjectFollow* New() const { return New(NULL); }

  ObjectFollow* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectFollow& from);
  void MergeFrom(const ObjectFollow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectFollow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  bool has_distance_s() const;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.common.PointENU fence_point = 2;
  bool has_fence_point() const;
  void clear_fence_point();
  static const int kFencePointFieldNumber = 2;
  const ::apollo::common::PointENU& fence_point() const;
  ::apollo::common::PointENU* mutable_fence_point();
  ::apollo::common::PointENU* release_fence_point();
  void set_allocated_fence_point(::apollo::common::PointENU* fence_point);

  // optional double fence_heading = 3;
  bool has_fence_heading() const;
  void clear_fence_heading();
  static const int kFenceHeadingFieldNumber = 3;
  double fence_heading() const;
  void set_fence_heading(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectFollow)
 private:
  inline void set_has_distance_s();
  inline void clear_has_distance_s();
  inline void set_has_fence_point();
  inline void clear_has_fence_point();
  inline void set_has_fence_heading();
  inline void clear_has_fence_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double distance_s_;
  ::apollo::common::PointENU* fence_point_;
  double fence_heading_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectFollow* default_instance_;
};
// -------------------------------------------------------------------

class ObjectOvertake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectOvertake) */ {
 public:
  ObjectOvertake();
  virtual ~ObjectOvertake();

  ObjectOvertake(const ObjectOvertake& from);

  inline ObjectOvertake& operator=(const ObjectOvertake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectOvertake& default_instance();

  void Swap(ObjectOvertake* other);

  // implements Message ----------------------------------------------

  inline ObjectOvertake* New() const { return New(NULL); }

  ObjectOvertake* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectOvertake& from);
  void MergeFrom(const ObjectOvertake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectOvertake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance_s = 1;
  bool has_distance_s() const;
  void clear_distance_s();
  static const int kDistanceSFieldNumber = 1;
  double distance_s() const;
  void set_distance_s(double value);

  // optional .apollo.common.PointENU fence_point = 2;
  bool has_fence_point() const;
  void clear_fence_point();
  static const int kFencePointFieldNumber = 2;
  const ::apollo::common::PointENU& fence_point() const;
  ::apollo::common::PointENU* mutable_fence_point();
  ::apollo::common::PointENU* release_fence_point();
  void set_allocated_fence_point(::apollo::common::PointENU* fence_point);

  // optional double fence_heading = 3;
  bool has_fence_heading() const;
  void clear_fence_heading();
  static const int kFenceHeadingFieldNumber = 3;
  double fence_heading() const;
  void set_fence_heading(double value);

  // optional double time_buffer = 4;
  bool has_time_buffer() const;
  void clear_time_buffer();
  static const int kTimeBufferFieldNumber = 4;
  double time_buffer() const;
  void set_time_buffer(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectOvertake)
 private:
  inline void set_has_distance_s();
  inline void clear_has_distance_s();
  inline void set_has_fence_point();
  inline void clear_has_fence_point();
  inline void set_has_fence_heading();
  inline void clear_has_fence_heading();
  inline void set_has_time_buffer();
  inline void clear_has_time_buffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double distance_s_;
  ::apollo::common::PointENU* fence_point_;
  double fence_heading_;
  double time_buffer_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectOvertake* default_instance_;
};
// -------------------------------------------------------------------

class ObjectSidePass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectSidePass) */ {
 public:
  ObjectSidePass();
  virtual ~ObjectSidePass();

  ObjectSidePass(const ObjectSidePass& from);

  inline ObjectSidePass& operator=(const ObjectSidePass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectSidePass& default_instance();

  void Swap(ObjectSidePass* other);

  // implements Message ----------------------------------------------

  inline ObjectSidePass* New() const { return New(NULL); }

  ObjectSidePass* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectSidePass& from);
  void MergeFrom(const ObjectSidePass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectSidePass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ObjectSidePass_Type Type;
  static const Type LEFT =
    ObjectSidePass_Type_LEFT;
  static const Type RIGHT =
    ObjectSidePass_Type_RIGHT;
  static inline bool Type_IsValid(int value) {
    return ObjectSidePass_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ObjectSidePass_Type_Type_MIN;
  static const Type Type_MAX =
    ObjectSidePass_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ObjectSidePass_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ObjectSidePass_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ObjectSidePass_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ObjectSidePass_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::planning::ObjectSidePass_Type type() const;
  void set_type(::apollo::planning::ObjectSidePass_Type value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectSidePass)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectSidePass* default_instance_;
};
// -------------------------------------------------------------------

class ObjectAvoid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectAvoid) */ {
 public:
  ObjectAvoid();
  virtual ~ObjectAvoid();

  ObjectAvoid(const ObjectAvoid& from);

  inline ObjectAvoid& operator=(const ObjectAvoid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectAvoid& default_instance();

  void Swap(ObjectAvoid* other);

  // implements Message ----------------------------------------------

  inline ObjectAvoid* New() const { return New(NULL); }

  ObjectAvoid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectAvoid& from);
  void MergeFrom(const ObjectAvoid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectAvoid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectAvoid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectAvoid* default_instance_;
};
// -------------------------------------------------------------------

class ObjectDecisionType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectDecisionType) */ {
 public:
  ObjectDecisionType();
  virtual ~ObjectDecisionType();

  ObjectDecisionType(const ObjectDecisionType& from);

  inline ObjectDecisionType& operator=(const ObjectDecisionType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDecisionType& default_instance();

  enum ObjectTagCase {
    kIgnore = 1,
    kStop = 2,
    kFollow = 3,
    kYield = 4,
    kOvertake = 5,
    kNudge = 6,
    kSidepass = 7,
    kAvoid = 8,
    OBJECT_TAG_NOT_SET = 0,
  };

  void Swap(ObjectDecisionType* other);

  // implements Message ----------------------------------------------

  inline ObjectDecisionType* New() const { return New(NULL); }

  ObjectDecisionType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectDecisionType& from);
  void MergeFrom(const ObjectDecisionType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDecisionType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.ObjectIgnore ignore = 1;
  bool has_ignore() const;
  void clear_ignore();
  static const int kIgnoreFieldNumber = 1;
  const ::apollo::planning::ObjectIgnore& ignore() const;
  ::apollo::planning::ObjectIgnore* mutable_ignore();
  ::apollo::planning::ObjectIgnore* release_ignore();
  void set_allocated_ignore(::apollo::planning::ObjectIgnore* ignore);

  // optional .apollo.planning.ObjectStop stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::apollo::planning::ObjectStop& stop() const;
  ::apollo::planning::ObjectStop* mutable_stop();
  ::apollo::planning::ObjectStop* release_stop();
  void set_allocated_stop(::apollo::planning::ObjectStop* stop);

  // optional .apollo.planning.ObjectFollow follow = 3;
  bool has_follow() const;
  void clear_follow();
  static const int kFollowFieldNumber = 3;
  const ::apollo::planning::ObjectFollow& follow() const;
  ::apollo::planning::ObjectFollow* mutable_follow();
  ::apollo::planning::ObjectFollow* release_follow();
  void set_allocated_follow(::apollo::planning::ObjectFollow* follow);

  // optional .apollo.planning.ObjectYield yield = 4;
  bool has_yield() const;
  void clear_yield();
  static const int kYieldFieldNumber = 4;
  const ::apollo::planning::ObjectYield& yield() const;
  ::apollo::planning::ObjectYield* mutable_yield();
  ::apollo::planning::ObjectYield* release_yield();
  void set_allocated_yield(::apollo::planning::ObjectYield* yield);

  // optional .apollo.planning.ObjectOvertake overtake = 5;
  bool has_overtake() const;
  void clear_overtake();
  static const int kOvertakeFieldNumber = 5;
  const ::apollo::planning::ObjectOvertake& overtake() const;
  ::apollo::planning::ObjectOvertake* mutable_overtake();
  ::apollo::planning::ObjectOvertake* release_overtake();
  void set_allocated_overtake(::apollo::planning::ObjectOvertake* overtake);

  // optional .apollo.planning.ObjectNudge nudge = 6;
  bool has_nudge() const;
  void clear_nudge();
  static const int kNudgeFieldNumber = 6;
  const ::apollo::planning::ObjectNudge& nudge() const;
  ::apollo::planning::ObjectNudge* mutable_nudge();
  ::apollo::planning::ObjectNudge* release_nudge();
  void set_allocated_nudge(::apollo::planning::ObjectNudge* nudge);

  // optional .apollo.planning.ObjectSidePass sidepass = 7;
  bool has_sidepass() const;
  void clear_sidepass();
  static const int kSidepassFieldNumber = 7;
  const ::apollo::planning::ObjectSidePass& sidepass() const;
  ::apollo::planning::ObjectSidePass* mutable_sidepass();
  ::apollo::planning::ObjectSidePass* release_sidepass();
  void set_allocated_sidepass(::apollo::planning::ObjectSidePass* sidepass);

  // optional .apollo.planning.ObjectAvoid avoid = 8;
  bool has_avoid() const;
  void clear_avoid();
  static const int kAvoidFieldNumber = 8;
  const ::apollo::planning::ObjectAvoid& avoid() const;
  ::apollo::planning::ObjectAvoid* mutable_avoid();
  ::apollo::planning::ObjectAvoid* release_avoid();
  void set_allocated_avoid(::apollo::planning::ObjectAvoid* avoid);

  ObjectTagCase object_tag_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectDecisionType)
 private:
  inline void set_has_ignore();
  inline void set_has_stop();
  inline void set_has_follow();
  inline void set_has_yield();
  inline void set_has_overtake();
  inline void set_has_nudge();
  inline void set_has_sidepass();
  inline void set_has_avoid();

  inline bool has_object_tag() const;
  void clear_object_tag();
  inline void clear_has_object_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ObjectTagUnion {
    ObjectTagUnion() {}
    ::apollo::planning::ObjectIgnore* ignore_;
    ::apollo::planning::ObjectStop* stop_;
    ::apollo::planning::ObjectFollow* follow_;
    ::apollo::planning::ObjectYield* yield_;
    ::apollo::planning::ObjectOvertake* overtake_;
    ::apollo::planning::ObjectNudge* nudge_;
    ::apollo::planning::ObjectSidePass* sidepass_;
    ::apollo::planning::ObjectAvoid* avoid_;
  } object_tag_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectDecisionType* default_instance_;
};
// -------------------------------------------------------------------

class ObjectDecision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectDecision) */ {
 public:
  ObjectDecision();
  virtual ~ObjectDecision();

  ObjectDecision(const ObjectDecision& from);

  inline ObjectDecision& operator=(const ObjectDecision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDecision& default_instance();

  void Swap(ObjectDecision* other);

  // implements Message ----------------------------------------------

  inline ObjectDecision* New() const { return New(NULL); }

  ObjectDecision* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectDecision& from);
  void MergeFrom(const ObjectDecision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDecision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 perception_id = 2;
  bool has_perception_id() const;
  void clear_perception_id();
  static const int kPerceptionIdFieldNumber = 2;
  ::google::protobuf::int32 perception_id() const;
  void set_perception_id(::google::protobuf::int32 value);

  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  int object_decision_size() const;
  void clear_object_decision();
  static const int kObjectDecisionFieldNumber = 3;
  const ::apollo::planning::ObjectDecisionType& object_decision(int index) const;
  ::apollo::planning::ObjectDecisionType* mutable_object_decision(int index);
  ::apollo::planning::ObjectDecisionType* add_object_decision();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >*
      mutable_object_decision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >&
      object_decision() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectDecision)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_perception_id();
  inline void clear_has_perception_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecisionType > object_decision_;
  ::google::protobuf::int32 perception_id_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectDecision* default_instance_;
};
// -------------------------------------------------------------------

class ObjectDecisions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectDecisions) */ {
 public:
  ObjectDecisions();
  virtual ~ObjectDecisions();

  ObjectDecisions(const ObjectDecisions& from);

  inline ObjectDecisions& operator=(const ObjectDecisions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDecisions& default_instance();

  void Swap(ObjectDecisions* other);

  // implements Message ----------------------------------------------

  inline ObjectDecisions* New() const { return New(NULL); }

  ObjectDecisions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectDecisions& from);
  void MergeFrom(const ObjectDecisions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDecisions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.ObjectDecision decision = 1;
  int decision_size() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 1;
  const ::apollo::planning::ObjectDecision& decision(int index) const;
  ::apollo::planning::ObjectDecision* mutable_decision(int index);
  ::apollo::planning::ObjectDecision* add_decision();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecision >*
      mutable_decision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecision >&
      decision() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectDecisions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecision > decision_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static ObjectDecisions* default_instance_;
};
// -------------------------------------------------------------------

class MainStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainStop) */ {
 public:
  MainStop();
  virtual ~MainStop();

  MainStop(const MainStop& from);

  inline MainStop& operator=(const MainStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainStop& default_instance();

  void Swap(MainStop* other);

  // implements Message ----------------------------------------------

  inline MainStop* New() const { return New(NULL); }

  MainStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainStop& from);
  void MergeFrom(const MainStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.StopReasonCode reason_code = 1;
  bool has_reason_code() const;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 1;
  ::apollo::planning::StopReasonCode reason_code() const;
  void set_reason_code(::apollo::planning::StopReasonCode value);

  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional .apollo.common.PointENU stop_point = 3;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 3;
  const ::apollo::common::PointENU& stop_point() const;
  ::apollo::common::PointENU* mutable_stop_point();
  ::apollo::common::PointENU* release_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);

  // optional double stop_heading = 4;
  bool has_stop_heading() const;
  void clear_stop_heading();
  static const int kStopHeadingFieldNumber = 4;
  double stop_heading() const;
  void set_stop_heading(double value);

  // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
  bool has_change_lane_type() const;
  void clear_change_lane_type();
  static const int kChangeLaneTypeFieldNumber = 5;
  ::apollo::routing::ChangeLaneType change_lane_type() const;
  void set_change_lane_type(::apollo::routing::ChangeLaneType value);

  // @@protoc_insertion_point(class_scope:apollo.planning.MainStop)
 private:
  inline void set_has_reason_code();
  inline void clear_has_reason_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_stop_heading();
  inline void clear_has_stop_heading();
  inline void set_has_change_lane_type();
  inline void clear_has_change_lane_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::apollo::common::PointENU* stop_point_;
  int reason_code_;
  int change_lane_type_;
  double stop_heading_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainStop* default_instance_;
};
// -------------------------------------------------------------------

class EmergencyStopHardBrake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EmergencyStopHardBrake) */ {
 public:
  EmergencyStopHardBrake();
  virtual ~EmergencyStopHardBrake();

  EmergencyStopHardBrake(const EmergencyStopHardBrake& from);

  inline EmergencyStopHardBrake& operator=(const EmergencyStopHardBrake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmergencyStopHardBrake& default_instance();

  void Swap(EmergencyStopHardBrake* other);

  // implements Message ----------------------------------------------

  inline EmergencyStopHardBrake* New() const { return New(NULL); }

  EmergencyStopHardBrake* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmergencyStopHardBrake& from);
  void MergeFrom(const EmergencyStopHardBrake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmergencyStopHardBrake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.EmergencyStopHardBrake)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static EmergencyStopHardBrake* default_instance_;
};
// -------------------------------------------------------------------

class EmergencyStopCruiseToStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EmergencyStopCruiseToStop) */ {
 public:
  EmergencyStopCruiseToStop();
  virtual ~EmergencyStopCruiseToStop();

  EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from);

  inline EmergencyStopCruiseToStop& operator=(const EmergencyStopCruiseToStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmergencyStopCruiseToStop& default_instance();

  void Swap(EmergencyStopCruiseToStop* other);

  // implements Message ----------------------------------------------

  inline EmergencyStopCruiseToStop* New() const { return New(NULL); }

  EmergencyStopCruiseToStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmergencyStopCruiseToStop& from);
  void MergeFrom(const EmergencyStopCruiseToStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmergencyStopCruiseToStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.EmergencyStopCruiseToStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static EmergencyStopCruiseToStop* default_instance_;
};
// -------------------------------------------------------------------

class MainEmergencyStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainEmergencyStop) */ {
 public:
  MainEmergencyStop();
  virtual ~MainEmergencyStop();

  MainEmergencyStop(const MainEmergencyStop& from);

  inline MainEmergencyStop& operator=(const MainEmergencyStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainEmergencyStop& default_instance();

  enum TaskCase {
    kHardBrake = 3,
    kCruiseToStop = 4,
    TASK_NOT_SET = 0,
  };

  void Swap(MainEmergencyStop* other);

  // implements Message ----------------------------------------------

  inline MainEmergencyStop* New() const { return New(NULL); }

  MainEmergencyStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainEmergencyStop& from);
  void MergeFrom(const MainEmergencyStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainEmergencyStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MainEmergencyStop_ReasonCode ReasonCode;
  static const ReasonCode ESTOP_REASON_INTERNAL_ERR =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR;
  static const ReasonCode ESTOP_REASON_COLLISION =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_COLLISION;
  static const ReasonCode ESTOP_REASON_ST_FIND_PATH =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_FIND_PATH;
  static const ReasonCode ESTOP_REASON_ST_MAKE_DECISION =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_MAKE_DECISION;
  static const ReasonCode ESTOP_REASON_SENSOR_ERROR =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR;
  static inline bool ReasonCode_IsValid(int value) {
    return MainEmergencyStop_ReasonCode_IsValid(value);
  }
  static const ReasonCode ReasonCode_MIN =
    MainEmergencyStop_ReasonCode_ReasonCode_MIN;
  static const ReasonCode ReasonCode_MAX =
    MainEmergencyStop_ReasonCode_ReasonCode_MAX;
  static const int ReasonCode_ARRAYSIZE =
    MainEmergencyStop_ReasonCode_ReasonCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReasonCode_descriptor() {
    return MainEmergencyStop_ReasonCode_descriptor();
  }
  static inline const ::std::string& ReasonCode_Name(ReasonCode value) {
    return MainEmergencyStop_ReasonCode_Name(value);
  }
  static inline bool ReasonCode_Parse(const ::std::string& name,
      ReasonCode* value) {
    return MainEmergencyStop_ReasonCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  bool has_reason_code() const;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 1;
  ::apollo::planning::MainEmergencyStop_ReasonCode reason_code() const;
  void set_reason_code(::apollo::planning::MainEmergencyStop_ReasonCode value);

  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
  bool has_hard_brake() const;
  void clear_hard_brake();
  static const int kHardBrakeFieldNumber = 3;
  const ::apollo::planning::EmergencyStopHardBrake& hard_brake() const;
  ::apollo::planning::EmergencyStopHardBrake* mutable_hard_brake();
  ::apollo::planning::EmergencyStopHardBrake* release_hard_brake();
  void set_allocated_hard_brake(::apollo::planning::EmergencyStopHardBrake* hard_brake);

  // optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
  bool has_cruise_to_stop() const;
  void clear_cruise_to_stop();
  static const int kCruiseToStopFieldNumber = 4;
  const ::apollo::planning::EmergencyStopCruiseToStop& cruise_to_stop() const;
  ::apollo::planning::EmergencyStopCruiseToStop* mutable_cruise_to_stop();
  ::apollo::planning::EmergencyStopCruiseToStop* release_cruise_to_stop();
  void set_allocated_cruise_to_stop(::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop);

  TaskCase task_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.MainEmergencyStop)
 private:
  inline void set_has_reason_code();
  inline void clear_has_reason_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_hard_brake();
  inline void set_has_cruise_to_stop();

  inline bool has_task() const;
  void clear_task();
  inline void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int reason_code_;
  union TaskUnion {
    TaskUnion() {}
    ::apollo::planning::EmergencyStopHardBrake* hard_brake_;
    ::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop_;
  } task_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainEmergencyStop* default_instance_;
};
// -------------------------------------------------------------------

class MainCruise : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainCruise) */ {
 public:
  MainCruise();
  virtual ~MainCruise();

  MainCruise(const MainCruise& from);

  inline MainCruise& operator=(const MainCruise& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainCruise& default_instance();

  void Swap(MainCruise* other);

  // implements Message ----------------------------------------------

  inline MainCruise* New() const { return New(NULL); }

  MainCruise* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainCruise& from);
  void MergeFrom(const MainCruise& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainCruise* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  bool has_change_lane_type() const;
  void clear_change_lane_type();
  static const int kChangeLaneTypeFieldNumber = 1;
  ::apollo::routing::ChangeLaneType change_lane_type() const;
  void set_change_lane_type(::apollo::routing::ChangeLaneType value);

  // @@protoc_insertion_point(class_scope:apollo.planning.MainCruise)
 private:
  inline void set_has_change_lane_type();
  inline void clear_has_change_lane_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int change_lane_type_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainCruise* default_instance_;
};
// -------------------------------------------------------------------

class MainChangeLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainChangeLane) */ {
 public:
  MainChangeLane();
  virtual ~MainChangeLane();

  MainChangeLane(const MainChangeLane& from);

  inline MainChangeLane& operator=(const MainChangeLane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainChangeLane& default_instance();

  void Swap(MainChangeLane* other);

  // implements Message ----------------------------------------------

  inline MainChangeLane* New() const { return New(NULL); }

  MainChangeLane* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainChangeLane& from);
  void MergeFrom(const MainChangeLane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainChangeLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MainChangeLane_Type Type;
  static const Type LEFT =
    MainChangeLane_Type_LEFT;
  static const Type RIGHT =
    MainChangeLane_Type_RIGHT;
  static inline bool Type_IsValid(int value) {
    return MainChangeLane_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MainChangeLane_Type_Type_MIN;
  static const Type Type_MAX =
    MainChangeLane_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MainChangeLane_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MainChangeLane_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MainChangeLane_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MainChangeLane_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.MainChangeLane.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::planning::MainChangeLane_Type type() const;
  void set_type(::apollo::planning::MainChangeLane_Type value);

  // repeated .apollo.planning.TargetLane default_lane = 2;
  int default_lane_size() const;
  void clear_default_lane();
  static const int kDefaultLaneFieldNumber = 2;
  const ::apollo::planning::TargetLane& default_lane(int index) const;
  ::apollo::planning::TargetLane* mutable_default_lane(int index);
  ::apollo::planning::TargetLane* add_default_lane();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >*
      mutable_default_lane();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >&
      default_lane() const;

  // optional .apollo.planning.MainStop default_lane_stop = 3;
  bool has_default_lane_stop() const;
  void clear_default_lane_stop();
  static const int kDefaultLaneStopFieldNumber = 3;
  const ::apollo::planning::MainStop& default_lane_stop() const;
  ::apollo::planning::MainStop* mutable_default_lane_stop();
  ::apollo::planning::MainStop* release_default_lane_stop();
  void set_allocated_default_lane_stop(::apollo::planning::MainStop* default_lane_stop);

  // optional .apollo.planning.MainStop target_lane_stop = 4;
  bool has_target_lane_stop() const;
  void clear_target_lane_stop();
  static const int kTargetLaneStopFieldNumber = 4;
  const ::apollo::planning::MainStop& target_lane_stop() const;
  ::apollo::planning::MainStop* mutable_target_lane_stop();
  ::apollo::planning::MainStop* release_target_lane_stop();
  void set_allocated_target_lane_stop(::apollo::planning::MainStop* target_lane_stop);

  // @@protoc_insertion_point(class_scope:apollo.planning.MainChangeLane)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_default_lane_stop();
  inline void clear_has_default_lane_stop();
  inline void set_has_target_lane_stop();
  inline void clear_has_target_lane_stop();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane > default_lane_;
  ::apollo::planning::MainStop* default_lane_stop_;
  ::apollo::planning::MainStop* target_lane_stop_;
  int type_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainChangeLane* default_instance_;
};
// -------------------------------------------------------------------

class MainMissionComplete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainMissionComplete) */ {
 public:
  MainMissionComplete();
  virtual ~MainMissionComplete();

  MainMissionComplete(const MainMissionComplete& from);

  inline MainMissionComplete& operator=(const MainMissionComplete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainMissionComplete& default_instance();

  void Swap(MainMissionComplete* other);

  // implements Message ----------------------------------------------

  inline MainMissionComplete* New() const { return New(NULL); }

  MainMissionComplete* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainMissionComplete& from);
  void MergeFrom(const MainMissionComplete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainMissionComplete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PointENU stop_point = 1;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 1;
  const ::apollo::common::PointENU& stop_point() const;
  ::apollo::common::PointENU* mutable_stop_point();
  ::apollo::common::PointENU* release_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);

  // optional double stop_heading = 2;
  bool has_stop_heading() const;
  void clear_stop_heading();
  static const int kStopHeadingFieldNumber = 2;
  double stop_heading() const;
  void set_stop_heading(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.MainMissionComplete)
 private:
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_stop_heading();
  inline void clear_has_stop_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::PointENU* stop_point_;
  double stop_heading_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainMissionComplete* default_instance_;
};
// -------------------------------------------------------------------

class MainNotReady : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainNotReady) */ {
 public:
  MainNotReady();
  virtual ~MainNotReady();

  MainNotReady(const MainNotReady& from);

  inline MainNotReady& operator=(const MainNotReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainNotReady& default_instance();

  void Swap(MainNotReady* other);

  // implements Message ----------------------------------------------

  inline MainNotReady* New() const { return New(NULL); }

  MainNotReady* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainNotReady& from);
  void MergeFrom(const MainNotReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainNotReady* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:apollo.planning.MainNotReady)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainNotReady* default_instance_;
};
// -------------------------------------------------------------------

class MainParking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainParking) */ {
 public:
  MainParking();
  virtual ~MainParking();

  MainParking(const MainParking& from);

  inline MainParking& operator=(const MainParking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainParking& default_instance();

  void Swap(MainParking* other);

  // implements Message ----------------------------------------------

  inline MainParking* New() const { return New(NULL); }

  MainParking* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainParking& from);
  void MergeFrom(const MainParking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainParking* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.MainParking)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainParking* default_instance_;
};
// -------------------------------------------------------------------

class MainDecision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainDecision) */ {
 public:
  MainDecision();
  virtual ~MainDecision();

  MainDecision(const MainDecision& from);

  inline MainDecision& operator=(const MainDecision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainDecision& default_instance();

  enum TaskCase {
    kCruise = 1,
    kStop = 2,
    kEstop = 3,
    kChangeLane = 4,
    kMissionComplete = 6,
    kNotReady = 7,
    kParking = 8,
    TASK_NOT_SET = 0,
  };

  void Swap(MainDecision* other);

  // implements Message ----------------------------------------------

  inline MainDecision* New() const { return New(NULL); }

  MainDecision* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainDecision& from);
  void MergeFrom(const MainDecision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainDecision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.MainCruise cruise = 1;
  bool has_cruise() const;
  void clear_cruise();
  static const int kCruiseFieldNumber = 1;
  const ::apollo::planning::MainCruise& cruise() const;
  ::apollo::planning::MainCruise* mutable_cruise();
  ::apollo::planning::MainCruise* release_cruise();
  void set_allocated_cruise(::apollo::planning::MainCruise* cruise);

  // optional .apollo.planning.MainStop stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::apollo::planning::MainStop& stop() const;
  ::apollo::planning::MainStop* mutable_stop();
  ::apollo::planning::MainStop* release_stop();
  void set_allocated_stop(::apollo::planning::MainStop* stop);

  // optional .apollo.planning.MainEmergencyStop estop = 3;
  bool has_estop() const;
  void clear_estop();
  static const int kEstopFieldNumber = 3;
  const ::apollo::planning::MainEmergencyStop& estop() const;
  ::apollo::planning::MainEmergencyStop* mutable_estop();
  ::apollo::planning::MainEmergencyStop* release_estop();
  void set_allocated_estop(::apollo::planning::MainEmergencyStop* estop);

  // optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_change_lane() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_change_lane();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kChangeLaneFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::planning::MainChangeLane& change_lane() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::MainChangeLane* mutable_change_lane();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::MainChangeLane* release_change_lane();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_change_lane(::apollo::planning::MainChangeLane* change_lane);

  // optional .apollo.planning.MainMissionComplete mission_complete = 6;
  bool has_mission_complete() const;
  void clear_mission_complete();
  static const int kMissionCompleteFieldNumber = 6;
  const ::apollo::planning::MainMissionComplete& mission_complete() const;
  ::apollo::planning::MainMissionComplete* mutable_mission_complete();
  ::apollo::planning::MainMissionComplete* release_mission_complete();
  void set_allocated_mission_complete(::apollo::planning::MainMissionComplete* mission_complete);

  // optional .apollo.planning.MainNotReady not_ready = 7;
  bool has_not_ready() const;
  void clear_not_ready();
  static const int kNotReadyFieldNumber = 7;
  const ::apollo::planning::MainNotReady& not_ready() const;
  ::apollo::planning::MainNotReady* mutable_not_ready();
  ::apollo::planning::MainNotReady* release_not_ready();
  void set_allocated_not_ready(::apollo::planning::MainNotReady* not_ready);

  // optional .apollo.planning.MainParking parking = 8;
  bool has_parking() const;
  void clear_parking();
  static const int kParkingFieldNumber = 8;
  const ::apollo::planning::MainParking& parking() const;
  ::apollo::planning::MainParking* mutable_parking();
  ::apollo::planning::MainParking* release_parking();
  void set_allocated_parking(::apollo::planning::MainParking* parking);

  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int target_lane_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_target_lane();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTargetLaneFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::planning::TargetLane& target_lane(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::TargetLane* mutable_target_lane(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::TargetLane* add_target_lane();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >*
      mutable_target_lane();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >&
      target_lane() const;

  TaskCase task_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.MainDecision)
 private:
  inline void set_has_cruise();
  inline void set_has_stop();
  inline void set_has_estop();
  inline void set_has_change_lane();
  inline void set_has_mission_complete();
  inline void set_has_not_ready();
  inline void set_has_parking();

  inline bool has_task() const;
  void clear_task();
  inline void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane > target_lane_;
  union TaskUnion {
    TaskUnion() {}
    ::apollo::planning::MainCruise* cruise_;
    ::apollo::planning::MainStop* stop_;
    ::apollo::planning::MainEmergencyStop* estop_;
    ::apollo::planning::MainChangeLane* change_lane_;
    ::apollo::planning::MainMissionComplete* mission_complete_;
    ::apollo::planning::MainNotReady* not_ready_;
    ::apollo::planning::MainParking* parking_;
  } task_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static MainDecision* default_instance_;
};
// -------------------------------------------------------------------

class DecisionResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DecisionResult) */ {
 public:
  DecisionResult();
  virtual ~DecisionResult();

  DecisionResult(const DecisionResult& from);

  inline DecisionResult& operator=(const DecisionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionResult& default_instance();

  void Swap(DecisionResult* other);

  // implements Message ----------------------------------------------

  inline DecisionResult* New() const { return New(NULL); }

  DecisionResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecisionResult& from);
  void MergeFrom(const DecisionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DecisionResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.MainDecision main_decision = 1;
  bool has_main_decision() const;
  void clear_main_decision();
  static const int kMainDecisionFieldNumber = 1;
  const ::apollo::planning::MainDecision& main_decision() const;
  ::apollo::planning::MainDecision* mutable_main_decision();
  ::apollo::planning::MainDecision* release_main_decision();
  void set_allocated_main_decision(::apollo::planning::MainDecision* main_decision);

  // optional .apollo.planning.ObjectDecisions object_decision = 2;
  bool has_object_decision() const;
  void clear_object_decision();
  static const int kObjectDecisionFieldNumber = 2;
  const ::apollo::planning::ObjectDecisions& object_decision() const;
  ::apollo::planning::ObjectDecisions* mutable_object_decision();
  ::apollo::planning::ObjectDecisions* release_object_decision();
  void set_allocated_object_decision(::apollo::planning::ObjectDecisions* object_decision);

  // optional .apollo.common.VehicleSignal vehicle_signal = 3;
  bool has_vehicle_signal() const;
  void clear_vehicle_signal();
  static const int kVehicleSignalFieldNumber = 3;
  const ::apollo::common::VehicleSignal& vehicle_signal() const;
  ::apollo::common::VehicleSignal* mutable_vehicle_signal();
  ::apollo::common::VehicleSignal* release_vehicle_signal();
  void set_allocated_vehicle_signal(::apollo::common::VehicleSignal* vehicle_signal);

  // @@protoc_insertion_point(class_scope:apollo.planning.DecisionResult)
 private:
  inline void set_has_main_decision();
  inline void clear_has_main_decision();
  inline void set_has_object_decision();
  inline void clear_has_object_decision();
  inline void set_has_vehicle_signal();
  inline void clear_has_vehicle_signal();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::MainDecision* main_decision_;
  ::apollo::planning::ObjectDecisions* object_decision_;
  ::apollo::common::VehicleSignal* vehicle_signal_;
  friend void  protobuf_AddDesc_planning_2fdecision_2eproto();
  friend void protobuf_AssignDesc_planning_2fdecision_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdecision_2eproto();

  void InitAsDefaultInstance();
  static DecisionResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetLane

// optional string id = 1;
inline bool TargetLane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TargetLane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TargetLane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TargetLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TargetLane::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetLane::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.id)
}
inline void TargetLane::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.TargetLane.id)
}
inline void TargetLane::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.TargetLane.id)
}
inline ::std::string* TargetLane::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TargetLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetLane::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.TargetLane.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TargetLane.id)
}

// optional double start_s = 2;
inline bool TargetLane::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TargetLane::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TargetLane::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TargetLane::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
inline double TargetLane::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.start_s)
  return start_s_;
}
inline void TargetLane::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.start_s)
}

// optional double end_s = 3;
inline bool TargetLane::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TargetLane::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TargetLane::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TargetLane::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
inline double TargetLane::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.end_s)
  return end_s_;
}
inline void TargetLane::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.end_s)
}

// optional double speed_limit = 4;
inline bool TargetLane::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TargetLane::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TargetLane::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TargetLane::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double TargetLane::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.speed_limit)
  return speed_limit_;
}
inline void TargetLane::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.speed_limit)
}

// -------------------------------------------------------------------

// ObjectIgnore

// -------------------------------------------------------------------

// ObjectStop

// optional .apollo.planning.StopReasonCode reason_code = 1;
inline bool ObjectStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
inline ::apollo::planning::StopReasonCode ObjectStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.reason_code)
  return static_cast< ::apollo::planning::StopReasonCode >(reason_code_);
}
inline void ObjectStop::set_reason_code(::apollo::planning::StopReasonCode value) {
  assert(::apollo::planning::StopReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.reason_code)
}

// optional double distance_s = 2;
inline bool ObjectStop::has_distance_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectStop::set_has_distance_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectStop::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectStop::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
inline double ObjectStop::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.distance_s)
  return distance_s_;
}
inline void ObjectStop::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.distance_s)
}

// optional .apollo.common.PointENU stop_point = 3;
inline bool ObjectStop::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectStop::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectStop::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectStop::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
  clear_has_stop_point();
}
inline const ::apollo::common::PointENU& ObjectStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::apollo::common::PointENU* ObjectStop::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStop.stop_point)
  return stop_point_;
}
inline ::apollo::common::PointENU* ObjectStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectStop.stop_point)
  clear_has_stop_point();
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void ObjectStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectStop.stop_point)
}

// optional double stop_heading = 4;
inline bool ObjectStop::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectStop::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectStop::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectStop::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
inline double ObjectStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.stop_heading)
  return stop_heading_;
}
inline void ObjectStop::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.stop_heading)
}

// repeated string wait_for_obstacle = 5;
inline int ObjectStop::wait_for_obstacle_size() const {
  return wait_for_obstacle_.size();
}
inline void ObjectStop::clear_wait_for_obstacle() {
  wait_for_obstacle_.Clear();
}
inline const ::std::string& ObjectStop::wait_for_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Get(index);
}
inline ::std::string* ObjectStop::mutable_wait_for_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Mutable(index);
}
inline void ObjectStop::set_wait_for_obstacle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.wait_for_obstacle)
  wait_for_obstacle_.Mutable(index)->assign(value);
}
inline void ObjectStop::set_wait_for_obstacle(int index, const char* value) {
  wait_for_obstacle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::set_wait_for_obstacle(int index, const char* value, size_t size) {
  wait_for_obstacle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline ::std::string* ObjectStop::add_wait_for_obstacle() {
  // @@protoc_insertion_point(field_add_mutable:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Add();
}
inline void ObjectStop::add_wait_for_obstacle(const ::std::string& value) {
  wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::add_wait_for_obstacle(const char* value) {
  wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::add_wait_for_obstacle(const char* value, size_t size) {
  wait_for_obstacle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjectStop::wait_for_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjectStop::mutable_wait_for_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectStop.wait_for_obstacle)
  return &wait_for_obstacle_;
}

// -------------------------------------------------------------------

// ObjectNudge

// optional .apollo.planning.ObjectNudge.Type type = 1;
inline bool ObjectNudge::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectNudge::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectNudge::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectNudge::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::apollo::planning::ObjectNudge_Type ObjectNudge::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectNudge.type)
  return static_cast< ::apollo::planning::ObjectNudge_Type >(type_);
}
inline void ObjectNudge::set_type(::apollo::planning::ObjectNudge_Type value) {
  assert(::apollo::planning::ObjectNudge_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectNudge.type)
}

// optional double distance_l = 2;
inline bool ObjectNudge::has_distance_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectNudge::set_has_distance_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectNudge::clear_has_distance_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectNudge::clear_distance_l() {
  distance_l_ = 0;
  clear_has_distance_l();
}
inline double ObjectNudge::distance_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectNudge.distance_l)
  return distance_l_;
}
inline void ObjectNudge::set_distance_l(double value) {
  set_has_distance_l();
  distance_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectNudge.distance_l)
}

// -------------------------------------------------------------------

// ObjectYield

// optional double distance_s = 1;
inline bool ObjectYield::has_distance_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectYield::set_has_distance_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectYield::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectYield::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
inline double ObjectYield::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.distance_s)
  return distance_s_;
}
inline void ObjectYield::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
inline bool ObjectYield::has_fence_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectYield::set_has_fence_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectYield::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectYield::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
  clear_has_fence_point();
}
inline const ::apollo::common::PointENU& ObjectYield::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.fence_point)
  return fence_point_ != NULL ? *fence_point_ : *default_instance_->fence_point_;
}
inline ::apollo::common::PointENU* ObjectYield::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectYield.fence_point)
  return fence_point_;
}
inline ::apollo::common::PointENU* ObjectYield::release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectYield.fence_point)
  clear_has_fence_point();
  ::apollo::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
inline void ObjectYield::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectYield.fence_point)
}

// optional double fence_heading = 3;
inline bool ObjectYield::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectYield::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectYield::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectYield::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
inline double ObjectYield::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.fence_heading)
  return fence_heading_;
}
inline void ObjectYield::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.fence_heading)
}

// optional double time_buffer = 4;
inline bool ObjectYield::has_time_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectYield::set_has_time_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectYield::clear_has_time_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectYield::clear_time_buffer() {
  time_buffer_ = 0;
  clear_has_time_buffer();
}
inline double ObjectYield::time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.time_buffer)
  return time_buffer_;
}
inline void ObjectYield::set_time_buffer(double value) {
  set_has_time_buffer();
  time_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.time_buffer)
}

// -------------------------------------------------------------------

// ObjectFollow

// optional double distance_s = 1;
inline bool ObjectFollow::has_distance_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectFollow::set_has_distance_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectFollow::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectFollow::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
inline double ObjectFollow::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.distance_s)
  return distance_s_;
}
inline void ObjectFollow::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectFollow.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
inline bool ObjectFollow::has_fence_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectFollow::set_has_fence_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectFollow::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectFollow::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
  clear_has_fence_point();
}
inline const ::apollo::common::PointENU& ObjectFollow::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.fence_point)
  return fence_point_ != NULL ? *fence_point_ : *default_instance_->fence_point_;
}
inline ::apollo::common::PointENU* ObjectFollow::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectFollow.fence_point)
  return fence_point_;
}
inline ::apollo::common::PointENU* ObjectFollow::release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectFollow.fence_point)
  clear_has_fence_point();
  ::apollo::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
inline void ObjectFollow::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectFollow.fence_point)
}

// optional double fence_heading = 3;
inline bool ObjectFollow::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectFollow::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectFollow::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectFollow::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
inline double ObjectFollow::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.fence_heading)
  return fence_heading_;
}
inline void ObjectFollow::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectFollow.fence_heading)
}

// -------------------------------------------------------------------

// ObjectOvertake

// optional double distance_s = 1;
inline bool ObjectOvertake::has_distance_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectOvertake::set_has_distance_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectOvertake::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectOvertake::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
inline double ObjectOvertake::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.distance_s)
  return distance_s_;
}
inline void ObjectOvertake::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
inline bool ObjectOvertake::has_fence_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectOvertake::set_has_fence_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectOvertake::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectOvertake::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
  clear_has_fence_point();
}
inline const ::apollo::common::PointENU& ObjectOvertake::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.fence_point)
  return fence_point_ != NULL ? *fence_point_ : *default_instance_->fence_point_;
}
inline ::apollo::common::PointENU* ObjectOvertake::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectOvertake.fence_point)
  return fence_point_;
}
inline ::apollo::common::PointENU* ObjectOvertake::release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectOvertake.fence_point)
  clear_has_fence_point();
  ::apollo::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
inline void ObjectOvertake::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectOvertake.fence_point)
}

// optional double fence_heading = 3;
inline bool ObjectOvertake::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectOvertake::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectOvertake::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectOvertake::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
inline double ObjectOvertake::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.fence_heading)
  return fence_heading_;
}
inline void ObjectOvertake::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.fence_heading)
}

// optional double time_buffer = 4;
inline bool ObjectOvertake::has_time_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectOvertake::set_has_time_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectOvertake::clear_has_time_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectOvertake::clear_time_buffer() {
  time_buffer_ = 0;
  clear_has_time_buffer();
}
inline double ObjectOvertake::time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.time_buffer)
  return time_buffer_;
}
inline void ObjectOvertake::set_time_buffer(double value) {
  set_has_time_buffer();
  time_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.time_buffer)
}

// -------------------------------------------------------------------

// ObjectSidePass

// optional .apollo.planning.ObjectSidePass.Type type = 1;
inline bool ObjectSidePass::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectSidePass::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectSidePass::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectSidePass::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::apollo::planning::ObjectSidePass_Type ObjectSidePass::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectSidePass.type)
  return static_cast< ::apollo::planning::ObjectSidePass_Type >(type_);
}
inline void ObjectSidePass::set_type(::apollo::planning::ObjectSidePass_Type value) {
  assert(::apollo::planning::ObjectSidePass_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectSidePass.type)
}

// -------------------------------------------------------------------

// ObjectAvoid

// -------------------------------------------------------------------

// ObjectDecisionType

// optional .apollo.planning.ObjectIgnore ignore = 1;
inline bool ObjectDecisionType::has_ignore() const {
  return object_tag_case() == kIgnore;
}
inline void ObjectDecisionType::set_has_ignore() {
  _oneof_case_[0] = kIgnore;
}
inline void ObjectDecisionType::clear_ignore() {
  if (has_ignore()) {
    delete object_tag_.ignore_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectIgnore& ObjectDecisionType::ignore() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.ignore)
  return has_ignore()
      ? *object_tag_.ignore_
      : ::apollo::planning::ObjectIgnore::default_instance();
}
inline ::apollo::planning::ObjectIgnore* ObjectDecisionType::mutable_ignore() {
  if (!has_ignore()) {
    clear_object_tag();
    set_has_ignore();
    object_tag_.ignore_ = new ::apollo::planning::ObjectIgnore;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.ignore)
  return object_tag_.ignore_;
}
inline ::apollo::planning::ObjectIgnore* ObjectDecisionType::release_ignore() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.ignore)
  if (has_ignore()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectIgnore* temp = object_tag_.ignore_;
    object_tag_.ignore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_ignore(::apollo::planning::ObjectIgnore* ignore) {
  clear_object_tag();
  if (ignore) {
    set_has_ignore();
    object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.ignore)
}

// optional .apollo.planning.ObjectStop stop = 2;
inline bool ObjectDecisionType::has_stop() const {
  return object_tag_case() == kStop;
}
inline void ObjectDecisionType::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline void ObjectDecisionType::clear_stop() {
  if (has_stop()) {
    delete object_tag_.stop_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectStop& ObjectDecisionType::stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.stop)
  return has_stop()
      ? *object_tag_.stop_
      : ::apollo::planning::ObjectStop::default_instance();
}
inline ::apollo::planning::ObjectStop* ObjectDecisionType::mutable_stop() {
  if (!has_stop()) {
    clear_object_tag();
    set_has_stop();
    object_tag_.stop_ = new ::apollo::planning::ObjectStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.stop)
  return object_tag_.stop_;
}
inline ::apollo::planning::ObjectStop* ObjectDecisionType::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.stop)
  if (has_stop()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectStop* temp = object_tag_.stop_;
    object_tag_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_stop(::apollo::planning::ObjectStop* stop) {
  clear_object_tag();
  if (stop) {
    set_has_stop();
    object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.stop)
}

// optional .apollo.planning.ObjectFollow follow = 3;
inline bool ObjectDecisionType::has_follow() const {
  return object_tag_case() == kFollow;
}
inline void ObjectDecisionType::set_has_follow() {
  _oneof_case_[0] = kFollow;
}
inline void ObjectDecisionType::clear_follow() {
  if (has_follow()) {
    delete object_tag_.follow_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectFollow& ObjectDecisionType::follow() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.follow)
  return has_follow()
      ? *object_tag_.follow_
      : ::apollo::planning::ObjectFollow::default_instance();
}
inline ::apollo::planning::ObjectFollow* ObjectDecisionType::mutable_follow() {
  if (!has_follow()) {
    clear_object_tag();
    set_has_follow();
    object_tag_.follow_ = new ::apollo::planning::ObjectFollow;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.follow)
  return object_tag_.follow_;
}
inline ::apollo::planning::ObjectFollow* ObjectDecisionType::release_follow() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.follow)
  if (has_follow()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectFollow* temp = object_tag_.follow_;
    object_tag_.follow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_follow(::apollo::planning::ObjectFollow* follow) {
  clear_object_tag();
  if (follow) {
    set_has_follow();
    object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.follow)
}

// optional .apollo.planning.ObjectYield yield = 4;
inline bool ObjectDecisionType::has_yield() const {
  return object_tag_case() == kYield;
}
inline void ObjectDecisionType::set_has_yield() {
  _oneof_case_[0] = kYield;
}
inline void ObjectDecisionType::clear_yield() {
  if (has_yield()) {
    delete object_tag_.yield_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectYield& ObjectDecisionType::yield() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.yield)
  return has_yield()
      ? *object_tag_.yield_
      : ::apollo::planning::ObjectYield::default_instance();
}
inline ::apollo::planning::ObjectYield* ObjectDecisionType::mutable_yield() {
  if (!has_yield()) {
    clear_object_tag();
    set_has_yield();
    object_tag_.yield_ = new ::apollo::planning::ObjectYield;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.yield)
  return object_tag_.yield_;
}
inline ::apollo::planning::ObjectYield* ObjectDecisionType::release_yield() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.yield)
  if (has_yield()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectYield* temp = object_tag_.yield_;
    object_tag_.yield_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_yield(::apollo::planning::ObjectYield* yield) {
  clear_object_tag();
  if (yield) {
    set_has_yield();
    object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.yield)
}

// optional .apollo.planning.ObjectOvertake overtake = 5;
inline bool ObjectDecisionType::has_overtake() const {
  return object_tag_case() == kOvertake;
}
inline void ObjectDecisionType::set_has_overtake() {
  _oneof_case_[0] = kOvertake;
}
inline void ObjectDecisionType::clear_overtake() {
  if (has_overtake()) {
    delete object_tag_.overtake_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectOvertake& ObjectDecisionType::overtake() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.overtake)
  return has_overtake()
      ? *object_tag_.overtake_
      : ::apollo::planning::ObjectOvertake::default_instance();
}
inline ::apollo::planning::ObjectOvertake* ObjectDecisionType::mutable_overtake() {
  if (!has_overtake()) {
    clear_object_tag();
    set_has_overtake();
    object_tag_.overtake_ = new ::apollo::planning::ObjectOvertake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.overtake)
  return object_tag_.overtake_;
}
inline ::apollo::planning::ObjectOvertake* ObjectDecisionType::release_overtake() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.overtake)
  if (has_overtake()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectOvertake* temp = object_tag_.overtake_;
    object_tag_.overtake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_overtake(::apollo::planning::ObjectOvertake* overtake) {
  clear_object_tag();
  if (overtake) {
    set_has_overtake();
    object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.overtake)
}

// optional .apollo.planning.ObjectNudge nudge = 6;
inline bool ObjectDecisionType::has_nudge() const {
  return object_tag_case() == kNudge;
}
inline void ObjectDecisionType::set_has_nudge() {
  _oneof_case_[0] = kNudge;
}
inline void ObjectDecisionType::clear_nudge() {
  if (has_nudge()) {
    delete object_tag_.nudge_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectNudge& ObjectDecisionType::nudge() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.nudge)
  return has_nudge()
      ? *object_tag_.nudge_
      : ::apollo::planning::ObjectNudge::default_instance();
}
inline ::apollo::planning::ObjectNudge* ObjectDecisionType::mutable_nudge() {
  if (!has_nudge()) {
    clear_object_tag();
    set_has_nudge();
    object_tag_.nudge_ = new ::apollo::planning::ObjectNudge;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.nudge)
  return object_tag_.nudge_;
}
inline ::apollo::planning::ObjectNudge* ObjectDecisionType::release_nudge() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.nudge)
  if (has_nudge()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectNudge* temp = object_tag_.nudge_;
    object_tag_.nudge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_nudge(::apollo::planning::ObjectNudge* nudge) {
  clear_object_tag();
  if (nudge) {
    set_has_nudge();
    object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.nudge)
}

// optional .apollo.planning.ObjectSidePass sidepass = 7;
inline bool ObjectDecisionType::has_sidepass() const {
  return object_tag_case() == kSidepass;
}
inline void ObjectDecisionType::set_has_sidepass() {
  _oneof_case_[0] = kSidepass;
}
inline void ObjectDecisionType::clear_sidepass() {
  if (has_sidepass()) {
    delete object_tag_.sidepass_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectSidePass& ObjectDecisionType::sidepass() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.sidepass)
  return has_sidepass()
      ? *object_tag_.sidepass_
      : ::apollo::planning::ObjectSidePass::default_instance();
}
inline ::apollo::planning::ObjectSidePass* ObjectDecisionType::mutable_sidepass() {
  if (!has_sidepass()) {
    clear_object_tag();
    set_has_sidepass();
    object_tag_.sidepass_ = new ::apollo::planning::ObjectSidePass;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.sidepass)
  return object_tag_.sidepass_;
}
inline ::apollo::planning::ObjectSidePass* ObjectDecisionType::release_sidepass() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.sidepass)
  if (has_sidepass()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectSidePass* temp = object_tag_.sidepass_;
    object_tag_.sidepass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_sidepass(::apollo::planning::ObjectSidePass* sidepass) {
  clear_object_tag();
  if (sidepass) {
    set_has_sidepass();
    object_tag_.sidepass_ = sidepass;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.sidepass)
}

// optional .apollo.planning.ObjectAvoid avoid = 8;
inline bool ObjectDecisionType::has_avoid() const {
  return object_tag_case() == kAvoid;
}
inline void ObjectDecisionType::set_has_avoid() {
  _oneof_case_[0] = kAvoid;
}
inline void ObjectDecisionType::clear_avoid() {
  if (has_avoid()) {
    delete object_tag_.avoid_;
    clear_has_object_tag();
  }
}
inline  const ::apollo::planning::ObjectAvoid& ObjectDecisionType::avoid() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.avoid)
  return has_avoid()
      ? *object_tag_.avoid_
      : ::apollo::planning::ObjectAvoid::default_instance();
}
inline ::apollo::planning::ObjectAvoid* ObjectDecisionType::mutable_avoid() {
  if (!has_avoid()) {
    clear_object_tag();
    set_has_avoid();
    object_tag_.avoid_ = new ::apollo::planning::ObjectAvoid;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.avoid)
  return object_tag_.avoid_;
}
inline ::apollo::planning::ObjectAvoid* ObjectDecisionType::release_avoid() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.avoid)
  if (has_avoid()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectAvoid* temp = object_tag_.avoid_;
    object_tag_.avoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObjectDecisionType::set_allocated_avoid(::apollo::planning::ObjectAvoid* avoid) {
  clear_object_tag();
  if (avoid) {
    set_has_avoid();
    object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.avoid)
}

inline bool ObjectDecisionType::has_object_tag() const {
  return object_tag_case() != OBJECT_TAG_NOT_SET;
}
inline void ObjectDecisionType::clear_has_object_tag() {
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}
inline ObjectDecisionType::ObjectTagCase ObjectDecisionType::object_tag_case() const {
  return ObjectDecisionType::ObjectTagCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ObjectDecision

// optional string id = 1;
inline bool ObjectDecision::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectDecision::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectDecision::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectDecision::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ObjectDecision::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDecision::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectDecision.id)
}
inline void ObjectDecision::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.ObjectDecision.id)
}
inline void ObjectDecision::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ObjectDecision.id)
}
inline ::std::string* ObjectDecision::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecision.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectDecision::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecision.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDecision::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecision.id)
}

// optional int32 perception_id = 2;
inline bool ObjectDecision::has_perception_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectDecision::set_has_perception_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectDecision::clear_has_perception_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectDecision::clear_perception_id() {
  perception_id_ = 0;
  clear_has_perception_id();
}
inline ::google::protobuf::int32 ObjectDecision::perception_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.perception_id)
  return perception_id_;
}
inline void ObjectDecision::set_perception_id(::google::protobuf::int32 value) {
  set_has_perception_id();
  perception_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectDecision.perception_id)
}

// repeated .apollo.planning.ObjectDecisionType object_decision = 3;
inline int ObjectDecision::object_decision_size() const {
  return object_decision_.size();
}
inline void ObjectDecision::clear_object_decision() {
  object_decision_.Clear();
}
inline const ::apollo::planning::ObjectDecisionType& ObjectDecision::object_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.object_decision)
  return object_decision_.Get(index);
}
inline ::apollo::planning::ObjectDecisionType* ObjectDecision::mutable_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecision.object_decision)
  return object_decision_.Mutable(index);
}
inline ::apollo::planning::ObjectDecisionType* ObjectDecision::add_object_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectDecision.object_decision)
  return object_decision_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >*
ObjectDecision::mutable_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectDecision.object_decision)
  return &object_decision_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >&
ObjectDecision::object_decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectDecision.object_decision)
  return object_decision_;
}

// -------------------------------------------------------------------

// ObjectDecisions

// repeated .apollo.planning.ObjectDecision decision = 1;
inline int ObjectDecisions::decision_size() const {
  return decision_.size();
}
inline void ObjectDecisions::clear_decision() {
  decision_.Clear();
}
inline const ::apollo::planning::ObjectDecision& ObjectDecisions::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisions.decision)
  return decision_.Get(index);
}
inline ::apollo::planning::ObjectDecision* ObjectDecisions::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisions.decision)
  return decision_.Mutable(index);
}
inline ::apollo::planning::ObjectDecision* ObjectDecisions::add_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectDecisions.decision)
  return decision_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecision >*
ObjectDecisions::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectDecisions.decision)
  return &decision_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecision >&
ObjectDecisions::decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectDecisions.decision)
  return decision_;
}

// -------------------------------------------------------------------

// MainStop

// optional .apollo.planning.StopReasonCode reason_code = 1;
inline bool MainStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
inline ::apollo::planning::StopReasonCode MainStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.reason_code)
  return static_cast< ::apollo::planning::StopReasonCode >(reason_code_);
}
inline void MainStop::set_reason_code(::apollo::planning::StopReasonCode value) {
  assert(::apollo::planning::StopReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.reason_code)
}

// optional string reason = 2;
inline bool MainStop::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainStop::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& MainStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.reason)
}
inline void MainStop::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.MainStop.reason)
}
inline void MainStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.MainStop.reason)
}
inline ::std::string* MainStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MainStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainStop.reason)
}

// optional .apollo.common.PointENU stop_point = 3;
inline bool MainStop::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MainStop::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MainStop::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MainStop::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
  clear_has_stop_point();
}
inline const ::apollo::common::PointENU& MainStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::apollo::common::PointENU* MainStop::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainStop.stop_point)
  return stop_point_;
}
inline ::apollo::common::PointENU* MainStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainStop.stop_point)
  clear_has_stop_point();
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void MainStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainStop.stop_point)
}

// optional double stop_heading = 4;
inline bool MainStop::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MainStop::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MainStop::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MainStop::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
inline double MainStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.stop_heading)
  return stop_heading_;
}
inline void MainStop::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.stop_heading)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 5;
inline bool MainStop::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MainStop::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MainStop::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MainStop::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
inline ::apollo::routing::ChangeLaneType MainStop::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.change_lane_type)
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
inline void MainStop::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.change_lane_type)
}

// -------------------------------------------------------------------

// EmergencyStopHardBrake

// -------------------------------------------------------------------

// EmergencyStopCruiseToStop

// -------------------------------------------------------------------

// MainEmergencyStop

// optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
inline bool MainEmergencyStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainEmergencyStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainEmergencyStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainEmergencyStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
inline ::apollo::planning::MainEmergencyStop_ReasonCode MainEmergencyStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.reason_code)
  return static_cast< ::apollo::planning::MainEmergencyStop_ReasonCode >(reason_code_);
}
inline void MainEmergencyStop::set_reason_code(::apollo::planning::MainEmergencyStop_ReasonCode value) {
  assert(::apollo::planning::MainEmergencyStop_ReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainEmergencyStop.reason_code)
}

// optional string reason = 2;
inline bool MainEmergencyStop::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainEmergencyStop::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainEmergencyStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainEmergencyStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& MainEmergencyStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainEmergencyStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainEmergencyStop.reason)
}
inline void MainEmergencyStop::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.MainEmergencyStop.reason)
}
inline void MainEmergencyStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.MainEmergencyStop.reason)
}
inline ::std::string* MainEmergencyStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MainEmergencyStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainEmergencyStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.reason)
}

// optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
inline bool MainEmergencyStop::has_hard_brake() const {
  return task_case() == kHardBrake;
}
inline void MainEmergencyStop::set_has_hard_brake() {
  _oneof_case_[0] = kHardBrake;
}
inline void MainEmergencyStop::clear_hard_brake() {
  if (has_hard_brake()) {
    delete task_.hard_brake_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::EmergencyStopHardBrake& MainEmergencyStop::hard_brake() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.hard_brake)
  return has_hard_brake()
      ? *task_.hard_brake_
      : ::apollo::planning::EmergencyStopHardBrake::default_instance();
}
inline ::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::mutable_hard_brake() {
  if (!has_hard_brake()) {
    clear_task();
    set_has_hard_brake();
    task_.hard_brake_ = new ::apollo::planning::EmergencyStopHardBrake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.hard_brake)
  return task_.hard_brake_;
}
inline ::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::release_hard_brake() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.hard_brake)
  if (has_hard_brake()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopHardBrake* temp = task_.hard_brake_;
    task_.hard_brake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainEmergencyStop::set_allocated_hard_brake(::apollo::planning::EmergencyStopHardBrake* hard_brake) {
  clear_task();
  if (hard_brake) {
    set_has_hard_brake();
    task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.hard_brake)
}

// optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
inline bool MainEmergencyStop::has_cruise_to_stop() const {
  return task_case() == kCruiseToStop;
}
inline void MainEmergencyStop::set_has_cruise_to_stop() {
  _oneof_case_[0] = kCruiseToStop;
}
inline void MainEmergencyStop::clear_cruise_to_stop() {
  if (has_cruise_to_stop()) {
    delete task_.cruise_to_stop_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::EmergencyStopCruiseToStop& MainEmergencyStop::cruise_to_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.cruise_to_stop)
  return has_cruise_to_stop()
      ? *task_.cruise_to_stop_
      : ::apollo::planning::EmergencyStopCruiseToStop::default_instance();
}
inline ::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::mutable_cruise_to_stop() {
  if (!has_cruise_to_stop()) {
    clear_task();
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = new ::apollo::planning::EmergencyStopCruiseToStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.cruise_to_stop)
  return task_.cruise_to_stop_;
}
inline ::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::release_cruise_to_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.cruise_to_stop)
  if (has_cruise_to_stop()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopCruiseToStop* temp = task_.cruise_to_stop_;
    task_.cruise_to_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainEmergencyStop::set_allocated_cruise_to_stop(::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop) {
  clear_task();
  if (cruise_to_stop) {
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.cruise_to_stop)
}

inline bool MainEmergencyStop::has_task() const {
  return task_case() != TASK_NOT_SET;
}
inline void MainEmergencyStop::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
inline MainEmergencyStop::TaskCase MainEmergencyStop::task_case() const {
  return MainEmergencyStop::TaskCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MainCruise

// optional .apollo.routing.ChangeLaneType change_lane_type = 1;
inline bool MainCruise::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainCruise::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainCruise::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainCruise::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
inline ::apollo::routing::ChangeLaneType MainCruise::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainCruise.change_lane_type)
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
inline void MainCruise::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainCruise.change_lane_type)
}

// -------------------------------------------------------------------

// MainChangeLane

// optional .apollo.planning.MainChangeLane.Type type = 1;
inline bool MainChangeLane::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainChangeLane::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainChangeLane::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainChangeLane::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::apollo::planning::MainChangeLane_Type MainChangeLane::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.type)
  return static_cast< ::apollo::planning::MainChangeLane_Type >(type_);
}
inline void MainChangeLane::set_type(::apollo::planning::MainChangeLane_Type value) {
  assert(::apollo::planning::MainChangeLane_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainChangeLane.type)
}

// repeated .apollo.planning.TargetLane default_lane = 2;
inline int MainChangeLane::default_lane_size() const {
  return default_lane_.size();
}
inline void MainChangeLane::clear_default_lane() {
  default_lane_.Clear();
}
inline const ::apollo::planning::TargetLane& MainChangeLane::default_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.default_lane)
  return default_lane_.Get(index);
}
inline ::apollo::planning::TargetLane* MainChangeLane::mutable_default_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.default_lane)
  return default_lane_.Mutable(index);
}
inline ::apollo::planning::TargetLane* MainChangeLane::add_default_lane() {
  // @@protoc_insertion_point(field_add:apollo.planning.MainChangeLane.default_lane)
  return default_lane_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >*
MainChangeLane::mutable_default_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MainChangeLane.default_lane)
  return &default_lane_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >&
MainChangeLane::default_lane() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MainChangeLane.default_lane)
  return default_lane_;
}

// optional .apollo.planning.MainStop default_lane_stop = 3;
inline bool MainChangeLane::has_default_lane_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MainChangeLane::set_has_default_lane_stop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MainChangeLane::clear_has_default_lane_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MainChangeLane::clear_default_lane_stop() {
  if (default_lane_stop_ != NULL) default_lane_stop_->::apollo::planning::MainStop::Clear();
  clear_has_default_lane_stop();
}
inline const ::apollo::planning::MainStop& MainChangeLane::default_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.default_lane_stop)
  return default_lane_stop_ != NULL ? *default_lane_stop_ : *default_instance_->default_lane_stop_;
}
inline ::apollo::planning::MainStop* MainChangeLane::mutable_default_lane_stop() {
  set_has_default_lane_stop();
  if (default_lane_stop_ == NULL) {
    default_lane_stop_ = new ::apollo::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.default_lane_stop)
  return default_lane_stop_;
}
inline ::apollo::planning::MainStop* MainChangeLane::release_default_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainChangeLane.default_lane_stop)
  clear_has_default_lane_stop();
  ::apollo::planning::MainStop* temp = default_lane_stop_;
  default_lane_stop_ = NULL;
  return temp;
}
inline void MainChangeLane::set_allocated_default_lane_stop(::apollo::planning::MainStop* default_lane_stop) {
  delete default_lane_stop_;
  default_lane_stop_ = default_lane_stop;
  if (default_lane_stop) {
    set_has_default_lane_stop();
  } else {
    clear_has_default_lane_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainChangeLane.default_lane_stop)
}

// optional .apollo.planning.MainStop target_lane_stop = 4;
inline bool MainChangeLane::has_target_lane_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MainChangeLane::set_has_target_lane_stop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MainChangeLane::clear_has_target_lane_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MainChangeLane::clear_target_lane_stop() {
  if (target_lane_stop_ != NULL) target_lane_stop_->::apollo::planning::MainStop::Clear();
  clear_has_target_lane_stop();
}
inline const ::apollo::planning::MainStop& MainChangeLane::target_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.target_lane_stop)
  return target_lane_stop_ != NULL ? *target_lane_stop_ : *default_instance_->target_lane_stop_;
}
inline ::apollo::planning::MainStop* MainChangeLane::mutable_target_lane_stop() {
  set_has_target_lane_stop();
  if (target_lane_stop_ == NULL) {
    target_lane_stop_ = new ::apollo::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.target_lane_stop)
  return target_lane_stop_;
}
inline ::apollo::planning::MainStop* MainChangeLane::release_target_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainChangeLane.target_lane_stop)
  clear_has_target_lane_stop();
  ::apollo::planning::MainStop* temp = target_lane_stop_;
  target_lane_stop_ = NULL;
  return temp;
}
inline void MainChangeLane::set_allocated_target_lane_stop(::apollo::planning::MainStop* target_lane_stop) {
  delete target_lane_stop_;
  target_lane_stop_ = target_lane_stop;
  if (target_lane_stop) {
    set_has_target_lane_stop();
  } else {
    clear_has_target_lane_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainChangeLane.target_lane_stop)
}

// -------------------------------------------------------------------

// MainMissionComplete

// optional .apollo.common.PointENU stop_point = 1;
inline bool MainMissionComplete::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainMissionComplete::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainMissionComplete::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainMissionComplete::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
  clear_has_stop_point();
}
inline const ::apollo::common::PointENU& MainMissionComplete::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainMissionComplete.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::apollo::common::PointENU* MainMissionComplete::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainMissionComplete.stop_point)
  return stop_point_;
}
inline ::apollo::common::PointENU* MainMissionComplete::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainMissionComplete.stop_point)
  clear_has_stop_point();
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void MainMissionComplete::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainMissionComplete.stop_point)
}

// optional double stop_heading = 2;
inline bool MainMissionComplete::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainMissionComplete::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainMissionComplete::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainMissionComplete::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
inline double MainMissionComplete::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainMissionComplete.stop_heading)
  return stop_heading_;
}
inline void MainMissionComplete::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainMissionComplete.stop_heading)
}

// -------------------------------------------------------------------

// MainNotReady

// optional string reason = 1;
inline bool MainNotReady::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainNotReady::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainNotReady::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainNotReady::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& MainNotReady::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainNotReady.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainNotReady::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainNotReady.reason)
}
inline void MainNotReady::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.MainNotReady.reason)
}
inline void MainNotReady::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.MainNotReady.reason)
}
inline ::std::string* MainNotReady::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainNotReady.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MainNotReady::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainNotReady.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainNotReady::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainNotReady.reason)
}

// -------------------------------------------------------------------

// MainParking

// -------------------------------------------------------------------

// MainDecision

// optional .apollo.planning.MainCruise cruise = 1;
inline bool MainDecision::has_cruise() const {
  return task_case() == kCruise;
}
inline void MainDecision::set_has_cruise() {
  _oneof_case_[0] = kCruise;
}
inline void MainDecision::clear_cruise() {
  if (has_cruise()) {
    delete task_.cruise_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::MainCruise& MainDecision::cruise() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.cruise)
  return has_cruise()
      ? *task_.cruise_
      : ::apollo::planning::MainCruise::default_instance();
}
inline ::apollo::planning::MainCruise* MainDecision::mutable_cruise() {
  if (!has_cruise()) {
    clear_task();
    set_has_cruise();
    task_.cruise_ = new ::apollo::planning::MainCruise;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.cruise)
  return task_.cruise_;
}
inline ::apollo::planning::MainCruise* MainDecision::release_cruise() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.cruise)
  if (has_cruise()) {
    clear_has_task();
    ::apollo::planning::MainCruise* temp = task_.cruise_;
    task_.cruise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_cruise(::apollo::planning::MainCruise* cruise) {
  clear_task();
  if (cruise) {
    set_has_cruise();
    task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.cruise)
}

// optional .apollo.planning.MainStop stop = 2;
inline bool MainDecision::has_stop() const {
  return task_case() == kStop;
}
inline void MainDecision::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline void MainDecision::clear_stop() {
  if (has_stop()) {
    delete task_.stop_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::MainStop& MainDecision::stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.stop)
  return has_stop()
      ? *task_.stop_
      : ::apollo::planning::MainStop::default_instance();
}
inline ::apollo::planning::MainStop* MainDecision::mutable_stop() {
  if (!has_stop()) {
    clear_task();
    set_has_stop();
    task_.stop_ = new ::apollo::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.stop)
  return task_.stop_;
}
inline ::apollo::planning::MainStop* MainDecision::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.stop)
  if (has_stop()) {
    clear_has_task();
    ::apollo::planning::MainStop* temp = task_.stop_;
    task_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_stop(::apollo::planning::MainStop* stop) {
  clear_task();
  if (stop) {
    set_has_stop();
    task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.stop)
}

// optional .apollo.planning.MainEmergencyStop estop = 3;
inline bool MainDecision::has_estop() const {
  return task_case() == kEstop;
}
inline void MainDecision::set_has_estop() {
  _oneof_case_[0] = kEstop;
}
inline void MainDecision::clear_estop() {
  if (has_estop()) {
    delete task_.estop_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::MainEmergencyStop& MainDecision::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.estop)
  return has_estop()
      ? *task_.estop_
      : ::apollo::planning::MainEmergencyStop::default_instance();
}
inline ::apollo::planning::MainEmergencyStop* MainDecision::mutable_estop() {
  if (!has_estop()) {
    clear_task();
    set_has_estop();
    task_.estop_ = new ::apollo::planning::MainEmergencyStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.estop)
  return task_.estop_;
}
inline ::apollo::planning::MainEmergencyStop* MainDecision::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.estop)
  if (has_estop()) {
    clear_has_task();
    ::apollo::planning::MainEmergencyStop* temp = task_.estop_;
    task_.estop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_estop(::apollo::planning::MainEmergencyStop* estop) {
  clear_task();
  if (estop) {
    set_has_estop();
    task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.estop)
}

// optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
inline bool MainDecision::has_change_lane() const {
  return task_case() == kChangeLane;
}
inline void MainDecision::set_has_change_lane() {
  _oneof_case_[0] = kChangeLane;
}
inline void MainDecision::clear_change_lane() {
  if (has_change_lane()) {
    delete task_.change_lane_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::MainChangeLane& MainDecision::change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.change_lane)
  return has_change_lane()
      ? *task_.change_lane_
      : ::apollo::planning::MainChangeLane::default_instance();
}
inline ::apollo::planning::MainChangeLane* MainDecision::mutable_change_lane() {
  if (!has_change_lane()) {
    clear_task();
    set_has_change_lane();
    task_.change_lane_ = new ::apollo::planning::MainChangeLane;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.change_lane)
  return task_.change_lane_;
}
inline ::apollo::planning::MainChangeLane* MainDecision::release_change_lane() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.change_lane)
  if (has_change_lane()) {
    clear_has_task();
    ::apollo::planning::MainChangeLane* temp = task_.change_lane_;
    task_.change_lane_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_change_lane(::apollo::planning::MainChangeLane* change_lane) {
  clear_task();
  if (change_lane) {
    set_has_change_lane();
    task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.change_lane)
}

// optional .apollo.planning.MainMissionComplete mission_complete = 6;
inline bool MainDecision::has_mission_complete() const {
  return task_case() == kMissionComplete;
}
inline void MainDecision::set_has_mission_complete() {
  _oneof_case_[0] = kMissionComplete;
}
inline void MainDecision::clear_mission_complete() {
  if (has_mission_complete()) {
    delete task_.mission_complete_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::MainMissionComplete& MainDecision::mission_complete() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.mission_complete)
  return has_mission_complete()
      ? *task_.mission_complete_
      : ::apollo::planning::MainMissionComplete::default_instance();
}
inline ::apollo::planning::MainMissionComplete* MainDecision::mutable_mission_complete() {
  if (!has_mission_complete()) {
    clear_task();
    set_has_mission_complete();
    task_.mission_complete_ = new ::apollo::planning::MainMissionComplete;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.mission_complete)
  return task_.mission_complete_;
}
inline ::apollo::planning::MainMissionComplete* MainDecision::release_mission_complete() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.mission_complete)
  if (has_mission_complete()) {
    clear_has_task();
    ::apollo::planning::MainMissionComplete* temp = task_.mission_complete_;
    task_.mission_complete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_mission_complete(::apollo::planning::MainMissionComplete* mission_complete) {
  clear_task();
  if (mission_complete) {
    set_has_mission_complete();
    task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.mission_complete)
}

// optional .apollo.planning.MainNotReady not_ready = 7;
inline bool MainDecision::has_not_ready() const {
  return task_case() == kNotReady;
}
inline void MainDecision::set_has_not_ready() {
  _oneof_case_[0] = kNotReady;
}
inline void MainDecision::clear_not_ready() {
  if (has_not_ready()) {
    delete task_.not_ready_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::MainNotReady& MainDecision::not_ready() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.not_ready)
  return has_not_ready()
      ? *task_.not_ready_
      : ::apollo::planning::MainNotReady::default_instance();
}
inline ::apollo::planning::MainNotReady* MainDecision::mutable_not_ready() {
  if (!has_not_ready()) {
    clear_task();
    set_has_not_ready();
    task_.not_ready_ = new ::apollo::planning::MainNotReady;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.not_ready)
  return task_.not_ready_;
}
inline ::apollo::planning::MainNotReady* MainDecision::release_not_ready() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.not_ready)
  if (has_not_ready()) {
    clear_has_task();
    ::apollo::planning::MainNotReady* temp = task_.not_ready_;
    task_.not_ready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_not_ready(::apollo::planning::MainNotReady* not_ready) {
  clear_task();
  if (not_ready) {
    set_has_not_ready();
    task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.not_ready)
}

// optional .apollo.planning.MainParking parking = 8;
inline bool MainDecision::has_parking() const {
  return task_case() == kParking;
}
inline void MainDecision::set_has_parking() {
  _oneof_case_[0] = kParking;
}
inline void MainDecision::clear_parking() {
  if (has_parking()) {
    delete task_.parking_;
    clear_has_task();
  }
}
inline  const ::apollo::planning::MainParking& MainDecision::parking() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.parking)
  return has_parking()
      ? *task_.parking_
      : ::apollo::planning::MainParking::default_instance();
}
inline ::apollo::planning::MainParking* MainDecision::mutable_parking() {
  if (!has_parking()) {
    clear_task();
    set_has_parking();
    task_.parking_ = new ::apollo::planning::MainParking;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.parking)
  return task_.parking_;
}
inline ::apollo::planning::MainParking* MainDecision::release_parking() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.parking)
  if (has_parking()) {
    clear_has_task();
    ::apollo::planning::MainParking* temp = task_.parking_;
    task_.parking_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MainDecision::set_allocated_parking(::apollo::planning::MainParking* parking) {
  clear_task();
  if (parking) {
    set_has_parking();
    task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.parking)
}

// repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
inline int MainDecision::target_lane_size() const {
  return target_lane_.size();
}
inline void MainDecision::clear_target_lane() {
  target_lane_.Clear();
}
inline const ::apollo::planning::TargetLane& MainDecision::target_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.target_lane)
  return target_lane_.Get(index);
}
inline ::apollo::planning::TargetLane* MainDecision::mutable_target_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.target_lane)
  return target_lane_.Mutable(index);
}
inline ::apollo::planning::TargetLane* MainDecision::add_target_lane() {
  // @@protoc_insertion_point(field_add:apollo.planning.MainDecision.target_lane)
  return target_lane_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >*
MainDecision::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MainDecision.target_lane)
  return &target_lane_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >&
MainDecision::target_lane() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MainDecision.target_lane)
  return target_lane_;
}

inline bool MainDecision::has_task() const {
  return task_case() != TASK_NOT_SET;
}
inline void MainDecision::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
inline MainDecision::TaskCase MainDecision::task_case() const {
  return MainDecision::TaskCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DecisionResult

// optional .apollo.planning.MainDecision main_decision = 1;
inline bool DecisionResult::has_main_decision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecisionResult::set_has_main_decision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecisionResult::clear_has_main_decision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecisionResult::clear_main_decision() {
  if (main_decision_ != NULL) main_decision_->::apollo::planning::MainDecision::Clear();
  clear_has_main_decision();
}
inline const ::apollo::planning::MainDecision& DecisionResult::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.main_decision)
  return main_decision_ != NULL ? *main_decision_ : *default_instance_->main_decision_;
}
inline ::apollo::planning::MainDecision* DecisionResult::mutable_main_decision() {
  set_has_main_decision();
  if (main_decision_ == NULL) {
    main_decision_ = new ::apollo::planning::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.main_decision)
  return main_decision_;
}
inline ::apollo::planning::MainDecision* DecisionResult::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.main_decision)
  clear_has_main_decision();
  ::apollo::planning::MainDecision* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_main_decision(::apollo::planning::MainDecision* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    set_has_main_decision();
  } else {
    clear_has_main_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.main_decision)
}

// optional .apollo.planning.ObjectDecisions object_decision = 2;
inline bool DecisionResult::has_object_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecisionResult::set_has_object_decision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecisionResult::clear_has_object_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecisionResult::clear_object_decision() {
  if (object_decision_ != NULL) object_decision_->::apollo::planning::ObjectDecisions::Clear();
  clear_has_object_decision();
}
inline const ::apollo::planning::ObjectDecisions& DecisionResult::object_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.object_decision)
  return object_decision_ != NULL ? *object_decision_ : *default_instance_->object_decision_;
}
inline ::apollo::planning::ObjectDecisions* DecisionResult::mutable_object_decision() {
  set_has_object_decision();
  if (object_decision_ == NULL) {
    object_decision_ = new ::apollo::planning::ObjectDecisions;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.object_decision)
  return object_decision_;
}
inline ::apollo::planning::ObjectDecisions* DecisionResult::release_object_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.object_decision)
  clear_has_object_decision();
  ::apollo::planning::ObjectDecisions* temp = object_decision_;
  object_decision_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_object_decision(::apollo::planning::ObjectDecisions* object_decision) {
  delete object_decision_;
  object_decision_ = object_decision;
  if (object_decision) {
    set_has_object_decision();
  } else {
    clear_has_object_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.object_decision)
}

// optional .apollo.common.VehicleSignal vehicle_signal = 3;
inline bool DecisionResult::has_vehicle_signal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DecisionResult::set_has_vehicle_signal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DecisionResult::clear_has_vehicle_signal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DecisionResult::clear_vehicle_signal() {
  if (vehicle_signal_ != NULL) vehicle_signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_vehicle_signal();
}
inline const ::apollo::common::VehicleSignal& DecisionResult::vehicle_signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.vehicle_signal)
  return vehicle_signal_ != NULL ? *vehicle_signal_ : *default_instance_->vehicle_signal_;
}
inline ::apollo::common::VehicleSignal* DecisionResult::mutable_vehicle_signal() {
  set_has_vehicle_signal();
  if (vehicle_signal_ == NULL) {
    vehicle_signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.vehicle_signal)
  return vehicle_signal_;
}
inline ::apollo::common::VehicleSignal* DecisionResult::release_vehicle_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.vehicle_signal)
  clear_has_vehicle_signal();
  ::apollo::common::VehicleSignal* temp = vehicle_signal_;
  vehicle_signal_ = NULL;
  return temp;
}
inline void DecisionResult::set_allocated_vehicle_signal(::apollo::common::VehicleSignal* vehicle_signal) {
  delete vehicle_signal_;
  vehicle_signal_ = vehicle_signal;
  if (vehicle_signal) {
    set_has_vehicle_signal();
  } else {
    clear_has_vehicle_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.vehicle_signal)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::ObjectNudge_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ObjectNudge_Type>() {
  return ::apollo::planning::ObjectNudge_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ObjectSidePass_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ObjectSidePass_Type>() {
  return ::apollo::planning::ObjectSidePass_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::MainEmergencyStop_ReasonCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::MainEmergencyStop_ReasonCode>() {
  return ::apollo::planning::MainEmergencyStop_ReasonCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::MainChangeLane_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::MainChangeLane_Type>() {
  return ::apollo::planning::MainChangeLane_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::StopReasonCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::StopReasonCode>() {
  return ::apollo::planning::StopReasonCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fdecision_2eproto__INCLUDED
