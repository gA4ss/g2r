// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/qp_st_speed_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/qp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* QpSplineConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QpSplineConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* QpPiecewiseConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QpPiecewiseConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* QpStSpeedConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QpStSpeedConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/qp_st_speed_config.proto");
  GOOGLE_CHECK(file != NULL);
  QpSplineConfig_descriptor_ = file->message_type(0);
  static const int QpSplineConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, number_of_discrete_graph_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, spline_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, speed_kernel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, accel_kernel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, jerk_kernel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, follow_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, stop_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, cruise_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, regularization_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, follow_drag_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, dp_st_reference_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, init_jerk_kernel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, yield_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, yield_drag_distance_),
  };
  QpSplineConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QpSplineConfig_descriptor_,
      QpSplineConfig::default_instance_,
      QpSplineConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(QpSplineConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineConfig, _internal_metadata_),
      -1);
  QpPiecewiseConfig_descriptor_ = file->message_type(1);
  static const int QpPiecewiseConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, number_of_evaluated_graph_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, accel_kernel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, jerk_kernel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, follow_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, stop_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, cruise_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, regularization_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, follow_drag_distance_),
  };
  QpPiecewiseConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QpPiecewiseConfig_descriptor_,
      QpPiecewiseConfig::default_instance_,
      QpPiecewiseConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(QpPiecewiseConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpPiecewiseConfig, _internal_metadata_),
      -1);
  QpStSpeedConfig_descriptor_ = file->message_type(2);
  static const int QpStSpeedConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, total_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, preferred_max_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, preferred_min_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, max_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, min_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, qp_spline_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, qp_piecewise_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, st_boundary_config_),
  };
  QpStSpeedConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QpStSpeedConfig_descriptor_,
      QpStSpeedConfig::default_instance_,
      QpStSpeedConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(QpStSpeedConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpStSpeedConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QpSplineConfig_descriptor_, &QpSplineConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QpPiecewiseConfig_descriptor_, &QpPiecewiseConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QpStSpeedConfig_descriptor_, &QpStSpeedConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fqp_5fst_5fspeed_5fconfig_2eproto() {
  delete QpSplineConfig::default_instance_;
  delete QpSplineConfig_reflection_;
  delete QpPiecewiseConfig::default_instance_;
  delete QpPiecewiseConfig_reflection_;
  delete QpStSpeedConfig::default_instance_;
  delete QpStSpeedConfig_reflection_;
}

void protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::planning::protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!planning/qp_st_speed_config.proto\022\017apo"
    "llo.planning\032!planning/st_boundary_confi"
    "g.proto\"\231\003\n\016QpSplineConfig\022\"\n\032number_of_"
    "discrete_graph_t\030\001 \001(\r\022\024\n\014spline_order\030\002"
    " \001(\r\022\033\n\023speed_kernel_weight\030\003 \001(\001\022\033\n\023acc"
    "el_kernel_weight\030\004 \001(\001\022\032\n\022jerk_kernel_we"
    "ight\030\005 \001(\001\022\025\n\rfollow_weight\030\006 \001(\001\022\023\n\013sto"
    "p_weight\030\007 \001(\001\022\025\n\rcruise_weight\030\010 \001(\001\022\"\n"
    "\025regularization_weight\030\t \001(\001:\0030.1\022\034\n\024fol"
    "low_drag_distance\030\n \001(\001\022\036\n\026dp_st_referen"
    "ce_weight\030\013 \001(\001\022\037\n\027init_jerk_kernel_weig"
    "ht\030\014 \001(\001\022\024\n\014yield_weight\030\r \001(\001\022\033\n\023yield_"
    "drag_distance\030\016 \001(\001\"\366\001\n\021QpPiecewiseConfi"
    "g\022#\n\033number_of_evaluated_graph_t\030\001 \001(\r\022\033"
    "\n\023accel_kernel_weight\030\002 \001(\001\022\032\n\022jerk_kern"
    "el_weight\030\003 \001(\001\022\025\n\rfollow_weight\030\004 \001(\001\022\023"
    "\n\013stop_weight\030\005 \001(\001\022\025\n\rcruise_weight\030\006 \001"
    "(\001\022\"\n\025regularization_weight\030\007 \001(\001:\0030.1\022\034"
    "\n\024follow_drag_distance\030\010 \001(\001\"\223\003\n\017QpStSpe"
    "edConfig\022\036\n\021total_path_length\030\001 \001(\001:\003200"
    "\022\025\n\ntotal_time\030\002 \001(\001:\0016\022\'\n\032preferred_max"
    "_acceleration\030\004 \001(\001:\0031.2\022(\n\032preferred_mi"
    "n_deceleration\030\005 \001(\001:\004-1.8\022\033\n\020max_accele"
    "ration\030\006 \001(\001:\0012\022\036\n\020min_deceleration\030\007 \001("
    "\001:\004-4.5\0229\n\020qp_spline_config\030\010 \001(\0132\037.apol"
    "lo.planning.QpSplineConfig\022\?\n\023qp_piecewi"
    "se_config\030\t \001(\0132\".apollo.planning.QpPiec"
    "ewiseConfig\022=\n\022st_boundary_config\030\n \001(\0132"
    "!.apollo.planning.StBoundaryConfig", 1154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/qp_st_speed_config.proto", &protobuf_RegisterTypes);
  QpSplineConfig::default_instance_ = new QpSplineConfig();
  QpPiecewiseConfig::default_instance_ = new QpPiecewiseConfig();
  QpStSpeedConfig::default_instance_ = new QpStSpeedConfig();
  QpSplineConfig::default_instance_->InitAsDefaultInstance();
  QpPiecewiseConfig::default_instance_->InitAsDefaultInstance();
  QpStSpeedConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fqp_5fst_5fspeed_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fqp_5fst_5fspeed_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fqp_5fst_5fspeed_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fqp_5fst_5fspeed_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplineConfig::kNumberOfDiscreteGraphTFieldNumber;
const int QpSplineConfig::kSplineOrderFieldNumber;
const int QpSplineConfig::kSpeedKernelWeightFieldNumber;
const int QpSplineConfig::kAccelKernelWeightFieldNumber;
const int QpSplineConfig::kJerkKernelWeightFieldNumber;
const int QpSplineConfig::kFollowWeightFieldNumber;
const int QpSplineConfig::kStopWeightFieldNumber;
const int QpSplineConfig::kCruiseWeightFieldNumber;
const int QpSplineConfig::kRegularizationWeightFieldNumber;
const int QpSplineConfig::kFollowDragDistanceFieldNumber;
const int QpSplineConfig::kDpStReferenceWeightFieldNumber;
const int QpSplineConfig::kInitJerkKernelWeightFieldNumber;
const int QpSplineConfig::kYieldWeightFieldNumber;
const int QpSplineConfig::kYieldDragDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplineConfig::QpSplineConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QpSplineConfig)
}

void QpSplineConfig::InitAsDefaultInstance() {
}

QpSplineConfig::QpSplineConfig(const QpSplineConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplineConfig)
}

void QpSplineConfig::SharedCtor() {
  _cached_size_ = 0;
  number_of_discrete_graph_t_ = 0u;
  spline_order_ = 0u;
  speed_kernel_weight_ = 0;
  accel_kernel_weight_ = 0;
  jerk_kernel_weight_ = 0;
  follow_weight_ = 0;
  stop_weight_ = 0;
  cruise_weight_ = 0;
  regularization_weight_ = 0.1;
  follow_drag_distance_ = 0;
  dp_st_reference_weight_ = 0;
  init_jerk_kernel_weight_ = 0;
  yield_weight_ = 0;
  yield_drag_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QpSplineConfig::~QpSplineConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplineConfig)
  SharedDtor();
}

void QpSplineConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QpSplineConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpSplineConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QpSplineConfig_descriptor_;
}

const QpSplineConfig& QpSplineConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  return *default_instance_;
}

QpSplineConfig* QpSplineConfig::default_instance_ = NULL;

QpSplineConfig* QpSplineConfig::New(::google::protobuf::Arena* arena) const {
  QpSplineConfig* n = new QpSplineConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpSplineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplineConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QpSplineConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QpSplineConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(number_of_discrete_graph_t_, cruise_weight_);
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(follow_drag_distance_, yield_drag_distance_);
    regularization_weight_ = 0.1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QpSplineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.QpSplineConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number_of_discrete_graph_t = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_discrete_graph_t_)));
          set_has_number_of_discrete_graph_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_spline_order;
        break;
      }

      // optional uint32 spline_order = 2;
      case 2: {
        if (tag == 16) {
         parse_spline_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
          set_has_spline_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_speed_kernel_weight;
        break;
      }

      // optional double speed_kernel_weight = 3;
      case 3: {
        if (tag == 25) {
         parse_speed_kernel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_kernel_weight_)));
          set_has_speed_kernel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_accel_kernel_weight;
        break;
      }

      // optional double accel_kernel_weight = 4;
      case 4: {
        if (tag == 33) {
         parse_accel_kernel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_kernel_weight_)));
          set_has_accel_kernel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_jerk_kernel_weight;
        break;
      }

      // optional double jerk_kernel_weight = 5;
      case 5: {
        if (tag == 41) {
         parse_jerk_kernel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_kernel_weight_)));
          set_has_jerk_kernel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_follow_weight;
        break;
      }

      // optional double follow_weight = 6;
      case 6: {
        if (tag == 49) {
         parse_follow_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_weight_)));
          set_has_follow_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_stop_weight;
        break;
      }

      // optional double stop_weight = 7;
      case 7: {
        if (tag == 57) {
         parse_stop_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_weight_)));
          set_has_stop_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_cruise_weight;
        break;
      }

      // optional double cruise_weight = 8;
      case 8: {
        if (tag == 65) {
         parse_cruise_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_weight_)));
          set_has_cruise_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_regularization_weight;
        break;
      }

      // optional double regularization_weight = 9 [default = 0.1];
      case 9: {
        if (tag == 73) {
         parse_regularization_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
          set_has_regularization_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_follow_drag_distance;
        break;
      }

      // optional double follow_drag_distance = 10;
      case 10: {
        if (tag == 81) {
         parse_follow_drag_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_drag_distance_)));
          set_has_follow_drag_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_dp_st_reference_weight;
        break;
      }

      // optional double dp_st_reference_weight = 11;
      case 11: {
        if (tag == 89) {
         parse_dp_st_reference_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dp_st_reference_weight_)));
          set_has_dp_st_reference_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_init_jerk_kernel_weight;
        break;
      }

      // optional double init_jerk_kernel_weight = 12;
      case 12: {
        if (tag == 97) {
         parse_init_jerk_kernel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_jerk_kernel_weight_)));
          set_has_init_jerk_kernel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_yield_weight;
        break;
      }

      // optional double yield_weight = 13;
      case 13: {
        if (tag == 105) {
         parse_yield_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_weight_)));
          set_has_yield_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_yield_drag_distance;
        break;
      }

      // optional double yield_drag_distance = 14;
      case 14: {
        if (tag == 113) {
         parse_yield_drag_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_drag_distance_)));
          set_has_yield_drag_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.QpSplineConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.QpSplineConfig)
  return false;
#undef DO_
}

void QpSplineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.QpSplineConfig)
  // optional uint32 number_of_discrete_graph_t = 1;
  if (has_number_of_discrete_graph_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_discrete_graph_t(), output);
  }

  // optional uint32 spline_order = 2;
  if (has_spline_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spline_order(), output);
  }

  // optional double speed_kernel_weight = 3;
  if (has_speed_kernel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->speed_kernel_weight(), output);
  }

  // optional double accel_kernel_weight = 4;
  if (has_accel_kernel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->accel_kernel_weight(), output);
  }

  // optional double jerk_kernel_weight = 5;
  if (has_jerk_kernel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->jerk_kernel_weight(), output);
  }

  // optional double follow_weight = 6;
  if (has_follow_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->follow_weight(), output);
  }

  // optional double stop_weight = 7;
  if (has_stop_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stop_weight(), output);
  }

  // optional double cruise_weight = 8;
  if (has_cruise_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cruise_weight(), output);
  }

  // optional double regularization_weight = 9 [default = 0.1];
  if (has_regularization_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->regularization_weight(), output);
  }

  // optional double follow_drag_distance = 10;
  if (has_follow_drag_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->follow_drag_distance(), output);
  }

  // optional double dp_st_reference_weight = 11;
  if (has_dp_st_reference_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dp_st_reference_weight(), output);
  }

  // optional double init_jerk_kernel_weight = 12;
  if (has_init_jerk_kernel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->init_jerk_kernel_weight(), output);
  }

  // optional double yield_weight = 13;
  if (has_yield_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->yield_weight(), output);
  }

  // optional double yield_drag_distance = 14;
  if (has_yield_drag_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->yield_drag_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.QpSplineConfig)
}

::google::protobuf::uint8* QpSplineConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplineConfig)
  // optional uint32 number_of_discrete_graph_t = 1;
  if (has_number_of_discrete_graph_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_discrete_graph_t(), target);
  }

  // optional uint32 spline_order = 2;
  if (has_spline_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spline_order(), target);
  }

  // optional double speed_kernel_weight = 3;
  if (has_speed_kernel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->speed_kernel_weight(), target);
  }

  // optional double accel_kernel_weight = 4;
  if (has_accel_kernel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->accel_kernel_weight(), target);
  }

  // optional double jerk_kernel_weight = 5;
  if (has_jerk_kernel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->jerk_kernel_weight(), target);
  }

  // optional double follow_weight = 6;
  if (has_follow_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->follow_weight(), target);
  }

  // optional double stop_weight = 7;
  if (has_stop_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stop_weight(), target);
  }

  // optional double cruise_weight = 8;
  if (has_cruise_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cruise_weight(), target);
  }

  // optional double regularization_weight = 9 [default = 0.1];
  if (has_regularization_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->regularization_weight(), target);
  }

  // optional double follow_drag_distance = 10;
  if (has_follow_drag_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->follow_drag_distance(), target);
  }

  // optional double dp_st_reference_weight = 11;
  if (has_dp_st_reference_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dp_st_reference_weight(), target);
  }

  // optional double init_jerk_kernel_weight = 12;
  if (has_init_jerk_kernel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->init_jerk_kernel_weight(), target);
  }

  // optional double yield_weight = 13;
  if (has_yield_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->yield_weight(), target);
  }

  // optional double yield_drag_distance = 14;
  if (has_yield_drag_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->yield_drag_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplineConfig)
  return target;
}

int QpSplineConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplineConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 number_of_discrete_graph_t = 1;
    if (has_number_of_discrete_graph_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_discrete_graph_t());
    }

    // optional uint32 spline_order = 2;
    if (has_spline_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_order());
    }

    // optional double speed_kernel_weight = 3;
    if (has_speed_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double accel_kernel_weight = 4;
    if (has_accel_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_kernel_weight = 5;
    if (has_jerk_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_weight = 6;
    if (has_follow_weight()) {
      total_size += 1 + 8;
    }

    // optional double stop_weight = 7;
    if (has_stop_weight()) {
      total_size += 1 + 8;
    }

    // optional double cruise_weight = 8;
    if (has_cruise_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double regularization_weight = 9 [default = 0.1];
    if (has_regularization_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_drag_distance = 10;
    if (has_follow_drag_distance()) {
      total_size += 1 + 8;
    }

    // optional double dp_st_reference_weight = 11;
    if (has_dp_st_reference_weight()) {
      total_size += 1 + 8;
    }

    // optional double init_jerk_kernel_weight = 12;
    if (has_init_jerk_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double yield_weight = 13;
    if (has_yield_weight()) {
      total_size += 1 + 8;
    }

    // optional double yield_drag_distance = 14;
    if (has_yield_drag_distance()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpSplineConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QpSplineConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QpSplineConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplineConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QpSplineConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QpSplineConfig)
    MergeFrom(*source);
  }
}

void QpSplineConfig::MergeFrom(const QpSplineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplineConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number_of_discrete_graph_t()) {
      set_number_of_discrete_graph_t(from.number_of_discrete_graph_t());
    }
    if (from.has_spline_order()) {
      set_spline_order(from.spline_order());
    }
    if (from.has_speed_kernel_weight()) {
      set_speed_kernel_weight(from.speed_kernel_weight());
    }
    if (from.has_accel_kernel_weight()) {
      set_accel_kernel_weight(from.accel_kernel_weight());
    }
    if (from.has_jerk_kernel_weight()) {
      set_jerk_kernel_weight(from.jerk_kernel_weight());
    }
    if (from.has_follow_weight()) {
      set_follow_weight(from.follow_weight());
    }
    if (from.has_stop_weight()) {
      set_stop_weight(from.stop_weight());
    }
    if (from.has_cruise_weight()) {
      set_cruise_weight(from.cruise_weight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_regularization_weight()) {
      set_regularization_weight(from.regularization_weight());
    }
    if (from.has_follow_drag_distance()) {
      set_follow_drag_distance(from.follow_drag_distance());
    }
    if (from.has_dp_st_reference_weight()) {
      set_dp_st_reference_weight(from.dp_st_reference_weight());
    }
    if (from.has_init_jerk_kernel_weight()) {
      set_init_jerk_kernel_weight(from.init_jerk_kernel_weight());
    }
    if (from.has_yield_weight()) {
      set_yield_weight(from.yield_weight());
    }
    if (from.has_yield_drag_distance()) {
      set_yield_drag_distance(from.yield_drag_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QpSplineConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QpSplineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplineConfig::CopyFrom(const QpSplineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineConfig::IsInitialized() const {

  return true;
}

void QpSplineConfig::Swap(QpSplineConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplineConfig::InternalSwap(QpSplineConfig* other) {
  std::swap(number_of_discrete_graph_t_, other->number_of_discrete_graph_t_);
  std::swap(spline_order_, other->spline_order_);
  std::swap(speed_kernel_weight_, other->speed_kernel_weight_);
  std::swap(accel_kernel_weight_, other->accel_kernel_weight_);
  std::swap(jerk_kernel_weight_, other->jerk_kernel_weight_);
  std::swap(follow_weight_, other->follow_weight_);
  std::swap(stop_weight_, other->stop_weight_);
  std::swap(cruise_weight_, other->cruise_weight_);
  std::swap(regularization_weight_, other->regularization_weight_);
  std::swap(follow_drag_distance_, other->follow_drag_distance_);
  std::swap(dp_st_reference_weight_, other->dp_st_reference_weight_);
  std::swap(init_jerk_kernel_weight_, other->init_jerk_kernel_weight_);
  std::swap(yield_weight_, other->yield_weight_);
  std::swap(yield_drag_distance_, other->yield_drag_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpSplineConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QpSplineConfig_descriptor_;
  metadata.reflection = QpSplineConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplineConfig

// optional uint32 number_of_discrete_graph_t = 1;
bool QpSplineConfig::has_number_of_discrete_graph_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QpSplineConfig::set_has_number_of_discrete_graph_t() {
  _has_bits_[0] |= 0x00000001u;
}
void QpSplineConfig::clear_has_number_of_discrete_graph_t() {
  _has_bits_[0] &= ~0x00000001u;
}
void QpSplineConfig::clear_number_of_discrete_graph_t() {
  number_of_discrete_graph_t_ = 0u;
  clear_has_number_of_discrete_graph_t();
}
 ::google::protobuf::uint32 QpSplineConfig::number_of_discrete_graph_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.number_of_discrete_graph_t)
  return number_of_discrete_graph_t_;
}
 void QpSplineConfig::set_number_of_discrete_graph_t(::google::protobuf::uint32 value) {
  set_has_number_of_discrete_graph_t();
  number_of_discrete_graph_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.number_of_discrete_graph_t)
}

// optional uint32 spline_order = 2;
bool QpSplineConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QpSplineConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000002u;
}
void QpSplineConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000002u;
}
void QpSplineConfig::clear_spline_order() {
  spline_order_ = 0u;
  clear_has_spline_order();
}
 ::google::protobuf::uint32 QpSplineConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.spline_order)
  return spline_order_;
}
 void QpSplineConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.spline_order)
}

// optional double speed_kernel_weight = 3;
bool QpSplineConfig::has_speed_kernel_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QpSplineConfig::set_has_speed_kernel_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void QpSplineConfig::clear_has_speed_kernel_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void QpSplineConfig::clear_speed_kernel_weight() {
  speed_kernel_weight_ = 0;
  clear_has_speed_kernel_weight();
}
 double QpSplineConfig::speed_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.speed_kernel_weight)
  return speed_kernel_weight_;
}
 void QpSplineConfig::set_speed_kernel_weight(double value) {
  set_has_speed_kernel_weight();
  speed_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.speed_kernel_weight)
}

// optional double accel_kernel_weight = 4;
bool QpSplineConfig::has_accel_kernel_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QpSplineConfig::set_has_accel_kernel_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void QpSplineConfig::clear_has_accel_kernel_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void QpSplineConfig::clear_accel_kernel_weight() {
  accel_kernel_weight_ = 0;
  clear_has_accel_kernel_weight();
}
 double QpSplineConfig::accel_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.accel_kernel_weight)
  return accel_kernel_weight_;
}
 void QpSplineConfig::set_accel_kernel_weight(double value) {
  set_has_accel_kernel_weight();
  accel_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.accel_kernel_weight)
}

// optional double jerk_kernel_weight = 5;
bool QpSplineConfig::has_jerk_kernel_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QpSplineConfig::set_has_jerk_kernel_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void QpSplineConfig::clear_has_jerk_kernel_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void QpSplineConfig::clear_jerk_kernel_weight() {
  jerk_kernel_weight_ = 0;
  clear_has_jerk_kernel_weight();
}
 double QpSplineConfig::jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.jerk_kernel_weight)
  return jerk_kernel_weight_;
}
 void QpSplineConfig::set_jerk_kernel_weight(double value) {
  set_has_jerk_kernel_weight();
  jerk_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.jerk_kernel_weight)
}

// optional double follow_weight = 6;
bool QpSplineConfig::has_follow_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QpSplineConfig::set_has_follow_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void QpSplineConfig::clear_has_follow_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void QpSplineConfig::clear_follow_weight() {
  follow_weight_ = 0;
  clear_has_follow_weight();
}
 double QpSplineConfig::follow_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.follow_weight)
  return follow_weight_;
}
 void QpSplineConfig::set_follow_weight(double value) {
  set_has_follow_weight();
  follow_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.follow_weight)
}

// optional double stop_weight = 7;
bool QpSplineConfig::has_stop_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QpSplineConfig::set_has_stop_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void QpSplineConfig::clear_has_stop_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void QpSplineConfig::clear_stop_weight() {
  stop_weight_ = 0;
  clear_has_stop_weight();
}
 double QpSplineConfig::stop_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.stop_weight)
  return stop_weight_;
}
 void QpSplineConfig::set_stop_weight(double value) {
  set_has_stop_weight();
  stop_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.stop_weight)
}

// optional double cruise_weight = 8;
bool QpSplineConfig::has_cruise_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QpSplineConfig::set_has_cruise_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void QpSplineConfig::clear_has_cruise_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void QpSplineConfig::clear_cruise_weight() {
  cruise_weight_ = 0;
  clear_has_cruise_weight();
}
 double QpSplineConfig::cruise_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.cruise_weight)
  return cruise_weight_;
}
 void QpSplineConfig::set_cruise_weight(double value) {
  set_has_cruise_weight();
  cruise_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.cruise_weight)
}

// optional double regularization_weight = 9 [default = 0.1];
bool QpSplineConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QpSplineConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void QpSplineConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void QpSplineConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
 double QpSplineConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.regularization_weight)
  return regularization_weight_;
}
 void QpSplineConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.regularization_weight)
}

// optional double follow_drag_distance = 10;
bool QpSplineConfig::has_follow_drag_distance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QpSplineConfig::set_has_follow_drag_distance() {
  _has_bits_[0] |= 0x00000200u;
}
void QpSplineConfig::clear_has_follow_drag_distance() {
  _has_bits_[0] &= ~0x00000200u;
}
void QpSplineConfig::clear_follow_drag_distance() {
  follow_drag_distance_ = 0;
  clear_has_follow_drag_distance();
}
 double QpSplineConfig::follow_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.follow_drag_distance)
  return follow_drag_distance_;
}
 void QpSplineConfig::set_follow_drag_distance(double value) {
  set_has_follow_drag_distance();
  follow_drag_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.follow_drag_distance)
}

// optional double dp_st_reference_weight = 11;
bool QpSplineConfig::has_dp_st_reference_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void QpSplineConfig::set_has_dp_st_reference_weight() {
  _has_bits_[0] |= 0x00000400u;
}
void QpSplineConfig::clear_has_dp_st_reference_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
void QpSplineConfig::clear_dp_st_reference_weight() {
  dp_st_reference_weight_ = 0;
  clear_has_dp_st_reference_weight();
}
 double QpSplineConfig::dp_st_reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.dp_st_reference_weight)
  return dp_st_reference_weight_;
}
 void QpSplineConfig::set_dp_st_reference_weight(double value) {
  set_has_dp_st_reference_weight();
  dp_st_reference_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.dp_st_reference_weight)
}

// optional double init_jerk_kernel_weight = 12;
bool QpSplineConfig::has_init_jerk_kernel_weight() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void QpSplineConfig::set_has_init_jerk_kernel_weight() {
  _has_bits_[0] |= 0x00000800u;
}
void QpSplineConfig::clear_has_init_jerk_kernel_weight() {
  _has_bits_[0] &= ~0x00000800u;
}
void QpSplineConfig::clear_init_jerk_kernel_weight() {
  init_jerk_kernel_weight_ = 0;
  clear_has_init_jerk_kernel_weight();
}
 double QpSplineConfig::init_jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.init_jerk_kernel_weight)
  return init_jerk_kernel_weight_;
}
 void QpSplineConfig::set_init_jerk_kernel_weight(double value) {
  set_has_init_jerk_kernel_weight();
  init_jerk_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.init_jerk_kernel_weight)
}

// optional double yield_weight = 13;
bool QpSplineConfig::has_yield_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void QpSplineConfig::set_has_yield_weight() {
  _has_bits_[0] |= 0x00001000u;
}
void QpSplineConfig::clear_has_yield_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
void QpSplineConfig::clear_yield_weight() {
  yield_weight_ = 0;
  clear_has_yield_weight();
}
 double QpSplineConfig::yield_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.yield_weight)
  return yield_weight_;
}
 void QpSplineConfig::set_yield_weight(double value) {
  set_has_yield_weight();
  yield_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.yield_weight)
}

// optional double yield_drag_distance = 14;
bool QpSplineConfig::has_yield_drag_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void QpSplineConfig::set_has_yield_drag_distance() {
  _has_bits_[0] |= 0x00002000u;
}
void QpSplineConfig::clear_has_yield_drag_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
void QpSplineConfig::clear_yield_drag_distance() {
  yield_drag_distance_ = 0;
  clear_has_yield_drag_distance();
}
 double QpSplineConfig::yield_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.yield_drag_distance)
  return yield_drag_distance_;
}
 void QpSplineConfig::set_yield_drag_distance(double value) {
  set_has_yield_drag_distance();
  yield_drag_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.yield_drag_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpPiecewiseConfig::kNumberOfEvaluatedGraphTFieldNumber;
const int QpPiecewiseConfig::kAccelKernelWeightFieldNumber;
const int QpPiecewiseConfig::kJerkKernelWeightFieldNumber;
const int QpPiecewiseConfig::kFollowWeightFieldNumber;
const int QpPiecewiseConfig::kStopWeightFieldNumber;
const int QpPiecewiseConfig::kCruiseWeightFieldNumber;
const int QpPiecewiseConfig::kRegularizationWeightFieldNumber;
const int QpPiecewiseConfig::kFollowDragDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpPiecewiseConfig::QpPiecewiseConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QpPiecewiseConfig)
}

void QpPiecewiseConfig::InitAsDefaultInstance() {
}

QpPiecewiseConfig::QpPiecewiseConfig(const QpPiecewiseConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpPiecewiseConfig)
}

void QpPiecewiseConfig::SharedCtor() {
  _cached_size_ = 0;
  number_of_evaluated_graph_t_ = 0u;
  accel_kernel_weight_ = 0;
  jerk_kernel_weight_ = 0;
  follow_weight_ = 0;
  stop_weight_ = 0;
  cruise_weight_ = 0;
  regularization_weight_ = 0.1;
  follow_drag_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QpPiecewiseConfig::~QpPiecewiseConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpPiecewiseConfig)
  SharedDtor();
}

void QpPiecewiseConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QpPiecewiseConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpPiecewiseConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QpPiecewiseConfig_descriptor_;
}

const QpPiecewiseConfig& QpPiecewiseConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  return *default_instance_;
}

QpPiecewiseConfig* QpPiecewiseConfig::default_instance_ = NULL;

QpPiecewiseConfig* QpPiecewiseConfig::New(::google::protobuf::Arena* arena) const {
  QpPiecewiseConfig* n = new QpPiecewiseConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpPiecewiseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpPiecewiseConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QpPiecewiseConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QpPiecewiseConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(accel_kernel_weight_, cruise_weight_);
    ZR_(follow_drag_distance_, number_of_evaluated_graph_t_);
    regularization_weight_ = 0.1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QpPiecewiseConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.QpPiecewiseConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number_of_evaluated_graph_t = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_evaluated_graph_t_)));
          set_has_number_of_evaluated_graph_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_accel_kernel_weight;
        break;
      }

      // optional double accel_kernel_weight = 2;
      case 2: {
        if (tag == 17) {
         parse_accel_kernel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_kernel_weight_)));
          set_has_accel_kernel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_jerk_kernel_weight;
        break;
      }

      // optional double jerk_kernel_weight = 3;
      case 3: {
        if (tag == 25) {
         parse_jerk_kernel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_kernel_weight_)));
          set_has_jerk_kernel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_follow_weight;
        break;
      }

      // optional double follow_weight = 4;
      case 4: {
        if (tag == 33) {
         parse_follow_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_weight_)));
          set_has_follow_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_stop_weight;
        break;
      }

      // optional double stop_weight = 5;
      case 5: {
        if (tag == 41) {
         parse_stop_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_weight_)));
          set_has_stop_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_cruise_weight;
        break;
      }

      // optional double cruise_weight = 6;
      case 6: {
        if (tag == 49) {
         parse_cruise_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_weight_)));
          set_has_cruise_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_regularization_weight;
        break;
      }

      // optional double regularization_weight = 7 [default = 0.1];
      case 7: {
        if (tag == 57) {
         parse_regularization_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
          set_has_regularization_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_follow_drag_distance;
        break;
      }

      // optional double follow_drag_distance = 8;
      case 8: {
        if (tag == 65) {
         parse_follow_drag_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_drag_distance_)));
          set_has_follow_drag_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.QpPiecewiseConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.QpPiecewiseConfig)
  return false;
#undef DO_
}

void QpPiecewiseConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.QpPiecewiseConfig)
  // optional uint32 number_of_evaluated_graph_t = 1;
  if (has_number_of_evaluated_graph_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_evaluated_graph_t(), output);
  }

  // optional double accel_kernel_weight = 2;
  if (has_accel_kernel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->accel_kernel_weight(), output);
  }

  // optional double jerk_kernel_weight = 3;
  if (has_jerk_kernel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->jerk_kernel_weight(), output);
  }

  // optional double follow_weight = 4;
  if (has_follow_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->follow_weight(), output);
  }

  // optional double stop_weight = 5;
  if (has_stop_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stop_weight(), output);
  }

  // optional double cruise_weight = 6;
  if (has_cruise_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cruise_weight(), output);
  }

  // optional double regularization_weight = 7 [default = 0.1];
  if (has_regularization_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->regularization_weight(), output);
  }

  // optional double follow_drag_distance = 8;
  if (has_follow_drag_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->follow_drag_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.QpPiecewiseConfig)
}

::google::protobuf::uint8* QpPiecewiseConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpPiecewiseConfig)
  // optional uint32 number_of_evaluated_graph_t = 1;
  if (has_number_of_evaluated_graph_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_evaluated_graph_t(), target);
  }

  // optional double accel_kernel_weight = 2;
  if (has_accel_kernel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->accel_kernel_weight(), target);
  }

  // optional double jerk_kernel_weight = 3;
  if (has_jerk_kernel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->jerk_kernel_weight(), target);
  }

  // optional double follow_weight = 4;
  if (has_follow_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->follow_weight(), target);
  }

  // optional double stop_weight = 5;
  if (has_stop_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stop_weight(), target);
  }

  // optional double cruise_weight = 6;
  if (has_cruise_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cruise_weight(), target);
  }

  // optional double regularization_weight = 7 [default = 0.1];
  if (has_regularization_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->regularization_weight(), target);
  }

  // optional double follow_drag_distance = 8;
  if (has_follow_drag_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->follow_drag_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpPiecewiseConfig)
  return target;
}

int QpPiecewiseConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpPiecewiseConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 number_of_evaluated_graph_t = 1;
    if (has_number_of_evaluated_graph_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_evaluated_graph_t());
    }

    // optional double accel_kernel_weight = 2;
    if (has_accel_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_kernel_weight = 3;
    if (has_jerk_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_weight = 4;
    if (has_follow_weight()) {
      total_size += 1 + 8;
    }

    // optional double stop_weight = 5;
    if (has_stop_weight()) {
      total_size += 1 + 8;
    }

    // optional double cruise_weight = 6;
    if (has_cruise_weight()) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 7 [default = 0.1];
    if (has_regularization_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_drag_distance = 8;
    if (has_follow_drag_distance()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpPiecewiseConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QpPiecewiseConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QpPiecewiseConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QpPiecewiseConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QpPiecewiseConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QpPiecewiseConfig)
    MergeFrom(*source);
  }
}

void QpPiecewiseConfig::MergeFrom(const QpPiecewiseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpPiecewiseConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number_of_evaluated_graph_t()) {
      set_number_of_evaluated_graph_t(from.number_of_evaluated_graph_t());
    }
    if (from.has_accel_kernel_weight()) {
      set_accel_kernel_weight(from.accel_kernel_weight());
    }
    if (from.has_jerk_kernel_weight()) {
      set_jerk_kernel_weight(from.jerk_kernel_weight());
    }
    if (from.has_follow_weight()) {
      set_follow_weight(from.follow_weight());
    }
    if (from.has_stop_weight()) {
      set_stop_weight(from.stop_weight());
    }
    if (from.has_cruise_weight()) {
      set_cruise_weight(from.cruise_weight());
    }
    if (from.has_regularization_weight()) {
      set_regularization_weight(from.regularization_weight());
    }
    if (from.has_follow_drag_distance()) {
      set_follow_drag_distance(from.follow_drag_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QpPiecewiseConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QpPiecewiseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpPiecewiseConfig::CopyFrom(const QpPiecewiseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpPiecewiseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpPiecewiseConfig::IsInitialized() const {

  return true;
}

void QpPiecewiseConfig::Swap(QpPiecewiseConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpPiecewiseConfig::InternalSwap(QpPiecewiseConfig* other) {
  std::swap(number_of_evaluated_graph_t_, other->number_of_evaluated_graph_t_);
  std::swap(accel_kernel_weight_, other->accel_kernel_weight_);
  std::swap(jerk_kernel_weight_, other->jerk_kernel_weight_);
  std::swap(follow_weight_, other->follow_weight_);
  std::swap(stop_weight_, other->stop_weight_);
  std::swap(cruise_weight_, other->cruise_weight_);
  std::swap(regularization_weight_, other->regularization_weight_);
  std::swap(follow_drag_distance_, other->follow_drag_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpPiecewiseConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QpPiecewiseConfig_descriptor_;
  metadata.reflection = QpPiecewiseConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QpPiecewiseConfig

// optional uint32 number_of_evaluated_graph_t = 1;
bool QpPiecewiseConfig::has_number_of_evaluated_graph_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QpPiecewiseConfig::set_has_number_of_evaluated_graph_t() {
  _has_bits_[0] |= 0x00000001u;
}
void QpPiecewiseConfig::clear_has_number_of_evaluated_graph_t() {
  _has_bits_[0] &= ~0x00000001u;
}
void QpPiecewiseConfig::clear_number_of_evaluated_graph_t() {
  number_of_evaluated_graph_t_ = 0u;
  clear_has_number_of_evaluated_graph_t();
}
 ::google::protobuf::uint32 QpPiecewiseConfig::number_of_evaluated_graph_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.number_of_evaluated_graph_t)
  return number_of_evaluated_graph_t_;
}
 void QpPiecewiseConfig::set_number_of_evaluated_graph_t(::google::protobuf::uint32 value) {
  set_has_number_of_evaluated_graph_t();
  number_of_evaluated_graph_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.number_of_evaluated_graph_t)
}

// optional double accel_kernel_weight = 2;
bool QpPiecewiseConfig::has_accel_kernel_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QpPiecewiseConfig::set_has_accel_kernel_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void QpPiecewiseConfig::clear_has_accel_kernel_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void QpPiecewiseConfig::clear_accel_kernel_weight() {
  accel_kernel_weight_ = 0;
  clear_has_accel_kernel_weight();
}
 double QpPiecewiseConfig::accel_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.accel_kernel_weight)
  return accel_kernel_weight_;
}
 void QpPiecewiseConfig::set_accel_kernel_weight(double value) {
  set_has_accel_kernel_weight();
  accel_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.accel_kernel_weight)
}

// optional double jerk_kernel_weight = 3;
bool QpPiecewiseConfig::has_jerk_kernel_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QpPiecewiseConfig::set_has_jerk_kernel_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void QpPiecewiseConfig::clear_has_jerk_kernel_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void QpPiecewiseConfig::clear_jerk_kernel_weight() {
  jerk_kernel_weight_ = 0;
  clear_has_jerk_kernel_weight();
}
 double QpPiecewiseConfig::jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.jerk_kernel_weight)
  return jerk_kernel_weight_;
}
 void QpPiecewiseConfig::set_jerk_kernel_weight(double value) {
  set_has_jerk_kernel_weight();
  jerk_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.jerk_kernel_weight)
}

// optional double follow_weight = 4;
bool QpPiecewiseConfig::has_follow_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QpPiecewiseConfig::set_has_follow_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void QpPiecewiseConfig::clear_has_follow_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void QpPiecewiseConfig::clear_follow_weight() {
  follow_weight_ = 0;
  clear_has_follow_weight();
}
 double QpPiecewiseConfig::follow_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.follow_weight)
  return follow_weight_;
}
 void QpPiecewiseConfig::set_follow_weight(double value) {
  set_has_follow_weight();
  follow_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.follow_weight)
}

// optional double stop_weight = 5;
bool QpPiecewiseConfig::has_stop_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QpPiecewiseConfig::set_has_stop_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void QpPiecewiseConfig::clear_has_stop_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void QpPiecewiseConfig::clear_stop_weight() {
  stop_weight_ = 0;
  clear_has_stop_weight();
}
 double QpPiecewiseConfig::stop_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.stop_weight)
  return stop_weight_;
}
 void QpPiecewiseConfig::set_stop_weight(double value) {
  set_has_stop_weight();
  stop_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.stop_weight)
}

// optional double cruise_weight = 6;
bool QpPiecewiseConfig::has_cruise_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QpPiecewiseConfig::set_has_cruise_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void QpPiecewiseConfig::clear_has_cruise_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void QpPiecewiseConfig::clear_cruise_weight() {
  cruise_weight_ = 0;
  clear_has_cruise_weight();
}
 double QpPiecewiseConfig::cruise_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.cruise_weight)
  return cruise_weight_;
}
 void QpPiecewiseConfig::set_cruise_weight(double value) {
  set_has_cruise_weight();
  cruise_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.cruise_weight)
}

// optional double regularization_weight = 7 [default = 0.1];
bool QpPiecewiseConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QpPiecewiseConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void QpPiecewiseConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void QpPiecewiseConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
 double QpPiecewiseConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.regularization_weight)
  return regularization_weight_;
}
 void QpPiecewiseConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.regularization_weight)
}

// optional double follow_drag_distance = 8;
bool QpPiecewiseConfig::has_follow_drag_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QpPiecewiseConfig::set_has_follow_drag_distance() {
  _has_bits_[0] |= 0x00000080u;
}
void QpPiecewiseConfig::clear_has_follow_drag_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
void QpPiecewiseConfig::clear_follow_drag_distance() {
  follow_drag_distance_ = 0;
  clear_has_follow_drag_distance();
}
 double QpPiecewiseConfig::follow_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.follow_drag_distance)
  return follow_drag_distance_;
}
 void QpPiecewiseConfig::set_follow_drag_distance(double value) {
  set_has_follow_drag_distance();
  follow_drag_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.follow_drag_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpStSpeedConfig::kTotalPathLengthFieldNumber;
const int QpStSpeedConfig::kTotalTimeFieldNumber;
const int QpStSpeedConfig::kPreferredMaxAccelerationFieldNumber;
const int QpStSpeedConfig::kPreferredMinDecelerationFieldNumber;
const int QpStSpeedConfig::kMaxAccelerationFieldNumber;
const int QpStSpeedConfig::kMinDecelerationFieldNumber;
const int QpStSpeedConfig::kQpSplineConfigFieldNumber;
const int QpStSpeedConfig::kQpPiecewiseConfigFieldNumber;
const int QpStSpeedConfig::kStBoundaryConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpStSpeedConfig::QpStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QpStSpeedConfig)
}

void QpStSpeedConfig::InitAsDefaultInstance() {
  qp_spline_config_ = const_cast< ::apollo::planning::QpSplineConfig*>(&::apollo::planning::QpSplineConfig::default_instance());
  qp_piecewise_config_ = const_cast< ::apollo::planning::QpPiecewiseConfig*>(&::apollo::planning::QpPiecewiseConfig::default_instance());
  st_boundary_config_ = const_cast< ::apollo::planning::StBoundaryConfig*>(&::apollo::planning::StBoundaryConfig::default_instance());
}

QpStSpeedConfig::QpStSpeedConfig(const QpStSpeedConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpStSpeedConfig)
}

void QpStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  total_path_length_ = 200;
  total_time_ = 6;
  preferred_max_acceleration_ = 1.2;
  preferred_min_deceleration_ = -1.8;
  max_acceleration_ = 2;
  min_deceleration_ = -4.5;
  qp_spline_config_ = NULL;
  qp_piecewise_config_ = NULL;
  st_boundary_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QpStSpeedConfig::~QpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpStSpeedConfig)
  SharedDtor();
}

void QpStSpeedConfig::SharedDtor() {
  if (this != default_instance_) {
    delete qp_spline_config_;
    delete qp_piecewise_config_;
    delete st_boundary_config_;
  }
}

void QpStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpStSpeedConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QpStSpeedConfig_descriptor_;
}

const QpStSpeedConfig& QpStSpeedConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  return *default_instance_;
}

QpStSpeedConfig* QpStSpeedConfig::default_instance_ = NULL;

QpStSpeedConfig* QpStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  QpStSpeedConfig* n = new QpStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpStSpeedConfig)
  if (_has_bits_[0 / 32] & 255u) {
    total_path_length_ = 200;
    total_time_ = 6;
    preferred_max_acceleration_ = 1.2;
    preferred_min_deceleration_ = -1.8;
    max_acceleration_ = 2;
    min_deceleration_ = -4.5;
    if (has_qp_spline_config()) {
      if (qp_spline_config_ != NULL) qp_spline_config_->::apollo::planning::QpSplineConfig::Clear();
    }
    if (has_qp_piecewise_config()) {
      if (qp_piecewise_config_ != NULL) qp_piecewise_config_->::apollo::planning::QpPiecewiseConfig::Clear();
    }
  }
  if (has_st_boundary_config()) {
    if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QpStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.QpStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_path_length = 1 [default = 200];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
          set_has_total_path_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_time;
        break;
      }

      // optional double total_time = 2 [default = 6];
      case 2: {
        if (tag == 17) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_preferred_max_acceleration;
        break;
      }

      // optional double preferred_max_acceleration = 4 [default = 1.2];
      case 4: {
        if (tag == 33) {
         parse_preferred_max_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_max_acceleration_)));
          set_has_preferred_max_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_preferred_min_deceleration;
        break;
      }

      // optional double preferred_min_deceleration = 5 [default = -1.8];
      case 5: {
        if (tag == 41) {
         parse_preferred_min_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_min_deceleration_)));
          set_has_preferred_min_deceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_max_acceleration;
        break;
      }

      // optional double max_acceleration = 6 [default = 2];
      case 6: {
        if (tag == 49) {
         parse_max_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
          set_has_max_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_min_deceleration;
        break;
      }

      // optional double min_deceleration = 7 [default = -4.5];
      case 7: {
        if (tag == 57) {
         parse_min_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_deceleration_)));
          set_has_min_deceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_qp_spline_config;
        break;
      }

      // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
      case 8: {
        if (tag == 66) {
         parse_qp_spline_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_spline_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_qp_piecewise_config;
        break;
      }

      // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
      case 9: {
        if (tag == 74) {
         parse_qp_piecewise_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_piecewise_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_st_boundary_config;
        break;
      }

      // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
      case 10: {
        if (tag == 82) {
         parse_st_boundary_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st_boundary_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.QpStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.QpStSpeedConfig)
  return false;
#undef DO_
}

void QpStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.QpStSpeedConfig)
  // optional double total_path_length = 1 [default = 200];
  if (has_total_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_path_length(), output);
  }

  // optional double total_time = 2 [default = 6];
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time(), output);
  }

  // optional double preferred_max_acceleration = 4 [default = 1.2];
  if (has_preferred_max_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preferred_max_acceleration(), output);
  }

  // optional double preferred_min_deceleration = 5 [default = -1.8];
  if (has_preferred_min_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->preferred_min_deceleration(), output);
  }

  // optional double max_acceleration = 6 [default = 2];
  if (has_max_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_acceleration(), output);
  }

  // optional double min_deceleration = 7 [default = -4.5];
  if (has_min_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->min_deceleration(), output);
  }

  // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
  if (has_qp_spline_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->qp_spline_config_, output);
  }

  // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
  if (has_qp_piecewise_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->qp_piecewise_config_, output);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
  if (has_st_boundary_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->st_boundary_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.QpStSpeedConfig)
}

::google::protobuf::uint8* QpStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpStSpeedConfig)
  // optional double total_path_length = 1 [default = 200];
  if (has_total_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_path_length(), target);
  }

  // optional double total_time = 2 [default = 6];
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time(), target);
  }

  // optional double preferred_max_acceleration = 4 [default = 1.2];
  if (has_preferred_max_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preferred_max_acceleration(), target);
  }

  // optional double preferred_min_deceleration = 5 [default = -1.8];
  if (has_preferred_min_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->preferred_min_deceleration(), target);
  }

  // optional double max_acceleration = 6 [default = 2];
  if (has_max_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_acceleration(), target);
  }

  // optional double min_deceleration = 7 [default = -4.5];
  if (has_min_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->min_deceleration(), target);
  }

  // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
  if (has_qp_spline_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->qp_spline_config_, false, target);
  }

  // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
  if (has_qp_piecewise_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->qp_piecewise_config_, false, target);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
  if (has_st_boundary_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->st_boundary_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpStSpeedConfig)
  return target;
}

int QpStSpeedConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpStSpeedConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double total_path_length = 1 [default = 200];
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2 [default = 6];
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional double preferred_max_acceleration = 4 [default = 1.2];
    if (has_preferred_max_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double preferred_min_deceleration = 5 [default = -1.8];
    if (has_preferred_min_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 6 [default = 2];
    if (has_max_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double min_deceleration = 7 [default = -4.5];
    if (has_min_deceleration()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
    if (has_qp_spline_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qp_spline_config_);
    }

    // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
    if (has_qp_piecewise_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qp_piecewise_config_);
    }

  }
  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
  if (has_st_boundary_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->st_boundary_config_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QpStSpeedConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QpStSpeedConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QpStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QpStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QpStSpeedConfig)
    MergeFrom(*source);
  }
}

void QpStSpeedConfig::MergeFrom(const QpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpStSpeedConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_path_length()) {
      set_total_path_length(from.total_path_length());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_preferred_max_acceleration()) {
      set_preferred_max_acceleration(from.preferred_max_acceleration());
    }
    if (from.has_preferred_min_deceleration()) {
      set_preferred_min_deceleration(from.preferred_min_deceleration());
    }
    if (from.has_max_acceleration()) {
      set_max_acceleration(from.max_acceleration());
    }
    if (from.has_min_deceleration()) {
      set_min_deceleration(from.min_deceleration());
    }
    if (from.has_qp_spline_config()) {
      mutable_qp_spline_config()->::apollo::planning::QpSplineConfig::MergeFrom(from.qp_spline_config());
    }
    if (from.has_qp_piecewise_config()) {
      mutable_qp_piecewise_config()->::apollo::planning::QpPiecewiseConfig::MergeFrom(from.qp_piecewise_config());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_st_boundary_config()) {
      mutable_st_boundary_config()->::apollo::planning::StBoundaryConfig::MergeFrom(from.st_boundary_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QpStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpStSpeedConfig::CopyFrom(const QpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpStSpeedConfig::IsInitialized() const {

  return true;
}

void QpStSpeedConfig::Swap(QpStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpStSpeedConfig::InternalSwap(QpStSpeedConfig* other) {
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_time_, other->total_time_);
  std::swap(preferred_max_acceleration_, other->preferred_max_acceleration_);
  std::swap(preferred_min_deceleration_, other->preferred_min_deceleration_);
  std::swap(max_acceleration_, other->max_acceleration_);
  std::swap(min_deceleration_, other->min_deceleration_);
  std::swap(qp_spline_config_, other->qp_spline_config_);
  std::swap(qp_piecewise_config_, other->qp_piecewise_config_);
  std::swap(st_boundary_config_, other->st_boundary_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpStSpeedConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QpStSpeedConfig_descriptor_;
  metadata.reflection = QpStSpeedConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QpStSpeedConfig

// optional double total_path_length = 1 [default = 200];
bool QpStSpeedConfig::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QpStSpeedConfig::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000001u;
}
void QpStSpeedConfig::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void QpStSpeedConfig::clear_total_path_length() {
  total_path_length_ = 200;
  clear_has_total_path_length();
}
 double QpStSpeedConfig::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.total_path_length)
  return total_path_length_;
}
 void QpStSpeedConfig::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.total_path_length)
}

// optional double total_time = 2 [default = 6];
bool QpStSpeedConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QpStSpeedConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
void QpStSpeedConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void QpStSpeedConfig::clear_total_time() {
  total_time_ = 6;
  clear_has_total_time();
}
 double QpStSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.total_time)
  return total_time_;
}
 void QpStSpeedConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.total_time)
}

// optional double preferred_max_acceleration = 4 [default = 1.2];
bool QpStSpeedConfig::has_preferred_max_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QpStSpeedConfig::set_has_preferred_max_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void QpStSpeedConfig::clear_has_preferred_max_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void QpStSpeedConfig::clear_preferred_max_acceleration() {
  preferred_max_acceleration_ = 1.2;
  clear_has_preferred_max_acceleration();
}
 double QpStSpeedConfig::preferred_max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.preferred_max_acceleration)
  return preferred_max_acceleration_;
}
 void QpStSpeedConfig::set_preferred_max_acceleration(double value) {
  set_has_preferred_max_acceleration();
  preferred_max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.preferred_max_acceleration)
}

// optional double preferred_min_deceleration = 5 [default = -1.8];
bool QpStSpeedConfig::has_preferred_min_deceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QpStSpeedConfig::set_has_preferred_min_deceleration() {
  _has_bits_[0] |= 0x00000008u;
}
void QpStSpeedConfig::clear_has_preferred_min_deceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
void QpStSpeedConfig::clear_preferred_min_deceleration() {
  preferred_min_deceleration_ = -1.8;
  clear_has_preferred_min_deceleration();
}
 double QpStSpeedConfig::preferred_min_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.preferred_min_deceleration)
  return preferred_min_deceleration_;
}
 void QpStSpeedConfig::set_preferred_min_deceleration(double value) {
  set_has_preferred_min_deceleration();
  preferred_min_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.preferred_min_deceleration)
}

// optional double max_acceleration = 6 [default = 2];
bool QpStSpeedConfig::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QpStSpeedConfig::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
void QpStSpeedConfig::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
void QpStSpeedConfig::clear_max_acceleration() {
  max_acceleration_ = 2;
  clear_has_max_acceleration();
}
 double QpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.max_acceleration)
  return max_acceleration_;
}
 void QpStSpeedConfig::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.max_acceleration)
}

// optional double min_deceleration = 7 [default = -4.5];
bool QpStSpeedConfig::has_min_deceleration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QpStSpeedConfig::set_has_min_deceleration() {
  _has_bits_[0] |= 0x00000020u;
}
void QpStSpeedConfig::clear_has_min_deceleration() {
  _has_bits_[0] &= ~0x00000020u;
}
void QpStSpeedConfig::clear_min_deceleration() {
  min_deceleration_ = -4.5;
  clear_has_min_deceleration();
}
 double QpStSpeedConfig::min_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.min_deceleration)
  return min_deceleration_;
}
 void QpStSpeedConfig::set_min_deceleration(double value) {
  set_has_min_deceleration();
  min_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.min_deceleration)
}

// optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
bool QpStSpeedConfig::has_qp_spline_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QpStSpeedConfig::set_has_qp_spline_config() {
  _has_bits_[0] |= 0x00000040u;
}
void QpStSpeedConfig::clear_has_qp_spline_config() {
  _has_bits_[0] &= ~0x00000040u;
}
void QpStSpeedConfig::clear_qp_spline_config() {
  if (qp_spline_config_ != NULL) qp_spline_config_->::apollo::planning::QpSplineConfig::Clear();
  clear_has_qp_spline_config();
}
const ::apollo::planning::QpSplineConfig& QpStSpeedConfig::qp_spline_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.qp_spline_config)
  return qp_spline_config_ != NULL ? *qp_spline_config_ : *default_instance_->qp_spline_config_;
}
::apollo::planning::QpSplineConfig* QpStSpeedConfig::mutable_qp_spline_config() {
  set_has_qp_spline_config();
  if (qp_spline_config_ == NULL) {
    qp_spline_config_ = new ::apollo::planning::QpSplineConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.qp_spline_config)
  return qp_spline_config_;
}
::apollo::planning::QpSplineConfig* QpStSpeedConfig::release_qp_spline_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.qp_spline_config)
  clear_has_qp_spline_config();
  ::apollo::planning::QpSplineConfig* temp = qp_spline_config_;
  qp_spline_config_ = NULL;
  return temp;
}
void QpStSpeedConfig::set_allocated_qp_spline_config(::apollo::planning::QpSplineConfig* qp_spline_config) {
  delete qp_spline_config_;
  qp_spline_config_ = qp_spline_config;
  if (qp_spline_config) {
    set_has_qp_spline_config();
  } else {
    clear_has_qp_spline_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.qp_spline_config)
}

// optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
bool QpStSpeedConfig::has_qp_piecewise_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QpStSpeedConfig::set_has_qp_piecewise_config() {
  _has_bits_[0] |= 0x00000080u;
}
void QpStSpeedConfig::clear_has_qp_piecewise_config() {
  _has_bits_[0] &= ~0x00000080u;
}
void QpStSpeedConfig::clear_qp_piecewise_config() {
  if (qp_piecewise_config_ != NULL) qp_piecewise_config_->::apollo::planning::QpPiecewiseConfig::Clear();
  clear_has_qp_piecewise_config();
}
const ::apollo::planning::QpPiecewiseConfig& QpStSpeedConfig::qp_piecewise_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  return qp_piecewise_config_ != NULL ? *qp_piecewise_config_ : *default_instance_->qp_piecewise_config_;
}
::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::mutable_qp_piecewise_config() {
  set_has_qp_piecewise_config();
  if (qp_piecewise_config_ == NULL) {
    qp_piecewise_config_ = new ::apollo::planning::QpPiecewiseConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  return qp_piecewise_config_;
}
::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::release_qp_piecewise_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  clear_has_qp_piecewise_config();
  ::apollo::planning::QpPiecewiseConfig* temp = qp_piecewise_config_;
  qp_piecewise_config_ = NULL;
  return temp;
}
void QpStSpeedConfig::set_allocated_qp_piecewise_config(::apollo::planning::QpPiecewiseConfig* qp_piecewise_config) {
  delete qp_piecewise_config_;
  qp_piecewise_config_ = qp_piecewise_config;
  if (qp_piecewise_config) {
    set_has_qp_piecewise_config();
  } else {
    clear_has_qp_piecewise_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
}

// optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
bool QpStSpeedConfig::has_st_boundary_config() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QpStSpeedConfig::set_has_st_boundary_config() {
  _has_bits_[0] |= 0x00000100u;
}
void QpStSpeedConfig::clear_has_st_boundary_config() {
  _has_bits_[0] &= ~0x00000100u;
}
void QpStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
  clear_has_st_boundary_config();
}
const ::apollo::planning::StBoundaryConfig& QpStSpeedConfig::st_boundary_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.st_boundary_config)
  return st_boundary_config_ != NULL ? *st_boundary_config_ : *default_instance_->st_boundary_config_;
}
::apollo::planning::StBoundaryConfig* QpStSpeedConfig::mutable_st_boundary_config() {
  set_has_st_boundary_config();
  if (st_boundary_config_ == NULL) {
    st_boundary_config_ = new ::apollo::planning::StBoundaryConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.st_boundary_config)
  return st_boundary_config_;
}
::apollo::planning::StBoundaryConfig* QpStSpeedConfig::release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.st_boundary_config)
  clear_has_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* temp = st_boundary_config_;
  st_boundary_config_ = NULL;
  return temp;
}
void QpStSpeedConfig::set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config) {
  delete st_boundary_config_;
  st_boundary_config_ = st_boundary_config;
  if (st_boundary_config) {
    set_has_st_boundary_config();
  } else {
    clear_has_st_boundary_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.st_boundary_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
