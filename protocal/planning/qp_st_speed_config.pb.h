// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/qp_st_speed_config.proto

#ifndef PROTOBUF_planning_2fqp_5fst_5fspeed_5fconfig_2eproto__INCLUDED
#define PROTOBUF_planning_2fqp_5fst_5fspeed_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "planning/st_boundary_config.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
void protobuf_AssignDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
void protobuf_ShutdownFile_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();

class QpPiecewiseConfig;
class QpSplineConfig;
class QpStSpeedConfig;

// ===================================================================

class QpSplineConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpSplineConfig) */ {
 public:
  QpSplineConfig();
  virtual ~QpSplineConfig();

  QpSplineConfig(const QpSplineConfig& from);

  inline QpSplineConfig& operator=(const QpSplineConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QpSplineConfig& default_instance();

  void Swap(QpSplineConfig* other);

  // implements Message ----------------------------------------------

  inline QpSplineConfig* New() const { return New(NULL); }

  QpSplineConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QpSplineConfig& from);
  void MergeFrom(const QpSplineConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QpSplineConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 number_of_discrete_graph_t = 1;
  bool has_number_of_discrete_graph_t() const;
  void clear_number_of_discrete_graph_t();
  static const int kNumberOfDiscreteGraphTFieldNumber = 1;
  ::google::protobuf::uint32 number_of_discrete_graph_t() const;
  void set_number_of_discrete_graph_t(::google::protobuf::uint32 value);

  // optional uint32 spline_order = 2;
  bool has_spline_order() const;
  void clear_spline_order();
  static const int kSplineOrderFieldNumber = 2;
  ::google::protobuf::uint32 spline_order() const;
  void set_spline_order(::google::protobuf::uint32 value);

  // optional double speed_kernel_weight = 3;
  bool has_speed_kernel_weight() const;
  void clear_speed_kernel_weight();
  static const int kSpeedKernelWeightFieldNumber = 3;
  double speed_kernel_weight() const;
  void set_speed_kernel_weight(double value);

  // optional double accel_kernel_weight = 4;
  bool has_accel_kernel_weight() const;
  void clear_accel_kernel_weight();
  static const int kAccelKernelWeightFieldNumber = 4;
  double accel_kernel_weight() const;
  void set_accel_kernel_weight(double value);

  // optional double jerk_kernel_weight = 5;
  bool has_jerk_kernel_weight() const;
  void clear_jerk_kernel_weight();
  static const int kJerkKernelWeightFieldNumber = 5;
  double jerk_kernel_weight() const;
  void set_jerk_kernel_weight(double value);

  // optional double follow_weight = 6;
  bool has_follow_weight() const;
  void clear_follow_weight();
  static const int kFollowWeightFieldNumber = 6;
  double follow_weight() const;
  void set_follow_weight(double value);

  // optional double stop_weight = 7;
  bool has_stop_weight() const;
  void clear_stop_weight();
  static const int kStopWeightFieldNumber = 7;
  double stop_weight() const;
  void set_stop_weight(double value);

  // optional double cruise_weight = 8;
  bool has_cruise_weight() const;
  void clear_cruise_weight();
  static const int kCruiseWeightFieldNumber = 8;
  double cruise_weight() const;
  void set_cruise_weight(double value);

  // optional double regularization_weight = 9 [default = 0.1];
  bool has_regularization_weight() const;
  void clear_regularization_weight();
  static const int kRegularizationWeightFieldNumber = 9;
  double regularization_weight() const;
  void set_regularization_weight(double value);

  // optional double follow_drag_distance = 10;
  bool has_follow_drag_distance() const;
  void clear_follow_drag_distance();
  static const int kFollowDragDistanceFieldNumber = 10;
  double follow_drag_distance() const;
  void set_follow_drag_distance(double value);

  // optional double dp_st_reference_weight = 11;
  bool has_dp_st_reference_weight() const;
  void clear_dp_st_reference_weight();
  static const int kDpStReferenceWeightFieldNumber = 11;
  double dp_st_reference_weight() const;
  void set_dp_st_reference_weight(double value);

  // optional double init_jerk_kernel_weight = 12;
  bool has_init_jerk_kernel_weight() const;
  void clear_init_jerk_kernel_weight();
  static const int kInitJerkKernelWeightFieldNumber = 12;
  double init_jerk_kernel_weight() const;
  void set_init_jerk_kernel_weight(double value);

  // optional double yield_weight = 13;
  bool has_yield_weight() const;
  void clear_yield_weight();
  static const int kYieldWeightFieldNumber = 13;
  double yield_weight() const;
  void set_yield_weight(double value);

  // optional double yield_drag_distance = 14;
  bool has_yield_drag_distance() const;
  void clear_yield_drag_distance();
  static const int kYieldDragDistanceFieldNumber = 14;
  double yield_drag_distance() const;
  void set_yield_drag_distance(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.QpSplineConfig)
 private:
  inline void set_has_number_of_discrete_graph_t();
  inline void clear_has_number_of_discrete_graph_t();
  inline void set_has_spline_order();
  inline void clear_has_spline_order();
  inline void set_has_speed_kernel_weight();
  inline void clear_has_speed_kernel_weight();
  inline void set_has_accel_kernel_weight();
  inline void clear_has_accel_kernel_weight();
  inline void set_has_jerk_kernel_weight();
  inline void clear_has_jerk_kernel_weight();
  inline void set_has_follow_weight();
  inline void clear_has_follow_weight();
  inline void set_has_stop_weight();
  inline void clear_has_stop_weight();
  inline void set_has_cruise_weight();
  inline void clear_has_cruise_weight();
  inline void set_has_regularization_weight();
  inline void clear_has_regularization_weight();
  inline void set_has_follow_drag_distance();
  inline void clear_has_follow_drag_distance();
  inline void set_has_dp_st_reference_weight();
  inline void clear_has_dp_st_reference_weight();
  inline void set_has_init_jerk_kernel_weight();
  inline void clear_has_init_jerk_kernel_weight();
  inline void set_has_yield_weight();
  inline void clear_has_yield_weight();
  inline void set_has_yield_drag_distance();
  inline void clear_has_yield_drag_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 number_of_discrete_graph_t_;
  ::google::protobuf::uint32 spline_order_;
  double speed_kernel_weight_;
  double accel_kernel_weight_;
  double jerk_kernel_weight_;
  double follow_weight_;
  double stop_weight_;
  double cruise_weight_;
  double regularization_weight_;
  double follow_drag_distance_;
  double dp_st_reference_weight_;
  double init_jerk_kernel_weight_;
  double yield_weight_;
  double yield_drag_distance_;
  friend void  protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static QpSplineConfig* default_instance_;
};
// -------------------------------------------------------------------

class QpPiecewiseConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpPiecewiseConfig) */ {
 public:
  QpPiecewiseConfig();
  virtual ~QpPiecewiseConfig();

  QpPiecewiseConfig(const QpPiecewiseConfig& from);

  inline QpPiecewiseConfig& operator=(const QpPiecewiseConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QpPiecewiseConfig& default_instance();

  void Swap(QpPiecewiseConfig* other);

  // implements Message ----------------------------------------------

  inline QpPiecewiseConfig* New() const { return New(NULL); }

  QpPiecewiseConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QpPiecewiseConfig& from);
  void MergeFrom(const QpPiecewiseConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QpPiecewiseConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 number_of_evaluated_graph_t = 1;
  bool has_number_of_evaluated_graph_t() const;
  void clear_number_of_evaluated_graph_t();
  static const int kNumberOfEvaluatedGraphTFieldNumber = 1;
  ::google::protobuf::uint32 number_of_evaluated_graph_t() const;
  void set_number_of_evaluated_graph_t(::google::protobuf::uint32 value);

  // optional double accel_kernel_weight = 2;
  bool has_accel_kernel_weight() const;
  void clear_accel_kernel_weight();
  static const int kAccelKernelWeightFieldNumber = 2;
  double accel_kernel_weight() const;
  void set_accel_kernel_weight(double value);

  // optional double jerk_kernel_weight = 3;
  bool has_jerk_kernel_weight() const;
  void clear_jerk_kernel_weight();
  static const int kJerkKernelWeightFieldNumber = 3;
  double jerk_kernel_weight() const;
  void set_jerk_kernel_weight(double value);

  // optional double follow_weight = 4;
  bool has_follow_weight() const;
  void clear_follow_weight();
  static const int kFollowWeightFieldNumber = 4;
  double follow_weight() const;
  void set_follow_weight(double value);

  // optional double stop_weight = 5;
  bool has_stop_weight() const;
  void clear_stop_weight();
  static const int kStopWeightFieldNumber = 5;
  double stop_weight() const;
  void set_stop_weight(double value);

  // optional double cruise_weight = 6;
  bool has_cruise_weight() const;
  void clear_cruise_weight();
  static const int kCruiseWeightFieldNumber = 6;
  double cruise_weight() const;
  void set_cruise_weight(double value);

  // optional double regularization_weight = 7 [default = 0.1];
  bool has_regularization_weight() const;
  void clear_regularization_weight();
  static const int kRegularizationWeightFieldNumber = 7;
  double regularization_weight() const;
  void set_regularization_weight(double value);

  // optional double follow_drag_distance = 8;
  bool has_follow_drag_distance() const;
  void clear_follow_drag_distance();
  static const int kFollowDragDistanceFieldNumber = 8;
  double follow_drag_distance() const;
  void set_follow_drag_distance(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.QpPiecewiseConfig)
 private:
  inline void set_has_number_of_evaluated_graph_t();
  inline void clear_has_number_of_evaluated_graph_t();
  inline void set_has_accel_kernel_weight();
  inline void clear_has_accel_kernel_weight();
  inline void set_has_jerk_kernel_weight();
  inline void clear_has_jerk_kernel_weight();
  inline void set_has_follow_weight();
  inline void clear_has_follow_weight();
  inline void set_has_stop_weight();
  inline void clear_has_stop_weight();
  inline void set_has_cruise_weight();
  inline void clear_has_cruise_weight();
  inline void set_has_regularization_weight();
  inline void clear_has_regularization_weight();
  inline void set_has_follow_drag_distance();
  inline void clear_has_follow_drag_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double accel_kernel_weight_;
  double jerk_kernel_weight_;
  double follow_weight_;
  double stop_weight_;
  double cruise_weight_;
  double regularization_weight_;
  double follow_drag_distance_;
  ::google::protobuf::uint32 number_of_evaluated_graph_t_;
  friend void  protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static QpPiecewiseConfig* default_instance_;
};
// -------------------------------------------------------------------

class QpStSpeedConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpStSpeedConfig) */ {
 public:
  QpStSpeedConfig();
  virtual ~QpStSpeedConfig();

  QpStSpeedConfig(const QpStSpeedConfig& from);

  inline QpStSpeedConfig& operator=(const QpStSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QpStSpeedConfig& default_instance();

  void Swap(QpStSpeedConfig* other);

  // implements Message ----------------------------------------------

  inline QpStSpeedConfig* New() const { return New(NULL); }

  QpStSpeedConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QpStSpeedConfig& from);
  void MergeFrom(const QpStSpeedConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QpStSpeedConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double total_path_length = 1 [default = 200];
  bool has_total_path_length() const;
  void clear_total_path_length();
  static const int kTotalPathLengthFieldNumber = 1;
  double total_path_length() const;
  void set_total_path_length(double value);

  // optional double total_time = 2 [default = 6];
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 2;
  double total_time() const;
  void set_total_time(double value);

  // optional double preferred_max_acceleration = 4 [default = 1.2];
  bool has_preferred_max_acceleration() const;
  void clear_preferred_max_acceleration();
  static const int kPreferredMaxAccelerationFieldNumber = 4;
  double preferred_max_acceleration() const;
  void set_preferred_max_acceleration(double value);

  // optional double preferred_min_deceleration = 5 [default = -1.8];
  bool has_preferred_min_deceleration() const;
  void clear_preferred_min_deceleration();
  static const int kPreferredMinDecelerationFieldNumber = 5;
  double preferred_min_deceleration() const;
  void set_preferred_min_deceleration(double value);

  // optional double max_acceleration = 6 [default = 2];
  bool has_max_acceleration() const;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 6;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // optional double min_deceleration = 7 [default = -4.5];
  bool has_min_deceleration() const;
  void clear_min_deceleration();
  static const int kMinDecelerationFieldNumber = 7;
  double min_deceleration() const;
  void set_min_deceleration(double value);

  // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
  bool has_qp_spline_config() const;
  void clear_qp_spline_config();
  static const int kQpSplineConfigFieldNumber = 8;
  const ::apollo::planning::QpSplineConfig& qp_spline_config() const;
  ::apollo::planning::QpSplineConfig* mutable_qp_spline_config();
  ::apollo::planning::QpSplineConfig* release_qp_spline_config();
  void set_allocated_qp_spline_config(::apollo::planning::QpSplineConfig* qp_spline_config);

  // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
  bool has_qp_piecewise_config() const;
  void clear_qp_piecewise_config();
  static const int kQpPiecewiseConfigFieldNumber = 9;
  const ::apollo::planning::QpPiecewiseConfig& qp_piecewise_config() const;
  ::apollo::planning::QpPiecewiseConfig* mutable_qp_piecewise_config();
  ::apollo::planning::QpPiecewiseConfig* release_qp_piecewise_config();
  void set_allocated_qp_piecewise_config(::apollo::planning::QpPiecewiseConfig* qp_piecewise_config);

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
  bool has_st_boundary_config() const;
  void clear_st_boundary_config();
  static const int kStBoundaryConfigFieldNumber = 10;
  const ::apollo::planning::StBoundaryConfig& st_boundary_config() const;
  ::apollo::planning::StBoundaryConfig* mutable_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* release_st_boundary_config();
  void set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.QpStSpeedConfig)
 private:
  inline void set_has_total_path_length();
  inline void clear_has_total_path_length();
  inline void set_has_total_time();
  inline void clear_has_total_time();
  inline void set_has_preferred_max_acceleration();
  inline void clear_has_preferred_max_acceleration();
  inline void set_has_preferred_min_deceleration();
  inline void clear_has_preferred_min_deceleration();
  inline void set_has_max_acceleration();
  inline void clear_has_max_acceleration();
  inline void set_has_min_deceleration();
  inline void clear_has_min_deceleration();
  inline void set_has_qp_spline_config();
  inline void clear_has_qp_spline_config();
  inline void set_has_qp_piecewise_config();
  inline void clear_has_qp_piecewise_config();
  inline void set_has_st_boundary_config();
  inline void clear_has_st_boundary_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double total_path_length_;
  double total_time_;
  double preferred_max_acceleration_;
  double preferred_min_deceleration_;
  double max_acceleration_;
  double min_deceleration_;
  ::apollo::planning::QpSplineConfig* qp_spline_config_;
  ::apollo::planning::QpPiecewiseConfig* qp_piecewise_config_;
  ::apollo::planning::StBoundaryConfig* st_boundary_config_;
  friend void  protobuf_AddDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fqp_5fst_5fspeed_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static QpStSpeedConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplineConfig

// optional uint32 number_of_discrete_graph_t = 1;
inline bool QpSplineConfig::has_number_of_discrete_graph_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpSplineConfig::set_has_number_of_discrete_graph_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpSplineConfig::clear_has_number_of_discrete_graph_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpSplineConfig::clear_number_of_discrete_graph_t() {
  number_of_discrete_graph_t_ = 0u;
  clear_has_number_of_discrete_graph_t();
}
inline ::google::protobuf::uint32 QpSplineConfig::number_of_discrete_graph_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.number_of_discrete_graph_t)
  return number_of_discrete_graph_t_;
}
inline void QpSplineConfig::set_number_of_discrete_graph_t(::google::protobuf::uint32 value) {
  set_has_number_of_discrete_graph_t();
  number_of_discrete_graph_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.number_of_discrete_graph_t)
}

// optional uint32 spline_order = 2;
inline bool QpSplineConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpSplineConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpSplineConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpSplineConfig::clear_spline_order() {
  spline_order_ = 0u;
  clear_has_spline_order();
}
inline ::google::protobuf::uint32 QpSplineConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.spline_order)
  return spline_order_;
}
inline void QpSplineConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.spline_order)
}

// optional double speed_kernel_weight = 3;
inline bool QpSplineConfig::has_speed_kernel_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QpSplineConfig::set_has_speed_kernel_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QpSplineConfig::clear_has_speed_kernel_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QpSplineConfig::clear_speed_kernel_weight() {
  speed_kernel_weight_ = 0;
  clear_has_speed_kernel_weight();
}
inline double QpSplineConfig::speed_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.speed_kernel_weight)
  return speed_kernel_weight_;
}
inline void QpSplineConfig::set_speed_kernel_weight(double value) {
  set_has_speed_kernel_weight();
  speed_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.speed_kernel_weight)
}

// optional double accel_kernel_weight = 4;
inline bool QpSplineConfig::has_accel_kernel_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QpSplineConfig::set_has_accel_kernel_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QpSplineConfig::clear_has_accel_kernel_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QpSplineConfig::clear_accel_kernel_weight() {
  accel_kernel_weight_ = 0;
  clear_has_accel_kernel_weight();
}
inline double QpSplineConfig::accel_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.accel_kernel_weight)
  return accel_kernel_weight_;
}
inline void QpSplineConfig::set_accel_kernel_weight(double value) {
  set_has_accel_kernel_weight();
  accel_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.accel_kernel_weight)
}

// optional double jerk_kernel_weight = 5;
inline bool QpSplineConfig::has_jerk_kernel_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QpSplineConfig::set_has_jerk_kernel_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QpSplineConfig::clear_has_jerk_kernel_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QpSplineConfig::clear_jerk_kernel_weight() {
  jerk_kernel_weight_ = 0;
  clear_has_jerk_kernel_weight();
}
inline double QpSplineConfig::jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.jerk_kernel_weight)
  return jerk_kernel_weight_;
}
inline void QpSplineConfig::set_jerk_kernel_weight(double value) {
  set_has_jerk_kernel_weight();
  jerk_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.jerk_kernel_weight)
}

// optional double follow_weight = 6;
inline bool QpSplineConfig::has_follow_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QpSplineConfig::set_has_follow_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QpSplineConfig::clear_has_follow_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QpSplineConfig::clear_follow_weight() {
  follow_weight_ = 0;
  clear_has_follow_weight();
}
inline double QpSplineConfig::follow_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.follow_weight)
  return follow_weight_;
}
inline void QpSplineConfig::set_follow_weight(double value) {
  set_has_follow_weight();
  follow_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.follow_weight)
}

// optional double stop_weight = 7;
inline bool QpSplineConfig::has_stop_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QpSplineConfig::set_has_stop_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QpSplineConfig::clear_has_stop_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QpSplineConfig::clear_stop_weight() {
  stop_weight_ = 0;
  clear_has_stop_weight();
}
inline double QpSplineConfig::stop_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.stop_weight)
  return stop_weight_;
}
inline void QpSplineConfig::set_stop_weight(double value) {
  set_has_stop_weight();
  stop_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.stop_weight)
}

// optional double cruise_weight = 8;
inline bool QpSplineConfig::has_cruise_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QpSplineConfig::set_has_cruise_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QpSplineConfig::clear_has_cruise_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QpSplineConfig::clear_cruise_weight() {
  cruise_weight_ = 0;
  clear_has_cruise_weight();
}
inline double QpSplineConfig::cruise_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.cruise_weight)
  return cruise_weight_;
}
inline void QpSplineConfig::set_cruise_weight(double value) {
  set_has_cruise_weight();
  cruise_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.cruise_weight)
}

// optional double regularization_weight = 9 [default = 0.1];
inline bool QpSplineConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QpSplineConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QpSplineConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QpSplineConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
inline double QpSplineConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.regularization_weight)
  return regularization_weight_;
}
inline void QpSplineConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.regularization_weight)
}

// optional double follow_drag_distance = 10;
inline bool QpSplineConfig::has_follow_drag_distance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QpSplineConfig::set_has_follow_drag_distance() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QpSplineConfig::clear_has_follow_drag_distance() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QpSplineConfig::clear_follow_drag_distance() {
  follow_drag_distance_ = 0;
  clear_has_follow_drag_distance();
}
inline double QpSplineConfig::follow_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.follow_drag_distance)
  return follow_drag_distance_;
}
inline void QpSplineConfig::set_follow_drag_distance(double value) {
  set_has_follow_drag_distance();
  follow_drag_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.follow_drag_distance)
}

// optional double dp_st_reference_weight = 11;
inline bool QpSplineConfig::has_dp_st_reference_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QpSplineConfig::set_has_dp_st_reference_weight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QpSplineConfig::clear_has_dp_st_reference_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QpSplineConfig::clear_dp_st_reference_weight() {
  dp_st_reference_weight_ = 0;
  clear_has_dp_st_reference_weight();
}
inline double QpSplineConfig::dp_st_reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.dp_st_reference_weight)
  return dp_st_reference_weight_;
}
inline void QpSplineConfig::set_dp_st_reference_weight(double value) {
  set_has_dp_st_reference_weight();
  dp_st_reference_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.dp_st_reference_weight)
}

// optional double init_jerk_kernel_weight = 12;
inline bool QpSplineConfig::has_init_jerk_kernel_weight() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QpSplineConfig::set_has_init_jerk_kernel_weight() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QpSplineConfig::clear_has_init_jerk_kernel_weight() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QpSplineConfig::clear_init_jerk_kernel_weight() {
  init_jerk_kernel_weight_ = 0;
  clear_has_init_jerk_kernel_weight();
}
inline double QpSplineConfig::init_jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.init_jerk_kernel_weight)
  return init_jerk_kernel_weight_;
}
inline void QpSplineConfig::set_init_jerk_kernel_weight(double value) {
  set_has_init_jerk_kernel_weight();
  init_jerk_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.init_jerk_kernel_weight)
}

// optional double yield_weight = 13;
inline bool QpSplineConfig::has_yield_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QpSplineConfig::set_has_yield_weight() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QpSplineConfig::clear_has_yield_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QpSplineConfig::clear_yield_weight() {
  yield_weight_ = 0;
  clear_has_yield_weight();
}
inline double QpSplineConfig::yield_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.yield_weight)
  return yield_weight_;
}
inline void QpSplineConfig::set_yield_weight(double value) {
  set_has_yield_weight();
  yield_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.yield_weight)
}

// optional double yield_drag_distance = 14;
inline bool QpSplineConfig::has_yield_drag_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QpSplineConfig::set_has_yield_drag_distance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QpSplineConfig::clear_has_yield_drag_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QpSplineConfig::clear_yield_drag_distance() {
  yield_drag_distance_ = 0;
  clear_has_yield_drag_distance();
}
inline double QpSplineConfig::yield_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.yield_drag_distance)
  return yield_drag_distance_;
}
inline void QpSplineConfig::set_yield_drag_distance(double value) {
  set_has_yield_drag_distance();
  yield_drag_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.yield_drag_distance)
}

// -------------------------------------------------------------------

// QpPiecewiseConfig

// optional uint32 number_of_evaluated_graph_t = 1;
inline bool QpPiecewiseConfig::has_number_of_evaluated_graph_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpPiecewiseConfig::set_has_number_of_evaluated_graph_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpPiecewiseConfig::clear_has_number_of_evaluated_graph_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpPiecewiseConfig::clear_number_of_evaluated_graph_t() {
  number_of_evaluated_graph_t_ = 0u;
  clear_has_number_of_evaluated_graph_t();
}
inline ::google::protobuf::uint32 QpPiecewiseConfig::number_of_evaluated_graph_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.number_of_evaluated_graph_t)
  return number_of_evaluated_graph_t_;
}
inline void QpPiecewiseConfig::set_number_of_evaluated_graph_t(::google::protobuf::uint32 value) {
  set_has_number_of_evaluated_graph_t();
  number_of_evaluated_graph_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.number_of_evaluated_graph_t)
}

// optional double accel_kernel_weight = 2;
inline bool QpPiecewiseConfig::has_accel_kernel_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpPiecewiseConfig::set_has_accel_kernel_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpPiecewiseConfig::clear_has_accel_kernel_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpPiecewiseConfig::clear_accel_kernel_weight() {
  accel_kernel_weight_ = 0;
  clear_has_accel_kernel_weight();
}
inline double QpPiecewiseConfig::accel_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.accel_kernel_weight)
  return accel_kernel_weight_;
}
inline void QpPiecewiseConfig::set_accel_kernel_weight(double value) {
  set_has_accel_kernel_weight();
  accel_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.accel_kernel_weight)
}

// optional double jerk_kernel_weight = 3;
inline bool QpPiecewiseConfig::has_jerk_kernel_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QpPiecewiseConfig::set_has_jerk_kernel_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QpPiecewiseConfig::clear_has_jerk_kernel_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QpPiecewiseConfig::clear_jerk_kernel_weight() {
  jerk_kernel_weight_ = 0;
  clear_has_jerk_kernel_weight();
}
inline double QpPiecewiseConfig::jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.jerk_kernel_weight)
  return jerk_kernel_weight_;
}
inline void QpPiecewiseConfig::set_jerk_kernel_weight(double value) {
  set_has_jerk_kernel_weight();
  jerk_kernel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.jerk_kernel_weight)
}

// optional double follow_weight = 4;
inline bool QpPiecewiseConfig::has_follow_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QpPiecewiseConfig::set_has_follow_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QpPiecewiseConfig::clear_has_follow_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QpPiecewiseConfig::clear_follow_weight() {
  follow_weight_ = 0;
  clear_has_follow_weight();
}
inline double QpPiecewiseConfig::follow_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.follow_weight)
  return follow_weight_;
}
inline void QpPiecewiseConfig::set_follow_weight(double value) {
  set_has_follow_weight();
  follow_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.follow_weight)
}

// optional double stop_weight = 5;
inline bool QpPiecewiseConfig::has_stop_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QpPiecewiseConfig::set_has_stop_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QpPiecewiseConfig::clear_has_stop_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QpPiecewiseConfig::clear_stop_weight() {
  stop_weight_ = 0;
  clear_has_stop_weight();
}
inline double QpPiecewiseConfig::stop_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.stop_weight)
  return stop_weight_;
}
inline void QpPiecewiseConfig::set_stop_weight(double value) {
  set_has_stop_weight();
  stop_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.stop_weight)
}

// optional double cruise_weight = 6;
inline bool QpPiecewiseConfig::has_cruise_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QpPiecewiseConfig::set_has_cruise_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QpPiecewiseConfig::clear_has_cruise_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QpPiecewiseConfig::clear_cruise_weight() {
  cruise_weight_ = 0;
  clear_has_cruise_weight();
}
inline double QpPiecewiseConfig::cruise_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.cruise_weight)
  return cruise_weight_;
}
inline void QpPiecewiseConfig::set_cruise_weight(double value) {
  set_has_cruise_weight();
  cruise_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.cruise_weight)
}

// optional double regularization_weight = 7 [default = 0.1];
inline bool QpPiecewiseConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QpPiecewiseConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QpPiecewiseConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QpPiecewiseConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
inline double QpPiecewiseConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.regularization_weight)
  return regularization_weight_;
}
inline void QpPiecewiseConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.regularization_weight)
}

// optional double follow_drag_distance = 8;
inline bool QpPiecewiseConfig::has_follow_drag_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QpPiecewiseConfig::set_has_follow_drag_distance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QpPiecewiseConfig::clear_has_follow_drag_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QpPiecewiseConfig::clear_follow_drag_distance() {
  follow_drag_distance_ = 0;
  clear_has_follow_drag_distance();
}
inline double QpPiecewiseConfig::follow_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.follow_drag_distance)
  return follow_drag_distance_;
}
inline void QpPiecewiseConfig::set_follow_drag_distance(double value) {
  set_has_follow_drag_distance();
  follow_drag_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.follow_drag_distance)
}

// -------------------------------------------------------------------

// QpStSpeedConfig

// optional double total_path_length = 1 [default = 200];
inline bool QpStSpeedConfig::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpStSpeedConfig::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpStSpeedConfig::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpStSpeedConfig::clear_total_path_length() {
  total_path_length_ = 200;
  clear_has_total_path_length();
}
inline double QpStSpeedConfig::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.total_path_length)
  return total_path_length_;
}
inline void QpStSpeedConfig::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.total_path_length)
}

// optional double total_time = 2 [default = 6];
inline bool QpStSpeedConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpStSpeedConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpStSpeedConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpStSpeedConfig::clear_total_time() {
  total_time_ = 6;
  clear_has_total_time();
}
inline double QpStSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.total_time)
  return total_time_;
}
inline void QpStSpeedConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.total_time)
}

// optional double preferred_max_acceleration = 4 [default = 1.2];
inline bool QpStSpeedConfig::has_preferred_max_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QpStSpeedConfig::set_has_preferred_max_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QpStSpeedConfig::clear_has_preferred_max_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QpStSpeedConfig::clear_preferred_max_acceleration() {
  preferred_max_acceleration_ = 1.2;
  clear_has_preferred_max_acceleration();
}
inline double QpStSpeedConfig::preferred_max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.preferred_max_acceleration)
  return preferred_max_acceleration_;
}
inline void QpStSpeedConfig::set_preferred_max_acceleration(double value) {
  set_has_preferred_max_acceleration();
  preferred_max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.preferred_max_acceleration)
}

// optional double preferred_min_deceleration = 5 [default = -1.8];
inline bool QpStSpeedConfig::has_preferred_min_deceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QpStSpeedConfig::set_has_preferred_min_deceleration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QpStSpeedConfig::clear_has_preferred_min_deceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QpStSpeedConfig::clear_preferred_min_deceleration() {
  preferred_min_deceleration_ = -1.8;
  clear_has_preferred_min_deceleration();
}
inline double QpStSpeedConfig::preferred_min_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.preferred_min_deceleration)
  return preferred_min_deceleration_;
}
inline void QpStSpeedConfig::set_preferred_min_deceleration(double value) {
  set_has_preferred_min_deceleration();
  preferred_min_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.preferred_min_deceleration)
}

// optional double max_acceleration = 6 [default = 2];
inline bool QpStSpeedConfig::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QpStSpeedConfig::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QpStSpeedConfig::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QpStSpeedConfig::clear_max_acceleration() {
  max_acceleration_ = 2;
  clear_has_max_acceleration();
}
inline double QpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.max_acceleration)
  return max_acceleration_;
}
inline void QpStSpeedConfig::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.max_acceleration)
}

// optional double min_deceleration = 7 [default = -4.5];
inline bool QpStSpeedConfig::has_min_deceleration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QpStSpeedConfig::set_has_min_deceleration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QpStSpeedConfig::clear_has_min_deceleration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QpStSpeedConfig::clear_min_deceleration() {
  min_deceleration_ = -4.5;
  clear_has_min_deceleration();
}
inline double QpStSpeedConfig::min_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.min_deceleration)
  return min_deceleration_;
}
inline void QpStSpeedConfig::set_min_deceleration(double value) {
  set_has_min_deceleration();
  min_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.min_deceleration)
}

// optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
inline bool QpStSpeedConfig::has_qp_spline_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QpStSpeedConfig::set_has_qp_spline_config() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QpStSpeedConfig::clear_has_qp_spline_config() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QpStSpeedConfig::clear_qp_spline_config() {
  if (qp_spline_config_ != NULL) qp_spline_config_->::apollo::planning::QpSplineConfig::Clear();
  clear_has_qp_spline_config();
}
inline const ::apollo::planning::QpSplineConfig& QpStSpeedConfig::qp_spline_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.qp_spline_config)
  return qp_spline_config_ != NULL ? *qp_spline_config_ : *default_instance_->qp_spline_config_;
}
inline ::apollo::planning::QpSplineConfig* QpStSpeedConfig::mutable_qp_spline_config() {
  set_has_qp_spline_config();
  if (qp_spline_config_ == NULL) {
    qp_spline_config_ = new ::apollo::planning::QpSplineConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.qp_spline_config)
  return qp_spline_config_;
}
inline ::apollo::planning::QpSplineConfig* QpStSpeedConfig::release_qp_spline_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.qp_spline_config)
  clear_has_qp_spline_config();
  ::apollo::planning::QpSplineConfig* temp = qp_spline_config_;
  qp_spline_config_ = NULL;
  return temp;
}
inline void QpStSpeedConfig::set_allocated_qp_spline_config(::apollo::planning::QpSplineConfig* qp_spline_config) {
  delete qp_spline_config_;
  qp_spline_config_ = qp_spline_config;
  if (qp_spline_config) {
    set_has_qp_spline_config();
  } else {
    clear_has_qp_spline_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.qp_spline_config)
}

// optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
inline bool QpStSpeedConfig::has_qp_piecewise_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QpStSpeedConfig::set_has_qp_piecewise_config() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QpStSpeedConfig::clear_has_qp_piecewise_config() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QpStSpeedConfig::clear_qp_piecewise_config() {
  if (qp_piecewise_config_ != NULL) qp_piecewise_config_->::apollo::planning::QpPiecewiseConfig::Clear();
  clear_has_qp_piecewise_config();
}
inline const ::apollo::planning::QpPiecewiseConfig& QpStSpeedConfig::qp_piecewise_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  return qp_piecewise_config_ != NULL ? *qp_piecewise_config_ : *default_instance_->qp_piecewise_config_;
}
inline ::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::mutable_qp_piecewise_config() {
  set_has_qp_piecewise_config();
  if (qp_piecewise_config_ == NULL) {
    qp_piecewise_config_ = new ::apollo::planning::QpPiecewiseConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  return qp_piecewise_config_;
}
inline ::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::release_qp_piecewise_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  clear_has_qp_piecewise_config();
  ::apollo::planning::QpPiecewiseConfig* temp = qp_piecewise_config_;
  qp_piecewise_config_ = NULL;
  return temp;
}
inline void QpStSpeedConfig::set_allocated_qp_piecewise_config(::apollo::planning::QpPiecewiseConfig* qp_piecewise_config) {
  delete qp_piecewise_config_;
  qp_piecewise_config_ = qp_piecewise_config;
  if (qp_piecewise_config) {
    set_has_qp_piecewise_config();
  } else {
    clear_has_qp_piecewise_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
}

// optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
inline bool QpStSpeedConfig::has_st_boundary_config() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QpStSpeedConfig::set_has_st_boundary_config() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QpStSpeedConfig::clear_has_st_boundary_config() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QpStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
  clear_has_st_boundary_config();
}
inline const ::apollo::planning::StBoundaryConfig& QpStSpeedConfig::st_boundary_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.st_boundary_config)
  return st_boundary_config_ != NULL ? *st_boundary_config_ : *default_instance_->st_boundary_config_;
}
inline ::apollo::planning::StBoundaryConfig* QpStSpeedConfig::mutable_st_boundary_config() {
  set_has_st_boundary_config();
  if (st_boundary_config_ == NULL) {
    st_boundary_config_ = new ::apollo::planning::StBoundaryConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.st_boundary_config)
  return st_boundary_config_;
}
inline ::apollo::planning::StBoundaryConfig* QpStSpeedConfig::release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.st_boundary_config)
  clear_has_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* temp = st_boundary_config_;
  st_boundary_config_ = NULL;
  return temp;
}
inline void QpStSpeedConfig::set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config) {
  delete st_boundary_config_;
  st_boundary_config_ = st_boundary_config;
  if (st_boundary_config) {
    set_has_st_boundary_config();
  } else {
    clear_has_st_boundary_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.st_boundary_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fqp_5fst_5fspeed_5fconfig_2eproto__INCLUDED
