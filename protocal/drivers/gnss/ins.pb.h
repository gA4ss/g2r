// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/ins.proto

#ifndef PROTOBUF_drivers_2fgnss_2fins_2eproto__INCLUDED
#define PROTOBUF_drivers_2fgnss_2fins_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/header.pb.h"
#include "common/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_drivers_2fgnss_2fins_2eproto();
void protobuf_AssignDesc_drivers_2fgnss_2fins_2eproto();
void protobuf_ShutdownFile_drivers_2fgnss_2fins_2eproto();

class Ins;
class InsStat;

enum Ins_Type {
  Ins_Type_INVALID = 0,
  Ins_Type_CONVERGING = 1,
  Ins_Type_GOOD = 2
};
bool Ins_Type_IsValid(int value);
const Ins_Type Ins_Type_Type_MIN = Ins_Type_INVALID;
const Ins_Type Ins_Type_Type_MAX = Ins_Type_GOOD;
const int Ins_Type_Type_ARRAYSIZE = Ins_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ins_Type_descriptor();
inline const ::std::string& Ins_Type_Name(Ins_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ins_Type_descriptor(), value);
}
inline bool Ins_Type_Parse(
    const ::std::string& name, Ins_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ins_Type>(
    Ins_Type_descriptor(), name, value);
}
// ===================================================================

class InsStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.InsStat) */ {
 public:
  InsStat();
  virtual ~InsStat();

  InsStat(const InsStat& from);

  inline InsStat& operator=(const InsStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsStat& default_instance();

  void Swap(InsStat* other);

  // implements Message ----------------------------------------------

  inline InsStat* New() const { return New(NULL); }

  InsStat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsStat& from);
  void MergeFrom(const InsStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InsStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional uint32 ins_status = 2;
  bool has_ins_status() const;
  void clear_ins_status();
  static const int kInsStatusFieldNumber = 2;
  ::google::protobuf::uint32 ins_status() const;
  void set_ins_status(::google::protobuf::uint32 value);

  // optional uint32 pos_type = 3;
  bool has_pos_type() const;
  void clear_pos_type();
  static const int kPosTypeFieldNumber = 3;
  ::google::protobuf::uint32 pos_type() const;
  void set_pos_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.InsStat)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_ins_status();
  inline void clear_has_ins_status();
  inline void set_has_pos_type();
  inline void clear_has_pos_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::google::protobuf::uint32 ins_status_;
  ::google::protobuf::uint32 pos_type_;
  friend void  protobuf_AddDesc_drivers_2fgnss_2fins_2eproto();
  friend void protobuf_AssignDesc_drivers_2fgnss_2fins_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fgnss_2fins_2eproto();

  void InitAsDefaultInstance();
  static InsStat* default_instance_;
};
// -------------------------------------------------------------------

class Ins : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.Ins) */ {
 public:
  Ins();
  virtual ~Ins();

  Ins(const Ins& from);

  inline Ins& operator=(const Ins& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins& default_instance();

  void Swap(Ins* other);

  // implements Message ----------------------------------------------

  inline Ins* New() const { return New(NULL); }

  Ins* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ins& from);
  void MergeFrom(const Ins& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Ins_Type Type;
  static const Type INVALID =
    Ins_Type_INVALID;
  static const Type CONVERGING =
    Ins_Type_CONVERGING;
  static const Type GOOD =
    Ins_Type_GOOD;
  static inline bool Type_IsValid(int value) {
    return Ins_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Ins_Type_Type_MIN;
  static const Type Type_MAX =
    Ins_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Ins_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Ins_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Ins_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Ins_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 2;
  double measurement_time() const;
  void set_measurement_time(double value);

  // optional .apollo.drivers.gnss.Ins.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::apollo::drivers::gnss::Ins_Type type() const;
  void set_type(::apollo::drivers::gnss::Ins_Type value);

  // optional .apollo.common.PointLLH position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  const ::apollo::common::PointLLH& position() const;
  ::apollo::common::PointLLH* mutable_position();
  ::apollo::common::PointLLH* release_position();
  void set_allocated_position(::apollo::common::PointLLH* position);

  // optional .apollo.common.Point3D euler_angles = 5;
  bool has_euler_angles() const;
  void clear_euler_angles();
  static const int kEulerAnglesFieldNumber = 5;
  const ::apollo::common::Point3D& euler_angles() const;
  ::apollo::common::Point3D* mutable_euler_angles();
  ::apollo::common::Point3D* release_euler_angles();
  void set_allocated_euler_angles(::apollo::common::Point3D* euler_angles);

  // optional .apollo.common.Point3D linear_velocity = 6;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 6;
  const ::apollo::common::Point3D& linear_velocity() const;
  ::apollo::common::Point3D* mutable_linear_velocity();
  ::apollo::common::Point3D* release_linear_velocity();
  void set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity);

  // optional .apollo.common.Point3D angular_velocity = 7;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 7;
  const ::apollo::common::Point3D& angular_velocity() const;
  ::apollo::common::Point3D* mutable_angular_velocity();
  ::apollo::common::Point3D* release_angular_velocity();
  void set_allocated_angular_velocity(::apollo::common::Point3D* angular_velocity);

  // optional .apollo.common.Point3D linear_acceleration = 8;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 8;
  const ::apollo::common::Point3D& linear_acceleration() const;
  ::apollo::common::Point3D* mutable_linear_acceleration();
  ::apollo::common::Point3D* release_linear_acceleration();
  void set_allocated_linear_acceleration(::apollo::common::Point3D* linear_acceleration);

  // repeated float position_covariance = 9 [packed = true];
  int position_covariance_size() const;
  void clear_position_covariance();
  static const int kPositionCovarianceFieldNumber = 9;
  float position_covariance(int index) const;
  void set_position_covariance(int index, float value);
  void add_position_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      position_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position_covariance();

  // repeated float euler_angles_covariance = 10 [packed = true];
  int euler_angles_covariance_size() const;
  void clear_euler_angles_covariance();
  static const int kEulerAnglesCovarianceFieldNumber = 10;
  float euler_angles_covariance(int index) const;
  void set_euler_angles_covariance(int index, float value);
  void add_euler_angles_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      euler_angles_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_euler_angles_covariance();

  // repeated float linear_velocity_covariance = 11 [packed = true];
  int linear_velocity_covariance_size() const;
  void clear_linear_velocity_covariance();
  static const int kLinearVelocityCovarianceFieldNumber = 11;
  float linear_velocity_covariance(int index) const;
  void set_linear_velocity_covariance(int index, float value);
  void add_linear_velocity_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      linear_velocity_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_linear_velocity_covariance();

  // repeated float angular_velocity_covariance = 12 [packed = true];
  int angular_velocity_covariance_size() const;
  void clear_angular_velocity_covariance();
  static const int kAngularVelocityCovarianceFieldNumber = 12;
  float angular_velocity_covariance(int index) const;
  void set_angular_velocity_covariance(int index, float value);
  void add_angular_velocity_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      angular_velocity_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_angular_velocity_covariance();

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  int linear_acceleration_covariance_size() const;
  void clear_linear_acceleration_covariance();
  static const int kLinearAccelerationCovarianceFieldNumber = 13;
  float linear_acceleration_covariance(int index) const;
  void set_linear_acceleration_covariance(int index, float value);
  void add_linear_acceleration_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      linear_acceleration_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_linear_acceleration_covariance();

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.Ins)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_measurement_time();
  inline void clear_has_measurement_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_euler_angles();
  inline void clear_has_euler_angles();
  inline void set_has_linear_velocity();
  inline void clear_has_linear_velocity();
  inline void set_has_angular_velocity();
  inline void clear_has_angular_velocity();
  inline void set_has_linear_acceleration();
  inline void clear_has_linear_acceleration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  double measurement_time_;
  ::apollo::common::PointLLH* position_;
  ::apollo::common::Point3D* euler_angles_;
  ::apollo::common::Point3D* linear_velocity_;
  ::apollo::common::Point3D* angular_velocity_;
  ::apollo::common::Point3D* linear_acceleration_;
  ::google::protobuf::RepeatedField< float > position_covariance_;
  mutable int _position_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > euler_angles_covariance_;
  mutable int _euler_angles_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > linear_velocity_covariance_;
  mutable int _linear_velocity_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > angular_velocity_covariance_;
  mutable int _angular_velocity_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > linear_acceleration_covariance_;
  mutable int _linear_acceleration_covariance_cached_byte_size_;
  int type_;
  friend void  protobuf_AddDesc_drivers_2fgnss_2fins_2eproto();
  friend void protobuf_AssignDesc_drivers_2fgnss_2fins_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fgnss_2fins_2eproto();

  void InitAsDefaultInstance();
  static Ins* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InsStat

// optional .apollo.common.Header header = 1;
inline bool InsStat::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsStat::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsStat::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsStat::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& InsStat::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStat.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* InsStat::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.InsStat.header)
  return header_;
}
inline ::apollo::common::Header* InsStat::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.InsStat.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void InsStat::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.InsStat.header)
}

// optional uint32 ins_status = 2;
inline bool InsStat::has_ins_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsStat::set_has_ins_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsStat::clear_has_ins_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsStat::clear_ins_status() {
  ins_status_ = 0u;
  clear_has_ins_status();
}
inline ::google::protobuf::uint32 InsStat::ins_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStat.ins_status)
  return ins_status_;
}
inline void InsStat::set_ins_status(::google::protobuf::uint32 value) {
  set_has_ins_status();
  ins_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.InsStat.ins_status)
}

// optional uint32 pos_type = 3;
inline bool InsStat::has_pos_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InsStat::set_has_pos_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InsStat::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InsStat::clear_pos_type() {
  pos_type_ = 0u;
  clear_has_pos_type();
}
inline ::google::protobuf::uint32 InsStat::pos_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStat.pos_type)
  return pos_type_;
}
inline void InsStat::set_pos_type(::google::protobuf::uint32 value) {
  set_has_pos_type();
  pos_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.InsStat.pos_type)
}

// -------------------------------------------------------------------

// Ins

// optional .apollo.common.Header header = 1;
inline bool Ins::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& Ins::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* Ins::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.header)
  return header_;
}
inline ::apollo::common::Header* Ins::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Ins::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.header)
}

// optional double measurement_time = 2;
inline bool Ins::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double Ins::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.measurement_time)
  return measurement_time_;
}
inline void Ins::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.measurement_time)
}

// optional .apollo.drivers.gnss.Ins.Type type = 3;
inline bool Ins::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::drivers::gnss::Ins_Type Ins::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.type)
  return static_cast< ::apollo::drivers::gnss::Ins_Type >(type_);
}
inline void Ins::set_type(::apollo::drivers::gnss::Ins_Type value) {
  assert(::apollo::drivers::gnss::Ins_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.type)
}

// optional .apollo.common.PointLLH position = 4;
inline bool Ins::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ins::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ins::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ins::clear_position() {
  if (position_ != NULL) position_->::apollo::common::PointLLH::Clear();
  clear_has_position();
}
inline const ::apollo::common::PointLLH& Ins::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::common::PointLLH* Ins::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.position)
  return position_;
}
inline ::apollo::common::PointLLH* Ins::release_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.position)
  clear_has_position();
  ::apollo::common::PointLLH* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Ins::set_allocated_position(::apollo::common::PointLLH* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.position)
}

// optional .apollo.common.Point3D euler_angles = 5;
inline bool Ins::has_euler_angles() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ins::set_has_euler_angles() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ins::clear_has_euler_angles() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ins::clear_euler_angles() {
  if (euler_angles_ != NULL) euler_angles_->::apollo::common::Point3D::Clear();
  clear_has_euler_angles();
}
inline const ::apollo::common::Point3D& Ins::euler_angles() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.euler_angles)
  return euler_angles_ != NULL ? *euler_angles_ : *default_instance_->euler_angles_;
}
inline ::apollo::common::Point3D* Ins::mutable_euler_angles() {
  set_has_euler_angles();
  if (euler_angles_ == NULL) {
    euler_angles_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.euler_angles)
  return euler_angles_;
}
inline ::apollo::common::Point3D* Ins::release_euler_angles() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.euler_angles)
  clear_has_euler_angles();
  ::apollo::common::Point3D* temp = euler_angles_;
  euler_angles_ = NULL;
  return temp;
}
inline void Ins::set_allocated_euler_angles(::apollo::common::Point3D* euler_angles) {
  delete euler_angles_;
  euler_angles_ = euler_angles;
  if (euler_angles) {
    set_has_euler_angles();
  } else {
    clear_has_euler_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.euler_angles)
}

// optional .apollo.common.Point3D linear_velocity = 6;
inline bool Ins::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ins::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ins::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ins::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::apollo::common::Point3D::Clear();
  clear_has_linear_velocity();
}
inline const ::apollo::common::Point3D& Ins::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
inline ::apollo::common::Point3D* Ins::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.linear_velocity)
  return linear_velocity_;
}
inline ::apollo::common::Point3D* Ins::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.linear_velocity)
  clear_has_linear_velocity();
  ::apollo::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline void Ins::set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.linear_velocity)
}

// optional .apollo.common.Point3D angular_velocity = 7;
inline bool Ins::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ins::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ins::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ins::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::apollo::common::Point3D::Clear();
  clear_has_angular_velocity();
}
inline const ::apollo::common::Point3D& Ins::angular_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
inline ::apollo::common::Point3D* Ins::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.angular_velocity)
  return angular_velocity_;
}
inline ::apollo::common::Point3D* Ins::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.angular_velocity)
  clear_has_angular_velocity();
  ::apollo::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline void Ins::set_allocated_angular_velocity(::apollo::common::Point3D* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.angular_velocity)
}

// optional .apollo.common.Point3D linear_acceleration = 8;
inline bool Ins::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ins::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ins::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ins::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::apollo::common::Point3D::Clear();
  clear_has_linear_acceleration();
}
inline const ::apollo::common::Point3D& Ins::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
inline ::apollo::common::Point3D* Ins::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.linear_acceleration)
  return linear_acceleration_;
}
inline ::apollo::common::Point3D* Ins::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.linear_acceleration)
  clear_has_linear_acceleration();
  ::apollo::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline void Ins::set_allocated_linear_acceleration(::apollo::common::Point3D* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.linear_acceleration)
}

// repeated float position_covariance = 9 [packed = true];
inline int Ins::position_covariance_size() const {
  return position_covariance_.size();
}
inline void Ins::clear_position_covariance() {
  position_covariance_.Clear();
}
inline float Ins::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.position_covariance)
  return position_covariance_.Get(index);
}
inline void Ins::set_position_covariance(int index, float value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.position_covariance)
}
inline void Ins::add_position_covariance(float value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.position_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::position_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.position_covariance)
  return position_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.position_covariance)
  return &position_covariance_;
}

// repeated float euler_angles_covariance = 10 [packed = true];
inline int Ins::euler_angles_covariance_size() const {
  return euler_angles_covariance_.size();
}
inline void Ins::clear_euler_angles_covariance() {
  euler_angles_covariance_.Clear();
}
inline float Ins::euler_angles_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.euler_angles_covariance)
  return euler_angles_covariance_.Get(index);
}
inline void Ins::set_euler_angles_covariance(int index, float value) {
  euler_angles_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.euler_angles_covariance)
}
inline void Ins::add_euler_angles_covariance(float value) {
  euler_angles_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.euler_angles_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::euler_angles_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.euler_angles_covariance)
  return euler_angles_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_euler_angles_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.euler_angles_covariance)
  return &euler_angles_covariance_;
}

// repeated float linear_velocity_covariance = 11 [packed = true];
inline int Ins::linear_velocity_covariance_size() const {
  return linear_velocity_covariance_.size();
}
inline void Ins::clear_linear_velocity_covariance() {
  linear_velocity_covariance_.Clear();
}
inline float Ins::linear_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_velocity_covariance)
  return linear_velocity_covariance_.Get(index);
}
inline void Ins::set_linear_velocity_covariance(int index, float value) {
  linear_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.linear_velocity_covariance)
}
inline void Ins::add_linear_velocity_covariance(float value) {
  linear_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.linear_velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::linear_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.linear_velocity_covariance)
  return linear_velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_linear_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.linear_velocity_covariance)
  return &linear_velocity_covariance_;
}

// repeated float angular_velocity_covariance = 12 [packed = true];
inline int Ins::angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
inline void Ins::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
inline float Ins::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.angular_velocity_covariance)
  return angular_velocity_covariance_.Get(index);
}
inline void Ins::set_angular_velocity_covariance(int index, float value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.angular_velocity_covariance)
}
inline void Ins::add_angular_velocity_covariance(float value) {
  angular_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.angular_velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.angular_velocity_covariance)
  return angular_velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.angular_velocity_covariance)
  return &angular_velocity_covariance_;
}

// repeated float linear_acceleration_covariance = 13 [packed = true];
inline int Ins::linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
inline void Ins::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
inline float Ins::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Get(index);
}
inline void Ins::set_linear_acceleration_covariance(int index, float value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
}
inline void Ins::add_linear_acceleration_covariance(float value) {
  linear_acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
  return linear_acceleration_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
  return &linear_acceleration_covariance_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::gnss::Ins_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::Ins_Type>() {
  return ::apollo::drivers::gnss::Ins_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drivers_2fgnss_2fins_2eproto__INCLUDED
