// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/configs/vehicle_config.proto

#ifndef PROTOBUF_common_2fconfigs_2fvehicle_5fconfig_2eproto__INCLUDED
#define PROTOBUF_common_2fconfigs_2fvehicle_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/header.pb.h"
#include "common/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
void protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
void protobuf_ShutdownFile_common_2fconfigs_2fvehicle_5fconfig_2eproto();

class Extrinsics;
class Transform;
class VehicleConfig;
class VehicleParam;

enum VehicleParam_VehicleBrand {
  VehicleParam_VehicleBrand_LINCOLN_MKZ = 0,
  VehicleParam_VehicleBrand_GEM = 1
};
bool VehicleParam_VehicleBrand_IsValid(int value);
const VehicleParam_VehicleBrand VehicleParam_VehicleBrand_VehicleBrand_MIN = VehicleParam_VehicleBrand_LINCOLN_MKZ;
const VehicleParam_VehicleBrand VehicleParam_VehicleBrand_VehicleBrand_MAX = VehicleParam_VehicleBrand_GEM;
const int VehicleParam_VehicleBrand_VehicleBrand_ARRAYSIZE = VehicleParam_VehicleBrand_VehicleBrand_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleParam_VehicleBrand_descriptor();
inline const ::std::string& VehicleParam_VehicleBrand_Name(VehicleParam_VehicleBrand value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleParam_VehicleBrand_descriptor(), value);
}
inline bool VehicleParam_VehicleBrand_Parse(
    const ::std::string& name, VehicleParam_VehicleBrand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleParam_VehicleBrand>(
    VehicleParam_VehicleBrand_descriptor(), name, value);
}
// ===================================================================

class Transform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform& default_instance();

  void Swap(Transform* other);

  // implements Message ----------------------------------------------

  inline Transform* New() const { return New(NULL); }

  Transform* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes source_frame = 1;
  bool has_source_frame() const;
  void clear_source_frame();
  static const int kSourceFrameFieldNumber = 1;
  const ::std::string& source_frame() const;
  void set_source_frame(const ::std::string& value);
  void set_source_frame(const char* value);
  void set_source_frame(const void* value, size_t size);
  ::std::string* mutable_source_frame();
  ::std::string* release_source_frame();
  void set_allocated_source_frame(::std::string* source_frame);

  // optional bytes target_frame = 2;
  bool has_target_frame() const;
  void clear_target_frame();
  static const int kTargetFrameFieldNumber = 2;
  const ::std::string& target_frame() const;
  void set_target_frame(const ::std::string& value);
  void set_target_frame(const char* value);
  void set_target_frame(const void* value, size_t size);
  ::std::string* mutable_target_frame();
  ::std::string* release_target_frame();
  void set_allocated_target_frame(::std::string* target_frame);

  // optional .apollo.common.Point3D translation = 3;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 3;
  const ::apollo::common::Point3D& translation() const;
  ::apollo::common::Point3D* mutable_translation();
  ::apollo::common::Point3D* release_translation();
  void set_allocated_translation(::apollo::common::Point3D* translation);

  // optional .apollo.common.Quaternion rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  const ::apollo::common::Quaternion& rotation() const;
  ::apollo::common::Quaternion* mutable_rotation();
  ::apollo::common::Quaternion* release_rotation();
  void set_allocated_rotation(::apollo::common::Quaternion* rotation);

  // @@protoc_insertion_point(class_scope:apollo.common.Transform)
 private:
  inline void set_has_source_frame();
  inline void clear_has_source_frame();
  inline void set_has_target_frame();
  inline void clear_has_target_frame();
  inline void set_has_translation();
  inline void clear_has_translation();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_frame_;
  ::google::protobuf::internal::ArenaStringPtr target_frame_;
  ::apollo::common::Point3D* translation_;
  ::apollo::common::Quaternion* rotation_;
  friend void  protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_common_2fconfigs_2fvehicle_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Transform* default_instance_;
};
// -------------------------------------------------------------------

class Extrinsics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.Extrinsics) */ {
 public:
  Extrinsics();
  virtual ~Extrinsics();

  Extrinsics(const Extrinsics& from);

  inline Extrinsics& operator=(const Extrinsics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Extrinsics& default_instance();

  void Swap(Extrinsics* other);

  // implements Message ----------------------------------------------

  inline Extrinsics* New() const { return New(NULL); }

  Extrinsics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Extrinsics& from);
  void MergeFrom(const Extrinsics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Extrinsics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.Transform tansforms = 1;
  int tansforms_size() const;
  void clear_tansforms();
  static const int kTansformsFieldNumber = 1;
  const ::apollo::common::Transform& tansforms(int index) const;
  ::apollo::common::Transform* mutable_tansforms(int index);
  ::apollo::common::Transform* add_tansforms();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >*
      mutable_tansforms();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >&
      tansforms() const;

  // @@protoc_insertion_point(class_scope:apollo.common.Extrinsics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform > tansforms_;
  friend void  protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_common_2fconfigs_2fvehicle_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Extrinsics* default_instance_;
};
// -------------------------------------------------------------------

class VehicleParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleParam) */ {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleParam& default_instance();

  void Swap(VehicleParam* other);

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const { return New(NULL); }

  VehicleParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VehicleParam_VehicleBrand VehicleBrand;
  static const VehicleBrand LINCOLN_MKZ =
    VehicleParam_VehicleBrand_LINCOLN_MKZ;
  static const VehicleBrand GEM =
    VehicleParam_VehicleBrand_GEM;
  static inline bool VehicleBrand_IsValid(int value) {
    return VehicleParam_VehicleBrand_IsValid(value);
  }
  static const VehicleBrand VehicleBrand_MIN =
    VehicleParam_VehicleBrand_VehicleBrand_MIN;
  static const VehicleBrand VehicleBrand_MAX =
    VehicleParam_VehicleBrand_VehicleBrand_MAX;
  static const int VehicleBrand_ARRAYSIZE =
    VehicleParam_VehicleBrand_VehicleBrand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VehicleBrand_descriptor() {
    return VehicleParam_VehicleBrand_descriptor();
  }
  static inline const ::std::string& VehicleBrand_Name(VehicleBrand value) {
    return VehicleParam_VehicleBrand_Name(value);
  }
  static inline bool VehicleBrand_Parse(const ::std::string& name,
      VehicleBrand* value) {
    return VehicleParam_VehicleBrand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
  bool has_brand() const;
  void clear_brand();
  static const int kBrandFieldNumber = 1;
  ::apollo::common::VehicleParam_VehicleBrand brand() const;
  void set_brand(::apollo::common::VehicleParam_VehicleBrand value);

  // optional double front_edge_to_center = 2;
  bool has_front_edge_to_center() const;
  void clear_front_edge_to_center();
  static const int kFrontEdgeToCenterFieldNumber = 2;
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);

  // optional double back_edge_to_center = 3;
  bool has_back_edge_to_center() const;
  void clear_back_edge_to_center();
  static const int kBackEdgeToCenterFieldNumber = 3;
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);

  // optional double left_edge_to_center = 4;
  bool has_left_edge_to_center() const;
  void clear_left_edge_to_center();
  static const int kLeftEdgeToCenterFieldNumber = 4;
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);

  // optional double right_edge_to_center = 5;
  bool has_right_edge_to_center() const;
  void clear_right_edge_to_center();
  static const int kRightEdgeToCenterFieldNumber = 5;
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);

  // optional double length = 6;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 6;
  double length() const;
  void set_length(double value);

  // optional double width = 7;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // optional double height = 8;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  double height() const;
  void set_height(double value);

  // optional double min_turn_radius = 9;
  bool has_min_turn_radius() const;
  void clear_min_turn_radius();
  static const int kMinTurnRadiusFieldNumber = 9;
  double min_turn_radius() const;
  void set_min_turn_radius(double value);

  // optional double max_acceleration = 10;
  bool has_max_acceleration() const;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 10;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // optional double max_deceleration = 11;
  bool has_max_deceleration() const;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 11;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // optional double max_steer_angle = 12;
  bool has_max_steer_angle() const;
  void clear_max_steer_angle();
  static const int kMaxSteerAngleFieldNumber = 12;
  double max_steer_angle() const;
  void set_max_steer_angle(double value);

  // optional double max_steer_angle_rate = 13;
  bool has_max_steer_angle_rate() const;
  void clear_max_steer_angle_rate();
  static const int kMaxSteerAngleRateFieldNumber = 13;
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);

  // optional double min_steer_angle_rate = 14;
  bool has_min_steer_angle_rate() const;
  void clear_min_steer_angle_rate();
  static const int kMinSteerAngleRateFieldNumber = 14;
  double min_steer_angle_rate() const;
  void set_min_steer_angle_rate(double value);

  // optional double steer_ratio = 15;
  bool has_steer_ratio() const;
  void clear_steer_ratio();
  static const int kSteerRatioFieldNumber = 15;
  double steer_ratio() const;
  void set_steer_ratio(double value);

  // optional double wheel_base = 16;
  bool has_wheel_base() const;
  void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 16;
  double wheel_base() const;
  void set_wheel_base(double value);

  // optional double wheel_rolling_radius = 17;
  bool has_wheel_rolling_radius() const;
  void clear_wheel_rolling_radius();
  static const int kWheelRollingRadiusFieldNumber = 17;
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);

  // optional float max_abs_speed_when_stopped = 18;
  bool has_max_abs_speed_when_stopped() const;
  void clear_max_abs_speed_when_stopped();
  static const int kMaxAbsSpeedWhenStoppedFieldNumber = 18;
  float max_abs_speed_when_stopped() const;
  void set_max_abs_speed_when_stopped(float value);

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleParam)
 private:
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_front_edge_to_center();
  inline void clear_has_front_edge_to_center();
  inline void set_has_back_edge_to_center();
  inline void clear_has_back_edge_to_center();
  inline void set_has_left_edge_to_center();
  inline void clear_has_left_edge_to_center();
  inline void set_has_right_edge_to_center();
  inline void clear_has_right_edge_to_center();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_min_turn_radius();
  inline void clear_has_min_turn_radius();
  inline void set_has_max_acceleration();
  inline void clear_has_max_acceleration();
  inline void set_has_max_deceleration();
  inline void clear_has_max_deceleration();
  inline void set_has_max_steer_angle();
  inline void clear_has_max_steer_angle();
  inline void set_has_max_steer_angle_rate();
  inline void clear_has_max_steer_angle_rate();
  inline void set_has_min_steer_angle_rate();
  inline void clear_has_min_steer_angle_rate();
  inline void set_has_steer_ratio();
  inline void clear_has_steer_ratio();
  inline void set_has_wheel_base();
  inline void clear_has_wheel_base();
  inline void set_has_wheel_rolling_radius();
  inline void clear_has_wheel_rolling_radius();
  inline void set_has_max_abs_speed_when_stopped();
  inline void clear_has_max_abs_speed_when_stopped();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  int brand_;
  float max_abs_speed_when_stopped_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double min_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  friend void  protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_common_2fconfigs_2fvehicle_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static VehicleParam* default_instance_;
};
// -------------------------------------------------------------------

class VehicleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleConfig) */ {
 public:
  VehicleConfig();
  virtual ~VehicleConfig();

  VehicleConfig(const VehicleConfig& from);

  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleConfig& default_instance();

  void Swap(VehicleConfig* other);

  // implements Message ----------------------------------------------

  inline VehicleConfig* New() const { return New(NULL); }

  VehicleConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleConfig& from);
  void MergeFrom(const VehicleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  bool has_vehicle_param() const;
  void clear_vehicle_param();
  static const int kVehicleParamFieldNumber = 2;
  const ::apollo::common::VehicleParam& vehicle_param() const;
  ::apollo::common::VehicleParam* mutable_vehicle_param();
  ::apollo::common::VehicleParam* release_vehicle_param();
  void set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param);

  // optional .apollo.common.Extrinsics extrinsics = 3;
  bool has_extrinsics() const;
  void clear_extrinsics();
  static const int kExtrinsicsFieldNumber = 3;
  const ::apollo::common::Extrinsics& extrinsics() const;
  ::apollo::common::Extrinsics* mutable_extrinsics();
  ::apollo::common::Extrinsics* release_extrinsics();
  void set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics);

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleConfig)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_vehicle_param();
  inline void clear_has_vehicle_param();
  inline void set_has_extrinsics();
  inline void clear_has_extrinsics();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::VehicleParam* vehicle_param_;
  ::apollo::common::Extrinsics* extrinsics_;
  friend void  protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_common_2fconfigs_2fvehicle_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static VehicleConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// optional bytes source_frame = 1;
inline bool Transform::has_source_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transform::set_has_source_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transform::clear_has_source_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transform::clear_source_frame() {
  source_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_frame();
}
inline const ::std::string& Transform::source_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.source_frame)
  return source_frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_source_frame(const ::std::string& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.source_frame)
}
inline void Transform::set_source_frame(const char* value) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.source_frame)
}
inline void Transform::set_source_frame(const void* value, size_t size) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.source_frame)
}
inline ::std::string* Transform::mutable_source_frame() {
  set_has_source_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.source_frame)
  return source_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transform::release_source_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.source_frame)
  clear_has_source_frame();
  return source_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_allocated_source_frame(::std::string* source_frame) {
  if (source_frame != NULL) {
    set_has_source_frame();
  } else {
    clear_has_source_frame();
  }
  source_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.source_frame)
}

// optional bytes target_frame = 2;
inline bool Transform::has_target_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transform::set_has_target_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transform::clear_has_target_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transform::clear_target_frame() {
  target_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_frame();
}
inline const ::std::string& Transform::target_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.target_frame)
  return target_frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_target_frame(const ::std::string& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.target_frame)
}
inline void Transform::set_target_frame(const char* value) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.target_frame)
}
inline void Transform::set_target_frame(const void* value, size_t size) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.target_frame)
}
inline ::std::string* Transform::mutable_target_frame() {
  set_has_target_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.target_frame)
  return target_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transform::release_target_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.target_frame)
  clear_has_target_frame();
  return target_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_allocated_target_frame(::std::string* target_frame) {
  if (target_frame != NULL) {
    set_has_target_frame();
  } else {
    clear_has_target_frame();
  }
  target_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.target_frame)
}

// optional .apollo.common.Point3D translation = 3;
inline bool Transform::has_translation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transform::set_has_translation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transform::clear_has_translation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transform::clear_translation() {
  if (translation_ != NULL) translation_->::apollo::common::Point3D::Clear();
  clear_has_translation();
}
inline const ::apollo::common::Point3D& Transform::translation() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.translation)
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
inline ::apollo::common::Point3D* Transform::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.translation)
  return translation_;
}
inline ::apollo::common::Point3D* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.translation)
  clear_has_translation();
  ::apollo::common::Point3D* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transform::set_allocated_translation(::apollo::common::Point3D* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.translation)
}

// optional .apollo.common.Quaternion rotation = 4;
inline bool Transform::has_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transform::set_has_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transform::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transform::clear_rotation() {
  if (rotation_ != NULL) rotation_->::apollo::common::Quaternion::Clear();
  clear_has_rotation();
}
inline const ::apollo::common::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::apollo::common::Quaternion* Transform::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::apollo::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.rotation)
  return rotation_;
}
inline ::apollo::common::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.rotation)
  clear_has_rotation();
  ::apollo::common::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Transform::set_allocated_rotation(::apollo::common::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.rotation)
}

// -------------------------------------------------------------------

// Extrinsics

// repeated .apollo.common.Transform tansforms = 1;
inline int Extrinsics::tansforms_size() const {
  return tansforms_.size();
}
inline void Extrinsics::clear_tansforms() {
  tansforms_.Clear();
}
inline const ::apollo::common::Transform& Extrinsics::tansforms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Extrinsics.tansforms)
  return tansforms_.Get(index);
}
inline ::apollo::common::Transform* Extrinsics::mutable_tansforms(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Extrinsics.tansforms)
  return tansforms_.Mutable(index);
}
inline ::apollo::common::Transform* Extrinsics::add_tansforms() {
  // @@protoc_insertion_point(field_add:apollo.common.Extrinsics.tansforms)
  return tansforms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >*
Extrinsics::mutable_tansforms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Extrinsics.tansforms)
  return &tansforms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >&
Extrinsics::tansforms() const {
  // @@protoc_insertion_point(field_list:apollo.common.Extrinsics.tansforms)
  return tansforms_;
}

// -------------------------------------------------------------------

// VehicleParam

// optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
inline bool VehicleParam::has_brand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleParam::set_has_brand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleParam::clear_has_brand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleParam::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
inline ::apollo::common::VehicleParam_VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brand)
  return static_cast< ::apollo::common::VehicleParam_VehicleBrand >(brand_);
}
inline void VehicleParam::set_brand(::apollo::common::VehicleParam_VehicleBrand value) {
  assert(::apollo::common::VehicleParam_VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brand)
}

// optional double front_edge_to_center = 2;
inline bool VehicleParam::has_front_edge_to_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleParam::set_has_front_edge_to_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleParam::clear_has_front_edge_to_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 0;
  clear_has_front_edge_to_center();
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  set_has_front_edge_to_center();
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 3;
inline bool VehicleParam::has_back_edge_to_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleParam::set_has_back_edge_to_center() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleParam::clear_has_back_edge_to_center() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 0;
  clear_has_back_edge_to_center();
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  set_has_back_edge_to_center();
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 4;
inline bool VehicleParam::has_left_edge_to_center() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleParam::set_has_left_edge_to_center() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleParam::clear_has_left_edge_to_center() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 0;
  clear_has_left_edge_to_center();
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  set_has_left_edge_to_center();
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 5;
inline bool VehicleParam::has_right_edge_to_center() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleParam::set_has_right_edge_to_center() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleParam::clear_has_right_edge_to_center() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 0;
  clear_has_right_edge_to_center();
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  set_has_right_edge_to_center();
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.right_edge_to_center)
}

// optional double length = 6;
inline bool VehicleParam::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleParam::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleParam::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleParam::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.length)
  return length_;
}
inline void VehicleParam::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.length)
}

// optional double width = 7;
inline bool VehicleParam::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleParam::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VehicleParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VehicleParam::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.width)
  return width_;
}
inline void VehicleParam::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.width)
}

// optional double height = 8;
inline bool VehicleParam::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleParam::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleParam::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.height)
  return height_;
}
inline void VehicleParam::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.height)
}

// optional double min_turn_radius = 9;
inline bool VehicleParam::has_min_turn_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleParam::set_has_min_turn_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleParam::clear_has_min_turn_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 0;
  clear_has_min_turn_radius();
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  set_has_min_turn_radius();
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 10;
inline bool VehicleParam::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleParam::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleParam::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 0;
  clear_has_max_acceleration();
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_acceleration)
  return max_acceleration_;
}
inline void VehicleParam::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 11;
inline bool VehicleParam::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleParam::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VehicleParam::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = 0;
  clear_has_max_deceleration();
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_deceleration)
  return max_deceleration_;
}
inline void VehicleParam::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 12;
inline bool VehicleParam::has_max_steer_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleParam::set_has_max_steer_angle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VehicleParam::clear_has_max_steer_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 0;
  clear_has_max_steer_angle();
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  set_has_max_steer_angle();
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 13;
inline bool VehicleParam::has_max_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleParam::set_has_max_steer_angle_rate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VehicleParam::clear_has_max_steer_angle_rate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 0;
  clear_has_max_steer_angle_rate();
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  set_has_max_steer_angle_rate();
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 14;
inline bool VehicleParam::has_min_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleParam::set_has_min_steer_angle_rate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VehicleParam::clear_has_min_steer_angle_rate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = 0;
  clear_has_min_steer_angle_rate();
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  set_has_min_steer_angle_rate();
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 15;
inline bool VehicleParam::has_steer_ratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VehicleParam::set_has_steer_ratio() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VehicleParam::clear_has_steer_ratio() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 0;
  clear_has_steer_ratio();
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.steer_ratio)
  return steer_ratio_;
}
inline void VehicleParam::set_steer_ratio(double value) {
  set_has_steer_ratio();
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.steer_ratio)
}

// optional double wheel_base = 16;
inline bool VehicleParam::has_wheel_base() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VehicleParam::set_has_wheel_base() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VehicleParam::clear_has_wheel_base() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
  clear_has_wheel_base();
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_base)
  return wheel_base_;
}
inline void VehicleParam::set_wheel_base(double value) {
  set_has_wheel_base();
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 17;
inline bool VehicleParam::has_wheel_rolling_radius() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VehicleParam::set_has_wheel_rolling_radius() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VehicleParam::clear_has_wheel_rolling_radius() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = 0;
  clear_has_wheel_rolling_radius();
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  set_has_wheel_rolling_radius();
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 18;
inline bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VehicleParam::set_has_max_abs_speed_when_stopped() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VehicleParam::clear_has_max_abs_speed_when_stopped() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = 0;
  clear_has_max_abs_speed_when_stopped();
}
inline float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_abs_speed_when_stopped)
  return max_abs_speed_when_stopped_;
}
inline void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  set_has_max_abs_speed_when_stopped();
  max_abs_speed_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_abs_speed_when_stopped)
}

// -------------------------------------------------------------------

// VehicleConfig

// optional .apollo.common.Header header = 1;
inline bool VehicleConfig::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleConfig::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleConfig::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleConfig::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& VehicleConfig::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* VehicleConfig::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.header)
  return header_;
}
inline ::apollo::common::Header* VehicleConfig::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void VehicleConfig::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.header)
}

// optional .apollo.common.VehicleParam vehicle_param = 2;
inline bool VehicleConfig::has_vehicle_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleConfig::set_has_vehicle_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleConfig::clear_has_vehicle_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleConfig::clear_vehicle_param() {
  if (vehicle_param_ != NULL) vehicle_param_->::apollo::common::VehicleParam::Clear();
  clear_has_vehicle_param();
}
inline const ::apollo::common::VehicleParam& VehicleConfig::vehicle_param() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.vehicle_param)
  return vehicle_param_ != NULL ? *vehicle_param_ : *default_instance_->vehicle_param_;
}
inline ::apollo::common::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  set_has_vehicle_param();
  if (vehicle_param_ == NULL) {
    vehicle_param_ = new ::apollo::common::VehicleParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.vehicle_param)
  return vehicle_param_;
}
inline ::apollo::common::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.vehicle_param)
  clear_has_vehicle_param();
  ::apollo::common::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = NULL;
  return temp;
}
inline void VehicleConfig::set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param) {
  delete vehicle_param_;
  vehicle_param_ = vehicle_param;
  if (vehicle_param) {
    set_has_vehicle_param();
  } else {
    clear_has_vehicle_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.vehicle_param)
}

// optional .apollo.common.Extrinsics extrinsics = 3;
inline bool VehicleConfig::has_extrinsics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleConfig::set_has_extrinsics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleConfig::clear_has_extrinsics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleConfig::clear_extrinsics() {
  if (extrinsics_ != NULL) extrinsics_->::apollo::common::Extrinsics::Clear();
  clear_has_extrinsics();
}
inline const ::apollo::common::Extrinsics& VehicleConfig::extrinsics() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.extrinsics)
  return extrinsics_ != NULL ? *extrinsics_ : *default_instance_->extrinsics_;
}
inline ::apollo::common::Extrinsics* VehicleConfig::mutable_extrinsics() {
  set_has_extrinsics();
  if (extrinsics_ == NULL) {
    extrinsics_ = new ::apollo::common::Extrinsics;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.extrinsics)
  return extrinsics_;
}
inline ::apollo::common::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.extrinsics)
  clear_has_extrinsics();
  ::apollo::common::Extrinsics* temp = extrinsics_;
  extrinsics_ = NULL;
  return temp;
}
inline void VehicleConfig::set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics) {
  delete extrinsics_;
  extrinsics_ = extrinsics;
  if (extrinsics) {
    set_has_extrinsics();
  } else {
    clear_has_extrinsics();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.extrinsics)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::common::VehicleParam_VehicleBrand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::VehicleParam_VehicleBrand>() {
  return ::apollo::common::VehicleParam_VehicleBrand_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fconfigs_2fvehicle_5fconfig_2eproto__INCLUDED
