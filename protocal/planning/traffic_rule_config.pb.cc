// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/traffic_rule_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/traffic_rule_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* BacksideVehicleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacksideVehicleConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeLaneConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeLaneConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreepConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreepConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrosswalkConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrosswalkConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestinationConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestinationConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrontVehicleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrontVehicleConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepClearConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepClearConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullOverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullOverConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceLineEndConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceLineEndConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReroutingConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReroutingConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalLightConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalLightConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopSignConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopSignConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficRuleConfig_reflection_ = NULL;
struct TrafficRuleConfigOneofInstance {
  const ::apollo::planning::BacksideVehicleConfig* backside_vehicle_;
  const ::apollo::planning::ChangeLaneConfig* change_lane_;
  const ::apollo::planning::CrosswalkConfig* crosswalk_;
  const ::apollo::planning::DestinationConfig* destination_;
  const ::apollo::planning::FrontVehicleConfig* front_vehicle_;
  const ::apollo::planning::KeepClearConfig* keep_clear_;
  const ::apollo::planning::PullOverConfig* pull_over_;
  const ::apollo::planning::ReferenceLineEndConfig* reference_line_end_;
  const ::apollo::planning::ReroutingConfig* rerouting_;
  const ::apollo::planning::SignalLightConfig* signal_light_;
  const ::apollo::planning::StopSignConfig* stop_sign_;
}* TrafficRuleConfig_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficRuleConfig_RuleId_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TrafficRuleConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficRuleConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2ftraffic_5frule_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2ftraffic_5frule_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/traffic_rule_config.proto");
  GOOGLE_CHECK(file != NULL);
  BacksideVehicleConfig_descriptor_ = file->message_type(0);
  static const int BacksideVehicleConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacksideVehicleConfig, backside_lane_width_),
  };
  BacksideVehicleConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BacksideVehicleConfig_descriptor_,
      BacksideVehicleConfig::default_instance_,
      BacksideVehicleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacksideVehicleConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(BacksideVehicleConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacksideVehicleConfig, _internal_metadata_),
      -1);
  ChangeLaneConfig_descriptor_ = file->message_type(1);
  static const int ChangeLaneConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneConfig, min_overtake_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneConfig, min_overtake_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneConfig, enable_guard_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneConfig, guard_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneConfig, min_guard_speed_),
  };
  ChangeLaneConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeLaneConfig_descriptor_,
      ChangeLaneConfig::default_instance_,
      ChangeLaneConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChangeLaneConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneConfig, _internal_metadata_),
      -1);
  CreepConfig_descriptor_ = file->message_type(2);
  static const int CreepConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, creep_distance_to_stop_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, speed_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, max_valid_stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, min_boundary_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, min_boundary_s_),
  };
  CreepConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreepConfig_descriptor_,
      CreepConfig::default_instance_,
      CreepConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CreepConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepConfig, _internal_metadata_),
      -1);
  CrosswalkConfig_descriptor_ = file->message_type(3);
  static const int CrosswalkConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, max_stop_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, min_pass_s_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, max_stop_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, max_valid_stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, expand_s_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_strick_l_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_loose_l_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_timeout_),
  };
  CrosswalkConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CrosswalkConfig_descriptor_,
      CrosswalkConfig::default_instance_,
      CrosswalkConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CrosswalkConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, _internal_metadata_),
      -1);
  DestinationConfig_descriptor_ = file->message_type(4);
  static const int DestinationConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, enable_pull_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, pull_over_plan_distance_),
  };
  DestinationConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DestinationConfig_descriptor_,
      DestinationConfig::default_instance_,
      DestinationConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(DestinationConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, _internal_metadata_),
      -1);
  FrontVehicleConfig_descriptor_ = file->message_type(5);
  static const int FrontVehicleConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontVehicleConfig, enable_side_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontVehicleConfig, side_pass_s_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontVehicleConfig, side_pass_l_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontVehicleConfig, side_pass_wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontVehicleConfig, nudge_l_buffer_),
  };
  FrontVehicleConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FrontVehicleConfig_descriptor_,
      FrontVehicleConfig::default_instance_,
      FrontVehicleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontVehicleConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(FrontVehicleConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontVehicleConfig, _internal_metadata_),
      -1);
  KeepClearConfig_descriptor_ = file->message_type(6);
  static const int KeepClearConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, enable_keep_clear_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, enable_junction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, min_pass_s_distance_),
  };
  KeepClearConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepClearConfig_descriptor_,
      KeepClearConfig::default_instance_,
      KeepClearConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeepClearConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, _internal_metadata_),
      -1);
  PullOverConfig_descriptor_ = file->message_type(7);
  static const int PullOverConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, max_stop_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, max_valid_stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, max_stop_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, min_pass_s_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, buffer_to_boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, plan_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, operation_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, max_check_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, max_failure_count_),
  };
  PullOverConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PullOverConfig_descriptor_,
      PullOverConfig::default_instance_,
      PullOverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PullOverConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverConfig, _internal_metadata_),
      -1);
  ReferenceLineEndConfig_descriptor_ = file->message_type(8);
  static const int ReferenceLineEndConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, min_reference_line_remain_length_),
  };
  ReferenceLineEndConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReferenceLineEndConfig_descriptor_,
      ReferenceLineEndConfig::default_instance_,
      ReferenceLineEndConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReferenceLineEndConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, _internal_metadata_),
      -1);
  ReroutingConfig_descriptor_ = file->message_type(9);
  static const int ReroutingConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, cooldown_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, prepare_rerouting_time_),
  };
  ReroutingConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReroutingConfig_descriptor_,
      ReroutingConfig::default_instance_,
      ReroutingConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReroutingConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, _internal_metadata_),
      -1);
  SignalLightConfig_descriptor_ = file->message_type(10);
  static const int SignalLightConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, max_stop_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, min_pass_s_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, max_stop_deacceleration_yellow_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, signal_expire_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, righ_turn_creep_),
  };
  SignalLightConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignalLightConfig_descriptor_,
      SignalLightConfig::default_instance_,
      SignalLightConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignalLightConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightConfig, _internal_metadata_),
      -1);
  StopSignConfig_descriptor_ = file->message_type(11);
  static const int StopSignConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, min_pass_s_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, max_stop_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, max_valid_stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, stop_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, watch_vehicle_max_valid_stop_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, watch_vehicle_max_valid_stop_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, wait_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, creep_),
  };
  StopSignConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopSignConfig_descriptor_,
      StopSignConfig::default_instance_,
      StopSignConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopSignConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, _internal_metadata_),
      -1);
  TrafficRuleConfig_descriptor_ = file->message_type(12);
  static const int TrafficRuleConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, rule_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, enabled_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, backside_vehicle_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, change_lane_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, crosswalk_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, destination_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, front_vehicle_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, keep_clear_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, pull_over_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, reference_line_end_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, rerouting_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, signal_light_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficRuleConfig_default_oneof_instance_, stop_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, config_),
  };
  TrafficRuleConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficRuleConfig_descriptor_,
      TrafficRuleConfig::default_instance_,
      TrafficRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, _has_bits_[0]),
      -1,
      -1,
      TrafficRuleConfig_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, _oneof_case_[0]),
      sizeof(TrafficRuleConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, _internal_metadata_),
      -1);
  TrafficRuleConfig_RuleId_descriptor_ = TrafficRuleConfig_descriptor_->enum_type(0);
  TrafficRuleConfigs_descriptor_ = file->message_type(13);
  static const int TrafficRuleConfigs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfigs, config_),
  };
  TrafficRuleConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficRuleConfigs_descriptor_,
      TrafficRuleConfigs::default_instance_,
      TrafficRuleConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficRuleConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2ftraffic_5frule_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BacksideVehicleConfig_descriptor_, &BacksideVehicleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeLaneConfig_descriptor_, &ChangeLaneConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreepConfig_descriptor_, &CreepConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CrosswalkConfig_descriptor_, &CrosswalkConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DestinationConfig_descriptor_, &DestinationConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FrontVehicleConfig_descriptor_, &FrontVehicleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepClearConfig_descriptor_, &KeepClearConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PullOverConfig_descriptor_, &PullOverConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReferenceLineEndConfig_descriptor_, &ReferenceLineEndConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReroutingConfig_descriptor_, &ReroutingConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignalLightConfig_descriptor_, &SignalLightConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopSignConfig_descriptor_, &StopSignConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficRuleConfig_descriptor_, &TrafficRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficRuleConfigs_descriptor_, &TrafficRuleConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2ftraffic_5frule_5fconfig_2eproto() {
  delete BacksideVehicleConfig::default_instance_;
  delete BacksideVehicleConfig_reflection_;
  delete ChangeLaneConfig::default_instance_;
  delete ChangeLaneConfig_reflection_;
  delete CreepConfig::default_instance_;
  delete CreepConfig_reflection_;
  delete CrosswalkConfig::default_instance_;
  delete CrosswalkConfig_reflection_;
  delete DestinationConfig::default_instance_;
  delete DestinationConfig_reflection_;
  delete FrontVehicleConfig::default_instance_;
  delete FrontVehicleConfig_reflection_;
  delete KeepClearConfig::default_instance_;
  delete KeepClearConfig_reflection_;
  delete PullOverConfig::default_instance_;
  delete PullOverConfig_reflection_;
  delete ReferenceLineEndConfig::default_instance_;
  delete ReferenceLineEndConfig_reflection_;
  delete ReroutingConfig::default_instance_;
  delete ReroutingConfig_reflection_;
  delete SignalLightConfig::default_instance_;
  delete SignalLightConfig_reflection_;
  delete StopSignConfig::default_instance_;
  delete StopSignConfig_reflection_;
  delete TrafficRuleConfig::default_instance_;
  delete TrafficRuleConfig_default_oneof_instance_;
  delete TrafficRuleConfig_reflection_;
  delete TrafficRuleConfigs::default_instance_;
  delete TrafficRuleConfigs_reflection_;
}

void protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"planning/traffic_rule_config.proto\022\017ap"
    "ollo.planning\"7\n\025BacksideVehicleConfig\022\036"
    "\n\023backside_lane_width\030\001 \001(\001:\0014\"\262\001\n\020Chang"
    "eLaneConfig\022!\n\025min_overtake_distance\030\001 \001"
    "(\001:\00210\022\034\n\021min_overtake_time\030\002 \001(\001:\0012\022$\n\025"
    "enable_guard_obstacle\030\003 \001(\010:\005false\022\033\n\016gu"
    "ard_distance\030\004 \001(\001:\003100\022\032\n\017min_guard_spe"
    "ed\030\005 \001(\001:\0011\"\326\001\n\013CreepConfig\022\017\n\007enabled\030\001"
    " \001(\010\022&\n\033creep_distance_to_stop_line\030\002 \001("
    "\001:\0011\022\032\n\rstop_distance\030\003 \001(\001:\0030.5\022\026\n\013spee"
    "d_limit\030\004 \001(\001:\0011\022$\n\027max_valid_stop_dista"
    "nce\030\005 \001(\001:\0030.3\022\031\n\016min_boundary_t\030\006 \001(\001:\001"
    "6\022\031\n\016min_boundary_s\030\007 \001(\001:\0013\"\253\002\n\017Crosswa"
    "lkConfig\022\030\n\rstop_distance\030\001 \001(\001:\0011\022 \n\025ma"
    "x_stop_deceleration\030\002 \001(\001:\0014\022\036\n\023min_pass"
    "_s_distance\030\003 \001(\001:\0011\022\033\n\016max_stop_speed\030\004"
    " \001(\001:\0030.3\022\"\n\027max_valid_stop_distance\030\005 \001"
    "(\001:\0013\022\034\n\021expand_s_distance\030\006 \001(\001:\0012\022!\n\026s"
    "top_strick_l_distance\030\007 \001(\001:\0014\022 \n\025stop_l"
    "oose_l_distance\030\010 \001(\001:\0015\022\030\n\014stop_timeout"
    "\030\t \001(\001:\00210\"u\n\021DestinationConfig\022\037\n\020enabl"
    "e_pull_over\030\001 \001(\010:\005false\022\032\n\rstop_distanc"
    "e\030\002 \001(\001:\0030.5\022#\n\027pull_over_plan_distance\030"
    "\003 \001(\001:\00235\"\267\001\n\022FrontVehicleConfig\022\036\n\020enab"
    "le_side_pass\030\001 \001(\010:\004true\022!\n\025side_pass_s_"
    "threshold\030\002 \001(\001:\00215\022 \n\025side_pass_l_thres"
    "hold\030\003 \001(\001:\0011\022\037\n\023side_pass_wait_time\030\004 \001"
    "(\001:\00230\022\033\n\016nudge_l_buffer\030\005 \001(\001:\0030.5\"v\n\017K"
    "eepClearConfig\022$\n\026enable_keep_clear_zone"
    "\030\001 \001(\010:\004true\022\035\n\017enable_junction\030\002 \001(\010:\004t"
    "rue\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0012\"\312\002\n\016"
    "PullOverConfig\022\032\n\rstop_distance\030\001 \001(\001:\0030"
    ".5\022\033\n\016max_stop_speed\030\002 \001(\001:\0030.3\022\"\n\027max_v"
    "alid_stop_distance\030\003 \001(\001:\0013\022\"\n\025max_stop_"
    "deceleration\030\004 \001(\001:\0032.5\022\036\n\023min_pass_s_di"
    "stance\030\005 \001(\001:\0011\022\037\n\022buffer_to_boundary\030\006 "
    "\001(\001:\0030.5\022\031\n\rplan_distance\030\007 \001(\001:\00235\022\034\n\020o"
    "peration_length\030\010 \001(\001:\00230\022\036\n\022max_check_d"
    "istance\030\t \001(\001:\00260\022\035\n\021max_failure_count\030\n"
    " \001(\r:\00210\"b\n\026ReferenceLineEndConfig\022\032\n\rst"
    "op_distance\030\001 \001(\001:\0030.5\022,\n min_reference_"
    "line_remain_length\030\002 \001(\001:\00250\"N\n\017Reroutin"
    "gConfig\022\030\n\rcooldown_time\030\001 \001(\001:\0013\022!\n\026pre"
    "pare_rerouting_time\030\002 \001(\001:\0012\"\372\001\n\021SignalL"
    "ightConfig\022\030\n\rstop_distance\030\001 \001(\001:\0011\022 \n\025"
    "max_stop_deceleration\030\002 \001(\001:\0014\022\036\n\023min_pa"
    "ss_s_distance\030\003 \001(\001:\0014\022/\n$max_stop_deacc"
    "eleration_yellow_light\030\004 \001(\001:\0013\022!\n\026signa"
    "l_expire_time_sec\030\005 \001(\001:\0015\0225\n\017righ_turn_"
    "creep\030\006 \001(\0132\034.apollo.planning.CreepConfi"
    "g\"\316\002\n\016StopSignConfig\022\030\n\rstop_distance\030\001 "
    "\001(\001:\0011\022\036\n\023min_pass_s_distance\030\002 \001(\001:\0011\022\033"
    "\n\016max_stop_speed\030\003 \001(\001:\0030.3\022\"\n\027max_valid"
    "_stop_distance\030\004 \001(\001:\0013\022\030\n\rstop_duration"
    "\030\005 \001(\001:\0011\022/\n\"watch_vehicle_max_valid_sto"
    "p_speed\030\006 \001(\001:\0030.5\0220\n%watch_vehicle_max_"
    "valid_stop_distance\030\007 \001(\001:\0015\022\027\n\014wait_tim"
    "eout\030\010 \001(\001:\0018\022+\n\005creep\030\t \001(\0132\034.apollo.pl"
    "anning.CreepConfig\"\302\007\n\021TrafficRuleConfig"
    "\022:\n\007rule_id\030\001 \001(\0162).apollo.planning.Traf"
    "ficRuleConfig.RuleId\022\017\n\007enabled\030\002 \001(\010\022B\n"
    "\020backside_vehicle\030\003 \001(\0132&.apollo.plannin"
    "g.BacksideVehicleConfigH\000\0228\n\013change_lane"
    "\030\004 \001(\0132!.apollo.planning.ChangeLaneConfi"
    "gH\000\0225\n\tcrosswalk\030\005 \001(\0132 .apollo.planning"
    ".CrosswalkConfigH\000\0229\n\013destination\030\006 \001(\0132"
    "\".apollo.planning.DestinationConfigH\000\022<\n"
    "\rfront_vehicle\030\007 \001(\0132#.apollo.planning.F"
    "rontVehicleConfigH\000\0226\n\nkeep_clear\030\010 \001(\0132"
    " .apollo.planning.KeepClearConfigH\000\0224\n\tp"
    "ull_over\030\t \001(\0132\037.apollo.planning.PullOve"
    "rConfigH\000\022E\n\022reference_line_end\030\n \001(\0132\'."
    "apollo.planning.ReferenceLineEndConfigH\000"
    "\0225\n\trerouting\030\013 \001(\0132 .apollo.planning.Re"
    "routingConfigH\000\022:\n\014signal_light\030\014 \001(\0132\"."
    "apollo.planning.SignalLightConfigH\000\0224\n\ts"
    "top_sign\030\r \001(\0132\037.apollo.planning.StopSig"
    "nConfigH\000\"\311\001\n\006RuleId\022\024\n\020BACKSIDE_VEHICLE"
    "\020\001\022\017\n\013CHANGE_LANE\020\002\022\r\n\tCROSSWALK\020\003\022\017\n\013DE"
    "STINATION\020\004\022\021\n\rFRONT_VEHICLE\020\005\022\016\n\nKEEP_C"
    "LEAR\020\006\022\r\n\tPULL_OVER\020\007\022\026\n\022REFERENCE_LINE_"
    "END\020\010\022\r\n\tREROUTING\020\t\022\020\n\014SIGNAL_LIGHT\020\n\022\r"
    "\n\tSTOP_SIGN\020\013B\010\n\006config\"H\n\022TrafficRuleCo"
    "nfigs\0222\n\006config\030\001 \003(\0132\".apollo.planning."
    "TrafficRuleConfig", 3377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/traffic_rule_config.proto", &protobuf_RegisterTypes);
  BacksideVehicleConfig::default_instance_ = new BacksideVehicleConfig();
  ChangeLaneConfig::default_instance_ = new ChangeLaneConfig();
  CreepConfig::default_instance_ = new CreepConfig();
  CrosswalkConfig::default_instance_ = new CrosswalkConfig();
  DestinationConfig::default_instance_ = new DestinationConfig();
  FrontVehicleConfig::default_instance_ = new FrontVehicleConfig();
  KeepClearConfig::default_instance_ = new KeepClearConfig();
  PullOverConfig::default_instance_ = new PullOverConfig();
  ReferenceLineEndConfig::default_instance_ = new ReferenceLineEndConfig();
  ReroutingConfig::default_instance_ = new ReroutingConfig();
  SignalLightConfig::default_instance_ = new SignalLightConfig();
  StopSignConfig::default_instance_ = new StopSignConfig();
  TrafficRuleConfig::default_instance_ = new TrafficRuleConfig();
  TrafficRuleConfig_default_oneof_instance_ = new TrafficRuleConfigOneofInstance();
  TrafficRuleConfigs::default_instance_ = new TrafficRuleConfigs();
  BacksideVehicleConfig::default_instance_->InitAsDefaultInstance();
  ChangeLaneConfig::default_instance_->InitAsDefaultInstance();
  CreepConfig::default_instance_->InitAsDefaultInstance();
  CrosswalkConfig::default_instance_->InitAsDefaultInstance();
  DestinationConfig::default_instance_->InitAsDefaultInstance();
  FrontVehicleConfig::default_instance_->InitAsDefaultInstance();
  KeepClearConfig::default_instance_->InitAsDefaultInstance();
  PullOverConfig::default_instance_->InitAsDefaultInstance();
  ReferenceLineEndConfig::default_instance_->InitAsDefaultInstance();
  ReroutingConfig::default_instance_->InitAsDefaultInstance();
  SignalLightConfig::default_instance_->InitAsDefaultInstance();
  StopSignConfig::default_instance_->InitAsDefaultInstance();
  TrafficRuleConfig::default_instance_->InitAsDefaultInstance();
  TrafficRuleConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2ftraffic_5frule_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2ftraffic_5frule_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2ftraffic_5frule_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2ftraffic_5frule_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BacksideVehicleConfig::kBacksideLaneWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BacksideVehicleConfig::BacksideVehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.BacksideVehicleConfig)
}

void BacksideVehicleConfig::InitAsDefaultInstance() {
}

BacksideVehicleConfig::BacksideVehicleConfig(const BacksideVehicleConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.BacksideVehicleConfig)
}

void BacksideVehicleConfig::SharedCtor() {
  _cached_size_ = 0;
  backside_lane_width_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacksideVehicleConfig::~BacksideVehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.BacksideVehicleConfig)
  SharedDtor();
}

void BacksideVehicleConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BacksideVehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacksideVehicleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacksideVehicleConfig_descriptor_;
}

const BacksideVehicleConfig& BacksideVehicleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

BacksideVehicleConfig* BacksideVehicleConfig::default_instance_ = NULL;

BacksideVehicleConfig* BacksideVehicleConfig::New(::google::protobuf::Arena* arena) const {
  BacksideVehicleConfig* n = new BacksideVehicleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BacksideVehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.BacksideVehicleConfig)
  backside_lane_width_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BacksideVehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.BacksideVehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double backside_lane_width = 1 [default = 4];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backside_lane_width_)));
          set_has_backside_lane_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.BacksideVehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.BacksideVehicleConfig)
  return false;
#undef DO_
}

void BacksideVehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.BacksideVehicleConfig)
  // optional double backside_lane_width = 1 [default = 4];
  if (has_backside_lane_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->backside_lane_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.BacksideVehicleConfig)
}

::google::protobuf::uint8* BacksideVehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.BacksideVehicleConfig)
  // optional double backside_lane_width = 1 [default = 4];
  if (has_backside_lane_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->backside_lane_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.BacksideVehicleConfig)
  return target;
}

int BacksideVehicleConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.BacksideVehicleConfig)
  int total_size = 0;

  // optional double backside_lane_width = 1 [default = 4];
  if (has_backside_lane_width()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacksideVehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.BacksideVehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BacksideVehicleConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BacksideVehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.BacksideVehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.BacksideVehicleConfig)
    MergeFrom(*source);
  }
}

void BacksideVehicleConfig::MergeFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.BacksideVehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_backside_lane_width()) {
      set_backside_lane_width(from.backside_lane_width());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BacksideVehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacksideVehicleConfig::CopyFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacksideVehicleConfig::IsInitialized() const {

  return true;
}

void BacksideVehicleConfig::Swap(BacksideVehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BacksideVehicleConfig::InternalSwap(BacksideVehicleConfig* other) {
  std::swap(backside_lane_width_, other->backside_lane_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BacksideVehicleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacksideVehicleConfig_descriptor_;
  metadata.reflection = BacksideVehicleConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BacksideVehicleConfig

// optional double backside_lane_width = 1 [default = 4];
bool BacksideVehicleConfig::has_backside_lane_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BacksideVehicleConfig::set_has_backside_lane_width() {
  _has_bits_[0] |= 0x00000001u;
}
void BacksideVehicleConfig::clear_has_backside_lane_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void BacksideVehicleConfig::clear_backside_lane_width() {
  backside_lane_width_ = 4;
  clear_has_backside_lane_width();
}
 double BacksideVehicleConfig::backside_lane_width() const {
  // @@protoc_insertion_point(field_get:apollo.planning.BacksideVehicleConfig.backside_lane_width)
  return backside_lane_width_;
}
 void BacksideVehicleConfig::set_backside_lane_width(double value) {
  set_has_backside_lane_width();
  backside_lane_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.BacksideVehicleConfig.backside_lane_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeLaneConfig::kMinOvertakeDistanceFieldNumber;
const int ChangeLaneConfig::kMinOvertakeTimeFieldNumber;
const int ChangeLaneConfig::kEnableGuardObstacleFieldNumber;
const int ChangeLaneConfig::kGuardDistanceFieldNumber;
const int ChangeLaneConfig::kMinGuardSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeLaneConfig::ChangeLaneConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ChangeLaneConfig)
}

void ChangeLaneConfig::InitAsDefaultInstance() {
}

ChangeLaneConfig::ChangeLaneConfig(const ChangeLaneConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChangeLaneConfig)
}

void ChangeLaneConfig::SharedCtor() {
  _cached_size_ = 0;
  min_overtake_distance_ = 10;
  min_overtake_time_ = 2;
  enable_guard_obstacle_ = false;
  guard_distance_ = 100;
  min_guard_speed_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeLaneConfig::~ChangeLaneConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChangeLaneConfig)
  SharedDtor();
}

void ChangeLaneConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeLaneConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLaneConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLaneConfig_descriptor_;
}

const ChangeLaneConfig& ChangeLaneConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

ChangeLaneConfig* ChangeLaneConfig::default_instance_ = NULL;

ChangeLaneConfig* ChangeLaneConfig::New(::google::protobuf::Arena* arena) const {
  ChangeLaneConfig* n = new ChangeLaneConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeLaneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChangeLaneConfig)
  if (_has_bits_[0 / 32] & 31u) {
    min_overtake_distance_ = 10;
    min_overtake_time_ = 2;
    enable_guard_obstacle_ = false;
    guard_distance_ = 100;
    min_guard_speed_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangeLaneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ChangeLaneConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_overtake_distance = 1 [default = 10];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_overtake_distance_)));
          set_has_min_overtake_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_min_overtake_time;
        break;
      }

      // optional double min_overtake_time = 2 [default = 2];
      case 2: {
        if (tag == 17) {
         parse_min_overtake_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_overtake_time_)));
          set_has_min_overtake_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable_guard_obstacle;
        break;
      }

      // optional bool enable_guard_obstacle = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_enable_guard_obstacle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_guard_obstacle_)));
          set_has_enable_guard_obstacle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_guard_distance;
        break;
      }

      // optional double guard_distance = 4 [default = 100];
      case 4: {
        if (tag == 33) {
         parse_guard_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &guard_distance_)));
          set_has_guard_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_min_guard_speed;
        break;
      }

      // optional double min_guard_speed = 5 [default = 1];
      case 5: {
        if (tag == 41) {
         parse_min_guard_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_guard_speed_)));
          set_has_min_guard_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ChangeLaneConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ChangeLaneConfig)
  return false;
#undef DO_
}

void ChangeLaneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ChangeLaneConfig)
  // optional double min_overtake_distance = 1 [default = 10];
  if (has_min_overtake_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_overtake_distance(), output);
  }

  // optional double min_overtake_time = 2 [default = 2];
  if (has_min_overtake_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_overtake_time(), output);
  }

  // optional bool enable_guard_obstacle = 3 [default = false];
  if (has_enable_guard_obstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_guard_obstacle(), output);
  }

  // optional double guard_distance = 4 [default = 100];
  if (has_guard_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->guard_distance(), output);
  }

  // optional double min_guard_speed = 5 [default = 1];
  if (has_min_guard_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_guard_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ChangeLaneConfig)
}

::google::protobuf::uint8* ChangeLaneConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChangeLaneConfig)
  // optional double min_overtake_distance = 1 [default = 10];
  if (has_min_overtake_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_overtake_distance(), target);
  }

  // optional double min_overtake_time = 2 [default = 2];
  if (has_min_overtake_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_overtake_time(), target);
  }

  // optional bool enable_guard_obstacle = 3 [default = false];
  if (has_enable_guard_obstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_guard_obstacle(), target);
  }

  // optional double guard_distance = 4 [default = 100];
  if (has_guard_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->guard_distance(), target);
  }

  // optional double min_guard_speed = 5 [default = 1];
  if (has_min_guard_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_guard_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChangeLaneConfig)
  return target;
}

int ChangeLaneConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChangeLaneConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double min_overtake_distance = 1 [default = 10];
    if (has_min_overtake_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_overtake_time = 2 [default = 2];
    if (has_min_overtake_time()) {
      total_size += 1 + 8;
    }

    // optional bool enable_guard_obstacle = 3 [default = false];
    if (has_enable_guard_obstacle()) {
      total_size += 1 + 1;
    }

    // optional double guard_distance = 4 [default = 100];
    if (has_guard_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_guard_speed = 5 [default = 1];
    if (has_min_guard_speed()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLaneConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ChangeLaneConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeLaneConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeLaneConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ChangeLaneConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ChangeLaneConfig)
    MergeFrom(*source);
  }
}

void ChangeLaneConfig::MergeFrom(const ChangeLaneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChangeLaneConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_overtake_distance()) {
      set_min_overtake_distance(from.min_overtake_distance());
    }
    if (from.has_min_overtake_time()) {
      set_min_overtake_time(from.min_overtake_time());
    }
    if (from.has_enable_guard_obstacle()) {
      set_enable_guard_obstacle(from.enable_guard_obstacle());
    }
    if (from.has_guard_distance()) {
      set_guard_distance(from.guard_distance());
    }
    if (from.has_min_guard_speed()) {
      set_min_guard_speed(from.min_guard_speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChangeLaneConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ChangeLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLaneConfig::CopyFrom(const ChangeLaneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChangeLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneConfig::IsInitialized() const {

  return true;
}

void ChangeLaneConfig::Swap(ChangeLaneConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeLaneConfig::InternalSwap(ChangeLaneConfig* other) {
  std::swap(min_overtake_distance_, other->min_overtake_distance_);
  std::swap(min_overtake_time_, other->min_overtake_time_);
  std::swap(enable_guard_obstacle_, other->enable_guard_obstacle_);
  std::swap(guard_distance_, other->guard_distance_);
  std::swap(min_guard_speed_, other->min_guard_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeLaneConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeLaneConfig_descriptor_;
  metadata.reflection = ChangeLaneConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeLaneConfig

// optional double min_overtake_distance = 1 [default = 10];
bool ChangeLaneConfig::has_min_overtake_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeLaneConfig::set_has_min_overtake_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeLaneConfig::clear_has_min_overtake_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeLaneConfig::clear_min_overtake_distance() {
  min_overtake_distance_ = 10;
  clear_has_min_overtake_distance();
}
 double ChangeLaneConfig::min_overtake_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneConfig.min_overtake_distance)
  return min_overtake_distance_;
}
 void ChangeLaneConfig::set_min_overtake_distance(double value) {
  set_has_min_overtake_distance();
  min_overtake_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneConfig.min_overtake_distance)
}

// optional double min_overtake_time = 2 [default = 2];
bool ChangeLaneConfig::has_min_overtake_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeLaneConfig::set_has_min_overtake_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeLaneConfig::clear_has_min_overtake_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeLaneConfig::clear_min_overtake_time() {
  min_overtake_time_ = 2;
  clear_has_min_overtake_time();
}
 double ChangeLaneConfig::min_overtake_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneConfig.min_overtake_time)
  return min_overtake_time_;
}
 void ChangeLaneConfig::set_min_overtake_time(double value) {
  set_has_min_overtake_time();
  min_overtake_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneConfig.min_overtake_time)
}

// optional bool enable_guard_obstacle = 3 [default = false];
bool ChangeLaneConfig::has_enable_guard_obstacle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChangeLaneConfig::set_has_enable_guard_obstacle() {
  _has_bits_[0] |= 0x00000004u;
}
void ChangeLaneConfig::clear_has_enable_guard_obstacle() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChangeLaneConfig::clear_enable_guard_obstacle() {
  enable_guard_obstacle_ = false;
  clear_has_enable_guard_obstacle();
}
 bool ChangeLaneConfig::enable_guard_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneConfig.enable_guard_obstacle)
  return enable_guard_obstacle_;
}
 void ChangeLaneConfig::set_enable_guard_obstacle(bool value) {
  set_has_enable_guard_obstacle();
  enable_guard_obstacle_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneConfig.enable_guard_obstacle)
}

// optional double guard_distance = 4 [default = 100];
bool ChangeLaneConfig::has_guard_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChangeLaneConfig::set_has_guard_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void ChangeLaneConfig::clear_has_guard_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChangeLaneConfig::clear_guard_distance() {
  guard_distance_ = 100;
  clear_has_guard_distance();
}
 double ChangeLaneConfig::guard_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneConfig.guard_distance)
  return guard_distance_;
}
 void ChangeLaneConfig::set_guard_distance(double value) {
  set_has_guard_distance();
  guard_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneConfig.guard_distance)
}

// optional double min_guard_speed = 5 [default = 1];
bool ChangeLaneConfig::has_min_guard_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChangeLaneConfig::set_has_min_guard_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void ChangeLaneConfig::clear_has_min_guard_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChangeLaneConfig::clear_min_guard_speed() {
  min_guard_speed_ = 1;
  clear_has_min_guard_speed();
}
 double ChangeLaneConfig::min_guard_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ChangeLaneConfig.min_guard_speed)
  return min_guard_speed_;
}
 void ChangeLaneConfig::set_min_guard_speed(double value) {
  set_has_min_guard_speed();
  min_guard_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ChangeLaneConfig.min_guard_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreepConfig::kEnabledFieldNumber;
const int CreepConfig::kCreepDistanceToStopLineFieldNumber;
const int CreepConfig::kStopDistanceFieldNumber;
const int CreepConfig::kSpeedLimitFieldNumber;
const int CreepConfig::kMaxValidStopDistanceFieldNumber;
const int CreepConfig::kMinBoundaryTFieldNumber;
const int CreepConfig::kMinBoundarySFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreepConfig::CreepConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CreepConfig)
}

void CreepConfig::InitAsDefaultInstance() {
}

CreepConfig::CreepConfig(const CreepConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CreepConfig)
}

void CreepConfig::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  creep_distance_to_stop_line_ = 1;
  stop_distance_ = 0.5;
  speed_limit_ = 1;
  max_valid_stop_distance_ = 0.3;
  min_boundary_t_ = 6;
  min_boundary_s_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreepConfig::~CreepConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CreepConfig)
  SharedDtor();
}

void CreepConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreepConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreepConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreepConfig_descriptor_;
}

const CreepConfig& CreepConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

CreepConfig* CreepConfig::default_instance_ = NULL;

CreepConfig* CreepConfig::New(::google::protobuf::Arena* arena) const {
  CreepConfig* n = new CreepConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreepConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CreepConfig)
  if (_has_bits_[0 / 32] & 127u) {
    enabled_ = false;
    creep_distance_to_stop_line_ = 1;
    stop_distance_ = 0.5;
    speed_limit_ = 1;
    max_valid_stop_distance_ = 0.3;
    min_boundary_t_ = 6;
    min_boundary_s_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CreepConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CreepConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_creep_distance_to_stop_line;
        break;
      }

      // optional double creep_distance_to_stop_line = 2 [default = 1];
      case 2: {
        if (tag == 17) {
         parse_creep_distance_to_stop_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &creep_distance_to_stop_line_)));
          set_has_creep_distance_to_stop_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_stop_distance;
        break;
      }

      // optional double stop_distance = 3 [default = 0.5];
      case 3: {
        if (tag == 25) {
         parse_stop_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
          set_has_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed_limit;
        break;
      }

      // optional double speed_limit = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
          set_has_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max_valid_stop_distance;
        break;
      }

      // optional double max_valid_stop_distance = 5 [default = 0.3];
      case 5: {
        if (tag == 41) {
         parse_max_valid_stop_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
          set_has_max_valid_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min_boundary_t;
        break;
      }

      // optional double min_boundary_t = 6 [default = 6];
      case 6: {
        if (tag == 49) {
         parse_min_boundary_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_boundary_t_)));
          set_has_min_boundary_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_min_boundary_s;
        break;
      }

      // optional double min_boundary_s = 7 [default = 3];
      case 7: {
        if (tag == 57) {
         parse_min_boundary_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_boundary_s_)));
          set_has_min_boundary_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CreepConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CreepConfig)
  return false;
#undef DO_
}

void CreepConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CreepConfig)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double creep_distance_to_stop_line = 2 [default = 1];
  if (has_creep_distance_to_stop_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->creep_distance_to_stop_line(), output);
  }

  // optional double stop_distance = 3 [default = 0.5];
  if (has_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stop_distance(), output);
  }

  // optional double speed_limit = 4 [default = 1];
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_limit(), output);
  }

  // optional double max_valid_stop_distance = 5 [default = 0.3];
  if (has_max_valid_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_valid_stop_distance(), output);
  }

  // optional double min_boundary_t = 6 [default = 6];
  if (has_min_boundary_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_boundary_t(), output);
  }

  // optional double min_boundary_s = 7 [default = 3];
  if (has_min_boundary_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->min_boundary_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CreepConfig)
}

::google::protobuf::uint8* CreepConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CreepConfig)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double creep_distance_to_stop_line = 2 [default = 1];
  if (has_creep_distance_to_stop_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->creep_distance_to_stop_line(), target);
  }

  // optional double stop_distance = 3 [default = 0.5];
  if (has_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stop_distance(), target);
  }

  // optional double speed_limit = 4 [default = 1];
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_limit(), target);
  }

  // optional double max_valid_stop_distance = 5 [default = 0.3];
  if (has_max_valid_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_valid_stop_distance(), target);
  }

  // optional double min_boundary_t = 6 [default = 6];
  if (has_min_boundary_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_boundary_t(), target);
  }

  // optional double min_boundary_s = 7 [default = 3];
  if (has_min_boundary_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->min_boundary_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CreepConfig)
  return target;
}

int CreepConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CreepConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double creep_distance_to_stop_line = 2 [default = 1];
    if (has_creep_distance_to_stop_line()) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 3 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4 [default = 1];
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 5 [default = 0.3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_boundary_t = 6 [default = 6];
    if (has_min_boundary_t()) {
      total_size += 1 + 8;
    }

    // optional double min_boundary_s = 7 [default = 3];
    if (has_min_boundary_s()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreepConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CreepConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreepConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreepConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CreepConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CreepConfig)
    MergeFrom(*source);
  }
}

void CreepConfig::MergeFrom(const CreepConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CreepConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_creep_distance_to_stop_line()) {
      set_creep_distance_to_stop_line(from.creep_distance_to_stop_line());
    }
    if (from.has_stop_distance()) {
      set_stop_distance(from.stop_distance());
    }
    if (from.has_speed_limit()) {
      set_speed_limit(from.speed_limit());
    }
    if (from.has_max_valid_stop_distance()) {
      set_max_valid_stop_distance(from.max_valid_stop_distance());
    }
    if (from.has_min_boundary_t()) {
      set_min_boundary_t(from.min_boundary_t());
    }
    if (from.has_min_boundary_s()) {
      set_min_boundary_s(from.min_boundary_s());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CreepConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CreepConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreepConfig::CopyFrom(const CreepConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CreepConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreepConfig::IsInitialized() const {

  return true;
}

void CreepConfig::Swap(CreepConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreepConfig::InternalSwap(CreepConfig* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(creep_distance_to_stop_line_, other->creep_distance_to_stop_line_);
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  std::swap(min_boundary_t_, other->min_boundary_t_);
  std::swap(min_boundary_s_, other->min_boundary_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreepConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreepConfig_descriptor_;
  metadata.reflection = CreepConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreepConfig

// optional bool enabled = 1;
bool CreepConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreepConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CreepConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreepConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool CreepConfig::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepConfig.enabled)
  return enabled_;
}
 void CreepConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepConfig.enabled)
}

// optional double creep_distance_to_stop_line = 2 [default = 1];
bool CreepConfig::has_creep_distance_to_stop_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreepConfig::set_has_creep_distance_to_stop_line() {
  _has_bits_[0] |= 0x00000002u;
}
void CreepConfig::clear_has_creep_distance_to_stop_line() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreepConfig::clear_creep_distance_to_stop_line() {
  creep_distance_to_stop_line_ = 1;
  clear_has_creep_distance_to_stop_line();
}
 double CreepConfig::creep_distance_to_stop_line() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepConfig.creep_distance_to_stop_line)
  return creep_distance_to_stop_line_;
}
 void CreepConfig::set_creep_distance_to_stop_line(double value) {
  set_has_creep_distance_to_stop_line();
  creep_distance_to_stop_line_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepConfig.creep_distance_to_stop_line)
}

// optional double stop_distance = 3 [default = 0.5];
bool CreepConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreepConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void CreepConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreepConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
 double CreepConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepConfig.stop_distance)
  return stop_distance_;
}
 void CreepConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepConfig.stop_distance)
}

// optional double speed_limit = 4 [default = 1];
bool CreepConfig::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreepConfig::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void CreepConfig::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreepConfig::clear_speed_limit() {
  speed_limit_ = 1;
  clear_has_speed_limit();
}
 double CreepConfig::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepConfig.speed_limit)
  return speed_limit_;
}
 void CreepConfig::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepConfig.speed_limit)
}

// optional double max_valid_stop_distance = 5 [default = 0.3];
bool CreepConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreepConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void CreepConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreepConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.3;
  clear_has_max_valid_stop_distance();
}
 double CreepConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
 void CreepConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepConfig.max_valid_stop_distance)
}

// optional double min_boundary_t = 6 [default = 6];
bool CreepConfig::has_min_boundary_t() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreepConfig::set_has_min_boundary_t() {
  _has_bits_[0] |= 0x00000020u;
}
void CreepConfig::clear_has_min_boundary_t() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreepConfig::clear_min_boundary_t() {
  min_boundary_t_ = 6;
  clear_has_min_boundary_t();
}
 double CreepConfig::min_boundary_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepConfig.min_boundary_t)
  return min_boundary_t_;
}
 void CreepConfig::set_min_boundary_t(double value) {
  set_has_min_boundary_t();
  min_boundary_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepConfig.min_boundary_t)
}

// optional double min_boundary_s = 7 [default = 3];
bool CreepConfig::has_min_boundary_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CreepConfig::set_has_min_boundary_s() {
  _has_bits_[0] |= 0x00000040u;
}
void CreepConfig::clear_has_min_boundary_s() {
  _has_bits_[0] &= ~0x00000040u;
}
void CreepConfig::clear_min_boundary_s() {
  min_boundary_s_ = 3;
  clear_has_min_boundary_s();
}
 double CreepConfig::min_boundary_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepConfig.min_boundary_s)
  return min_boundary_s_;
}
 void CreepConfig::set_min_boundary_s(double value) {
  set_has_min_boundary_s();
  min_boundary_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepConfig.min_boundary_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrosswalkConfig::kStopDistanceFieldNumber;
const int CrosswalkConfig::kMaxStopDecelerationFieldNumber;
const int CrosswalkConfig::kMinPassSDistanceFieldNumber;
const int CrosswalkConfig::kMaxStopSpeedFieldNumber;
const int CrosswalkConfig::kMaxValidStopDistanceFieldNumber;
const int CrosswalkConfig::kExpandSDistanceFieldNumber;
const int CrosswalkConfig::kStopStrickLDistanceFieldNumber;
const int CrosswalkConfig::kStopLooseLDistanceFieldNumber;
const int CrosswalkConfig::kStopTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrosswalkConfig::CrosswalkConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CrosswalkConfig)
}

void CrosswalkConfig::InitAsDefaultInstance() {
}

CrosswalkConfig::CrosswalkConfig(const CrosswalkConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkConfig)
}

void CrosswalkConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
  min_pass_s_distance_ = 1;
  max_stop_speed_ = 0.3;
  max_valid_stop_distance_ = 3;
  expand_s_distance_ = 2;
  stop_strick_l_distance_ = 4;
  stop_loose_l_distance_ = 5;
  stop_timeout_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrosswalkConfig::~CrosswalkConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkConfig)
  SharedDtor();
}

void CrosswalkConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrosswalkConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrosswalkConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrosswalkConfig_descriptor_;
}

const CrosswalkConfig& CrosswalkConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

CrosswalkConfig* CrosswalkConfig::default_instance_ = NULL;

CrosswalkConfig* CrosswalkConfig::New(::google::protobuf::Arena* arena) const {
  CrosswalkConfig* n = new CrosswalkConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrosswalkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkConfig)
  if (_has_bits_[0 / 32] & 255u) {
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
    min_pass_s_distance_ = 1;
    max_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 3;
    expand_s_distance_ = 2;
    stop_strick_l_distance_ = 4;
    stop_loose_l_distance_ = 5;
  }
  stop_timeout_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CrosswalkConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CrosswalkConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
          set_has_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max_stop_deceleration;
        break;
      }

      // optional double max_stop_deceleration = 2 [default = 4];
      case 2: {
        if (tag == 17) {
         parse_max_stop_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
          set_has_max_stop_deceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_min_pass_s_distance;
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 1];
      case 3: {
        if (tag == 25) {
         parse_min_pass_s_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
          set_has_min_pass_s_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_stop_speed;
        break;
      }

      // optional double max_stop_speed = 4 [default = 0.3];
      case 4: {
        if (tag == 33) {
         parse_max_stop_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_speed_)));
          set_has_max_stop_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max_valid_stop_distance;
        break;
      }

      // optional double max_valid_stop_distance = 5 [default = 3];
      case 5: {
        if (tag == 41) {
         parse_max_valid_stop_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
          set_has_max_valid_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_expand_s_distance;
        break;
      }

      // optional double expand_s_distance = 6 [default = 2];
      case 6: {
        if (tag == 49) {
         parse_expand_s_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expand_s_distance_)));
          set_has_expand_s_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_stop_strick_l_distance;
        break;
      }

      // optional double stop_strick_l_distance = 7 [default = 4];
      case 7: {
        if (tag == 57) {
         parse_stop_strick_l_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_strick_l_distance_)));
          set_has_stop_strick_l_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_stop_loose_l_distance;
        break;
      }

      // optional double stop_loose_l_distance = 8 [default = 5];
      case 8: {
        if (tag == 65) {
         parse_stop_loose_l_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_loose_l_distance_)));
          set_has_stop_loose_l_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_stop_timeout;
        break;
      }

      // optional double stop_timeout = 9 [default = 10];
      case 9: {
        if (tag == 73) {
         parse_stop_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_timeout_)));
          set_has_stop_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CrosswalkConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CrosswalkConfig)
  return false;
#undef DO_
}

void CrosswalkConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CrosswalkConfig)
  // optional double stop_distance = 1 [default = 1];
  if (has_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (has_max_stop_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_stop_deceleration(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (has_min_pass_s_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional double max_stop_speed = 4 [default = 0.3];
  if (has_max_stop_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_stop_speed(), output);
  }

  // optional double max_valid_stop_distance = 5 [default = 3];
  if (has_max_valid_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_valid_stop_distance(), output);
  }

  // optional double expand_s_distance = 6 [default = 2];
  if (has_expand_s_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->expand_s_distance(), output);
  }

  // optional double stop_strick_l_distance = 7 [default = 4];
  if (has_stop_strick_l_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stop_strick_l_distance(), output);
  }

  // optional double stop_loose_l_distance = 8 [default = 5];
  if (has_stop_loose_l_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->stop_loose_l_distance(), output);
  }

  // optional double stop_timeout = 9 [default = 10];
  if (has_stop_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->stop_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CrosswalkConfig)
}

::google::protobuf::uint8* CrosswalkConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkConfig)
  // optional double stop_distance = 1 [default = 1];
  if (has_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (has_max_stop_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_stop_deceleration(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (has_min_pass_s_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional double max_stop_speed = 4 [default = 0.3];
  if (has_max_stop_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 5 [default = 3];
  if (has_max_valid_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_valid_stop_distance(), target);
  }

  // optional double expand_s_distance = 6 [default = 2];
  if (has_expand_s_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->expand_s_distance(), target);
  }

  // optional double stop_strick_l_distance = 7 [default = 4];
  if (has_stop_strick_l_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stop_strick_l_distance(), target);
  }

  // optional double stop_loose_l_distance = 8 [default = 5];
  if (has_stop_loose_l_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->stop_loose_l_distance(), target);
  }

  // optional double stop_timeout = 9 [default = 10];
  if (has_stop_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->stop_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkConfig)
  return target;
}

int CrosswalkConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double stop_distance = 1 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 2 [default = 4];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 1];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_speed = 4 [default = 0.3];
    if (has_max_stop_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 5 [default = 3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double expand_s_distance = 6 [default = 2];
    if (has_expand_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_strick_l_distance = 7 [default = 4];
    if (has_stop_strick_l_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_loose_l_distance = 8 [default = 5];
    if (has_stop_loose_l_distance()) {
      total_size += 1 + 8;
    }

  }
  // optional double stop_timeout = 9 [default = 10];
  if (has_stop_timeout()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrosswalkConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CrosswalkConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CrosswalkConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CrosswalkConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CrosswalkConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CrosswalkConfig)
    MergeFrom(*source);
  }
}

void CrosswalkConfig::MergeFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_distance()) {
      set_stop_distance(from.stop_distance());
    }
    if (from.has_max_stop_deceleration()) {
      set_max_stop_deceleration(from.max_stop_deceleration());
    }
    if (from.has_min_pass_s_distance()) {
      set_min_pass_s_distance(from.min_pass_s_distance());
    }
    if (from.has_max_stop_speed()) {
      set_max_stop_speed(from.max_stop_speed());
    }
    if (from.has_max_valid_stop_distance()) {
      set_max_valid_stop_distance(from.max_valid_stop_distance());
    }
    if (from.has_expand_s_distance()) {
      set_expand_s_distance(from.expand_s_distance());
    }
    if (from.has_stop_strick_l_distance()) {
      set_stop_strick_l_distance(from.stop_strick_l_distance());
    }
    if (from.has_stop_loose_l_distance()) {
      set_stop_loose_l_distance(from.stop_loose_l_distance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stop_timeout()) {
      set_stop_timeout(from.stop_timeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CrosswalkConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkConfig::CopyFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkConfig::IsInitialized() const {

  return true;
}

void CrosswalkConfig::Swap(CrosswalkConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrosswalkConfig::InternalSwap(CrosswalkConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(max_stop_deceleration_, other->max_stop_deceleration_);
  std::swap(min_pass_s_distance_, other->min_pass_s_distance_);
  std::swap(max_stop_speed_, other->max_stop_speed_);
  std::swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  std::swap(expand_s_distance_, other->expand_s_distance_);
  std::swap(stop_strick_l_distance_, other->stop_strick_l_distance_);
  std::swap(stop_loose_l_distance_, other->stop_loose_l_distance_);
  std::swap(stop_timeout_, other->stop_timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrosswalkConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrosswalkConfig_descriptor_;
  metadata.reflection = CrosswalkConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrosswalkConfig

// optional double stop_distance = 1 [default = 1];
bool CrosswalkConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrosswalkConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void CrosswalkConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrosswalkConfig::clear_stop_distance() {
  stop_distance_ = 1;
  clear_has_stop_distance();
}
 double CrosswalkConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.stop_distance)
  return stop_distance_;
}
 void CrosswalkConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.stop_distance)
}

// optional double max_stop_deceleration = 2 [default = 4];
bool CrosswalkConfig::has_max_stop_deceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrosswalkConfig::set_has_max_stop_deceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void CrosswalkConfig::clear_has_max_stop_deceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrosswalkConfig::clear_max_stop_deceleration() {
  max_stop_deceleration_ = 4;
  clear_has_max_stop_deceleration();
}
 double CrosswalkConfig::max_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.max_stop_deceleration)
  return max_stop_deceleration_;
}
 void CrosswalkConfig::set_max_stop_deceleration(double value) {
  set_has_max_stop_deceleration();
  max_stop_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.max_stop_deceleration)
}

// optional double min_pass_s_distance = 3 [default = 1];
bool CrosswalkConfig::has_min_pass_s_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CrosswalkConfig::set_has_min_pass_s_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void CrosswalkConfig::clear_has_min_pass_s_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void CrosswalkConfig::clear_min_pass_s_distance() {
  min_pass_s_distance_ = 1;
  clear_has_min_pass_s_distance();
}
 double CrosswalkConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.min_pass_s_distance)
  return min_pass_s_distance_;
}
 void CrosswalkConfig::set_min_pass_s_distance(double value) {
  set_has_min_pass_s_distance();
  min_pass_s_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.min_pass_s_distance)
}

// optional double max_stop_speed = 4 [default = 0.3];
bool CrosswalkConfig::has_max_stop_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CrosswalkConfig::set_has_max_stop_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void CrosswalkConfig::clear_has_max_stop_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CrosswalkConfig::clear_max_stop_speed() {
  max_stop_speed_ = 0.3;
  clear_has_max_stop_speed();
}
 double CrosswalkConfig::max_stop_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.max_stop_speed)
  return max_stop_speed_;
}
 void CrosswalkConfig::set_max_stop_speed(double value) {
  set_has_max_stop_speed();
  max_stop_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.max_stop_speed)
}

// optional double max_valid_stop_distance = 5 [default = 3];
bool CrosswalkConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CrosswalkConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void CrosswalkConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void CrosswalkConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 3;
  clear_has_max_valid_stop_distance();
}
 double CrosswalkConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
 void CrosswalkConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.max_valid_stop_distance)
}

// optional double expand_s_distance = 6 [default = 2];
bool CrosswalkConfig::has_expand_s_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CrosswalkConfig::set_has_expand_s_distance() {
  _has_bits_[0] |= 0x00000020u;
}
void CrosswalkConfig::clear_has_expand_s_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
void CrosswalkConfig::clear_expand_s_distance() {
  expand_s_distance_ = 2;
  clear_has_expand_s_distance();
}
 double CrosswalkConfig::expand_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.expand_s_distance)
  return expand_s_distance_;
}
 void CrosswalkConfig::set_expand_s_distance(double value) {
  set_has_expand_s_distance();
  expand_s_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.expand_s_distance)
}

// optional double stop_strick_l_distance = 7 [default = 4];
bool CrosswalkConfig::has_stop_strick_l_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CrosswalkConfig::set_has_stop_strick_l_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void CrosswalkConfig::clear_has_stop_strick_l_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void CrosswalkConfig::clear_stop_strick_l_distance() {
  stop_strick_l_distance_ = 4;
  clear_has_stop_strick_l_distance();
}
 double CrosswalkConfig::stop_strick_l_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.stop_strick_l_distance)
  return stop_strick_l_distance_;
}
 void CrosswalkConfig::set_stop_strick_l_distance(double value) {
  set_has_stop_strick_l_distance();
  stop_strick_l_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.stop_strick_l_distance)
}

// optional double stop_loose_l_distance = 8 [default = 5];
bool CrosswalkConfig::has_stop_loose_l_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CrosswalkConfig::set_has_stop_loose_l_distance() {
  _has_bits_[0] |= 0x00000080u;
}
void CrosswalkConfig::clear_has_stop_loose_l_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
void CrosswalkConfig::clear_stop_loose_l_distance() {
  stop_loose_l_distance_ = 5;
  clear_has_stop_loose_l_distance();
}
 double CrosswalkConfig::stop_loose_l_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.stop_loose_l_distance)
  return stop_loose_l_distance_;
}
 void CrosswalkConfig::set_stop_loose_l_distance(double value) {
  set_has_stop_loose_l_distance();
  stop_loose_l_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.stop_loose_l_distance)
}

// optional double stop_timeout = 9 [default = 10];
bool CrosswalkConfig::has_stop_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CrosswalkConfig::set_has_stop_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
void CrosswalkConfig::clear_has_stop_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
void CrosswalkConfig::clear_stop_timeout() {
  stop_timeout_ = 10;
  clear_has_stop_timeout();
}
 double CrosswalkConfig::stop_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CrosswalkConfig.stop_timeout)
  return stop_timeout_;
}
 void CrosswalkConfig::set_stop_timeout(double value) {
  set_has_stop_timeout();
  stop_timeout_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CrosswalkConfig.stop_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestinationConfig::kEnablePullOverFieldNumber;
const int DestinationConfig::kStopDistanceFieldNumber;
const int DestinationConfig::kPullOverPlanDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestinationConfig::DestinationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DestinationConfig)
}

void DestinationConfig::InitAsDefaultInstance() {
}

DestinationConfig::DestinationConfig(const DestinationConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DestinationConfig)
}

void DestinationConfig::SharedCtor() {
  _cached_size_ = 0;
  enable_pull_over_ = false;
  stop_distance_ = 0.5;
  pull_over_plan_distance_ = 35;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestinationConfig::~DestinationConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DestinationConfig)
  SharedDtor();
}

void DestinationConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestinationConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestinationConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestinationConfig_descriptor_;
}

const DestinationConfig& DestinationConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

DestinationConfig* DestinationConfig::default_instance_ = NULL;

DestinationConfig* DestinationConfig::New(::google::protobuf::Arena* arena) const {
  DestinationConfig* n = new DestinationConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestinationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DestinationConfig)
  if (_has_bits_[0 / 32] & 7u) {
    enable_pull_over_ = false;
    stop_distance_ = 0.5;
    pull_over_plan_distance_ = 35;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DestinationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DestinationConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_pull_over = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_pull_over_)));
          set_has_enable_pull_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_stop_distance;
        break;
      }

      // optional double stop_distance = 2 [default = 0.5];
      case 2: {
        if (tag == 17) {
         parse_stop_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
          set_has_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_pull_over_plan_distance;
        break;
      }

      // optional double pull_over_plan_distance = 3 [default = 35];
      case 3: {
        if (tag == 25) {
         parse_pull_over_plan_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_plan_distance_)));
          set_has_pull_over_plan_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DestinationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DestinationConfig)
  return false;
#undef DO_
}

void DestinationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DestinationConfig)
  // optional bool enable_pull_over = 1 [default = false];
  if (has_enable_pull_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_pull_over(), output);
  }

  // optional double stop_distance = 2 [default = 0.5];
  if (has_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  // optional double pull_over_plan_distance = 3 [default = 35];
  if (has_pull_over_plan_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pull_over_plan_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DestinationConfig)
}

::google::protobuf::uint8* DestinationConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DestinationConfig)
  // optional bool enable_pull_over = 1 [default = false];
  if (has_enable_pull_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_pull_over(), target);
  }

  // optional double stop_distance = 2 [default = 0.5];
  if (has_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  // optional double pull_over_plan_distance = 3 [default = 35];
  if (has_pull_over_plan_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pull_over_plan_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DestinationConfig)
  return target;
}

int DestinationConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DestinationConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool enable_pull_over = 1 [default = false];
    if (has_enable_pull_over()) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_plan_distance = 3 [default = 35];
    if (has_pull_over_plan_distance()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestinationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DestinationConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DestinationConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DestinationConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DestinationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DestinationConfig)
    MergeFrom(*source);
  }
}

void DestinationConfig::MergeFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DestinationConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_pull_over()) {
      set_enable_pull_over(from.enable_pull_over());
    }
    if (from.has_stop_distance()) {
      set_stop_distance(from.stop_distance());
    }
    if (from.has_pull_over_plan_distance()) {
      set_pull_over_plan_distance(from.pull_over_plan_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DestinationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationConfig::CopyFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationConfig::IsInitialized() const {

  return true;
}

void DestinationConfig::Swap(DestinationConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestinationConfig::InternalSwap(DestinationConfig* other) {
  std::swap(enable_pull_over_, other->enable_pull_over_);
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(pull_over_plan_distance_, other->pull_over_plan_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestinationConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestinationConfig_descriptor_;
  metadata.reflection = DestinationConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestinationConfig

// optional bool enable_pull_over = 1 [default = false];
bool DestinationConfig::has_enable_pull_over() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DestinationConfig::set_has_enable_pull_over() {
  _has_bits_[0] |= 0x00000001u;
}
void DestinationConfig::clear_has_enable_pull_over() {
  _has_bits_[0] &= ~0x00000001u;
}
void DestinationConfig::clear_enable_pull_over() {
  enable_pull_over_ = false;
  clear_has_enable_pull_over();
}
 bool DestinationConfig::enable_pull_over() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DestinationConfig.enable_pull_over)
  return enable_pull_over_;
}
 void DestinationConfig::set_enable_pull_over(bool value) {
  set_has_enable_pull_over();
  enable_pull_over_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DestinationConfig.enable_pull_over)
}

// optional double stop_distance = 2 [default = 0.5];
bool DestinationConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DestinationConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void DestinationConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void DestinationConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
 double DestinationConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DestinationConfig.stop_distance)
  return stop_distance_;
}
 void DestinationConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DestinationConfig.stop_distance)
}

// optional double pull_over_plan_distance = 3 [default = 35];
bool DestinationConfig::has_pull_over_plan_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DestinationConfig::set_has_pull_over_plan_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void DestinationConfig::clear_has_pull_over_plan_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void DestinationConfig::clear_pull_over_plan_distance() {
  pull_over_plan_distance_ = 35;
  clear_has_pull_over_plan_distance();
}
 double DestinationConfig::pull_over_plan_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DestinationConfig.pull_over_plan_distance)
  return pull_over_plan_distance_;
}
 void DestinationConfig::set_pull_over_plan_distance(double value) {
  set_has_pull_over_plan_distance();
  pull_over_plan_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DestinationConfig.pull_over_plan_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrontVehicleConfig::kEnableSidePassFieldNumber;
const int FrontVehicleConfig::kSidePassSThresholdFieldNumber;
const int FrontVehicleConfig::kSidePassLThresholdFieldNumber;
const int FrontVehicleConfig::kSidePassWaitTimeFieldNumber;
const int FrontVehicleConfig::kNudgeLBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrontVehicleConfig::FrontVehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.FrontVehicleConfig)
}

void FrontVehicleConfig::InitAsDefaultInstance() {
}

FrontVehicleConfig::FrontVehicleConfig(const FrontVehicleConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.FrontVehicleConfig)
}

void FrontVehicleConfig::SharedCtor() {
  _cached_size_ = 0;
  enable_side_pass_ = true;
  side_pass_s_threshold_ = 15;
  side_pass_l_threshold_ = 1;
  side_pass_wait_time_ = 30;
  nudge_l_buffer_ = 0.5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrontVehicleConfig::~FrontVehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.FrontVehicleConfig)
  SharedDtor();
}

void FrontVehicleConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrontVehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrontVehicleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrontVehicleConfig_descriptor_;
}

const FrontVehicleConfig& FrontVehicleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

FrontVehicleConfig* FrontVehicleConfig::default_instance_ = NULL;

FrontVehicleConfig* FrontVehicleConfig::New(::google::protobuf::Arena* arena) const {
  FrontVehicleConfig* n = new FrontVehicleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrontVehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.FrontVehicleConfig)
  if (_has_bits_[0 / 32] & 31u) {
    enable_side_pass_ = true;
    side_pass_s_threshold_ = 15;
    side_pass_l_threshold_ = 1;
    side_pass_wait_time_ = 30;
    nudge_l_buffer_ = 0.5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FrontVehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.FrontVehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_side_pass = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_side_pass_)));
          set_has_enable_side_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_side_pass_s_threshold;
        break;
      }

      // optional double side_pass_s_threshold = 2 [default = 15];
      case 2: {
        if (tag == 17) {
         parse_side_pass_s_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &side_pass_s_threshold_)));
          set_has_side_pass_s_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_side_pass_l_threshold;
        break;
      }

      // optional double side_pass_l_threshold = 3 [default = 1];
      case 3: {
        if (tag == 25) {
         parse_side_pass_l_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &side_pass_l_threshold_)));
          set_has_side_pass_l_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_side_pass_wait_time;
        break;
      }

      // optional double side_pass_wait_time = 4 [default = 30];
      case 4: {
        if (tag == 33) {
         parse_side_pass_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &side_pass_wait_time_)));
          set_has_side_pass_wait_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_nudge_l_buffer;
        break;
      }

      // optional double nudge_l_buffer = 5 [default = 0.5];
      case 5: {
        if (tag == 41) {
         parse_nudge_l_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nudge_l_buffer_)));
          set_has_nudge_l_buffer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.FrontVehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.FrontVehicleConfig)
  return false;
#undef DO_
}

void FrontVehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.FrontVehicleConfig)
  // optional bool enable_side_pass = 1 [default = true];
  if (has_enable_side_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_side_pass(), output);
  }

  // optional double side_pass_s_threshold = 2 [default = 15];
  if (has_side_pass_s_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->side_pass_s_threshold(), output);
  }

  // optional double side_pass_l_threshold = 3 [default = 1];
  if (has_side_pass_l_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->side_pass_l_threshold(), output);
  }

  // optional double side_pass_wait_time = 4 [default = 30];
  if (has_side_pass_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->side_pass_wait_time(), output);
  }

  // optional double nudge_l_buffer = 5 [default = 0.5];
  if (has_nudge_l_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->nudge_l_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.FrontVehicleConfig)
}

::google::protobuf::uint8* FrontVehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.FrontVehicleConfig)
  // optional bool enable_side_pass = 1 [default = true];
  if (has_enable_side_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_side_pass(), target);
  }

  // optional double side_pass_s_threshold = 2 [default = 15];
  if (has_side_pass_s_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->side_pass_s_threshold(), target);
  }

  // optional double side_pass_l_threshold = 3 [default = 1];
  if (has_side_pass_l_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->side_pass_l_threshold(), target);
  }

  // optional double side_pass_wait_time = 4 [default = 30];
  if (has_side_pass_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->side_pass_wait_time(), target);
  }

  // optional double nudge_l_buffer = 5 [default = 0.5];
  if (has_nudge_l_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->nudge_l_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.FrontVehicleConfig)
  return target;
}

int FrontVehicleConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.FrontVehicleConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool enable_side_pass = 1 [default = true];
    if (has_enable_side_pass()) {
      total_size += 1 + 1;
    }

    // optional double side_pass_s_threshold = 2 [default = 15];
    if (has_side_pass_s_threshold()) {
      total_size += 1 + 8;
    }

    // optional double side_pass_l_threshold = 3 [default = 1];
    if (has_side_pass_l_threshold()) {
      total_size += 1 + 8;
    }

    // optional double side_pass_wait_time = 4 [default = 30];
    if (has_side_pass_wait_time()) {
      total_size += 1 + 8;
    }

    // optional double nudge_l_buffer = 5 [default = 0.5];
    if (has_nudge_l_buffer()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrontVehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.FrontVehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FrontVehicleConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FrontVehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.FrontVehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.FrontVehicleConfig)
    MergeFrom(*source);
  }
}

void FrontVehicleConfig::MergeFrom(const FrontVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.FrontVehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_side_pass()) {
      set_enable_side_pass(from.enable_side_pass());
    }
    if (from.has_side_pass_s_threshold()) {
      set_side_pass_s_threshold(from.side_pass_s_threshold());
    }
    if (from.has_side_pass_l_threshold()) {
      set_side_pass_l_threshold(from.side_pass_l_threshold());
    }
    if (from.has_side_pass_wait_time()) {
      set_side_pass_wait_time(from.side_pass_wait_time());
    }
    if (from.has_nudge_l_buffer()) {
      set_nudge_l_buffer(from.nudge_l_buffer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FrontVehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.FrontVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrontVehicleConfig::CopyFrom(const FrontVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.FrontVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrontVehicleConfig::IsInitialized() const {

  return true;
}

void FrontVehicleConfig::Swap(FrontVehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrontVehicleConfig::InternalSwap(FrontVehicleConfig* other) {
  std::swap(enable_side_pass_, other->enable_side_pass_);
  std::swap(side_pass_s_threshold_, other->side_pass_s_threshold_);
  std::swap(side_pass_l_threshold_, other->side_pass_l_threshold_);
  std::swap(side_pass_wait_time_, other->side_pass_wait_time_);
  std::swap(nudge_l_buffer_, other->nudge_l_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrontVehicleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrontVehicleConfig_descriptor_;
  metadata.reflection = FrontVehicleConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrontVehicleConfig

// optional bool enable_side_pass = 1 [default = true];
bool FrontVehicleConfig::has_enable_side_pass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrontVehicleConfig::set_has_enable_side_pass() {
  _has_bits_[0] |= 0x00000001u;
}
void FrontVehicleConfig::clear_has_enable_side_pass() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrontVehicleConfig::clear_enable_side_pass() {
  enable_side_pass_ = true;
  clear_has_enable_side_pass();
}
 bool FrontVehicleConfig::enable_side_pass() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FrontVehicleConfig.enable_side_pass)
  return enable_side_pass_;
}
 void FrontVehicleConfig::set_enable_side_pass(bool value) {
  set_has_enable_side_pass();
  enable_side_pass_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FrontVehicleConfig.enable_side_pass)
}

// optional double side_pass_s_threshold = 2 [default = 15];
bool FrontVehicleConfig::has_side_pass_s_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrontVehicleConfig::set_has_side_pass_s_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void FrontVehicleConfig::clear_has_side_pass_s_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrontVehicleConfig::clear_side_pass_s_threshold() {
  side_pass_s_threshold_ = 15;
  clear_has_side_pass_s_threshold();
}
 double FrontVehicleConfig::side_pass_s_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FrontVehicleConfig.side_pass_s_threshold)
  return side_pass_s_threshold_;
}
 void FrontVehicleConfig::set_side_pass_s_threshold(double value) {
  set_has_side_pass_s_threshold();
  side_pass_s_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FrontVehicleConfig.side_pass_s_threshold)
}

// optional double side_pass_l_threshold = 3 [default = 1];
bool FrontVehicleConfig::has_side_pass_l_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrontVehicleConfig::set_has_side_pass_l_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void FrontVehicleConfig::clear_has_side_pass_l_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrontVehicleConfig::clear_side_pass_l_threshold() {
  side_pass_l_threshold_ = 1;
  clear_has_side_pass_l_threshold();
}
 double FrontVehicleConfig::side_pass_l_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FrontVehicleConfig.side_pass_l_threshold)
  return side_pass_l_threshold_;
}
 void FrontVehicleConfig::set_side_pass_l_threshold(double value) {
  set_has_side_pass_l_threshold();
  side_pass_l_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FrontVehicleConfig.side_pass_l_threshold)
}

// optional double side_pass_wait_time = 4 [default = 30];
bool FrontVehicleConfig::has_side_pass_wait_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrontVehicleConfig::set_has_side_pass_wait_time() {
  _has_bits_[0] |= 0x00000008u;
}
void FrontVehicleConfig::clear_has_side_pass_wait_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrontVehicleConfig::clear_side_pass_wait_time() {
  side_pass_wait_time_ = 30;
  clear_has_side_pass_wait_time();
}
 double FrontVehicleConfig::side_pass_wait_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FrontVehicleConfig.side_pass_wait_time)
  return side_pass_wait_time_;
}
 void FrontVehicleConfig::set_side_pass_wait_time(double value) {
  set_has_side_pass_wait_time();
  side_pass_wait_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FrontVehicleConfig.side_pass_wait_time)
}

// optional double nudge_l_buffer = 5 [default = 0.5];
bool FrontVehicleConfig::has_nudge_l_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FrontVehicleConfig::set_has_nudge_l_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
void FrontVehicleConfig::clear_has_nudge_l_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
void FrontVehicleConfig::clear_nudge_l_buffer() {
  nudge_l_buffer_ = 0.5;
  clear_has_nudge_l_buffer();
}
 double FrontVehicleConfig::nudge_l_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FrontVehicleConfig.nudge_l_buffer)
  return nudge_l_buffer_;
}
 void FrontVehicleConfig::set_nudge_l_buffer(double value) {
  set_has_nudge_l_buffer();
  nudge_l_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FrontVehicleConfig.nudge_l_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepClearConfig::kEnableKeepClearZoneFieldNumber;
const int KeepClearConfig::kEnableJunctionFieldNumber;
const int KeepClearConfig::kMinPassSDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepClearConfig::KeepClearConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.KeepClearConfig)
}

void KeepClearConfig::InitAsDefaultInstance() {
}

KeepClearConfig::KeepClearConfig(const KeepClearConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.KeepClearConfig)
}

void KeepClearConfig::SharedCtor() {
  _cached_size_ = 0;
  enable_keep_clear_zone_ = true;
  enable_junction_ = true;
  min_pass_s_distance_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepClearConfig::~KeepClearConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.KeepClearConfig)
  SharedDtor();
}

void KeepClearConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepClearConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepClearConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepClearConfig_descriptor_;
}

const KeepClearConfig& KeepClearConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

KeepClearConfig* KeepClearConfig::default_instance_ = NULL;

KeepClearConfig* KeepClearConfig::New(::google::protobuf::Arena* arena) const {
  KeepClearConfig* n = new KeepClearConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepClearConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.KeepClearConfig)
  if (_has_bits_[0 / 32] & 7u) {
    enable_keep_clear_zone_ = true;
    enable_junction_ = true;
    min_pass_s_distance_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeepClearConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.KeepClearConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_keep_clear_zone = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_keep_clear_zone_)));
          set_has_enable_keep_clear_zone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enable_junction;
        break;
      }

      // optional bool enable_junction = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_enable_junction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_junction_)));
          set_has_enable_junction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_min_pass_s_distance;
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 2];
      case 3: {
        if (tag == 25) {
         parse_min_pass_s_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
          set_has_min_pass_s_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.KeepClearConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.KeepClearConfig)
  return false;
#undef DO_
}

void KeepClearConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.KeepClearConfig)
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (has_enable_keep_clear_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_keep_clear_zone(), output);
  }

  // optional bool enable_junction = 2 [default = true];
  if (has_enable_junction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_junction(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (has_min_pass_s_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.KeepClearConfig)
}

::google::protobuf::uint8* KeepClearConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.KeepClearConfig)
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (has_enable_keep_clear_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_keep_clear_zone(), target);
  }

  // optional bool enable_junction = 2 [default = true];
  if (has_enable_junction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_junction(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (has_min_pass_s_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.KeepClearConfig)
  return target;
}

int KeepClearConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.KeepClearConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool enable_keep_clear_zone = 1 [default = true];
    if (has_enable_keep_clear_zone()) {
      total_size += 1 + 1;
    }

    // optional bool enable_junction = 2 [default = true];
    if (has_enable_junction()) {
      total_size += 1 + 1;
    }

    // optional double min_pass_s_distance = 3 [default = 2];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepClearConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.KeepClearConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeepClearConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepClearConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.KeepClearConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.KeepClearConfig)
    MergeFrom(*source);
  }
}

void KeepClearConfig::MergeFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.KeepClearConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_keep_clear_zone()) {
      set_enable_keep_clear_zone(from.enable_keep_clear_zone());
    }
    if (from.has_enable_junction()) {
      set_enable_junction(from.enable_junction());
    }
    if (from.has_min_pass_s_distance()) {
      set_min_pass_s_distance(from.min_pass_s_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeepClearConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepClearConfig::CopyFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepClearConfig::IsInitialized() const {

  return true;
}

void KeepClearConfig::Swap(KeepClearConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepClearConfig::InternalSwap(KeepClearConfig* other) {
  std::swap(enable_keep_clear_zone_, other->enable_keep_clear_zone_);
  std::swap(enable_junction_, other->enable_junction_);
  std::swap(min_pass_s_distance_, other->min_pass_s_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepClearConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepClearConfig_descriptor_;
  metadata.reflection = KeepClearConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepClearConfig

// optional bool enable_keep_clear_zone = 1 [default = true];
bool KeepClearConfig::has_enable_keep_clear_zone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepClearConfig::set_has_enable_keep_clear_zone() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepClearConfig::clear_has_enable_keep_clear_zone() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepClearConfig::clear_enable_keep_clear_zone() {
  enable_keep_clear_zone_ = true;
  clear_has_enable_keep_clear_zone();
}
 bool KeepClearConfig::enable_keep_clear_zone() const {
  // @@protoc_insertion_point(field_get:apollo.planning.KeepClearConfig.enable_keep_clear_zone)
  return enable_keep_clear_zone_;
}
 void KeepClearConfig::set_enable_keep_clear_zone(bool value) {
  set_has_enable_keep_clear_zone();
  enable_keep_clear_zone_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.KeepClearConfig.enable_keep_clear_zone)
}

// optional bool enable_junction = 2 [default = true];
bool KeepClearConfig::has_enable_junction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepClearConfig::set_has_enable_junction() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepClearConfig::clear_has_enable_junction() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepClearConfig::clear_enable_junction() {
  enable_junction_ = true;
  clear_has_enable_junction();
}
 bool KeepClearConfig::enable_junction() const {
  // @@protoc_insertion_point(field_get:apollo.planning.KeepClearConfig.enable_junction)
  return enable_junction_;
}
 void KeepClearConfig::set_enable_junction(bool value) {
  set_has_enable_junction();
  enable_junction_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.KeepClearConfig.enable_junction)
}

// optional double min_pass_s_distance = 3 [default = 2];
bool KeepClearConfig::has_min_pass_s_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeepClearConfig::set_has_min_pass_s_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void KeepClearConfig::clear_has_min_pass_s_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeepClearConfig::clear_min_pass_s_distance() {
  min_pass_s_distance_ = 2;
  clear_has_min_pass_s_distance();
}
 double KeepClearConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.KeepClearConfig.min_pass_s_distance)
  return min_pass_s_distance_;
}
 void KeepClearConfig::set_min_pass_s_distance(double value) {
  set_has_min_pass_s_distance();
  min_pass_s_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.KeepClearConfig.min_pass_s_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullOverConfig::kStopDistanceFieldNumber;
const int PullOverConfig::kMaxStopSpeedFieldNumber;
const int PullOverConfig::kMaxValidStopDistanceFieldNumber;
const int PullOverConfig::kMaxStopDecelerationFieldNumber;
const int PullOverConfig::kMinPassSDistanceFieldNumber;
const int PullOverConfig::kBufferToBoundaryFieldNumber;
const int PullOverConfig::kPlanDistanceFieldNumber;
const int PullOverConfig::kOperationLengthFieldNumber;
const int PullOverConfig::kMaxCheckDistanceFieldNumber;
const int PullOverConfig::kMaxFailureCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullOverConfig::PullOverConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PullOverConfig)
}

void PullOverConfig::InitAsDefaultInstance() {
}

PullOverConfig::PullOverConfig(const PullOverConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PullOverConfig)
}

void PullOverConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 0.5;
  max_stop_speed_ = 0.3;
  max_valid_stop_distance_ = 3;
  max_stop_deceleration_ = 2.5;
  min_pass_s_distance_ = 1;
  buffer_to_boundary_ = 0.5;
  plan_distance_ = 35;
  operation_length_ = 30;
  max_check_distance_ = 60;
  max_failure_count_ = 10u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullOverConfig::~PullOverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PullOverConfig)
  SharedDtor();
}

void PullOverConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PullOverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullOverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullOverConfig_descriptor_;
}

const PullOverConfig& PullOverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

PullOverConfig* PullOverConfig::default_instance_ = NULL;

PullOverConfig* PullOverConfig::New(::google::protobuf::Arena* arena) const {
  PullOverConfig* n = new PullOverConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PullOverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PullOverConfig)
  if (_has_bits_[0 / 32] & 255u) {
    stop_distance_ = 0.5;
    max_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 3;
    max_stop_deceleration_ = 2.5;
    min_pass_s_distance_ = 1;
    buffer_to_boundary_ = 0.5;
    plan_distance_ = 35;
    operation_length_ = 30;
  }
  if (_has_bits_[8 / 32] & 768u) {
    max_check_distance_ = 60;
    max_failure_count_ = 10u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PullOverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PullOverConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
          set_has_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max_stop_speed;
        break;
      }

      // optional double max_stop_speed = 2 [default = 0.3];
      case 2: {
        if (tag == 17) {
         parse_max_stop_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_speed_)));
          set_has_max_stop_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_valid_stop_distance;
        break;
      }

      // optional double max_valid_stop_distance = 3 [default = 3];
      case 3: {
        if (tag == 25) {
         parse_max_valid_stop_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
          set_has_max_valid_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_stop_deceleration;
        break;
      }

      // optional double max_stop_deceleration = 4 [default = 2.5];
      case 4: {
        if (tag == 33) {
         parse_max_stop_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
          set_has_max_stop_deceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_min_pass_s_distance;
        break;
      }

      // optional double min_pass_s_distance = 5 [default = 1];
      case 5: {
        if (tag == 41) {
         parse_min_pass_s_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
          set_has_min_pass_s_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_buffer_to_boundary;
        break;
      }

      // optional double buffer_to_boundary = 6 [default = 0.5];
      case 6: {
        if (tag == 49) {
         parse_buffer_to_boundary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buffer_to_boundary_)));
          set_has_buffer_to_boundary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_plan_distance;
        break;
      }

      // optional double plan_distance = 7 [default = 35];
      case 7: {
        if (tag == 57) {
         parse_plan_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plan_distance_)));
          set_has_plan_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_operation_length;
        break;
      }

      // optional double operation_length = 8 [default = 30];
      case 8: {
        if (tag == 65) {
         parse_operation_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &operation_length_)));
          set_has_operation_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_max_check_distance;
        break;
      }

      // optional double max_check_distance = 9 [default = 60];
      case 9: {
        if (tag == 73) {
         parse_max_check_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_check_distance_)));
          set_has_max_check_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_max_failure_count;
        break;
      }

      // optional uint32 max_failure_count = 10 [default = 10];
      case 10: {
        if (tag == 80) {
         parse_max_failure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_failure_count_)));
          set_has_max_failure_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PullOverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PullOverConfig)
  return false;
#undef DO_
}

void PullOverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PullOverConfig)
  // optional double stop_distance = 1 [default = 0.5];
  if (has_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double max_stop_speed = 2 [default = 0.3];
  if (has_max_stop_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_stop_speed(), output);
  }

  // optional double max_valid_stop_distance = 3 [default = 3];
  if (has_max_valid_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_valid_stop_distance(), output);
  }

  // optional double max_stop_deceleration = 4 [default = 2.5];
  if (has_max_stop_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_stop_deceleration(), output);
  }

  // optional double min_pass_s_distance = 5 [default = 1];
  if (has_min_pass_s_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_pass_s_distance(), output);
  }

  // optional double buffer_to_boundary = 6 [default = 0.5];
  if (has_buffer_to_boundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->buffer_to_boundary(), output);
  }

  // optional double plan_distance = 7 [default = 35];
  if (has_plan_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->plan_distance(), output);
  }

  // optional double operation_length = 8 [default = 30];
  if (has_operation_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->operation_length(), output);
  }

  // optional double max_check_distance = 9 [default = 60];
  if (has_max_check_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_check_distance(), output);
  }

  // optional uint32 max_failure_count = 10 [default = 10];
  if (has_max_failure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_failure_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PullOverConfig)
}

::google::protobuf::uint8* PullOverConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PullOverConfig)
  // optional double stop_distance = 1 [default = 0.5];
  if (has_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double max_stop_speed = 2 [default = 0.3];
  if (has_max_stop_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3];
  if (has_max_valid_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_valid_stop_distance(), target);
  }

  // optional double max_stop_deceleration = 4 [default = 2.5];
  if (has_max_stop_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_stop_deceleration(), target);
  }

  // optional double min_pass_s_distance = 5 [default = 1];
  if (has_min_pass_s_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_pass_s_distance(), target);
  }

  // optional double buffer_to_boundary = 6 [default = 0.5];
  if (has_buffer_to_boundary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->buffer_to_boundary(), target);
  }

  // optional double plan_distance = 7 [default = 35];
  if (has_plan_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->plan_distance(), target);
  }

  // optional double operation_length = 8 [default = 30];
  if (has_operation_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->operation_length(), target);
  }

  // optional double max_check_distance = 9 [default = 60];
  if (has_max_check_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_check_distance(), target);
  }

  // optional uint32 max_failure_count = 10 [default = 10];
  if (has_max_failure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_failure_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PullOverConfig)
  return target;
}

int PullOverConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PullOverConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_speed = 2 [default = 0.3];
    if (has_max_stop_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 4 [default = 2.5];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 5 [default = 1];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double buffer_to_boundary = 6 [default = 0.5];
    if (has_buffer_to_boundary()) {
      total_size += 1 + 8;
    }

    // optional double plan_distance = 7 [default = 35];
    if (has_plan_distance()) {
      total_size += 1 + 8;
    }

    // optional double operation_length = 8 [default = 30];
    if (has_operation_length()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double max_check_distance = 9 [default = 60];
    if (has_max_check_distance()) {
      total_size += 1 + 8;
    }

    // optional uint32 max_failure_count = 10 [default = 10];
    if (has_max_failure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_failure_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullOverConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PullOverConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PullOverConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PullOverConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PullOverConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PullOverConfig)
    MergeFrom(*source);
  }
}

void PullOverConfig::MergeFrom(const PullOverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PullOverConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_distance()) {
      set_stop_distance(from.stop_distance());
    }
    if (from.has_max_stop_speed()) {
      set_max_stop_speed(from.max_stop_speed());
    }
    if (from.has_max_valid_stop_distance()) {
      set_max_valid_stop_distance(from.max_valid_stop_distance());
    }
    if (from.has_max_stop_deceleration()) {
      set_max_stop_deceleration(from.max_stop_deceleration());
    }
    if (from.has_min_pass_s_distance()) {
      set_min_pass_s_distance(from.min_pass_s_distance());
    }
    if (from.has_buffer_to_boundary()) {
      set_buffer_to_boundary(from.buffer_to_boundary());
    }
    if (from.has_plan_distance()) {
      set_plan_distance(from.plan_distance());
    }
    if (from.has_operation_length()) {
      set_operation_length(from.operation_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_check_distance()) {
      set_max_check_distance(from.max_check_distance());
    }
    if (from.has_max_failure_count()) {
      set_max_failure_count(from.max_failure_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PullOverConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullOverConfig::CopyFrom(const PullOverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullOverConfig::IsInitialized() const {

  return true;
}

void PullOverConfig::Swap(PullOverConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullOverConfig::InternalSwap(PullOverConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(max_stop_speed_, other->max_stop_speed_);
  std::swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  std::swap(max_stop_deceleration_, other->max_stop_deceleration_);
  std::swap(min_pass_s_distance_, other->min_pass_s_distance_);
  std::swap(buffer_to_boundary_, other->buffer_to_boundary_);
  std::swap(plan_distance_, other->plan_distance_);
  std::swap(operation_length_, other->operation_length_);
  std::swap(max_check_distance_, other->max_check_distance_);
  std::swap(max_failure_count_, other->max_failure_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullOverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullOverConfig_descriptor_;
  metadata.reflection = PullOverConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PullOverConfig

// optional double stop_distance = 1 [default = 0.5];
bool PullOverConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PullOverConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void PullOverConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void PullOverConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
 double PullOverConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.stop_distance)
  return stop_distance_;
}
 void PullOverConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.stop_distance)
}

// optional double max_stop_speed = 2 [default = 0.3];
bool PullOverConfig::has_max_stop_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PullOverConfig::set_has_max_stop_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void PullOverConfig::clear_has_max_stop_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void PullOverConfig::clear_max_stop_speed() {
  max_stop_speed_ = 0.3;
  clear_has_max_stop_speed();
}
 double PullOverConfig::max_stop_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.max_stop_speed)
  return max_stop_speed_;
}
 void PullOverConfig::set_max_stop_speed(double value) {
  set_has_max_stop_speed();
  max_stop_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.max_stop_speed)
}

// optional double max_valid_stop_distance = 3 [default = 3];
bool PullOverConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PullOverConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void PullOverConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void PullOverConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 3;
  clear_has_max_valid_stop_distance();
}
 double PullOverConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
 void PullOverConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.max_valid_stop_distance)
}

// optional double max_stop_deceleration = 4 [default = 2.5];
bool PullOverConfig::has_max_stop_deceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PullOverConfig::set_has_max_stop_deceleration() {
  _has_bits_[0] |= 0x00000008u;
}
void PullOverConfig::clear_has_max_stop_deceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
void PullOverConfig::clear_max_stop_deceleration() {
  max_stop_deceleration_ = 2.5;
  clear_has_max_stop_deceleration();
}
 double PullOverConfig::max_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.max_stop_deceleration)
  return max_stop_deceleration_;
}
 void PullOverConfig::set_max_stop_deceleration(double value) {
  set_has_max_stop_deceleration();
  max_stop_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.max_stop_deceleration)
}

// optional double min_pass_s_distance = 5 [default = 1];
bool PullOverConfig::has_min_pass_s_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PullOverConfig::set_has_min_pass_s_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void PullOverConfig::clear_has_min_pass_s_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void PullOverConfig::clear_min_pass_s_distance() {
  min_pass_s_distance_ = 1;
  clear_has_min_pass_s_distance();
}
 double PullOverConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.min_pass_s_distance)
  return min_pass_s_distance_;
}
 void PullOverConfig::set_min_pass_s_distance(double value) {
  set_has_min_pass_s_distance();
  min_pass_s_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.min_pass_s_distance)
}

// optional double buffer_to_boundary = 6 [default = 0.5];
bool PullOverConfig::has_buffer_to_boundary() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PullOverConfig::set_has_buffer_to_boundary() {
  _has_bits_[0] |= 0x00000020u;
}
void PullOverConfig::clear_has_buffer_to_boundary() {
  _has_bits_[0] &= ~0x00000020u;
}
void PullOverConfig::clear_buffer_to_boundary() {
  buffer_to_boundary_ = 0.5;
  clear_has_buffer_to_boundary();
}
 double PullOverConfig::buffer_to_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.buffer_to_boundary)
  return buffer_to_boundary_;
}
 void PullOverConfig::set_buffer_to_boundary(double value) {
  set_has_buffer_to_boundary();
  buffer_to_boundary_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.buffer_to_boundary)
}

// optional double plan_distance = 7 [default = 35];
bool PullOverConfig::has_plan_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PullOverConfig::set_has_plan_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void PullOverConfig::clear_has_plan_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void PullOverConfig::clear_plan_distance() {
  plan_distance_ = 35;
  clear_has_plan_distance();
}
 double PullOverConfig::plan_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.plan_distance)
  return plan_distance_;
}
 void PullOverConfig::set_plan_distance(double value) {
  set_has_plan_distance();
  plan_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.plan_distance)
}

// optional double operation_length = 8 [default = 30];
bool PullOverConfig::has_operation_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PullOverConfig::set_has_operation_length() {
  _has_bits_[0] |= 0x00000080u;
}
void PullOverConfig::clear_has_operation_length() {
  _has_bits_[0] &= ~0x00000080u;
}
void PullOverConfig::clear_operation_length() {
  operation_length_ = 30;
  clear_has_operation_length();
}
 double PullOverConfig::operation_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.operation_length)
  return operation_length_;
}
 void PullOverConfig::set_operation_length(double value) {
  set_has_operation_length();
  operation_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.operation_length)
}

// optional double max_check_distance = 9 [default = 60];
bool PullOverConfig::has_max_check_distance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PullOverConfig::set_has_max_check_distance() {
  _has_bits_[0] |= 0x00000100u;
}
void PullOverConfig::clear_has_max_check_distance() {
  _has_bits_[0] &= ~0x00000100u;
}
void PullOverConfig::clear_max_check_distance() {
  max_check_distance_ = 60;
  clear_has_max_check_distance();
}
 double PullOverConfig::max_check_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.max_check_distance)
  return max_check_distance_;
}
 void PullOverConfig::set_max_check_distance(double value) {
  set_has_max_check_distance();
  max_check_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.max_check_distance)
}

// optional uint32 max_failure_count = 10 [default = 10];
bool PullOverConfig::has_max_failure_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PullOverConfig::set_has_max_failure_count() {
  _has_bits_[0] |= 0x00000200u;
}
void PullOverConfig::clear_has_max_failure_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void PullOverConfig::clear_max_failure_count() {
  max_failure_count_ = 10u;
  clear_has_max_failure_count();
}
 ::google::protobuf::uint32 PullOverConfig::max_failure_count() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PullOverConfig.max_failure_count)
  return max_failure_count_;
}
 void PullOverConfig::set_max_failure_count(::google::protobuf::uint32 value) {
  set_has_max_failure_count();
  max_failure_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PullOverConfig.max_failure_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineEndConfig::kStopDistanceFieldNumber;
const int ReferenceLineEndConfig::kMinReferenceLineRemainLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineEndConfig::ReferenceLineEndConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReferenceLineEndConfig)
}

void ReferenceLineEndConfig::InitAsDefaultInstance() {
}

ReferenceLineEndConfig::ReferenceLineEndConfig(const ReferenceLineEndConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReferenceLineEndConfig)
}

void ReferenceLineEndConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 0.5;
  min_reference_line_remain_length_ = 50;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceLineEndConfig::~ReferenceLineEndConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReferenceLineEndConfig)
  SharedDtor();
}

void ReferenceLineEndConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReferenceLineEndConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineEndConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceLineEndConfig_descriptor_;
}

const ReferenceLineEndConfig& ReferenceLineEndConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

ReferenceLineEndConfig* ReferenceLineEndConfig::default_instance_ = NULL;

ReferenceLineEndConfig* ReferenceLineEndConfig::New(::google::protobuf::Arena* arena) const {
  ReferenceLineEndConfig* n = new ReferenceLineEndConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineEndConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReferenceLineEndConfig)
  if (_has_bits_[0 / 32] & 3u) {
    stop_distance_ = 0.5;
    min_reference_line_remain_length_ = 50;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReferenceLineEndConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ReferenceLineEndConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
          set_has_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_min_reference_line_remain_length;
        break;
      }

      // optional double min_reference_line_remain_length = 2 [default = 50];
      case 2: {
        if (tag == 17) {
         parse_min_reference_line_remain_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_reference_line_remain_length_)));
          set_has_min_reference_line_remain_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ReferenceLineEndConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ReferenceLineEndConfig)
  return false;
#undef DO_
}

void ReferenceLineEndConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ReferenceLineEndConfig)
  // optional double stop_distance = 1 [default = 0.5];
  if (has_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (has_min_reference_line_remain_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_reference_line_remain_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ReferenceLineEndConfig)
}

::google::protobuf::uint8* ReferenceLineEndConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReferenceLineEndConfig)
  // optional double stop_distance = 1 [default = 0.5];
  if (has_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (has_min_reference_line_remain_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_reference_line_remain_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReferenceLineEndConfig)
  return target;
}

int ReferenceLineEndConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReferenceLineEndConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_reference_line_remain_length = 2 [default = 50];
    if (has_min_reference_line_remain_length()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineEndConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReferenceLineEndConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReferenceLineEndConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineEndConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReferenceLineEndConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReferenceLineEndConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineEndConfig::MergeFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReferenceLineEndConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_distance()) {
      set_stop_distance(from.stop_distance());
    }
    if (from.has_min_reference_line_remain_length()) {
      set_min_reference_line_remain_length(from.min_reference_line_remain_length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReferenceLineEndConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineEndConfig::CopyFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineEndConfig::IsInitialized() const {

  return true;
}

void ReferenceLineEndConfig::Swap(ReferenceLineEndConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineEndConfig::InternalSwap(ReferenceLineEndConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(min_reference_line_remain_length_, other->min_reference_line_remain_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineEndConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceLineEndConfig_descriptor_;
  metadata.reflection = ReferenceLineEndConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceLineEndConfig

// optional double stop_distance = 1 [default = 0.5];
bool ReferenceLineEndConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReferenceLineEndConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void ReferenceLineEndConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReferenceLineEndConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
 double ReferenceLineEndConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineEndConfig.stop_distance)
  return stop_distance_;
}
 void ReferenceLineEndConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineEndConfig.stop_distance)
}

// optional double min_reference_line_remain_length = 2 [default = 50];
bool ReferenceLineEndConfig::has_min_reference_line_remain_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReferenceLineEndConfig::set_has_min_reference_line_remain_length() {
  _has_bits_[0] |= 0x00000002u;
}
void ReferenceLineEndConfig::clear_has_min_reference_line_remain_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineEndConfig::clear_min_reference_line_remain_length() {
  min_reference_line_remain_length_ = 50;
  clear_has_min_reference_line_remain_length();
}
 double ReferenceLineEndConfig::min_reference_line_remain_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineEndConfig.min_reference_line_remain_length)
  return min_reference_line_remain_length_;
}
 void ReferenceLineEndConfig::set_min_reference_line_remain_length(double value) {
  set_has_min_reference_line_remain_length();
  min_reference_line_remain_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineEndConfig.min_reference_line_remain_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReroutingConfig::kCooldownTimeFieldNumber;
const int ReroutingConfig::kPrepareReroutingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReroutingConfig::ReroutingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReroutingConfig)
}

void ReroutingConfig::InitAsDefaultInstance() {
}

ReroutingConfig::ReroutingConfig(const ReroutingConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingConfig)
}

void ReroutingConfig::SharedCtor() {
  _cached_size_ = 0;
  cooldown_time_ = 3;
  prepare_rerouting_time_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReroutingConfig::~ReroutingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingConfig)
  SharedDtor();
}

void ReroutingConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReroutingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReroutingConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReroutingConfig_descriptor_;
}

const ReroutingConfig& ReroutingConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

ReroutingConfig* ReroutingConfig::default_instance_ = NULL;

ReroutingConfig* ReroutingConfig::New(::google::protobuf::Arena* arena) const {
  ReroutingConfig* n = new ReroutingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReroutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingConfig)
  if (_has_bits_[0 / 32] & 3u) {
    cooldown_time_ = 3;
    prepare_rerouting_time_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReroutingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ReroutingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cooldown_time = 1 [default = 3];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cooldown_time_)));
          set_has_cooldown_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_prepare_rerouting_time;
        break;
      }

      // optional double prepare_rerouting_time = 2 [default = 2];
      case 2: {
        if (tag == 17) {
         parse_prepare_rerouting_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prepare_rerouting_time_)));
          set_has_prepare_rerouting_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ReroutingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ReroutingConfig)
  return false;
#undef DO_
}

void ReroutingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ReroutingConfig)
  // optional double cooldown_time = 1 [default = 3];
  if (has_cooldown_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cooldown_time(), output);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (has_prepare_rerouting_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->prepare_rerouting_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ReroutingConfig)
}

::google::protobuf::uint8* ReroutingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingConfig)
  // optional double cooldown_time = 1 [default = 3];
  if (has_cooldown_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cooldown_time(), target);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (has_prepare_rerouting_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->prepare_rerouting_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingConfig)
  return target;
}

int ReroutingConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double cooldown_time = 1 [default = 3];
    if (has_cooldown_time()) {
      total_size += 1 + 8;
    }

    // optional double prepare_rerouting_time = 2 [default = 2];
    if (has_prepare_rerouting_time()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReroutingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReroutingConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReroutingConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReroutingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReroutingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReroutingConfig)
    MergeFrom(*source);
  }
}

void ReroutingConfig::MergeFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cooldown_time()) {
      set_cooldown_time(from.cooldown_time());
    }
    if (from.has_prepare_rerouting_time()) {
      set_prepare_rerouting_time(from.prepare_rerouting_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReroutingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReroutingConfig::CopyFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingConfig::IsInitialized() const {

  return true;
}

void ReroutingConfig::Swap(ReroutingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReroutingConfig::InternalSwap(ReroutingConfig* other) {
  std::swap(cooldown_time_, other->cooldown_time_);
  std::swap(prepare_rerouting_time_, other->prepare_rerouting_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReroutingConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReroutingConfig_descriptor_;
  metadata.reflection = ReroutingConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReroutingConfig

// optional double cooldown_time = 1 [default = 3];
bool ReroutingConfig::has_cooldown_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReroutingConfig::set_has_cooldown_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ReroutingConfig::clear_has_cooldown_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReroutingConfig::clear_cooldown_time() {
  cooldown_time_ = 3;
  clear_has_cooldown_time();
}
 double ReroutingConfig::cooldown_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReroutingConfig.cooldown_time)
  return cooldown_time_;
}
 void ReroutingConfig::set_cooldown_time(double value) {
  set_has_cooldown_time();
  cooldown_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReroutingConfig.cooldown_time)
}

// optional double prepare_rerouting_time = 2 [default = 2];
bool ReroutingConfig::has_prepare_rerouting_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReroutingConfig::set_has_prepare_rerouting_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ReroutingConfig::clear_has_prepare_rerouting_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReroutingConfig::clear_prepare_rerouting_time() {
  prepare_rerouting_time_ = 2;
  clear_has_prepare_rerouting_time();
}
 double ReroutingConfig::prepare_rerouting_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReroutingConfig.prepare_rerouting_time)
  return prepare_rerouting_time_;
}
 void ReroutingConfig::set_prepare_rerouting_time(double value) {
  set_has_prepare_rerouting_time();
  prepare_rerouting_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReroutingConfig.prepare_rerouting_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalLightConfig::kStopDistanceFieldNumber;
const int SignalLightConfig::kMaxStopDecelerationFieldNumber;
const int SignalLightConfig::kMinPassSDistanceFieldNumber;
const int SignalLightConfig::kMaxStopDeaccelerationYellowLightFieldNumber;
const int SignalLightConfig::kSignalExpireTimeSecFieldNumber;
const int SignalLightConfig::kRighTurnCreepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalLightConfig::SignalLightConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SignalLightConfig)
}

void SignalLightConfig::InitAsDefaultInstance() {
  righ_turn_creep_ = const_cast< ::apollo::planning::CreepConfig*>(&::apollo::planning::CreepConfig::default_instance());
}

SignalLightConfig::SignalLightConfig(const SignalLightConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SignalLightConfig)
}

void SignalLightConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
  min_pass_s_distance_ = 4;
  max_stop_deacceleration_yellow_light_ = 3;
  signal_expire_time_sec_ = 5;
  righ_turn_creep_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalLightConfig::~SignalLightConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SignalLightConfig)
  SharedDtor();
}

void SignalLightConfig::SharedDtor() {
  if (this != default_instance_) {
    delete righ_turn_creep_;
  }
}

void SignalLightConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLightConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalLightConfig_descriptor_;
}

const SignalLightConfig& SignalLightConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

SignalLightConfig* SignalLightConfig::default_instance_ = NULL;

SignalLightConfig* SignalLightConfig::New(::google::protobuf::Arena* arena) const {
  SignalLightConfig* n = new SignalLightConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalLightConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SignalLightConfig)
  if (_has_bits_[0 / 32] & 63u) {
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
    min_pass_s_distance_ = 4;
    max_stop_deacceleration_yellow_light_ = 3;
    signal_expire_time_sec_ = 5;
    if (has_righ_turn_creep()) {
      if (righ_turn_creep_ != NULL) righ_turn_creep_->::apollo::planning::CreepConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignalLightConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SignalLightConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
          set_has_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max_stop_deceleration;
        break;
      }

      // optional double max_stop_deceleration = 2 [default = 4];
      case 2: {
        if (tag == 17) {
         parse_max_stop_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
          set_has_max_stop_deceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_min_pass_s_distance;
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 4];
      case 3: {
        if (tag == 25) {
         parse_min_pass_s_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
          set_has_min_pass_s_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_stop_deacceleration_yellow_light;
        break;
      }

      // optional double max_stop_deacceleration_yellow_light = 4 [default = 3];
      case 4: {
        if (tag == 33) {
         parse_max_stop_deacceleration_yellow_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deacceleration_yellow_light_)));
          set_has_max_stop_deacceleration_yellow_light();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_signal_expire_time_sec;
        break;
      }

      // optional double signal_expire_time_sec = 5 [default = 5];
      case 5: {
        if (tag == 41) {
         parse_signal_expire_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_expire_time_sec_)));
          set_has_signal_expire_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_righ_turn_creep;
        break;
      }

      // optional .apollo.planning.CreepConfig righ_turn_creep = 6;
      case 6: {
        if (tag == 50) {
         parse_righ_turn_creep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_righ_turn_creep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SignalLightConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SignalLightConfig)
  return false;
#undef DO_
}

void SignalLightConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SignalLightConfig)
  // optional double stop_distance = 1 [default = 1];
  if (has_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (has_max_stop_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_stop_deceleration(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 4];
  if (has_min_pass_s_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional double max_stop_deacceleration_yellow_light = 4 [default = 3];
  if (has_max_stop_deacceleration_yellow_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_stop_deacceleration_yellow_light(), output);
  }

  // optional double signal_expire_time_sec = 5 [default = 5];
  if (has_signal_expire_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->signal_expire_time_sec(), output);
  }

  // optional .apollo.planning.CreepConfig righ_turn_creep = 6;
  if (has_righ_turn_creep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->righ_turn_creep_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SignalLightConfig)
}

::google::protobuf::uint8* SignalLightConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SignalLightConfig)
  // optional double stop_distance = 1 [default = 1];
  if (has_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (has_max_stop_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_stop_deceleration(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 4];
  if (has_min_pass_s_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional double max_stop_deacceleration_yellow_light = 4 [default = 3];
  if (has_max_stop_deacceleration_yellow_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_stop_deacceleration_yellow_light(), target);
  }

  // optional double signal_expire_time_sec = 5 [default = 5];
  if (has_signal_expire_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->signal_expire_time_sec(), target);
  }

  // optional .apollo.planning.CreepConfig righ_turn_creep = 6;
  if (has_righ_turn_creep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->righ_turn_creep_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SignalLightConfig)
  return target;
}

int SignalLightConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SignalLightConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double stop_distance = 1 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 2 [default = 4];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 4];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deacceleration_yellow_light = 4 [default = 3];
    if (has_max_stop_deacceleration_yellow_light()) {
      total_size += 1 + 8;
    }

    // optional double signal_expire_time_sec = 5 [default = 5];
    if (has_signal_expire_time_sec()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.CreepConfig righ_turn_creep = 6;
    if (has_righ_turn_creep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->righ_turn_creep_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLightConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SignalLightConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SignalLightConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalLightConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SignalLightConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SignalLightConfig)
    MergeFrom(*source);
  }
}

void SignalLightConfig::MergeFrom(const SignalLightConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SignalLightConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_distance()) {
      set_stop_distance(from.stop_distance());
    }
    if (from.has_max_stop_deceleration()) {
      set_max_stop_deceleration(from.max_stop_deceleration());
    }
    if (from.has_min_pass_s_distance()) {
      set_min_pass_s_distance(from.min_pass_s_distance());
    }
    if (from.has_max_stop_deacceleration_yellow_light()) {
      set_max_stop_deacceleration_yellow_light(from.max_stop_deacceleration_yellow_light());
    }
    if (from.has_signal_expire_time_sec()) {
      set_signal_expire_time_sec(from.signal_expire_time_sec());
    }
    if (from.has_righ_turn_creep()) {
      mutable_righ_turn_creep()->::apollo::planning::CreepConfig::MergeFrom(from.righ_turn_creep());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignalLightConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SignalLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightConfig::CopyFrom(const SignalLightConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SignalLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightConfig::IsInitialized() const {

  return true;
}

void SignalLightConfig::Swap(SignalLightConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalLightConfig::InternalSwap(SignalLightConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(max_stop_deceleration_, other->max_stop_deceleration_);
  std::swap(min_pass_s_distance_, other->min_pass_s_distance_);
  std::swap(max_stop_deacceleration_yellow_light_, other->max_stop_deacceleration_yellow_light_);
  std::swap(signal_expire_time_sec_, other->signal_expire_time_sec_);
  std::swap(righ_turn_creep_, other->righ_turn_creep_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalLightConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalLightConfig_descriptor_;
  metadata.reflection = SignalLightConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalLightConfig

// optional double stop_distance = 1 [default = 1];
bool SignalLightConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalLightConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalLightConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalLightConfig::clear_stop_distance() {
  stop_distance_ = 1;
  clear_has_stop_distance();
}
 double SignalLightConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SignalLightConfig.stop_distance)
  return stop_distance_;
}
 void SignalLightConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SignalLightConfig.stop_distance)
}

// optional double max_stop_deceleration = 2 [default = 4];
bool SignalLightConfig::has_max_stop_deceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalLightConfig::set_has_max_stop_deceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalLightConfig::clear_has_max_stop_deceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalLightConfig::clear_max_stop_deceleration() {
  max_stop_deceleration_ = 4;
  clear_has_max_stop_deceleration();
}
 double SignalLightConfig::max_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SignalLightConfig.max_stop_deceleration)
  return max_stop_deceleration_;
}
 void SignalLightConfig::set_max_stop_deceleration(double value) {
  set_has_max_stop_deceleration();
  max_stop_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SignalLightConfig.max_stop_deceleration)
}

// optional double min_pass_s_distance = 3 [default = 4];
bool SignalLightConfig::has_min_pass_s_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignalLightConfig::set_has_min_pass_s_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void SignalLightConfig::clear_has_min_pass_s_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignalLightConfig::clear_min_pass_s_distance() {
  min_pass_s_distance_ = 4;
  clear_has_min_pass_s_distance();
}
 double SignalLightConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SignalLightConfig.min_pass_s_distance)
  return min_pass_s_distance_;
}
 void SignalLightConfig::set_min_pass_s_distance(double value) {
  set_has_min_pass_s_distance();
  min_pass_s_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SignalLightConfig.min_pass_s_distance)
}

// optional double max_stop_deacceleration_yellow_light = 4 [default = 3];
bool SignalLightConfig::has_max_stop_deacceleration_yellow_light() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignalLightConfig::set_has_max_stop_deacceleration_yellow_light() {
  _has_bits_[0] |= 0x00000008u;
}
void SignalLightConfig::clear_has_max_stop_deacceleration_yellow_light() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignalLightConfig::clear_max_stop_deacceleration_yellow_light() {
  max_stop_deacceleration_yellow_light_ = 3;
  clear_has_max_stop_deacceleration_yellow_light();
}
 double SignalLightConfig::max_stop_deacceleration_yellow_light() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SignalLightConfig.max_stop_deacceleration_yellow_light)
  return max_stop_deacceleration_yellow_light_;
}
 void SignalLightConfig::set_max_stop_deacceleration_yellow_light(double value) {
  set_has_max_stop_deacceleration_yellow_light();
  max_stop_deacceleration_yellow_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SignalLightConfig.max_stop_deacceleration_yellow_light)
}

// optional double signal_expire_time_sec = 5 [default = 5];
bool SignalLightConfig::has_signal_expire_time_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SignalLightConfig::set_has_signal_expire_time_sec() {
  _has_bits_[0] |= 0x00000010u;
}
void SignalLightConfig::clear_has_signal_expire_time_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
void SignalLightConfig::clear_signal_expire_time_sec() {
  signal_expire_time_sec_ = 5;
  clear_has_signal_expire_time_sec();
}
 double SignalLightConfig::signal_expire_time_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SignalLightConfig.signal_expire_time_sec)
  return signal_expire_time_sec_;
}
 void SignalLightConfig::set_signal_expire_time_sec(double value) {
  set_has_signal_expire_time_sec();
  signal_expire_time_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SignalLightConfig.signal_expire_time_sec)
}

// optional .apollo.planning.CreepConfig righ_turn_creep = 6;
bool SignalLightConfig::has_righ_turn_creep() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SignalLightConfig::set_has_righ_turn_creep() {
  _has_bits_[0] |= 0x00000020u;
}
void SignalLightConfig::clear_has_righ_turn_creep() {
  _has_bits_[0] &= ~0x00000020u;
}
void SignalLightConfig::clear_righ_turn_creep() {
  if (righ_turn_creep_ != NULL) righ_turn_creep_->::apollo::planning::CreepConfig::Clear();
  clear_has_righ_turn_creep();
}
const ::apollo::planning::CreepConfig& SignalLightConfig::righ_turn_creep() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SignalLightConfig.righ_turn_creep)
  return righ_turn_creep_ != NULL ? *righ_turn_creep_ : *default_instance_->righ_turn_creep_;
}
::apollo::planning::CreepConfig* SignalLightConfig::mutable_righ_turn_creep() {
  set_has_righ_turn_creep();
  if (righ_turn_creep_ == NULL) {
    righ_turn_creep_ = new ::apollo::planning::CreepConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.SignalLightConfig.righ_turn_creep)
  return righ_turn_creep_;
}
::apollo::planning::CreepConfig* SignalLightConfig::release_righ_turn_creep() {
  // @@protoc_insertion_point(field_release:apollo.planning.SignalLightConfig.righ_turn_creep)
  clear_has_righ_turn_creep();
  ::apollo::planning::CreepConfig* temp = righ_turn_creep_;
  righ_turn_creep_ = NULL;
  return temp;
}
void SignalLightConfig::set_allocated_righ_turn_creep(::apollo::planning::CreepConfig* righ_turn_creep) {
  delete righ_turn_creep_;
  righ_turn_creep_ = righ_turn_creep;
  if (righ_turn_creep) {
    set_has_righ_turn_creep();
  } else {
    clear_has_righ_turn_creep();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SignalLightConfig.righ_turn_creep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSignConfig::kStopDistanceFieldNumber;
const int StopSignConfig::kMinPassSDistanceFieldNumber;
const int StopSignConfig::kMaxStopSpeedFieldNumber;
const int StopSignConfig::kMaxValidStopDistanceFieldNumber;
const int StopSignConfig::kStopDurationFieldNumber;
const int StopSignConfig::kWatchVehicleMaxValidStopSpeedFieldNumber;
const int StopSignConfig::kWatchVehicleMaxValidStopDistanceFieldNumber;
const int StopSignConfig::kWaitTimeoutFieldNumber;
const int StopSignConfig::kCreepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignConfig::StopSignConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopSignConfig)
}

void StopSignConfig::InitAsDefaultInstance() {
  creep_ = const_cast< ::apollo::planning::CreepConfig*>(&::apollo::planning::CreepConfig::default_instance());
}

StopSignConfig::StopSignConfig(const StopSignConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignConfig)
}

void StopSignConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 1;
  min_pass_s_distance_ = 1;
  max_stop_speed_ = 0.3;
  max_valid_stop_distance_ = 3;
  stop_duration_ = 1;
  watch_vehicle_max_valid_stop_speed_ = 0.5;
  watch_vehicle_max_valid_stop_distance_ = 5;
  wait_timeout_ = 8;
  creep_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopSignConfig::~StopSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignConfig)
  SharedDtor();
}

void StopSignConfig::SharedDtor() {
  if (this != default_instance_) {
    delete creep_;
  }
}

void StopSignConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopSignConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopSignConfig_descriptor_;
}

const StopSignConfig& StopSignConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

StopSignConfig* StopSignConfig::default_instance_ = NULL;

StopSignConfig* StopSignConfig::New(::google::protobuf::Arena* arena) const {
  StopSignConfig* n = new StopSignConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignConfig)
  if (_has_bits_[0 / 32] & 255u) {
    stop_distance_ = 1;
    min_pass_s_distance_ = 1;
    max_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 3;
    stop_duration_ = 1;
    watch_vehicle_max_valid_stop_speed_ = 0.5;
    watch_vehicle_max_valid_stop_distance_ = 5;
    wait_timeout_ = 8;
  }
  if (has_creep()) {
    if (creep_ != NULL) creep_->::apollo::planning::CreepConfig::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopSignConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopSignConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
          set_has_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_min_pass_s_distance;
        break;
      }

      // optional double min_pass_s_distance = 2 [default = 1];
      case 2: {
        if (tag == 17) {
         parse_min_pass_s_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
          set_has_min_pass_s_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_stop_speed;
        break;
      }

      // optional double max_stop_speed = 3 [default = 0.3];
      case 3: {
        if (tag == 25) {
         parse_max_stop_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_speed_)));
          set_has_max_stop_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_valid_stop_distance;
        break;
      }

      // optional double max_valid_stop_distance = 4 [default = 3];
      case 4: {
        if (tag == 33) {
         parse_max_valid_stop_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
          set_has_max_valid_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_stop_duration;
        break;
      }

      // optional double stop_duration = 5 [default = 1];
      case 5: {
        if (tag == 41) {
         parse_stop_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_duration_)));
          set_has_stop_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_watch_vehicle_max_valid_stop_speed;
        break;
      }

      // optional double watch_vehicle_max_valid_stop_speed = 6 [default = 0.5];
      case 6: {
        if (tag == 49) {
         parse_watch_vehicle_max_valid_stop_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &watch_vehicle_max_valid_stop_speed_)));
          set_has_watch_vehicle_max_valid_stop_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_watch_vehicle_max_valid_stop_distance;
        break;
      }

      // optional double watch_vehicle_max_valid_stop_distance = 7 [default = 5];
      case 7: {
        if (tag == 57) {
         parse_watch_vehicle_max_valid_stop_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &watch_vehicle_max_valid_stop_distance_)));
          set_has_watch_vehicle_max_valid_stop_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_wait_timeout;
        break;
      }

      // optional double wait_timeout = 8 [default = 8];
      case 8: {
        if (tag == 65) {
         parse_wait_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wait_timeout_)));
          set_has_wait_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_creep;
        break;
      }

      // optional .apollo.planning.CreepConfig creep = 9;
      case 9: {
        if (tag == 74) {
         parse_creep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopSignConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopSignConfig)
  return false;
#undef DO_
}

void StopSignConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopSignConfig)
  // optional double stop_distance = 1 [default = 1];
  if (has_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double min_pass_s_distance = 2 [default = 1];
  if (has_min_pass_s_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_pass_s_distance(), output);
  }

  // optional double max_stop_speed = 3 [default = 0.3];
  if (has_max_stop_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_stop_speed(), output);
  }

  // optional double max_valid_stop_distance = 4 [default = 3];
  if (has_max_valid_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_valid_stop_distance(), output);
  }

  // optional double stop_duration = 5 [default = 1];
  if (has_stop_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stop_duration(), output);
  }

  // optional double watch_vehicle_max_valid_stop_speed = 6 [default = 0.5];
  if (has_watch_vehicle_max_valid_stop_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->watch_vehicle_max_valid_stop_speed(), output);
  }

  // optional double watch_vehicle_max_valid_stop_distance = 7 [default = 5];
  if (has_watch_vehicle_max_valid_stop_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->watch_vehicle_max_valid_stop_distance(), output);
  }

  // optional double wait_timeout = 8 [default = 8];
  if (has_wait_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->wait_timeout(), output);
  }

  // optional .apollo.planning.CreepConfig creep = 9;
  if (has_creep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->creep_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopSignConfig)
}

::google::protobuf::uint8* StopSignConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignConfig)
  // optional double stop_distance = 1 [default = 1];
  if (has_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double min_pass_s_distance = 2 [default = 1];
  if (has_min_pass_s_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_pass_s_distance(), target);
  }

  // optional double max_stop_speed = 3 [default = 0.3];
  if (has_max_stop_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 4 [default = 3];
  if (has_max_valid_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_valid_stop_distance(), target);
  }

  // optional double stop_duration = 5 [default = 1];
  if (has_stop_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stop_duration(), target);
  }

  // optional double watch_vehicle_max_valid_stop_speed = 6 [default = 0.5];
  if (has_watch_vehicle_max_valid_stop_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->watch_vehicle_max_valid_stop_speed(), target);
  }

  // optional double watch_vehicle_max_valid_stop_distance = 7 [default = 5];
  if (has_watch_vehicle_max_valid_stop_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->watch_vehicle_max_valid_stop_distance(), target);
  }

  // optional double wait_timeout = 8 [default = 8];
  if (has_wait_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->wait_timeout(), target);
  }

  // optional .apollo.planning.CreepConfig creep = 9;
  if (has_creep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->creep_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignConfig)
  return target;
}

int StopSignConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double stop_distance = 1 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 2 [default = 1];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_speed = 3 [default = 0.3];
    if (has_max_stop_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 4 [default = 3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_duration = 5 [default = 1];
    if (has_stop_duration()) {
      total_size += 1 + 8;
    }

    // optional double watch_vehicle_max_valid_stop_speed = 6 [default = 0.5];
    if (has_watch_vehicle_max_valid_stop_speed()) {
      total_size += 1 + 8;
    }

    // optional double watch_vehicle_max_valid_stop_distance = 7 [default = 5];
    if (has_watch_vehicle_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double wait_timeout = 8 [default = 8];
    if (has_wait_timeout()) {
      total_size += 1 + 8;
    }

  }
  // optional .apollo.planning.CreepConfig creep = 9;
  if (has_creep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creep_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopSignConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopSignConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopSignConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopSignConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopSignConfig)
    MergeFrom(*source);
  }
}

void StopSignConfig::MergeFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_distance()) {
      set_stop_distance(from.stop_distance());
    }
    if (from.has_min_pass_s_distance()) {
      set_min_pass_s_distance(from.min_pass_s_distance());
    }
    if (from.has_max_stop_speed()) {
      set_max_stop_speed(from.max_stop_speed());
    }
    if (from.has_max_valid_stop_distance()) {
      set_max_valid_stop_distance(from.max_valid_stop_distance());
    }
    if (from.has_stop_duration()) {
      set_stop_duration(from.stop_duration());
    }
    if (from.has_watch_vehicle_max_valid_stop_speed()) {
      set_watch_vehicle_max_valid_stop_speed(from.watch_vehicle_max_valid_stop_speed());
    }
    if (from.has_watch_vehicle_max_valid_stop_distance()) {
      set_watch_vehicle_max_valid_stop_distance(from.watch_vehicle_max_valid_stop_distance());
    }
    if (from.has_wait_timeout()) {
      set_wait_timeout(from.wait_timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creep()) {
      mutable_creep()->::apollo::planning::CreepConfig::MergeFrom(from.creep());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopSignConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignConfig::CopyFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignConfig::IsInitialized() const {

  return true;
}

void StopSignConfig::Swap(StopSignConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignConfig::InternalSwap(StopSignConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(min_pass_s_distance_, other->min_pass_s_distance_);
  std::swap(max_stop_speed_, other->max_stop_speed_);
  std::swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  std::swap(stop_duration_, other->stop_duration_);
  std::swap(watch_vehicle_max_valid_stop_speed_, other->watch_vehicle_max_valid_stop_speed_);
  std::swap(watch_vehicle_max_valid_stop_distance_, other->watch_vehicle_max_valid_stop_distance_);
  std::swap(wait_timeout_, other->wait_timeout_);
  std::swap(creep_, other->creep_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopSignConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopSignConfig_descriptor_;
  metadata.reflection = StopSignConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopSignConfig

// optional double stop_distance = 1 [default = 1];
bool StopSignConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopSignConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void StopSignConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopSignConfig::clear_stop_distance() {
  stop_distance_ = 1;
  clear_has_stop_distance();
}
 double StopSignConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.stop_distance)
  return stop_distance_;
}
 void StopSignConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.stop_distance)
}

// optional double min_pass_s_distance = 2 [default = 1];
bool StopSignConfig::has_min_pass_s_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopSignConfig::set_has_min_pass_s_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void StopSignConfig::clear_has_min_pass_s_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopSignConfig::clear_min_pass_s_distance() {
  min_pass_s_distance_ = 1;
  clear_has_min_pass_s_distance();
}
 double StopSignConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.min_pass_s_distance)
  return min_pass_s_distance_;
}
 void StopSignConfig::set_min_pass_s_distance(double value) {
  set_has_min_pass_s_distance();
  min_pass_s_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.min_pass_s_distance)
}

// optional double max_stop_speed = 3 [default = 0.3];
bool StopSignConfig::has_max_stop_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopSignConfig::set_has_max_stop_speed() {
  _has_bits_[0] |= 0x00000004u;
}
void StopSignConfig::clear_has_max_stop_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopSignConfig::clear_max_stop_speed() {
  max_stop_speed_ = 0.3;
  clear_has_max_stop_speed();
}
 double StopSignConfig::max_stop_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.max_stop_speed)
  return max_stop_speed_;
}
 void StopSignConfig::set_max_stop_speed(double value) {
  set_has_max_stop_speed();
  max_stop_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.max_stop_speed)
}

// optional double max_valid_stop_distance = 4 [default = 3];
bool StopSignConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StopSignConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void StopSignConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void StopSignConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 3;
  clear_has_max_valid_stop_distance();
}
 double StopSignConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
 void StopSignConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.max_valid_stop_distance)
}

// optional double stop_duration = 5 [default = 1];
bool StopSignConfig::has_stop_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StopSignConfig::set_has_stop_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void StopSignConfig::clear_has_stop_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void StopSignConfig::clear_stop_duration() {
  stop_duration_ = 1;
  clear_has_stop_duration();
}
 double StopSignConfig::stop_duration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.stop_duration)
  return stop_duration_;
}
 void StopSignConfig::set_stop_duration(double value) {
  set_has_stop_duration();
  stop_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.stop_duration)
}

// optional double watch_vehicle_max_valid_stop_speed = 6 [default = 0.5];
bool StopSignConfig::has_watch_vehicle_max_valid_stop_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StopSignConfig::set_has_watch_vehicle_max_valid_stop_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void StopSignConfig::clear_has_watch_vehicle_max_valid_stop_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void StopSignConfig::clear_watch_vehicle_max_valid_stop_speed() {
  watch_vehicle_max_valid_stop_speed_ = 0.5;
  clear_has_watch_vehicle_max_valid_stop_speed();
}
 double StopSignConfig::watch_vehicle_max_valid_stop_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.watch_vehicle_max_valid_stop_speed)
  return watch_vehicle_max_valid_stop_speed_;
}
 void StopSignConfig::set_watch_vehicle_max_valid_stop_speed(double value) {
  set_has_watch_vehicle_max_valid_stop_speed();
  watch_vehicle_max_valid_stop_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.watch_vehicle_max_valid_stop_speed)
}

// optional double watch_vehicle_max_valid_stop_distance = 7 [default = 5];
bool StopSignConfig::has_watch_vehicle_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StopSignConfig::set_has_watch_vehicle_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void StopSignConfig::clear_has_watch_vehicle_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void StopSignConfig::clear_watch_vehicle_max_valid_stop_distance() {
  watch_vehicle_max_valid_stop_distance_ = 5;
  clear_has_watch_vehicle_max_valid_stop_distance();
}
 double StopSignConfig::watch_vehicle_max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.watch_vehicle_max_valid_stop_distance)
  return watch_vehicle_max_valid_stop_distance_;
}
 void StopSignConfig::set_watch_vehicle_max_valid_stop_distance(double value) {
  set_has_watch_vehicle_max_valid_stop_distance();
  watch_vehicle_max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.watch_vehicle_max_valid_stop_distance)
}

// optional double wait_timeout = 8 [default = 8];
bool StopSignConfig::has_wait_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StopSignConfig::set_has_wait_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
void StopSignConfig::clear_has_wait_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
void StopSignConfig::clear_wait_timeout() {
  wait_timeout_ = 8;
  clear_has_wait_timeout();
}
 double StopSignConfig::wait_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.wait_timeout)
  return wait_timeout_;
}
 void StopSignConfig::set_wait_timeout(double value) {
  set_has_wait_timeout();
  wait_timeout_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopSignConfig.wait_timeout)
}

// optional .apollo.planning.CreepConfig creep = 9;
bool StopSignConfig::has_creep() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StopSignConfig::set_has_creep() {
  _has_bits_[0] |= 0x00000100u;
}
void StopSignConfig::clear_has_creep() {
  _has_bits_[0] &= ~0x00000100u;
}
void StopSignConfig::clear_creep() {
  if (creep_ != NULL) creep_->::apollo::planning::CreepConfig::Clear();
  clear_has_creep();
}
const ::apollo::planning::CreepConfig& StopSignConfig::creep() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopSignConfig.creep)
  return creep_ != NULL ? *creep_ : *default_instance_->creep_;
}
::apollo::planning::CreepConfig* StopSignConfig::mutable_creep() {
  set_has_creep();
  if (creep_ == NULL) {
    creep_ = new ::apollo::planning::CreepConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.StopSignConfig.creep)
  return creep_;
}
::apollo::planning::CreepConfig* StopSignConfig::release_creep() {
  // @@protoc_insertion_point(field_release:apollo.planning.StopSignConfig.creep)
  clear_has_creep();
  ::apollo::planning::CreepConfig* temp = creep_;
  creep_ = NULL;
  return temp;
}
void StopSignConfig::set_allocated_creep(::apollo::planning::CreepConfig* creep) {
  delete creep_;
  creep_ = creep;
  if (creep) {
    set_has_creep();
  } else {
    clear_has_creep();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.StopSignConfig.creep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TrafficRuleConfig_RuleId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficRuleConfig_RuleId_descriptor_;
}
bool TrafficRuleConfig_RuleId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficRuleConfig_RuleId TrafficRuleConfig::BACKSIDE_VEHICLE;
const TrafficRuleConfig_RuleId TrafficRuleConfig::CHANGE_LANE;
const TrafficRuleConfig_RuleId TrafficRuleConfig::CROSSWALK;
const TrafficRuleConfig_RuleId TrafficRuleConfig::DESTINATION;
const TrafficRuleConfig_RuleId TrafficRuleConfig::FRONT_VEHICLE;
const TrafficRuleConfig_RuleId TrafficRuleConfig::KEEP_CLEAR;
const TrafficRuleConfig_RuleId TrafficRuleConfig::PULL_OVER;
const TrafficRuleConfig_RuleId TrafficRuleConfig::REFERENCE_LINE_END;
const TrafficRuleConfig_RuleId TrafficRuleConfig::REROUTING;
const TrafficRuleConfig_RuleId TrafficRuleConfig::SIGNAL_LIGHT;
const TrafficRuleConfig_RuleId TrafficRuleConfig::STOP_SIGN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MIN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MAX;
const int TrafficRuleConfig::RuleId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficRuleConfig::kRuleIdFieldNumber;
const int TrafficRuleConfig::kEnabledFieldNumber;
const int TrafficRuleConfig::kBacksideVehicleFieldNumber;
const int TrafficRuleConfig::kChangeLaneFieldNumber;
const int TrafficRuleConfig::kCrosswalkFieldNumber;
const int TrafficRuleConfig::kDestinationFieldNumber;
const int TrafficRuleConfig::kFrontVehicleFieldNumber;
const int TrafficRuleConfig::kKeepClearFieldNumber;
const int TrafficRuleConfig::kPullOverFieldNumber;
const int TrafficRuleConfig::kReferenceLineEndFieldNumber;
const int TrafficRuleConfig::kReroutingFieldNumber;
const int TrafficRuleConfig::kSignalLightFieldNumber;
const int TrafficRuleConfig::kStopSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficRuleConfig::TrafficRuleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficRuleConfig)
}

void TrafficRuleConfig::InitAsDefaultInstance() {
  TrafficRuleConfig_default_oneof_instance_->backside_vehicle_ = const_cast< ::apollo::planning::BacksideVehicleConfig*>(&::apollo::planning::BacksideVehicleConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->change_lane_ = const_cast< ::apollo::planning::ChangeLaneConfig*>(&::apollo::planning::ChangeLaneConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->crosswalk_ = const_cast< ::apollo::planning::CrosswalkConfig*>(&::apollo::planning::CrosswalkConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->destination_ = const_cast< ::apollo::planning::DestinationConfig*>(&::apollo::planning::DestinationConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->front_vehicle_ = const_cast< ::apollo::planning::FrontVehicleConfig*>(&::apollo::planning::FrontVehicleConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->keep_clear_ = const_cast< ::apollo::planning::KeepClearConfig*>(&::apollo::planning::KeepClearConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->pull_over_ = const_cast< ::apollo::planning::PullOverConfig*>(&::apollo::planning::PullOverConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->reference_line_end_ = const_cast< ::apollo::planning::ReferenceLineEndConfig*>(&::apollo::planning::ReferenceLineEndConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->rerouting_ = const_cast< ::apollo::planning::ReroutingConfig*>(&::apollo::planning::ReroutingConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->signal_light_ = const_cast< ::apollo::planning::SignalLightConfig*>(&::apollo::planning::SignalLightConfig::default_instance());
  TrafficRuleConfig_default_oneof_instance_->stop_sign_ = const_cast< ::apollo::planning::StopSignConfig*>(&::apollo::planning::StopSignConfig::default_instance());
}

TrafficRuleConfig::TrafficRuleConfig(const TrafficRuleConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfig)
}

void TrafficRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  rule_id_ = 1;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_config();
}

TrafficRuleConfig::~TrafficRuleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfig)
  SharedDtor();
}

void TrafficRuleConfig::SharedDtor() {
  if (has_config()) {
    clear_config();
  }
  if (this != default_instance_) {
  }
}

void TrafficRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficRuleConfig_descriptor_;
}

const TrafficRuleConfig& TrafficRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

TrafficRuleConfig* TrafficRuleConfig::default_instance_ = NULL;

TrafficRuleConfig* TrafficRuleConfig::New(::google::protobuf::Arena* arena) const {
  TrafficRuleConfig* n = new TrafficRuleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficRuleConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.TrafficRuleConfig)
  switch(config_case()) {
    case kBacksideVehicle: {
      delete config_.backside_vehicle_;
      break;
    }
    case kChangeLane: {
      delete config_.change_lane_;
      break;
    }
    case kCrosswalk: {
      delete config_.crosswalk_;
      break;
    }
    case kDestination: {
      delete config_.destination_;
      break;
    }
    case kFrontVehicle: {
      delete config_.front_vehicle_;
      break;
    }
    case kKeepClear: {
      delete config_.keep_clear_;
      break;
    }
    case kPullOver: {
      delete config_.pull_over_;
      break;
    }
    case kReferenceLineEnd: {
      delete config_.reference_line_end_;
      break;
    }
    case kRerouting: {
      delete config_.rerouting_;
      break;
    }
    case kSignalLight: {
      delete config_.signal_light_;
      break;
    }
    case kStopSign: {
      delete config_.stop_sign_;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void TrafficRuleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfig)
  if (_has_bits_[0 / 32] & 3u) {
    rule_id_ = 1;
    enabled_ = false;
  }
  clear_config();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficRuleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TrafficRuleConfig_RuleId_IsValid(value)) {
            set_rule_id(static_cast< ::apollo::planning::TrafficRuleConfig_RuleId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_backside_vehicle;
        break;
      }

      // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
      case 3: {
        if (tag == 26) {
         parse_backside_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backside_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_change_lane;
        break;
      }

      // optional .apollo.planning.ChangeLaneConfig change_lane = 4;
      case 4: {
        if (tag == 34) {
         parse_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_crosswalk;
        break;
      }

      // optional .apollo.planning.CrosswalkConfig crosswalk = 5;
      case 5: {
        if (tag == 42) {
         parse_crosswalk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_destination;
        break;
      }

      // optional .apollo.planning.DestinationConfig destination = 6;
      case 6: {
        if (tag == 50) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_front_vehicle;
        break;
      }

      // optional .apollo.planning.FrontVehicleConfig front_vehicle = 7;
      case 7: {
        if (tag == 58) {
         parse_front_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_front_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_keep_clear;
        break;
      }

      // optional .apollo.planning.KeepClearConfig keep_clear = 8;
      case 8: {
        if (tag == 66) {
         parse_keep_clear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keep_clear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pull_over;
        break;
      }

      // optional .apollo.planning.PullOverConfig pull_over = 9;
      case 9: {
        if (tag == 74) {
         parse_pull_over:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull_over()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reference_line_end;
        break;
      }

      // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 10;
      case 10: {
        if (tag == 82) {
         parse_reference_line_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference_line_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_rerouting;
        break;
      }

      // optional .apollo.planning.ReroutingConfig rerouting = 11;
      case 11: {
        if (tag == 90) {
         parse_rerouting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rerouting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_signal_light;
        break;
      }

      // optional .apollo.planning.SignalLightConfig signal_light = 12;
      case 12: {
        if (tag == 98) {
         parse_signal_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_stop_sign;
        break;
      }

      // optional .apollo.planning.StopSignConfig stop_sign = 13;
      case 13: {
        if (tag == 106) {
         parse_stop_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficRuleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficRuleConfig)
  return false;
#undef DO_
}

void TrafficRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficRuleConfig)
  // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (has_rule_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rule_id(), output);
  }

  // optional bool enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
  if (has_backside_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *config_.backside_vehicle_, output);
  }

  // optional .apollo.planning.ChangeLaneConfig change_lane = 4;
  if (has_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *config_.change_lane_, output);
  }

  // optional .apollo.planning.CrosswalkConfig crosswalk = 5;
  if (has_crosswalk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *config_.crosswalk_, output);
  }

  // optional .apollo.planning.DestinationConfig destination = 6;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *config_.destination_, output);
  }

  // optional .apollo.planning.FrontVehicleConfig front_vehicle = 7;
  if (has_front_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *config_.front_vehicle_, output);
  }

  // optional .apollo.planning.KeepClearConfig keep_clear = 8;
  if (has_keep_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *config_.keep_clear_, output);
  }

  // optional .apollo.planning.PullOverConfig pull_over = 9;
  if (has_pull_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *config_.pull_over_, output);
  }

  // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 10;
  if (has_reference_line_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *config_.reference_line_end_, output);
  }

  // optional .apollo.planning.ReroutingConfig rerouting = 11;
  if (has_rerouting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *config_.rerouting_, output);
  }

  // optional .apollo.planning.SignalLightConfig signal_light = 12;
  if (has_signal_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *config_.signal_light_, output);
  }

  // optional .apollo.planning.StopSignConfig stop_sign = 13;
  if (has_stop_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *config_.stop_sign_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficRuleConfig)
}

::google::protobuf::uint8* TrafficRuleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfig)
  // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (has_rule_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rule_id(), target);
  }

  // optional bool enabled = 2;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
  if (has_backside_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *config_.backside_vehicle_, false, target);
  }

  // optional .apollo.planning.ChangeLaneConfig change_lane = 4;
  if (has_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *config_.change_lane_, false, target);
  }

  // optional .apollo.planning.CrosswalkConfig crosswalk = 5;
  if (has_crosswalk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *config_.crosswalk_, false, target);
  }

  // optional .apollo.planning.DestinationConfig destination = 6;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *config_.destination_, false, target);
  }

  // optional .apollo.planning.FrontVehicleConfig front_vehicle = 7;
  if (has_front_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *config_.front_vehicle_, false, target);
  }

  // optional .apollo.planning.KeepClearConfig keep_clear = 8;
  if (has_keep_clear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *config_.keep_clear_, false, target);
  }

  // optional .apollo.planning.PullOverConfig pull_over = 9;
  if (has_pull_over()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *config_.pull_over_, false, target);
  }

  // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 10;
  if (has_reference_line_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *config_.reference_line_end_, false, target);
  }

  // optional .apollo.planning.ReroutingConfig rerouting = 11;
  if (has_rerouting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *config_.rerouting_, false, target);
  }

  // optional .apollo.planning.SignalLightConfig signal_light = 12;
  if (has_signal_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *config_.signal_light_, false, target);
  }

  // optional .apollo.planning.StopSignConfig stop_sign = 13;
  if (has_stop_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *config_.stop_sign_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfig)
  return target;
}

int TrafficRuleConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
    if (has_rule_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rule_id());
    }

    // optional bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  switch (config_case()) {
    // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
    case kBacksideVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.backside_vehicle_);
      break;
    }
    // optional .apollo.planning.ChangeLaneConfig change_lane = 4;
    case kChangeLane: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.change_lane_);
      break;
    }
    // optional .apollo.planning.CrosswalkConfig crosswalk = 5;
    case kCrosswalk: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.crosswalk_);
      break;
    }
    // optional .apollo.planning.DestinationConfig destination = 6;
    case kDestination: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.destination_);
      break;
    }
    // optional .apollo.planning.FrontVehicleConfig front_vehicle = 7;
    case kFrontVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.front_vehicle_);
      break;
    }
    // optional .apollo.planning.KeepClearConfig keep_clear = 8;
    case kKeepClear: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.keep_clear_);
      break;
    }
    // optional .apollo.planning.PullOverConfig pull_over = 9;
    case kPullOver: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.pull_over_);
      break;
    }
    // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 10;
    case kReferenceLineEnd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.reference_line_end_);
      break;
    }
    // optional .apollo.planning.ReroutingConfig rerouting = 11;
    case kRerouting: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.rerouting_);
      break;
    }
    // optional .apollo.planning.SignalLightConfig signal_light = 12;
    case kSignalLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.signal_light_);
      break;
    }
    // optional .apollo.planning.StopSignConfig stop_sign = 13;
    case kStopSign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.stop_sign_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficRuleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficRuleConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficRuleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficRuleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficRuleConfig)
    MergeFrom(*source);
  }
}

void TrafficRuleConfig::MergeFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.config_case()) {
    case kBacksideVehicle: {
      mutable_backside_vehicle()->::apollo::planning::BacksideVehicleConfig::MergeFrom(from.backside_vehicle());
      break;
    }
    case kChangeLane: {
      mutable_change_lane()->::apollo::planning::ChangeLaneConfig::MergeFrom(from.change_lane());
      break;
    }
    case kCrosswalk: {
      mutable_crosswalk()->::apollo::planning::CrosswalkConfig::MergeFrom(from.crosswalk());
      break;
    }
    case kDestination: {
      mutable_destination()->::apollo::planning::DestinationConfig::MergeFrom(from.destination());
      break;
    }
    case kFrontVehicle: {
      mutable_front_vehicle()->::apollo::planning::FrontVehicleConfig::MergeFrom(from.front_vehicle());
      break;
    }
    case kKeepClear: {
      mutable_keep_clear()->::apollo::planning::KeepClearConfig::MergeFrom(from.keep_clear());
      break;
    }
    case kPullOver: {
      mutable_pull_over()->::apollo::planning::PullOverConfig::MergeFrom(from.pull_over());
      break;
    }
    case kReferenceLineEnd: {
      mutable_reference_line_end()->::apollo::planning::ReferenceLineEndConfig::MergeFrom(from.reference_line_end());
      break;
    }
    case kRerouting: {
      mutable_rerouting()->::apollo::planning::ReroutingConfig::MergeFrom(from.rerouting());
      break;
    }
    case kSignalLight: {
      mutable_signal_light()->::apollo::planning::SignalLightConfig::MergeFrom(from.signal_light());
      break;
    }
    case kStopSign: {
      mutable_stop_sign()->::apollo::planning::StopSignConfig::MergeFrom(from.stop_sign());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rule_id()) {
      set_rule_id(from.rule_id());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfig::CopyFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfig::IsInitialized() const {

  return true;
}

void TrafficRuleConfig::Swap(TrafficRuleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficRuleConfig::InternalSwap(TrafficRuleConfig* other) {
  std::swap(rule_id_, other->rule_id_);
  std::swap(enabled_, other->enabled_);
  std::swap(config_, other->config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficRuleConfig_descriptor_;
  metadata.reflection = TrafficRuleConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficRuleConfig

// optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
bool TrafficRuleConfig::has_rule_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficRuleConfig::set_has_rule_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficRuleConfig::clear_has_rule_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficRuleConfig::clear_rule_id() {
  rule_id_ = 1;
  clear_has_rule_id();
}
 ::apollo::planning::TrafficRuleConfig_RuleId TrafficRuleConfig::rule_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.rule_id)
  return static_cast< ::apollo::planning::TrafficRuleConfig_RuleId >(rule_id_);
}
 void TrafficRuleConfig::set_rule_id(::apollo::planning::TrafficRuleConfig_RuleId value) {
  assert(::apollo::planning::TrafficRuleConfig_RuleId_IsValid(value));
  set_has_rule_id();
  rule_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrafficRuleConfig.rule_id)
}

// optional bool enabled = 2;
bool TrafficRuleConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficRuleConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficRuleConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficRuleConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool TrafficRuleConfig::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.enabled)
  return enabled_;
}
 void TrafficRuleConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrafficRuleConfig.enabled)
}

// optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
bool TrafficRuleConfig::has_backside_vehicle() const {
  return config_case() == kBacksideVehicle;
}
void TrafficRuleConfig::set_has_backside_vehicle() {
  _oneof_case_[0] = kBacksideVehicle;
}
void TrafficRuleConfig::clear_backside_vehicle() {
  if (has_backside_vehicle()) {
    delete config_.backside_vehicle_;
    clear_has_config();
  }
}
 const ::apollo::planning::BacksideVehicleConfig& TrafficRuleConfig::backside_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.backside_vehicle)
  return has_backside_vehicle()
      ? *config_.backside_vehicle_
      : ::apollo::planning::BacksideVehicleConfig::default_instance();
}
::apollo::planning::BacksideVehicleConfig* TrafficRuleConfig::mutable_backside_vehicle() {
  if (!has_backside_vehicle()) {
    clear_config();
    set_has_backside_vehicle();
    config_.backside_vehicle_ = new ::apollo::planning::BacksideVehicleConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.backside_vehicle)
  return config_.backside_vehicle_;
}
::apollo::planning::BacksideVehicleConfig* TrafficRuleConfig::release_backside_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.backside_vehicle)
  if (has_backside_vehicle()) {
    clear_has_config();
    ::apollo::planning::BacksideVehicleConfig* temp = config_.backside_vehicle_;
    config_.backside_vehicle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_backside_vehicle(::apollo::planning::BacksideVehicleConfig* backside_vehicle) {
  clear_config();
  if (backside_vehicle) {
    set_has_backside_vehicle();
    config_.backside_vehicle_ = backside_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.backside_vehicle)
}

// optional .apollo.planning.ChangeLaneConfig change_lane = 4;
bool TrafficRuleConfig::has_change_lane() const {
  return config_case() == kChangeLane;
}
void TrafficRuleConfig::set_has_change_lane() {
  _oneof_case_[0] = kChangeLane;
}
void TrafficRuleConfig::clear_change_lane() {
  if (has_change_lane()) {
    delete config_.change_lane_;
    clear_has_config();
  }
}
 const ::apollo::planning::ChangeLaneConfig& TrafficRuleConfig::change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.change_lane)
  return has_change_lane()
      ? *config_.change_lane_
      : ::apollo::planning::ChangeLaneConfig::default_instance();
}
::apollo::planning::ChangeLaneConfig* TrafficRuleConfig::mutable_change_lane() {
  if (!has_change_lane()) {
    clear_config();
    set_has_change_lane();
    config_.change_lane_ = new ::apollo::planning::ChangeLaneConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.change_lane)
  return config_.change_lane_;
}
::apollo::planning::ChangeLaneConfig* TrafficRuleConfig::release_change_lane() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.change_lane)
  if (has_change_lane()) {
    clear_has_config();
    ::apollo::planning::ChangeLaneConfig* temp = config_.change_lane_;
    config_.change_lane_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_change_lane(::apollo::planning::ChangeLaneConfig* change_lane) {
  clear_config();
  if (change_lane) {
    set_has_change_lane();
    config_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.change_lane)
}

// optional .apollo.planning.CrosswalkConfig crosswalk = 5;
bool TrafficRuleConfig::has_crosswalk() const {
  return config_case() == kCrosswalk;
}
void TrafficRuleConfig::set_has_crosswalk() {
  _oneof_case_[0] = kCrosswalk;
}
void TrafficRuleConfig::clear_crosswalk() {
  if (has_crosswalk()) {
    delete config_.crosswalk_;
    clear_has_config();
  }
}
 const ::apollo::planning::CrosswalkConfig& TrafficRuleConfig::crosswalk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.crosswalk)
  return has_crosswalk()
      ? *config_.crosswalk_
      : ::apollo::planning::CrosswalkConfig::default_instance();
}
::apollo::planning::CrosswalkConfig* TrafficRuleConfig::mutable_crosswalk() {
  if (!has_crosswalk()) {
    clear_config();
    set_has_crosswalk();
    config_.crosswalk_ = new ::apollo::planning::CrosswalkConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.crosswalk)
  return config_.crosswalk_;
}
::apollo::planning::CrosswalkConfig* TrafficRuleConfig::release_crosswalk() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.crosswalk)
  if (has_crosswalk()) {
    clear_has_config();
    ::apollo::planning::CrosswalkConfig* temp = config_.crosswalk_;
    config_.crosswalk_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_crosswalk(::apollo::planning::CrosswalkConfig* crosswalk) {
  clear_config();
  if (crosswalk) {
    set_has_crosswalk();
    config_.crosswalk_ = crosswalk;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.crosswalk)
}

// optional .apollo.planning.DestinationConfig destination = 6;
bool TrafficRuleConfig::has_destination() const {
  return config_case() == kDestination;
}
void TrafficRuleConfig::set_has_destination() {
  _oneof_case_[0] = kDestination;
}
void TrafficRuleConfig::clear_destination() {
  if (has_destination()) {
    delete config_.destination_;
    clear_has_config();
  }
}
 const ::apollo::planning::DestinationConfig& TrafficRuleConfig::destination() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.destination)
  return has_destination()
      ? *config_.destination_
      : ::apollo::planning::DestinationConfig::default_instance();
}
::apollo::planning::DestinationConfig* TrafficRuleConfig::mutable_destination() {
  if (!has_destination()) {
    clear_config();
    set_has_destination();
    config_.destination_ = new ::apollo::planning::DestinationConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.destination)
  return config_.destination_;
}
::apollo::planning::DestinationConfig* TrafficRuleConfig::release_destination() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.destination)
  if (has_destination()) {
    clear_has_config();
    ::apollo::planning::DestinationConfig* temp = config_.destination_;
    config_.destination_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_destination(::apollo::planning::DestinationConfig* destination) {
  clear_config();
  if (destination) {
    set_has_destination();
    config_.destination_ = destination;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.destination)
}

// optional .apollo.planning.FrontVehicleConfig front_vehicle = 7;
bool TrafficRuleConfig::has_front_vehicle() const {
  return config_case() == kFrontVehicle;
}
void TrafficRuleConfig::set_has_front_vehicle() {
  _oneof_case_[0] = kFrontVehicle;
}
void TrafficRuleConfig::clear_front_vehicle() {
  if (has_front_vehicle()) {
    delete config_.front_vehicle_;
    clear_has_config();
  }
}
 const ::apollo::planning::FrontVehicleConfig& TrafficRuleConfig::front_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.front_vehicle)
  return has_front_vehicle()
      ? *config_.front_vehicle_
      : ::apollo::planning::FrontVehicleConfig::default_instance();
}
::apollo::planning::FrontVehicleConfig* TrafficRuleConfig::mutable_front_vehicle() {
  if (!has_front_vehicle()) {
    clear_config();
    set_has_front_vehicle();
    config_.front_vehicle_ = new ::apollo::planning::FrontVehicleConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.front_vehicle)
  return config_.front_vehicle_;
}
::apollo::planning::FrontVehicleConfig* TrafficRuleConfig::release_front_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.front_vehicle)
  if (has_front_vehicle()) {
    clear_has_config();
    ::apollo::planning::FrontVehicleConfig* temp = config_.front_vehicle_;
    config_.front_vehicle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_front_vehicle(::apollo::planning::FrontVehicleConfig* front_vehicle) {
  clear_config();
  if (front_vehicle) {
    set_has_front_vehicle();
    config_.front_vehicle_ = front_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.front_vehicle)
}

// optional .apollo.planning.KeepClearConfig keep_clear = 8;
bool TrafficRuleConfig::has_keep_clear() const {
  return config_case() == kKeepClear;
}
void TrafficRuleConfig::set_has_keep_clear() {
  _oneof_case_[0] = kKeepClear;
}
void TrafficRuleConfig::clear_keep_clear() {
  if (has_keep_clear()) {
    delete config_.keep_clear_;
    clear_has_config();
  }
}
 const ::apollo::planning::KeepClearConfig& TrafficRuleConfig::keep_clear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.keep_clear)
  return has_keep_clear()
      ? *config_.keep_clear_
      : ::apollo::planning::KeepClearConfig::default_instance();
}
::apollo::planning::KeepClearConfig* TrafficRuleConfig::mutable_keep_clear() {
  if (!has_keep_clear()) {
    clear_config();
    set_has_keep_clear();
    config_.keep_clear_ = new ::apollo::planning::KeepClearConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.keep_clear)
  return config_.keep_clear_;
}
::apollo::planning::KeepClearConfig* TrafficRuleConfig::release_keep_clear() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.keep_clear)
  if (has_keep_clear()) {
    clear_has_config();
    ::apollo::planning::KeepClearConfig* temp = config_.keep_clear_;
    config_.keep_clear_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_keep_clear(::apollo::planning::KeepClearConfig* keep_clear) {
  clear_config();
  if (keep_clear) {
    set_has_keep_clear();
    config_.keep_clear_ = keep_clear;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.keep_clear)
}

// optional .apollo.planning.PullOverConfig pull_over = 9;
bool TrafficRuleConfig::has_pull_over() const {
  return config_case() == kPullOver;
}
void TrafficRuleConfig::set_has_pull_over() {
  _oneof_case_[0] = kPullOver;
}
void TrafficRuleConfig::clear_pull_over() {
  if (has_pull_over()) {
    delete config_.pull_over_;
    clear_has_config();
  }
}
 const ::apollo::planning::PullOverConfig& TrafficRuleConfig::pull_over() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.pull_over)
  return has_pull_over()
      ? *config_.pull_over_
      : ::apollo::planning::PullOverConfig::default_instance();
}
::apollo::planning::PullOverConfig* TrafficRuleConfig::mutable_pull_over() {
  if (!has_pull_over()) {
    clear_config();
    set_has_pull_over();
    config_.pull_over_ = new ::apollo::planning::PullOverConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.pull_over)
  return config_.pull_over_;
}
::apollo::planning::PullOverConfig* TrafficRuleConfig::release_pull_over() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.pull_over)
  if (has_pull_over()) {
    clear_has_config();
    ::apollo::planning::PullOverConfig* temp = config_.pull_over_;
    config_.pull_over_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_pull_over(::apollo::planning::PullOverConfig* pull_over) {
  clear_config();
  if (pull_over) {
    set_has_pull_over();
    config_.pull_over_ = pull_over;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.pull_over)
}

// optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 10;
bool TrafficRuleConfig::has_reference_line_end() const {
  return config_case() == kReferenceLineEnd;
}
void TrafficRuleConfig::set_has_reference_line_end() {
  _oneof_case_[0] = kReferenceLineEnd;
}
void TrafficRuleConfig::clear_reference_line_end() {
  if (has_reference_line_end()) {
    delete config_.reference_line_end_;
    clear_has_config();
  }
}
 const ::apollo::planning::ReferenceLineEndConfig& TrafficRuleConfig::reference_line_end() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.reference_line_end)
  return has_reference_line_end()
      ? *config_.reference_line_end_
      : ::apollo::planning::ReferenceLineEndConfig::default_instance();
}
::apollo::planning::ReferenceLineEndConfig* TrafficRuleConfig::mutable_reference_line_end() {
  if (!has_reference_line_end()) {
    clear_config();
    set_has_reference_line_end();
    config_.reference_line_end_ = new ::apollo::planning::ReferenceLineEndConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.reference_line_end)
  return config_.reference_line_end_;
}
::apollo::planning::ReferenceLineEndConfig* TrafficRuleConfig::release_reference_line_end() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.reference_line_end)
  if (has_reference_line_end()) {
    clear_has_config();
    ::apollo::planning::ReferenceLineEndConfig* temp = config_.reference_line_end_;
    config_.reference_line_end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_reference_line_end(::apollo::planning::ReferenceLineEndConfig* reference_line_end) {
  clear_config();
  if (reference_line_end) {
    set_has_reference_line_end();
    config_.reference_line_end_ = reference_line_end;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.reference_line_end)
}

// optional .apollo.planning.ReroutingConfig rerouting = 11;
bool TrafficRuleConfig::has_rerouting() const {
  return config_case() == kRerouting;
}
void TrafficRuleConfig::set_has_rerouting() {
  _oneof_case_[0] = kRerouting;
}
void TrafficRuleConfig::clear_rerouting() {
  if (has_rerouting()) {
    delete config_.rerouting_;
    clear_has_config();
  }
}
 const ::apollo::planning::ReroutingConfig& TrafficRuleConfig::rerouting() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.rerouting)
  return has_rerouting()
      ? *config_.rerouting_
      : ::apollo::planning::ReroutingConfig::default_instance();
}
::apollo::planning::ReroutingConfig* TrafficRuleConfig::mutable_rerouting() {
  if (!has_rerouting()) {
    clear_config();
    set_has_rerouting();
    config_.rerouting_ = new ::apollo::planning::ReroutingConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.rerouting)
  return config_.rerouting_;
}
::apollo::planning::ReroutingConfig* TrafficRuleConfig::release_rerouting() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.rerouting)
  if (has_rerouting()) {
    clear_has_config();
    ::apollo::planning::ReroutingConfig* temp = config_.rerouting_;
    config_.rerouting_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_rerouting(::apollo::planning::ReroutingConfig* rerouting) {
  clear_config();
  if (rerouting) {
    set_has_rerouting();
    config_.rerouting_ = rerouting;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.rerouting)
}

// optional .apollo.planning.SignalLightConfig signal_light = 12;
bool TrafficRuleConfig::has_signal_light() const {
  return config_case() == kSignalLight;
}
void TrafficRuleConfig::set_has_signal_light() {
  _oneof_case_[0] = kSignalLight;
}
void TrafficRuleConfig::clear_signal_light() {
  if (has_signal_light()) {
    delete config_.signal_light_;
    clear_has_config();
  }
}
 const ::apollo::planning::SignalLightConfig& TrafficRuleConfig::signal_light() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.signal_light)
  return has_signal_light()
      ? *config_.signal_light_
      : ::apollo::planning::SignalLightConfig::default_instance();
}
::apollo::planning::SignalLightConfig* TrafficRuleConfig::mutable_signal_light() {
  if (!has_signal_light()) {
    clear_config();
    set_has_signal_light();
    config_.signal_light_ = new ::apollo::planning::SignalLightConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.signal_light)
  return config_.signal_light_;
}
::apollo::planning::SignalLightConfig* TrafficRuleConfig::release_signal_light() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.signal_light)
  if (has_signal_light()) {
    clear_has_config();
    ::apollo::planning::SignalLightConfig* temp = config_.signal_light_;
    config_.signal_light_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_signal_light(::apollo::planning::SignalLightConfig* signal_light) {
  clear_config();
  if (signal_light) {
    set_has_signal_light();
    config_.signal_light_ = signal_light;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.signal_light)
}

// optional .apollo.planning.StopSignConfig stop_sign = 13;
bool TrafficRuleConfig::has_stop_sign() const {
  return config_case() == kStopSign;
}
void TrafficRuleConfig::set_has_stop_sign() {
  _oneof_case_[0] = kStopSign;
}
void TrafficRuleConfig::clear_stop_sign() {
  if (has_stop_sign()) {
    delete config_.stop_sign_;
    clear_has_config();
  }
}
 const ::apollo::planning::StopSignConfig& TrafficRuleConfig::stop_sign() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfig.stop_sign)
  return has_stop_sign()
      ? *config_.stop_sign_
      : ::apollo::planning::StopSignConfig::default_instance();
}
::apollo::planning::StopSignConfig* TrafficRuleConfig::mutable_stop_sign() {
  if (!has_stop_sign()) {
    clear_config();
    set_has_stop_sign();
    config_.stop_sign_ = new ::apollo::planning::StopSignConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfig.stop_sign)
  return config_.stop_sign_;
}
::apollo::planning::StopSignConfig* TrafficRuleConfig::release_stop_sign() {
  // @@protoc_insertion_point(field_release:apollo.planning.TrafficRuleConfig.stop_sign)
  if (has_stop_sign()) {
    clear_has_config();
    ::apollo::planning::StopSignConfig* temp = config_.stop_sign_;
    config_.stop_sign_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_stop_sign(::apollo::planning::StopSignConfig* stop_sign) {
  clear_config();
  if (stop_sign) {
    set_has_stop_sign();
    config_.stop_sign_ = stop_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.stop_sign)
}

bool TrafficRuleConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
void TrafficRuleConfig::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
TrafficRuleConfig::ConfigCase TrafficRuleConfig::config_case() const {
  return TrafficRuleConfig::ConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficRuleConfigs::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficRuleConfigs::TrafficRuleConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficRuleConfigs)
}

void TrafficRuleConfigs::InitAsDefaultInstance() {
}

TrafficRuleConfigs::TrafficRuleConfigs(const TrafficRuleConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfigs)
}

void TrafficRuleConfigs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficRuleConfigs::~TrafficRuleConfigs() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfigs)
  SharedDtor();
}

void TrafficRuleConfigs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficRuleConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficRuleConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficRuleConfigs_descriptor_;
}

const TrafficRuleConfigs& TrafficRuleConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2ftraffic_5frule_5fconfig_2eproto();
  return *default_instance_;
}

TrafficRuleConfigs* TrafficRuleConfigs::default_instance_ = NULL;

TrafficRuleConfigs* TrafficRuleConfigs::New(::google::protobuf::Arena* arena) const {
  TrafficRuleConfigs* n = new TrafficRuleConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficRuleConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfigs)
  config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficRuleConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficRuleConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.TrafficRuleConfig config = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficRuleConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficRuleConfigs)
  return false;
#undef DO_
}

void TrafficRuleConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficRuleConfigs)
  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficRuleConfigs)
}

::google::protobuf::uint8* TrafficRuleConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfigs)
  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfigs)
  return target;
}

int TrafficRuleConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfigs)
  int total_size = 0;

  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  total_size += 1 * this->config_size();
  for (int i = 0; i < this->config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficRuleConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficRuleConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficRuleConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficRuleConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficRuleConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficRuleConfigs)
    MergeFrom(*source);
  }
}

void TrafficRuleConfigs::MergeFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  config_.MergeFrom(from.config_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficRuleConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfigs::CopyFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfigs::IsInitialized() const {

  return true;
}

void TrafficRuleConfigs::Swap(TrafficRuleConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficRuleConfigs::InternalSwap(TrafficRuleConfigs* other) {
  config_.UnsafeArenaSwap(&other->config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficRuleConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficRuleConfigs_descriptor_;
  metadata.reflection = TrafficRuleConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficRuleConfigs

// repeated .apollo.planning.TrafficRuleConfig config = 1;
int TrafficRuleConfigs::config_size() const {
  return config_.size();
}
void TrafficRuleConfigs::clear_config() {
  config_.Clear();
}
const ::apollo::planning::TrafficRuleConfig& TrafficRuleConfigs::config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrafficRuleConfigs.config)
  return config_.Get(index);
}
::apollo::planning::TrafficRuleConfig* TrafficRuleConfigs::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.TrafficRuleConfigs.config)
  return config_.Mutable(index);
}
::apollo::planning::TrafficRuleConfig* TrafficRuleConfigs::add_config() {
  // @@protoc_insertion_point(field_add:apollo.planning.TrafficRuleConfigs.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::TrafficRuleConfig >*
TrafficRuleConfigs::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.TrafficRuleConfigs.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TrafficRuleConfig >&
TrafficRuleConfigs::config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.TrafficRuleConfigs.config)
  return config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
