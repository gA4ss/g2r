// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/control_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

namespace {

const ::google::protobuf::Descriptor* LatencyStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatencyStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleLongitudinalDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleLongitudinalDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleLateralDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleLateralDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleMPCDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleMPCDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TurnSignal_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_control_2fcontrol_5fcmd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_control_2fcontrol_5fcmd_2eproto() {
  protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "control/control_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  LatencyStats_descriptor_ = file->message_type(0);
  static const int LatencyStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, total_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, controller_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, total_time_exceeded_),
  };
  LatencyStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LatencyStats_descriptor_,
      LatencyStats::default_instance_,
      LatencyStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(LatencyStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _internal_metadata_),
      -1);
  ControlCommand_descriptor_ = file->message_type(1);
  static const int ControlCommand_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, steering_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, steering_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, parking_brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, reset_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, engine_on_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, trajectory_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, driving_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, gear_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, latency_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, pad_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, engage_advice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, is_in_safe_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, left_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, right_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, high_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, low_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, horn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, turnsignal_),
  };
  ControlCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlCommand_descriptor_,
      ControlCommand::default_instance_,
      ControlCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(ControlCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _internal_metadata_),
      -1);
  SimpleLongitudinalDebug_descriptor_ = file->message_type(2);
  static const int SimpleLongitudinalDebug_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, station_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, station_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, station_error_limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_station_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_controller_input_limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_speed_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_speed_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_acceleration_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, acceleration_cmd_closeloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, acceleration_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, acceleration_lookup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_lookup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, calibration_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, throttle_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, brake_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, is_full_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, slope_offset_compensation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, current_station_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, path_remain_),
  };
  SimpleLongitudinalDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleLongitudinalDebug_descriptor_,
      SimpleLongitudinalDebug::default_instance_,
      SimpleLongitudinalDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleLongitudinalDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, _internal_metadata_),
      -1);
  SimpleLateralDebug_descriptor_ = file->message_type(3);
  static const int SimpleLateralDebug_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, lateral_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, ref_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, heading_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, heading_error_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, lateral_error_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_feedforward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_lateral_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_lateral_rate_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_heading_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_heading_rate_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steering_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, ref_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_limited_),
  };
  SimpleLateralDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleLateralDebug_descriptor_,
      SimpleLateralDebug::default_instance_,
      SimpleLateralDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleLateralDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, _internal_metadata_),
      -1);
  SimpleMPCDebug_descriptor_ = file->message_type(4);
  static const int SimpleMPCDebug_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, lateral_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, ref_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, heading_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, heading_error_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, lateral_error_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_feedforward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_lateral_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_lateral_rate_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_heading_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_heading_rate_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steering_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, ref_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, station_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, station_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, speed_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, speed_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, acceleration_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, is_full_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, station_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, speed_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, acceleration_cmd_closeloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, acceleration_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, acceleration_lookup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, speed_lookup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, calibration_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, matrix_q_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, matrix_r_updated_),
  };
  SimpleMPCDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleMPCDebug_descriptor_,
      SimpleMPCDebug::default_instance_,
      SimpleMPCDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleMPCDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, _internal_metadata_),
      -1);
  InputDebug_descriptor_ = file->message_type(5);
  static const int InputDebug_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, localization_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, canbus_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, trajectory_header_),
  };
  InputDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputDebug_descriptor_,
      InputDebug::default_instance_,
      InputDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(InputDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, _internal_metadata_),
      -1);
  Debug_descriptor_ = file->message_type(6);
  static const int Debug_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, simple_lon_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, simple_lat_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, input_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, simple_mpc_debug_),
  };
  Debug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Debug_descriptor_,
      Debug::default_instance_,
      Debug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _has_bits_[0]),
      -1,
      -1,
      sizeof(Debug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _internal_metadata_),
      -1);
  TurnSignal_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_control_2fcontrol_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LatencyStats_descriptor_, &LatencyStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlCommand_descriptor_, &ControlCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleLongitudinalDebug_descriptor_, &SimpleLongitudinalDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleLateralDebug_descriptor_, &SimpleLateralDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleMPCDebug_descriptor_, &SimpleMPCDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputDebug_descriptor_, &InputDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Debug_descriptor_, &Debug::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_control_2fcontrol_5fcmd_2eproto() {
  delete LatencyStats::default_instance_;
  delete LatencyStats_reflection_;
  delete ControlCommand::default_instance_;
  delete ControlCommand_reflection_;
  delete SimpleLongitudinalDebug::default_instance_;
  delete SimpleLongitudinalDebug_reflection_;
  delete SimpleLateralDebug::default_instance_;
  delete SimpleLateralDebug_reflection_;
  delete SimpleMPCDebug::default_instance_;
  delete SimpleMPCDebug_reflection_;
  delete InputDebug::default_instance_;
  delete InputDebug_reflection_;
  delete Debug::default_instance_;
  delete Debug_reflection_;
}

void protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::canbus::protobuf_AddDesc_canbus_2fchassis_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fvehicle_5fsignal_2eproto();
  ::apollo::control::protobuf_AddDesc_control_2fpad_5fmsg_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fdrive_5fstate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031control/control_cmd.proto\022\016apollo.cont"
    "rol\032\024canbus/chassis.proto\032\023common/header"
    ".proto\032\033common/vehicle_signal.proto\032\025con"
    "trol/pad_msg.proto\032\030common/drive_state.p"
    "roto\"^\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001 "
    "\001(\001\022\032\n\022controller_time_ms\030\002 \003(\001\022\033\n\023total"
    "_time_exceeded\030\003 \001(\010\"\267\006\n\016ControlCommand\022"
    "%\n\006header\030\001 \001(\0132\025.apollo.common.Header\022\020"
    "\n\010throttle\030\003 \001(\001\022\r\n\005brake\030\004 \001(\001\022\025\n\rsteer"
    "ing_rate\030\006 \001(\001\022\027\n\017steering_target\030\007 \001(\001\022"
    "\025\n\rparking_brake\030\010 \001(\010\022\r\n\005speed\030\t \001(\001\022\024\n"
    "\014acceleration\030\n \001(\001\022\027\n\013reset_model\030\020 \001(\010"
    "B\002\030\001\022\025\n\rengine_on_off\030\021 \001(\010\022\033\n\023trajector"
    "y_fraction\030\022 \001(\001\022<\n\014driving_mode\030\023 \001(\0162\""
    ".apollo.canbus.Chassis.DrivingModeB\002\030\001\022:"
    "\n\rgear_location\030\024 \001(\0162#.apollo.canbus.Ch"
    "assis.GearPosition\022$\n\005debug\030\026 \001(\0132\025.apol"
    "lo.control.Debug\022,\n\006signal\030\027 \001(\0132\034.apoll"
    "o.common.VehicleSignal\0223\n\rlatency_stats\030"
    "\030 \001(\0132\034.apollo.control.LatencyStats\022+\n\007p"
    "ad_msg\030\031 \001(\0132\032.apollo.control.PadMessage"
    "\0222\n\rengage_advice\030\032 \001(\0132\033.apollo.common."
    "EngageAdvice\022\036\n\017is_in_safe_mode\030\033 \001(\010:\005f"
    "alse\022\025\n\tleft_turn\030\r \001(\010B\002\030\001\022\026\n\nright_tur"
    "n\030\016 \001(\010B\002\030\001\022\025\n\thigh_beam\030\013 \001(\010B\002\030\001\022\024\n\010lo"
    "w_beam\030\014 \001(\010B\002\030\001\022\020\n\004horn\030\017 \001(\010B\002\030\001\0222\n\ntu"
    "rnsignal\030\025 \001(\0162\032.apollo.control.TurnSign"
    "alB\002\030\001\"\341\004\n\027SimpleLongitudinalDebug\022\031\n\021st"
    "ation_reference\030\001 \001(\001\022\025\n\rstation_error\030\002"
    " \001(\001\022\035\n\025station_error_limited\030\003 \001(\001\022\035\n\025p"
    "review_station_error\030\004 \001(\001\022\027\n\017speed_refe"
    "rence\030\005 \001(\001\022\023\n\013speed_error\030\006 \001(\001\022&\n\036spee"
    "d_controller_input_limited\030\007 \001(\001\022\037\n\027prev"
    "iew_speed_reference\030\010 \001(\001\022\033\n\023preview_spe"
    "ed_error\030\t \001(\001\022&\n\036preview_acceleration_r"
    "eference\030\n \001(\001\022\"\n\032acceleration_cmd_close"
    "loop\030\013 \001(\001\022\030\n\020acceleration_cmd\030\014 \001(\001\022\033\n\023"
    "acceleration_lookup\030\r \001(\001\022\024\n\014speed_looku"
    "p\030\016 \001(\001\022\031\n\021calibration_value\030\017 \001(\001\022\024\n\014th"
    "rottle_cmd\030\020 \001(\001\022\021\n\tbrake_cmd\030\021 \001(\001\022\024\n\014i"
    "s_full_stop\030\022 \001(\010\022!\n\031slope_offset_compen"
    "sation\030\023 \001(\001\022\027\n\017current_station\030\024 \001(\001\022\023\n"
    "\013path_remain\030\025 \001(\001\"\204\004\n\022SimpleLateralDebu"
    "g\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_heading\030"
    "\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_error\030"
    "\004 \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032\n\022lat"
    "eral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001"
    "\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angle_fee"
    "dforward\030\t \001(\001\022(\n steer_angle_lateral_co"
    "ntribution\030\n \001(\001\022-\n%steer_angle_lateral_"
    "rate_contribution\030\013 \001(\001\022(\n steer_angle_h"
    "eading_contribution\030\014 \001(\001\022-\n%steer_angle"
    "_heading_rate_contribution\030\r \001(\001\022\034\n\024stee"
    "r_angle_feedback\030\016 \001(\001\022\031\n\021steering_posit"
    "ion\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023steer_an"
    "gle_limited\030\021 \001(\001\"\210\007\n\016SimpleMPCDebug\022\025\n\r"
    "lateral_error\030\001 \001(\001\022\023\n\013ref_heading\030\002 \001(\001"
    "\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_error\030\004 \001(\001"
    "\022\032\n\022heading_error_rate\030\005 \001(\001\022\032\n\022lateral_"
    "error_rate\030\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001\022\023\n\013s"
    "teer_angle\030\010 \001(\001\022\037\n\027steer_angle_feedforw"
    "ard\030\t \001(\001\022(\n steer_angle_lateral_contrib"
    "ution\030\n \001(\001\022-\n%steer_angle_lateral_rate_"
    "contribution\030\013 \001(\001\022(\n steer_angle_headin"
    "g_contribution\030\014 \001(\001\022-\n%steer_angle_head"
    "ing_rate_contribution\030\r \001(\001\022\034\n\024steer_ang"
    "le_feedback\030\016 \001(\001\022\031\n\021steering_position\030\017"
    " \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023steer_angle_l"
    "imited\030\021 \001(\001\022\031\n\021station_reference\030\022 \001(\001\022"
    "\025\n\rstation_error\030\023 \001(\001\022\027\n\017speed_referenc"
    "e\030\024 \001(\001\022\023\n\013speed_error\030\025 \001(\001\022\036\n\026accelera"
    "tion_reference\030\026 \001(\001\022\024\n\014is_full_stop\030\027 \001"
    "(\010\022\030\n\020station_feedback\030\030 \001(\001\022\026\n\016speed_fe"
    "edback\030\031 \001(\001\022\"\n\032acceleration_cmd_closelo"
    "op\030\032 \001(\001\022\030\n\020acceleration_cmd\030\033 \001(\001\022\033\n\023ac"
    "celeration_lookup\030\034 \001(\001\022\024\n\014speed_lookup\030"
    "\035 \001(\001\022\031\n\021calibration_value\030\036 \001(\001\022\030\n\020matr"
    "ix_q_updated\030\037 \003(\001\022\030\n\020matrix_r_updated\030 "
    " \003(\001\"\240\001\n\nInputDebug\0222\n\023localization_head"
    "er\030\001 \001(\0132\025.apollo.common.Header\022,\n\rcanbu"
    "s_header\030\002 \001(\0132\025.apollo.common.Header\0220\n"
    "\021trajectory_header\030\003 \001(\0132\025.apollo.common"
    ".Header\"\363\001\n\005Debug\022A\n\020simple_lon_debug\030\001 "
    "\001(\0132\'.apollo.control.SimpleLongitudinalD"
    "ebug\022<\n\020simple_lat_debug\030\002 \001(\0132\".apollo."
    "control.SimpleLateralDebug\022/\n\013input_debu"
    "g\030\003 \001(\0132\032.apollo.control.InputDebug\0228\n\020s"
    "imple_mpc_debug\030\004 \001(\0132\036.apollo.control.S"
    "impleMPCDebug*:\n\nTurnSignal\022\r\n\tTURN_NONE"
    "\020\000\022\r\n\tTURN_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002", 3593);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control/control_cmd.proto", &protobuf_RegisterTypes);
  LatencyStats::default_instance_ = new LatencyStats();
  ControlCommand::default_instance_ = new ControlCommand();
  SimpleLongitudinalDebug::default_instance_ = new SimpleLongitudinalDebug();
  SimpleLateralDebug::default_instance_ = new SimpleLateralDebug();
  SimpleMPCDebug::default_instance_ = new SimpleMPCDebug();
  InputDebug::default_instance_ = new InputDebug();
  Debug::default_instance_ = new Debug();
  LatencyStats::default_instance_->InitAsDefaultInstance();
  ControlCommand::default_instance_->InitAsDefaultInstance();
  SimpleLongitudinalDebug::default_instance_->InitAsDefaultInstance();
  SimpleLateralDebug::default_instance_->InitAsDefaultInstance();
  SimpleMPCDebug::default_instance_->InitAsDefaultInstance();
  InputDebug::default_instance_->InitAsDefaultInstance();
  Debug::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_control_2fcontrol_5fcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_control_2fcontrol_5fcmd_2eproto {
  StaticDescriptorInitializer_control_2fcontrol_5fcmd_2eproto() {
    protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  }
} static_descriptor_initializer_control_2fcontrol_5fcmd_2eproto_;
const ::google::protobuf::EnumDescriptor* TurnSignal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnSignal_descriptor_;
}
bool TurnSignal_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kControllerTimeMsFieldNumber;
const int LatencyStats::kTotalTimeExceededFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LatencyStats)
}

void LatencyStats::InitAsDefaultInstance() {
}

LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatencyStats)
}

void LatencyStats::SharedCtor() {
  _cached_size_ = 0;
  total_time_ms_ = 0;
  total_time_exceeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.control.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatencyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatencyStats_descriptor_;
}

const LatencyStats& LatencyStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  return *default_instance_;
}

LatencyStats* LatencyStats::default_instance_ = NULL;

LatencyStats* LatencyStats::New(::google::protobuf::Arena* arena) const {
  LatencyStats* n = new LatencyStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatencyStats)
  if (_has_bits_[0 / 32] & 5u) {
    total_time_ms_ = 0;
    total_time_exceeded_ = false;
  }
  controller_time_ms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LatencyStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
          set_has_total_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_controller_time_ms;
        break;
      }

      // repeated double controller_time_ms = 2;
      case 2: {
        if (tag == 17) {
         parse_controller_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_controller_time_ms())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_controller_time_ms())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_controller_time_ms;
        if (input->ExpectTag(24)) goto parse_total_time_exceeded;
        break;
      }

      // optional bool total_time_exceeded = 3;
      case 3: {
        if (tag == 24) {
         parse_total_time_exceeded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &total_time_exceeded_)));
          set_has_total_time_exceeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LatencyStats)
  // optional double total_time_ms = 1;
  if (has_total_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated double controller_time_ms = 2;
  for (int i = 0; i < this->controller_time_ms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->controller_time_ms(i), output);
  }

  // optional bool total_time_exceeded = 3;
  if (has_total_time_exceeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->total_time_exceeded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatencyStats)
  // optional double total_time_ms = 1;
  if (has_total_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated double controller_time_ms = 2;
  for (int i = 0; i < this->controller_time_ms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->controller_time_ms(i), target);
  }

  // optional bool total_time_exceeded = 3;
  if (has_total_time_exceeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->total_time_exceeded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatencyStats)
  return target;
}

int LatencyStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatencyStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional double total_time_ms = 1;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

    // optional bool total_time_exceeded = 3;
    if (has_total_time_exceeded()) {
      total_size += 1 + 1;
    }

  }
  // repeated double controller_time_ms = 2;
  {
    int data_size = 0;
    data_size = 8 * this->controller_time_ms_size();
    total_size += 1 * this->controller_time_ms_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LatencyStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LatencyStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatencyStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  controller_time_ms_.MergeFrom(from.controller_time_ms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_time_ms()) {
      set_total_time_ms(from.total_time_ms());
    }
    if (from.has_total_time_exceeded()) {
      set_total_time_exceeded(from.total_time_exceeded());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {

  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  std::swap(total_time_ms_, other->total_time_ms_);
  controller_time_ms_.UnsafeArenaSwap(&other->controller_time_ms_);
  std::swap(total_time_exceeded_, other->total_time_exceeded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatencyStats_descriptor_;
  metadata.reflection = LatencyStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyStats

// optional double total_time_ms = 1;
bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatencyStats::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void LatencyStats::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
 double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatencyStats.total_time_ms)
  return total_time_ms_;
}
 void LatencyStats::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatencyStats.total_time_ms)
}

// repeated double controller_time_ms = 2;
int LatencyStats::controller_time_ms_size() const {
  return controller_time_ms_.size();
}
void LatencyStats::clear_controller_time_ms() {
  controller_time_ms_.Clear();
}
 double LatencyStats::controller_time_ms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.LatencyStats.controller_time_ms)
  return controller_time_ms_.Get(index);
}
 void LatencyStats::set_controller_time_ms(int index, double value) {
  controller_time_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.LatencyStats.controller_time_ms)
}
 void LatencyStats::add_controller_time_ms(double value) {
  controller_time_ms_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.LatencyStats.controller_time_ms)
}
 const ::google::protobuf::RepeatedField< double >&
LatencyStats::controller_time_ms() const {
  // @@protoc_insertion_point(field_list:apollo.control.LatencyStats.controller_time_ms)
  return controller_time_ms_;
}
 ::google::protobuf::RepeatedField< double >*
LatencyStats::mutable_controller_time_ms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.LatencyStats.controller_time_ms)
  return &controller_time_ms_;
}

// optional bool total_time_exceeded = 3;
bool LatencyStats::has_total_time_exceeded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatencyStats::set_has_total_time_exceeded() {
  _has_bits_[0] |= 0x00000004u;
}
void LatencyStats::clear_has_total_time_exceeded() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatencyStats::clear_total_time_exceeded() {
  total_time_exceeded_ = false;
  clear_has_total_time_exceeded();
}
 bool LatencyStats::total_time_exceeded() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatencyStats.total_time_exceeded)
  return total_time_exceeded_;
}
 void LatencyStats::set_total_time_exceeded(bool value) {
  set_has_total_time_exceeded();
  total_time_exceeded_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatencyStats.total_time_exceeded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCommand::kHeaderFieldNumber;
const int ControlCommand::kThrottleFieldNumber;
const int ControlCommand::kBrakeFieldNumber;
const int ControlCommand::kSteeringRateFieldNumber;
const int ControlCommand::kSteeringTargetFieldNumber;
const int ControlCommand::kParkingBrakeFieldNumber;
const int ControlCommand::kSpeedFieldNumber;
const int ControlCommand::kAccelerationFieldNumber;
const int ControlCommand::kResetModelFieldNumber;
const int ControlCommand::kEngineOnOffFieldNumber;
const int ControlCommand::kTrajectoryFractionFieldNumber;
const int ControlCommand::kDrivingModeFieldNumber;
const int ControlCommand::kGearLocationFieldNumber;
const int ControlCommand::kDebugFieldNumber;
const int ControlCommand::kSignalFieldNumber;
const int ControlCommand::kLatencyStatsFieldNumber;
const int ControlCommand::kPadMsgFieldNumber;
const int ControlCommand::kEngageAdviceFieldNumber;
const int ControlCommand::kIsInSafeModeFieldNumber;
const int ControlCommand::kLeftTurnFieldNumber;
const int ControlCommand::kRightTurnFieldNumber;
const int ControlCommand::kHighBeamFieldNumber;
const int ControlCommand::kLowBeamFieldNumber;
const int ControlCommand::kHornFieldNumber;
const int ControlCommand::kTurnsignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCommand::ControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.ControlCommand)
}

void ControlCommand::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  debug_ = const_cast< ::apollo::control::Debug*>(&::apollo::control::Debug::default_instance());
  signal_ = const_cast< ::apollo::common::VehicleSignal*>(&::apollo::common::VehicleSignal::default_instance());
  latency_stats_ = const_cast< ::apollo::control::LatencyStats*>(&::apollo::control::LatencyStats::default_instance());
  pad_msg_ = const_cast< ::apollo::control::PadMessage*>(&::apollo::control::PadMessage::default_instance());
  engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(&::apollo::common::EngageAdvice::default_instance());
}

ControlCommand::ControlCommand(const ControlCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlCommand)
}

void ControlCommand::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  throttle_ = 0;
  brake_ = 0;
  steering_rate_ = 0;
  steering_target_ = 0;
  parking_brake_ = false;
  speed_ = 0;
  acceleration_ = 0;
  reset_model_ = false;
  engine_on_off_ = false;
  trajectory_fraction_ = 0;
  driving_mode_ = 0;
  gear_location_ = 0;
  debug_ = NULL;
  signal_ = NULL;
  latency_stats_ = NULL;
  pad_msg_ = NULL;
  engage_advice_ = NULL;
  is_in_safe_mode_ = false;
  left_turn_ = false;
  right_turn_ = false;
  high_beam_ = false;
  low_beam_ = false;
  horn_ = false;
  turnsignal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete debug_;
    delete signal_;
    delete latency_stats_;
    delete pad_msg_;
    delete engage_advice_;
  }
}

void ControlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCommand_descriptor_;
}

const ControlCommand& ControlCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  return *default_instance_;
}

ControlCommand* ControlCommand::default_instance_ = NULL;

ControlCommand* ControlCommand::New(::google::protobuf::Arena* arena) const {
  ControlCommand* n = new ControlCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ControlCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControlCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(throttle_, acceleration_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    parking_brake_ = false;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(reset_model_, engine_on_off_);
    trajectory_fraction_ = 0;
    driving_mode_ = 0;
    gear_location_ = 0;
    if (has_debug()) {
      if (debug_ != NULL) debug_->::apollo::control::Debug::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
    }
    if (has_latency_stats()) {
      if (latency_stats_ != NULL) latency_stats_->::apollo::control::LatencyStats::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(left_turn_, horn_);
    if (has_pad_msg()) {
      if (pad_msg_ != NULL) pad_msg_->::apollo::control::PadMessage::Clear();
    }
    if (has_engage_advice()) {
      if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
    }
    is_in_safe_mode_ = false;
  }
  turnsignal_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.ControlCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_throttle;
        break;
      }

      // optional double throttle = 3;
      case 3: {
        if (tag == 25) {
         parse_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_)));
          set_has_throttle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_brake;
        break;
      }

      // optional double brake = 4;
      case 4: {
        if (tag == 33) {
         parse_brake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_)));
          set_has_brake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_steering_rate;
        break;
      }

      // optional double steering_rate = 6;
      case 6: {
        if (tag == 49) {
         parse_steering_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_rate_)));
          set_has_steering_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_steering_target;
        break;
      }

      // optional double steering_target = 7;
      case 7: {
        if (tag == 57) {
         parse_steering_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_target_)));
          set_has_steering_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_parking_brake;
        break;
      }

      // optional bool parking_brake = 8;
      case 8: {
        if (tag == 64) {
         parse_parking_brake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
          set_has_parking_brake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_speed;
        break;
      }

      // optional double speed = 9;
      case 9: {
        if (tag == 73) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_acceleration;
        break;
      }

      // optional double acceleration = 10;
      case 10: {
        if (tag == 81) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_high_beam;
        break;
      }

      // optional bool high_beam = 11 [deprecated = true];
      case 11: {
        if (tag == 88) {
         parse_high_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));
          set_has_high_beam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_low_beam;
        break;
      }

      // optional bool low_beam = 12 [deprecated = true];
      case 12: {
        if (tag == 96) {
         parse_low_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));
          set_has_low_beam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_left_turn;
        break;
      }

      // optional bool left_turn = 13 [deprecated = true];
      case 13: {
        if (tag == 104) {
         parse_left_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_)));
          set_has_left_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_right_turn;
        break;
      }

      // optional bool right_turn = 14 [deprecated = true];
      case 14: {
        if (tag == 112) {
         parse_right_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_)));
          set_has_right_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_horn;
        break;
      }

      // optional bool horn = 15 [deprecated = true];
      case 15: {
        if (tag == 120) {
         parse_horn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
          set_has_horn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_reset_model;
        break;
      }

      // optional bool reset_model = 16 [deprecated = true];
      case 16: {
        if (tag == 128) {
         parse_reset_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_model_)));
          set_has_reset_model();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_engine_on_off;
        break;
      }

      // optional bool engine_on_off = 17;
      case 17: {
        if (tag == 136) {
         parse_engine_on_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_on_off_)));
          set_has_engine_on_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_trajectory_fraction;
        break;
      }

      // optional double trajectory_fraction = 18;
      case 18: {
        if (tag == 145) {
         parse_trajectory_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_fraction_)));
          set_has_trajectory_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_driving_mode;
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
      case 19: {
        if (tag == 152) {
         parse_driving_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_gear_location;
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
      case 20: {
        if (tag == 160) {
         parse_gear_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_turnsignal;
        break;
      }

      // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
      case 21: {
        if (tag == 168) {
         parse_turnsignal:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::control::TurnSignal_IsValid(value)) {
            set_turnsignal(static_cast< ::apollo::control::TurnSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_debug;
        break;
      }

      // optional .apollo.control.Debug debug = 22;
      case 22: {
        if (tag == 178) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_signal;
        break;
      }

      // optional .apollo.common.VehicleSignal signal = 23;
      case 23: {
        if (tag == 186) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_latency_stats;
        break;
      }

      // optional .apollo.control.LatencyStats latency_stats = 24;
      case 24: {
        if (tag == 194) {
         parse_latency_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_pad_msg;
        break;
      }

      // optional .apollo.control.PadMessage pad_msg = 25;
      case 25: {
        if (tag == 202) {
         parse_pad_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_engage_advice;
        break;
      }

      // optional .apollo.common.EngageAdvice engage_advice = 26;
      case 26: {
        if (tag == 210) {
         parse_engage_advice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_in_safe_mode;
        break;
      }

      // optional bool is_in_safe_mode = 27 [default = false];
      case 27: {
        if (tag == 216) {
         parse_is_in_safe_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_safe_mode_)));
          set_has_is_in_safe_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.ControlCommand)
  return false;
#undef DO_
}

void ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.ControlCommand)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double throttle = 3;
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle(), output);
  }

  // optional double brake = 4;
  if (has_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->brake(), output);
  }

  // optional double steering_rate = 6;
  if (has_steering_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steering_rate(), output);
  }

  // optional double steering_target = 7;
  if (has_steering_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->steering_target(), output);
  }

  // optional bool parking_brake = 8;
  if (has_parking_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->parking_brake(), output);
  }

  // optional double speed = 9;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed(), output);
  }

  // optional double acceleration = 10;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->acceleration(), output);
  }

  // optional bool high_beam = 11 [deprecated = true];
  if (has_high_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->high_beam(), output);
  }

  // optional bool low_beam = 12 [deprecated = true];
  if (has_low_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->low_beam(), output);
  }

  // optional bool left_turn = 13 [deprecated = true];
  if (has_left_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->left_turn(), output);
  }

  // optional bool right_turn = 14 [deprecated = true];
  if (has_right_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->right_turn(), output);
  }

  // optional bool horn = 15 [deprecated = true];
  if (has_horn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->horn(), output);
  }

  // optional bool reset_model = 16 [deprecated = true];
  if (has_reset_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->reset_model(), output);
  }

  // optional bool engine_on_off = 17;
  if (has_engine_on_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->engine_on_off(), output);
  }

  // optional double trajectory_fraction = 18;
  if (has_trajectory_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->trajectory_fraction(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
  if (has_driving_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->driving_mode(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (has_gear_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->gear_location(), output);
  }

  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (has_turnsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->turnsignal(), output);
  }

  // optional .apollo.control.Debug debug = 22;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->debug_, output);
  }

  // optional .apollo.common.VehicleSignal signal = 23;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->signal_, output);
  }

  // optional .apollo.control.LatencyStats latency_stats = 24;
  if (has_latency_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->latency_stats_, output);
  }

  // optional .apollo.control.PadMessage pad_msg = 25;
  if (has_pad_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->pad_msg_, output);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 26;
  if (has_engage_advice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->engage_advice_, output);
  }

  // optional bool is_in_safe_mode = 27 [default = false];
  if (has_is_in_safe_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_in_safe_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.ControlCommand)
}

::google::protobuf::uint8* ControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlCommand)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional double throttle = 3;
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle(), target);
  }

  // optional double brake = 4;
  if (has_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->brake(), target);
  }

  // optional double steering_rate = 6;
  if (has_steering_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steering_rate(), target);
  }

  // optional double steering_target = 7;
  if (has_steering_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->steering_target(), target);
  }

  // optional bool parking_brake = 8;
  if (has_parking_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->parking_brake(), target);
  }

  // optional double speed = 9;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed(), target);
  }

  // optional double acceleration = 10;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->acceleration(), target);
  }

  // optional bool high_beam = 11 [deprecated = true];
  if (has_high_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->high_beam(), target);
  }

  // optional bool low_beam = 12 [deprecated = true];
  if (has_low_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->low_beam(), target);
  }

  // optional bool left_turn = 13 [deprecated = true];
  if (has_left_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->left_turn(), target);
  }

  // optional bool right_turn = 14 [deprecated = true];
  if (has_right_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->right_turn(), target);
  }

  // optional bool horn = 15 [deprecated = true];
  if (has_horn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->horn(), target);
  }

  // optional bool reset_model = 16 [deprecated = true];
  if (has_reset_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->reset_model(), target);
  }

  // optional bool engine_on_off = 17;
  if (has_engine_on_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->engine_on_off(), target);
  }

  // optional double trajectory_fraction = 18;
  if (has_trajectory_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->trajectory_fraction(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
  if (has_driving_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (has_gear_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->gear_location(), target);
  }

  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (has_turnsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->turnsignal(), target);
  }

  // optional .apollo.control.Debug debug = 22;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->debug_, false, target);
  }

  // optional .apollo.common.VehicleSignal signal = 23;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->signal_, false, target);
  }

  // optional .apollo.control.LatencyStats latency_stats = 24;
  if (has_latency_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->latency_stats_, false, target);
  }

  // optional .apollo.control.PadMessage pad_msg = 25;
  if (has_pad_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->pad_msg_, false, target);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 26;
  if (has_engage_advice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->engage_advice_, false, target);
  }

  // optional bool is_in_safe_mode = 27 [default = false];
  if (has_is_in_safe_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_in_safe_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlCommand)
  return target;
}

int ControlCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlCommand)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional double throttle = 3;
    if (has_throttle()) {
      total_size += 1 + 8;
    }

    // optional double brake = 4;
    if (has_brake()) {
      total_size += 1 + 8;
    }

    // optional double steering_rate = 6;
    if (has_steering_rate()) {
      total_size += 1 + 8;
    }

    // optional double steering_target = 7;
    if (has_steering_target()) {
      total_size += 1 + 8;
    }

    // optional bool parking_brake = 8;
    if (has_parking_brake()) {
      total_size += 1 + 1;
    }

    // optional double speed = 9;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 10;
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool reset_model = 16 [deprecated = true];
    if (has_reset_model()) {
      total_size += 2 + 1;
    }

    // optional bool engine_on_off = 17;
    if (has_engine_on_off()) {
      total_size += 2 + 1;
    }

    // optional double trajectory_fraction = 18;
    if (has_trajectory_fraction()) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
    if (has_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
    if (has_gear_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional .apollo.control.Debug debug = 22;
    if (has_debug()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_);
    }

    // optional .apollo.common.VehicleSignal signal = 23;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .apollo.control.LatencyStats latency_stats = 24;
    if (has_latency_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->latency_stats_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .apollo.control.PadMessage pad_msg = 25;
    if (has_pad_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pad_msg_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 26;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engage_advice_);
    }

    // optional bool is_in_safe_mode = 27 [default = false];
    if (has_is_in_safe_mode()) {
      total_size += 2 + 1;
    }

    // optional bool left_turn = 13 [deprecated = true];
    if (has_left_turn()) {
      total_size += 1 + 1;
    }

    // optional bool right_turn = 14 [deprecated = true];
    if (has_right_turn()) {
      total_size += 1 + 1;
    }

    // optional bool high_beam = 11 [deprecated = true];
    if (has_high_beam()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam = 12 [deprecated = true];
    if (has_low_beam()) {
      total_size += 1 + 1;
    }

    // optional bool horn = 15 [deprecated = true];
    if (has_horn()) {
      total_size += 1 + 1;
    }

  }
  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (has_turnsignal()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turnsignal());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.ControlCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ControlCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.ControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_throttle()) {
      set_throttle(from.throttle());
    }
    if (from.has_brake()) {
      set_brake(from.brake());
    }
    if (from.has_steering_rate()) {
      set_steering_rate(from.steering_rate());
    }
    if (from.has_steering_target()) {
      set_steering_target(from.steering_target());
    }
    if (from.has_parking_brake()) {
      set_parking_brake(from.parking_brake());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reset_model()) {
      set_reset_model(from.reset_model());
    }
    if (from.has_engine_on_off()) {
      set_engine_on_off(from.engine_on_off());
    }
    if (from.has_trajectory_fraction()) {
      set_trajectory_fraction(from.trajectory_fraction());
    }
    if (from.has_driving_mode()) {
      set_driving_mode(from.driving_mode());
    }
    if (from.has_gear_location()) {
      set_gear_location(from.gear_location());
    }
    if (from.has_debug()) {
      mutable_debug()->::apollo::control::Debug::MergeFrom(from.debug());
    }
    if (from.has_signal()) {
      mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (from.has_latency_stats()) {
      mutable_latency_stats()->::apollo::control::LatencyStats::MergeFrom(from.latency_stats());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pad_msg()) {
      mutable_pad_msg()->::apollo::control::PadMessage::MergeFrom(from.pad_msg());
    }
    if (from.has_engage_advice()) {
      mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (from.has_is_in_safe_mode()) {
      set_is_in_safe_mode(from.is_in_safe_mode());
    }
    if (from.has_left_turn()) {
      set_left_turn(from.left_turn());
    }
    if (from.has_right_turn()) {
      set_right_turn(from.right_turn());
    }
    if (from.has_high_beam()) {
      set_high_beam(from.high_beam());
    }
    if (from.has_low_beam()) {
      set_low_beam(from.low_beam());
    }
    if (from.has_horn()) {
      set_horn(from.horn());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_turnsignal()) {
      set_turnsignal(from.turnsignal());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {

  return true;
}

void ControlCommand::Swap(ControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCommand::InternalSwap(ControlCommand* other) {
  std::swap(header_, other->header_);
  std::swap(throttle_, other->throttle_);
  std::swap(brake_, other->brake_);
  std::swap(steering_rate_, other->steering_rate_);
  std::swap(steering_target_, other->steering_target_);
  std::swap(parking_brake_, other->parking_brake_);
  std::swap(speed_, other->speed_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(reset_model_, other->reset_model_);
  std::swap(engine_on_off_, other->engine_on_off_);
  std::swap(trajectory_fraction_, other->trajectory_fraction_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(debug_, other->debug_);
  std::swap(signal_, other->signal_);
  std::swap(latency_stats_, other->latency_stats_);
  std::swap(pad_msg_, other->pad_msg_);
  std::swap(engage_advice_, other->engage_advice_);
  std::swap(is_in_safe_mode_, other->is_in_safe_mode_);
  std::swap(left_turn_, other->left_turn_);
  std::swap(right_turn_, other->right_turn_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(low_beam_, other->low_beam_);
  std::swap(horn_, other->horn_);
  std::swap(turnsignal_, other->turnsignal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlCommand_descriptor_;
  metadata.reflection = ControlCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlCommand

// optional .apollo.common.Header header = 1;
bool ControlCommand::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControlCommand::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ControlCommand::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControlCommand::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& ControlCommand::header() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* ControlCommand::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.header)
  return header_;
}
::apollo::common::Header* ControlCommand::release_header() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.header)
}

// optional double throttle = 3;
bool ControlCommand::has_throttle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControlCommand::set_has_throttle() {
  _has_bits_[0] |= 0x00000002u;
}
void ControlCommand::clear_has_throttle() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControlCommand::clear_throttle() {
  throttle_ = 0;
  clear_has_throttle();
}
 double ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.throttle)
  return throttle_;
}
 void ControlCommand::set_throttle(double value) {
  set_has_throttle();
  throttle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.throttle)
}

// optional double brake = 4;
bool ControlCommand::has_brake() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ControlCommand::set_has_brake() {
  _has_bits_[0] |= 0x00000004u;
}
void ControlCommand::clear_has_brake() {
  _has_bits_[0] &= ~0x00000004u;
}
void ControlCommand::clear_brake() {
  brake_ = 0;
  clear_has_brake();
}
 double ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.brake)
  return brake_;
}
 void ControlCommand::set_brake(double value) {
  set_has_brake();
  brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.brake)
}

// optional double steering_rate = 6;
bool ControlCommand::has_steering_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ControlCommand::set_has_steering_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void ControlCommand::clear_has_steering_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void ControlCommand::clear_steering_rate() {
  steering_rate_ = 0;
  clear_has_steering_rate();
}
 double ControlCommand::steering_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.steering_rate)
  return steering_rate_;
}
 void ControlCommand::set_steering_rate(double value) {
  set_has_steering_rate();
  steering_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.steering_rate)
}

// optional double steering_target = 7;
bool ControlCommand::has_steering_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ControlCommand::set_has_steering_target() {
  _has_bits_[0] |= 0x00000010u;
}
void ControlCommand::clear_has_steering_target() {
  _has_bits_[0] &= ~0x00000010u;
}
void ControlCommand::clear_steering_target() {
  steering_target_ = 0;
  clear_has_steering_target();
}
 double ControlCommand::steering_target() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.steering_target)
  return steering_target_;
}
 void ControlCommand::set_steering_target(double value) {
  set_has_steering_target();
  steering_target_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.steering_target)
}

// optional bool parking_brake = 8;
bool ControlCommand::has_parking_brake() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ControlCommand::set_has_parking_brake() {
  _has_bits_[0] |= 0x00000020u;
}
void ControlCommand::clear_has_parking_brake() {
  _has_bits_[0] &= ~0x00000020u;
}
void ControlCommand::clear_parking_brake() {
  parking_brake_ = false;
  clear_has_parking_brake();
}
 bool ControlCommand::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.parking_brake)
  return parking_brake_;
}
 void ControlCommand::set_parking_brake(bool value) {
  set_has_parking_brake();
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.parking_brake)
}

// optional double speed = 9;
bool ControlCommand::has_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ControlCommand::set_has_speed() {
  _has_bits_[0] |= 0x00000040u;
}
void ControlCommand::clear_has_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
void ControlCommand::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 double ControlCommand::speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.speed)
  return speed_;
}
 void ControlCommand::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.speed)
}

// optional double acceleration = 10;
bool ControlCommand::has_acceleration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ControlCommand::set_has_acceleration() {
  _has_bits_[0] |= 0x00000080u;
}
void ControlCommand::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000080u;
}
void ControlCommand::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
 double ControlCommand::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.acceleration)
  return acceleration_;
}
 void ControlCommand::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.acceleration)
}

// optional bool reset_model = 16 [deprecated = true];
bool ControlCommand::has_reset_model() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ControlCommand::set_has_reset_model() {
  _has_bits_[0] |= 0x00000100u;
}
void ControlCommand::clear_has_reset_model() {
  _has_bits_[0] &= ~0x00000100u;
}
void ControlCommand::clear_reset_model() {
  reset_model_ = false;
  clear_has_reset_model();
}
 bool ControlCommand::reset_model() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.reset_model)
  return reset_model_;
}
 void ControlCommand::set_reset_model(bool value) {
  set_has_reset_model();
  reset_model_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.reset_model)
}

// optional bool engine_on_off = 17;
bool ControlCommand::has_engine_on_off() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ControlCommand::set_has_engine_on_off() {
  _has_bits_[0] |= 0x00000200u;
}
void ControlCommand::clear_has_engine_on_off() {
  _has_bits_[0] &= ~0x00000200u;
}
void ControlCommand::clear_engine_on_off() {
  engine_on_off_ = false;
  clear_has_engine_on_off();
}
 bool ControlCommand::engine_on_off() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.engine_on_off)
  return engine_on_off_;
}
 void ControlCommand::set_engine_on_off(bool value) {
  set_has_engine_on_off();
  engine_on_off_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.engine_on_off)
}

// optional double trajectory_fraction = 18;
bool ControlCommand::has_trajectory_fraction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ControlCommand::set_has_trajectory_fraction() {
  _has_bits_[0] |= 0x00000400u;
}
void ControlCommand::clear_has_trajectory_fraction() {
  _has_bits_[0] &= ~0x00000400u;
}
void ControlCommand::clear_trajectory_fraction() {
  trajectory_fraction_ = 0;
  clear_has_trajectory_fraction();
}
 double ControlCommand::trajectory_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.trajectory_fraction)
  return trajectory_fraction_;
}
 void ControlCommand::set_trajectory_fraction(double value) {
  set_has_trajectory_fraction();
  trajectory_fraction_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.trajectory_fraction)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
bool ControlCommand::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ControlCommand::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000800u;
}
void ControlCommand::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
void ControlCommand::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
 ::apollo::canbus::Chassis_DrivingMode ControlCommand::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
 void ControlCommand::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.driving_mode)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
bool ControlCommand::has_gear_location() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ControlCommand::set_has_gear_location() {
  _has_bits_[0] |= 0x00001000u;
}
void ControlCommand::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00001000u;
}
void ControlCommand::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
 ::apollo::canbus::Chassis_GearPosition ControlCommand::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
 void ControlCommand::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.gear_location)
}

// optional .apollo.control.Debug debug = 22;
bool ControlCommand::has_debug() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ControlCommand::set_has_debug() {
  _has_bits_[0] |= 0x00002000u;
}
void ControlCommand::clear_has_debug() {
  _has_bits_[0] &= ~0x00002000u;
}
void ControlCommand::clear_debug() {
  if (debug_ != NULL) debug_->::apollo::control::Debug::Clear();
  clear_has_debug();
}
const ::apollo::control::Debug& ControlCommand::debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
::apollo::control::Debug* ControlCommand::mutable_debug() {
  set_has_debug();
  if (debug_ == NULL) {
    debug_ = new ::apollo::control::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.debug)
  return debug_;
}
::apollo::control::Debug* ControlCommand::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.debug)
  clear_has_debug();
  ::apollo::control::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_debug(::apollo::control::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.debug)
}

// optional .apollo.common.VehicleSignal signal = 23;
bool ControlCommand::has_signal() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ControlCommand::set_has_signal() {
  _has_bits_[0] |= 0x00004000u;
}
void ControlCommand::clear_has_signal() {
  _has_bits_[0] &= ~0x00004000u;
}
void ControlCommand::clear_signal() {
  if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_signal();
}
const ::apollo::common::VehicleSignal& ControlCommand::signal() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
::apollo::common::VehicleSignal* ControlCommand::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.signal)
  return signal_;
}
::apollo::common::VehicleSignal* ControlCommand::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.signal)
  clear_has_signal();
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.signal)
}

// optional .apollo.control.LatencyStats latency_stats = 24;
bool ControlCommand::has_latency_stats() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ControlCommand::set_has_latency_stats() {
  _has_bits_[0] |= 0x00008000u;
}
void ControlCommand::clear_has_latency_stats() {
  _has_bits_[0] &= ~0x00008000u;
}
void ControlCommand::clear_latency_stats() {
  if (latency_stats_ != NULL) latency_stats_->::apollo::control::LatencyStats::Clear();
  clear_has_latency_stats();
}
const ::apollo::control::LatencyStats& ControlCommand::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_ : *default_instance_->latency_stats_;
}
::apollo::control::LatencyStats* ControlCommand::mutable_latency_stats() {
  set_has_latency_stats();
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::control::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.latency_stats)
  return latency_stats_;
}
::apollo::control::LatencyStats* ControlCommand::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.latency_stats)
  clear_has_latency_stats();
  ::apollo::control::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_latency_stats(::apollo::control::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    set_has_latency_stats();
  } else {
    clear_has_latency_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.latency_stats)
}

// optional .apollo.control.PadMessage pad_msg = 25;
bool ControlCommand::has_pad_msg() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ControlCommand::set_has_pad_msg() {
  _has_bits_[0] |= 0x00010000u;
}
void ControlCommand::clear_has_pad_msg() {
  _has_bits_[0] &= ~0x00010000u;
}
void ControlCommand::clear_pad_msg() {
  if (pad_msg_ != NULL) pad_msg_->::apollo::control::PadMessage::Clear();
  clear_has_pad_msg();
}
const ::apollo::control::PadMessage& ControlCommand::pad_msg() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.pad_msg)
  return pad_msg_ != NULL ? *pad_msg_ : *default_instance_->pad_msg_;
}
::apollo::control::PadMessage* ControlCommand::mutable_pad_msg() {
  set_has_pad_msg();
  if (pad_msg_ == NULL) {
    pad_msg_ = new ::apollo::control::PadMessage;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.pad_msg)
  return pad_msg_;
}
::apollo::control::PadMessage* ControlCommand::release_pad_msg() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.pad_msg)
  clear_has_pad_msg();
  ::apollo::control::PadMessage* temp = pad_msg_;
  pad_msg_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_pad_msg(::apollo::control::PadMessage* pad_msg) {
  delete pad_msg_;
  pad_msg_ = pad_msg;
  if (pad_msg) {
    set_has_pad_msg();
  } else {
    clear_has_pad_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.pad_msg)
}

// optional .apollo.common.EngageAdvice engage_advice = 26;
bool ControlCommand::has_engage_advice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ControlCommand::set_has_engage_advice() {
  _has_bits_[0] |= 0x00020000u;
}
void ControlCommand::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00020000u;
}
void ControlCommand::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
const ::apollo::common::EngageAdvice& ControlCommand::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_ : *default_instance_->engage_advice_;
}
::apollo::common::EngageAdvice* ControlCommand::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::apollo::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.engage_advice)
  return engage_advice_;
}
::apollo::common::EngageAdvice* ControlCommand::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.engage_advice)
  clear_has_engage_advice();
  ::apollo::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.engage_advice)
}

// optional bool is_in_safe_mode = 27 [default = false];
bool ControlCommand::has_is_in_safe_mode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ControlCommand::set_has_is_in_safe_mode() {
  _has_bits_[0] |= 0x00040000u;
}
void ControlCommand::clear_has_is_in_safe_mode() {
  _has_bits_[0] &= ~0x00040000u;
}
void ControlCommand::clear_is_in_safe_mode() {
  is_in_safe_mode_ = false;
  clear_has_is_in_safe_mode();
}
 bool ControlCommand::is_in_safe_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.is_in_safe_mode)
  return is_in_safe_mode_;
}
 void ControlCommand::set_is_in_safe_mode(bool value) {
  set_has_is_in_safe_mode();
  is_in_safe_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.is_in_safe_mode)
}

// optional bool left_turn = 13 [deprecated = true];
bool ControlCommand::has_left_turn() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ControlCommand::set_has_left_turn() {
  _has_bits_[0] |= 0x00080000u;
}
void ControlCommand::clear_has_left_turn() {
  _has_bits_[0] &= ~0x00080000u;
}
void ControlCommand::clear_left_turn() {
  left_turn_ = false;
  clear_has_left_turn();
}
 bool ControlCommand::left_turn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.left_turn)
  return left_turn_;
}
 void ControlCommand::set_left_turn(bool value) {
  set_has_left_turn();
  left_turn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.left_turn)
}

// optional bool right_turn = 14 [deprecated = true];
bool ControlCommand::has_right_turn() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ControlCommand::set_has_right_turn() {
  _has_bits_[0] |= 0x00100000u;
}
void ControlCommand::clear_has_right_turn() {
  _has_bits_[0] &= ~0x00100000u;
}
void ControlCommand::clear_right_turn() {
  right_turn_ = false;
  clear_has_right_turn();
}
 bool ControlCommand::right_turn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.right_turn)
  return right_turn_;
}
 void ControlCommand::set_right_turn(bool value) {
  set_has_right_turn();
  right_turn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.right_turn)
}

// optional bool high_beam = 11 [deprecated = true];
bool ControlCommand::has_high_beam() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ControlCommand::set_has_high_beam() {
  _has_bits_[0] |= 0x00200000u;
}
void ControlCommand::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00200000u;
}
void ControlCommand::clear_high_beam() {
  high_beam_ = false;
  clear_has_high_beam();
}
 bool ControlCommand::high_beam() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.high_beam)
  return high_beam_;
}
 void ControlCommand::set_high_beam(bool value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.high_beam)
}

// optional bool low_beam = 12 [deprecated = true];
bool ControlCommand::has_low_beam() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ControlCommand::set_has_low_beam() {
  _has_bits_[0] |= 0x00400000u;
}
void ControlCommand::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00400000u;
}
void ControlCommand::clear_low_beam() {
  low_beam_ = false;
  clear_has_low_beam();
}
 bool ControlCommand::low_beam() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.low_beam)
  return low_beam_;
}
 void ControlCommand::set_low_beam(bool value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.low_beam)
}

// optional bool horn = 15 [deprecated = true];
bool ControlCommand::has_horn() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ControlCommand::set_has_horn() {
  _has_bits_[0] |= 0x00800000u;
}
void ControlCommand::clear_has_horn() {
  _has_bits_[0] &= ~0x00800000u;
}
void ControlCommand::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
 bool ControlCommand::horn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.horn)
  return horn_;
}
 void ControlCommand::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.horn)
}

// optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
bool ControlCommand::has_turnsignal() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ControlCommand::set_has_turnsignal() {
  _has_bits_[0] |= 0x01000000u;
}
void ControlCommand::clear_has_turnsignal() {
  _has_bits_[0] &= ~0x01000000u;
}
void ControlCommand::clear_turnsignal() {
  turnsignal_ = 0;
  clear_has_turnsignal();
}
 ::apollo::control::TurnSignal ControlCommand::turnsignal() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.turnsignal)
  return static_cast< ::apollo::control::TurnSignal >(turnsignal_);
}
 void ControlCommand::set_turnsignal(::apollo::control::TurnSignal value) {
  assert(::apollo::control::TurnSignal_IsValid(value));
  set_has_turnsignal();
  turnsignal_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.turnsignal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleLongitudinalDebug::kStationReferenceFieldNumber;
const int SimpleLongitudinalDebug::kStationErrorFieldNumber;
const int SimpleLongitudinalDebug::kStationErrorLimitedFieldNumber;
const int SimpleLongitudinalDebug::kPreviewStationErrorFieldNumber;
const int SimpleLongitudinalDebug::kSpeedReferenceFieldNumber;
const int SimpleLongitudinalDebug::kSpeedErrorFieldNumber;
const int SimpleLongitudinalDebug::kSpeedControllerInputLimitedFieldNumber;
const int SimpleLongitudinalDebug::kPreviewSpeedReferenceFieldNumber;
const int SimpleLongitudinalDebug::kPreviewSpeedErrorFieldNumber;
const int SimpleLongitudinalDebug::kPreviewAccelerationReferenceFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationCmdCloseloopFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationCmdFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationLookupFieldNumber;
const int SimpleLongitudinalDebug::kSpeedLookupFieldNumber;
const int SimpleLongitudinalDebug::kCalibrationValueFieldNumber;
const int SimpleLongitudinalDebug::kThrottleCmdFieldNumber;
const int SimpleLongitudinalDebug::kBrakeCmdFieldNumber;
const int SimpleLongitudinalDebug::kIsFullStopFieldNumber;
const int SimpleLongitudinalDebug::kSlopeOffsetCompensationFieldNumber;
const int SimpleLongitudinalDebug::kCurrentStationFieldNumber;
const int SimpleLongitudinalDebug::kPathRemainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleLongitudinalDebug::SimpleLongitudinalDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLongitudinalDebug)
}

void SimpleLongitudinalDebug::InitAsDefaultInstance() {
}

SimpleLongitudinalDebug::SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLongitudinalDebug)
}

void SimpleLongitudinalDebug::SharedCtor() {
  _cached_size_ = 0;
  station_reference_ = 0;
  station_error_ = 0;
  station_error_limited_ = 0;
  preview_station_error_ = 0;
  speed_reference_ = 0;
  speed_error_ = 0;
  speed_controller_input_limited_ = 0;
  preview_speed_reference_ = 0;
  preview_speed_error_ = 0;
  preview_acceleration_reference_ = 0;
  acceleration_cmd_closeloop_ = 0;
  acceleration_cmd_ = 0;
  acceleration_lookup_ = 0;
  speed_lookup_ = 0;
  calibration_value_ = 0;
  throttle_cmd_ = 0;
  brake_cmd_ = 0;
  is_full_stop_ = false;
  slope_offset_compensation_ = 0;
  current_station_ = 0;
  path_remain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleLongitudinalDebug::~SimpleLongitudinalDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLongitudinalDebug)
  SharedDtor();
}

void SimpleLongitudinalDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleLongitudinalDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleLongitudinalDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleLongitudinalDebug_descriptor_;
}

const SimpleLongitudinalDebug& SimpleLongitudinalDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  return *default_instance_;
}

SimpleLongitudinalDebug* SimpleLongitudinalDebug::default_instance_ = NULL;

SimpleLongitudinalDebug* SimpleLongitudinalDebug::New(::google::protobuf::Arena* arena) const {
  SimpleLongitudinalDebug* n = new SimpleLongitudinalDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleLongitudinalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLongitudinalDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimpleLongitudinalDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleLongitudinalDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(station_reference_, preview_speed_reference_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(preview_speed_error_, throttle_cmd_);
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(brake_cmd_, is_full_stop_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleLongitudinalDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleLongitudinalDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double station_reference = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_reference_)));
          set_has_station_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_station_error;
        break;
      }

      // optional double station_error = 2;
      case 2: {
        if (tag == 17) {
         parse_station_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
          set_has_station_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_station_error_limited;
        break;
      }

      // optional double station_error_limited = 3;
      case 3: {
        if (tag == 25) {
         parse_station_error_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limited_)));
          set_has_station_error_limited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_preview_station_error;
        break;
      }

      // optional double preview_station_error = 4;
      case 4: {
        if (tag == 33) {
         parse_preview_station_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_station_error_)));
          set_has_preview_station_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_speed_reference;
        break;
      }

      // optional double speed_reference = 5;
      case 5: {
        if (tag == 41) {
         parse_speed_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_reference_)));
          set_has_speed_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_speed_error;
        break;
      }

      // optional double speed_error = 6;
      case 6: {
        if (tag == 49) {
         parse_speed_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_error_)));
          set_has_speed_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_speed_controller_input_limited;
        break;
      }

      // optional double speed_controller_input_limited = 7;
      case 7: {
        if (tag == 57) {
         parse_speed_controller_input_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limited_)));
          set_has_speed_controller_input_limited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_preview_speed_reference;
        break;
      }

      // optional double preview_speed_reference = 8;
      case 8: {
        if (tag == 65) {
         parse_preview_speed_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_speed_reference_)));
          set_has_preview_speed_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_preview_speed_error;
        break;
      }

      // optional double preview_speed_error = 9;
      case 9: {
        if (tag == 73) {
         parse_preview_speed_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_speed_error_)));
          set_has_preview_speed_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_preview_acceleration_reference;
        break;
      }

      // optional double preview_acceleration_reference = 10;
      case 10: {
        if (tag == 81) {
         parse_preview_acceleration_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_acceleration_reference_)));
          set_has_preview_acceleration_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_acceleration_cmd_closeloop;
        break;
      }

      // optional double acceleration_cmd_closeloop = 11;
      case 11: {
        if (tag == 89) {
         parse_acceleration_cmd_closeloop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_closeloop_)));
          set_has_acceleration_cmd_closeloop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_acceleration_cmd;
        break;
      }

      // optional double acceleration_cmd = 12;
      case 12: {
        if (tag == 97) {
         parse_acceleration_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_)));
          set_has_acceleration_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_acceleration_lookup;
        break;
      }

      // optional double acceleration_lookup = 13;
      case 13: {
        if (tag == 105) {
         parse_acceleration_lookup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_lookup_)));
          set_has_acceleration_lookup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_speed_lookup;
        break;
      }

      // optional double speed_lookup = 14;
      case 14: {
        if (tag == 113) {
         parse_speed_lookup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_lookup_)));
          set_has_speed_lookup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_calibration_value;
        break;
      }

      // optional double calibration_value = 15;
      case 15: {
        if (tag == 121) {
         parse_calibration_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &calibration_value_)));
          set_has_calibration_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_throttle_cmd;
        break;
      }

      // optional double throttle_cmd = 16;
      case 16: {
        if (tag == 129) {
         parse_throttle_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_cmd_)));
          set_has_throttle_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_brake_cmd;
        break;
      }

      // optional double brake_cmd = 17;
      case 17: {
        if (tag == 137) {
         parse_brake_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));
          set_has_brake_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_is_full_stop;
        break;
      }

      // optional bool is_full_stop = 18;
      case 18: {
        if (tag == 144) {
         parse_is_full_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_stop_)));
          set_has_is_full_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_slope_offset_compensation;
        break;
      }

      // optional double slope_offset_compensation = 19;
      case 19: {
        if (tag == 153) {
         parse_slope_offset_compensation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slope_offset_compensation_)));
          set_has_slope_offset_compensation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_current_station;
        break;
      }

      // optional double current_station = 20;
      case 20: {
        if (tag == 161) {
         parse_current_station:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_station_)));
          set_has_current_station();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_path_remain;
        break;
      }

      // optional double path_remain = 21;
      case 21: {
        if (tag == 169) {
         parse_path_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_remain_)));
          set_has_path_remain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleLongitudinalDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleLongitudinalDebug)
  return false;
#undef DO_
}

void SimpleLongitudinalDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleLongitudinalDebug)
  // optional double station_reference = 1;
  if (has_station_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->station_reference(), output);
  }

  // optional double station_error = 2;
  if (has_station_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->station_error(), output);
  }

  // optional double station_error_limited = 3;
  if (has_station_error_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->station_error_limited(), output);
  }

  // optional double preview_station_error = 4;
  if (has_preview_station_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preview_station_error(), output);
  }

  // optional double speed_reference = 5;
  if (has_speed_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed_reference(), output);
  }

  // optional double speed_error = 6;
  if (has_speed_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_error(), output);
  }

  // optional double speed_controller_input_limited = 7;
  if (has_speed_controller_input_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed_controller_input_limited(), output);
  }

  // optional double preview_speed_reference = 8;
  if (has_preview_speed_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->preview_speed_reference(), output);
  }

  // optional double preview_speed_error = 9;
  if (has_preview_speed_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->preview_speed_error(), output);
  }

  // optional double preview_acceleration_reference = 10;
  if (has_preview_acceleration_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->preview_acceleration_reference(), output);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (has_acceleration_cmd_closeloop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->acceleration_cmd_closeloop(), output);
  }

  // optional double acceleration_cmd = 12;
  if (has_acceleration_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->acceleration_cmd(), output);
  }

  // optional double acceleration_lookup = 13;
  if (has_acceleration_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->acceleration_lookup(), output);
  }

  // optional double speed_lookup = 14;
  if (has_speed_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->speed_lookup(), output);
  }

  // optional double calibration_value = 15;
  if (has_calibration_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->calibration_value(), output);
  }

  // optional double throttle_cmd = 16;
  if (has_throttle_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->throttle_cmd(), output);
  }

  // optional double brake_cmd = 17;
  if (has_brake_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->brake_cmd(), output);
  }

  // optional bool is_full_stop = 18;
  if (has_is_full_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_full_stop(), output);
  }

  // optional double slope_offset_compensation = 19;
  if (has_slope_offset_compensation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->slope_offset_compensation(), output);
  }

  // optional double current_station = 20;
  if (has_current_station()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->current_station(), output);
  }

  // optional double path_remain = 21;
  if (has_path_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->path_remain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleLongitudinalDebug)
}

::google::protobuf::uint8* SimpleLongitudinalDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLongitudinalDebug)
  // optional double station_reference = 1;
  if (has_station_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->station_reference(), target);
  }

  // optional double station_error = 2;
  if (has_station_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->station_error(), target);
  }

  // optional double station_error_limited = 3;
  if (has_station_error_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->station_error_limited(), target);
  }

  // optional double preview_station_error = 4;
  if (has_preview_station_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preview_station_error(), target);
  }

  // optional double speed_reference = 5;
  if (has_speed_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed_reference(), target);
  }

  // optional double speed_error = 6;
  if (has_speed_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_error(), target);
  }

  // optional double speed_controller_input_limited = 7;
  if (has_speed_controller_input_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->speed_controller_input_limited(), target);
  }

  // optional double preview_speed_reference = 8;
  if (has_preview_speed_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 9;
  if (has_preview_speed_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 10;
  if (has_preview_acceleration_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->preview_acceleration_reference(), target);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (has_acceleration_cmd_closeloop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 12;
  if (has_acceleration_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 13;
  if (has_acceleration_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->acceleration_lookup(), target);
  }

  // optional double speed_lookup = 14;
  if (has_speed_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->speed_lookup(), target);
  }

  // optional double calibration_value = 15;
  if (has_calibration_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->calibration_value(), target);
  }

  // optional double throttle_cmd = 16;
  if (has_throttle_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->throttle_cmd(), target);
  }

  // optional double brake_cmd = 17;
  if (has_brake_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->brake_cmd(), target);
  }

  // optional bool is_full_stop = 18;
  if (has_is_full_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_full_stop(), target);
  }

  // optional double slope_offset_compensation = 19;
  if (has_slope_offset_compensation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->slope_offset_compensation(), target);
  }

  // optional double current_station = 20;
  if (has_current_station()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->current_station(), target);
  }

  // optional double path_remain = 21;
  if (has_path_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->path_remain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLongitudinalDebug)
  return target;
}

int SimpleLongitudinalDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLongitudinalDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double station_reference = 1;
    if (has_station_reference()) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (has_station_error()) {
      total_size += 1 + 8;
    }

    // optional double station_error_limited = 3;
    if (has_station_error_limited()) {
      total_size += 1 + 8;
    }

    // optional double preview_station_error = 4;
    if (has_preview_station_error()) {
      total_size += 1 + 8;
    }

    // optional double speed_reference = 5;
    if (has_speed_reference()) {
      total_size += 1 + 8;
    }

    // optional double speed_error = 6;
    if (has_speed_error()) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limited = 7;
    if (has_speed_controller_input_limited()) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_reference = 8;
    if (has_preview_speed_reference()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double preview_speed_error = 9;
    if (has_preview_speed_error()) {
      total_size += 1 + 8;
    }

    // optional double preview_acceleration_reference = 10;
    if (has_preview_acceleration_reference()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd_closeloop = 11;
    if (has_acceleration_cmd_closeloop()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd = 12;
    if (has_acceleration_cmd()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_lookup = 13;
    if (has_acceleration_lookup()) {
      total_size += 1 + 8;
    }

    // optional double speed_lookup = 14;
    if (has_speed_lookup()) {
      total_size += 1 + 8;
    }

    // optional double calibration_value = 15;
    if (has_calibration_value()) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 16;
    if (has_throttle_cmd()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional double brake_cmd = 17;
    if (has_brake_cmd()) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 18;
    if (has_is_full_stop()) {
      total_size += 2 + 1;
    }

    // optional double slope_offset_compensation = 19;
    if (has_slope_offset_compensation()) {
      total_size += 2 + 8;
    }

    // optional double current_station = 20;
    if (has_current_station()) {
      total_size += 2 + 8;
    }

    // optional double path_remain = 21;
    if (has_path_remain()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleLongitudinalDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleLongitudinalDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleLongitudinalDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLongitudinalDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLongitudinalDebug)
    MergeFrom(*source);
  }
}

void SimpleLongitudinalDebug::MergeFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_station_reference()) {
      set_station_reference(from.station_reference());
    }
    if (from.has_station_error()) {
      set_station_error(from.station_error());
    }
    if (from.has_station_error_limited()) {
      set_station_error_limited(from.station_error_limited());
    }
    if (from.has_preview_station_error()) {
      set_preview_station_error(from.preview_station_error());
    }
    if (from.has_speed_reference()) {
      set_speed_reference(from.speed_reference());
    }
    if (from.has_speed_error()) {
      set_speed_error(from.speed_error());
    }
    if (from.has_speed_controller_input_limited()) {
      set_speed_controller_input_limited(from.speed_controller_input_limited());
    }
    if (from.has_preview_speed_reference()) {
      set_preview_speed_reference(from.preview_speed_reference());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_preview_speed_error()) {
      set_preview_speed_error(from.preview_speed_error());
    }
    if (from.has_preview_acceleration_reference()) {
      set_preview_acceleration_reference(from.preview_acceleration_reference());
    }
    if (from.has_acceleration_cmd_closeloop()) {
      set_acceleration_cmd_closeloop(from.acceleration_cmd_closeloop());
    }
    if (from.has_acceleration_cmd()) {
      set_acceleration_cmd(from.acceleration_cmd());
    }
    if (from.has_acceleration_lookup()) {
      set_acceleration_lookup(from.acceleration_lookup());
    }
    if (from.has_speed_lookup()) {
      set_speed_lookup(from.speed_lookup());
    }
    if (from.has_calibration_value()) {
      set_calibration_value(from.calibration_value());
    }
    if (from.has_throttle_cmd()) {
      set_throttle_cmd(from.throttle_cmd());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_brake_cmd()) {
      set_brake_cmd(from.brake_cmd());
    }
    if (from.has_is_full_stop()) {
      set_is_full_stop(from.is_full_stop());
    }
    if (from.has_slope_offset_compensation()) {
      set_slope_offset_compensation(from.slope_offset_compensation());
    }
    if (from.has_current_station()) {
      set_current_station(from.current_station());
    }
    if (from.has_path_remain()) {
      set_path_remain(from.path_remain());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleLongitudinalDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLongitudinalDebug::CopyFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalDebug::IsInitialized() const {

  return true;
}

void SimpleLongitudinalDebug::Swap(SimpleLongitudinalDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleLongitudinalDebug::InternalSwap(SimpleLongitudinalDebug* other) {
  std::swap(station_reference_, other->station_reference_);
  std::swap(station_error_, other->station_error_);
  std::swap(station_error_limited_, other->station_error_limited_);
  std::swap(preview_station_error_, other->preview_station_error_);
  std::swap(speed_reference_, other->speed_reference_);
  std::swap(speed_error_, other->speed_error_);
  std::swap(speed_controller_input_limited_, other->speed_controller_input_limited_);
  std::swap(preview_speed_reference_, other->preview_speed_reference_);
  std::swap(preview_speed_error_, other->preview_speed_error_);
  std::swap(preview_acceleration_reference_, other->preview_acceleration_reference_);
  std::swap(acceleration_cmd_closeloop_, other->acceleration_cmd_closeloop_);
  std::swap(acceleration_cmd_, other->acceleration_cmd_);
  std::swap(acceleration_lookup_, other->acceleration_lookup_);
  std::swap(speed_lookup_, other->speed_lookup_);
  std::swap(calibration_value_, other->calibration_value_);
  std::swap(throttle_cmd_, other->throttle_cmd_);
  std::swap(brake_cmd_, other->brake_cmd_);
  std::swap(is_full_stop_, other->is_full_stop_);
  std::swap(slope_offset_compensation_, other->slope_offset_compensation_);
  std::swap(current_station_, other->current_station_);
  std::swap(path_remain_, other->path_remain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleLongitudinalDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleLongitudinalDebug_descriptor_;
  metadata.reflection = SimpleLongitudinalDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleLongitudinalDebug

// optional double station_reference = 1;
bool SimpleLongitudinalDebug::has_station_reference() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimpleLongitudinalDebug::set_has_station_reference() {
  _has_bits_[0] |= 0x00000001u;
}
void SimpleLongitudinalDebug::clear_has_station_reference() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleLongitudinalDebug::clear_station_reference() {
  station_reference_ = 0;
  clear_has_station_reference();
}
 double SimpleLongitudinalDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_reference)
  return station_reference_;
}
 void SimpleLongitudinalDebug::set_station_reference(double value) {
  set_has_station_reference();
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_reference)
}

// optional double station_error = 2;
bool SimpleLongitudinalDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimpleLongitudinalDebug::set_has_station_error() {
  _has_bits_[0] |= 0x00000002u;
}
void SimpleLongitudinalDebug::clear_has_station_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleLongitudinalDebug::clear_station_error() {
  station_error_ = 0;
  clear_has_station_error();
}
 double SimpleLongitudinalDebug::station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_error)
  return station_error_;
}
 void SimpleLongitudinalDebug::set_station_error(double value) {
  set_has_station_error();
  station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_error)
}

// optional double station_error_limited = 3;
bool SimpleLongitudinalDebug::has_station_error_limited() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SimpleLongitudinalDebug::set_has_station_error_limited() {
  _has_bits_[0] |= 0x00000004u;
}
void SimpleLongitudinalDebug::clear_has_station_error_limited() {
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleLongitudinalDebug::clear_station_error_limited() {
  station_error_limited_ = 0;
  clear_has_station_error_limited();
}
 double SimpleLongitudinalDebug::station_error_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_error_limited)
  return station_error_limited_;
}
 void SimpleLongitudinalDebug::set_station_error_limited(double value) {
  set_has_station_error_limited();
  station_error_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_error_limited)
}

// optional double preview_station_error = 4;
bool SimpleLongitudinalDebug::has_preview_station_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_station_error() {
  _has_bits_[0] |= 0x00000008u;
}
void SimpleLongitudinalDebug::clear_has_preview_station_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimpleLongitudinalDebug::clear_preview_station_error() {
  preview_station_error_ = 0;
  clear_has_preview_station_error();
}
 double SimpleLongitudinalDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_station_error)
  return preview_station_error_;
}
 void SimpleLongitudinalDebug::set_preview_station_error(double value) {
  set_has_preview_station_error();
  preview_station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_station_error)
}

// optional double speed_reference = 5;
bool SimpleLongitudinalDebug::has_speed_reference() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_reference() {
  _has_bits_[0] |= 0x00000010u;
}
void SimpleLongitudinalDebug::clear_has_speed_reference() {
  _has_bits_[0] &= ~0x00000010u;
}
void SimpleLongitudinalDebug::clear_speed_reference() {
  speed_reference_ = 0;
  clear_has_speed_reference();
}
 double SimpleLongitudinalDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_reference)
  return speed_reference_;
}
 void SimpleLongitudinalDebug::set_speed_reference(double value) {
  set_has_speed_reference();
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_reference)
}

// optional double speed_error = 6;
bool SimpleLongitudinalDebug::has_speed_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_error() {
  _has_bits_[0] |= 0x00000020u;
}
void SimpleLongitudinalDebug::clear_has_speed_error() {
  _has_bits_[0] &= ~0x00000020u;
}
void SimpleLongitudinalDebug::clear_speed_error() {
  speed_error_ = 0;
  clear_has_speed_error();
}
 double SimpleLongitudinalDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_error)
  return speed_error_;
}
 void SimpleLongitudinalDebug::set_speed_error(double value) {
  set_has_speed_error();
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_error)
}

// optional double speed_controller_input_limited = 7;
bool SimpleLongitudinalDebug::has_speed_controller_input_limited() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_controller_input_limited() {
  _has_bits_[0] |= 0x00000040u;
}
void SimpleLongitudinalDebug::clear_has_speed_controller_input_limited() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimpleLongitudinalDebug::clear_speed_controller_input_limited() {
  speed_controller_input_limited_ = 0;
  clear_has_speed_controller_input_limited();
}
 double SimpleLongitudinalDebug::speed_controller_input_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_controller_input_limited)
  return speed_controller_input_limited_;
}
 void SimpleLongitudinalDebug::set_speed_controller_input_limited(double value) {
  set_has_speed_controller_input_limited();
  speed_controller_input_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_controller_input_limited)
}

// optional double preview_speed_reference = 8;
bool SimpleLongitudinalDebug::has_preview_speed_reference() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_speed_reference() {
  _has_bits_[0] |= 0x00000080u;
}
void SimpleLongitudinalDebug::clear_has_preview_speed_reference() {
  _has_bits_[0] &= ~0x00000080u;
}
void SimpleLongitudinalDebug::clear_preview_speed_reference() {
  preview_speed_reference_ = 0;
  clear_has_preview_speed_reference();
}
 double SimpleLongitudinalDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_speed_reference)
  return preview_speed_reference_;
}
 void SimpleLongitudinalDebug::set_preview_speed_reference(double value) {
  set_has_preview_speed_reference();
  preview_speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_speed_reference)
}

// optional double preview_speed_error = 9;
bool SimpleLongitudinalDebug::has_preview_speed_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_speed_error() {
  _has_bits_[0] |= 0x00000100u;
}
void SimpleLongitudinalDebug::clear_has_preview_speed_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimpleLongitudinalDebug::clear_preview_speed_error() {
  preview_speed_error_ = 0;
  clear_has_preview_speed_error();
}
 double SimpleLongitudinalDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_speed_error)
  return preview_speed_error_;
}
 void SimpleLongitudinalDebug::set_preview_speed_error(double value) {
  set_has_preview_speed_error();
  preview_speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_speed_error)
}

// optional double preview_acceleration_reference = 10;
bool SimpleLongitudinalDebug::has_preview_acceleration_reference() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_acceleration_reference() {
  _has_bits_[0] |= 0x00000200u;
}
void SimpleLongitudinalDebug::clear_has_preview_acceleration_reference() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimpleLongitudinalDebug::clear_preview_acceleration_reference() {
  preview_acceleration_reference_ = 0;
  clear_has_preview_acceleration_reference();
}
 double SimpleLongitudinalDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_acceleration_reference)
  return preview_acceleration_reference_;
}
 void SimpleLongitudinalDebug::set_preview_acceleration_reference(double value) {
  set_has_preview_acceleration_reference();
  preview_acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_acceleration_reference)
}

// optional double acceleration_cmd_closeloop = 11;
bool SimpleLongitudinalDebug::has_acceleration_cmd_closeloop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimpleLongitudinalDebug::set_has_acceleration_cmd_closeloop() {
  _has_bits_[0] |= 0x00000400u;
}
void SimpleLongitudinalDebug::clear_has_acceleration_cmd_closeloop() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimpleLongitudinalDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
  clear_has_acceleration_cmd_closeloop();
}
 double SimpleLongitudinalDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
  return acceleration_cmd_closeloop_;
}
 void SimpleLongitudinalDebug::set_acceleration_cmd_closeloop(double value) {
  set_has_acceleration_cmd_closeloop();
  acceleration_cmd_closeloop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 12;
bool SimpleLongitudinalDebug::has_acceleration_cmd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimpleLongitudinalDebug::set_has_acceleration_cmd() {
  _has_bits_[0] |= 0x00000800u;
}
void SimpleLongitudinalDebug::clear_has_acceleration_cmd() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimpleLongitudinalDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
  clear_has_acceleration_cmd();
}
 double SimpleLongitudinalDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_cmd)
  return acceleration_cmd_;
}
 void SimpleLongitudinalDebug::set_acceleration_cmd(double value) {
  set_has_acceleration_cmd();
  acceleration_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 13;
bool SimpleLongitudinalDebug::has_acceleration_lookup() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimpleLongitudinalDebug::set_has_acceleration_lookup() {
  _has_bits_[0] |= 0x00001000u;
}
void SimpleLongitudinalDebug::clear_has_acceleration_lookup() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimpleLongitudinalDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
  clear_has_acceleration_lookup();
}
 double SimpleLongitudinalDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_lookup)
  return acceleration_lookup_;
}
 void SimpleLongitudinalDebug::set_acceleration_lookup(double value) {
  set_has_acceleration_lookup();
  acceleration_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_lookup)
}

// optional double speed_lookup = 14;
bool SimpleLongitudinalDebug::has_speed_lookup() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_lookup() {
  _has_bits_[0] |= 0x00002000u;
}
void SimpleLongitudinalDebug::clear_has_speed_lookup() {
  _has_bits_[0] &= ~0x00002000u;
}
void SimpleLongitudinalDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
  clear_has_speed_lookup();
}
 double SimpleLongitudinalDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_lookup)
  return speed_lookup_;
}
 void SimpleLongitudinalDebug::set_speed_lookup(double value) {
  set_has_speed_lookup();
  speed_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_lookup)
}

// optional double calibration_value = 15;
bool SimpleLongitudinalDebug::has_calibration_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimpleLongitudinalDebug::set_has_calibration_value() {
  _has_bits_[0] |= 0x00004000u;
}
void SimpleLongitudinalDebug::clear_has_calibration_value() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimpleLongitudinalDebug::clear_calibration_value() {
  calibration_value_ = 0;
  clear_has_calibration_value();
}
 double SimpleLongitudinalDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.calibration_value)
  return calibration_value_;
}
 void SimpleLongitudinalDebug::set_calibration_value(double value) {
  set_has_calibration_value();
  calibration_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.calibration_value)
}

// optional double throttle_cmd = 16;
bool SimpleLongitudinalDebug::has_throttle_cmd() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SimpleLongitudinalDebug::set_has_throttle_cmd() {
  _has_bits_[0] |= 0x00008000u;
}
void SimpleLongitudinalDebug::clear_has_throttle_cmd() {
  _has_bits_[0] &= ~0x00008000u;
}
void SimpleLongitudinalDebug::clear_throttle_cmd() {
  throttle_cmd_ = 0;
  clear_has_throttle_cmd();
}
 double SimpleLongitudinalDebug::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.throttle_cmd)
  return throttle_cmd_;
}
 void SimpleLongitudinalDebug::set_throttle_cmd(double value) {
  set_has_throttle_cmd();
  throttle_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.throttle_cmd)
}

// optional double brake_cmd = 17;
bool SimpleLongitudinalDebug::has_brake_cmd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimpleLongitudinalDebug::set_has_brake_cmd() {
  _has_bits_[0] |= 0x00010000u;
}
void SimpleLongitudinalDebug::clear_has_brake_cmd() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimpleLongitudinalDebug::clear_brake_cmd() {
  brake_cmd_ = 0;
  clear_has_brake_cmd();
}
 double SimpleLongitudinalDebug::brake_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.brake_cmd)
  return brake_cmd_;
}
 void SimpleLongitudinalDebug::set_brake_cmd(double value) {
  set_has_brake_cmd();
  brake_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.brake_cmd)
}

// optional bool is_full_stop = 18;
bool SimpleLongitudinalDebug::has_is_full_stop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SimpleLongitudinalDebug::set_has_is_full_stop() {
  _has_bits_[0] |= 0x00020000u;
}
void SimpleLongitudinalDebug::clear_has_is_full_stop() {
  _has_bits_[0] &= ~0x00020000u;
}
void SimpleLongitudinalDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  clear_has_is_full_stop();
}
 bool SimpleLongitudinalDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.is_full_stop)
  return is_full_stop_;
}
 void SimpleLongitudinalDebug::set_is_full_stop(bool value) {
  set_has_is_full_stop();
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.is_full_stop)
}

// optional double slope_offset_compensation = 19;
bool SimpleLongitudinalDebug::has_slope_offset_compensation() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SimpleLongitudinalDebug::set_has_slope_offset_compensation() {
  _has_bits_[0] |= 0x00040000u;
}
void SimpleLongitudinalDebug::clear_has_slope_offset_compensation() {
  _has_bits_[0] &= ~0x00040000u;
}
void SimpleLongitudinalDebug::clear_slope_offset_compensation() {
  slope_offset_compensation_ = 0;
  clear_has_slope_offset_compensation();
}
 double SimpleLongitudinalDebug::slope_offset_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.slope_offset_compensation)
  return slope_offset_compensation_;
}
 void SimpleLongitudinalDebug::set_slope_offset_compensation(double value) {
  set_has_slope_offset_compensation();
  slope_offset_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.slope_offset_compensation)
}

// optional double current_station = 20;
bool SimpleLongitudinalDebug::has_current_station() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SimpleLongitudinalDebug::set_has_current_station() {
  _has_bits_[0] |= 0x00080000u;
}
void SimpleLongitudinalDebug::clear_has_current_station() {
  _has_bits_[0] &= ~0x00080000u;
}
void SimpleLongitudinalDebug::clear_current_station() {
  current_station_ = 0;
  clear_has_current_station();
}
 double SimpleLongitudinalDebug::current_station() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.current_station)
  return current_station_;
}
 void SimpleLongitudinalDebug::set_current_station(double value) {
  set_has_current_station();
  current_station_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.current_station)
}

// optional double path_remain = 21;
bool SimpleLongitudinalDebug::has_path_remain() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SimpleLongitudinalDebug::set_has_path_remain() {
  _has_bits_[0] |= 0x00100000u;
}
void SimpleLongitudinalDebug::clear_has_path_remain() {
  _has_bits_[0] &= ~0x00100000u;
}
void SimpleLongitudinalDebug::clear_path_remain() {
  path_remain_ = 0;
  clear_has_path_remain();
}
 double SimpleLongitudinalDebug::path_remain() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.path_remain)
  return path_remain_;
}
 void SimpleLongitudinalDebug::set_path_remain(double value) {
  set_has_path_remain();
  path_remain_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.path_remain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleLateralDebug::kLateralErrorFieldNumber;
const int SimpleLateralDebug::kRefHeadingFieldNumber;
const int SimpleLateralDebug::kHeadingFieldNumber;
const int SimpleLateralDebug::kHeadingErrorFieldNumber;
const int SimpleLateralDebug::kHeadingErrorRateFieldNumber;
const int SimpleLateralDebug::kLateralErrorRateFieldNumber;
const int SimpleLateralDebug::kCurvatureFieldNumber;
const int SimpleLateralDebug::kSteerAngleFieldNumber;
const int SimpleLateralDebug::kSteerAngleFeedforwardFieldNumber;
const int SimpleLateralDebug::kSteerAngleLateralContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleLateralRateContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleHeadingContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleHeadingRateContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleFeedbackFieldNumber;
const int SimpleLateralDebug::kSteeringPositionFieldNumber;
const int SimpleLateralDebug::kRefSpeedFieldNumber;
const int SimpleLateralDebug::kSteerAngleLimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleLateralDebug::SimpleLateralDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLateralDebug)
}

void SimpleLateralDebug::InitAsDefaultInstance() {
}

SimpleLateralDebug::SimpleLateralDebug(const SimpleLateralDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLateralDebug)
}

void SimpleLateralDebug::SharedCtor() {
  _cached_size_ = 0;
  lateral_error_ = 0;
  ref_heading_ = 0;
  heading_ = 0;
  heading_error_ = 0;
  heading_error_rate_ = 0;
  lateral_error_rate_ = 0;
  curvature_ = 0;
  steer_angle_ = 0;
  steer_angle_feedforward_ = 0;
  steer_angle_lateral_contribution_ = 0;
  steer_angle_lateral_rate_contribution_ = 0;
  steer_angle_heading_contribution_ = 0;
  steer_angle_heading_rate_contribution_ = 0;
  steer_angle_feedback_ = 0;
  steering_position_ = 0;
  ref_speed_ = 0;
  steer_angle_limited_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleLateralDebug::~SimpleLateralDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLateralDebug)
  SharedDtor();
}

void SimpleLateralDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleLateralDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleLateralDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleLateralDebug_descriptor_;
}

const SimpleLateralDebug& SimpleLateralDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  return *default_instance_;
}

SimpleLateralDebug* SimpleLateralDebug::default_instance_ = NULL;

SimpleLateralDebug* SimpleLateralDebug::New(::google::protobuf::Arena* arena) const {
  SimpleLateralDebug* n = new SimpleLateralDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleLateralDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLateralDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimpleLateralDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleLateralDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lateral_error_, steer_angle_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(steer_angle_feedforward_, ref_speed_);
  }
  steer_angle_limited_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleLateralDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleLateralDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lateral_error = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
          set_has_lateral_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ref_heading;
        break;
      }

      // optional double ref_heading = 2;
      case 2: {
        if (tag == 17) {
         parse_ref_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_)));
          set_has_ref_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (tag == 25) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_heading_error;
        break;
      }

      // optional double heading_error = 4;
      case 4: {
        if (tag == 33) {
         parse_heading_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
          set_has_heading_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading_error_rate;
        break;
      }

      // optional double heading_error_rate = 5;
      case 5: {
        if (tag == 41) {
         parse_heading_error_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_rate_)));
          set_has_heading_error_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_lateral_error_rate;
        break;
      }

      // optional double lateral_error_rate = 6;
      case 6: {
        if (tag == 49) {
         parse_lateral_error_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_rate_)));
          set_has_lateral_error_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_curvature;
        break;
      }

      // optional double curvature = 7;
      case 7: {
        if (tag == 57) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
          set_has_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_steer_angle;
        break;
      }

      // optional double steer_angle = 8;
      case 8: {
        if (tag == 65) {
         parse_steer_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_)));
          set_has_steer_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_steer_angle_feedforward;
        break;
      }

      // optional double steer_angle_feedforward = 9;
      case 9: {
        if (tag == 73) {
         parse_steer_angle_feedforward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedforward_)));
          set_has_steer_angle_feedforward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_steer_angle_lateral_contribution;
        break;
      }

      // optional double steer_angle_lateral_contribution = 10;
      case 10: {
        if (tag == 81) {
         parse_steer_angle_lateral_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_contribution_)));
          set_has_steer_angle_lateral_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_steer_angle_lateral_rate_contribution;
        break;
      }

      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11: {
        if (tag == 89) {
         parse_steer_angle_lateral_rate_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_rate_contribution_)));
          set_has_steer_angle_lateral_rate_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_steer_angle_heading_contribution;
        break;
      }

      // optional double steer_angle_heading_contribution = 12;
      case 12: {
        if (tag == 97) {
         parse_steer_angle_heading_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_contribution_)));
          set_has_steer_angle_heading_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_steer_angle_heading_rate_contribution;
        break;
      }

      // optional double steer_angle_heading_rate_contribution = 13;
      case 13: {
        if (tag == 105) {
         parse_steer_angle_heading_rate_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_rate_contribution_)));
          set_has_steer_angle_heading_rate_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_steer_angle_feedback;
        break;
      }

      // optional double steer_angle_feedback = 14;
      case 14: {
        if (tag == 113) {
         parse_steer_angle_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedback_)));
          set_has_steer_angle_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_steering_position;
        break;
      }

      // optional double steering_position = 15;
      case 15: {
        if (tag == 121) {
         parse_steering_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_position_)));
          set_has_steering_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_ref_speed;
        break;
      }

      // optional double ref_speed = 16;
      case 16: {
        if (tag == 129) {
         parse_ref_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_speed_)));
          set_has_ref_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_steer_angle_limited;
        break;
      }

      // optional double steer_angle_limited = 17;
      case 17: {
        if (tag == 137) {
         parse_steer_angle_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_limited_)));
          set_has_steer_angle_limited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleLateralDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleLateralDebug)
  return false;
#undef DO_
}

void SimpleLateralDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleLateralDebug)
  // optional double lateral_error = 1;
  if (has_lateral_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_error(), output);
  }

  // optional double ref_heading = 2;
  if (has_ref_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_heading(), output);
  }

  // optional double heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double heading_error = 4;
  if (has_heading_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  // optional double heading_error_rate = 5;
  if (has_heading_error_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_error_rate(), output);
  }

  // optional double lateral_error_rate = 6;
  if (has_lateral_error_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lateral_error_rate(), output);
  }

  // optional double curvature = 7;
  if (has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature(), output);
  }

  // optional double steer_angle = 8;
  if (has_steer_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->steer_angle(), output);
  }

  // optional double steer_angle_feedforward = 9;
  if (has_steer_angle_feedforward()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_feedforward(), output);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (has_steer_angle_lateral_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->steer_angle_lateral_contribution(), output);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (has_steer_angle_lateral_rate_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->steer_angle_lateral_rate_contribution(), output);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (has_steer_angle_heading_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steer_angle_heading_contribution(), output);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (has_steer_angle_heading_rate_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_angle_heading_rate_contribution(), output);
  }

  // optional double steer_angle_feedback = 14;
  if (has_steer_angle_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->steer_angle_feedback(), output);
  }

  // optional double steering_position = 15;
  if (has_steering_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steering_position(), output);
  }

  // optional double ref_speed = 16;
  if (has_ref_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ref_speed(), output);
  }

  // optional double steer_angle_limited = 17;
  if (has_steer_angle_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->steer_angle_limited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleLateralDebug)
}

::google::protobuf::uint8* SimpleLateralDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLateralDebug)
  // optional double lateral_error = 1;
  if (has_lateral_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (has_ref_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_heading(), target);
  }

  // optional double heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double heading_error = 4;
  if (has_heading_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (has_heading_error_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (has_lateral_error_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature(), target);
  }

  // optional double steer_angle = 8;
  if (has_steer_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (has_steer_angle_feedforward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (has_steer_angle_lateral_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (has_steer_angle_lateral_rate_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (has_steer_angle_heading_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (has_steer_angle_heading_rate_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (has_steer_angle_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (has_steering_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (has_ref_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (has_steer_angle_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->steer_angle_limited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLateralDebug)
  return target;
}

int SimpleLateralDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLateralDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double lateral_error = 1;
    if (has_lateral_error()) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (has_ref_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (has_heading_error()) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (has_heading_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (has_lateral_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (has_steer_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double steer_angle_feedforward = 9;
    if (has_steer_angle_feedforward()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (has_steer_angle_lateral_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (has_steer_angle_lateral_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (has_steer_angle_heading_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (has_steer_angle_heading_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (has_steer_angle_feedback()) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (has_steering_position()) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (has_ref_speed()) {
      total_size += 2 + 8;
    }

  }
  // optional double steer_angle_limited = 17;
  if (has_steer_angle_limited()) {
    total_size += 2 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleLateralDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLateralDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleLateralDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleLateralDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLateralDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLateralDebug)
    MergeFrom(*source);
  }
}

void SimpleLateralDebug::MergeFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLateralDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lateral_error()) {
      set_lateral_error(from.lateral_error());
    }
    if (from.has_ref_heading()) {
      set_ref_heading(from.ref_heading());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_heading_error()) {
      set_heading_error(from.heading_error());
    }
    if (from.has_heading_error_rate()) {
      set_heading_error_rate(from.heading_error_rate());
    }
    if (from.has_lateral_error_rate()) {
      set_lateral_error_rate(from.lateral_error_rate());
    }
    if (from.has_curvature()) {
      set_curvature(from.curvature());
    }
    if (from.has_steer_angle()) {
      set_steer_angle(from.steer_angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_steer_angle_feedforward()) {
      set_steer_angle_feedforward(from.steer_angle_feedforward());
    }
    if (from.has_steer_angle_lateral_contribution()) {
      set_steer_angle_lateral_contribution(from.steer_angle_lateral_contribution());
    }
    if (from.has_steer_angle_lateral_rate_contribution()) {
      set_steer_angle_lateral_rate_contribution(from.steer_angle_lateral_rate_contribution());
    }
    if (from.has_steer_angle_heading_contribution()) {
      set_steer_angle_heading_contribution(from.steer_angle_heading_contribution());
    }
    if (from.has_steer_angle_heading_rate_contribution()) {
      set_steer_angle_heading_rate_contribution(from.steer_angle_heading_rate_contribution());
    }
    if (from.has_steer_angle_feedback()) {
      set_steer_angle_feedback(from.steer_angle_feedback());
    }
    if (from.has_steering_position()) {
      set_steering_position(from.steering_position());
    }
    if (from.has_ref_speed()) {
      set_ref_speed(from.ref_speed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_steer_angle_limited()) {
      set_steer_angle_limited(from.steer_angle_limited());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleLateralDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLateralDebug::CopyFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralDebug::IsInitialized() const {

  return true;
}

void SimpleLateralDebug::Swap(SimpleLateralDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleLateralDebug::InternalSwap(SimpleLateralDebug* other) {
  std::swap(lateral_error_, other->lateral_error_);
  std::swap(ref_heading_, other->ref_heading_);
  std::swap(heading_, other->heading_);
  std::swap(heading_error_, other->heading_error_);
  std::swap(heading_error_rate_, other->heading_error_rate_);
  std::swap(lateral_error_rate_, other->lateral_error_rate_);
  std::swap(curvature_, other->curvature_);
  std::swap(steer_angle_, other->steer_angle_);
  std::swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  std::swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  std::swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  std::swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  std::swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  std::swap(steer_angle_feedback_, other->steer_angle_feedback_);
  std::swap(steering_position_, other->steering_position_);
  std::swap(ref_speed_, other->ref_speed_);
  std::swap(steer_angle_limited_, other->steer_angle_limited_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleLateralDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleLateralDebug_descriptor_;
  metadata.reflection = SimpleLateralDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleLateralDebug

// optional double lateral_error = 1;
bool SimpleLateralDebug::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimpleLateralDebug::set_has_lateral_error() {
  _has_bits_[0] |= 0x00000001u;
}
void SimpleLateralDebug::clear_has_lateral_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleLateralDebug::clear_lateral_error() {
  lateral_error_ = 0;
  clear_has_lateral_error();
}
 double SimpleLateralDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.lateral_error)
  return lateral_error_;
}
 void SimpleLateralDebug::set_lateral_error(double value) {
  set_has_lateral_error();
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.lateral_error)
}

// optional double ref_heading = 2;
bool SimpleLateralDebug::has_ref_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimpleLateralDebug::set_has_ref_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void SimpleLateralDebug::clear_has_ref_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleLateralDebug::clear_ref_heading() {
  ref_heading_ = 0;
  clear_has_ref_heading();
}
 double SimpleLateralDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.ref_heading)
  return ref_heading_;
}
 void SimpleLateralDebug::set_ref_heading(double value) {
  set_has_ref_heading();
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.ref_heading)
}

// optional double heading = 3;
bool SimpleLateralDebug::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SimpleLateralDebug::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void SimpleLateralDebug::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleLateralDebug::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double SimpleLateralDebug::heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading)
  return heading_;
}
 void SimpleLateralDebug::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading)
}

// optional double heading_error = 4;
bool SimpleLateralDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimpleLateralDebug::set_has_heading_error() {
  _has_bits_[0] |= 0x00000008u;
}
void SimpleLateralDebug::clear_has_heading_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimpleLateralDebug::clear_heading_error() {
  heading_error_ = 0;
  clear_has_heading_error();
}
 double SimpleLateralDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading_error)
  return heading_error_;
}
 void SimpleLateralDebug::set_heading_error(double value) {
  set_has_heading_error();
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading_error)
}

// optional double heading_error_rate = 5;
bool SimpleLateralDebug::has_heading_error_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SimpleLateralDebug::set_has_heading_error_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void SimpleLateralDebug::clear_has_heading_error_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void SimpleLateralDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  clear_has_heading_error_rate();
}
 double SimpleLateralDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading_error_rate)
  return heading_error_rate_;
}
 void SimpleLateralDebug::set_heading_error_rate(double value) {
  set_has_heading_error_rate();
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
bool SimpleLateralDebug::has_lateral_error_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SimpleLateralDebug::set_has_lateral_error_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void SimpleLateralDebug::clear_has_lateral_error_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void SimpleLateralDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  clear_has_lateral_error_rate();
}
 double SimpleLateralDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.lateral_error_rate)
  return lateral_error_rate_;
}
 void SimpleLateralDebug::set_lateral_error_rate(double value) {
  set_has_lateral_error_rate();
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.lateral_error_rate)
}

// optional double curvature = 7;
bool SimpleLateralDebug::has_curvature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimpleLateralDebug::set_has_curvature() {
  _has_bits_[0] |= 0x00000040u;
}
void SimpleLateralDebug::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimpleLateralDebug::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
 double SimpleLateralDebug::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.curvature)
  return curvature_;
}
 void SimpleLateralDebug::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.curvature)
}

// optional double steer_angle = 8;
bool SimpleLateralDebug::has_steer_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle() {
  _has_bits_[0] |= 0x00000080u;
}
void SimpleLateralDebug::clear_has_steer_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
void SimpleLateralDebug::clear_steer_angle() {
  steer_angle_ = 0;
  clear_has_steer_angle();
}
 double SimpleLateralDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle)
  return steer_angle_;
}
 void SimpleLateralDebug::set_steer_angle(double value) {
  set_has_steer_angle();
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
bool SimpleLateralDebug::has_steer_angle_feedforward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_feedforward() {
  _has_bits_[0] |= 0x00000100u;
}
void SimpleLateralDebug::clear_has_steer_angle_feedforward() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimpleLateralDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  clear_has_steer_angle_feedforward();
}
 double SimpleLateralDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
 void SimpleLateralDebug::set_steer_angle_feedforward(double value) {
  set_has_steer_angle_feedforward();
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
bool SimpleLateralDebug::has_steer_angle_lateral_contribution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_lateral_contribution() {
  _has_bits_[0] |= 0x00000200u;
}
void SimpleLateralDebug::clear_has_steer_angle_lateral_contribution() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimpleLateralDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  clear_has_steer_angle_lateral_contribution();
}
 double SimpleLateralDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
 void SimpleLateralDebug::set_steer_angle_lateral_contribution(double value) {
  set_has_steer_angle_lateral_contribution();
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
bool SimpleLateralDebug::has_steer_angle_lateral_rate_contribution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] |= 0x00000400u;
}
void SimpleLateralDebug::clear_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimpleLateralDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  clear_has_steer_angle_lateral_rate_contribution();
}
 double SimpleLateralDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
 void SimpleLateralDebug::set_steer_angle_lateral_rate_contribution(double value) {
  set_has_steer_angle_lateral_rate_contribution();
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
bool SimpleLateralDebug::has_steer_angle_heading_contribution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_heading_contribution() {
  _has_bits_[0] |= 0x00000800u;
}
void SimpleLateralDebug::clear_has_steer_angle_heading_contribution() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimpleLateralDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  clear_has_steer_angle_heading_contribution();
}
 double SimpleLateralDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
 void SimpleLateralDebug::set_steer_angle_heading_contribution(double value) {
  set_has_steer_angle_heading_contribution();
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
bool SimpleLateralDebug::has_steer_angle_heading_rate_contribution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] |= 0x00001000u;
}
void SimpleLateralDebug::clear_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimpleLateralDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  clear_has_steer_angle_heading_rate_contribution();
}
 double SimpleLateralDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
 void SimpleLateralDebug::set_steer_angle_heading_rate_contribution(double value) {
  set_has_steer_angle_heading_rate_contribution();
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
bool SimpleLateralDebug::has_steer_angle_feedback() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_feedback() {
  _has_bits_[0] |= 0x00002000u;
}
void SimpleLateralDebug::clear_has_steer_angle_feedback() {
  _has_bits_[0] &= ~0x00002000u;
}
void SimpleLateralDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  clear_has_steer_angle_feedback();
}
 double SimpleLateralDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
 void SimpleLateralDebug::set_steer_angle_feedback(double value) {
  set_has_steer_angle_feedback();
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
bool SimpleLateralDebug::has_steering_position() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimpleLateralDebug::set_has_steering_position() {
  _has_bits_[0] |= 0x00004000u;
}
void SimpleLateralDebug::clear_has_steering_position() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimpleLateralDebug::clear_steering_position() {
  steering_position_ = 0;
  clear_has_steering_position();
}
 double SimpleLateralDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steering_position)
  return steering_position_;
}
 void SimpleLateralDebug::set_steering_position(double value) {
  set_has_steering_position();
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steering_position)
}

// optional double ref_speed = 16;
bool SimpleLateralDebug::has_ref_speed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SimpleLateralDebug::set_has_ref_speed() {
  _has_bits_[0] |= 0x00008000u;
}
void SimpleLateralDebug::clear_has_ref_speed() {
  _has_bits_[0] &= ~0x00008000u;
}
void SimpleLateralDebug::clear_ref_speed() {
  ref_speed_ = 0;
  clear_has_ref_speed();
}
 double SimpleLateralDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.ref_speed)
  return ref_speed_;
}
 void SimpleLateralDebug::set_ref_speed(double value) {
  set_has_ref_speed();
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
bool SimpleLateralDebug::has_steer_angle_limited() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_limited() {
  _has_bits_[0] |= 0x00010000u;
}
void SimpleLateralDebug::clear_has_steer_angle_limited() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimpleLateralDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  clear_has_steer_angle_limited();
}
 double SimpleLateralDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_limited)
  return steer_angle_limited_;
}
 void SimpleLateralDebug::set_steer_angle_limited(double value) {
  set_has_steer_angle_limited();
  steer_angle_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_limited)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleMPCDebug::kLateralErrorFieldNumber;
const int SimpleMPCDebug::kRefHeadingFieldNumber;
const int SimpleMPCDebug::kHeadingFieldNumber;
const int SimpleMPCDebug::kHeadingErrorFieldNumber;
const int SimpleMPCDebug::kHeadingErrorRateFieldNumber;
const int SimpleMPCDebug::kLateralErrorRateFieldNumber;
const int SimpleMPCDebug::kCurvatureFieldNumber;
const int SimpleMPCDebug::kSteerAngleFieldNumber;
const int SimpleMPCDebug::kSteerAngleFeedforwardFieldNumber;
const int SimpleMPCDebug::kSteerAngleLateralContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleLateralRateContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleHeadingContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleHeadingRateContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleFeedbackFieldNumber;
const int SimpleMPCDebug::kSteeringPositionFieldNumber;
const int SimpleMPCDebug::kRefSpeedFieldNumber;
const int SimpleMPCDebug::kSteerAngleLimitedFieldNumber;
const int SimpleMPCDebug::kStationReferenceFieldNumber;
const int SimpleMPCDebug::kStationErrorFieldNumber;
const int SimpleMPCDebug::kSpeedReferenceFieldNumber;
const int SimpleMPCDebug::kSpeedErrorFieldNumber;
const int SimpleMPCDebug::kAccelerationReferenceFieldNumber;
const int SimpleMPCDebug::kIsFullStopFieldNumber;
const int SimpleMPCDebug::kStationFeedbackFieldNumber;
const int SimpleMPCDebug::kSpeedFeedbackFieldNumber;
const int SimpleMPCDebug::kAccelerationCmdCloseloopFieldNumber;
const int SimpleMPCDebug::kAccelerationCmdFieldNumber;
const int SimpleMPCDebug::kAccelerationLookupFieldNumber;
const int SimpleMPCDebug::kSpeedLookupFieldNumber;
const int SimpleMPCDebug::kCalibrationValueFieldNumber;
const int SimpleMPCDebug::kMatrixQUpdatedFieldNumber;
const int SimpleMPCDebug::kMatrixRUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleMPCDebug::SimpleMPCDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleMPCDebug)
}

void SimpleMPCDebug::InitAsDefaultInstance() {
}

SimpleMPCDebug::SimpleMPCDebug(const SimpleMPCDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleMPCDebug)
}

void SimpleMPCDebug::SharedCtor() {
  _cached_size_ = 0;
  lateral_error_ = 0;
  ref_heading_ = 0;
  heading_ = 0;
  heading_error_ = 0;
  heading_error_rate_ = 0;
  lateral_error_rate_ = 0;
  curvature_ = 0;
  steer_angle_ = 0;
  steer_angle_feedforward_ = 0;
  steer_angle_lateral_contribution_ = 0;
  steer_angle_lateral_rate_contribution_ = 0;
  steer_angle_heading_contribution_ = 0;
  steer_angle_heading_rate_contribution_ = 0;
  steer_angle_feedback_ = 0;
  steering_position_ = 0;
  ref_speed_ = 0;
  steer_angle_limited_ = 0;
  station_reference_ = 0;
  station_error_ = 0;
  speed_reference_ = 0;
  speed_error_ = 0;
  acceleration_reference_ = 0;
  is_full_stop_ = false;
  station_feedback_ = 0;
  speed_feedback_ = 0;
  acceleration_cmd_closeloop_ = 0;
  acceleration_cmd_ = 0;
  acceleration_lookup_ = 0;
  speed_lookup_ = 0;
  calibration_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleMPCDebug::~SimpleMPCDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleMPCDebug)
  SharedDtor();
}

void SimpleMPCDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleMPCDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMPCDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleMPCDebug_descriptor_;
}

const SimpleMPCDebug& SimpleMPCDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  return *default_instance_;
}

SimpleMPCDebug* SimpleMPCDebug::default_instance_ = NULL;

SimpleMPCDebug* SimpleMPCDebug::New(::google::protobuf::Arena* arena) const {
  SimpleMPCDebug* n = new SimpleMPCDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleMPCDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleMPCDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimpleMPCDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleMPCDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lateral_error_, steer_angle_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(steer_angle_feedforward_, ref_speed_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(steer_angle_limited_, station_feedback_);
    is_full_stop_ = false;
  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    ZR_(speed_feedback_, calibration_value_);
  }

#undef ZR_HELPER_
#undef ZR_

  matrix_q_updated_.Clear();
  matrix_r_updated_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleMPCDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleMPCDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lateral_error = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
          set_has_lateral_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ref_heading;
        break;
      }

      // optional double ref_heading = 2;
      case 2: {
        if (tag == 17) {
         parse_ref_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_)));
          set_has_ref_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (tag == 25) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_heading_error;
        break;
      }

      // optional double heading_error = 4;
      case 4: {
        if (tag == 33) {
         parse_heading_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
          set_has_heading_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading_error_rate;
        break;
      }

      // optional double heading_error_rate = 5;
      case 5: {
        if (tag == 41) {
         parse_heading_error_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_rate_)));
          set_has_heading_error_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_lateral_error_rate;
        break;
      }

      // optional double lateral_error_rate = 6;
      case 6: {
        if (tag == 49) {
         parse_lateral_error_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_rate_)));
          set_has_lateral_error_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_curvature;
        break;
      }

      // optional double curvature = 7;
      case 7: {
        if (tag == 57) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
          set_has_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_steer_angle;
        break;
      }

      // optional double steer_angle = 8;
      case 8: {
        if (tag == 65) {
         parse_steer_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_)));
          set_has_steer_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_steer_angle_feedforward;
        break;
      }

      // optional double steer_angle_feedforward = 9;
      case 9: {
        if (tag == 73) {
         parse_steer_angle_feedforward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedforward_)));
          set_has_steer_angle_feedforward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_steer_angle_lateral_contribution;
        break;
      }

      // optional double steer_angle_lateral_contribution = 10;
      case 10: {
        if (tag == 81) {
         parse_steer_angle_lateral_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_contribution_)));
          set_has_steer_angle_lateral_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_steer_angle_lateral_rate_contribution;
        break;
      }

      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11: {
        if (tag == 89) {
         parse_steer_angle_lateral_rate_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_rate_contribution_)));
          set_has_steer_angle_lateral_rate_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_steer_angle_heading_contribution;
        break;
      }

      // optional double steer_angle_heading_contribution = 12;
      case 12: {
        if (tag == 97) {
         parse_steer_angle_heading_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_contribution_)));
          set_has_steer_angle_heading_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_steer_angle_heading_rate_contribution;
        break;
      }

      // optional double steer_angle_heading_rate_contribution = 13;
      case 13: {
        if (tag == 105) {
         parse_steer_angle_heading_rate_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_rate_contribution_)));
          set_has_steer_angle_heading_rate_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_steer_angle_feedback;
        break;
      }

      // optional double steer_angle_feedback = 14;
      case 14: {
        if (tag == 113) {
         parse_steer_angle_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedback_)));
          set_has_steer_angle_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_steering_position;
        break;
      }

      // optional double steering_position = 15;
      case 15: {
        if (tag == 121) {
         parse_steering_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_position_)));
          set_has_steering_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_ref_speed;
        break;
      }

      // optional double ref_speed = 16;
      case 16: {
        if (tag == 129) {
         parse_ref_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_speed_)));
          set_has_ref_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_steer_angle_limited;
        break;
      }

      // optional double steer_angle_limited = 17;
      case 17: {
        if (tag == 137) {
         parse_steer_angle_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_limited_)));
          set_has_steer_angle_limited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_station_reference;
        break;
      }

      // optional double station_reference = 18;
      case 18: {
        if (tag == 145) {
         parse_station_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_reference_)));
          set_has_station_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_station_error;
        break;
      }

      // optional double station_error = 19;
      case 19: {
        if (tag == 153) {
         parse_station_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
          set_has_station_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_speed_reference;
        break;
      }

      // optional double speed_reference = 20;
      case 20: {
        if (tag == 161) {
         parse_speed_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_reference_)));
          set_has_speed_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_speed_error;
        break;
      }

      // optional double speed_error = 21;
      case 21: {
        if (tag == 169) {
         parse_speed_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_error_)));
          set_has_speed_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_acceleration_reference;
        break;
      }

      // optional double acceleration_reference = 22;
      case 22: {
        if (tag == 177) {
         parse_acceleration_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_reference_)));
          set_has_acceleration_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_is_full_stop;
        break;
      }

      // optional bool is_full_stop = 23;
      case 23: {
        if (tag == 184) {
         parse_is_full_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_stop_)));
          set_has_is_full_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_station_feedback;
        break;
      }

      // optional double station_feedback = 24;
      case 24: {
        if (tag == 193) {
         parse_station_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_feedback_)));
          set_has_station_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_speed_feedback;
        break;
      }

      // optional double speed_feedback = 25;
      case 25: {
        if (tag == 201) {
         parse_speed_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_feedback_)));
          set_has_speed_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_acceleration_cmd_closeloop;
        break;
      }

      // optional double acceleration_cmd_closeloop = 26;
      case 26: {
        if (tag == 209) {
         parse_acceleration_cmd_closeloop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_closeloop_)));
          set_has_acceleration_cmd_closeloop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_acceleration_cmd;
        break;
      }

      // optional double acceleration_cmd = 27;
      case 27: {
        if (tag == 217) {
         parse_acceleration_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_)));
          set_has_acceleration_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_acceleration_lookup;
        break;
      }

      // optional double acceleration_lookup = 28;
      case 28: {
        if (tag == 225) {
         parse_acceleration_lookup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_lookup_)));
          set_has_acceleration_lookup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_speed_lookup;
        break;
      }

      // optional double speed_lookup = 29;
      case 29: {
        if (tag == 233) {
         parse_speed_lookup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_lookup_)));
          set_has_speed_lookup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_calibration_value;
        break;
      }

      // optional double calibration_value = 30;
      case 30: {
        if (tag == 241) {
         parse_calibration_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &calibration_value_)));
          set_has_calibration_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_matrix_q_updated;
        break;
      }

      // repeated double matrix_q_updated = 31;
      case 31: {
        if (tag == 249) {
         parse_matrix_q_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 249, input, this->mutable_matrix_q_updated())));
        } else if (tag == 250) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_q_updated())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_matrix_q_updated;
        if (input->ExpectTag(257)) goto parse_matrix_r_updated;
        break;
      }

      // repeated double matrix_r_updated = 32;
      case 32: {
        if (tag == 257) {
         parse_matrix_r_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 257, input, this->mutable_matrix_r_updated())));
        } else if (tag == 258) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_r_updated())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_matrix_r_updated;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleMPCDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleMPCDebug)
  return false;
#undef DO_
}

void SimpleMPCDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleMPCDebug)
  // optional double lateral_error = 1;
  if (has_lateral_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_error(), output);
  }

  // optional double ref_heading = 2;
  if (has_ref_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_heading(), output);
  }

  // optional double heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double heading_error = 4;
  if (has_heading_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  // optional double heading_error_rate = 5;
  if (has_heading_error_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_error_rate(), output);
  }

  // optional double lateral_error_rate = 6;
  if (has_lateral_error_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lateral_error_rate(), output);
  }

  // optional double curvature = 7;
  if (has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature(), output);
  }

  // optional double steer_angle = 8;
  if (has_steer_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->steer_angle(), output);
  }

  // optional double steer_angle_feedforward = 9;
  if (has_steer_angle_feedforward()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_feedforward(), output);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (has_steer_angle_lateral_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->steer_angle_lateral_contribution(), output);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (has_steer_angle_lateral_rate_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->steer_angle_lateral_rate_contribution(), output);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (has_steer_angle_heading_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steer_angle_heading_contribution(), output);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (has_steer_angle_heading_rate_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_angle_heading_rate_contribution(), output);
  }

  // optional double steer_angle_feedback = 14;
  if (has_steer_angle_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->steer_angle_feedback(), output);
  }

  // optional double steering_position = 15;
  if (has_steering_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steering_position(), output);
  }

  // optional double ref_speed = 16;
  if (has_ref_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ref_speed(), output);
  }

  // optional double steer_angle_limited = 17;
  if (has_steer_angle_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->steer_angle_limited(), output);
  }

  // optional double station_reference = 18;
  if (has_station_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->station_reference(), output);
  }

  // optional double station_error = 19;
  if (has_station_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->station_error(), output);
  }

  // optional double speed_reference = 20;
  if (has_speed_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->speed_reference(), output);
  }

  // optional double speed_error = 21;
  if (has_speed_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->speed_error(), output);
  }

  // optional double acceleration_reference = 22;
  if (has_acceleration_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->acceleration_reference(), output);
  }

  // optional bool is_full_stop = 23;
  if (has_is_full_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_full_stop(), output);
  }

  // optional double station_feedback = 24;
  if (has_station_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->station_feedback(), output);
  }

  // optional double speed_feedback = 25;
  if (has_speed_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->speed_feedback(), output);
  }

  // optional double acceleration_cmd_closeloop = 26;
  if (has_acceleration_cmd_closeloop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->acceleration_cmd_closeloop(), output);
  }

  // optional double acceleration_cmd = 27;
  if (has_acceleration_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->acceleration_cmd(), output);
  }

  // optional double acceleration_lookup = 28;
  if (has_acceleration_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->acceleration_lookup(), output);
  }

  // optional double speed_lookup = 29;
  if (has_speed_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->speed_lookup(), output);
  }

  // optional double calibration_value = 30;
  if (has_calibration_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->calibration_value(), output);
  }

  // repeated double matrix_q_updated = 31;
  for (int i = 0; i < this->matrix_q_updated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      31, this->matrix_q_updated(i), output);
  }

  // repeated double matrix_r_updated = 32;
  for (int i = 0; i < this->matrix_r_updated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      32, this->matrix_r_updated(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleMPCDebug)
}

::google::protobuf::uint8* SimpleMPCDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleMPCDebug)
  // optional double lateral_error = 1;
  if (has_lateral_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (has_ref_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_heading(), target);
  }

  // optional double heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double heading_error = 4;
  if (has_heading_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (has_heading_error_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (has_lateral_error_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature(), target);
  }

  // optional double steer_angle = 8;
  if (has_steer_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (has_steer_angle_feedforward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (has_steer_angle_lateral_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (has_steer_angle_lateral_rate_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (has_steer_angle_heading_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (has_steer_angle_heading_rate_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (has_steer_angle_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (has_steering_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (has_ref_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (has_steer_angle_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->steer_angle_limited(), target);
  }

  // optional double station_reference = 18;
  if (has_station_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->station_reference(), target);
  }

  // optional double station_error = 19;
  if (has_station_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->station_error(), target);
  }

  // optional double speed_reference = 20;
  if (has_speed_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->speed_reference(), target);
  }

  // optional double speed_error = 21;
  if (has_speed_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->speed_error(), target);
  }

  // optional double acceleration_reference = 22;
  if (has_acceleration_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->acceleration_reference(), target);
  }

  // optional bool is_full_stop = 23;
  if (has_is_full_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_full_stop(), target);
  }

  // optional double station_feedback = 24;
  if (has_station_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->station_feedback(), target);
  }

  // optional double speed_feedback = 25;
  if (has_speed_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->speed_feedback(), target);
  }

  // optional double acceleration_cmd_closeloop = 26;
  if (has_acceleration_cmd_closeloop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 27;
  if (has_acceleration_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 28;
  if (has_acceleration_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->acceleration_lookup(), target);
  }

  // optional double speed_lookup = 29;
  if (has_speed_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->speed_lookup(), target);
  }

  // optional double calibration_value = 30;
  if (has_calibration_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->calibration_value(), target);
  }

  // repeated double matrix_q_updated = 31;
  for (int i = 0; i < this->matrix_q_updated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(31, this->matrix_q_updated(i), target);
  }

  // repeated double matrix_r_updated = 32;
  for (int i = 0; i < this->matrix_r_updated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(32, this->matrix_r_updated(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleMPCDebug)
  return target;
}

int SimpleMPCDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleMPCDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double lateral_error = 1;
    if (has_lateral_error()) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (has_ref_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (has_heading_error()) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (has_heading_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (has_lateral_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (has_steer_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double steer_angle_feedforward = 9;
    if (has_steer_angle_feedforward()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (has_steer_angle_lateral_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (has_steer_angle_lateral_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (has_steer_angle_heading_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (has_steer_angle_heading_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (has_steer_angle_feedback()) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (has_steering_position()) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (has_ref_speed()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double steer_angle_limited = 17;
    if (has_steer_angle_limited()) {
      total_size += 2 + 8;
    }

    // optional double station_reference = 18;
    if (has_station_reference()) {
      total_size += 2 + 8;
    }

    // optional double station_error = 19;
    if (has_station_error()) {
      total_size += 2 + 8;
    }

    // optional double speed_reference = 20;
    if (has_speed_reference()) {
      total_size += 2 + 8;
    }

    // optional double speed_error = 21;
    if (has_speed_error()) {
      total_size += 2 + 8;
    }

    // optional double acceleration_reference = 22;
    if (has_acceleration_reference()) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 23;
    if (has_is_full_stop()) {
      total_size += 2 + 1;
    }

    // optional double station_feedback = 24;
    if (has_station_feedback()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional double speed_feedback = 25;
    if (has_speed_feedback()) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd_closeloop = 26;
    if (has_acceleration_cmd_closeloop()) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd = 27;
    if (has_acceleration_cmd()) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup = 28;
    if (has_acceleration_lookup()) {
      total_size += 2 + 8;
    }

    // optional double speed_lookup = 29;
    if (has_speed_lookup()) {
      total_size += 2 + 8;
    }

    // optional double calibration_value = 30;
    if (has_calibration_value()) {
      total_size += 2 + 8;
    }

  }
  // repeated double matrix_q_updated = 31;
  {
    int data_size = 0;
    data_size = 8 * this->matrix_q_updated_size();
    total_size += 2 * this->matrix_q_updated_size() + data_size;
  }

  // repeated double matrix_r_updated = 32;
  {
    int data_size = 0;
    data_size = 8 * this->matrix_r_updated_size();
    total_size += 2 * this->matrix_r_updated_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMPCDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleMPCDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleMPCDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleMPCDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleMPCDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleMPCDebug)
    MergeFrom(*source);
  }
}

void SimpleMPCDebug::MergeFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleMPCDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  matrix_q_updated_.MergeFrom(from.matrix_q_updated_);
  matrix_r_updated_.MergeFrom(from.matrix_r_updated_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lateral_error()) {
      set_lateral_error(from.lateral_error());
    }
    if (from.has_ref_heading()) {
      set_ref_heading(from.ref_heading());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_heading_error()) {
      set_heading_error(from.heading_error());
    }
    if (from.has_heading_error_rate()) {
      set_heading_error_rate(from.heading_error_rate());
    }
    if (from.has_lateral_error_rate()) {
      set_lateral_error_rate(from.lateral_error_rate());
    }
    if (from.has_curvature()) {
      set_curvature(from.curvature());
    }
    if (from.has_steer_angle()) {
      set_steer_angle(from.steer_angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_steer_angle_feedforward()) {
      set_steer_angle_feedforward(from.steer_angle_feedforward());
    }
    if (from.has_steer_angle_lateral_contribution()) {
      set_steer_angle_lateral_contribution(from.steer_angle_lateral_contribution());
    }
    if (from.has_steer_angle_lateral_rate_contribution()) {
      set_steer_angle_lateral_rate_contribution(from.steer_angle_lateral_rate_contribution());
    }
    if (from.has_steer_angle_heading_contribution()) {
      set_steer_angle_heading_contribution(from.steer_angle_heading_contribution());
    }
    if (from.has_steer_angle_heading_rate_contribution()) {
      set_steer_angle_heading_rate_contribution(from.steer_angle_heading_rate_contribution());
    }
    if (from.has_steer_angle_feedback()) {
      set_steer_angle_feedback(from.steer_angle_feedback());
    }
    if (from.has_steering_position()) {
      set_steering_position(from.steering_position());
    }
    if (from.has_ref_speed()) {
      set_ref_speed(from.ref_speed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_steer_angle_limited()) {
      set_steer_angle_limited(from.steer_angle_limited());
    }
    if (from.has_station_reference()) {
      set_station_reference(from.station_reference());
    }
    if (from.has_station_error()) {
      set_station_error(from.station_error());
    }
    if (from.has_speed_reference()) {
      set_speed_reference(from.speed_reference());
    }
    if (from.has_speed_error()) {
      set_speed_error(from.speed_error());
    }
    if (from.has_acceleration_reference()) {
      set_acceleration_reference(from.acceleration_reference());
    }
    if (from.has_is_full_stop()) {
      set_is_full_stop(from.is_full_stop());
    }
    if (from.has_station_feedback()) {
      set_station_feedback(from.station_feedback());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_speed_feedback()) {
      set_speed_feedback(from.speed_feedback());
    }
    if (from.has_acceleration_cmd_closeloop()) {
      set_acceleration_cmd_closeloop(from.acceleration_cmd_closeloop());
    }
    if (from.has_acceleration_cmd()) {
      set_acceleration_cmd(from.acceleration_cmd());
    }
    if (from.has_acceleration_lookup()) {
      set_acceleration_lookup(from.acceleration_lookup());
    }
    if (from.has_speed_lookup()) {
      set_speed_lookup(from.speed_lookup());
    }
    if (from.has_calibration_value()) {
      set_calibration_value(from.calibration_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleMPCDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMPCDebug::CopyFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCDebug::IsInitialized() const {

  return true;
}

void SimpleMPCDebug::Swap(SimpleMPCDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleMPCDebug::InternalSwap(SimpleMPCDebug* other) {
  std::swap(lateral_error_, other->lateral_error_);
  std::swap(ref_heading_, other->ref_heading_);
  std::swap(heading_, other->heading_);
  std::swap(heading_error_, other->heading_error_);
  std::swap(heading_error_rate_, other->heading_error_rate_);
  std::swap(lateral_error_rate_, other->lateral_error_rate_);
  std::swap(curvature_, other->curvature_);
  std::swap(steer_angle_, other->steer_angle_);
  std::swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  std::swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  std::swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  std::swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  std::swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  std::swap(steer_angle_feedback_, other->steer_angle_feedback_);
  std::swap(steering_position_, other->steering_position_);
  std::swap(ref_speed_, other->ref_speed_);
  std::swap(steer_angle_limited_, other->steer_angle_limited_);
  std::swap(station_reference_, other->station_reference_);
  std::swap(station_error_, other->station_error_);
  std::swap(speed_reference_, other->speed_reference_);
  std::swap(speed_error_, other->speed_error_);
  std::swap(acceleration_reference_, other->acceleration_reference_);
  std::swap(is_full_stop_, other->is_full_stop_);
  std::swap(station_feedback_, other->station_feedback_);
  std::swap(speed_feedback_, other->speed_feedback_);
  std::swap(acceleration_cmd_closeloop_, other->acceleration_cmd_closeloop_);
  std::swap(acceleration_cmd_, other->acceleration_cmd_);
  std::swap(acceleration_lookup_, other->acceleration_lookup_);
  std::swap(speed_lookup_, other->speed_lookup_);
  std::swap(calibration_value_, other->calibration_value_);
  matrix_q_updated_.UnsafeArenaSwap(&other->matrix_q_updated_);
  matrix_r_updated_.UnsafeArenaSwap(&other->matrix_r_updated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleMPCDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleMPCDebug_descriptor_;
  metadata.reflection = SimpleMPCDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleMPCDebug

// optional double lateral_error = 1;
bool SimpleMPCDebug::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimpleMPCDebug::set_has_lateral_error() {
  _has_bits_[0] |= 0x00000001u;
}
void SimpleMPCDebug::clear_has_lateral_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleMPCDebug::clear_lateral_error() {
  lateral_error_ = 0;
  clear_has_lateral_error();
}
 double SimpleMPCDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.lateral_error)
  return lateral_error_;
}
 void SimpleMPCDebug::set_lateral_error(double value) {
  set_has_lateral_error();
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.lateral_error)
}

// optional double ref_heading = 2;
bool SimpleMPCDebug::has_ref_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimpleMPCDebug::set_has_ref_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void SimpleMPCDebug::clear_has_ref_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleMPCDebug::clear_ref_heading() {
  ref_heading_ = 0;
  clear_has_ref_heading();
}
 double SimpleMPCDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.ref_heading)
  return ref_heading_;
}
 void SimpleMPCDebug::set_ref_heading(double value) {
  set_has_ref_heading();
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.ref_heading)
}

// optional double heading = 3;
bool SimpleMPCDebug::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SimpleMPCDebug::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void SimpleMPCDebug::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleMPCDebug::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double SimpleMPCDebug::heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.heading)
  return heading_;
}
 void SimpleMPCDebug::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.heading)
}

// optional double heading_error = 4;
bool SimpleMPCDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimpleMPCDebug::set_has_heading_error() {
  _has_bits_[0] |= 0x00000008u;
}
void SimpleMPCDebug::clear_has_heading_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimpleMPCDebug::clear_heading_error() {
  heading_error_ = 0;
  clear_has_heading_error();
}
 double SimpleMPCDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.heading_error)
  return heading_error_;
}
 void SimpleMPCDebug::set_heading_error(double value) {
  set_has_heading_error();
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.heading_error)
}

// optional double heading_error_rate = 5;
bool SimpleMPCDebug::has_heading_error_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SimpleMPCDebug::set_has_heading_error_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void SimpleMPCDebug::clear_has_heading_error_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void SimpleMPCDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  clear_has_heading_error_rate();
}
 double SimpleMPCDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.heading_error_rate)
  return heading_error_rate_;
}
 void SimpleMPCDebug::set_heading_error_rate(double value) {
  set_has_heading_error_rate();
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
bool SimpleMPCDebug::has_lateral_error_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SimpleMPCDebug::set_has_lateral_error_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void SimpleMPCDebug::clear_has_lateral_error_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void SimpleMPCDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  clear_has_lateral_error_rate();
}
 double SimpleMPCDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.lateral_error_rate)
  return lateral_error_rate_;
}
 void SimpleMPCDebug::set_lateral_error_rate(double value) {
  set_has_lateral_error_rate();
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.lateral_error_rate)
}

// optional double curvature = 7;
bool SimpleMPCDebug::has_curvature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimpleMPCDebug::set_has_curvature() {
  _has_bits_[0] |= 0x00000040u;
}
void SimpleMPCDebug::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimpleMPCDebug::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
 double SimpleMPCDebug::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.curvature)
  return curvature_;
}
 void SimpleMPCDebug::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.curvature)
}

// optional double steer_angle = 8;
bool SimpleMPCDebug::has_steer_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle() {
  _has_bits_[0] |= 0x00000080u;
}
void SimpleMPCDebug::clear_has_steer_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
void SimpleMPCDebug::clear_steer_angle() {
  steer_angle_ = 0;
  clear_has_steer_angle();
}
 double SimpleMPCDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle)
  return steer_angle_;
}
 void SimpleMPCDebug::set_steer_angle(double value) {
  set_has_steer_angle();
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
bool SimpleMPCDebug::has_steer_angle_feedforward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_feedforward() {
  _has_bits_[0] |= 0x00000100u;
}
void SimpleMPCDebug::clear_has_steer_angle_feedforward() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimpleMPCDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  clear_has_steer_angle_feedforward();
}
 double SimpleMPCDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
 void SimpleMPCDebug::set_steer_angle_feedforward(double value) {
  set_has_steer_angle_feedforward();
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
bool SimpleMPCDebug::has_steer_angle_lateral_contribution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_lateral_contribution() {
  _has_bits_[0] |= 0x00000200u;
}
void SimpleMPCDebug::clear_has_steer_angle_lateral_contribution() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimpleMPCDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  clear_has_steer_angle_lateral_contribution();
}
 double SimpleMPCDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
 void SimpleMPCDebug::set_steer_angle_lateral_contribution(double value) {
  set_has_steer_angle_lateral_contribution();
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
bool SimpleMPCDebug::has_steer_angle_lateral_rate_contribution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] |= 0x00000400u;
}
void SimpleMPCDebug::clear_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimpleMPCDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  clear_has_steer_angle_lateral_rate_contribution();
}
 double SimpleMPCDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
 void SimpleMPCDebug::set_steer_angle_lateral_rate_contribution(double value) {
  set_has_steer_angle_lateral_rate_contribution();
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
bool SimpleMPCDebug::has_steer_angle_heading_contribution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_heading_contribution() {
  _has_bits_[0] |= 0x00000800u;
}
void SimpleMPCDebug::clear_has_steer_angle_heading_contribution() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimpleMPCDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  clear_has_steer_angle_heading_contribution();
}
 double SimpleMPCDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
 void SimpleMPCDebug::set_steer_angle_heading_contribution(double value) {
  set_has_steer_angle_heading_contribution();
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
bool SimpleMPCDebug::has_steer_angle_heading_rate_contribution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] |= 0x00001000u;
}
void SimpleMPCDebug::clear_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimpleMPCDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  clear_has_steer_angle_heading_rate_contribution();
}
 double SimpleMPCDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
 void SimpleMPCDebug::set_steer_angle_heading_rate_contribution(double value) {
  set_has_steer_angle_heading_rate_contribution();
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
bool SimpleMPCDebug::has_steer_angle_feedback() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_feedback() {
  _has_bits_[0] |= 0x00002000u;
}
void SimpleMPCDebug::clear_has_steer_angle_feedback() {
  _has_bits_[0] &= ~0x00002000u;
}
void SimpleMPCDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  clear_has_steer_angle_feedback();
}
 double SimpleMPCDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
 void SimpleMPCDebug::set_steer_angle_feedback(double value) {
  set_has_steer_angle_feedback();
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
bool SimpleMPCDebug::has_steering_position() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimpleMPCDebug::set_has_steering_position() {
  _has_bits_[0] |= 0x00004000u;
}
void SimpleMPCDebug::clear_has_steering_position() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimpleMPCDebug::clear_steering_position() {
  steering_position_ = 0;
  clear_has_steering_position();
}
 double SimpleMPCDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steering_position)
  return steering_position_;
}
 void SimpleMPCDebug::set_steering_position(double value) {
  set_has_steering_position();
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steering_position)
}

// optional double ref_speed = 16;
bool SimpleMPCDebug::has_ref_speed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SimpleMPCDebug::set_has_ref_speed() {
  _has_bits_[0] |= 0x00008000u;
}
void SimpleMPCDebug::clear_has_ref_speed() {
  _has_bits_[0] &= ~0x00008000u;
}
void SimpleMPCDebug::clear_ref_speed() {
  ref_speed_ = 0;
  clear_has_ref_speed();
}
 double SimpleMPCDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.ref_speed)
  return ref_speed_;
}
 void SimpleMPCDebug::set_ref_speed(double value) {
  set_has_ref_speed();
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
bool SimpleMPCDebug::has_steer_angle_limited() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_limited() {
  _has_bits_[0] |= 0x00010000u;
}
void SimpleMPCDebug::clear_has_steer_angle_limited() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimpleMPCDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  clear_has_steer_angle_limited();
}
 double SimpleMPCDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_limited)
  return steer_angle_limited_;
}
 void SimpleMPCDebug::set_steer_angle_limited(double value) {
  set_has_steer_angle_limited();
  steer_angle_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_limited)
}

// optional double station_reference = 18;
bool SimpleMPCDebug::has_station_reference() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SimpleMPCDebug::set_has_station_reference() {
  _has_bits_[0] |= 0x00020000u;
}
void SimpleMPCDebug::clear_has_station_reference() {
  _has_bits_[0] &= ~0x00020000u;
}
void SimpleMPCDebug::clear_station_reference() {
  station_reference_ = 0;
  clear_has_station_reference();
}
 double SimpleMPCDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.station_reference)
  return station_reference_;
}
 void SimpleMPCDebug::set_station_reference(double value) {
  set_has_station_reference();
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.station_reference)
}

// optional double station_error = 19;
bool SimpleMPCDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SimpleMPCDebug::set_has_station_error() {
  _has_bits_[0] |= 0x00040000u;
}
void SimpleMPCDebug::clear_has_station_error() {
  _has_bits_[0] &= ~0x00040000u;
}
void SimpleMPCDebug::clear_station_error() {
  station_error_ = 0;
  clear_has_station_error();
}
 double SimpleMPCDebug::station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.station_error)
  return station_error_;
}
 void SimpleMPCDebug::set_station_error(double value) {
  set_has_station_error();
  station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.station_error)
}

// optional double speed_reference = 20;
bool SimpleMPCDebug::has_speed_reference() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SimpleMPCDebug::set_has_speed_reference() {
  _has_bits_[0] |= 0x00080000u;
}
void SimpleMPCDebug::clear_has_speed_reference() {
  _has_bits_[0] &= ~0x00080000u;
}
void SimpleMPCDebug::clear_speed_reference() {
  speed_reference_ = 0;
  clear_has_speed_reference();
}
 double SimpleMPCDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.speed_reference)
  return speed_reference_;
}
 void SimpleMPCDebug::set_speed_reference(double value) {
  set_has_speed_reference();
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.speed_reference)
}

// optional double speed_error = 21;
bool SimpleMPCDebug::has_speed_error() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SimpleMPCDebug::set_has_speed_error() {
  _has_bits_[0] |= 0x00100000u;
}
void SimpleMPCDebug::clear_has_speed_error() {
  _has_bits_[0] &= ~0x00100000u;
}
void SimpleMPCDebug::clear_speed_error() {
  speed_error_ = 0;
  clear_has_speed_error();
}
 double SimpleMPCDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.speed_error)
  return speed_error_;
}
 void SimpleMPCDebug::set_speed_error(double value) {
  set_has_speed_error();
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.speed_error)
}

// optional double acceleration_reference = 22;
bool SimpleMPCDebug::has_acceleration_reference() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SimpleMPCDebug::set_has_acceleration_reference() {
  _has_bits_[0] |= 0x00200000u;
}
void SimpleMPCDebug::clear_has_acceleration_reference() {
  _has_bits_[0] &= ~0x00200000u;
}
void SimpleMPCDebug::clear_acceleration_reference() {
  acceleration_reference_ = 0;
  clear_has_acceleration_reference();
}
 double SimpleMPCDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.acceleration_reference)
  return acceleration_reference_;
}
 void SimpleMPCDebug::set_acceleration_reference(double value) {
  set_has_acceleration_reference();
  acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.acceleration_reference)
}

// optional bool is_full_stop = 23;
bool SimpleMPCDebug::has_is_full_stop() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SimpleMPCDebug::set_has_is_full_stop() {
  _has_bits_[0] |= 0x00400000u;
}
void SimpleMPCDebug::clear_has_is_full_stop() {
  _has_bits_[0] &= ~0x00400000u;
}
void SimpleMPCDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  clear_has_is_full_stop();
}
 bool SimpleMPCDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.is_full_stop)
  return is_full_stop_;
}
 void SimpleMPCDebug::set_is_full_stop(bool value) {
  set_has_is_full_stop();
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.is_full_stop)
}

// optional double station_feedback = 24;
bool SimpleMPCDebug::has_station_feedback() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SimpleMPCDebug::set_has_station_feedback() {
  _has_bits_[0] |= 0x00800000u;
}
void SimpleMPCDebug::clear_has_station_feedback() {
  _has_bits_[0] &= ~0x00800000u;
}
void SimpleMPCDebug::clear_station_feedback() {
  station_feedback_ = 0;
  clear_has_station_feedback();
}
 double SimpleMPCDebug::station_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.station_feedback)
  return station_feedback_;
}
 void SimpleMPCDebug::set_station_feedback(double value) {
  set_has_station_feedback();
  station_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.station_feedback)
}

// optional double speed_feedback = 25;
bool SimpleMPCDebug::has_speed_feedback() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SimpleMPCDebug::set_has_speed_feedback() {
  _has_bits_[0] |= 0x01000000u;
}
void SimpleMPCDebug::clear_has_speed_feedback() {
  _has_bits_[0] &= ~0x01000000u;
}
void SimpleMPCDebug::clear_speed_feedback() {
  speed_feedback_ = 0;
  clear_has_speed_feedback();
}
 double SimpleMPCDebug::speed_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.speed_feedback)
  return speed_feedback_;
}
 void SimpleMPCDebug::set_speed_feedback(double value) {
  set_has_speed_feedback();
  speed_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.speed_feedback)
}

// optional double acceleration_cmd_closeloop = 26;
bool SimpleMPCDebug::has_acceleration_cmd_closeloop() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SimpleMPCDebug::set_has_acceleration_cmd_closeloop() {
  _has_bits_[0] |= 0x02000000u;
}
void SimpleMPCDebug::clear_has_acceleration_cmd_closeloop() {
  _has_bits_[0] &= ~0x02000000u;
}
void SimpleMPCDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
  clear_has_acceleration_cmd_closeloop();
}
 double SimpleMPCDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.acceleration_cmd_closeloop)
  return acceleration_cmd_closeloop_;
}
 void SimpleMPCDebug::set_acceleration_cmd_closeloop(double value) {
  set_has_acceleration_cmd_closeloop();
  acceleration_cmd_closeloop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 27;
bool SimpleMPCDebug::has_acceleration_cmd() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SimpleMPCDebug::set_has_acceleration_cmd() {
  _has_bits_[0] |= 0x04000000u;
}
void SimpleMPCDebug::clear_has_acceleration_cmd() {
  _has_bits_[0] &= ~0x04000000u;
}
void SimpleMPCDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
  clear_has_acceleration_cmd();
}
 double SimpleMPCDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.acceleration_cmd)
  return acceleration_cmd_;
}
 void SimpleMPCDebug::set_acceleration_cmd(double value) {
  set_has_acceleration_cmd();
  acceleration_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 28;
bool SimpleMPCDebug::has_acceleration_lookup() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SimpleMPCDebug::set_has_acceleration_lookup() {
  _has_bits_[0] |= 0x08000000u;
}
void SimpleMPCDebug::clear_has_acceleration_lookup() {
  _has_bits_[0] &= ~0x08000000u;
}
void SimpleMPCDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
  clear_has_acceleration_lookup();
}
 double SimpleMPCDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.acceleration_lookup)
  return acceleration_lookup_;
}
 void SimpleMPCDebug::set_acceleration_lookup(double value) {
  set_has_acceleration_lookup();
  acceleration_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.acceleration_lookup)
}

// optional double speed_lookup = 29;
bool SimpleMPCDebug::has_speed_lookup() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SimpleMPCDebug::set_has_speed_lookup() {
  _has_bits_[0] |= 0x10000000u;
}
void SimpleMPCDebug::clear_has_speed_lookup() {
  _has_bits_[0] &= ~0x10000000u;
}
void SimpleMPCDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
  clear_has_speed_lookup();
}
 double SimpleMPCDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.speed_lookup)
  return speed_lookup_;
}
 void SimpleMPCDebug::set_speed_lookup(double value) {
  set_has_speed_lookup();
  speed_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.speed_lookup)
}

// optional double calibration_value = 30;
bool SimpleMPCDebug::has_calibration_value() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SimpleMPCDebug::set_has_calibration_value() {
  _has_bits_[0] |= 0x20000000u;
}
void SimpleMPCDebug::clear_has_calibration_value() {
  _has_bits_[0] &= ~0x20000000u;
}
void SimpleMPCDebug::clear_calibration_value() {
  calibration_value_ = 0;
  clear_has_calibration_value();
}
 double SimpleMPCDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.calibration_value)
  return calibration_value_;
}
 void SimpleMPCDebug::set_calibration_value(double value) {
  set_has_calibration_value();
  calibration_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.calibration_value)
}

// repeated double matrix_q_updated = 31;
int SimpleMPCDebug::matrix_q_updated_size() const {
  return matrix_q_updated_.size();
}
void SimpleMPCDebug::clear_matrix_q_updated() {
  matrix_q_updated_.Clear();
}
 double SimpleMPCDebug::matrix_q_updated(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.matrix_q_updated)
  return matrix_q_updated_.Get(index);
}
 void SimpleMPCDebug::set_matrix_q_updated(int index, double value) {
  matrix_q_updated_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.matrix_q_updated)
}
 void SimpleMPCDebug::add_matrix_q_updated(double value) {
  matrix_q_updated_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.SimpleMPCDebug.matrix_q_updated)
}
 const ::google::protobuf::RepeatedField< double >&
SimpleMPCDebug::matrix_q_updated() const {
  // @@protoc_insertion_point(field_list:apollo.control.SimpleMPCDebug.matrix_q_updated)
  return matrix_q_updated_;
}
 ::google::protobuf::RepeatedField< double >*
SimpleMPCDebug::mutable_matrix_q_updated() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.SimpleMPCDebug.matrix_q_updated)
  return &matrix_q_updated_;
}

// repeated double matrix_r_updated = 32;
int SimpleMPCDebug::matrix_r_updated_size() const {
  return matrix_r_updated_.size();
}
void SimpleMPCDebug::clear_matrix_r_updated() {
  matrix_r_updated_.Clear();
}
 double SimpleMPCDebug::matrix_r_updated(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.matrix_r_updated)
  return matrix_r_updated_.Get(index);
}
 void SimpleMPCDebug::set_matrix_r_updated(int index, double value) {
  matrix_r_updated_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.matrix_r_updated)
}
 void SimpleMPCDebug::add_matrix_r_updated(double value) {
  matrix_r_updated_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.SimpleMPCDebug.matrix_r_updated)
}
 const ::google::protobuf::RepeatedField< double >&
SimpleMPCDebug::matrix_r_updated() const {
  // @@protoc_insertion_point(field_list:apollo.control.SimpleMPCDebug.matrix_r_updated)
  return matrix_r_updated_;
}
 ::google::protobuf::RepeatedField< double >*
SimpleMPCDebug::mutable_matrix_r_updated() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.SimpleMPCDebug.matrix_r_updated)
  return &matrix_r_updated_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputDebug::kLocalizationHeaderFieldNumber;
const int InputDebug::kCanbusHeaderFieldNumber;
const int InputDebug::kTrajectoryHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputDebug::InputDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.InputDebug)
}

void InputDebug::InitAsDefaultInstance() {
  localization_header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  canbus_header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  trajectory_header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

InputDebug::InputDebug(const InputDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.InputDebug)
}

void InputDebug::SharedCtor() {
  _cached_size_ = 0;
  localization_header_ = NULL;
  canbus_header_ = NULL;
  trajectory_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputDebug::~InputDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.InputDebug)
  SharedDtor();
}

void InputDebug::SharedDtor() {
  if (this != default_instance_) {
    delete localization_header_;
    delete canbus_header_;
    delete trajectory_header_;
  }
}

void InputDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputDebug_descriptor_;
}

const InputDebug& InputDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  return *default_instance_;
}

InputDebug* InputDebug::default_instance_ = NULL;

InputDebug* InputDebug::New(::google::protobuf::Arena* arena) const {
  InputDebug* n = new InputDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.InputDebug)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_localization_header()) {
      if (localization_header_ != NULL) localization_header_->::apollo::common::Header::Clear();
    }
    if (has_canbus_header()) {
      if (canbus_header_ != NULL) canbus_header_->::apollo::common::Header::Clear();
    }
    if (has_trajectory_header()) {
      if (trajectory_header_ != NULL) trajectory_header_->::apollo::common::Header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InputDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.InputDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header localization_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_canbus_header;
        break;
      }

      // optional .apollo.common.Header canbus_header = 2;
      case 2: {
        if (tag == 18) {
         parse_canbus_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canbus_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trajectory_header;
        break;
      }

      // optional .apollo.common.Header trajectory_header = 3;
      case 3: {
        if (tag == 26) {
         parse_trajectory_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.InputDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.InputDebug)
  return false;
#undef DO_
}

void InputDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.InputDebug)
  // optional .apollo.common.Header localization_header = 1;
  if (has_localization_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->localization_header_, output);
  }

  // optional .apollo.common.Header canbus_header = 2;
  if (has_canbus_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->canbus_header_, output);
  }

  // optional .apollo.common.Header trajectory_header = 3;
  if (has_trajectory_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->trajectory_header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.InputDebug)
}

::google::protobuf::uint8* InputDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.InputDebug)
  // optional .apollo.common.Header localization_header = 1;
  if (has_localization_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->localization_header_, false, target);
  }

  // optional .apollo.common.Header canbus_header = 2;
  if (has_canbus_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->canbus_header_, false, target);
  }

  // optional .apollo.common.Header trajectory_header = 3;
  if (has_trajectory_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->trajectory_header_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.InputDebug)
  return target;
}

int InputDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.InputDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header localization_header = 1;
    if (has_localization_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localization_header_);
    }

    // optional .apollo.common.Header canbus_header = 2;
    if (has_canbus_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->canbus_header_);
    }

    // optional .apollo.common.Header trajectory_header = 3;
    if (has_trajectory_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_header_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.InputDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InputDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InputDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.InputDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.InputDebug)
    MergeFrom(*source);
  }
}

void InputDebug::MergeFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.InputDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localization_header()) {
      mutable_localization_header()->::apollo::common::Header::MergeFrom(from.localization_header());
    }
    if (from.has_canbus_header()) {
      mutable_canbus_header()->::apollo::common::Header::MergeFrom(from.canbus_header());
    }
    if (from.has_trajectory_header()) {
      mutable_trajectory_header()->::apollo::common::Header::MergeFrom(from.trajectory_header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InputDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDebug::CopyFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDebug::IsInitialized() const {

  return true;
}

void InputDebug::Swap(InputDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputDebug::InternalSwap(InputDebug* other) {
  std::swap(localization_header_, other->localization_header_);
  std::swap(canbus_header_, other->canbus_header_);
  std::swap(trajectory_header_, other->trajectory_header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputDebug_descriptor_;
  metadata.reflection = InputDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputDebug

// optional .apollo.common.Header localization_header = 1;
bool InputDebug::has_localization_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InputDebug::set_has_localization_header() {
  _has_bits_[0] |= 0x00000001u;
}
void InputDebug::clear_has_localization_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void InputDebug::clear_localization_header() {
  if (localization_header_ != NULL) localization_header_->::apollo::common::Header::Clear();
  clear_has_localization_header();
}
const ::apollo::common::Header& InputDebug::localization_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.localization_header)
  return localization_header_ != NULL ? *localization_header_ : *default_instance_->localization_header_;
}
::apollo::common::Header* InputDebug::mutable_localization_header() {
  set_has_localization_header();
  if (localization_header_ == NULL) {
    localization_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.localization_header)
  return localization_header_;
}
::apollo::common::Header* InputDebug::release_localization_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.localization_header)
  clear_has_localization_header();
  ::apollo::common::Header* temp = localization_header_;
  localization_header_ = NULL;
  return temp;
}
void InputDebug::set_allocated_localization_header(::apollo::common::Header* localization_header) {
  delete localization_header_;
  localization_header_ = localization_header;
  if (localization_header) {
    set_has_localization_header();
  } else {
    clear_has_localization_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.localization_header)
}

// optional .apollo.common.Header canbus_header = 2;
bool InputDebug::has_canbus_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InputDebug::set_has_canbus_header() {
  _has_bits_[0] |= 0x00000002u;
}
void InputDebug::clear_has_canbus_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void InputDebug::clear_canbus_header() {
  if (canbus_header_ != NULL) canbus_header_->::apollo::common::Header::Clear();
  clear_has_canbus_header();
}
const ::apollo::common::Header& InputDebug::canbus_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.canbus_header)
  return canbus_header_ != NULL ? *canbus_header_ : *default_instance_->canbus_header_;
}
::apollo::common::Header* InputDebug::mutable_canbus_header() {
  set_has_canbus_header();
  if (canbus_header_ == NULL) {
    canbus_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.canbus_header)
  return canbus_header_;
}
::apollo::common::Header* InputDebug::release_canbus_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.canbus_header)
  clear_has_canbus_header();
  ::apollo::common::Header* temp = canbus_header_;
  canbus_header_ = NULL;
  return temp;
}
void InputDebug::set_allocated_canbus_header(::apollo::common::Header* canbus_header) {
  delete canbus_header_;
  canbus_header_ = canbus_header;
  if (canbus_header) {
    set_has_canbus_header();
  } else {
    clear_has_canbus_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.canbus_header)
}

// optional .apollo.common.Header trajectory_header = 3;
bool InputDebug::has_trajectory_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InputDebug::set_has_trajectory_header() {
  _has_bits_[0] |= 0x00000004u;
}
void InputDebug::clear_has_trajectory_header() {
  _has_bits_[0] &= ~0x00000004u;
}
void InputDebug::clear_trajectory_header() {
  if (trajectory_header_ != NULL) trajectory_header_->::apollo::common::Header::Clear();
  clear_has_trajectory_header();
}
const ::apollo::common::Header& InputDebug::trajectory_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.trajectory_header)
  return trajectory_header_ != NULL ? *trajectory_header_ : *default_instance_->trajectory_header_;
}
::apollo::common::Header* InputDebug::mutable_trajectory_header() {
  set_has_trajectory_header();
  if (trajectory_header_ == NULL) {
    trajectory_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.trajectory_header)
  return trajectory_header_;
}
::apollo::common::Header* InputDebug::release_trajectory_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.trajectory_header)
  clear_has_trajectory_header();
  ::apollo::common::Header* temp = trajectory_header_;
  trajectory_header_ = NULL;
  return temp;
}
void InputDebug::set_allocated_trajectory_header(::apollo::common::Header* trajectory_header) {
  delete trajectory_header_;
  trajectory_header_ = trajectory_header;
  if (trajectory_header) {
    set_has_trajectory_header();
  } else {
    clear_has_trajectory_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.trajectory_header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kSimpleLonDebugFieldNumber;
const int Debug::kSimpleLatDebugFieldNumber;
const int Debug::kInputDebugFieldNumber;
const int Debug::kSimpleMpcDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.Debug)
}

void Debug::InitAsDefaultInstance() {
  simple_lon_debug_ = const_cast< ::apollo::control::SimpleLongitudinalDebug*>(&::apollo::control::SimpleLongitudinalDebug::default_instance());
  simple_lat_debug_ = const_cast< ::apollo::control::SimpleLateralDebug*>(&::apollo::control::SimpleLateralDebug::default_instance());
  input_debug_ = const_cast< ::apollo::control::InputDebug*>(&::apollo::control::InputDebug::default_instance());
  simple_mpc_debug_ = const_cast< ::apollo::control::SimpleMPCDebug*>(&::apollo::control::SimpleMPCDebug::default_instance());
}

Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.control.Debug)
}

void Debug::SharedCtor() {
  _cached_size_ = 0;
  simple_lon_debug_ = NULL;
  simple_lat_debug_ = NULL;
  input_debug_ = NULL;
  simple_mpc_debug_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.control.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != default_instance_) {
    delete simple_lon_debug_;
    delete simple_lat_debug_;
    delete input_debug_;
    delete simple_mpc_debug_;
  }
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_descriptor_;
}

const Debug& Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2fcontrol_5fcmd_2eproto();
  return *default_instance_;
}

Debug* Debug::default_instance_ = NULL;

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.Debug)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_simple_lon_debug()) {
      if (simple_lon_debug_ != NULL) simple_lon_debug_->::apollo::control::SimpleLongitudinalDebug::Clear();
    }
    if (has_simple_lat_debug()) {
      if (simple_lat_debug_ != NULL) simple_lat_debug_->::apollo::control::SimpleLateralDebug::Clear();
    }
    if (has_input_debug()) {
      if (input_debug_ != NULL) input_debug_->::apollo::control::InputDebug::Clear();
    }
    if (has_simple_mpc_debug()) {
      if (simple_mpc_debug_ != NULL) simple_mpc_debug_->::apollo::control::SimpleMPCDebug::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_lon_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_simple_lat_debug;
        break;
      }

      // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
      case 2: {
        if (tag == 18) {
         parse_simple_lat_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_lat_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_debug;
        break;
      }

      // optional .apollo.control.InputDebug input_debug = 3;
      case 3: {
        if (tag == 26) {
         parse_input_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_simple_mpc_debug;
        break;
      }

      // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
      case 4: {
        if (tag == 34) {
         parse_simple_mpc_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_mpc_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.Debug)
  // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (has_simple_lon_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->simple_lon_debug_, output);
  }

  // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (has_simple_lat_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->simple_lat_debug_, output);
  }

  // optional .apollo.control.InputDebug input_debug = 3;
  if (has_input_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->input_debug_, output);
  }

  // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (has_simple_mpc_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->simple_mpc_debug_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.Debug)
  // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (has_simple_lon_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->simple_lon_debug_, false, target);
  }

  // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (has_simple_lat_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->simple_lat_debug_, false, target);
  }

  // optional .apollo.control.InputDebug input_debug = 3;
  if (has_input_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->input_debug_, false, target);
  }

  // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (has_simple_mpc_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->simple_mpc_debug_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.Debug)
  return target;
}

int Debug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.Debug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
    if (has_simple_lon_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->simple_lon_debug_);
    }

    // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
    if (has_simple_lat_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->simple_lat_debug_);
    }

    // optional .apollo.control.InputDebug input_debug = 3;
    if (has_input_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->input_debug_);
    }

    // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
    if (has_simple_mpc_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->simple_mpc_debug_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Debug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simple_lon_debug()) {
      mutable_simple_lon_debug()->::apollo::control::SimpleLongitudinalDebug::MergeFrom(from.simple_lon_debug());
    }
    if (from.has_simple_lat_debug()) {
      mutable_simple_lat_debug()->::apollo::control::SimpleLateralDebug::MergeFrom(from.simple_lat_debug());
    }
    if (from.has_input_debug()) {
      mutable_input_debug()->::apollo::control::InputDebug::MergeFrom(from.input_debug());
    }
    if (from.has_simple_mpc_debug()) {
      mutable_simple_mpc_debug()->::apollo::control::SimpleMPCDebug::MergeFrom(from.simple_mpc_debug());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {

  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  std::swap(simple_lon_debug_, other->simple_lon_debug_);
  std::swap(simple_lat_debug_, other->simple_lat_debug_);
  std::swap(input_debug_, other->input_debug_);
  std::swap(simple_mpc_debug_, other->simple_mpc_debug_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_descriptor_;
  metadata.reflection = Debug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
bool Debug::has_simple_lon_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug::set_has_simple_lon_debug() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug::clear_has_simple_lon_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug::clear_simple_lon_debug() {
  if (simple_lon_debug_ != NULL) simple_lon_debug_->::apollo::control::SimpleLongitudinalDebug::Clear();
  clear_has_simple_lon_debug();
}
const ::apollo::control::SimpleLongitudinalDebug& Debug::simple_lon_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_lon_debug)
  return simple_lon_debug_ != NULL ? *simple_lon_debug_ : *default_instance_->simple_lon_debug_;
}
::apollo::control::SimpleLongitudinalDebug* Debug::mutable_simple_lon_debug() {
  set_has_simple_lon_debug();
  if (simple_lon_debug_ == NULL) {
    simple_lon_debug_ = new ::apollo::control::SimpleLongitudinalDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_lon_debug)
  return simple_lon_debug_;
}
::apollo::control::SimpleLongitudinalDebug* Debug::release_simple_lon_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_lon_debug)
  clear_has_simple_lon_debug();
  ::apollo::control::SimpleLongitudinalDebug* temp = simple_lon_debug_;
  simple_lon_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_simple_lon_debug(::apollo::control::SimpleLongitudinalDebug* simple_lon_debug) {
  delete simple_lon_debug_;
  simple_lon_debug_ = simple_lon_debug;
  if (simple_lon_debug) {
    set_has_simple_lon_debug();
  } else {
    clear_has_simple_lon_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_lon_debug)
}

// optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
bool Debug::has_simple_lat_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Debug::set_has_simple_lat_debug() {
  _has_bits_[0] |= 0x00000002u;
}
void Debug::clear_has_simple_lat_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
void Debug::clear_simple_lat_debug() {
  if (simple_lat_debug_ != NULL) simple_lat_debug_->::apollo::control::SimpleLateralDebug::Clear();
  clear_has_simple_lat_debug();
}
const ::apollo::control::SimpleLateralDebug& Debug::simple_lat_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_lat_debug)
  return simple_lat_debug_ != NULL ? *simple_lat_debug_ : *default_instance_->simple_lat_debug_;
}
::apollo::control::SimpleLateralDebug* Debug::mutable_simple_lat_debug() {
  set_has_simple_lat_debug();
  if (simple_lat_debug_ == NULL) {
    simple_lat_debug_ = new ::apollo::control::SimpleLateralDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_lat_debug)
  return simple_lat_debug_;
}
::apollo::control::SimpleLateralDebug* Debug::release_simple_lat_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_lat_debug)
  clear_has_simple_lat_debug();
  ::apollo::control::SimpleLateralDebug* temp = simple_lat_debug_;
  simple_lat_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_simple_lat_debug(::apollo::control::SimpleLateralDebug* simple_lat_debug) {
  delete simple_lat_debug_;
  simple_lat_debug_ = simple_lat_debug;
  if (simple_lat_debug) {
    set_has_simple_lat_debug();
  } else {
    clear_has_simple_lat_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_lat_debug)
}

// optional .apollo.control.InputDebug input_debug = 3;
bool Debug::has_input_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Debug::set_has_input_debug() {
  _has_bits_[0] |= 0x00000004u;
}
void Debug::clear_has_input_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
void Debug::clear_input_debug() {
  if (input_debug_ != NULL) input_debug_->::apollo::control::InputDebug::Clear();
  clear_has_input_debug();
}
const ::apollo::control::InputDebug& Debug::input_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.input_debug)
  return input_debug_ != NULL ? *input_debug_ : *default_instance_->input_debug_;
}
::apollo::control::InputDebug* Debug::mutable_input_debug() {
  set_has_input_debug();
  if (input_debug_ == NULL) {
    input_debug_ = new ::apollo::control::InputDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.input_debug)
  return input_debug_;
}
::apollo::control::InputDebug* Debug::release_input_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.input_debug)
  clear_has_input_debug();
  ::apollo::control::InputDebug* temp = input_debug_;
  input_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_input_debug(::apollo::control::InputDebug* input_debug) {
  delete input_debug_;
  input_debug_ = input_debug;
  if (input_debug) {
    set_has_input_debug();
  } else {
    clear_has_input_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.input_debug)
}

// optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
bool Debug::has_simple_mpc_debug() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Debug::set_has_simple_mpc_debug() {
  _has_bits_[0] |= 0x00000008u;
}
void Debug::clear_has_simple_mpc_debug() {
  _has_bits_[0] &= ~0x00000008u;
}
void Debug::clear_simple_mpc_debug() {
  if (simple_mpc_debug_ != NULL) simple_mpc_debug_->::apollo::control::SimpleMPCDebug::Clear();
  clear_has_simple_mpc_debug();
}
const ::apollo::control::SimpleMPCDebug& Debug::simple_mpc_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_mpc_debug)
  return simple_mpc_debug_ != NULL ? *simple_mpc_debug_ : *default_instance_->simple_mpc_debug_;
}
::apollo::control::SimpleMPCDebug* Debug::mutable_simple_mpc_debug() {
  set_has_simple_mpc_debug();
  if (simple_mpc_debug_ == NULL) {
    simple_mpc_debug_ = new ::apollo::control::SimpleMPCDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_mpc_debug)
  return simple_mpc_debug_;
}
::apollo::control::SimpleMPCDebug* Debug::release_simple_mpc_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_mpc_debug)
  clear_has_simple_mpc_debug();
  ::apollo::control::SimpleMPCDebug* temp = simple_mpc_debug_;
  simple_mpc_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_simple_mpc_debug(::apollo::control::SimpleMPCDebug* simple_mpc_debug) {
  delete simple_mpc_debug_;
  simple_mpc_debug_ = simple_mpc_debug;
  if (simple_mpc_debug) {
    set_has_simple_mpc_debug();
  } else {
    clear_has_simple_mpc_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_mpc_debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
