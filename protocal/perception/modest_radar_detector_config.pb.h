// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/modest_radar_detector_config.proto

#ifndef PROTOBUF_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto__INCLUDED
#define PROTOBUF_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace modest_radar_detector_config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();
void protobuf_AssignDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();
void protobuf_ShutdownFile_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();

class ModelConfigs;

// ===================================================================

class ModelConfigs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.modest_radar_detector_config.ModelConfigs) */ {
 public:
  ModelConfigs();
  virtual ~ModelConfigs();

  ModelConfigs(const ModelConfigs& from);

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfigs& default_instance();

  void Swap(ModelConfigs* other);

  // implements Message ----------------------------------------------

  inline ModelConfigs* New() const { return New(NULL); }

  ModelConfigs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelConfigs& from);
  void MergeFrom(const ModelConfigs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "ModestRadarDetector"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2 [default = "1.0.0"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional bool use_had_map = 3 [default = true];
  bool has_use_had_map() const;
  void clear_use_had_map();
  static const int kUseHadMapFieldNumber = 3;
  bool use_had_map() const;
  void set_use_had_map(bool value);

  // optional double max_theta = 4 [default = 30];
  bool has_max_theta() const;
  void clear_max_theta();
  static const int kMaxThetaFieldNumber = 4;
  double max_theta() const;
  void set_max_theta(double value);

  // optional int32 delay_frames = 5 [default = 4];
  bool has_delay_frames() const;
  void clear_delay_frames();
  static const int kDelayFramesFieldNumber = 5;
  ::google::protobuf::int32 delay_frames() const;
  void set_delay_frames(::google::protobuf::int32 value);

  // optional bool use_fp_filter = 6 [default = true];
  bool has_use_fp_filter() const;
  void clear_use_fp_filter();
  static const int kUseFpFilterFieldNumber = 6;
  bool use_fp_filter() const;
  void set_use_fp_filter(bool value);

  // optional double probexist_vehicle = 7 [default = 0.9];
  bool has_probexist_vehicle() const;
  void clear_probexist_vehicle();
  static const int kProbexistVehicleFieldNumber = 7;
  double probexist_vehicle() const;
  void set_probexist_vehicle(double value);

  // optional double probexist_pedestrian = 8 [default = 0.25];
  bool has_probexist_pedestrian() const;
  void clear_probexist_pedestrian();
  static const int kProbexistPedestrianFieldNumber = 8;
  double probexist_pedestrian() const;
  void set_probexist_pedestrian(double value);

  // optional double probexist_bicycle = 9 [default = 0.25];
  bool has_probexist_bicycle() const;
  void clear_probexist_bicycle();
  static const int kProbexistBicycleFieldNumber = 9;
  double probexist_bicycle() const;
  void set_probexist_bicycle(double value);

  // optional double probexist_unknown = 10 [default = 0.99];
  bool has_probexist_unknown() const;
  void clear_probexist_unknown();
  static const int kProbexistUnknownFieldNumber = 10;
  double probexist_unknown() const;
  void set_probexist_unknown(double value);

  // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
  bool has_lo_vel_rms_vehicle() const;
  void clear_lo_vel_rms_vehicle();
  static const int kLoVelRmsVehicleFieldNumber = 11;
  double lo_vel_rms_vehicle() const;
  void set_lo_vel_rms_vehicle(double value);

  // optional double la_vel_rms_vehicle = 12 [default = 0.3];
  bool has_la_vel_rms_vehicle() const;
  void clear_la_vel_rms_vehicle();
  static const int kLaVelRmsVehicleFieldNumber = 12;
  double la_vel_rms_vehicle() const;
  void set_la_vel_rms_vehicle(double value);

  // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
  bool has_lo_dist_rms_vehicle() const;
  void clear_lo_dist_rms_vehicle();
  static const int kLoDistRmsVehicleFieldNumber = 13;
  double lo_dist_rms_vehicle() const;
  void set_lo_dist_rms_vehicle(double value);

  // optional double la_dist_rms_vehicle = 14 [default = 0.2];
  bool has_la_dist_rms_vehicle() const;
  void clear_la_dist_rms_vehicle();
  static const int kLaDistRmsVehicleFieldNumber = 14;
  double la_dist_rms_vehicle() const;
  void set_la_dist_rms_vehicle(double value);

  // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
  bool has_lo_vel_rms_pedestrian() const;
  void clear_lo_vel_rms_pedestrian();
  static const int kLoVelRmsPedestrianFieldNumber = 15;
  double lo_vel_rms_pedestrian() const;
  void set_lo_vel_rms_pedestrian(double value);

  // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
  bool has_la_vel_rms_pedestrian() const;
  void clear_la_vel_rms_pedestrian();
  static const int kLaVelRmsPedestrianFieldNumber = 16;
  double la_vel_rms_pedestrian() const;
  void set_la_vel_rms_pedestrian(double value);

  // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
  bool has_lo_dist_rms_pedestrian() const;
  void clear_lo_dist_rms_pedestrian();
  static const int kLoDistRmsPedestrianFieldNumber = 17;
  double lo_dist_rms_pedestrian() const;
  void set_lo_dist_rms_pedestrian(double value);

  // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
  bool has_la_dist_rms_pedestrian() const;
  void clear_la_dist_rms_pedestrian();
  static const int kLaDistRmsPedestrianFieldNumber = 18;
  double la_dist_rms_pedestrian() const;
  void set_la_dist_rms_pedestrian(double value);

  // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
  bool has_lo_vel_rms_bicycle() const;
  void clear_lo_vel_rms_bicycle();
  static const int kLoVelRmsBicycleFieldNumber = 19;
  double lo_vel_rms_bicycle() const;
  void set_lo_vel_rms_bicycle(double value);

  // optional double la_vel_rms_bicycle = 20 [default = 0.8];
  bool has_la_vel_rms_bicycle() const;
  void clear_la_vel_rms_bicycle();
  static const int kLaVelRmsBicycleFieldNumber = 20;
  double la_vel_rms_bicycle() const;
  void set_la_vel_rms_bicycle(double value);

  // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
  bool has_lo_dist_rms_bicycle() const;
  void clear_lo_dist_rms_bicycle();
  static const int kLoDistRmsBicycleFieldNumber = 21;
  double lo_dist_rms_bicycle() const;
  void set_lo_dist_rms_bicycle(double value);

  // optional double la_dist_rms_bicycle = 22 [default = 0.8];
  bool has_la_dist_rms_bicycle() const;
  void clear_la_dist_rms_bicycle();
  static const int kLaDistRmsBicycleFieldNumber = 22;
  double la_dist_rms_bicycle() const;
  void set_la_dist_rms_bicycle(double value);

  // optional double lo_vel_rms_unknown = 23 [default = 0.2];
  bool has_lo_vel_rms_unknown() const;
  void clear_lo_vel_rms_unknown();
  static const int kLoVelRmsUnknownFieldNumber = 23;
  double lo_vel_rms_unknown() const;
  void set_lo_vel_rms_unknown(double value);

  // optional double la_vel_rms_unknown = 24 [default = 0.3];
  bool has_la_vel_rms_unknown() const;
  void clear_la_vel_rms_unknown();
  static const int kLaVelRmsUnknownFieldNumber = 24;
  double la_vel_rms_unknown() const;
  void set_la_vel_rms_unknown(double value);

  // optional double lo_dist_rms_unknown = 25 [default = 0.2];
  bool has_lo_dist_rms_unknown() const;
  void clear_lo_dist_rms_unknown();
  static const int kLoDistRmsUnknownFieldNumber = 25;
  double lo_dist_rms_unknown() const;
  void set_lo_dist_rms_unknown(double value);

  // optional double la_dist_rms_unknown = 26 [default = 0.3];
  bool has_la_dist_rms_unknown() const;
  void clear_la_dist_rms_unknown();
  static const int kLaDistRmsUnknownFieldNumber = 26;
  double la_dist_rms_unknown() const;
  void set_la_dist_rms_unknown(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.modest_radar_detector_config.ModelConfigs)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_use_had_map();
  inline void clear_has_use_had_map();
  inline void set_has_max_theta();
  inline void clear_has_max_theta();
  inline void set_has_delay_frames();
  inline void clear_has_delay_frames();
  inline void set_has_use_fp_filter();
  inline void clear_has_use_fp_filter();
  inline void set_has_probexist_vehicle();
  inline void clear_has_probexist_vehicle();
  inline void set_has_probexist_pedestrian();
  inline void clear_has_probexist_pedestrian();
  inline void set_has_probexist_bicycle();
  inline void clear_has_probexist_bicycle();
  inline void set_has_probexist_unknown();
  inline void clear_has_probexist_unknown();
  inline void set_has_lo_vel_rms_vehicle();
  inline void clear_has_lo_vel_rms_vehicle();
  inline void set_has_la_vel_rms_vehicle();
  inline void clear_has_la_vel_rms_vehicle();
  inline void set_has_lo_dist_rms_vehicle();
  inline void clear_has_lo_dist_rms_vehicle();
  inline void set_has_la_dist_rms_vehicle();
  inline void clear_has_la_dist_rms_vehicle();
  inline void set_has_lo_vel_rms_pedestrian();
  inline void clear_has_lo_vel_rms_pedestrian();
  inline void set_has_la_vel_rms_pedestrian();
  inline void clear_has_la_vel_rms_pedestrian();
  inline void set_has_lo_dist_rms_pedestrian();
  inline void clear_has_lo_dist_rms_pedestrian();
  inline void set_has_la_dist_rms_pedestrian();
  inline void clear_has_la_dist_rms_pedestrian();
  inline void set_has_lo_vel_rms_bicycle();
  inline void clear_has_lo_vel_rms_bicycle();
  inline void set_has_la_vel_rms_bicycle();
  inline void clear_has_la_vel_rms_bicycle();
  inline void set_has_lo_dist_rms_bicycle();
  inline void clear_has_lo_dist_rms_bicycle();
  inline void set_has_la_dist_rms_bicycle();
  inline void clear_has_la_dist_rms_bicycle();
  inline void set_has_lo_vel_rms_unknown();
  inline void clear_has_lo_vel_rms_unknown();
  inline void set_has_la_vel_rms_unknown();
  inline void clear_has_la_vel_rms_unknown();
  inline void set_has_lo_dist_rms_unknown();
  inline void clear_has_lo_dist_rms_unknown();
  inline void set_has_la_dist_rms_unknown();
  inline void clear_has_la_dist_rms_unknown();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  static ::std::string* _default_version_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  double max_theta_;
  bool use_had_map_;
  bool use_fp_filter_;
  ::google::protobuf::int32 delay_frames_;
  double probexist_vehicle_;
  double probexist_pedestrian_;
  double probexist_bicycle_;
  double probexist_unknown_;
  double lo_vel_rms_vehicle_;
  double la_vel_rms_vehicle_;
  double lo_dist_rms_vehicle_;
  double la_dist_rms_vehicle_;
  double lo_vel_rms_pedestrian_;
  double la_vel_rms_pedestrian_;
  double lo_dist_rms_pedestrian_;
  double la_dist_rms_pedestrian_;
  double lo_vel_rms_bicycle_;
  double la_vel_rms_bicycle_;
  double lo_dist_rms_bicycle_;
  double la_dist_rms_bicycle_;
  double lo_vel_rms_unknown_;
  double la_vel_rms_unknown_;
  double lo_dist_rms_unknown_;
  double la_dist_rms_unknown_;
  friend void  protobuf_AddDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ModelConfigs* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "ModestRadarDetector"];
inline bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
inline const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  return name_.GetNoArena(_default_name_);
}
inline void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}
inline void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}
inline void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}
inline ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  return name_.MutableNoArena(_default_name_);
}
inline ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
inline void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
inline bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
inline const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  return version_.GetNoArena(_default_version_);
}
inline void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}
inline void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}
inline void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}
inline ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  return version_.MutableNoArena(_default_version_);
}
inline ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
inline void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}

// optional bool use_had_map = 3 [default = true];
inline bool ModelConfigs::has_use_had_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelConfigs::set_has_use_had_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelConfigs::clear_has_use_had_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelConfigs::clear_use_had_map() {
  use_had_map_ = true;
  clear_has_use_had_map();
}
inline bool ModelConfigs::use_had_map() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
  return use_had_map_;
}
inline void ModelConfigs::set_use_had_map(bool value) {
  set_has_use_had_map();
  use_had_map_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
}

// optional double max_theta = 4 [default = 30];
inline bool ModelConfigs::has_max_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelConfigs::set_has_max_theta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelConfigs::clear_has_max_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelConfigs::clear_max_theta() {
  max_theta_ = 30;
  clear_has_max_theta();
}
inline double ModelConfigs::max_theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.max_theta)
  return max_theta_;
}
inline void ModelConfigs::set_max_theta(double value) {
  set_has_max_theta();
  max_theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.max_theta)
}

// optional int32 delay_frames = 5 [default = 4];
inline bool ModelConfigs::has_delay_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelConfigs::set_has_delay_frames() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelConfigs::clear_has_delay_frames() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelConfigs::clear_delay_frames() {
  delay_frames_ = 4;
  clear_has_delay_frames();
}
inline ::google::protobuf::int32 ModelConfigs::delay_frames() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
  return delay_frames_;
}
inline void ModelConfigs::set_delay_frames(::google::protobuf::int32 value) {
  set_has_delay_frames();
  delay_frames_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
}

// optional bool use_fp_filter = 6 [default = true];
inline bool ModelConfigs::has_use_fp_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelConfigs::set_has_use_fp_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelConfigs::clear_has_use_fp_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelConfigs::clear_use_fp_filter() {
  use_fp_filter_ = true;
  clear_has_use_fp_filter();
}
inline bool ModelConfigs::use_fp_filter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
  return use_fp_filter_;
}
inline void ModelConfigs::set_use_fp_filter(bool value) {
  set_has_use_fp_filter();
  use_fp_filter_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
}

// optional double probexist_vehicle = 7 [default = 0.9];
inline bool ModelConfigs::has_probexist_vehicle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelConfigs::set_has_probexist_vehicle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelConfigs::clear_has_probexist_vehicle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelConfigs::clear_probexist_vehicle() {
  probexist_vehicle_ = 0.9;
  clear_has_probexist_vehicle();
}
inline double ModelConfigs::probexist_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
  return probexist_vehicle_;
}
inline void ModelConfigs::set_probexist_vehicle(double value) {
  set_has_probexist_vehicle();
  probexist_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
}

// optional double probexist_pedestrian = 8 [default = 0.25];
inline bool ModelConfigs::has_probexist_pedestrian() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelConfigs::set_has_probexist_pedestrian() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelConfigs::clear_has_probexist_pedestrian() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelConfigs::clear_probexist_pedestrian() {
  probexist_pedestrian_ = 0.25;
  clear_has_probexist_pedestrian();
}
inline double ModelConfigs::probexist_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
  return probexist_pedestrian_;
}
inline void ModelConfigs::set_probexist_pedestrian(double value) {
  set_has_probexist_pedestrian();
  probexist_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
}

// optional double probexist_bicycle = 9 [default = 0.25];
inline bool ModelConfigs::has_probexist_bicycle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelConfigs::set_has_probexist_bicycle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelConfigs::clear_has_probexist_bicycle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelConfigs::clear_probexist_bicycle() {
  probexist_bicycle_ = 0.25;
  clear_has_probexist_bicycle();
}
inline double ModelConfigs::probexist_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
  return probexist_bicycle_;
}
inline void ModelConfigs::set_probexist_bicycle(double value) {
  set_has_probexist_bicycle();
  probexist_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
}

// optional double probexist_unknown = 10 [default = 0.99];
inline bool ModelConfigs::has_probexist_unknown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelConfigs::set_has_probexist_unknown() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelConfigs::clear_has_probexist_unknown() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelConfigs::clear_probexist_unknown() {
  probexist_unknown_ = 0.99;
  clear_has_probexist_unknown();
}
inline double ModelConfigs::probexist_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
  return probexist_unknown_;
}
inline void ModelConfigs::set_probexist_unknown(double value) {
  set_has_probexist_unknown();
  probexist_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
}

// optional double lo_vel_rms_vehicle = 11 [default = 0.2];
inline bool ModelConfigs::has_lo_vel_rms_vehicle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelConfigs::set_has_lo_vel_rms_vehicle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelConfigs::clear_has_lo_vel_rms_vehicle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelConfigs::clear_lo_vel_rms_vehicle() {
  lo_vel_rms_vehicle_ = 0.2;
  clear_has_lo_vel_rms_vehicle();
}
inline double ModelConfigs::lo_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
  return lo_vel_rms_vehicle_;
}
inline void ModelConfigs::set_lo_vel_rms_vehicle(double value) {
  set_has_lo_vel_rms_vehicle();
  lo_vel_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
}

// optional double la_vel_rms_vehicle = 12 [default = 0.3];
inline bool ModelConfigs::has_la_vel_rms_vehicle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModelConfigs::set_has_la_vel_rms_vehicle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModelConfigs::clear_has_la_vel_rms_vehicle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModelConfigs::clear_la_vel_rms_vehicle() {
  la_vel_rms_vehicle_ = 0.3;
  clear_has_la_vel_rms_vehicle();
}
inline double ModelConfigs::la_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
  return la_vel_rms_vehicle_;
}
inline void ModelConfigs::set_la_vel_rms_vehicle(double value) {
  set_has_la_vel_rms_vehicle();
  la_vel_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
}

// optional double lo_dist_rms_vehicle = 13 [default = 0.15];
inline bool ModelConfigs::has_lo_dist_rms_vehicle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModelConfigs::set_has_lo_dist_rms_vehicle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModelConfigs::clear_has_lo_dist_rms_vehicle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModelConfigs::clear_lo_dist_rms_vehicle() {
  lo_dist_rms_vehicle_ = 0.15;
  clear_has_lo_dist_rms_vehicle();
}
inline double ModelConfigs::lo_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
  return lo_dist_rms_vehicle_;
}
inline void ModelConfigs::set_lo_dist_rms_vehicle(double value) {
  set_has_lo_dist_rms_vehicle();
  lo_dist_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
}

// optional double la_dist_rms_vehicle = 14 [default = 0.2];
inline bool ModelConfigs::has_la_dist_rms_vehicle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModelConfigs::set_has_la_dist_rms_vehicle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModelConfigs::clear_has_la_dist_rms_vehicle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModelConfigs::clear_la_dist_rms_vehicle() {
  la_dist_rms_vehicle_ = 0.2;
  clear_has_la_dist_rms_vehicle();
}
inline double ModelConfigs::la_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
  return la_dist_rms_vehicle_;
}
inline void ModelConfigs::set_la_dist_rms_vehicle(double value) {
  set_has_la_dist_rms_vehicle();
  la_dist_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
}

// optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
inline bool ModelConfigs::has_lo_vel_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModelConfigs::set_has_lo_vel_rms_pedestrian() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModelConfigs::clear_has_lo_vel_rms_pedestrian() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModelConfigs::clear_lo_vel_rms_pedestrian() {
  lo_vel_rms_pedestrian_ = 0.5;
  clear_has_lo_vel_rms_pedestrian();
}
inline double ModelConfigs::lo_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
  return lo_vel_rms_pedestrian_;
}
inline void ModelConfigs::set_lo_vel_rms_pedestrian(double value) {
  set_has_lo_vel_rms_pedestrian();
  lo_vel_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
}

// optional double la_vel_rms_pedestrian = 16 [default = 0.8];
inline bool ModelConfigs::has_la_vel_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModelConfigs::set_has_la_vel_rms_pedestrian() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModelConfigs::clear_has_la_vel_rms_pedestrian() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModelConfigs::clear_la_vel_rms_pedestrian() {
  la_vel_rms_pedestrian_ = 0.8;
  clear_has_la_vel_rms_pedestrian();
}
inline double ModelConfigs::la_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
  return la_vel_rms_pedestrian_;
}
inline void ModelConfigs::set_la_vel_rms_pedestrian(double value) {
  set_has_la_vel_rms_pedestrian();
  la_vel_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
}

// optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
inline bool ModelConfigs::has_lo_dist_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModelConfigs::set_has_lo_dist_rms_pedestrian() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModelConfigs::clear_has_lo_dist_rms_pedestrian() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModelConfigs::clear_lo_dist_rms_pedestrian() {
  lo_dist_rms_pedestrian_ = 0.5;
  clear_has_lo_dist_rms_pedestrian();
}
inline double ModelConfigs::lo_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
  return lo_dist_rms_pedestrian_;
}
inline void ModelConfigs::set_lo_dist_rms_pedestrian(double value) {
  set_has_lo_dist_rms_pedestrian();
  lo_dist_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
}

// optional double la_dist_rms_pedestrian = 18 [default = 0.8];
inline bool ModelConfigs::has_la_dist_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModelConfigs::set_has_la_dist_rms_pedestrian() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModelConfigs::clear_has_la_dist_rms_pedestrian() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModelConfigs::clear_la_dist_rms_pedestrian() {
  la_dist_rms_pedestrian_ = 0.8;
  clear_has_la_dist_rms_pedestrian();
}
inline double ModelConfigs::la_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
  return la_dist_rms_pedestrian_;
}
inline void ModelConfigs::set_la_dist_rms_pedestrian(double value) {
  set_has_la_dist_rms_pedestrian();
  la_dist_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
}

// optional double lo_vel_rms_bicycle = 19 [default = 0.5];
inline bool ModelConfigs::has_lo_vel_rms_bicycle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModelConfigs::set_has_lo_vel_rms_bicycle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModelConfigs::clear_has_lo_vel_rms_bicycle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModelConfigs::clear_lo_vel_rms_bicycle() {
  lo_vel_rms_bicycle_ = 0.5;
  clear_has_lo_vel_rms_bicycle();
}
inline double ModelConfigs::lo_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
  return lo_vel_rms_bicycle_;
}
inline void ModelConfigs::set_lo_vel_rms_bicycle(double value) {
  set_has_lo_vel_rms_bicycle();
  lo_vel_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
}

// optional double la_vel_rms_bicycle = 20 [default = 0.8];
inline bool ModelConfigs::has_la_vel_rms_bicycle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModelConfigs::set_has_la_vel_rms_bicycle() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModelConfigs::clear_has_la_vel_rms_bicycle() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModelConfigs::clear_la_vel_rms_bicycle() {
  la_vel_rms_bicycle_ = 0.8;
  clear_has_la_vel_rms_bicycle();
}
inline double ModelConfigs::la_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
  return la_vel_rms_bicycle_;
}
inline void ModelConfigs::set_la_vel_rms_bicycle(double value) {
  set_has_la_vel_rms_bicycle();
  la_vel_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
}

// optional double lo_dist_rms_bicycle = 21 [default = 0.5];
inline bool ModelConfigs::has_lo_dist_rms_bicycle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModelConfigs::set_has_lo_dist_rms_bicycle() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModelConfigs::clear_has_lo_dist_rms_bicycle() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModelConfigs::clear_lo_dist_rms_bicycle() {
  lo_dist_rms_bicycle_ = 0.5;
  clear_has_lo_dist_rms_bicycle();
}
inline double ModelConfigs::lo_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
  return lo_dist_rms_bicycle_;
}
inline void ModelConfigs::set_lo_dist_rms_bicycle(double value) {
  set_has_lo_dist_rms_bicycle();
  lo_dist_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
}

// optional double la_dist_rms_bicycle = 22 [default = 0.8];
inline bool ModelConfigs::has_la_dist_rms_bicycle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModelConfigs::set_has_la_dist_rms_bicycle() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModelConfigs::clear_has_la_dist_rms_bicycle() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModelConfigs::clear_la_dist_rms_bicycle() {
  la_dist_rms_bicycle_ = 0.8;
  clear_has_la_dist_rms_bicycle();
}
inline double ModelConfigs::la_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
  return la_dist_rms_bicycle_;
}
inline void ModelConfigs::set_la_dist_rms_bicycle(double value) {
  set_has_la_dist_rms_bicycle();
  la_dist_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
}

// optional double lo_vel_rms_unknown = 23 [default = 0.2];
inline bool ModelConfigs::has_lo_vel_rms_unknown() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModelConfigs::set_has_lo_vel_rms_unknown() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModelConfigs::clear_has_lo_vel_rms_unknown() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModelConfigs::clear_lo_vel_rms_unknown() {
  lo_vel_rms_unknown_ = 0.2;
  clear_has_lo_vel_rms_unknown();
}
inline double ModelConfigs::lo_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
  return lo_vel_rms_unknown_;
}
inline void ModelConfigs::set_lo_vel_rms_unknown(double value) {
  set_has_lo_vel_rms_unknown();
  lo_vel_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
}

// optional double la_vel_rms_unknown = 24 [default = 0.3];
inline bool ModelConfigs::has_la_vel_rms_unknown() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModelConfigs::set_has_la_vel_rms_unknown() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModelConfigs::clear_has_la_vel_rms_unknown() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModelConfigs::clear_la_vel_rms_unknown() {
  la_vel_rms_unknown_ = 0.3;
  clear_has_la_vel_rms_unknown();
}
inline double ModelConfigs::la_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
  return la_vel_rms_unknown_;
}
inline void ModelConfigs::set_la_vel_rms_unknown(double value) {
  set_has_la_vel_rms_unknown();
  la_vel_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
}

// optional double lo_dist_rms_unknown = 25 [default = 0.2];
inline bool ModelConfigs::has_lo_dist_rms_unknown() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ModelConfigs::set_has_lo_dist_rms_unknown() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ModelConfigs::clear_has_lo_dist_rms_unknown() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ModelConfigs::clear_lo_dist_rms_unknown() {
  lo_dist_rms_unknown_ = 0.2;
  clear_has_lo_dist_rms_unknown();
}
inline double ModelConfigs::lo_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
  return lo_dist_rms_unknown_;
}
inline void ModelConfigs::set_lo_dist_rms_unknown(double value) {
  set_has_lo_dist_rms_unknown();
  lo_dist_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
}

// optional double la_dist_rms_unknown = 26 [default = 0.3];
inline bool ModelConfigs::has_la_dist_rms_unknown() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ModelConfigs::set_has_la_dist_rms_unknown() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ModelConfigs::clear_has_la_dist_rms_unknown() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ModelConfigs::clear_la_dist_rms_unknown() {
  la_dist_rms_unknown_ = 0.3;
  clear_has_la_dist_rms_unknown();
}
inline double ModelConfigs::la_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
  return la_dist_rms_unknown_;
}
inline void ModelConfigs::set_la_dist_rms_unknown(double value) {
  set_has_la_dist_rms_unknown();
  la_dist_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace modest_radar_detector_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto__INCLUDED
