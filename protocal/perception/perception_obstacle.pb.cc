// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/perception_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerceptionObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerceptionObstacle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CIPVInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CIPVInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneMarker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneMarker_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneMarkers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneMarkers_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerceptionObstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerceptionObstacles_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2fperception_5fobstacle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2fperception_5fobstacle_2eproto() {
  protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/perception_obstacle.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      -1);
  PerceptionObstacle_descriptor_ = file->message_type(1);
  static const int PerceptionObstacle_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, polygon_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, tracking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, confidence_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, drops_),
  };
  PerceptionObstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerceptionObstacle_descriptor_,
      PerceptionObstacle::default_instance_,
      PerceptionObstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _has_bits_[0]),
      -1,
      -1,
      sizeof(PerceptionObstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _internal_metadata_),
      -1);
  PerceptionObstacle_Type_descriptor_ = PerceptionObstacle_descriptor_->enum_type(0);
  PerceptionObstacle_ConfidenceType_descriptor_ = PerceptionObstacle_descriptor_->enum_type(1);
  CIPVInfo_descriptor_ = file->message_type(2);
  static const int CIPVInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, cipv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, potential_cipv_id_),
  };
  CIPVInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CIPVInfo_descriptor_,
      CIPVInfo::default_instance_,
      CIPVInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CIPVInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, _internal_metadata_),
      -1);
  LaneMarker_descriptor_ = file->message_type(3);
  static const int LaneMarker_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, lane_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, model_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c0_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c1_heading_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c2_curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c3_curvature_derivative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, view_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, longitude_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, longitude_end_),
  };
  LaneMarker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneMarker_descriptor_,
      LaneMarker::default_instance_,
      LaneMarker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneMarker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, _internal_metadata_),
      -1);
  LaneMarkers_descriptor_ = file->message_type(4);
  static const int LaneMarkers_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, left_lane_marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, right_lane_marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, next_left_lane_marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, next_right_lane_marker_),
  };
  LaneMarkers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneMarkers_descriptor_,
      LaneMarkers::default_instance_,
      LaneMarkers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneMarkers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, _internal_metadata_),
      -1);
  PerceptionObstacles_descriptor_ = file->message_type(5);
  static const int PerceptionObstacles_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, perception_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, lane_marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, cipv_info_),
  };
  PerceptionObstacles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerceptionObstacles_descriptor_,
      PerceptionObstacles::default_instance_,
      PerceptionObstacles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _has_bits_[0]),
      -1,
      -1,
      sizeof(PerceptionObstacles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2fperception_5fobstacle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerceptionObstacle_descriptor_, &PerceptionObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CIPVInfo_descriptor_, &CIPVInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneMarker_descriptor_, &LaneMarker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneMarkers_descriptor_, &LaneMarkers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerceptionObstacles_descriptor_, &PerceptionObstacles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2fperception_5fobstacle_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete PerceptionObstacle::default_instance_;
  delete PerceptionObstacle_reflection_;
  delete CIPVInfo::default_instance_;
  delete CIPVInfo_reflection_;
  delete LaneMarker::default_instance_;
  delete LaneMarker_reflection_;
  delete LaneMarkers::default_instance_;
  delete LaneMarkers_reflection_;
  delete PerceptionObstacles::default_instance_;
  delete PerceptionObstacles_reflection_;
}

void protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2ferror_5fcode_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::hdmap::protobuf_AddDesc_map_2fmap_5flane_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$perception/perception_obstacle.proto\022\021"
    "apollo.perception\032\027common/error_code.pro"
    "to\032\023common/header.proto\032\022map/map_lane.pr"
    "oto\"(\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030"
    "\003 \001(\001\"\302\005\n\022PerceptionObstacle\022\n\n\002id\030\001 \001(\005"
    "\022*\n\010position\030\002 \001(\0132\030.apollo.perception.P"
    "oint\022\r\n\005theta\030\003 \001(\001\022*\n\010velocity\030\004 \001(\0132\030."
    "apollo.perception.Point\022\016\n\006length\030\005 \001(\001\022"
    "\r\n\005width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022/\n\rpolygo"
    "n_point\030\010 \003(\0132\030.apollo.perception.Point\022"
    "\025\n\rtracking_time\030\t \001(\001\0228\n\004type\030\n \001(\0162*.a"
    "pollo.perception.PerceptionObstacle.Type"
    "\022\021\n\ttimestamp\030\013 \001(\001\022\027\n\013point_cloud\030\014 \003(\001"
    "B\002\020\001\022\025\n\nconfidence\030\r \001(\001:\0011\022]\n\017confidenc"
    "e_type\030\016 \001(\01624.apollo.perception.Percept"
    "ionObstacle.ConfidenceType:\016CONFIDENCE_C"
    "NN\022\'\n\005drops\030\017 \003(\0132\030.apollo.perception.Po"
    "int\"i\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOWN_MOVA"
    "BLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022\016\n\nPEDESTRI"
    "AN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020\005\"R\n\016Confid"
    "enceType\022\026\n\022CONFIDENCE_UNKNOWN\020\000\022\022\n\016CONF"
    "IDENCE_CNN\020\001\022\024\n\020CONFIDENCE_RADAR\020\002\"6\n\010CI"
    "PVInfo\022\017\n\007cipv_id\030\001 \001(\005\022\031\n\021potential_cip"
    "v_id\030\002 \003(\005\"\225\002\n\nLaneMarker\0226\n\tlane_type\030\001"
    " \001(\0162#.apollo.hdmap.LaneBoundaryType.Typ"
    "e\022\017\n\007quality\030\002 \001(\001\022\024\n\014model_degree\030\003 \001(\005"
    "\022\023\n\013c0_position\030\004 \001(\001\022\030\n\020c1_heading_angl"
    "e\030\005 \001(\001\022\024\n\014c2_curvature\030\006 \001(\001\022\037\n\027c3_curv"
    "ature_derivative\030\007 \001(\001\022\022\n\nview_range\030\010 \001"
    "(\001\022\027\n\017longitude_start\030\t \001(\001\022\025\n\rlongitude"
    "_end\030\n \001(\001\"\375\001\n\013LaneMarkers\0227\n\020left_lane_"
    "marker\030\001 \001(\0132\035.apollo.perception.LaneMar"
    "ker\0228\n\021right_lane_marker\030\002 \001(\0132\035.apollo."
    "perception.LaneMarker\022<\n\025next_left_lane_"
    "marker\030\003 \003(\0132\035.apollo.perception.LaneMar"
    "ker\022=\n\026next_right_lane_marker\030\004 \003(\0132\035.ap"
    "ollo.perception.LaneMarker\"\227\002\n\023Perceptio"
    "nObstacles\022B\n\023perception_obstacle\030\001 \003(\0132"
    "%.apollo.perception.PerceptionObstacle\022%"
    "\n\006header\030\002 \001(\0132\025.apollo.common.Header\0220\n"
    "\nerror_code\030\003 \001(\0162\030.apollo.common.ErrorC"
    "ode:\002OK\0223\n\013lane_marker\030\004 \001(\0132\036.apollo.pe"
    "rception.LaneMarkers\022.\n\tcipv_info\030\005 \001(\0132"
    "\033.apollo.perception.CIPVInfo", 1748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/perception_obstacle.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  PerceptionObstacle::default_instance_ = new PerceptionObstacle();
  CIPVInfo::default_instance_ = new CIPVInfo();
  LaneMarker::default_instance_ = new LaneMarker();
  LaneMarkers::default_instance_ = new LaneMarkers();
  PerceptionObstacles::default_instance_ = new PerceptionObstacles();
  Point::default_instance_->InitAsDefaultInstance();
  PerceptionObstacle::default_instance_->InitAsDefaultInstance();
  CIPVInfo::default_instance_->InitAsDefaultInstance();
  LaneMarker::default_instance_->InitAsDefaultInstance();
  LaneMarkers::default_instance_->InitAsDefaultInstance();
  PerceptionObstacles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2fperception_5fobstacle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2fperception_5fobstacle_2eproto {
  StaticDescriptorInitializer_perception_2fperception_5fobstacle_2eproto() {
    protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  }
} static_descriptor_initializer_perception_2fperception_5fobstacle_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:apollo.perception.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.Point)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.Point)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.Point)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional double x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Point::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.x)
  return x_;
}
 void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.x)
}

// optional double y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Point::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.y)
  return y_;
}
 void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.y)
}

// optional double z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double Point::z() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.z)
  return z_;
}
 void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionObstacle_Type_descriptor_;
}
bool PerceptionObstacle_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
const PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
const PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
const PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
const PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
const int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionObstacle_ConfidenceType_descriptor_;
}
bool PerceptionObstacle_ConfidenceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_CNN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_RADAR;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MIN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MAX;
const int PerceptionObstacle::ConfidenceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacle::kIdFieldNumber;
const int PerceptionObstacle::kPositionFieldNumber;
const int PerceptionObstacle::kThetaFieldNumber;
const int PerceptionObstacle::kVelocityFieldNumber;
const int PerceptionObstacle::kLengthFieldNumber;
const int PerceptionObstacle::kWidthFieldNumber;
const int PerceptionObstacle::kHeightFieldNumber;
const int PerceptionObstacle::kPolygonPointFieldNumber;
const int PerceptionObstacle::kTrackingTimeFieldNumber;
const int PerceptionObstacle::kTypeFieldNumber;
const int PerceptionObstacle::kTimestampFieldNumber;
const int PerceptionObstacle::kPointCloudFieldNumber;
const int PerceptionObstacle::kConfidenceFieldNumber;
const int PerceptionObstacle::kConfidenceTypeFieldNumber;
const int PerceptionObstacle::kDropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacle::PerceptionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.PerceptionObstacle)
}

void PerceptionObstacle::InitAsDefaultInstance() {
  position_ = const_cast< ::apollo::perception::Point*>(&::apollo::perception::Point::default_instance());
  velocity_ = const_cast< ::apollo::perception::Point*>(&::apollo::perception::Point::default_instance());
}

PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  position_ = NULL;
  theta_ = 0;
  velocity_ = NULL;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  tracking_time_ = 0;
  type_ = 0;
  timestamp_ = 0;
  confidence_ = 1;
  confidence_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacle)
  SharedDtor();
}

void PerceptionObstacle::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void PerceptionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionObstacle_descriptor_;
}

const PerceptionObstacle& PerceptionObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

PerceptionObstacle* PerceptionObstacle::default_instance_ = NULL;

PerceptionObstacle* PerceptionObstacle::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacle* n = new PerceptionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PerceptionObstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PerceptionObstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(length_, id_);
    ZR_(width_, height_);
    if (has_position()) {
      if (position_ != NULL) position_->::apollo::perception::Point::Clear();
    }
    theta_ = 0;
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::apollo::perception::Point::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 14080u) {
    ZR_(tracking_time_, timestamp_);
    type_ = 0;
    confidence_ = 1;
    confidence_type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  polygon_point_.Clear();
  point_cloud_.Clear();
  drops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PerceptionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.PerceptionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .apollo.perception.Point position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_theta;
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (tag == 25) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // optional .apollo.perception.Point velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_length;
        break;
      }

      // optional double length = 5;
      case 5: {
        if (tag == 41) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_width;
        break;
      }

      // optional double width = 6;
      case 6: {
        if (tag == 49) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_height;
        break;
      }

      // optional double height = 7;
      case 7: {
        if (tag == 57) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_polygon_point;
        break;
      }

      // repeated .apollo.perception.Point polygon_point = 8;
      case 8: {
        if (tag == 66) {
         parse_polygon_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygon_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_polygon_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(73)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 9;
      case 9: {
        if (tag == 73) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
          set_has_tracking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Type type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (tag == 89) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_point_cloud;
        break;
      }

      // repeated double point_cloud = 12 [packed = true];
      case 12: {
        if (tag == 98) {
         parse_point_cloud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point_cloud())));
        } else if (tag == 97) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98, input, this->mutable_point_cloud())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_confidence;
        break;
      }

      // optional double confidence = 13 [default = 1];
      case 13: {
        if (tag == 105) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_confidence_type;
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
      case 14: {
        if (tag == 112) {
         parse_confidence_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(value)) {
            set_confidence_type(static_cast< ::apollo::perception::PerceptionObstacle_ConfidenceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_drops;
        break;
      }

      // repeated .apollo.perception.Point drops = 15;
      case 15: {
        if (tag == 122) {
         parse_drops:
          DO_(input->IncrementRecursionDepth());
         parse_loop_drops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_drops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.PerceptionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.PerceptionObstacle)
  return false;
#undef DO_
}

void PerceptionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.PerceptionObstacle)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .apollo.perception.Point position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional double theta = 3;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .apollo.perception.Point velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional double length = 5;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated .apollo.perception.Point polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon_point(i), output);
  }

  // optional double tracking_time = 9;
  if (has_tracking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tracking_time(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional double timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_cloud_cached_byte_size_);
  }
  for (int i = 0; i < this->point_cloud_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->point_cloud(i), output);
  }

  // optional double confidence = 13 [default = 1];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->confidence(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  if (has_confidence_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->confidence_type(), output);
  }

  // repeated .apollo.perception.Point drops = 15;
  for (unsigned int i = 0, n = this->drops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->drops(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.PerceptionObstacle)
}

::google::protobuf::uint8* PerceptionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacle)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .apollo.perception.Point position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional double theta = 3;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .apollo.perception.Point velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, false, target);
  }

  // optional double length = 5;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // repeated .apollo.perception.Point polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polygon_point(i), false, target);
  }

  // optional double tracking_time = 9;
  if (has_tracking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tracking_time(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional double timestamp = 11;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->timestamp(), target);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _point_cloud_cached_byte_size_, target);
  }
  for (int i = 0; i < this->point_cloud_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->point_cloud(i), target);
  }

  // optional double confidence = 13 [default = 1];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->confidence(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  if (has_confidence_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->confidence_type(), target);
  }

  // repeated .apollo.perception.Point drops = 15;
  for (unsigned int i = 0, n = this->drops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->drops(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacle)
  return target;
}

int PerceptionObstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.perception.Point position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.Point velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 14080u) {
    // optional double tracking_time = 9;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double confidence = 13 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
    if (has_confidence_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confidence_type());
    }

  }
  // repeated .apollo.perception.Point polygon_point = 8;
  total_size += 1 * this->polygon_point_size();
  for (int i = 0; i < this->polygon_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon_point(i));
  }

  // repeated double point_cloud = 12 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->point_cloud_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_cloud_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .apollo.perception.Point drops = 15;
  total_size += 1 * this->drops_size();
  for (int i = 0; i < this->drops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drops(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PerceptionObstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacle)
    MergeFrom(*source);
  }
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygon_point_.MergeFrom(from.polygon_point_);
  point_cloud_.MergeFrom(from.point_cloud_);
  drops_.MergeFrom(from.drops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::apollo::perception::Point::MergeFrom(from.position());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::apollo::perception::Point::MergeFrom(from.velocity());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tracking_time()) {
      set_tracking_time(from.tracking_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_confidence_type()) {
      set_confidence_type(from.confidence_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PerceptionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {

  return true;
}

void PerceptionObstacle::Swap(PerceptionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  std::swap(id_, other->id_);
  std::swap(position_, other->position_);
  std::swap(theta_, other->theta_);
  std::swap(velocity_, other->velocity_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  polygon_point_.UnsafeArenaSwap(&other->polygon_point_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(type_, other->type_);
  std::swap(timestamp_, other->timestamp_);
  point_cloud_.UnsafeArenaSwap(&other->point_cloud_);
  std::swap(confidence_, other->confidence_);
  std::swap(confidence_type_, other->confidence_type_);
  drops_.UnsafeArenaSwap(&other->drops_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerceptionObstacle_descriptor_;
  metadata.reflection = PerceptionObstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacle

// optional int32 id = 1;
bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.id)
  return id_;
}
 void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.id)
}

// optional .apollo.perception.Point position = 2;
bool PerceptionObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacle::clear_position() {
  if (position_ != NULL) position_->::apollo::perception::Point::Clear();
  clear_has_position();
}
const ::apollo::perception::Point& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::perception::Point* PerceptionObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.position)
  return position_;
}
::apollo::perception::Point* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.position)
  clear_has_position();
  ::apollo::perception::Point* temp = position_;
  position_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_position(::apollo::perception::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.position)
}

// optional double theta = 3;
bool PerceptionObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
 double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.theta)
  return theta_;
}
 void PerceptionObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.theta)
}

// optional .apollo.perception.Point velocity = 4;
bool PerceptionObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::perception::Point::Clear();
  clear_has_velocity();
}
const ::apollo::perception::Point& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::apollo::perception::Point* PerceptionObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.velocity)
  return velocity_;
}
::apollo::perception::Point* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.velocity)
  clear_has_velocity();
  ::apollo::perception::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_velocity(::apollo::perception::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
bool PerceptionObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerceptionObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
void PerceptionObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void PerceptionObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.length)
  return length_;
}
 void PerceptionObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.length)
}

// optional double width = 6;
bool PerceptionObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerceptionObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void PerceptionObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void PerceptionObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
 double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.width)
  return width_;
}
 void PerceptionObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.width)
}

// optional double height = 7;
bool PerceptionObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerceptionObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
void PerceptionObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void PerceptionObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
 double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height)
  return height_;
}
 void PerceptionObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height)
}

// repeated .apollo.perception.Point polygon_point = 8;
int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::apollo::perception::Point& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
::apollo::perception::Point* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
::apollo::perception::Point* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
bool PerceptionObstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PerceptionObstacle::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000100u;
}
void PerceptionObstacle::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
 double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
 void PerceptionObstacle::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.tracking_time)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 10;
bool PerceptionObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PerceptionObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void PerceptionObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void PerceptionObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
 void PerceptionObstacle::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
bool PerceptionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PerceptionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
void PerceptionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.timestamp)
  return timestamp_;
}
 void PerceptionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
 double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
 void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.point_cloud)
}
 void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.point_cloud)
}
 const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
 ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// optional double confidence = 13 [default = 1];
bool PerceptionObstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PerceptionObstacle::set_has_confidence() {
  _has_bits_[0] |= 0x00001000u;
}
void PerceptionObstacle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00001000u;
}
void PerceptionObstacle::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
 double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence)
  return confidence_;
}
 void PerceptionObstacle::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence)
}

// optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
bool PerceptionObstacle::has_confidence_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PerceptionObstacle::set_has_confidence_type() {
  _has_bits_[0] |= 0x00002000u;
}
void PerceptionObstacle::clear_has_confidence_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 1;
  clear_has_confidence_type();
}
 ::apollo::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
 void PerceptionObstacle::set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value) {
  assert(::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(value));
  set_has_confidence_type();
  confidence_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence_type)
}

// repeated .apollo.perception.Point drops = 15;
int PerceptionObstacle::drops_size() const {
  return drops_.size();
}
void PerceptionObstacle::clear_drops() {
  drops_.Clear();
}
const ::apollo::perception::Point& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.drops)
  return drops_.Get(index);
}
::apollo::perception::Point* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.drops)
  return drops_.Mutable(index);
}
::apollo::perception::Point* PerceptionObstacle::add_drops() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.drops)
  return drops_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.drops)
  return &drops_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Point >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.drops)
  return drops_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CIPVInfo::kCipvIdFieldNumber;
const int CIPVInfo::kPotentialCipvIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CIPVInfo::CIPVInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.CIPVInfo)
}

void CIPVInfo::InitAsDefaultInstance() {
}

CIPVInfo::CIPVInfo(const CIPVInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.CIPVInfo)
}

void CIPVInfo::SharedCtor() {
  _cached_size_ = 0;
  cipv_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CIPVInfo::~CIPVInfo() {
  // @@protoc_insertion_point(destructor:apollo.perception.CIPVInfo)
  SharedDtor();
}

void CIPVInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CIPVInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CIPVInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CIPVInfo_descriptor_;
}

const CIPVInfo& CIPVInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

CIPVInfo* CIPVInfo::default_instance_ = NULL;

CIPVInfo* CIPVInfo::New(::google::protobuf::Arena* arena) const {
  CIPVInfo* n = new CIPVInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CIPVInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.CIPVInfo)
  cipv_id_ = 0;
  potential_cipv_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CIPVInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.CIPVInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cipv_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cipv_id_)));
          set_has_cipv_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_potential_cipv_id;
        break;
      }

      // repeated int32 potential_cipv_id = 2;
      case 2: {
        if (tag == 16) {
         parse_potential_cipv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_potential_cipv_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_potential_cipv_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_potential_cipv_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.CIPVInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.CIPVInfo)
  return false;
#undef DO_
}

void CIPVInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.CIPVInfo)
  // optional int32 cipv_id = 1;
  if (has_cipv_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cipv_id(), output);
  }

  // repeated int32 potential_cipv_id = 2;
  for (int i = 0; i < this->potential_cipv_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->potential_cipv_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.CIPVInfo)
}

::google::protobuf::uint8* CIPVInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.CIPVInfo)
  // optional int32 cipv_id = 1;
  if (has_cipv_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cipv_id(), target);
  }

  // repeated int32 potential_cipv_id = 2;
  for (int i = 0; i < this->potential_cipv_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->potential_cipv_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.CIPVInfo)
  return target;
}

int CIPVInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.CIPVInfo)
  int total_size = 0;

  // optional int32 cipv_id = 1;
  if (has_cipv_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cipv_id());
  }

  // repeated int32 potential_cipv_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->potential_cipv_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->potential_cipv_id(i));
    }
    total_size += 1 * this->potential_cipv_id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CIPVInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.CIPVInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CIPVInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CIPVInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.CIPVInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.CIPVInfo)
    MergeFrom(*source);
  }
}

void CIPVInfo::MergeFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.CIPVInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  potential_cipv_id_.MergeFrom(from.potential_cipv_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cipv_id()) {
      set_cipv_id(from.cipv_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CIPVInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPVInfo::CopyFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPVInfo::IsInitialized() const {

  return true;
}

void CIPVInfo::Swap(CIPVInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CIPVInfo::InternalSwap(CIPVInfo* other) {
  std::swap(cipv_id_, other->cipv_id_);
  potential_cipv_id_.UnsafeArenaSwap(&other->potential_cipv_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CIPVInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CIPVInfo_descriptor_;
  metadata.reflection = CIPVInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CIPVInfo

// optional int32 cipv_id = 1;
bool CIPVInfo::has_cipv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CIPVInfo::set_has_cipv_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CIPVInfo::clear_has_cipv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CIPVInfo::clear_cipv_id() {
  cipv_id_ = 0;
  clear_has_cipv_id();
}
 ::google::protobuf::int32 CIPVInfo::cipv_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.cipv_id)
  return cipv_id_;
}
 void CIPVInfo::set_cipv_id(::google::protobuf::int32 value) {
  set_has_cipv_id();
  cipv_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.cipv_id)
}

// repeated int32 potential_cipv_id = 2;
int CIPVInfo::potential_cipv_id_size() const {
  return potential_cipv_id_.size();
}
void CIPVInfo::clear_potential_cipv_id() {
  potential_cipv_id_.Clear();
}
 ::google::protobuf::int32 CIPVInfo::potential_cipv_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_.Get(index);
}
 void CIPVInfo::set_potential_cipv_id(int index, ::google::protobuf::int32 value) {
  potential_cipv_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.potential_cipv_id)
}
 void CIPVInfo::add_potential_cipv_id(::google::protobuf::int32 value) {
  potential_cipv_id_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.CIPVInfo.potential_cipv_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CIPVInfo::potential_cipv_id() const {
  // @@protoc_insertion_point(field_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CIPVInfo::mutable_potential_cipv_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return &potential_cipv_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarker::kLaneTypeFieldNumber;
const int LaneMarker::kQualityFieldNumber;
const int LaneMarker::kModelDegreeFieldNumber;
const int LaneMarker::kC0PositionFieldNumber;
const int LaneMarker::kC1HeadingAngleFieldNumber;
const int LaneMarker::kC2CurvatureFieldNumber;
const int LaneMarker::kC3CurvatureDerivativeFieldNumber;
const int LaneMarker::kViewRangeFieldNumber;
const int LaneMarker::kLongitudeStartFieldNumber;
const int LaneMarker::kLongitudeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarker::LaneMarker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.LaneMarker)
}

void LaneMarker::InitAsDefaultInstance() {
}

LaneMarker::LaneMarker(const LaneMarker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarker)
}

void LaneMarker::SharedCtor() {
  _cached_size_ = 0;
  lane_type_ = 0;
  quality_ = 0;
  model_degree_ = 0;
  c0_position_ = 0;
  c1_heading_angle_ = 0;
  c2_curvature_ = 0;
  c3_curvature_derivative_ = 0;
  view_range_ = 0;
  longitude_start_ = 0;
  longitude_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneMarker::~LaneMarker() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarker)
  SharedDtor();
}

void LaneMarker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneMarker_descriptor_;
}

const LaneMarker& LaneMarker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

LaneMarker* LaneMarker::default_instance_ = NULL;

LaneMarker* LaneMarker::New(::google::protobuf::Arena* arena) const {
  LaneMarker* n = new LaneMarker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarker)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LaneMarker, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LaneMarker*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(quality_, view_range_);
  }
  ZR_(longitude_start_, longitude_end_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.LaneMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::LaneBoundaryType_Type_IsValid(value)) {
            set_lane_type(static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_quality;
        break;
      }

      // optional double quality = 2;
      case 2: {
        if (tag == 17) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_model_degree;
        break;
      }

      // optional int32 model_degree = 3;
      case 3: {
        if (tag == 24) {
         parse_model_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_degree_)));
          set_has_model_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_c0_position;
        break;
      }

      // optional double c0_position = 4;
      case 4: {
        if (tag == 33) {
         parse_c0_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_position_)));
          set_has_c0_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_c1_heading_angle;
        break;
      }

      // optional double c1_heading_angle = 5;
      case 5: {
        if (tag == 41) {
         parse_c1_heading_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_heading_angle_)));
          set_has_c1_heading_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_c2_curvature;
        break;
      }

      // optional double c2_curvature = 6;
      case 6: {
        if (tag == 49) {
         parse_c2_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_curvature_)));
          set_has_c2_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_c3_curvature_derivative;
        break;
      }

      // optional double c3_curvature_derivative = 7;
      case 7: {
        if (tag == 57) {
         parse_c3_curvature_derivative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_curvature_derivative_)));
          set_has_c3_curvature_derivative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_view_range;
        break;
      }

      // optional double view_range = 8;
      case 8: {
        if (tag == 65) {
         parse_view_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_range_)));
          set_has_view_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_longitude_start;
        break;
      }

      // optional double longitude_start = 9;
      case 9: {
        if (tag == 73) {
         parse_longitude_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_start_)));
          set_has_longitude_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_longitude_end;
        break;
      }

      // optional double longitude_end = 10;
      case 10: {
        if (tag == 81) {
         parse_longitude_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_end_)));
          set_has_longitude_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.LaneMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.LaneMarker)
  return false;
#undef DO_
}

void LaneMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.LaneMarker)
  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  if (has_lane_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lane_type(), output);
  }

  // optional double quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quality(), output);
  }

  // optional int32 model_degree = 3;
  if (has_model_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_degree(), output);
  }

  // optional double c0_position = 4;
  if (has_c0_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c0_position(), output);
  }

  // optional double c1_heading_angle = 5;
  if (has_c1_heading_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c1_heading_angle(), output);
  }

  // optional double c2_curvature = 6;
  if (has_c2_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c2_curvature(), output);
  }

  // optional double c3_curvature_derivative = 7;
  if (has_c3_curvature_derivative()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->c3_curvature_derivative(), output);
  }

  // optional double view_range = 8;
  if (has_view_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->view_range(), output);
  }

  // optional double longitude_start = 9;
  if (has_longitude_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->longitude_start(), output);
  }

  // optional double longitude_end = 10;
  if (has_longitude_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->longitude_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.LaneMarker)
}

::google::protobuf::uint8* LaneMarker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarker)
  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  if (has_lane_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lane_type(), target);
  }

  // optional double quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quality(), target);
  }

  // optional int32 model_degree = 3;
  if (has_model_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_degree(), target);
  }

  // optional double c0_position = 4;
  if (has_c0_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c0_position(), target);
  }

  // optional double c1_heading_angle = 5;
  if (has_c1_heading_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c1_heading_angle(), target);
  }

  // optional double c2_curvature = 6;
  if (has_c2_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->c2_curvature(), target);
  }

  // optional double c3_curvature_derivative = 7;
  if (has_c3_curvature_derivative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->c3_curvature_derivative(), target);
  }

  // optional double view_range = 8;
  if (has_view_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->view_range(), target);
  }

  // optional double longitude_start = 9;
  if (has_longitude_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->longitude_start(), target);
  }

  // optional double longitude_end = 10;
  if (has_longitude_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->longitude_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarker)
  return target;
}

int LaneMarker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarker)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
    if (has_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_type());
    }

    // optional double quality = 2;
    if (has_quality()) {
      total_size += 1 + 8;
    }

    // optional int32 model_degree = 3;
    if (has_model_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_degree());
    }

    // optional double c0_position = 4;
    if (has_c0_position()) {
      total_size += 1 + 8;
    }

    // optional double c1_heading_angle = 5;
    if (has_c1_heading_angle()) {
      total_size += 1 + 8;
    }

    // optional double c2_curvature = 6;
    if (has_c2_curvature()) {
      total_size += 1 + 8;
    }

    // optional double c3_curvature_derivative = 7;
    if (has_c3_curvature_derivative()) {
      total_size += 1 + 8;
    }

    // optional double view_range = 8;
    if (has_view_range()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double longitude_start = 9;
    if (has_longitude_start()) {
      total_size += 1 + 8;
    }

    // optional double longitude_end = 10;
    if (has_longitude_end()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LaneMarker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneMarker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LaneMarker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LaneMarker)
    MergeFrom(*source);
  }
}

void LaneMarker::MergeFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lane_type()) {
      set_lane_type(from.lane_type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_model_degree()) {
      set_model_degree(from.model_degree());
    }
    if (from.has_c0_position()) {
      set_c0_position(from.c0_position());
    }
    if (from.has_c1_heading_angle()) {
      set_c1_heading_angle(from.c1_heading_angle());
    }
    if (from.has_c2_curvature()) {
      set_c2_curvature(from.c2_curvature());
    }
    if (from.has_c3_curvature_derivative()) {
      set_c3_curvature_derivative(from.c3_curvature_derivative());
    }
    if (from.has_view_range()) {
      set_view_range(from.view_range());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_longitude_start()) {
      set_longitude_start(from.longitude_start());
    }
    if (from.has_longitude_end()) {
      set_longitude_end(from.longitude_end());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneMarker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarker::CopyFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarker::IsInitialized() const {

  return true;
}

void LaneMarker::Swap(LaneMarker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarker::InternalSwap(LaneMarker* other) {
  std::swap(lane_type_, other->lane_type_);
  std::swap(quality_, other->quality_);
  std::swap(model_degree_, other->model_degree_);
  std::swap(c0_position_, other->c0_position_);
  std::swap(c1_heading_angle_, other->c1_heading_angle_);
  std::swap(c2_curvature_, other->c2_curvature_);
  std::swap(c3_curvature_derivative_, other->c3_curvature_derivative_);
  std::swap(view_range_, other->view_range_);
  std::swap(longitude_start_, other->longitude_start_);
  std::swap(longitude_end_, other->longitude_end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneMarker_descriptor_;
  metadata.reflection = LaneMarker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarker

// optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
bool LaneMarker::has_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneMarker::set_has_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneMarker::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneMarker::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
 ::apollo::hdmap::LaneBoundaryType_Type LaneMarker::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.lane_type)
  return static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(lane_type_);
}
 void LaneMarker::set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value) {
  assert(::apollo::hdmap::LaneBoundaryType_Type_IsValid(value));
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.lane_type)
}

// optional double quality = 2;
bool LaneMarker::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneMarker::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneMarker::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneMarker::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
 double LaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.quality)
  return quality_;
}
 void LaneMarker::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.quality)
}

// optional int32 model_degree = 3;
bool LaneMarker::has_model_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneMarker::set_has_model_degree() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneMarker::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneMarker::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
 ::google::protobuf::int32 LaneMarker::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.model_degree)
  return model_degree_;
}
 void LaneMarker::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.model_degree)
}

// optional double c0_position = 4;
bool LaneMarker::has_c0_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneMarker::set_has_c0_position() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneMarker::clear_has_c0_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneMarker::clear_c0_position() {
  c0_position_ = 0;
  clear_has_c0_position();
}
 double LaneMarker::c0_position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c0_position)
  return c0_position_;
}
 void LaneMarker::set_c0_position(double value) {
  set_has_c0_position();
  c0_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c0_position)
}

// optional double c1_heading_angle = 5;
bool LaneMarker::has_c1_heading_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaneMarker::set_has_c1_heading_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void LaneMarker::clear_has_c1_heading_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaneMarker::clear_c1_heading_angle() {
  c1_heading_angle_ = 0;
  clear_has_c1_heading_angle();
}
 double LaneMarker::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c1_heading_angle)
  return c1_heading_angle_;
}
 void LaneMarker::set_c1_heading_angle(double value) {
  set_has_c1_heading_angle();
  c1_heading_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c1_heading_angle)
}

// optional double c2_curvature = 6;
bool LaneMarker::has_c2_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneMarker::set_has_c2_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneMarker::clear_has_c2_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneMarker::clear_c2_curvature() {
  c2_curvature_ = 0;
  clear_has_c2_curvature();
}
 double LaneMarker::c2_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c2_curvature)
  return c2_curvature_;
}
 void LaneMarker::set_c2_curvature(double value) {
  set_has_c2_curvature();
  c2_curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c2_curvature)
}

// optional double c3_curvature_derivative = 7;
bool LaneMarker::has_c3_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LaneMarker::set_has_c3_curvature_derivative() {
  _has_bits_[0] |= 0x00000040u;
}
void LaneMarker::clear_has_c3_curvature_derivative() {
  _has_bits_[0] &= ~0x00000040u;
}
void LaneMarker::clear_c3_curvature_derivative() {
  c3_curvature_derivative_ = 0;
  clear_has_c3_curvature_derivative();
}
 double LaneMarker::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c3_curvature_derivative)
  return c3_curvature_derivative_;
}
 void LaneMarker::set_c3_curvature_derivative(double value) {
  set_has_c3_curvature_derivative();
  c3_curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c3_curvature_derivative)
}

// optional double view_range = 8;
bool LaneMarker::has_view_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LaneMarker::set_has_view_range() {
  _has_bits_[0] |= 0x00000080u;
}
void LaneMarker::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000080u;
}
void LaneMarker::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
 double LaneMarker::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.view_range)
  return view_range_;
}
 void LaneMarker::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.view_range)
}

// optional double longitude_start = 9;
bool LaneMarker::has_longitude_start() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LaneMarker::set_has_longitude_start() {
  _has_bits_[0] |= 0x00000100u;
}
void LaneMarker::clear_has_longitude_start() {
  _has_bits_[0] &= ~0x00000100u;
}
void LaneMarker::clear_longitude_start() {
  longitude_start_ = 0;
  clear_has_longitude_start();
}
 double LaneMarker::longitude_start() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_start)
  return longitude_start_;
}
 void LaneMarker::set_longitude_start(double value) {
  set_has_longitude_start();
  longitude_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_start)
}

// optional double longitude_end = 10;
bool LaneMarker::has_longitude_end() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LaneMarker::set_has_longitude_end() {
  _has_bits_[0] |= 0x00000200u;
}
void LaneMarker::clear_has_longitude_end() {
  _has_bits_[0] &= ~0x00000200u;
}
void LaneMarker::clear_longitude_end() {
  longitude_end_ = 0;
  clear_has_longitude_end();
}
 double LaneMarker::longitude_end() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_end)
  return longitude_end_;
}
 void LaneMarker::set_longitude_end(double value) {
  set_has_longitude_end();
  longitude_end_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarkers::kLeftLaneMarkerFieldNumber;
const int LaneMarkers::kRightLaneMarkerFieldNumber;
const int LaneMarkers::kNextLeftLaneMarkerFieldNumber;
const int LaneMarkers::kNextRightLaneMarkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarkers::LaneMarkers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.LaneMarkers)
}

void LaneMarkers::InitAsDefaultInstance() {
  left_lane_marker_ = const_cast< ::apollo::perception::LaneMarker*>(&::apollo::perception::LaneMarker::default_instance());
  right_lane_marker_ = const_cast< ::apollo::perception::LaneMarker*>(&::apollo::perception::LaneMarker::default_instance());
}

LaneMarkers::LaneMarkers(const LaneMarkers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarkers)
}

void LaneMarkers::SharedCtor() {
  _cached_size_ = 0;
  left_lane_marker_ = NULL;
  right_lane_marker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneMarkers::~LaneMarkers() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarkers)
  SharedDtor();
}

void LaneMarkers::SharedDtor() {
  if (this != default_instance_) {
    delete left_lane_marker_;
    delete right_lane_marker_;
  }
}

void LaneMarkers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarkers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneMarkers_descriptor_;
}

const LaneMarkers& LaneMarkers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

LaneMarkers* LaneMarkers::default_instance_ = NULL;

LaneMarkers* LaneMarkers::New(::google::protobuf::Arena* arena) const {
  LaneMarkers* n = new LaneMarkers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarkers::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarkers)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_left_lane_marker()) {
      if (left_lane_marker_ != NULL) left_lane_marker_->::apollo::perception::LaneMarker::Clear();
    }
    if (has_right_lane_marker()) {
      if (right_lane_marker_ != NULL) right_lane_marker_->::apollo::perception::LaneMarker::Clear();
    }
  }
  next_left_lane_marker_.Clear();
  next_right_lane_marker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneMarkers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.LaneMarkers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.LaneMarker left_lane_marker = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_lane_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right_lane_marker;
        break;
      }

      // optional .apollo.perception.LaneMarker right_lane_marker = 2;
      case 2: {
        if (tag == 18) {
         parse_right_lane_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_lane_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_next_left_lane_marker;
        break;
      }

      // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
      case 3: {
        if (tag == 26) {
         parse_next_left_lane_marker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_next_left_lane_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_next_left_lane_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_next_left_lane_marker;
        if (input->ExpectTag(34)) goto parse_loop_next_right_lane_marker;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_next_right_lane_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_next_right_lane_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_next_right_lane_marker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.LaneMarkers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.LaneMarkers)
  return false;
#undef DO_
}

void LaneMarkers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.LaneMarkers)
  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  if (has_left_lane_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_lane_marker_, output);
  }

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  if (has_right_lane_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_lane_marker_, output);
  }

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  for (unsigned int i = 0, n = this->next_left_lane_marker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->next_left_lane_marker(i), output);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  for (unsigned int i = 0, n = this->next_right_lane_marker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->next_right_lane_marker(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.LaneMarkers)
}

::google::protobuf::uint8* LaneMarkers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarkers)
  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  if (has_left_lane_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_lane_marker_, false, target);
  }

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  if (has_right_lane_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_lane_marker_, false, target);
  }

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  for (unsigned int i = 0, n = this->next_left_lane_marker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->next_left_lane_marker(i), false, target);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  for (unsigned int i = 0, n = this->next_right_lane_marker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->next_right_lane_marker(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarkers)
  return target;
}

int LaneMarkers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarkers)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.perception.LaneMarker left_lane_marker = 1;
    if (has_left_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_lane_marker_);
    }

    // optional .apollo.perception.LaneMarker right_lane_marker = 2;
    if (has_right_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_lane_marker_);
    }

  }
  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  total_size += 1 * this->next_left_lane_marker_size();
  for (int i = 0; i < this->next_left_lane_marker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_left_lane_marker(i));
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  total_size += 1 * this->next_right_lane_marker_size();
  for (int i = 0; i < this->next_right_lane_marker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_right_lane_marker(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarkers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LaneMarkers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneMarkers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarkers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LaneMarkers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LaneMarkers)
    MergeFrom(*source);
  }
}

void LaneMarkers::MergeFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarkers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  next_left_lane_marker_.MergeFrom(from.next_left_lane_marker_);
  next_right_lane_marker_.MergeFrom(from.next_right_lane_marker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_lane_marker()) {
      mutable_left_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from.left_lane_marker());
    }
    if (from.has_right_lane_marker()) {
      mutable_right_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from.right_lane_marker());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneMarkers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkers::CopyFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkers::IsInitialized() const {

  return true;
}

void LaneMarkers::Swap(LaneMarkers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarkers::InternalSwap(LaneMarkers* other) {
  std::swap(left_lane_marker_, other->left_lane_marker_);
  std::swap(right_lane_marker_, other->right_lane_marker_);
  next_left_lane_marker_.UnsafeArenaSwap(&other->next_left_lane_marker_);
  next_right_lane_marker_.UnsafeArenaSwap(&other->next_right_lane_marker_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarkers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneMarkers_descriptor_;
  metadata.reflection = LaneMarkers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarkers

// optional .apollo.perception.LaneMarker left_lane_marker = 1;
bool LaneMarkers::has_left_lane_marker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneMarkers::set_has_left_lane_marker() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneMarkers::clear_has_left_lane_marker() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneMarkers::clear_left_lane_marker() {
  if (left_lane_marker_ != NULL) left_lane_marker_->::apollo::perception::LaneMarker::Clear();
  clear_has_left_lane_marker();
}
const ::apollo::perception::LaneMarker& LaneMarkers::left_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.left_lane_marker)
  return left_lane_marker_ != NULL ? *left_lane_marker_ : *default_instance_->left_lane_marker_;
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_left_lane_marker() {
  set_has_left_lane_marker();
  if (left_lane_marker_ == NULL) {
    left_lane_marker_ = new ::apollo::perception::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.left_lane_marker)
  return left_lane_marker_;
}
::apollo::perception::LaneMarker* LaneMarkers::release_left_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.left_lane_marker)
  clear_has_left_lane_marker();
  ::apollo::perception::LaneMarker* temp = left_lane_marker_;
  left_lane_marker_ = NULL;
  return temp;
}
void LaneMarkers::set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker) {
  delete left_lane_marker_;
  left_lane_marker_ = left_lane_marker;
  if (left_lane_marker) {
    set_has_left_lane_marker();
  } else {
    clear_has_left_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.left_lane_marker)
}

// optional .apollo.perception.LaneMarker right_lane_marker = 2;
bool LaneMarkers::has_right_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneMarkers::set_has_right_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneMarkers::clear_has_right_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneMarkers::clear_right_lane_marker() {
  if (right_lane_marker_ != NULL) right_lane_marker_->::apollo::perception::LaneMarker::Clear();
  clear_has_right_lane_marker();
}
const ::apollo::perception::LaneMarker& LaneMarkers::right_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.right_lane_marker)
  return right_lane_marker_ != NULL ? *right_lane_marker_ : *default_instance_->right_lane_marker_;
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_right_lane_marker() {
  set_has_right_lane_marker();
  if (right_lane_marker_ == NULL) {
    right_lane_marker_ = new ::apollo::perception::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.right_lane_marker)
  return right_lane_marker_;
}
::apollo::perception::LaneMarker* LaneMarkers::release_right_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.right_lane_marker)
  clear_has_right_lane_marker();
  ::apollo::perception::LaneMarker* temp = right_lane_marker_;
  right_lane_marker_ = NULL;
  return temp;
}
void LaneMarkers::set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker) {
  delete right_lane_marker_;
  right_lane_marker_ = right_lane_marker;
  if (right_lane_marker) {
    set_has_right_lane_marker();
  } else {
    clear_has_right_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.right_lane_marker)
}

// repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
int LaneMarkers::next_left_lane_marker_size() const {
  return next_left_lane_marker_.size();
}
void LaneMarkers::clear_next_left_lane_marker() {
  next_left_lane_marker_.Clear();
}
const ::apollo::perception::LaneMarker& LaneMarkers::next_left_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Get(index);
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_next_left_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Mutable(index);
}
::apollo::perception::LaneMarker* LaneMarkers::add_next_left_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return &next_left_lane_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_left_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_;
}

// repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
int LaneMarkers::next_right_lane_marker_size() const {
  return next_right_lane_marker_.size();
}
void LaneMarkers::clear_next_right_lane_marker() {
  next_right_lane_marker_.Clear();
}
const ::apollo::perception::LaneMarker& LaneMarkers::next_right_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Get(index);
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_next_right_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Mutable(index);
}
::apollo::perception::LaneMarker* LaneMarkers::add_next_right_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return &next_right_lane_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_right_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacles::kPerceptionObstacleFieldNumber;
const int PerceptionObstacles::kHeaderFieldNumber;
const int PerceptionObstacles::kErrorCodeFieldNumber;
const int PerceptionObstacles::kLaneMarkerFieldNumber;
const int PerceptionObstacles::kCipvInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacles::PerceptionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.PerceptionObstacles)
}

void PerceptionObstacles::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(&::apollo::perception::LaneMarkers::default_instance());
  cipv_info_ = const_cast< ::apollo::perception::CIPVInfo*>(&::apollo::perception::CIPVInfo::default_instance());
}

PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacles)
}

void PerceptionObstacles::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  error_code_ = 0;
  lane_marker_ = NULL;
  cipv_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacles)
  SharedDtor();
}

void PerceptionObstacles::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete lane_marker_;
    delete cipv_info_;
  }
}

void PerceptionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionObstacles_descriptor_;
}

const PerceptionObstacles& PerceptionObstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  return *default_instance_;
}

PerceptionObstacles* PerceptionObstacles::default_instance_ = NULL;

PerceptionObstacles* PerceptionObstacles::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacles* n = new PerceptionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacles)
  if (_has_bits_[0 / 32] & 30u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    error_code_ = 0;
    if (has_lane_marker()) {
      if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
    }
    if (has_cipv_info()) {
      if (cipv_info_ != NULL) cipv_info_->::apollo::perception::CIPVInfo::Clear();
    }
  }
  perception_obstacle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PerceptionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.PerceptionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_perception_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_perception_obstacle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (tag == 24) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lane_marker;
        break;
      }

      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4: {
        if (tag == 34) {
         parse_lane_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cipv_info;
        break;
      }

      // optional .apollo.perception.CIPVInfo cipv_info = 5;
      case 5: {
        if (tag == 42) {
         parse_cipv_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cipv_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.PerceptionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.PerceptionObstacles)
  return false;
#undef DO_
}

void PerceptionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.PerceptionObstacles)
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perception_obstacle(i), output);
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (has_lane_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lane_marker_, output);
  }

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  if (has_cipv_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cipv_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.PerceptionObstacles)
}

::google::protobuf::uint8* PerceptionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacles)
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perception_obstacle(i), false, target);
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (has_lane_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lane_marker_, false, target);
  }

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  if (has_cipv_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cipv_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacles)
  return target;
}

int PerceptionObstacles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacles)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 30u) {
    // optional .apollo.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (has_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_marker_);
    }

    // optional .apollo.perception.CIPVInfo cipv_info = 5;
    if (has_cipv_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cipv_info_);
    }

  }
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  total_size += 1 * this->perception_obstacle_size();
  for (int i = 0; i < this->perception_obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->perception_obstacle(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PerceptionObstacles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacles)
    MergeFrom(*source);
  }
}

void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  perception_obstacle_.MergeFrom(from.perception_obstacle_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_lane_marker()) {
      mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (from.has_cipv_info()) {
      mutable_cipv_info()->::apollo::perception::CIPVInfo::MergeFrom(from.cipv_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PerceptionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {

  return true;
}

void PerceptionObstacles::Swap(PerceptionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  perception_obstacle_.UnsafeArenaSwap(&other->perception_obstacle_);
  std::swap(header_, other->header_);
  std::swap(error_code_, other->error_code_);
  std::swap(lane_marker_, other->lane_marker_);
  std::swap(cipv_info_, other->cipv_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerceptionObstacles_descriptor_;
  metadata.reflection = PerceptionObstacles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacles

// repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
::apollo::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
::apollo::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .apollo.common.Header header = 2;
bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.header)
  return header_;
}
::apollo::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::apollo::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.error_code)
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
 void PerceptionObstacles::set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacles.error_code)
}

// optional .apollo.perception.LaneMarkers lane_marker = 4;
bool PerceptionObstacles::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacles::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacles::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacles::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
  clear_has_lane_marker();
}
const ::apollo::perception::LaneMarkers& PerceptionObstacles::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_ : *default_instance_->lane_marker_;
}
::apollo::perception::LaneMarkers* PerceptionObstacles::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::apollo::perception::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.lane_marker)
  return lane_marker_;
}
::apollo::perception::LaneMarkers* PerceptionObstacles::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.lane_marker)
  clear_has_lane_marker();
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.lane_marker)
}

// optional .apollo.perception.CIPVInfo cipv_info = 5;
bool PerceptionObstacles::has_cipv_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerceptionObstacles::set_has_cipv_info() {
  _has_bits_[0] |= 0x00000010u;
}
void PerceptionObstacles::clear_has_cipv_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void PerceptionObstacles::clear_cipv_info() {
  if (cipv_info_ != NULL) cipv_info_->::apollo::perception::CIPVInfo::Clear();
  clear_has_cipv_info();
}
const ::apollo::perception::CIPVInfo& PerceptionObstacles::cipv_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.cipv_info)
  return cipv_info_ != NULL ? *cipv_info_ : *default_instance_->cipv_info_;
}
::apollo::perception::CIPVInfo* PerceptionObstacles::mutable_cipv_info() {
  set_has_cipv_info();
  if (cipv_info_ == NULL) {
    cipv_info_ = new ::apollo::perception::CIPVInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.cipv_info)
  return cipv_info_;
}
::apollo::perception::CIPVInfo* PerceptionObstacles::release_cipv_info() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.cipv_info)
  clear_has_cipv_info();
  ::apollo::perception::CIPVInfo* temp = cipv_info_;
  cipv_info_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info) {
  delete cipv_info_;
  cipv_info_ = cipv_info;
  if (cipv_info) {
    set_has_cipv_info();
  } else {
    clear_has_cipv_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.cipv_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
