// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/dp_poly_path_config.proto

#ifndef PROTOBUF_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto__INCLUDED
#define PROTOBUF_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "planning/waypoint_sampler_config.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
void protobuf_AssignDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
void protobuf_ShutdownFile_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();

class DpPolyPathConfig;

// ===================================================================

class DpPolyPathConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DpPolyPathConfig) */ {
 public:
  DpPolyPathConfig();
  virtual ~DpPolyPathConfig();

  DpPolyPathConfig(const DpPolyPathConfig& from);

  inline DpPolyPathConfig& operator=(const DpPolyPathConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DpPolyPathConfig& default_instance();

  void Swap(DpPolyPathConfig* other);

  // implements Message ----------------------------------------------

  inline DpPolyPathConfig* New() const { return New(NULL); }

  DpPolyPathConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DpPolyPathConfig& from);
  void MergeFrom(const DpPolyPathConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DpPolyPathConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.WaypointSamplerConfig waypoint_sampler_config = 1;
  bool has_waypoint_sampler_config() const;
  void clear_waypoint_sampler_config();
  static const int kWaypointSamplerConfigFieldNumber = 1;
  const ::apollo::planning::WaypointSamplerConfig& waypoint_sampler_config() const;
  ::apollo::planning::WaypointSamplerConfig* mutable_waypoint_sampler_config();
  ::apollo::planning::WaypointSamplerConfig* release_waypoint_sampler_config();
  void set_allocated_waypoint_sampler_config(::apollo::planning::WaypointSamplerConfig* waypoint_sampler_config);

  // optional double eval_time_interval = 2 [default = 0.1];
  bool has_eval_time_interval() const;
  void clear_eval_time_interval();
  static const int kEvalTimeIntervalFieldNumber = 2;
  double eval_time_interval() const;
  void set_eval_time_interval(double value);

  // optional double path_resolution = 3 [default = 0.1];
  bool has_path_resolution() const;
  void clear_path_resolution();
  static const int kPathResolutionFieldNumber = 3;
  double path_resolution() const;
  void set_path_resolution(double value);

  // optional double obstacle_ignore_distance = 4 [default = 20];
  bool has_obstacle_ignore_distance() const;
  void clear_obstacle_ignore_distance();
  static const int kObstacleIgnoreDistanceFieldNumber = 4;
  double obstacle_ignore_distance() const;
  void set_obstacle_ignore_distance(double value);

  // optional double obstacle_collision_distance = 5 [default = 0.2];
  bool has_obstacle_collision_distance() const;
  void clear_obstacle_collision_distance();
  static const int kObstacleCollisionDistanceFieldNumber = 5;
  double obstacle_collision_distance() const;
  void set_obstacle_collision_distance(double value);

  // optional double obstacle_risk_distance = 6 [default = 2];
  bool has_obstacle_risk_distance() const;
  void clear_obstacle_risk_distance();
  static const int kObstacleRiskDistanceFieldNumber = 6;
  double obstacle_risk_distance() const;
  void set_obstacle_risk_distance(double value);

  // optional double obstacle_collision_cost = 7 [default = 1000];
  bool has_obstacle_collision_cost() const;
  void clear_obstacle_collision_cost();
  static const int kObstacleCollisionCostFieldNumber = 7;
  double obstacle_collision_cost() const;
  void set_obstacle_collision_cost(double value);

  // optional double path_l_cost = 8;
  bool has_path_l_cost() const;
  void clear_path_l_cost();
  static const int kPathLCostFieldNumber = 8;
  double path_l_cost() const;
  void set_path_l_cost(double value);

  // optional double path_dl_cost = 9;
  bool has_path_dl_cost() const;
  void clear_path_dl_cost();
  static const int kPathDlCostFieldNumber = 9;
  double path_dl_cost() const;
  void set_path_dl_cost(double value);

  // optional double path_ddl_cost = 10;
  bool has_path_ddl_cost() const;
  void clear_path_ddl_cost();
  static const int kPathDdlCostFieldNumber = 10;
  double path_ddl_cost() const;
  void set_path_ddl_cost(double value);

  // optional double path_l_cost_param_l0 = 11;
  bool has_path_l_cost_param_l0() const;
  void clear_path_l_cost_param_l0();
  static const int kPathLCostParamL0FieldNumber = 11;
  double path_l_cost_param_l0() const;
  void set_path_l_cost_param_l0(double value);

  // optional double path_l_cost_param_b = 12;
  bool has_path_l_cost_param_b() const;
  void clear_path_l_cost_param_b();
  static const int kPathLCostParamBFieldNumber = 12;
  double path_l_cost_param_b() const;
  void set_path_l_cost_param_b(double value);

  // optional double path_l_cost_param_k = 13;
  bool has_path_l_cost_param_k() const;
  void clear_path_l_cost_param_k();
  static const int kPathLCostParamKFieldNumber = 13;
  double path_l_cost_param_k() const;
  void set_path_l_cost_param_k(double value);

  // optional double path_out_lane_cost = 14;
  bool has_path_out_lane_cost() const;
  void clear_path_out_lane_cost();
  static const int kPathOutLaneCostFieldNumber = 14;
  double path_out_lane_cost() const;
  void set_path_out_lane_cost(double value);

  // optional double path_end_l_cost = 15;
  bool has_path_end_l_cost() const;
  void clear_path_end_l_cost();
  static const int kPathEndLCostFieldNumber = 15;
  double path_end_l_cost() const;
  void set_path_end_l_cost(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.DpPolyPathConfig)
 private:
  inline void set_has_waypoint_sampler_config();
  inline void clear_has_waypoint_sampler_config();
  inline void set_has_eval_time_interval();
  inline void clear_has_eval_time_interval();
  inline void set_has_path_resolution();
  inline void clear_has_path_resolution();
  inline void set_has_obstacle_ignore_distance();
  inline void clear_has_obstacle_ignore_distance();
  inline void set_has_obstacle_collision_distance();
  inline void clear_has_obstacle_collision_distance();
  inline void set_has_obstacle_risk_distance();
  inline void clear_has_obstacle_risk_distance();
  inline void set_has_obstacle_collision_cost();
  inline void clear_has_obstacle_collision_cost();
  inline void set_has_path_l_cost();
  inline void clear_has_path_l_cost();
  inline void set_has_path_dl_cost();
  inline void clear_has_path_dl_cost();
  inline void set_has_path_ddl_cost();
  inline void clear_has_path_ddl_cost();
  inline void set_has_path_l_cost_param_l0();
  inline void clear_has_path_l_cost_param_l0();
  inline void set_has_path_l_cost_param_b();
  inline void clear_has_path_l_cost_param_b();
  inline void set_has_path_l_cost_param_k();
  inline void clear_has_path_l_cost_param_k();
  inline void set_has_path_out_lane_cost();
  inline void clear_has_path_out_lane_cost();
  inline void set_has_path_end_l_cost();
  inline void clear_has_path_end_l_cost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::WaypointSamplerConfig* waypoint_sampler_config_;
  double eval_time_interval_;
  double path_resolution_;
  double obstacle_ignore_distance_;
  double obstacle_collision_distance_;
  double obstacle_risk_distance_;
  double obstacle_collision_cost_;
  double path_l_cost_;
  double path_dl_cost_;
  double path_ddl_cost_;
  double path_l_cost_param_l0_;
  double path_l_cost_param_b_;
  double path_l_cost_param_k_;
  double path_out_lane_cost_;
  double path_end_l_cost_;
  friend void  protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static DpPolyPathConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DpPolyPathConfig

// optional .apollo.planning.WaypointSamplerConfig waypoint_sampler_config = 1;
inline bool DpPolyPathConfig::has_waypoint_sampler_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DpPolyPathConfig::set_has_waypoint_sampler_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DpPolyPathConfig::clear_has_waypoint_sampler_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DpPolyPathConfig::clear_waypoint_sampler_config() {
  if (waypoint_sampler_config_ != NULL) waypoint_sampler_config_->::apollo::planning::WaypointSamplerConfig::Clear();
  clear_has_waypoint_sampler_config();
}
inline const ::apollo::planning::WaypointSamplerConfig& DpPolyPathConfig::waypoint_sampler_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
  return waypoint_sampler_config_ != NULL ? *waypoint_sampler_config_ : *default_instance_->waypoint_sampler_config_;
}
inline ::apollo::planning::WaypointSamplerConfig* DpPolyPathConfig::mutable_waypoint_sampler_config() {
  set_has_waypoint_sampler_config();
  if (waypoint_sampler_config_ == NULL) {
    waypoint_sampler_config_ = new ::apollo::planning::WaypointSamplerConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
  return waypoint_sampler_config_;
}
inline ::apollo::planning::WaypointSamplerConfig* DpPolyPathConfig::release_waypoint_sampler_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
  clear_has_waypoint_sampler_config();
  ::apollo::planning::WaypointSamplerConfig* temp = waypoint_sampler_config_;
  waypoint_sampler_config_ = NULL;
  return temp;
}
inline void DpPolyPathConfig::set_allocated_waypoint_sampler_config(::apollo::planning::WaypointSamplerConfig* waypoint_sampler_config) {
  delete waypoint_sampler_config_;
  waypoint_sampler_config_ = waypoint_sampler_config;
  if (waypoint_sampler_config) {
    set_has_waypoint_sampler_config();
  } else {
    clear_has_waypoint_sampler_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
}

// optional double eval_time_interval = 2 [default = 0.1];
inline bool DpPolyPathConfig::has_eval_time_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DpPolyPathConfig::set_has_eval_time_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DpPolyPathConfig::clear_has_eval_time_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DpPolyPathConfig::clear_eval_time_interval() {
  eval_time_interval_ = 0.1;
  clear_has_eval_time_interval();
}
inline double DpPolyPathConfig::eval_time_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.eval_time_interval)
  return eval_time_interval_;
}
inline void DpPolyPathConfig::set_eval_time_interval(double value) {
  set_has_eval_time_interval();
  eval_time_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.eval_time_interval)
}

// optional double path_resolution = 3 [default = 0.1];
inline bool DpPolyPathConfig::has_path_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DpPolyPathConfig::set_has_path_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DpPolyPathConfig::clear_has_path_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DpPolyPathConfig::clear_path_resolution() {
  path_resolution_ = 0.1;
  clear_has_path_resolution();
}
inline double DpPolyPathConfig::path_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_resolution)
  return path_resolution_;
}
inline void DpPolyPathConfig::set_path_resolution(double value) {
  set_has_path_resolution();
  path_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_resolution)
}

// optional double obstacle_ignore_distance = 4 [default = 20];
inline bool DpPolyPathConfig::has_obstacle_ignore_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DpPolyPathConfig::set_has_obstacle_ignore_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DpPolyPathConfig::clear_has_obstacle_ignore_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DpPolyPathConfig::clear_obstacle_ignore_distance() {
  obstacle_ignore_distance_ = 20;
  clear_has_obstacle_ignore_distance();
}
inline double DpPolyPathConfig::obstacle_ignore_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
  return obstacle_ignore_distance_;
}
inline void DpPolyPathConfig::set_obstacle_ignore_distance(double value) {
  set_has_obstacle_ignore_distance();
  obstacle_ignore_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
}

// optional double obstacle_collision_distance = 5 [default = 0.2];
inline bool DpPolyPathConfig::has_obstacle_collision_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DpPolyPathConfig::set_has_obstacle_collision_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DpPolyPathConfig::clear_has_obstacle_collision_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DpPolyPathConfig::clear_obstacle_collision_distance() {
  obstacle_collision_distance_ = 0.2;
  clear_has_obstacle_collision_distance();
}
inline double DpPolyPathConfig::obstacle_collision_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
  return obstacle_collision_distance_;
}
inline void DpPolyPathConfig::set_obstacle_collision_distance(double value) {
  set_has_obstacle_collision_distance();
  obstacle_collision_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
}

// optional double obstacle_risk_distance = 6 [default = 2];
inline bool DpPolyPathConfig::has_obstacle_risk_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DpPolyPathConfig::set_has_obstacle_risk_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DpPolyPathConfig::clear_has_obstacle_risk_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DpPolyPathConfig::clear_obstacle_risk_distance() {
  obstacle_risk_distance_ = 2;
  clear_has_obstacle_risk_distance();
}
inline double DpPolyPathConfig::obstacle_risk_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
  return obstacle_risk_distance_;
}
inline void DpPolyPathConfig::set_obstacle_risk_distance(double value) {
  set_has_obstacle_risk_distance();
  obstacle_risk_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
}

// optional double obstacle_collision_cost = 7 [default = 1000];
inline bool DpPolyPathConfig::has_obstacle_collision_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DpPolyPathConfig::set_has_obstacle_collision_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DpPolyPathConfig::clear_has_obstacle_collision_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DpPolyPathConfig::clear_obstacle_collision_cost() {
  obstacle_collision_cost_ = 1000;
  clear_has_obstacle_collision_cost();
}
inline double DpPolyPathConfig::obstacle_collision_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
  return obstacle_collision_cost_;
}
inline void DpPolyPathConfig::set_obstacle_collision_cost(double value) {
  set_has_obstacle_collision_cost();
  obstacle_collision_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
}

// optional double path_l_cost = 8;
inline bool DpPolyPathConfig::has_path_l_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DpPolyPathConfig::set_has_path_l_cost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DpPolyPathConfig::clear_has_path_l_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DpPolyPathConfig::clear_path_l_cost() {
  path_l_cost_ = 0;
  clear_has_path_l_cost();
}
inline double DpPolyPathConfig::path_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost)
  return path_l_cost_;
}
inline void DpPolyPathConfig::set_path_l_cost(double value) {
  set_has_path_l_cost();
  path_l_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost)
}

// optional double path_dl_cost = 9;
inline bool DpPolyPathConfig::has_path_dl_cost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DpPolyPathConfig::set_has_path_dl_cost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DpPolyPathConfig::clear_has_path_dl_cost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DpPolyPathConfig::clear_path_dl_cost() {
  path_dl_cost_ = 0;
  clear_has_path_dl_cost();
}
inline double DpPolyPathConfig::path_dl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_dl_cost)
  return path_dl_cost_;
}
inline void DpPolyPathConfig::set_path_dl_cost(double value) {
  set_has_path_dl_cost();
  path_dl_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_dl_cost)
}

// optional double path_ddl_cost = 10;
inline bool DpPolyPathConfig::has_path_ddl_cost() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DpPolyPathConfig::set_has_path_ddl_cost() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DpPolyPathConfig::clear_has_path_ddl_cost() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DpPolyPathConfig::clear_path_ddl_cost() {
  path_ddl_cost_ = 0;
  clear_has_path_ddl_cost();
}
inline double DpPolyPathConfig::path_ddl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_ddl_cost)
  return path_ddl_cost_;
}
inline void DpPolyPathConfig::set_path_ddl_cost(double value) {
  set_has_path_ddl_cost();
  path_ddl_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_ddl_cost)
}

// optional double path_l_cost_param_l0 = 11;
inline bool DpPolyPathConfig::has_path_l_cost_param_l0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DpPolyPathConfig::set_has_path_l_cost_param_l0() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DpPolyPathConfig::clear_has_path_l_cost_param_l0() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DpPolyPathConfig::clear_path_l_cost_param_l0() {
  path_l_cost_param_l0_ = 0;
  clear_has_path_l_cost_param_l0();
}
inline double DpPolyPathConfig::path_l_cost_param_l0() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
  return path_l_cost_param_l0_;
}
inline void DpPolyPathConfig::set_path_l_cost_param_l0(double value) {
  set_has_path_l_cost_param_l0();
  path_l_cost_param_l0_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
}

// optional double path_l_cost_param_b = 12;
inline bool DpPolyPathConfig::has_path_l_cost_param_b() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DpPolyPathConfig::set_has_path_l_cost_param_b() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DpPolyPathConfig::clear_has_path_l_cost_param_b() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DpPolyPathConfig::clear_path_l_cost_param_b() {
  path_l_cost_param_b_ = 0;
  clear_has_path_l_cost_param_b();
}
inline double DpPolyPathConfig::path_l_cost_param_b() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
  return path_l_cost_param_b_;
}
inline void DpPolyPathConfig::set_path_l_cost_param_b(double value) {
  set_has_path_l_cost_param_b();
  path_l_cost_param_b_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
}

// optional double path_l_cost_param_k = 13;
inline bool DpPolyPathConfig::has_path_l_cost_param_k() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DpPolyPathConfig::set_has_path_l_cost_param_k() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DpPolyPathConfig::clear_has_path_l_cost_param_k() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DpPolyPathConfig::clear_path_l_cost_param_k() {
  path_l_cost_param_k_ = 0;
  clear_has_path_l_cost_param_k();
}
inline double DpPolyPathConfig::path_l_cost_param_k() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
  return path_l_cost_param_k_;
}
inline void DpPolyPathConfig::set_path_l_cost_param_k(double value) {
  set_has_path_l_cost_param_k();
  path_l_cost_param_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
}

// optional double path_out_lane_cost = 14;
inline bool DpPolyPathConfig::has_path_out_lane_cost() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DpPolyPathConfig::set_has_path_out_lane_cost() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DpPolyPathConfig::clear_has_path_out_lane_cost() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DpPolyPathConfig::clear_path_out_lane_cost() {
  path_out_lane_cost_ = 0;
  clear_has_path_out_lane_cost();
}
inline double DpPolyPathConfig::path_out_lane_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
  return path_out_lane_cost_;
}
inline void DpPolyPathConfig::set_path_out_lane_cost(double value) {
  set_has_path_out_lane_cost();
  path_out_lane_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
}

// optional double path_end_l_cost = 15;
inline bool DpPolyPathConfig::has_path_end_l_cost() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DpPolyPathConfig::set_has_path_end_l_cost() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DpPolyPathConfig::clear_has_path_end_l_cost() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DpPolyPathConfig::clear_path_end_l_cost() {
  path_end_l_cost_ = 0;
  clear_has_path_end_l_cost();
}
inline double DpPolyPathConfig::path_end_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_end_l_cost)
  return path_end_l_cost_;
}
inline void DpPolyPathConfig::set_path_end_l_cost(double value) {
  set_has_path_end_l_cost();
  path_end_l_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_end_l_cost)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto__INCLUDED
