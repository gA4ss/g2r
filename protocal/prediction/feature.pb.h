// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/feature.proto

#ifndef PROTOBUF_prediction_2ffeature_2eproto__INCLUDED
#define PROTOBUF_prediction_2ffeature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "prediction/lane_graph.pb.h"
#include "common/geometry.pb.h"
#include "perception/perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace prediction {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_prediction_2ffeature_2eproto();
void protobuf_AssignDesc_prediction_2ffeature_2eproto();
void protobuf_ShutdownFile_prediction_2ffeature_2eproto();

class Feature;
class Lane;
class LaneFeature;

// ===================================================================

class Lane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Lane) */ {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  void Swap(Lane* other);

  // implements Message ----------------------------------------------

  inline Lane* New() const { return New(NULL); }

  Lane* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  int current_lane_feature_size() const;
  void clear_current_lane_feature();
  static const int kCurrentLaneFeatureFieldNumber = 1;
  const ::apollo::prediction::LaneFeature& current_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* mutable_current_lane_feature(int index);
  ::apollo::prediction::LaneFeature* add_current_lane_feature();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
      mutable_current_lane_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
      current_lane_feature() const;

  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  bool has_lane_feature() const;
  void clear_lane_feature();
  static const int kLaneFeatureFieldNumber = 2;
  const ::apollo::prediction::LaneFeature& lane_feature() const;
  ::apollo::prediction::LaneFeature* mutable_lane_feature();
  ::apollo::prediction::LaneFeature* release_lane_feature();
  void set_allocated_lane_feature(::apollo::prediction::LaneFeature* lane_feature);

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  int nearby_lane_feature_size() const;
  void clear_nearby_lane_feature();
  static const int kNearbyLaneFeatureFieldNumber = 3;
  const ::apollo::prediction::LaneFeature& nearby_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* mutable_nearby_lane_feature(int index);
  ::apollo::prediction::LaneFeature* add_nearby_lane_feature();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
      mutable_nearby_lane_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
      nearby_lane_feature() const;

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  bool has_lane_graph() const;
  void clear_lane_graph();
  static const int kLaneGraphFieldNumber = 4;
  const ::apollo::prediction::LaneGraph& lane_graph() const;
  ::apollo::prediction::LaneGraph* mutable_lane_graph();
  ::apollo::prediction::LaneGraph* release_lane_graph();
  void set_allocated_lane_graph(::apollo::prediction::LaneGraph* lane_graph);

  // optional double label_update_time_delta = 26;
  bool has_label_update_time_delta() const;
  void clear_label_update_time_delta();
  static const int kLabelUpdateTimeDeltaFieldNumber = 26;
  double label_update_time_delta() const;
  void set_label_update_time_delta(double value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.Lane)
 private:
  inline void set_has_lane_feature();
  inline void clear_has_lane_feature();
  inline void set_has_lane_graph();
  inline void clear_has_lane_graph();
  inline void set_has_label_update_time_delta();
  inline void clear_has_label_update_time_delta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature > current_lane_feature_;
  ::apollo::prediction::LaneFeature* lane_feature_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature > nearby_lane_feature_;
  ::apollo::prediction::LaneGraph* lane_graph_;
  double label_update_time_delta_;
  friend void  protobuf_AddDesc_prediction_2ffeature_2eproto();
  friend void protobuf_AssignDesc_prediction_2ffeature_2eproto();
  friend void protobuf_ShutdownFile_prediction_2ffeature_2eproto();

  void InitAsDefaultInstance();
  static Lane* default_instance_;
};
// -------------------------------------------------------------------

class LaneFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneFeature) */ {
 public:
  LaneFeature();
  virtual ~LaneFeature();

  LaneFeature(const LaneFeature& from);

  inline LaneFeature& operator=(const LaneFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneFeature& default_instance();

  void Swap(LaneFeature* other);

  // implements Message ----------------------------------------------

  inline LaneFeature* New() const { return New(NULL); }

  LaneFeature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneFeature& from);
  void MergeFrom(const LaneFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string lane_id = 1;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional uint32 lane_turn_type = 2;
  bool has_lane_turn_type() const;
  void clear_lane_turn_type();
  static const int kLaneTurnTypeFieldNumber = 2;
  ::google::protobuf::uint32 lane_turn_type() const;
  void set_lane_turn_type(::google::protobuf::uint32 value);

  // optional double lane_s = 3;
  bool has_lane_s() const;
  void clear_lane_s();
  static const int kLaneSFieldNumber = 3;
  double lane_s() const;
  void set_lane_s(double value);

  // optional double lane_l = 4;
  bool has_lane_l() const;
  void clear_lane_l();
  static const int kLaneLFieldNumber = 4;
  double lane_l() const;
  void set_lane_l(double value);

  // optional double angle_diff = 5;
  bool has_angle_diff() const;
  void clear_angle_diff();
  static const int kAngleDiffFieldNumber = 5;
  double angle_diff() const;
  void set_angle_diff(double value);

  // optional double dist_to_left_boundary = 6;
  bool has_dist_to_left_boundary() const;
  void clear_dist_to_left_boundary();
  static const int kDistToLeftBoundaryFieldNumber = 6;
  double dist_to_left_boundary() const;
  void set_dist_to_left_boundary(double value);

  // optional double dist_to_right_boundary = 7;
  bool has_dist_to_right_boundary() const;
  void clear_dist_to_right_boundary();
  static const int kDistToRightBoundaryFieldNumber = 7;
  double dist_to_right_boundary() const;
  void set_dist_to_right_boundary(double value);

  // optional double lane_heading = 8;
  bool has_lane_heading() const;
  void clear_lane_heading();
  static const int kLaneHeadingFieldNumber = 8;
  double lane_heading() const;
  void set_lane_heading(double value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneFeature)
 private:
  inline void set_has_lane_id();
  inline void clear_has_lane_id();
  inline void set_has_lane_turn_type();
  inline void clear_has_lane_turn_type();
  inline void set_has_lane_s();
  inline void clear_has_lane_s();
  inline void set_has_lane_l();
  inline void clear_has_lane_l();
  inline void set_has_angle_diff();
  inline void clear_has_angle_diff();
  inline void set_has_dist_to_left_boundary();
  inline void clear_has_dist_to_left_boundary();
  inline void set_has_dist_to_right_boundary();
  inline void clear_has_dist_to_right_boundary();
  inline void set_has_lane_heading();
  inline void clear_has_lane_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double lane_s_;
  double lane_l_;
  double angle_diff_;
  double dist_to_left_boundary_;
  double dist_to_right_boundary_;
  double lane_heading_;
  ::google::protobuf::uint32 lane_turn_type_;
  friend void  protobuf_AddDesc_prediction_2ffeature_2eproto();
  friend void protobuf_AssignDesc_prediction_2ffeature_2eproto();
  friend void protobuf_ShutdownFile_prediction_2ffeature_2eproto();

  void InitAsDefaultInstance();
  static LaneFeature* default_instance_;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  void Swap(Feature* other);

  // implements Message ----------------------------------------------

  inline Feature* New() const { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .apollo.common.Point3D position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* mutable_position();
  ::apollo::common::Point3D* release_position();
  void set_allocated_position(::apollo::common::Point3D* position);

  // optional .apollo.common.Point3D velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  const ::apollo::common::Point3D& velocity() const;
  ::apollo::common::Point3D* mutable_velocity();
  ::apollo::common::Point3D* release_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);

  // optional .apollo.common.Point3D acceleration = 4;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 4;
  const ::apollo::common::Point3D& acceleration() const;
  ::apollo::common::Point3D* mutable_acceleration();
  ::apollo::common::Point3D* release_acceleration();
  void set_allocated_acceleration(::apollo::common::Point3D* acceleration);

  // optional double velocity_heading = 5;
  bool has_velocity_heading() const;
  void clear_velocity_heading();
  static const int kVelocityHeadingFieldNumber = 5;
  double velocity_heading() const;
  void set_velocity_heading(double value);

  // optional double speed = 6;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  double speed() const;
  void set_speed(double value);

  // optional double acc = 7;
  bool has_acc() const;
  void clear_acc();
  static const int kAccFieldNumber = 7;
  double acc() const;
  void set_acc(double value);

  // optional double theta = 8;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 8;
  double theta() const;
  void set_theta(double value);

  // optional double length = 9;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 9;
  double length() const;
  void set_length(double value);

  // optional double width = 10;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 10;
  double width() const;
  void set_width(double value);

  // optional double height = 11;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 11;
  double height() const;
  void set_height(double value);

  // optional double tracking_time = 12;
  bool has_tracking_time() const;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 12;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional double timestamp = 13;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 13;
  double timestamp() const;
  void set_timestamp(double value);

  // optional .apollo.prediction.Lane lane = 14;
  bool has_lane() const;
  void clear_lane();
  static const int kLaneFieldNumber = 14;
  const ::apollo::prediction::Lane& lane() const;
  ::apollo::prediction::Lane* mutable_lane();
  ::apollo::prediction::Lane* release_lane();
  void set_allocated_lane(::apollo::prediction::Lane* lane);

  // optional .apollo.common.Point3D t_position = 16;
  bool has_t_position() const;
  void clear_t_position();
  static const int kTPositionFieldNumber = 16;
  const ::apollo::common::Point3D& t_position() const;
  ::apollo::common::Point3D* mutable_t_position();
  ::apollo::common::Point3D* release_t_position();
  void set_allocated_t_position(::apollo::common::Point3D* t_position);

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_t_velocity() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_t_velocity();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTVelocityFieldNumber = 17;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::common::Point3D& t_velocity() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::Point3D* mutable_t_velocity();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::Point3D* release_t_velocity();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_t_velocity(::apollo::common::Point3D* t_velocity);

  // optional double t_velocity_heading = 18 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_t_velocity_heading() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_t_velocity_heading();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTVelocityHeadingFieldNumber = 18;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double t_velocity_heading() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_t_velocity_heading(double value);

  // optional double t_speed = 19 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_t_speed() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_t_speed();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTSpeedFieldNumber = 19;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double t_speed() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_t_speed(double value);

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_t_acceleration() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_t_acceleration();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTAccelerationFieldNumber = 20;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::common::Point3D& t_acceleration() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::Point3D* mutable_t_acceleration();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::Point3D* release_t_acceleration();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_t_acceleration(::apollo::common::Point3D* t_acceleration);

  // optional double t_acc = 21 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_t_acc() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_t_acc();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTAccFieldNumber = 21;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double t_acc() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_t_acc(double value);

  // optional bool is_still = 22 [default = false];
  bool has_is_still() const;
  void clear_is_still();
  static const int kIsStillFieldNumber = 22;
  bool is_still() const;
  void set_is_still(bool value);

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 23;
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);

  // optional double label_update_time_delta = 24;
  bool has_label_update_time_delta() const;
  void clear_label_update_time_delta();
  static const int kLabelUpdateTimeDeltaFieldNumber = 24;
  double label_update_time_delta() const;
  void set_label_update_time_delta(double value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.Feature)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_velocity_heading();
  inline void clear_has_velocity_heading();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_acc();
  inline void clear_has_acc();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_tracking_time();
  inline void clear_has_tracking_time();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_lane();
  inline void clear_has_lane();
  inline void set_has_t_position();
  inline void clear_has_t_position();
  inline void set_has_t_velocity();
  inline void clear_has_t_velocity();
  inline void set_has_t_velocity_heading();
  inline void clear_has_t_velocity_heading();
  inline void set_has_t_speed();
  inline void clear_has_t_speed();
  inline void set_has_t_acceleration();
  inline void clear_has_t_acceleration();
  inline void set_has_t_acc();
  inline void clear_has_t_acc();
  inline void set_has_is_still();
  inline void clear_has_is_still();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_label_update_time_delta();
  inline void clear_has_label_update_time_delta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Point3D* position_;
  ::apollo::common::Point3D* velocity_;
  ::apollo::common::Point3D* acceleration_;
  double velocity_heading_;
  double speed_;
  double acc_;
  double theta_;
  double length_;
  double width_;
  double height_;
  ::google::protobuf::int32 id_;
  bool is_still_;
  double tracking_time_;
  double timestamp_;
  ::apollo::prediction::Lane* lane_;
  ::apollo::common::Point3D* t_position_;
  ::apollo::common::Point3D* t_velocity_;
  double t_velocity_heading_;
  double t_speed_;
  ::apollo::common::Point3D* t_acceleration_;
  double t_acc_;
  double label_update_time_delta_;
  int type_;
  friend void  protobuf_AddDesc_prediction_2ffeature_2eproto();
  friend void protobuf_AssignDesc_prediction_2ffeature_2eproto();
  friend void protobuf_ShutdownFile_prediction_2ffeature_2eproto();

  void InitAsDefaultInstance();
  static Feature* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Lane

// repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
inline int Lane::current_lane_feature_size() const {
  return current_lane_feature_.size();
}
inline void Lane::clear_current_lane_feature() {
  current_lane_feature_.Clear();
}
inline const ::apollo::prediction::LaneFeature& Lane::current_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.current_lane_feature)
  return current_lane_feature_.Get(index);
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_current_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.current_lane_feature)
  return current_lane_feature_.Mutable(index);
}
inline ::apollo::prediction::LaneFeature* Lane::add_current_lane_feature() {
  // @@protoc_insertion_point(field_add:apollo.prediction.Lane.current_lane_feature)
  return current_lane_feature_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
Lane::mutable_current_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Lane.current_lane_feature)
  return &current_lane_feature_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
Lane::current_lane_feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Lane.current_lane_feature)
  return current_lane_feature_;
}

// optional .apollo.prediction.LaneFeature lane_feature = 2;
inline bool Lane::has_lane_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lane::set_has_lane_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lane::clear_has_lane_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lane::clear_lane_feature() {
  if (lane_feature_ != NULL) lane_feature_->::apollo::prediction::LaneFeature::Clear();
  clear_has_lane_feature();
}
inline const ::apollo::prediction::LaneFeature& Lane::lane_feature() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.lane_feature)
  return lane_feature_ != NULL ? *lane_feature_ : *default_instance_->lane_feature_;
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_lane_feature() {
  set_has_lane_feature();
  if (lane_feature_ == NULL) {
    lane_feature_ = new ::apollo::prediction::LaneFeature;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.lane_feature)
  return lane_feature_;
}
inline ::apollo::prediction::LaneFeature* Lane::release_lane_feature() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Lane.lane_feature)
  clear_has_lane_feature();
  ::apollo::prediction::LaneFeature* temp = lane_feature_;
  lane_feature_ = NULL;
  return temp;
}
inline void Lane::set_allocated_lane_feature(::apollo::prediction::LaneFeature* lane_feature) {
  delete lane_feature_;
  lane_feature_ = lane_feature;
  if (lane_feature) {
    set_has_lane_feature();
  } else {
    clear_has_lane_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Lane.lane_feature)
}

// repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
inline int Lane::nearby_lane_feature_size() const {
  return nearby_lane_feature_.size();
}
inline void Lane::clear_nearby_lane_feature() {
  nearby_lane_feature_.Clear();
}
inline const ::apollo::prediction::LaneFeature& Lane::nearby_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_.Get(index);
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_nearby_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_.Mutable(index);
}
inline ::apollo::prediction::LaneFeature* Lane::add_nearby_lane_feature() {
  // @@protoc_insertion_point(field_add:apollo.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
Lane::mutable_nearby_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Lane.nearby_lane_feature)
  return &nearby_lane_feature_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
Lane::nearby_lane_feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_;
}

// optional .apollo.prediction.LaneGraph lane_graph = 4;
inline bool Lane::has_lane_graph() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lane::set_has_lane_graph() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lane::clear_has_lane_graph() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lane::clear_lane_graph() {
  if (lane_graph_ != NULL) lane_graph_->::apollo::prediction::LaneGraph::Clear();
  clear_has_lane_graph();
}
inline const ::apollo::prediction::LaneGraph& Lane::lane_graph() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.lane_graph)
  return lane_graph_ != NULL ? *lane_graph_ : *default_instance_->lane_graph_;
}
inline ::apollo::prediction::LaneGraph* Lane::mutable_lane_graph() {
  set_has_lane_graph();
  if (lane_graph_ == NULL) {
    lane_graph_ = new ::apollo::prediction::LaneGraph;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.lane_graph)
  return lane_graph_;
}
inline ::apollo::prediction::LaneGraph* Lane::release_lane_graph() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Lane.lane_graph)
  clear_has_lane_graph();
  ::apollo::prediction::LaneGraph* temp = lane_graph_;
  lane_graph_ = NULL;
  return temp;
}
inline void Lane::set_allocated_lane_graph(::apollo::prediction::LaneGraph* lane_graph) {
  delete lane_graph_;
  lane_graph_ = lane_graph;
  if (lane_graph) {
    set_has_lane_graph();
  } else {
    clear_has_lane_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Lane.lane_graph)
}

// optional double label_update_time_delta = 26;
inline bool Lane::has_label_update_time_delta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lane::set_has_label_update_time_delta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lane::clear_has_label_update_time_delta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lane::clear_label_update_time_delta() {
  label_update_time_delta_ = 0;
  clear_has_label_update_time_delta();
}
inline double Lane::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.label_update_time_delta)
  return label_update_time_delta_;
}
inline void Lane::set_label_update_time_delta(double value) {
  set_has_label_update_time_delta();
  label_update_time_delta_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Lane.label_update_time_delta)
}

// -------------------------------------------------------------------

// LaneFeature

// optional string lane_id = 1;
inline bool LaneFeature::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneFeature::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneFeature::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneFeature::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
inline const ::std::string& LaneFeature::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneFeature::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_id)
}
inline void LaneFeature::set_lane_id(const char* value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LaneFeature.lane_id)
}
inline void LaneFeature::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LaneFeature.lane_id)
}
inline ::std::string* LaneFeature::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneFeature.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneFeature::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneFeature.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneFeature::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneFeature.lane_id)
}

// optional uint32 lane_turn_type = 2;
inline bool LaneFeature::has_lane_turn_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneFeature::set_has_lane_turn_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneFeature::clear_has_lane_turn_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneFeature::clear_lane_turn_type() {
  lane_turn_type_ = 0u;
  clear_has_lane_turn_type();
}
inline ::google::protobuf::uint32 LaneFeature::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_turn_type)
  return lane_turn_type_;
}
inline void LaneFeature::set_lane_turn_type(::google::protobuf::uint32 value) {
  set_has_lane_turn_type();
  lane_turn_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_turn_type)
}

// optional double lane_s = 3;
inline bool LaneFeature::has_lane_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneFeature::set_has_lane_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneFeature::clear_has_lane_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneFeature::clear_lane_s() {
  lane_s_ = 0;
  clear_has_lane_s();
}
inline double LaneFeature::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_s)
  return lane_s_;
}
inline void LaneFeature::set_lane_s(double value) {
  set_has_lane_s();
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_s)
}

// optional double lane_l = 4;
inline bool LaneFeature::has_lane_l() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneFeature::set_has_lane_l() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneFeature::clear_has_lane_l() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneFeature::clear_lane_l() {
  lane_l_ = 0;
  clear_has_lane_l();
}
inline double LaneFeature::lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_l)
  return lane_l_;
}
inline void LaneFeature::set_lane_l(double value) {
  set_has_lane_l();
  lane_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_l)
}

// optional double angle_diff = 5;
inline bool LaneFeature::has_angle_diff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneFeature::set_has_angle_diff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneFeature::clear_has_angle_diff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneFeature::clear_angle_diff() {
  angle_diff_ = 0;
  clear_has_angle_diff();
}
inline double LaneFeature::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.angle_diff)
  return angle_diff_;
}
inline void LaneFeature::set_angle_diff(double value) {
  set_has_angle_diff();
  angle_diff_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.angle_diff)
}

// optional double dist_to_left_boundary = 6;
inline bool LaneFeature::has_dist_to_left_boundary() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneFeature::set_has_dist_to_left_boundary() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneFeature::clear_has_dist_to_left_boundary() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneFeature::clear_dist_to_left_boundary() {
  dist_to_left_boundary_ = 0;
  clear_has_dist_to_left_boundary();
}
inline double LaneFeature::dist_to_left_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.dist_to_left_boundary)
  return dist_to_left_boundary_;
}
inline void LaneFeature::set_dist_to_left_boundary(double value) {
  set_has_dist_to_left_boundary();
  dist_to_left_boundary_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.dist_to_left_boundary)
}

// optional double dist_to_right_boundary = 7;
inline bool LaneFeature::has_dist_to_right_boundary() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneFeature::set_has_dist_to_right_boundary() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneFeature::clear_has_dist_to_right_boundary() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneFeature::clear_dist_to_right_boundary() {
  dist_to_right_boundary_ = 0;
  clear_has_dist_to_right_boundary();
}
inline double LaneFeature::dist_to_right_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.dist_to_right_boundary)
  return dist_to_right_boundary_;
}
inline void LaneFeature::set_dist_to_right_boundary(double value) {
  set_has_dist_to_right_boundary();
  dist_to_right_boundary_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.dist_to_right_boundary)
}

// optional double lane_heading = 8;
inline bool LaneFeature::has_lane_heading() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneFeature::set_has_lane_heading() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaneFeature::clear_has_lane_heading() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaneFeature::clear_lane_heading() {
  lane_heading_ = 0;
  clear_has_lane_heading();
}
inline double LaneFeature::lane_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_heading)
  return lane_heading_;
}
inline void LaneFeature::set_lane_heading(double value) {
  set_has_lane_heading();
  lane_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_heading)
}

// -------------------------------------------------------------------

// Feature

// optional int32 id = 1;
inline bool Feature::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Feature::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Feature::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Feature::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Feature::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.id)
  return id_;
}
inline void Feature::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.id)
}

// optional .apollo.common.Point3D position = 2;
inline bool Feature::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Feature::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Feature::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Feature::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
inline const ::apollo::common::Point3D& Feature::position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::common::Point3D* Feature::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.position)
  return position_;
}
inline ::apollo::common::Point3D* Feature::release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Feature::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.position)
}

// optional .apollo.common.Point3D velocity = 3;
inline bool Feature::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Feature::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Feature::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Feature::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
  clear_has_velocity();
}
inline const ::apollo::common::Point3D& Feature::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::apollo::common::Point3D* Feature::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.velocity)
  return velocity_;
}
inline ::apollo::common::Point3D* Feature::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.velocity)
  clear_has_velocity();
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void Feature::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.velocity)
}

// optional .apollo.common.Point3D acceleration = 4;
inline bool Feature::has_acceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Feature::set_has_acceleration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Feature::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Feature::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::apollo::common::Point3D::Clear();
  clear_has_acceleration();
}
inline const ::apollo::common::Point3D& Feature::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::apollo::common::Point3D* Feature::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.acceleration)
  return acceleration_;
}
inline ::apollo::common::Point3D* Feature::release_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.acceleration)
  clear_has_acceleration();
  ::apollo::common::Point3D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void Feature::set_allocated_acceleration(::apollo::common::Point3D* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.acceleration)
}

// optional double velocity_heading = 5;
inline bool Feature::has_velocity_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Feature::set_has_velocity_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Feature::clear_has_velocity_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Feature::clear_velocity_heading() {
  velocity_heading_ = 0;
  clear_has_velocity_heading();
}
inline double Feature::velocity_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.velocity_heading)
  return velocity_heading_;
}
inline void Feature::set_velocity_heading(double value) {
  set_has_velocity_heading();
  velocity_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.velocity_heading)
}

// optional double speed = 6;
inline bool Feature::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Feature::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Feature::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Feature::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double Feature::speed() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.speed)
  return speed_;
}
inline void Feature::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.speed)
}

// optional double acc = 7;
inline bool Feature::has_acc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Feature::set_has_acc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Feature::clear_has_acc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Feature::clear_acc() {
  acc_ = 0;
  clear_has_acc();
}
inline double Feature::acc() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.acc)
  return acc_;
}
inline void Feature::set_acc(double value) {
  set_has_acc();
  acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.acc)
}

// optional double theta = 8;
inline bool Feature::has_theta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Feature::set_has_theta() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Feature::clear_has_theta() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Feature::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double Feature::theta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.theta)
  return theta_;
}
inline void Feature::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.theta)
}

// optional double length = 9;
inline bool Feature::has_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Feature::set_has_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Feature::clear_has_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Feature::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double Feature::length() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.length)
  return length_;
}
inline void Feature::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.length)
}

// optional double width = 10;
inline bool Feature::has_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Feature::set_has_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Feature::clear_has_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Feature::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double Feature::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.width)
  return width_;
}
inline void Feature::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.width)
}

// optional double height = 11;
inline bool Feature::has_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Feature::set_has_height() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Feature::clear_has_height() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Feature::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double Feature::height() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.height)
  return height_;
}
inline void Feature::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.height)
}

// optional double tracking_time = 12;
inline bool Feature::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Feature::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Feature::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Feature::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
inline double Feature::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.tracking_time)
  return tracking_time_;
}
inline void Feature::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.tracking_time)
}

// optional double timestamp = 13;
inline bool Feature::has_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Feature::set_has_timestamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Feature::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Feature::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Feature::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.timestamp)
  return timestamp_;
}
inline void Feature::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.timestamp)
}

// optional .apollo.prediction.Lane lane = 14;
inline bool Feature::has_lane() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Feature::set_has_lane() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Feature::clear_has_lane() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Feature::clear_lane() {
  if (lane_ != NULL) lane_->::apollo::prediction::Lane::Clear();
  clear_has_lane();
}
inline const ::apollo::prediction::Lane& Feature::lane() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.lane)
  return lane_ != NULL ? *lane_ : *default_instance_->lane_;
}
inline ::apollo::prediction::Lane* Feature::mutable_lane() {
  set_has_lane();
  if (lane_ == NULL) {
    lane_ = new ::apollo::prediction::Lane;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.lane)
  return lane_;
}
inline ::apollo::prediction::Lane* Feature::release_lane() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.lane)
  clear_has_lane();
  ::apollo::prediction::Lane* temp = lane_;
  lane_ = NULL;
  return temp;
}
inline void Feature::set_allocated_lane(::apollo::prediction::Lane* lane) {
  delete lane_;
  lane_ = lane;
  if (lane) {
    set_has_lane();
  } else {
    clear_has_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.lane)
}

// optional .apollo.common.Point3D t_position = 16;
inline bool Feature::has_t_position() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Feature::set_has_t_position() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Feature::clear_has_t_position() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Feature::clear_t_position() {
  if (t_position_ != NULL) t_position_->::apollo::common::Point3D::Clear();
  clear_has_t_position();
}
inline const ::apollo::common::Point3D& Feature::t_position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_position)
  return t_position_ != NULL ? *t_position_ : *default_instance_->t_position_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_position() {
  set_has_t_position();
  if (t_position_ == NULL) {
    t_position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_position)
  return t_position_;
}
inline ::apollo::common::Point3D* Feature::release_t_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_position)
  clear_has_t_position();
  ::apollo::common::Point3D* temp = t_position_;
  t_position_ = NULL;
  return temp;
}
inline void Feature::set_allocated_t_position(::apollo::common::Point3D* t_position) {
  delete t_position_;
  t_position_ = t_position;
  if (t_position) {
    set_has_t_position();
  } else {
    clear_has_t_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_position)
}

// optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
inline bool Feature::has_t_velocity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Feature::set_has_t_velocity() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Feature::clear_has_t_velocity() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Feature::clear_t_velocity() {
  if (t_velocity_ != NULL) t_velocity_->::apollo::common::Point3D::Clear();
  clear_has_t_velocity();
}
inline const ::apollo::common::Point3D& Feature::t_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_velocity)
  return t_velocity_ != NULL ? *t_velocity_ : *default_instance_->t_velocity_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_velocity() {
  set_has_t_velocity();
  if (t_velocity_ == NULL) {
    t_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_velocity)
  return t_velocity_;
}
inline ::apollo::common::Point3D* Feature::release_t_velocity() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_velocity)
  clear_has_t_velocity();
  ::apollo::common::Point3D* temp = t_velocity_;
  t_velocity_ = NULL;
  return temp;
}
inline void Feature::set_allocated_t_velocity(::apollo::common::Point3D* t_velocity) {
  delete t_velocity_;
  t_velocity_ = t_velocity;
  if (t_velocity) {
    set_has_t_velocity();
  } else {
    clear_has_t_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_velocity)
}

// optional double t_velocity_heading = 18 [deprecated = true];
inline bool Feature::has_t_velocity_heading() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Feature::set_has_t_velocity_heading() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Feature::clear_has_t_velocity_heading() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Feature::clear_t_velocity_heading() {
  t_velocity_heading_ = 0;
  clear_has_t_velocity_heading();
}
inline double Feature::t_velocity_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_velocity_heading)
  return t_velocity_heading_;
}
inline void Feature::set_t_velocity_heading(double value) {
  set_has_t_velocity_heading();
  t_velocity_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_velocity_heading)
}

// optional double t_speed = 19 [deprecated = true];
inline bool Feature::has_t_speed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Feature::set_has_t_speed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Feature::clear_has_t_speed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Feature::clear_t_speed() {
  t_speed_ = 0;
  clear_has_t_speed();
}
inline double Feature::t_speed() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_speed)
  return t_speed_;
}
inline void Feature::set_t_speed(double value) {
  set_has_t_speed();
  t_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_speed)
}

// optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
inline bool Feature::has_t_acceleration() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Feature::set_has_t_acceleration() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Feature::clear_has_t_acceleration() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Feature::clear_t_acceleration() {
  if (t_acceleration_ != NULL) t_acceleration_->::apollo::common::Point3D::Clear();
  clear_has_t_acceleration();
}
inline const ::apollo::common::Point3D& Feature::t_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_acceleration)
  return t_acceleration_ != NULL ? *t_acceleration_ : *default_instance_->t_acceleration_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_acceleration() {
  set_has_t_acceleration();
  if (t_acceleration_ == NULL) {
    t_acceleration_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_acceleration)
  return t_acceleration_;
}
inline ::apollo::common::Point3D* Feature::release_t_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_acceleration)
  clear_has_t_acceleration();
  ::apollo::common::Point3D* temp = t_acceleration_;
  t_acceleration_ = NULL;
  return temp;
}
inline void Feature::set_allocated_t_acceleration(::apollo::common::Point3D* t_acceleration) {
  delete t_acceleration_;
  t_acceleration_ = t_acceleration;
  if (t_acceleration) {
    set_has_t_acceleration();
  } else {
    clear_has_t_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_acceleration)
}

// optional double t_acc = 21 [deprecated = true];
inline bool Feature::has_t_acc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Feature::set_has_t_acc() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Feature::clear_has_t_acc() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Feature::clear_t_acc() {
  t_acc_ = 0;
  clear_has_t_acc();
}
inline double Feature::t_acc() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_acc)
  return t_acc_;
}
inline void Feature::set_t_acc(double value) {
  set_has_t_acc();
  t_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_acc)
}

// optional bool is_still = 22 [default = false];
inline bool Feature::has_is_still() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Feature::set_has_is_still() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Feature::clear_has_is_still() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Feature::clear_is_still() {
  is_still_ = false;
  clear_has_is_still();
}
inline bool Feature::is_still() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.is_still)
  return is_still_;
}
inline void Feature::set_is_still(bool value) {
  set_has_is_still();
  is_still_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.is_still)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 23;
inline bool Feature::has_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Feature::set_has_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Feature::clear_has_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Feature::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::perception::PerceptionObstacle_Type Feature::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
inline void Feature::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.type)
}

// optional double label_update_time_delta = 24;
inline bool Feature::has_label_update_time_delta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Feature::set_has_label_update_time_delta() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Feature::clear_has_label_update_time_delta() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Feature::clear_label_update_time_delta() {
  label_update_time_delta_ = 0;
  clear_has_label_update_time_delta();
}
inline double Feature::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.label_update_time_delta)
  return label_update_time_delta_;
}
inline void Feature::set_label_update_time_delta(double value) {
  set_has_label_update_time_delta();
  label_update_time_delta_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.label_update_time_delta)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_prediction_2ffeature_2eproto__INCLUDED
