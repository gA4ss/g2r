// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light/subnode_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/traffic_light/subnode_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace traffic_light {
namespace subnode_config {

namespace {

const ::google::protobuf::Descriptor* TLPreprocessorSubnodeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLPreprocessorSubnodeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLProcSubnodeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLProcSubnodeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubnodeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubnodeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/traffic_light/subnode_config.proto");
  GOOGLE_CHECK(file != NULL);
  TLPreprocessorSubnodeConfig_descriptor_ = file->message_type(0);
  static const int TLPreprocessorSubnodeConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, max_ahead_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, max_process_image_fps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, query_tf_inverval_seconds_),
  };
  TLPreprocessorSubnodeConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLPreprocessorSubnodeConfig_descriptor_,
      TLPreprocessorSubnodeConfig::default_instance_,
      TLPreprocessorSubnodeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TLPreprocessorSubnodeConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, _internal_metadata_),
      -1);
  TLProcSubnodeConfig_descriptor_ = file->message_type(1);
  static const int TLProcSubnodeConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, image_border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, valid_ts_interval_),
  };
  TLProcSubnodeConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLProcSubnodeConfig_descriptor_,
      TLProcSubnodeConfig::default_instance_,
      TLProcSubnodeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TLProcSubnodeConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, _internal_metadata_),
      -1);
  SubnodeConfig_descriptor_ = file->message_type(2);
  static const int SubnodeConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, tl_preprocessor_subnode_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, tl_proc_subnode_config_),
  };
  SubnodeConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubnodeConfig_descriptor_,
      SubnodeConfig::default_instance_,
      SubnodeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubnodeConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLPreprocessorSubnodeConfig_descriptor_, &TLPreprocessorSubnodeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLProcSubnodeConfig_descriptor_, &TLProcSubnodeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubnodeConfig_descriptor_, &SubnodeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto() {
  delete TLPreprocessorSubnodeConfig::default_instance_;
  delete TLPreprocessorSubnodeConfig_reflection_;
  delete TLPreprocessorSubnodeConfig::_default_name_;
  delete TLPreprocessorSubnodeConfig::_default_version_;
  delete TLProcSubnodeConfig::default_instance_;
  delete TLProcSubnodeConfig_reflection_;
  delete TLProcSubnodeConfig::_default_name_;
  delete TLProcSubnodeConfig::_default_version_;
  delete SubnodeConfig::default_instance_;
  delete SubnodeConfig_reflection_;
}

void protobuf_AddDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-perception/traffic_light/subnode_confi"
    "g.proto\022.apollo.perception.traffic_light"
    ".subnode_config\"\304\001\n\033TLPreprocessorSubnod"
    "eConfig\022#\n\004name\030\001 \001(\t:\025TLPreprocessorSub"
    "node\022\026\n\007version\030\002 \001(\t:\0051.0.0\022\036\n\021max_ahea"
    "d_seconds\030\003 \001(\002:\0030.3\022 \n\025max_process_imag"
    "e_fps\030\004 \001(\002:\0018\022&\n\031query_tf_inverval_seco"
    "nds\030\005 \001(\002:\0030.2\"\205\001\n\023TLProcSubnodeConfig\022\033"
    "\n\004name\030\001 \001(\t:\rTLProcSubnode\022\026\n\007version\030\002"
    " \001(\t:\0051.0.0\022\031\n\014image_border\030\003 \001(\005:\003100\022\036"
    "\n\021valid_ts_interval\030\004 \001(\002:\0030.5\"\351\001\n\rSubno"
    "deConfig\022s\n\036tl_preprocessor_subnode_conf"
    "ig\030\001 \001(\0132K.apollo.perception.traffic_lig"
    "ht.subnode_config.TLPreprocessorSubnodeC"
    "onfig\022c\n\026tl_proc_subnode_config\030\002 \001(\0132C."
    "apollo.perception.traffic_light.subnode_"
    "config.TLProcSubnodeConfig", 666);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/traffic_light/subnode_config.proto", &protobuf_RegisterTypes);
  TLPreprocessorSubnodeConfig::_default_name_ =
      new ::std::string("TLPreprocessorSubnode", 21);
  TLPreprocessorSubnodeConfig::_default_version_ =
      new ::std::string("1.0.0", 5);
  TLPreprocessorSubnodeConfig::default_instance_ = new TLPreprocessorSubnodeConfig();
  TLProcSubnodeConfig::_default_name_ =
      new ::std::string("TLProcSubnode", 13);
  TLProcSubnodeConfig::_default_version_ =
      new ::std::string("1.0.0", 5);
  TLProcSubnodeConfig::default_instance_ = new TLProcSubnodeConfig();
  SubnodeConfig::default_instance_ = new SubnodeConfig();
  TLPreprocessorSubnodeConfig::default_instance_->InitAsDefaultInstance();
  TLProcSubnodeConfig::default_instance_->InitAsDefaultInstance();
  SubnodeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_;

// ===================================================================

::std::string* TLPreprocessorSubnodeConfig::_default_name_ = NULL;
::std::string* TLPreprocessorSubnodeConfig::_default_version_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLPreprocessorSubnodeConfig::kNameFieldNumber;
const int TLPreprocessorSubnodeConfig::kVersionFieldNumber;
const int TLPreprocessorSubnodeConfig::kMaxAheadSecondsFieldNumber;
const int TLPreprocessorSubnodeConfig::kMaxProcessImageFpsFieldNumber;
const int TLPreprocessorSubnodeConfig::kQueryTfInvervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLPreprocessorSubnodeConfig::TLPreprocessorSubnodeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}

void TLPreprocessorSubnodeConfig::InitAsDefaultInstance() {
}

TLPreprocessorSubnodeConfig::TLPreprocessorSubnodeConfig(const TLPreprocessorSubnodeConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}

void TLPreprocessorSubnodeConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  version_.UnsafeSetDefault(_default_version_);
  max_ahead_seconds_ = 0.3f;
  max_process_image_fps_ = 8;
  query_tf_inverval_seconds_ = 0.2f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLPreprocessorSubnodeConfig::~TLPreprocessorSubnodeConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  SharedDtor();
}

void TLPreprocessorSubnodeConfig::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  version_.DestroyNoArena(_default_version_);
  if (this != default_instance_) {
  }
}

void TLPreprocessorSubnodeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLPreprocessorSubnodeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLPreprocessorSubnodeConfig_descriptor_;
}

const TLPreprocessorSubnodeConfig& TLPreprocessorSubnodeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto();
  return *default_instance_;
}

TLPreprocessorSubnodeConfig* TLPreprocessorSubnodeConfig::default_instance_ = NULL;

TLPreprocessorSubnodeConfig* TLPreprocessorSubnodeConfig::New(::google::protobuf::Arena* arena) const {
  TLPreprocessorSubnodeConfig* n = new TLPreprocessorSubnodeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLPreprocessorSubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    if (has_version()) {
      version_.ClearToDefaultNoArena(_default_version_);
    }
    max_ahead_seconds_ = 0.3f;
    max_process_image_fps_ = 8;
    query_tf_inverval_seconds_ = 0.2f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TLPreprocessorSubnodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "TLPreprocessorSubnode"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_max_ahead_seconds;
        break;
      }

      // optional float max_ahead_seconds = 3 [default = 0.3];
      case 3: {
        if (tag == 29) {
         parse_max_ahead_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_ahead_seconds_)));
          set_has_max_ahead_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_process_image_fps;
        break;
      }

      // optional float max_process_image_fps = 4 [default = 8];
      case 4: {
        if (tag == 37) {
         parse_max_process_image_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_process_image_fps_)));
          set_has_max_process_image_fps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_query_tf_inverval_seconds;
        break;
      }

      // optional float query_tf_inverval_seconds = 5 [default = 0.2];
      case 5: {
        if (tag == 45) {
         parse_query_tf_inverval_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &query_tf_inverval_seconds_)));
          set_has_query_tf_inverval_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  return false;
#undef DO_
}

void TLPreprocessorSubnodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  // optional string name = 1 [default = "TLPreprocessorSubnode"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional float max_ahead_seconds = 3 [default = 0.3];
  if (has_max_ahead_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_ahead_seconds(), output);
  }

  // optional float max_process_image_fps = 4 [default = 8];
  if (has_max_process_image_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_process_image_fps(), output);
  }

  // optional float query_tf_inverval_seconds = 5 [default = 0.2];
  if (has_query_tf_inverval_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->query_tf_inverval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}

::google::protobuf::uint8* TLPreprocessorSubnodeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  // optional string name = 1 [default = "TLPreprocessorSubnode"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional float max_ahead_seconds = 3 [default = 0.3];
  if (has_max_ahead_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_ahead_seconds(), target);
  }

  // optional float max_process_image_fps = 4 [default = 8];
  if (has_max_process_image_fps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_process_image_fps(), target);
  }

  // optional float query_tf_inverval_seconds = 5 [default = 0.2];
  if (has_query_tf_inverval_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->query_tf_inverval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  return target;
}

int TLPreprocessorSubnodeConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1 [default = "TLPreprocessorSubnode"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional float max_ahead_seconds = 3 [default = 0.3];
    if (has_max_ahead_seconds()) {
      total_size += 1 + 4;
    }

    // optional float max_process_image_fps = 4 [default = 8];
    if (has_max_process_image_fps()) {
      total_size += 1 + 4;
    }

    // optional float query_tf_inverval_seconds = 5 [default = 0.2];
    if (has_query_tf_inverval_seconds()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLPreprocessorSubnodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TLPreprocessorSubnodeConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TLPreprocessorSubnodeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
    MergeFrom(*source);
  }
}

void TLPreprocessorSubnodeConfig::MergeFrom(const TLPreprocessorSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(_default_version_, from.version_);
    }
    if (from.has_max_ahead_seconds()) {
      set_max_ahead_seconds(from.max_ahead_seconds());
    }
    if (from.has_max_process_image_fps()) {
      set_max_process_image_fps(from.max_process_image_fps());
    }
    if (from.has_query_tf_inverval_seconds()) {
      set_query_tf_inverval_seconds(from.query_tf_inverval_seconds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TLPreprocessorSubnodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLPreprocessorSubnodeConfig::CopyFrom(const TLPreprocessorSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLPreprocessorSubnodeConfig::IsInitialized() const {

  return true;
}

void TLPreprocessorSubnodeConfig::Swap(TLPreprocessorSubnodeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLPreprocessorSubnodeConfig::InternalSwap(TLPreprocessorSubnodeConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(max_ahead_seconds_, other->max_ahead_seconds_);
  std::swap(max_process_image_fps_, other->max_process_image_fps_);
  std::swap(query_tf_inverval_seconds_, other->query_tf_inverval_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLPreprocessorSubnodeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLPreprocessorSubnodeConfig_descriptor_;
  metadata.reflection = TLPreprocessorSubnodeConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLPreprocessorSubnodeConfig

// optional string name = 1 [default = "TLPreprocessorSubnode"];
bool TLPreprocessorSubnodeConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TLPreprocessorSubnodeConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TLPreprocessorSubnodeConfig::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& TLPreprocessorSubnodeConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  return name_.GetNoArena(_default_name_);
}
 void TLPreprocessorSubnodeConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
 void TLPreprocessorSubnodeConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
 void TLPreprocessorSubnodeConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
 ::std::string* TLPreprocessorSubnodeConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* TLPreprocessorSubnodeConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void TLPreprocessorSubnodeConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
bool TLPreprocessorSubnodeConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void TLPreprocessorSubnodeConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void TLPreprocessorSubnodeConfig::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
 const ::std::string& TLPreprocessorSubnodeConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  return version_.GetNoArena(_default_version_);
}
 void TLPreprocessorSubnodeConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
 void TLPreprocessorSubnodeConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
 void TLPreprocessorSubnodeConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
 ::std::string* TLPreprocessorSubnodeConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  return version_.MutableNoArena(_default_version_);
}
 ::std::string* TLPreprocessorSubnodeConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
 void TLPreprocessorSubnodeConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}

// optional float max_ahead_seconds = 3 [default = 0.3];
bool TLPreprocessorSubnodeConfig::has_max_ahead_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_max_ahead_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
void TLPreprocessorSubnodeConfig::clear_has_max_ahead_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
void TLPreprocessorSubnodeConfig::clear_max_ahead_seconds() {
  max_ahead_seconds_ = 0.3f;
  clear_has_max_ahead_seconds();
}
 float TLPreprocessorSubnodeConfig::max_ahead_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_ahead_seconds)
  return max_ahead_seconds_;
}
 void TLPreprocessorSubnodeConfig::set_max_ahead_seconds(float value) {
  set_has_max_ahead_seconds();
  max_ahead_seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_ahead_seconds)
}

// optional float max_process_image_fps = 4 [default = 8];
bool TLPreprocessorSubnodeConfig::has_max_process_image_fps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_max_process_image_fps() {
  _has_bits_[0] |= 0x00000008u;
}
void TLPreprocessorSubnodeConfig::clear_has_max_process_image_fps() {
  _has_bits_[0] &= ~0x00000008u;
}
void TLPreprocessorSubnodeConfig::clear_max_process_image_fps() {
  max_process_image_fps_ = 8;
  clear_has_max_process_image_fps();
}
 float TLPreprocessorSubnodeConfig::max_process_image_fps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_process_image_fps)
  return max_process_image_fps_;
}
 void TLPreprocessorSubnodeConfig::set_max_process_image_fps(float value) {
  set_has_max_process_image_fps();
  max_process_image_fps_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_process_image_fps)
}

// optional float query_tf_inverval_seconds = 5 [default = 0.2];
bool TLPreprocessorSubnodeConfig::has_query_tf_inverval_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_query_tf_inverval_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
void TLPreprocessorSubnodeConfig::clear_has_query_tf_inverval_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
void TLPreprocessorSubnodeConfig::clear_query_tf_inverval_seconds() {
  query_tf_inverval_seconds_ = 0.2f;
  clear_has_query_tf_inverval_seconds();
}
 float TLPreprocessorSubnodeConfig::query_tf_inverval_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.query_tf_inverval_seconds)
  return query_tf_inverval_seconds_;
}
 void TLPreprocessorSubnodeConfig::set_query_tf_inverval_seconds(float value) {
  set_has_query_tf_inverval_seconds();
  query_tf_inverval_seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.query_tf_inverval_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* TLProcSubnodeConfig::_default_name_ = NULL;
::std::string* TLProcSubnodeConfig::_default_version_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLProcSubnodeConfig::kNameFieldNumber;
const int TLProcSubnodeConfig::kVersionFieldNumber;
const int TLProcSubnodeConfig::kImageBorderFieldNumber;
const int TLProcSubnodeConfig::kValidTsIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLProcSubnodeConfig::TLProcSubnodeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}

void TLProcSubnodeConfig::InitAsDefaultInstance() {
}

TLProcSubnodeConfig::TLProcSubnodeConfig(const TLProcSubnodeConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}

void TLProcSubnodeConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  version_.UnsafeSetDefault(_default_version_);
  image_border_ = 100;
  valid_ts_interval_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLProcSubnodeConfig::~TLProcSubnodeConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  SharedDtor();
}

void TLProcSubnodeConfig::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  version_.DestroyNoArena(_default_version_);
  if (this != default_instance_) {
  }
}

void TLProcSubnodeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLProcSubnodeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLProcSubnodeConfig_descriptor_;
}

const TLProcSubnodeConfig& TLProcSubnodeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto();
  return *default_instance_;
}

TLProcSubnodeConfig* TLProcSubnodeConfig::default_instance_ = NULL;

TLProcSubnodeConfig* TLProcSubnodeConfig::New(::google::protobuf::Arena* arena) const {
  TLProcSubnodeConfig* n = new TLProcSubnodeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLProcSubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    if (has_version()) {
      version_.ClearToDefaultNoArena(_default_version_);
    }
    image_border_ = 100;
    valid_ts_interval_ = 0.5f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TLProcSubnodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "TLProcSubnode"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_image_border;
        break;
      }

      // optional int32 image_border = 3 [default = 100];
      case 3: {
        if (tag == 24) {
         parse_image_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_border_)));
          set_has_image_border();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_valid_ts_interval;
        break;
      }

      // optional float valid_ts_interval = 4 [default = 0.5];
      case 4: {
        if (tag == 37) {
         parse_valid_ts_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &valid_ts_interval_)));
          set_has_valid_ts_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  return false;
#undef DO_
}

void TLProcSubnodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  // optional string name = 1 [default = "TLProcSubnode"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 image_border = 3 [default = 100];
  if (has_image_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->image_border(), output);
  }

  // optional float valid_ts_interval = 4 [default = 0.5];
  if (has_valid_ts_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->valid_ts_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}

::google::protobuf::uint8* TLProcSubnodeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  // optional string name = 1 [default = "TLProcSubnode"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 image_border = 3 [default = 100];
  if (has_image_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->image_border(), target);
  }

  // optional float valid_ts_interval = 4 [default = 0.5];
  if (has_valid_ts_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->valid_ts_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  return target;
}

int TLProcSubnodeConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1 [default = "TLProcSubnode"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 image_border = 3 [default = 100];
    if (has_image_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_border());
    }

    // optional float valid_ts_interval = 4 [default = 0.5];
    if (has_valid_ts_interval()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLProcSubnodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TLProcSubnodeConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TLProcSubnodeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
    MergeFrom(*source);
  }
}

void TLProcSubnodeConfig::MergeFrom(const TLProcSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(_default_version_, from.version_);
    }
    if (from.has_image_border()) {
      set_image_border(from.image_border());
    }
    if (from.has_valid_ts_interval()) {
      set_valid_ts_interval(from.valid_ts_interval());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TLProcSubnodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLProcSubnodeConfig::CopyFrom(const TLProcSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLProcSubnodeConfig::IsInitialized() const {

  return true;
}

void TLProcSubnodeConfig::Swap(TLProcSubnodeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLProcSubnodeConfig::InternalSwap(TLProcSubnodeConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(image_border_, other->image_border_);
  std::swap(valid_ts_interval_, other->valid_ts_interval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLProcSubnodeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLProcSubnodeConfig_descriptor_;
  metadata.reflection = TLProcSubnodeConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLProcSubnodeConfig

// optional string name = 1 [default = "TLProcSubnode"];
bool TLProcSubnodeConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TLProcSubnodeConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TLProcSubnodeConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TLProcSubnodeConfig::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& TLProcSubnodeConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  return name_.GetNoArena(_default_name_);
}
 void TLProcSubnodeConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
 void TLProcSubnodeConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
 void TLProcSubnodeConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
 ::std::string* TLProcSubnodeConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* TLProcSubnodeConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void TLProcSubnodeConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
bool TLProcSubnodeConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TLProcSubnodeConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void TLProcSubnodeConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void TLProcSubnodeConfig::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
 const ::std::string& TLProcSubnodeConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  return version_.GetNoArena(_default_version_);
}
 void TLProcSubnodeConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
 void TLProcSubnodeConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
 void TLProcSubnodeConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
 ::std::string* TLProcSubnodeConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  return version_.MutableNoArena(_default_version_);
}
 ::std::string* TLProcSubnodeConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
 void TLProcSubnodeConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}

// optional int32 image_border = 3 [default = 100];
bool TLProcSubnodeConfig::has_image_border() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TLProcSubnodeConfig::set_has_image_border() {
  _has_bits_[0] |= 0x00000004u;
}
void TLProcSubnodeConfig::clear_has_image_border() {
  _has_bits_[0] &= ~0x00000004u;
}
void TLProcSubnodeConfig::clear_image_border() {
  image_border_ = 100;
  clear_has_image_border();
}
 ::google::protobuf::int32 TLProcSubnodeConfig::image_border() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.image_border)
  return image_border_;
}
 void TLProcSubnodeConfig::set_image_border(::google::protobuf::int32 value) {
  set_has_image_border();
  image_border_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.image_border)
}

// optional float valid_ts_interval = 4 [default = 0.5];
bool TLProcSubnodeConfig::has_valid_ts_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TLProcSubnodeConfig::set_has_valid_ts_interval() {
  _has_bits_[0] |= 0x00000008u;
}
void TLProcSubnodeConfig::clear_has_valid_ts_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
void TLProcSubnodeConfig::clear_valid_ts_interval() {
  valid_ts_interval_ = 0.5f;
  clear_has_valid_ts_interval();
}
 float TLProcSubnodeConfig::valid_ts_interval() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.valid_ts_interval)
  return valid_ts_interval_;
}
 void TLProcSubnodeConfig::set_valid_ts_interval(float value) {
  set_has_valid_ts_interval();
  valid_ts_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.valid_ts_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubnodeConfig::kTlPreprocessorSubnodeConfigFieldNumber;
const int SubnodeConfig::kTlProcSubnodeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubnodeConfig::SubnodeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
}

void SubnodeConfig::InitAsDefaultInstance() {
  tl_preprocessor_subnode_config_ = const_cast< ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig*>(&::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::default_instance());
  tl_proc_subnode_config_ = const_cast< ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig*>(&::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::default_instance());
}

SubnodeConfig::SubnodeConfig(const SubnodeConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
}

void SubnodeConfig::SharedCtor() {
  _cached_size_ = 0;
  tl_preprocessor_subnode_config_ = NULL;
  tl_proc_subnode_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubnodeConfig::~SubnodeConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  SharedDtor();
}

void SubnodeConfig::SharedDtor() {
  if (this != default_instance_) {
    delete tl_preprocessor_subnode_config_;
    delete tl_proc_subnode_config_;
  }
}

void SubnodeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubnodeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubnodeConfig_descriptor_;
}

const SubnodeConfig& SubnodeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2fsubnode_5fconfig_2eproto();
  return *default_instance_;
}

SubnodeConfig* SubnodeConfig::default_instance_ = NULL;

SubnodeConfig* SubnodeConfig::New(::google::protobuf::Arena* arena) const {
  SubnodeConfig* n = new SubnodeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tl_preprocessor_subnode_config()) {
      if (tl_preprocessor_subnode_config_ != NULL) tl_preprocessor_subnode_config_->::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Clear();
    }
    if (has_tl_proc_subnode_config()) {
      if (tl_proc_subnode_config_ != NULL) tl_proc_subnode_config_->::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubnodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tl_preprocessor_subnode_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tl_proc_subnode_config;
        break;
      }

      // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
      case 2: {
        if (tag == 18) {
         parse_tl_proc_subnode_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tl_proc_subnode_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  return false;
#undef DO_
}

void SubnodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
  if (has_tl_preprocessor_subnode_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tl_preprocessor_subnode_config_, output);
  }

  // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
  if (has_tl_proc_subnode_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tl_proc_subnode_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
}

::google::protobuf::uint8* SubnodeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
  if (has_tl_preprocessor_subnode_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tl_preprocessor_subnode_config_, false, target);
  }

  // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
  if (has_tl_proc_subnode_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tl_proc_subnode_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  return target;
}

int SubnodeConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
    if (has_tl_preprocessor_subnode_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tl_preprocessor_subnode_config_);
    }

    // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
    if (has_tl_proc_subnode_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tl_proc_subnode_config_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubnodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubnodeConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubnodeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
    MergeFrom(*source);
  }
}

void SubnodeConfig::MergeFrom(const SubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tl_preprocessor_subnode_config()) {
      mutable_tl_preprocessor_subnode_config()->::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::MergeFrom(from.tl_preprocessor_subnode_config());
    }
    if (from.has_tl_proc_subnode_config()) {
      mutable_tl_proc_subnode_config()->::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::MergeFrom(from.tl_proc_subnode_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubnodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubnodeConfig::CopyFrom(const SubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnodeConfig::IsInitialized() const {

  return true;
}

void SubnodeConfig::Swap(SubnodeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubnodeConfig::InternalSwap(SubnodeConfig* other) {
  std::swap(tl_preprocessor_subnode_config_, other->tl_preprocessor_subnode_config_);
  std::swap(tl_proc_subnode_config_, other->tl_proc_subnode_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubnodeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubnodeConfig_descriptor_;
  metadata.reflection = SubnodeConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubnodeConfig

// optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
bool SubnodeConfig::has_tl_preprocessor_subnode_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubnodeConfig::set_has_tl_preprocessor_subnode_config() {
  _has_bits_[0] |= 0x00000001u;
}
void SubnodeConfig::clear_has_tl_preprocessor_subnode_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubnodeConfig::clear_tl_preprocessor_subnode_config() {
  if (tl_preprocessor_subnode_config_ != NULL) tl_preprocessor_subnode_config_->::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Clear();
  clear_has_tl_preprocessor_subnode_config();
}
const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig& SubnodeConfig::tl_preprocessor_subnode_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  return tl_preprocessor_subnode_config_ != NULL ? *tl_preprocessor_subnode_config_ : *default_instance_->tl_preprocessor_subnode_config_;
}
::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::mutable_tl_preprocessor_subnode_config() {
  set_has_tl_preprocessor_subnode_config();
  if (tl_preprocessor_subnode_config_ == NULL) {
    tl_preprocessor_subnode_config_ = new ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  return tl_preprocessor_subnode_config_;
}
::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::release_tl_preprocessor_subnode_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  clear_has_tl_preprocessor_subnode_config();
  ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* temp = tl_preprocessor_subnode_config_;
  tl_preprocessor_subnode_config_ = NULL;
  return temp;
}
void SubnodeConfig::set_allocated_tl_preprocessor_subnode_config(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* tl_preprocessor_subnode_config) {
  delete tl_preprocessor_subnode_config_;
  tl_preprocessor_subnode_config_ = tl_preprocessor_subnode_config;
  if (tl_preprocessor_subnode_config) {
    set_has_tl_preprocessor_subnode_config();
  } else {
    clear_has_tl_preprocessor_subnode_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
}

// optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
bool SubnodeConfig::has_tl_proc_subnode_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubnodeConfig::set_has_tl_proc_subnode_config() {
  _has_bits_[0] |= 0x00000002u;
}
void SubnodeConfig::clear_has_tl_proc_subnode_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubnodeConfig::clear_tl_proc_subnode_config() {
  if (tl_proc_subnode_config_ != NULL) tl_proc_subnode_config_->::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Clear();
  clear_has_tl_proc_subnode_config();
}
const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig& SubnodeConfig::tl_proc_subnode_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  return tl_proc_subnode_config_ != NULL ? *tl_proc_subnode_config_ : *default_instance_->tl_proc_subnode_config_;
}
::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::mutable_tl_proc_subnode_config() {
  set_has_tl_proc_subnode_config();
  if (tl_proc_subnode_config_ == NULL) {
    tl_proc_subnode_config_ = new ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  return tl_proc_subnode_config_;
}
::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::release_tl_proc_subnode_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  clear_has_tl_proc_subnode_config();
  ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* temp = tl_proc_subnode_config_;
  tl_proc_subnode_config_ = NULL;
  return temp;
}
void SubnodeConfig::set_allocated_tl_proc_subnode_config(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* tl_proc_subnode_config) {
  delete tl_proc_subnode_config_;
  tl_proc_subnode_config_ = tl_proc_subnode_config;
  if (tl_proc_subnode_config) {
    set_has_tl_proc_subnode_config();
  } else {
    clear_has_tl_proc_subnode_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace subnode_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
