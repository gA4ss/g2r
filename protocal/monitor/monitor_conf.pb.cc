// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor/monitor_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monitor/monitor_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace monitor {

namespace {

const ::google::protobuf::Descriptor* ProcessConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceConf_DirSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceConf_DirSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorConf_ModuleConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorConf_ModuleConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorConf_HardwareConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorConf_HardwareConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto() {
  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "monitor/monitor_conf.proto");
  GOOGLE_CHECK(file != NULL);
  ProcessConf_descriptor_ = file->message_type(0);
  static const int ProcessConf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessConf, process_cmd_keywords_),
  };
  ProcessConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProcessConf_descriptor_,
      ProcessConf::default_instance_,
      ProcessConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProcessConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessConf, _internal_metadata_),
      -1);
  ProcessStatus_descriptor_ = file->message_type(1);
  static const int ProcessStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStatus, running_),
  };
  ProcessStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProcessStatus_descriptor_,
      ProcessStatus::default_instance_,
      ProcessStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProcessStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStatus, _internal_metadata_),
      -1);
  TopicConf_descriptor_ = file->message_type(2);
  static const int TopicConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicConf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicConf, acceptable_delay_),
  };
  TopicConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicConf_descriptor_,
      TopicConf::default_instance_,
      TopicConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicConf, _internal_metadata_),
      -1);
  TopicStatus_descriptor_ = file->message_type(3);
  static const int TopicStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicStatus, message_delay_),
  };
  TopicStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicStatus_descriptor_,
      TopicStatus::default_instance_,
      TopicStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicStatus, _internal_metadata_),
      -1);
  ResourceConf_descriptor_ = file->message_type(4);
  static const int ResourceConf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceConf, dir_spaces_),
  };
  ResourceConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceConf_descriptor_,
      ResourceConf::default_instance_,
      ResourceConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResourceConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceConf, _internal_metadata_),
      -1);
  ResourceConf_DirSpace_descriptor_ = ResourceConf_descriptor_->nested_type(0);
  static const int ResourceConf_DirSpace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceConf_DirSpace, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceConf_DirSpace, min_available_gb_),
  };
  ResourceConf_DirSpace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceConf_DirSpace_descriptor_,
      ResourceConf_DirSpace::default_instance_,
      ResourceConf_DirSpace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceConf_DirSpace, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResourceConf_DirSpace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceConf_DirSpace, _internal_metadata_),
      -1);
  MonitorConf_descriptor_ = file->message_type(5);
  static const int MonitorConf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf, modules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf, online_report_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf, resource_conf_),
  };
  MonitorConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MonitorConf_descriptor_,
      MonitorConf::default_instance_,
      MonitorConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(MonitorConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf, _internal_metadata_),
      -1);
  MonitorConf_ModuleConf_descriptor_ = MonitorConf_descriptor_->nested_type(0);
  static const int MonitorConf_ModuleConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_ModuleConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_ModuleConf, process_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_ModuleConf, topic_conf_),
  };
  MonitorConf_ModuleConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MonitorConf_ModuleConf_descriptor_,
      MonitorConf_ModuleConf::default_instance_,
      MonitorConf_ModuleConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_ModuleConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(MonitorConf_ModuleConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_ModuleConf, _internal_metadata_),
      -1);
  MonitorConf_HardwareConf_descriptor_ = MonitorConf_descriptor_->nested_type(1);
  static const int MonitorConf_HardwareConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_HardwareConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_HardwareConf, topic_conf_),
  };
  MonitorConf_HardwareConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MonitorConf_HardwareConf_descriptor_,
      MonitorConf_HardwareConf::default_instance_,
      MonitorConf_HardwareConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_HardwareConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(MonitorConf_HardwareConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorConf_HardwareConf, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProcessConf_descriptor_, &ProcessConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProcessStatus_descriptor_, &ProcessStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicConf_descriptor_, &TopicConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicStatus_descriptor_, &TopicStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceConf_descriptor_, &ResourceConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceConf_DirSpace_descriptor_, &ResourceConf_DirSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MonitorConf_descriptor_, &MonitorConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MonitorConf_ModuleConf_descriptor_, &MonitorConf_ModuleConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MonitorConf_HardwareConf_descriptor_, &MonitorConf_HardwareConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto() {
  delete ProcessConf::default_instance_;
  delete ProcessConf_reflection_;
  delete ProcessStatus::default_instance_;
  delete ProcessStatus_reflection_;
  delete TopicConf::default_instance_;
  delete TopicConf_reflection_;
  delete TopicStatus::default_instance_;
  delete TopicStatus_reflection_;
  delete ResourceConf::default_instance_;
  delete ResourceConf_reflection_;
  delete ResourceConf_DirSpace::default_instance_;
  delete ResourceConf_DirSpace_reflection_;
  delete MonitorConf::default_instance_;
  delete MonitorConf_reflection_;
  delete MonitorConf_ModuleConf::default_instance_;
  delete MonitorConf_ModuleConf_reflection_;
  delete MonitorConf_HardwareConf::default_instance_;
  delete MonitorConf_HardwareConf_reflection_;
}

void protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::adapter::protobuf_AddDesc_common_2fadapters_2fadapter_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032monitor/monitor_conf.proto\022\016apollo.mon"
    "itor\032$common/adapters/adapter_config.pro"
    "to\"+\n\013ProcessConf\022\034\n\024process_cmd_keyword"
    "s\030\001 \003(\t\" \n\rProcessStatus\022\017\n\007running\030\001 \001("
    "\010\"h\n\tTopicConf\022>\n\004type\030\001 \001(\01620.apollo.co"
    "mmon.adapter.AdapterConfig.MessageType\022\033"
    "\n\020acceptable_delay\030\002 \001(\001:\0013\"$\n\013TopicStat"
    "us\022\025\n\rmessage_delay\030\001 \001(\001\"}\n\014ResourceCon"
    "f\0229\n\ndir_spaces\030\001 \003(\0132%.apollo.monitor.R"
    "esourceConf.DirSpace\0322\n\010DirSpace\022\014\n\004path"
    "\030\001 \001(\t\022\030\n\020min_available_gb\030\002 \001(\005\"\242\003\n\013Mon"
    "itorConf\0227\n\007modules\030\001 \003(\0132&.apollo.monit"
    "or.MonitorConf.ModuleConf\022:\n\010hardware\030\002 "
    "\003(\0132(.apollo.monitor.MonitorConf.Hardwar"
    "eConf\022\036\n\026online_report_endpoint\030\003 \001(\t\0223\n"
    "\rresource_conf\030\004 \001(\0132\034.apollo.monitor.Re"
    "sourceConf\032|\n\nModuleConf\022\014\n\004name\030\001 \001(\t\0221"
    "\n\014process_conf\030\002 \001(\0132\033.apollo.monitor.Pr"
    "ocessConf\022-\n\ntopic_conf\030\003 \001(\0132\031.apollo.m"
    "onitor.TopicConf\032K\n\014HardwareConf\022\014\n\004name"
    "\030\001 \001(\t\022-\n\ntopic_conf\030\002 \001(\0132\031.apollo.moni"
    "tor.TopicConf", 853);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monitor/monitor_conf.proto", &protobuf_RegisterTypes);
  ProcessConf::default_instance_ = new ProcessConf();
  ProcessStatus::default_instance_ = new ProcessStatus();
  TopicConf::default_instance_ = new TopicConf();
  TopicStatus::default_instance_ = new TopicStatus();
  ResourceConf::default_instance_ = new ResourceConf();
  ResourceConf_DirSpace::default_instance_ = new ResourceConf_DirSpace();
  MonitorConf::default_instance_ = new MonitorConf();
  MonitorConf_ModuleConf::default_instance_ = new MonitorConf_ModuleConf();
  MonitorConf_HardwareConf::default_instance_ = new MonitorConf_HardwareConf();
  ProcessConf::default_instance_->InitAsDefaultInstance();
  ProcessStatus::default_instance_->InitAsDefaultInstance();
  TopicConf::default_instance_->InitAsDefaultInstance();
  TopicStatus::default_instance_->InitAsDefaultInstance();
  ResourceConf::default_instance_->InitAsDefaultInstance();
  ResourceConf_DirSpace::default_instance_->InitAsDefaultInstance();
  MonitorConf::default_instance_->InitAsDefaultInstance();
  MonitorConf_ModuleConf::default_instance_->InitAsDefaultInstance();
  MonitorConf_HardwareConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_monitor_2fmonitor_5fconf_2eproto {
  StaticDescriptorInitializer_monitor_2fmonitor_5fconf_2eproto() {
    protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  }
} static_descriptor_initializer_monitor_2fmonitor_5fconf_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessConf::kProcessCmdKeywordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessConf::ProcessConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.ProcessConf)
}

void ProcessConf::InitAsDefaultInstance() {
}

ProcessConf::ProcessConf(const ProcessConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.ProcessConf)
}

void ProcessConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessConf::~ProcessConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.ProcessConf)
  SharedDtor();
}

void ProcessConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessConf_descriptor_;
}

const ProcessConf& ProcessConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

ProcessConf* ProcessConf::default_instance_ = NULL;

ProcessConf* ProcessConf::New(::google::protobuf::Arena* arena) const {
  ProcessConf* n = new ProcessConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.ProcessConf)
  process_cmd_keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProcessConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.ProcessConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string process_cmd_keywords = 1;
      case 1: {
        if (tag == 10) {
         parse_process_cmd_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_process_cmd_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_cmd_keywords(this->process_cmd_keywords_size() - 1).data(),
            this->process_cmd_keywords(this->process_cmd_keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.monitor.ProcessConf.process_cmd_keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_process_cmd_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.ProcessConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.ProcessConf)
  return false;
#undef DO_
}

void ProcessConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.ProcessConf)
  // repeated string process_cmd_keywords = 1;
  for (int i = 0; i < this->process_cmd_keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_cmd_keywords(i).data(), this->process_cmd_keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.ProcessConf.process_cmd_keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process_cmd_keywords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.ProcessConf)
}

::google::protobuf::uint8* ProcessConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.ProcessConf)
  // repeated string process_cmd_keywords = 1;
  for (int i = 0; i < this->process_cmd_keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_cmd_keywords(i).data(), this->process_cmd_keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.ProcessConf.process_cmd_keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->process_cmd_keywords(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.ProcessConf)
  return target;
}

int ProcessConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.ProcessConf)
  int total_size = 0;

  // repeated string process_cmd_keywords = 1;
  total_size += 1 * this->process_cmd_keywords_size();
  for (int i = 0; i < this->process_cmd_keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->process_cmd_keywords(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.ProcessConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProcessConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.ProcessConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.ProcessConf)
    MergeFrom(*source);
  }
}

void ProcessConf::MergeFrom(const ProcessConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.ProcessConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  process_cmd_keywords_.MergeFrom(from.process_cmd_keywords_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProcessConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.ProcessConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessConf::CopyFrom(const ProcessConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.ProcessConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessConf::IsInitialized() const {

  return true;
}

void ProcessConf::Swap(ProcessConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessConf::InternalSwap(ProcessConf* other) {
  process_cmd_keywords_.UnsafeArenaSwap(&other->process_cmd_keywords_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessConf_descriptor_;
  metadata.reflection = ProcessConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessConf

// repeated string process_cmd_keywords = 1;
int ProcessConf::process_cmd_keywords_size() const {
  return process_cmd_keywords_.size();
}
void ProcessConf::clear_process_cmd_keywords() {
  process_cmd_keywords_.Clear();
}
 const ::std::string& ProcessConf::process_cmd_keywords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_.Get(index);
}
 ::std::string* ProcessConf::mutable_process_cmd_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_.Mutable(index);
}
 void ProcessConf::set_process_cmd_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.monitor.ProcessConf.process_cmd_keywords)
  process_cmd_keywords_.Mutable(index)->assign(value);
}
 void ProcessConf::set_process_cmd_keywords(int index, const char* value) {
  process_cmd_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.monitor.ProcessConf.process_cmd_keywords)
}
 void ProcessConf::set_process_cmd_keywords(int index, const char* value, size_t size) {
  process_cmd_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.ProcessConf.process_cmd_keywords)
}
 ::std::string* ProcessConf::add_process_cmd_keywords() {
  // @@protoc_insertion_point(field_add_mutable:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_.Add();
}
 void ProcessConf::add_process_cmd_keywords(const ::std::string& value) {
  process_cmd_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.monitor.ProcessConf.process_cmd_keywords)
}
 void ProcessConf::add_process_cmd_keywords(const char* value) {
  process_cmd_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.monitor.ProcessConf.process_cmd_keywords)
}
 void ProcessConf::add_process_cmd_keywords(const char* value, size_t size) {
  process_cmd_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.monitor.ProcessConf.process_cmd_keywords)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessConf::process_cmd_keywords() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessConf::mutable_process_cmd_keywords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.ProcessConf.process_cmd_keywords)
  return &process_cmd_keywords_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessStatus::kRunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessStatus::ProcessStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.ProcessStatus)
}

void ProcessStatus::InitAsDefaultInstance() {
}

ProcessStatus::ProcessStatus(const ProcessStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.ProcessStatus)
}

void ProcessStatus::SharedCtor() {
  _cached_size_ = 0;
  running_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessStatus::~ProcessStatus() {
  // @@protoc_insertion_point(destructor:apollo.monitor.ProcessStatus)
  SharedDtor();
}

void ProcessStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessStatus_descriptor_;
}

const ProcessStatus& ProcessStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

ProcessStatus* ProcessStatus::default_instance_ = NULL;

ProcessStatus* ProcessStatus::New(::google::protobuf::Arena* arena) const {
  ProcessStatus* n = new ProcessStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.ProcessStatus)
  running_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProcessStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.ProcessStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool running = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
          set_has_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.ProcessStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.ProcessStatus)
  return false;
#undef DO_
}

void ProcessStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.ProcessStatus)
  // optional bool running = 1;
  if (has_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->running(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.ProcessStatus)
}

::google::protobuf::uint8* ProcessStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.ProcessStatus)
  // optional bool running = 1;
  if (has_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->running(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.ProcessStatus)
  return target;
}

int ProcessStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.ProcessStatus)
  int total_size = 0;

  // optional bool running = 1;
  if (has_running()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.ProcessStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProcessStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.ProcessStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.ProcessStatus)
    MergeFrom(*source);
  }
}

void ProcessStatus::MergeFrom(const ProcessStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.ProcessStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_running()) {
      set_running(from.running());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProcessStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.ProcessStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessStatus::CopyFrom(const ProcessStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.ProcessStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStatus::IsInitialized() const {

  return true;
}

void ProcessStatus::Swap(ProcessStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessStatus::InternalSwap(ProcessStatus* other) {
  std::swap(running_, other->running_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessStatus_descriptor_;
  metadata.reflection = ProcessStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessStatus

// optional bool running = 1;
bool ProcessStatus::has_running() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProcessStatus::set_has_running() {
  _has_bits_[0] |= 0x00000001u;
}
void ProcessStatus::clear_has_running() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProcessStatus::clear_running() {
  running_ = false;
  clear_has_running();
}
 bool ProcessStatus::running() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ProcessStatus.running)
  return running_;
}
 void ProcessStatus::set_running(bool value) {
  set_has_running();
  running_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.ProcessStatus.running)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicConf::kTypeFieldNumber;
const int TopicConf::kAcceptableDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicConf::TopicConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.TopicConf)
}

void TopicConf::InitAsDefaultInstance() {
}

TopicConf::TopicConf(const TopicConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.TopicConf)
}

void TopicConf::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  acceptable_delay_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicConf::~TopicConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.TopicConf)
  SharedDtor();
}

void TopicConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicConf_descriptor_;
}

const TopicConf& TopicConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

TopicConf* TopicConf::default_instance_ = NULL;

TopicConf* TopicConf::New(::google::protobuf::Arena* arena) const {
  TopicConf* n = new TopicConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.TopicConf)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    acceptable_delay_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.TopicConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::adapter::AdapterConfig_MessageType_IsValid(value)) {
            set_type(static_cast< ::apollo::common::adapter::AdapterConfig_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_acceptable_delay;
        break;
      }

      // optional double acceptable_delay = 2 [default = 3];
      case 2: {
        if (tag == 17) {
         parse_acceptable_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceptable_delay_)));
          set_has_acceptable_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.TopicConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.TopicConf)
  return false;
#undef DO_
}

void TopicConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.TopicConf)
  // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double acceptable_delay = 2 [default = 3];
  if (has_acceptable_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acceptable_delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.TopicConf)
}

::google::protobuf::uint8* TopicConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.TopicConf)
  // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double acceptable_delay = 2 [default = 3];
  if (has_acceptable_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acceptable_delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.TopicConf)
  return target;
}

int TopicConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.TopicConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double acceptable_delay = 2 [default = 3];
    if (has_acceptable_delay()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.TopicConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.TopicConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.TopicConf)
    MergeFrom(*source);
  }
}

void TopicConf::MergeFrom(const TopicConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.TopicConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_acceptable_delay()) {
      set_acceptable_delay(from.acceptable_delay());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.TopicConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicConf::CopyFrom(const TopicConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.TopicConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicConf::IsInitialized() const {

  return true;
}

void TopicConf::Swap(TopicConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicConf::InternalSwap(TopicConf* other) {
  std::swap(type_, other->type_);
  std::swap(acceptable_delay_, other->acceptable_delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicConf_descriptor_;
  metadata.reflection = TopicConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicConf

// optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
bool TopicConf::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopicConf::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void TopicConf::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopicConf::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::common::adapter::AdapterConfig_MessageType TopicConf::type() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicConf.type)
  return static_cast< ::apollo::common::adapter::AdapterConfig_MessageType >(type_);
}
 void TopicConf::set_type(::apollo::common::adapter::AdapterConfig_MessageType value) {
  assert(::apollo::common::adapter::AdapterConfig_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicConf.type)
}

// optional double acceptable_delay = 2 [default = 3];
bool TopicConf::has_acceptable_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopicConf::set_has_acceptable_delay() {
  _has_bits_[0] |= 0x00000002u;
}
void TopicConf::clear_has_acceptable_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopicConf::clear_acceptable_delay() {
  acceptable_delay_ = 3;
  clear_has_acceptable_delay();
}
 double TopicConf::acceptable_delay() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicConf.acceptable_delay)
  return acceptable_delay_;
}
 void TopicConf::set_acceptable_delay(double value) {
  set_has_acceptable_delay();
  acceptable_delay_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicConf.acceptable_delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicStatus::kMessageDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicStatus::TopicStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.TopicStatus)
}

void TopicStatus::InitAsDefaultInstance() {
}

TopicStatus::TopicStatus(const TopicStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.TopicStatus)
}

void TopicStatus::SharedCtor() {
  _cached_size_ = 0;
  message_delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicStatus::~TopicStatus() {
  // @@protoc_insertion_point(destructor:apollo.monitor.TopicStatus)
  SharedDtor();
}

void TopicStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicStatus_descriptor_;
}

const TopicStatus& TopicStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

TopicStatus* TopicStatus::default_instance_ = NULL;

TopicStatus* TopicStatus::New(::google::protobuf::Arena* arena) const {
  TopicStatus* n = new TopicStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.TopicStatus)
  message_delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.TopicStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_delay = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_delay_)));
          set_has_message_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.TopicStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.TopicStatus)
  return false;
#undef DO_
}

void TopicStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.TopicStatus)
  // optional double message_delay = 1;
  if (has_message_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.TopicStatus)
}

::google::protobuf::uint8* TopicStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.TopicStatus)
  // optional double message_delay = 1;
  if (has_message_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.TopicStatus)
  return target;
}

int TopicStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.TopicStatus)
  int total_size = 0;

  // optional double message_delay = 1;
  if (has_message_delay()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.TopicStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.TopicStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.TopicStatus)
    MergeFrom(*source);
  }
}

void TopicStatus::MergeFrom(const TopicStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.TopicStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_delay()) {
      set_message_delay(from.message_delay());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.TopicStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicStatus::CopyFrom(const TopicStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.TopicStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicStatus::IsInitialized() const {

  return true;
}

void TopicStatus::Swap(TopicStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicStatus::InternalSwap(TopicStatus* other) {
  std::swap(message_delay_, other->message_delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicStatus_descriptor_;
  metadata.reflection = TopicStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicStatus

// optional double message_delay = 1;
bool TopicStatus::has_message_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopicStatus::set_has_message_delay() {
  _has_bits_[0] |= 0x00000001u;
}
void TopicStatus::clear_has_message_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopicStatus::clear_message_delay() {
  message_delay_ = 0;
  clear_has_message_delay();
}
 double TopicStatus::message_delay() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicStatus.message_delay)
  return message_delay_;
}
 void TopicStatus::set_message_delay(double value) {
  set_has_message_delay();
  message_delay_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicStatus.message_delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceConf_DirSpace::kPathFieldNumber;
const int ResourceConf_DirSpace::kMinAvailableGbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceConf_DirSpace::ResourceConf_DirSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.ResourceConf.DirSpace)
}

void ResourceConf_DirSpace::InitAsDefaultInstance() {
}

ResourceConf_DirSpace::ResourceConf_DirSpace(const ResourceConf_DirSpace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.ResourceConf.DirSpace)
}

void ResourceConf_DirSpace::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_available_gb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceConf_DirSpace::~ResourceConf_DirSpace() {
  // @@protoc_insertion_point(destructor:apollo.monitor.ResourceConf.DirSpace)
  SharedDtor();
}

void ResourceConf_DirSpace::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResourceConf_DirSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceConf_DirSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceConf_DirSpace_descriptor_;
}

const ResourceConf_DirSpace& ResourceConf_DirSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

ResourceConf_DirSpace* ResourceConf_DirSpace::default_instance_ = NULL;

ResourceConf_DirSpace* ResourceConf_DirSpace::New(::google::protobuf::Arena* arena) const {
  ResourceConf_DirSpace* n = new ResourceConf_DirSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceConf_DirSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.ResourceConf.DirSpace)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    min_available_gb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResourceConf_DirSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.ResourceConf.DirSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.monitor.ResourceConf.DirSpace.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_available_gb;
        break;
      }

      // optional int32 min_available_gb = 2;
      case 2: {
        if (tag == 16) {
         parse_min_available_gb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_available_gb_)));
          set_has_min_available_gb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.ResourceConf.DirSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.ResourceConf.DirSpace)
  return false;
#undef DO_
}

void ResourceConf_DirSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.ResourceConf.DirSpace)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.ResourceConf.DirSpace.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional int32 min_available_gb = 2;
  if (has_min_available_gb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_available_gb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.ResourceConf.DirSpace)
}

::google::protobuf::uint8* ResourceConf_DirSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.ResourceConf.DirSpace)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.ResourceConf.DirSpace.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional int32 min_available_gb = 2;
  if (has_min_available_gb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_available_gb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.ResourceConf.DirSpace)
  return target;
}

int ResourceConf_DirSpace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.ResourceConf.DirSpace)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional int32 min_available_gb = 2;
    if (has_min_available_gb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_available_gb());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceConf_DirSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.ResourceConf.DirSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResourceConf_DirSpace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceConf_DirSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.ResourceConf.DirSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.ResourceConf.DirSpace)
    MergeFrom(*source);
  }
}

void ResourceConf_DirSpace::MergeFrom(const ResourceConf_DirSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.ResourceConf.DirSpace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_min_available_gb()) {
      set_min_available_gb(from.min_available_gb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResourceConf_DirSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.ResourceConf.DirSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceConf_DirSpace::CopyFrom(const ResourceConf_DirSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.ResourceConf.DirSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceConf_DirSpace::IsInitialized() const {

  return true;
}

void ResourceConf_DirSpace::Swap(ResourceConf_DirSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceConf_DirSpace::InternalSwap(ResourceConf_DirSpace* other) {
  path_.Swap(&other->path_);
  std::swap(min_available_gb_, other->min_available_gb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceConf_DirSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceConf_DirSpace_descriptor_;
  metadata.reflection = ResourceConf_DirSpace_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceConf::kDirSpacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceConf::ResourceConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.ResourceConf)
}

void ResourceConf::InitAsDefaultInstance() {
}

ResourceConf::ResourceConf(const ResourceConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.ResourceConf)
}

void ResourceConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceConf::~ResourceConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.ResourceConf)
  SharedDtor();
}

void ResourceConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceConf_descriptor_;
}

const ResourceConf& ResourceConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

ResourceConf* ResourceConf::default_instance_ = NULL;

ResourceConf* ResourceConf::New(::google::protobuf::Arena* arena) const {
  ResourceConf* n = new ResourceConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.ResourceConf)
  dir_spaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResourceConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.ResourceConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.monitor.ResourceConf.DirSpace dir_spaces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dir_spaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dir_spaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_dir_spaces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.ResourceConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.ResourceConf)
  return false;
#undef DO_
}

void ResourceConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.ResourceConf)
  // repeated .apollo.monitor.ResourceConf.DirSpace dir_spaces = 1;
  for (unsigned int i = 0, n = this->dir_spaces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dir_spaces(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.ResourceConf)
}

::google::protobuf::uint8* ResourceConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.ResourceConf)
  // repeated .apollo.monitor.ResourceConf.DirSpace dir_spaces = 1;
  for (unsigned int i = 0, n = this->dir_spaces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->dir_spaces(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.ResourceConf)
  return target;
}

int ResourceConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.ResourceConf)
  int total_size = 0;

  // repeated .apollo.monitor.ResourceConf.DirSpace dir_spaces = 1;
  total_size += 1 * this->dir_spaces_size();
  for (int i = 0; i < this->dir_spaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dir_spaces(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.ResourceConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResourceConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.ResourceConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.ResourceConf)
    MergeFrom(*source);
  }
}

void ResourceConf::MergeFrom(const ResourceConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.ResourceConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dir_spaces_.MergeFrom(from.dir_spaces_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResourceConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.ResourceConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceConf::CopyFrom(const ResourceConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.ResourceConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceConf::IsInitialized() const {

  return true;
}

void ResourceConf::Swap(ResourceConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceConf::InternalSwap(ResourceConf* other) {
  dir_spaces_.UnsafeArenaSwap(&other->dir_spaces_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceConf_descriptor_;
  metadata.reflection = ResourceConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceConf_DirSpace

// optional string path = 1;
bool ResourceConf_DirSpace::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResourceConf_DirSpace::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void ResourceConf_DirSpace::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResourceConf_DirSpace::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& ResourceConf_DirSpace::path() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ResourceConf.DirSpace.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceConf_DirSpace::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.ResourceConf.DirSpace.path)
}
 void ResourceConf_DirSpace::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.ResourceConf.DirSpace.path)
}
 void ResourceConf_DirSpace::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.ResourceConf.DirSpace.path)
}
 ::std::string* ResourceConf_DirSpace::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ResourceConf.DirSpace.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceConf_DirSpace::release_path() {
  // @@protoc_insertion_point(field_release:apollo.monitor.ResourceConf.DirSpace.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceConf_DirSpace::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.ResourceConf.DirSpace.path)
}

// optional int32 min_available_gb = 2;
bool ResourceConf_DirSpace::has_min_available_gb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResourceConf_DirSpace::set_has_min_available_gb() {
  _has_bits_[0] |= 0x00000002u;
}
void ResourceConf_DirSpace::clear_has_min_available_gb() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResourceConf_DirSpace::clear_min_available_gb() {
  min_available_gb_ = 0;
  clear_has_min_available_gb();
}
 ::google::protobuf::int32 ResourceConf_DirSpace::min_available_gb() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ResourceConf.DirSpace.min_available_gb)
  return min_available_gb_;
}
 void ResourceConf_DirSpace::set_min_available_gb(::google::protobuf::int32 value) {
  set_has_min_available_gb();
  min_available_gb_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.ResourceConf.DirSpace.min_available_gb)
}

// -------------------------------------------------------------------

// ResourceConf

// repeated .apollo.monitor.ResourceConf.DirSpace dir_spaces = 1;
int ResourceConf::dir_spaces_size() const {
  return dir_spaces_.size();
}
void ResourceConf::clear_dir_spaces() {
  dir_spaces_.Clear();
}
const ::apollo::monitor::ResourceConf_DirSpace& ResourceConf::dir_spaces(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_.Get(index);
}
::apollo::monitor::ResourceConf_DirSpace* ResourceConf::mutable_dir_spaces(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_.Mutable(index);
}
::apollo::monitor::ResourceConf_DirSpace* ResourceConf::add_dir_spaces() {
  // @@protoc_insertion_point(field_add:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::monitor::ResourceConf_DirSpace >*
ResourceConf::mutable_dir_spaces() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.ResourceConf.dir_spaces)
  return &dir_spaces_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::ResourceConf_DirSpace >&
ResourceConf::dir_spaces() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorConf_ModuleConf::kNameFieldNumber;
const int MonitorConf_ModuleConf::kProcessConfFieldNumber;
const int MonitorConf_ModuleConf::kTopicConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorConf_ModuleConf::MonitorConf_ModuleConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.MonitorConf.ModuleConf)
}

void MonitorConf_ModuleConf::InitAsDefaultInstance() {
  process_conf_ = const_cast< ::apollo::monitor::ProcessConf*>(&::apollo::monitor::ProcessConf::default_instance());
  topic_conf_ = const_cast< ::apollo::monitor::TopicConf*>(&::apollo::monitor::TopicConf::default_instance());
}

MonitorConf_ModuleConf::MonitorConf_ModuleConf(const MonitorConf_ModuleConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.MonitorConf.ModuleConf)
}

void MonitorConf_ModuleConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_conf_ = NULL;
  topic_conf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorConf_ModuleConf::~MonitorConf_ModuleConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.MonitorConf.ModuleConf)
  SharedDtor();
}

void MonitorConf_ModuleConf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete process_conf_;
    delete topic_conf_;
  }
}

void MonitorConf_ModuleConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorConf_ModuleConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorConf_ModuleConf_descriptor_;
}

const MonitorConf_ModuleConf& MonitorConf_ModuleConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

MonitorConf_ModuleConf* MonitorConf_ModuleConf::default_instance_ = NULL;

MonitorConf_ModuleConf* MonitorConf_ModuleConf::New(::google::protobuf::Arena* arena) const {
  MonitorConf_ModuleConf* n = new MonitorConf_ModuleConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonitorConf_ModuleConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.MonitorConf.ModuleConf)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_process_conf()) {
      if (process_conf_ != NULL) process_conf_->::apollo::monitor::ProcessConf::Clear();
    }
    if (has_topic_conf()) {
      if (topic_conf_ != NULL) topic_conf_->::apollo::monitor::TopicConf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MonitorConf_ModuleConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.MonitorConf.ModuleConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.monitor.MonitorConf.ModuleConf.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process_conf;
        break;
      }

      // optional .apollo.monitor.ProcessConf process_conf = 2;
      case 2: {
        if (tag == 18) {
         parse_process_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_conf;
        break;
      }

      // optional .apollo.monitor.TopicConf topic_conf = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.MonitorConf.ModuleConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.MonitorConf.ModuleConf)
  return false;
#undef DO_
}

void MonitorConf_ModuleConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.MonitorConf.ModuleConf)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.ModuleConf.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .apollo.monitor.ProcessConf process_conf = 2;
  if (has_process_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->process_conf_, output);
  }

  // optional .apollo.monitor.TopicConf topic_conf = 3;
  if (has_topic_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->topic_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.MonitorConf.ModuleConf)
}

::google::protobuf::uint8* MonitorConf_ModuleConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.MonitorConf.ModuleConf)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.ModuleConf.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .apollo.monitor.ProcessConf process_conf = 2;
  if (has_process_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->process_conf_, false, target);
  }

  // optional .apollo.monitor.TopicConf topic_conf = 3;
  if (has_topic_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->topic_conf_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.MonitorConf.ModuleConf)
  return target;
}

int MonitorConf_ModuleConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.MonitorConf.ModuleConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.monitor.ProcessConf process_conf = 2;
    if (has_process_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->process_conf_);
    }

    // optional .apollo.monitor.TopicConf topic_conf = 3;
    if (has_topic_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->topic_conf_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorConf_ModuleConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.MonitorConf.ModuleConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MonitorConf_ModuleConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MonitorConf_ModuleConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.MonitorConf.ModuleConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.MonitorConf.ModuleConf)
    MergeFrom(*source);
  }
}

void MonitorConf_ModuleConf::MergeFrom(const MonitorConf_ModuleConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.MonitorConf.ModuleConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_process_conf()) {
      mutable_process_conf()->::apollo::monitor::ProcessConf::MergeFrom(from.process_conf());
    }
    if (from.has_topic_conf()) {
      mutable_topic_conf()->::apollo::monitor::TopicConf::MergeFrom(from.topic_conf());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MonitorConf_ModuleConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.MonitorConf.ModuleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorConf_ModuleConf::CopyFrom(const MonitorConf_ModuleConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.MonitorConf.ModuleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorConf_ModuleConf::IsInitialized() const {

  return true;
}

void MonitorConf_ModuleConf::Swap(MonitorConf_ModuleConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorConf_ModuleConf::InternalSwap(MonitorConf_ModuleConf* other) {
  name_.Swap(&other->name_);
  std::swap(process_conf_, other->process_conf_);
  std::swap(topic_conf_, other->topic_conf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MonitorConf_ModuleConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorConf_ModuleConf_descriptor_;
  metadata.reflection = MonitorConf_ModuleConf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorConf_HardwareConf::kNameFieldNumber;
const int MonitorConf_HardwareConf::kTopicConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorConf_HardwareConf::MonitorConf_HardwareConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.MonitorConf.HardwareConf)
}

void MonitorConf_HardwareConf::InitAsDefaultInstance() {
  topic_conf_ = const_cast< ::apollo::monitor::TopicConf*>(&::apollo::monitor::TopicConf::default_instance());
}

MonitorConf_HardwareConf::MonitorConf_HardwareConf(const MonitorConf_HardwareConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.MonitorConf.HardwareConf)
}

void MonitorConf_HardwareConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_conf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorConf_HardwareConf::~MonitorConf_HardwareConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.MonitorConf.HardwareConf)
  SharedDtor();
}

void MonitorConf_HardwareConf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete topic_conf_;
  }
}

void MonitorConf_HardwareConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorConf_HardwareConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorConf_HardwareConf_descriptor_;
}

const MonitorConf_HardwareConf& MonitorConf_HardwareConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

MonitorConf_HardwareConf* MonitorConf_HardwareConf::default_instance_ = NULL;

MonitorConf_HardwareConf* MonitorConf_HardwareConf::New(::google::protobuf::Arena* arena) const {
  MonitorConf_HardwareConf* n = new MonitorConf_HardwareConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonitorConf_HardwareConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.MonitorConf.HardwareConf)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_topic_conf()) {
      if (topic_conf_ != NULL) topic_conf_->::apollo::monitor::TopicConf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MonitorConf_HardwareConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.MonitorConf.HardwareConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.monitor.MonitorConf.HardwareConf.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_conf;
        break;
      }

      // optional .apollo.monitor.TopicConf topic_conf = 2;
      case 2: {
        if (tag == 18) {
         parse_topic_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.MonitorConf.HardwareConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.MonitorConf.HardwareConf)
  return false;
#undef DO_
}

void MonitorConf_HardwareConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.MonitorConf.HardwareConf)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.HardwareConf.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .apollo.monitor.TopicConf topic_conf = 2;
  if (has_topic_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->topic_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.MonitorConf.HardwareConf)
}

::google::protobuf::uint8* MonitorConf_HardwareConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.MonitorConf.HardwareConf)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.HardwareConf.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .apollo.monitor.TopicConf topic_conf = 2;
  if (has_topic_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->topic_conf_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.MonitorConf.HardwareConf)
  return target;
}

int MonitorConf_HardwareConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.MonitorConf.HardwareConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.monitor.TopicConf topic_conf = 2;
    if (has_topic_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->topic_conf_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorConf_HardwareConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.MonitorConf.HardwareConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MonitorConf_HardwareConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MonitorConf_HardwareConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.MonitorConf.HardwareConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.MonitorConf.HardwareConf)
    MergeFrom(*source);
  }
}

void MonitorConf_HardwareConf::MergeFrom(const MonitorConf_HardwareConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.MonitorConf.HardwareConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_topic_conf()) {
      mutable_topic_conf()->::apollo::monitor::TopicConf::MergeFrom(from.topic_conf());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MonitorConf_HardwareConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.MonitorConf.HardwareConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorConf_HardwareConf::CopyFrom(const MonitorConf_HardwareConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.MonitorConf.HardwareConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorConf_HardwareConf::IsInitialized() const {

  return true;
}

void MonitorConf_HardwareConf::Swap(MonitorConf_HardwareConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorConf_HardwareConf::InternalSwap(MonitorConf_HardwareConf* other) {
  name_.Swap(&other->name_);
  std::swap(topic_conf_, other->topic_conf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MonitorConf_HardwareConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorConf_HardwareConf_descriptor_;
  metadata.reflection = MonitorConf_HardwareConf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorConf::kModulesFieldNumber;
const int MonitorConf::kHardwareFieldNumber;
const int MonitorConf::kOnlineReportEndpointFieldNumber;
const int MonitorConf::kResourceConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorConf::MonitorConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.monitor.MonitorConf)
}

void MonitorConf::InitAsDefaultInstance() {
  resource_conf_ = const_cast< ::apollo::monitor::ResourceConf*>(&::apollo::monitor::ResourceConf::default_instance());
}

MonitorConf::MonitorConf(const MonitorConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.MonitorConf)
}

void MonitorConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_report_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_conf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorConf::~MonitorConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.MonitorConf)
  SharedDtor();
}

void MonitorConf::SharedDtor() {
  online_report_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete resource_conf_;
  }
}

void MonitorConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorConf_descriptor_;
}

const MonitorConf& MonitorConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  return *default_instance_;
}

MonitorConf* MonitorConf::default_instance_ = NULL;

MonitorConf* MonitorConf::New(::google::protobuf::Arena* arena) const {
  MonitorConf* n = new MonitorConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonitorConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.MonitorConf)
  if (_has_bits_[0 / 32] & 12u) {
    if (has_online_report_endpoint()) {
      online_report_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_resource_conf()) {
      if (resource_conf_ != NULL) resource_conf_->::apollo::monitor::ResourceConf::Clear();
    }
  }
  modules_.Clear();
  hardware_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MonitorConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.monitor.MonitorConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_modules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_modules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_modules;
        if (input->ExpectTag(18)) goto parse_loop_hardware;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hardware()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_hardware;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_online_report_endpoint;
        break;
      }

      // optional string online_report_endpoint = 3;
      case 3: {
        if (tag == 26) {
         parse_online_report_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_report_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->online_report_endpoint().data(), this->online_report_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.monitor.MonitorConf.online_report_endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resource_conf;
        break;
      }

      // optional .apollo.monitor.ResourceConf resource_conf = 4;
      case 4: {
        if (tag == 34) {
         parse_resource_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.monitor.MonitorConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.monitor.MonitorConf)
  return false;
#undef DO_
}

void MonitorConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.monitor.MonitorConf)
  // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
  for (unsigned int i = 0, n = this->modules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modules(i), output);
  }

  // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
  for (unsigned int i = 0, n = this->hardware_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hardware(i), output);
  }

  // optional string online_report_endpoint = 3;
  if (has_online_report_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->online_report_endpoint().data(), this->online_report_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.online_report_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->online_report_endpoint(), output);
  }

  // optional .apollo.monitor.ResourceConf resource_conf = 4;
  if (has_resource_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->resource_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.monitor.MonitorConf)
}

::google::protobuf::uint8* MonitorConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.MonitorConf)
  // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
  for (unsigned int i = 0, n = this->modules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->modules(i), false, target);
  }

  // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
  for (unsigned int i = 0, n = this->hardware_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->hardware(i), false, target);
  }

  // optional string online_report_endpoint = 3;
  if (has_online_report_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->online_report_endpoint().data(), this->online_report_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.online_report_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->online_report_endpoint(), target);
  }

  // optional .apollo.monitor.ResourceConf resource_conf = 4;
  if (has_resource_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->resource_conf_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.MonitorConf)
  return target;
}

int MonitorConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.MonitorConf)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 12u) {
    // optional string online_report_endpoint = 3;
    if (has_online_report_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->online_report_endpoint());
    }

    // optional .apollo.monitor.ResourceConf resource_conf = 4;
    if (has_resource_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resource_conf_);
    }

  }
  // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
  total_size += 1 * this->modules_size();
  for (int i = 0; i < this->modules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modules(i));
  }

  // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
  total_size += 1 * this->hardware_size();
  for (int i = 0; i < this->hardware_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hardware(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.monitor.MonitorConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MonitorConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MonitorConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.monitor.MonitorConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.monitor.MonitorConf)
    MergeFrom(*source);
  }
}

void MonitorConf::MergeFrom(const MonitorConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.MonitorConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  modules_.MergeFrom(from.modules_);
  hardware_.MergeFrom(from.hardware_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_online_report_endpoint()) {
      set_has_online_report_endpoint();
      online_report_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_report_endpoint_);
    }
    if (from.has_resource_conf()) {
      mutable_resource_conf()->::apollo::monitor::ResourceConf::MergeFrom(from.resource_conf());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MonitorConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.monitor.MonitorConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorConf::CopyFrom(const MonitorConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.MonitorConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorConf::IsInitialized() const {

  return true;
}

void MonitorConf::Swap(MonitorConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorConf::InternalSwap(MonitorConf* other) {
  modules_.UnsafeArenaSwap(&other->modules_);
  hardware_.UnsafeArenaSwap(&other->hardware_);
  online_report_endpoint_.Swap(&other->online_report_endpoint_);
  std::swap(resource_conf_, other->resource_conf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MonitorConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorConf_descriptor_;
  metadata.reflection = MonitorConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MonitorConf_ModuleConf

// optional string name = 1;
bool MonitorConf_ModuleConf::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MonitorConf_ModuleConf::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MonitorConf_ModuleConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MonitorConf_ModuleConf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MonitorConf_ModuleConf::name() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MonitorConf_ModuleConf::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.ModuleConf.name)
}
 void MonitorConf_ModuleConf::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.MonitorConf.ModuleConf.name)
}
 void MonitorConf_ModuleConf::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.MonitorConf.ModuleConf.name)
}
 ::std::string* MonitorConf_ModuleConf::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MonitorConf_ModuleConf::release_name() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MonitorConf_ModuleConf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.name)
}

// optional .apollo.monitor.ProcessConf process_conf = 2;
bool MonitorConf_ModuleConf::has_process_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MonitorConf_ModuleConf::set_has_process_conf() {
  _has_bits_[0] |= 0x00000002u;
}
void MonitorConf_ModuleConf::clear_has_process_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
void MonitorConf_ModuleConf::clear_process_conf() {
  if (process_conf_ != NULL) process_conf_->::apollo::monitor::ProcessConf::Clear();
  clear_has_process_conf();
}
const ::apollo::monitor::ProcessConf& MonitorConf_ModuleConf::process_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  return process_conf_ != NULL ? *process_conf_ : *default_instance_->process_conf_;
}
::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::mutable_process_conf() {
  set_has_process_conf();
  if (process_conf_ == NULL) {
    process_conf_ = new ::apollo::monitor::ProcessConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  return process_conf_;
}
::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::release_process_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  clear_has_process_conf();
  ::apollo::monitor::ProcessConf* temp = process_conf_;
  process_conf_ = NULL;
  return temp;
}
void MonitorConf_ModuleConf::set_allocated_process_conf(::apollo::monitor::ProcessConf* process_conf) {
  delete process_conf_;
  process_conf_ = process_conf;
  if (process_conf) {
    set_has_process_conf();
  } else {
    clear_has_process_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.process_conf)
}

// optional .apollo.monitor.TopicConf topic_conf = 3;
bool MonitorConf_ModuleConf::has_topic_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MonitorConf_ModuleConf::set_has_topic_conf() {
  _has_bits_[0] |= 0x00000004u;
}
void MonitorConf_ModuleConf::clear_has_topic_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
void MonitorConf_ModuleConf::clear_topic_conf() {
  if (topic_conf_ != NULL) topic_conf_->::apollo::monitor::TopicConf::Clear();
  clear_has_topic_conf();
}
const ::apollo::monitor::TopicConf& MonitorConf_ModuleConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  return topic_conf_ != NULL ? *topic_conf_ : *default_instance_->topic_conf_;
}
::apollo::monitor::TopicConf* MonitorConf_ModuleConf::mutable_topic_conf() {
  set_has_topic_conf();
  if (topic_conf_ == NULL) {
    topic_conf_ = new ::apollo::monitor::TopicConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  return topic_conf_;
}
::apollo::monitor::TopicConf* MonitorConf_ModuleConf::release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  clear_has_topic_conf();
  ::apollo::monitor::TopicConf* temp = topic_conf_;
  topic_conf_ = NULL;
  return temp;
}
void MonitorConf_ModuleConf::set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf) {
  delete topic_conf_;
  topic_conf_ = topic_conf;
  if (topic_conf) {
    set_has_topic_conf();
  } else {
    clear_has_topic_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
}

// -------------------------------------------------------------------

// MonitorConf_HardwareConf

// optional string name = 1;
bool MonitorConf_HardwareConf::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MonitorConf_HardwareConf::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MonitorConf_HardwareConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MonitorConf_HardwareConf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MonitorConf_HardwareConf::name() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.HardwareConf.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MonitorConf_HardwareConf::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.HardwareConf.name)
}
 void MonitorConf_HardwareConf::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.MonitorConf.HardwareConf.name)
}
 void MonitorConf_HardwareConf::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.MonitorConf.HardwareConf.name)
}
 ::std::string* MonitorConf_HardwareConf::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.HardwareConf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MonitorConf_HardwareConf::release_name() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.HardwareConf.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MonitorConf_HardwareConf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.HardwareConf.name)
}

// optional .apollo.monitor.TopicConf topic_conf = 2;
bool MonitorConf_HardwareConf::has_topic_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MonitorConf_HardwareConf::set_has_topic_conf() {
  _has_bits_[0] |= 0x00000002u;
}
void MonitorConf_HardwareConf::clear_has_topic_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
void MonitorConf_HardwareConf::clear_topic_conf() {
  if (topic_conf_ != NULL) topic_conf_->::apollo::monitor::TopicConf::Clear();
  clear_has_topic_conf();
}
const ::apollo::monitor::TopicConf& MonitorConf_HardwareConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  return topic_conf_ != NULL ? *topic_conf_ : *default_instance_->topic_conf_;
}
::apollo::monitor::TopicConf* MonitorConf_HardwareConf::mutable_topic_conf() {
  set_has_topic_conf();
  if (topic_conf_ == NULL) {
    topic_conf_ = new ::apollo::monitor::TopicConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  return topic_conf_;
}
::apollo::monitor::TopicConf* MonitorConf_HardwareConf::release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  clear_has_topic_conf();
  ::apollo::monitor::TopicConf* temp = topic_conf_;
  topic_conf_ = NULL;
  return temp;
}
void MonitorConf_HardwareConf::set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf) {
  delete topic_conf_;
  topic_conf_ = topic_conf;
  if (topic_conf) {
    set_has_topic_conf();
  } else {
    clear_has_topic_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
}

// -------------------------------------------------------------------

// MonitorConf

// repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
int MonitorConf::modules_size() const {
  return modules_.size();
}
void MonitorConf::clear_modules() {
  modules_.Clear();
}
const ::apollo::monitor::MonitorConf_ModuleConf& MonitorConf::modules(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.modules)
  return modules_.Get(index);
}
::apollo::monitor::MonitorConf_ModuleConf* MonitorConf::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.modules)
  return modules_.Mutable(index);
}
::apollo::monitor::MonitorConf_ModuleConf* MonitorConf::add_modules() {
  // @@protoc_insertion_point(field_add:apollo.monitor.MonitorConf.modules)
  return modules_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >*
MonitorConf::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.MonitorConf.modules)
  return &modules_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >&
MonitorConf::modules() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.MonitorConf.modules)
  return modules_;
}

// repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
int MonitorConf::hardware_size() const {
  return hardware_.size();
}
void MonitorConf::clear_hardware() {
  hardware_.Clear();
}
const ::apollo::monitor::MonitorConf_HardwareConf& MonitorConf::hardware(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.hardware)
  return hardware_.Get(index);
}
::apollo::monitor::MonitorConf_HardwareConf* MonitorConf::mutable_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.hardware)
  return hardware_.Mutable(index);
}
::apollo::monitor::MonitorConf_HardwareConf* MonitorConf::add_hardware() {
  // @@protoc_insertion_point(field_add:apollo.monitor.MonitorConf.hardware)
  return hardware_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >*
MonitorConf::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.MonitorConf.hardware)
  return &hardware_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >&
MonitorConf::hardware() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.MonitorConf.hardware)
  return hardware_;
}

// optional string online_report_endpoint = 3;
bool MonitorConf::has_online_report_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MonitorConf::set_has_online_report_endpoint() {
  _has_bits_[0] |= 0x00000004u;
}
void MonitorConf::clear_has_online_report_endpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
void MonitorConf::clear_online_report_endpoint() {
  online_report_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_online_report_endpoint();
}
 const ::std::string& MonitorConf::online_report_endpoint() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.online_report_endpoint)
  return online_report_endpoint_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MonitorConf::set_online_report_endpoint(const ::std::string& value) {
  set_has_online_report_endpoint();
  online_report_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.online_report_endpoint)
}
 void MonitorConf::set_online_report_endpoint(const char* value) {
  set_has_online_report_endpoint();
  online_report_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.MonitorConf.online_report_endpoint)
}
 void MonitorConf::set_online_report_endpoint(const char* value, size_t size) {
  set_has_online_report_endpoint();
  online_report_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.MonitorConf.online_report_endpoint)
}
 ::std::string* MonitorConf::mutable_online_report_endpoint() {
  set_has_online_report_endpoint();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.online_report_endpoint)
  return online_report_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MonitorConf::release_online_report_endpoint() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.online_report_endpoint)
  clear_has_online_report_endpoint();
  return online_report_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MonitorConf::set_allocated_online_report_endpoint(::std::string* online_report_endpoint) {
  if (online_report_endpoint != NULL) {
    set_has_online_report_endpoint();
  } else {
    clear_has_online_report_endpoint();
  }
  online_report_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_report_endpoint);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.online_report_endpoint)
}

// optional .apollo.monitor.ResourceConf resource_conf = 4;
bool MonitorConf::has_resource_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MonitorConf::set_has_resource_conf() {
  _has_bits_[0] |= 0x00000008u;
}
void MonitorConf::clear_has_resource_conf() {
  _has_bits_[0] &= ~0x00000008u;
}
void MonitorConf::clear_resource_conf() {
  if (resource_conf_ != NULL) resource_conf_->::apollo::monitor::ResourceConf::Clear();
  clear_has_resource_conf();
}
const ::apollo::monitor::ResourceConf& MonitorConf::resource_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.resource_conf)
  return resource_conf_ != NULL ? *resource_conf_ : *default_instance_->resource_conf_;
}
::apollo::monitor::ResourceConf* MonitorConf::mutable_resource_conf() {
  set_has_resource_conf();
  if (resource_conf_ == NULL) {
    resource_conf_ = new ::apollo::monitor::ResourceConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.resource_conf)
  return resource_conf_;
}
::apollo::monitor::ResourceConf* MonitorConf::release_resource_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.resource_conf)
  clear_has_resource_conf();
  ::apollo::monitor::ResourceConf* temp = resource_conf_;
  resource_conf_ = NULL;
  return temp;
}
void MonitorConf::set_allocated_resource_conf(::apollo::monitor::ResourceConf* resource_conf) {
  delete resource_conf_;
  resource_conf_ = resource_conf;
  if (resource_conf) {
    set_has_resource_conf();
  } else {
    clear_has_resource_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.resource_conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
