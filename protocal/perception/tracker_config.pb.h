// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/tracker_config.proto

#ifndef PROTOBUF_perception_2ftracker_5fconfig_2eproto__INCLUDED
#define PROTOBUF_perception_2ftracker_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace tracker_config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_perception_2ftracker_5fconfig_2eproto();
void protobuf_AssignDesc_perception_2ftracker_5fconfig_2eproto();
void protobuf_ShutdownFile_perception_2ftracker_5fconfig_2eproto();

class ModelConfigs;

enum ModelConfigs_MatcherType {
  ModelConfigs_MatcherType_HUNGARIAN_MATCHER = 1
};
bool ModelConfigs_MatcherType_IsValid(int value);
const ModelConfigs_MatcherType ModelConfigs_MatcherType_MatcherType_MIN = ModelConfigs_MatcherType_HUNGARIAN_MATCHER;
const ModelConfigs_MatcherType ModelConfigs_MatcherType_MatcherType_MAX = ModelConfigs_MatcherType_HUNGARIAN_MATCHER;
const int ModelConfigs_MatcherType_MatcherType_ARRAYSIZE = ModelConfigs_MatcherType_MatcherType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelConfigs_MatcherType_descriptor();
inline const ::std::string& ModelConfigs_MatcherType_Name(ModelConfigs_MatcherType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelConfigs_MatcherType_descriptor(), value);
}
inline bool ModelConfigs_MatcherType_Parse(
    const ::std::string& name, ModelConfigs_MatcherType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelConfigs_MatcherType>(
    ModelConfigs_MatcherType_descriptor(), name, value);
}
enum ModelConfigs_FilterType {
  ModelConfigs_FilterType_KALMAN_FILTER = 1
};
bool ModelConfigs_FilterType_IsValid(int value);
const ModelConfigs_FilterType ModelConfigs_FilterType_FilterType_MIN = ModelConfigs_FilterType_KALMAN_FILTER;
const ModelConfigs_FilterType ModelConfigs_FilterType_FilterType_MAX = ModelConfigs_FilterType_KALMAN_FILTER;
const int ModelConfigs_FilterType_FilterType_ARRAYSIZE = ModelConfigs_FilterType_FilterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelConfigs_FilterType_descriptor();
inline const ::std::string& ModelConfigs_FilterType_Name(ModelConfigs_FilterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelConfigs_FilterType_descriptor(), value);
}
inline bool ModelConfigs_FilterType_Parse(
    const ::std::string& name, ModelConfigs_FilterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelConfigs_FilterType>(
    ModelConfigs_FilterType_descriptor(), name, value);
}
// ===================================================================

class ModelConfigs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.tracker_config.ModelConfigs) */ {
 public:
  ModelConfigs();
  virtual ~ModelConfigs();

  ModelConfigs(const ModelConfigs& from);

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfigs& default_instance();

  void Swap(ModelConfigs* other);

  // implements Message ----------------------------------------------

  inline ModelConfigs* New() const { return New(NULL); }

  ModelConfigs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelConfigs& from);
  void MergeFrom(const ModelConfigs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModelConfigs_MatcherType MatcherType;
  static const MatcherType HUNGARIAN_MATCHER =
    ModelConfigs_MatcherType_HUNGARIAN_MATCHER;
  static inline bool MatcherType_IsValid(int value) {
    return ModelConfigs_MatcherType_IsValid(value);
  }
  static const MatcherType MatcherType_MIN =
    ModelConfigs_MatcherType_MatcherType_MIN;
  static const MatcherType MatcherType_MAX =
    ModelConfigs_MatcherType_MatcherType_MAX;
  static const int MatcherType_ARRAYSIZE =
    ModelConfigs_MatcherType_MatcherType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatcherType_descriptor() {
    return ModelConfigs_MatcherType_descriptor();
  }
  static inline const ::std::string& MatcherType_Name(MatcherType value) {
    return ModelConfigs_MatcherType_Name(value);
  }
  static inline bool MatcherType_Parse(const ::std::string& name,
      MatcherType* value) {
    return ModelConfigs_MatcherType_Parse(name, value);
  }

  typedef ModelConfigs_FilterType FilterType;
  static const FilterType KALMAN_FILTER =
    ModelConfigs_FilterType_KALMAN_FILTER;
  static inline bool FilterType_IsValid(int value) {
    return ModelConfigs_FilterType_IsValid(value);
  }
  static const FilterType FilterType_MIN =
    ModelConfigs_FilterType_FilterType_MIN;
  static const FilterType FilterType_MAX =
    ModelConfigs_FilterType_FilterType_MAX;
  static const int FilterType_ARRAYSIZE =
    ModelConfigs_FilterType_FilterType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FilterType_descriptor() {
    return ModelConfigs_FilterType_descriptor();
  }
  static inline const ::std::string& FilterType_Name(FilterType value) {
    return ModelConfigs_FilterType_Name(value);
  }
  static inline bool FilterType_Parse(const ::std::string& name,
      FilterType* value) {
    return ModelConfigs_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "HmObjectTracker"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2 [default = "1.1.0"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .apollo.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
  bool has_matcher_method() const;
  void clear_matcher_method();
  static const int kMatcherMethodFieldNumber = 3;
  ::apollo::perception::tracker_config::ModelConfigs_MatcherType matcher_method() const;
  void set_matcher_method(::apollo::perception::tracker_config::ModelConfigs_MatcherType value);

  // optional .apollo.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
  bool has_filter_method() const;
  void clear_filter_method();
  static const int kFilterMethodFieldNumber = 4;
  ::apollo::perception::tracker_config::ModelConfigs_FilterType filter_method() const;
  void set_filter_method(::apollo::perception::tracker_config::ModelConfigs_FilterType value);

  // optional int32 track_cached_history_size_maximum = 5 [default = 5];
  bool has_track_cached_history_size_maximum() const;
  void clear_track_cached_history_size_maximum();
  static const int kTrackCachedHistorySizeMaximumFieldNumber = 5;
  ::google::protobuf::int32 track_cached_history_size_maximum() const;
  void set_track_cached_history_size_maximum(::google::protobuf::int32 value);

  // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
  bool has_track_consecutive_invisible_maximum() const;
  void clear_track_consecutive_invisible_maximum();
  static const int kTrackConsecutiveInvisibleMaximumFieldNumber = 6;
  ::google::protobuf::int32 track_consecutive_invisible_maximum() const;
  void set_track_consecutive_invisible_maximum(::google::protobuf::int32 value);

  // optional float track_visible_ratio_minimum = 7 [default = 0.6];
  bool has_track_visible_ratio_minimum() const;
  void clear_track_visible_ratio_minimum();
  static const int kTrackVisibleRatioMinimumFieldNumber = 7;
  float track_visible_ratio_minimum() const;
  void set_track_visible_ratio_minimum(float value);

  // optional int32 collect_age_minimum = 8 [default = 0];
  bool has_collect_age_minimum() const;
  void clear_collect_age_minimum();
  static const int kCollectAgeMinimumFieldNumber = 8;
  ::google::protobuf::int32 collect_age_minimum() const;
  void set_collect_age_minimum(::google::protobuf::int32 value);

  // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
  bool has_collect_consecutive_invisible_maximum() const;
  void clear_collect_consecutive_invisible_maximum();
  static const int kCollectConsecutiveInvisibleMaximumFieldNumber = 9;
  ::google::protobuf::int32 collect_consecutive_invisible_maximum() const;
  void set_collect_consecutive_invisible_maximum(::google::protobuf::int32 value);

  // optional float acceleration_noise_maximum = 10 [default = 5];
  bool has_acceleration_noise_maximum() const;
  void clear_acceleration_noise_maximum();
  static const int kAccelerationNoiseMaximumFieldNumber = 10;
  float acceleration_noise_maximum() const;
  void set_acceleration_noise_maximum(float value);

  // optional float speed_noise_maximum = 11 [default = 0.4];
  bool has_speed_noise_maximum() const;
  void clear_speed_noise_maximum();
  static const int kSpeedNoiseMaximumFieldNumber = 11;
  float speed_noise_maximum() const;
  void set_speed_noise_maximum(float value);

  // optional float match_distance_maximum = 12 [default = 4];
  bool has_match_distance_maximum() const;
  void clear_match_distance_maximum();
  static const int kMatchDistanceMaximumFieldNumber = 12;
  float match_distance_maximum() const;
  void set_match_distance_maximum(float value);

  // optional float location_distance_weight = 13 [default = 0.6];
  bool has_location_distance_weight() const;
  void clear_location_distance_weight();
  static const int kLocationDistanceWeightFieldNumber = 13;
  float location_distance_weight() const;
  void set_location_distance_weight(float value);

  // optional float direction_distance_weight = 14 [default = 0.2];
  bool has_direction_distance_weight() const;
  void clear_direction_distance_weight();
  static const int kDirectionDistanceWeightFieldNumber = 14;
  float direction_distance_weight() const;
  void set_direction_distance_weight(float value);

  // optional float bbox_size_distance_weight = 15 [default = 0.1];
  bool has_bbox_size_distance_weight() const;
  void clear_bbox_size_distance_weight();
  static const int kBboxSizeDistanceWeightFieldNumber = 15;
  float bbox_size_distance_weight() const;
  void set_bbox_size_distance_weight(float value);

  // optional float point_num_distance_weight = 16 [default = 0.1];
  bool has_point_num_distance_weight() const;
  void clear_point_num_distance_weight();
  static const int kPointNumDistanceWeightFieldNumber = 16;
  float point_num_distance_weight() const;
  void set_point_num_distance_weight(float value);

  // optional float histogram_distance_weight = 17 [default = 0.5];
  bool has_histogram_distance_weight() const;
  void clear_histogram_distance_weight();
  static const int kHistogramDistanceWeightFieldNumber = 17;
  float histogram_distance_weight() const;
  void set_histogram_distance_weight(float value);

  // optional int32 histogram_bin_size = 18 [default = 10];
  bool has_histogram_bin_size() const;
  void clear_histogram_bin_size();
  static const int kHistogramBinSizeFieldNumber = 18;
  ::google::protobuf::int32 histogram_bin_size() const;
  void set_histogram_bin_size(::google::protobuf::int32 value);

  // optional bool use_adaptive = 19 [default = true];
  bool has_use_adaptive() const;
  void clear_use_adaptive();
  static const int kUseAdaptiveFieldNumber = 19;
  bool use_adaptive() const;
  void set_use_adaptive(bool value);

  // optional float measurement_noise = 20 [default = 0.4];
  bool has_measurement_noise() const;
  void clear_measurement_noise();
  static const int kMeasurementNoiseFieldNumber = 20;
  float measurement_noise() const;
  void set_measurement_noise(float value);

  // optional float initial_velocity_noise = 21 [default = 5];
  bool has_initial_velocity_noise() const;
  void clear_initial_velocity_noise();
  static const int kInitialVelocityNoiseFieldNumber = 21;
  float initial_velocity_noise() const;
  void set_initial_velocity_noise(float value);

  // optional float xy_propagation_noise = 22 [default = 10];
  bool has_xy_propagation_noise() const;
  void clear_xy_propagation_noise();
  static const int kXyPropagationNoiseFieldNumber = 22;
  float xy_propagation_noise() const;
  void set_xy_propagation_noise(float value);

  // optional float z_propagation_noise = 23 [default = 10];
  bool has_z_propagation_noise() const;
  void clear_z_propagation_noise();
  static const int kZPropagationNoiseFieldNumber = 23;
  float z_propagation_noise() const;
  void set_z_propagation_noise(float value);

  // optional float breakdown_threshold_maximum = 24 [default = 10];
  bool has_breakdown_threshold_maximum() const;
  void clear_breakdown_threshold_maximum();
  static const int kBreakdownThresholdMaximumFieldNumber = 24;
  float breakdown_threshold_maximum() const;
  void set_breakdown_threshold_maximum(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.tracker_config.ModelConfigs)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_matcher_method();
  inline void clear_has_matcher_method();
  inline void set_has_filter_method();
  inline void clear_has_filter_method();
  inline void set_has_track_cached_history_size_maximum();
  inline void clear_has_track_cached_history_size_maximum();
  inline void set_has_track_consecutive_invisible_maximum();
  inline void clear_has_track_consecutive_invisible_maximum();
  inline void set_has_track_visible_ratio_minimum();
  inline void clear_has_track_visible_ratio_minimum();
  inline void set_has_collect_age_minimum();
  inline void clear_has_collect_age_minimum();
  inline void set_has_collect_consecutive_invisible_maximum();
  inline void clear_has_collect_consecutive_invisible_maximum();
  inline void set_has_acceleration_noise_maximum();
  inline void clear_has_acceleration_noise_maximum();
  inline void set_has_speed_noise_maximum();
  inline void clear_has_speed_noise_maximum();
  inline void set_has_match_distance_maximum();
  inline void clear_has_match_distance_maximum();
  inline void set_has_location_distance_weight();
  inline void clear_has_location_distance_weight();
  inline void set_has_direction_distance_weight();
  inline void clear_has_direction_distance_weight();
  inline void set_has_bbox_size_distance_weight();
  inline void clear_has_bbox_size_distance_weight();
  inline void set_has_point_num_distance_weight();
  inline void clear_has_point_num_distance_weight();
  inline void set_has_histogram_distance_weight();
  inline void clear_has_histogram_distance_weight();
  inline void set_has_histogram_bin_size();
  inline void clear_has_histogram_bin_size();
  inline void set_has_use_adaptive();
  inline void clear_has_use_adaptive();
  inline void set_has_measurement_noise();
  inline void clear_has_measurement_noise();
  inline void set_has_initial_velocity_noise();
  inline void clear_has_initial_velocity_noise();
  inline void set_has_xy_propagation_noise();
  inline void clear_has_xy_propagation_noise();
  inline void set_has_z_propagation_noise();
  inline void clear_has_z_propagation_noise();
  inline void set_has_breakdown_threshold_maximum();
  inline void clear_has_breakdown_threshold_maximum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  static ::std::string* _default_version_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  int matcher_method_;
  int filter_method_;
  ::google::protobuf::int32 track_cached_history_size_maximum_;
  ::google::protobuf::int32 track_consecutive_invisible_maximum_;
  float track_visible_ratio_minimum_;
  ::google::protobuf::int32 collect_age_minimum_;
  ::google::protobuf::int32 collect_consecutive_invisible_maximum_;
  float acceleration_noise_maximum_;
  float speed_noise_maximum_;
  float match_distance_maximum_;
  float location_distance_weight_;
  float direction_distance_weight_;
  float bbox_size_distance_weight_;
  float point_num_distance_weight_;
  float histogram_distance_weight_;
  ::google::protobuf::int32 histogram_bin_size_;
  bool use_adaptive_;
  float measurement_noise_;
  float initial_velocity_noise_;
  float xy_propagation_noise_;
  float z_propagation_noise_;
  float breakdown_threshold_maximum_;
  friend void  protobuf_AddDesc_perception_2ftracker_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2ftracker_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2ftracker_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ModelConfigs* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "HmObjectTracker"];
inline bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
inline const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.name)
  return name_.GetNoArena(_default_name_);
}
inline void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.name)
}
inline void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.tracker_config.ModelConfigs.name)
}
inline void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.tracker_config.ModelConfigs.name)
}
inline ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.tracker_config.ModelConfigs.name)
  return name_.MutableNoArena(_default_name_);
}
inline ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.tracker_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
inline void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.tracker_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.1.0"];
inline bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
inline const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.version)
  return version_.GetNoArena(_default_version_);
}
inline void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.version)
}
inline void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.tracker_config.ModelConfigs.version)
}
inline void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.tracker_config.ModelConfigs.version)
}
inline ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.tracker_config.ModelConfigs.version)
  return version_.MutableNoArena(_default_version_);
}
inline ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.tracker_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
inline void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.tracker_config.ModelConfigs.version)
}

// optional .apollo.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
inline bool ModelConfigs::has_matcher_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelConfigs::set_has_matcher_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelConfigs::clear_has_matcher_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelConfigs::clear_matcher_method() {
  matcher_method_ = 1;
  clear_has_matcher_method();
}
inline ::apollo::perception::tracker_config::ModelConfigs_MatcherType ModelConfigs::matcher_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.matcher_method)
  return static_cast< ::apollo::perception::tracker_config::ModelConfigs_MatcherType >(matcher_method_);
}
inline void ModelConfigs::set_matcher_method(::apollo::perception::tracker_config::ModelConfigs_MatcherType value) {
  assert(::apollo::perception::tracker_config::ModelConfigs_MatcherType_IsValid(value));
  set_has_matcher_method();
  matcher_method_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.matcher_method)
}

// optional .apollo.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
inline bool ModelConfigs::has_filter_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelConfigs::set_has_filter_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelConfigs::clear_has_filter_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelConfigs::clear_filter_method() {
  filter_method_ = 1;
  clear_has_filter_method();
}
inline ::apollo::perception::tracker_config::ModelConfigs_FilterType ModelConfigs::filter_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.filter_method)
  return static_cast< ::apollo::perception::tracker_config::ModelConfigs_FilterType >(filter_method_);
}
inline void ModelConfigs::set_filter_method(::apollo::perception::tracker_config::ModelConfigs_FilterType value) {
  assert(::apollo::perception::tracker_config::ModelConfigs_FilterType_IsValid(value));
  set_has_filter_method();
  filter_method_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.filter_method)
}

// optional int32 track_cached_history_size_maximum = 5 [default = 5];
inline bool ModelConfigs::has_track_cached_history_size_maximum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelConfigs::set_has_track_cached_history_size_maximum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelConfigs::clear_has_track_cached_history_size_maximum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelConfigs::clear_track_cached_history_size_maximum() {
  track_cached_history_size_maximum_ = 5;
  clear_has_track_cached_history_size_maximum();
}
inline ::google::protobuf::int32 ModelConfigs::track_cached_history_size_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.track_cached_history_size_maximum)
  return track_cached_history_size_maximum_;
}
inline void ModelConfigs::set_track_cached_history_size_maximum(::google::protobuf::int32 value) {
  set_has_track_cached_history_size_maximum();
  track_cached_history_size_maximum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.track_cached_history_size_maximum)
}

// optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
inline bool ModelConfigs::has_track_consecutive_invisible_maximum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelConfigs::set_has_track_consecutive_invisible_maximum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelConfigs::clear_has_track_consecutive_invisible_maximum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelConfigs::clear_track_consecutive_invisible_maximum() {
  track_consecutive_invisible_maximum_ = 1;
  clear_has_track_consecutive_invisible_maximum();
}
inline ::google::protobuf::int32 ModelConfigs::track_consecutive_invisible_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.track_consecutive_invisible_maximum)
  return track_consecutive_invisible_maximum_;
}
inline void ModelConfigs::set_track_consecutive_invisible_maximum(::google::protobuf::int32 value) {
  set_has_track_consecutive_invisible_maximum();
  track_consecutive_invisible_maximum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.track_consecutive_invisible_maximum)
}

// optional float track_visible_ratio_minimum = 7 [default = 0.6];
inline bool ModelConfigs::has_track_visible_ratio_minimum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelConfigs::set_has_track_visible_ratio_minimum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelConfigs::clear_has_track_visible_ratio_minimum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelConfigs::clear_track_visible_ratio_minimum() {
  track_visible_ratio_minimum_ = 0.6f;
  clear_has_track_visible_ratio_minimum();
}
inline float ModelConfigs::track_visible_ratio_minimum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.track_visible_ratio_minimum)
  return track_visible_ratio_minimum_;
}
inline void ModelConfigs::set_track_visible_ratio_minimum(float value) {
  set_has_track_visible_ratio_minimum();
  track_visible_ratio_minimum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.track_visible_ratio_minimum)
}

// optional int32 collect_age_minimum = 8 [default = 0];
inline bool ModelConfigs::has_collect_age_minimum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelConfigs::set_has_collect_age_minimum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelConfigs::clear_has_collect_age_minimum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelConfigs::clear_collect_age_minimum() {
  collect_age_minimum_ = 0;
  clear_has_collect_age_minimum();
}
inline ::google::protobuf::int32 ModelConfigs::collect_age_minimum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.collect_age_minimum)
  return collect_age_minimum_;
}
inline void ModelConfigs::set_collect_age_minimum(::google::protobuf::int32 value) {
  set_has_collect_age_minimum();
  collect_age_minimum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.collect_age_minimum)
}

// optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
inline bool ModelConfigs::has_collect_consecutive_invisible_maximum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelConfigs::set_has_collect_consecutive_invisible_maximum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelConfigs::clear_has_collect_consecutive_invisible_maximum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelConfigs::clear_collect_consecutive_invisible_maximum() {
  collect_consecutive_invisible_maximum_ = 0;
  clear_has_collect_consecutive_invisible_maximum();
}
inline ::google::protobuf::int32 ModelConfigs::collect_consecutive_invisible_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.collect_consecutive_invisible_maximum)
  return collect_consecutive_invisible_maximum_;
}
inline void ModelConfigs::set_collect_consecutive_invisible_maximum(::google::protobuf::int32 value) {
  set_has_collect_consecutive_invisible_maximum();
  collect_consecutive_invisible_maximum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.collect_consecutive_invisible_maximum)
}

// optional float acceleration_noise_maximum = 10 [default = 5];
inline bool ModelConfigs::has_acceleration_noise_maximum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelConfigs::set_has_acceleration_noise_maximum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelConfigs::clear_has_acceleration_noise_maximum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelConfigs::clear_acceleration_noise_maximum() {
  acceleration_noise_maximum_ = 5;
  clear_has_acceleration_noise_maximum();
}
inline float ModelConfigs::acceleration_noise_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.acceleration_noise_maximum)
  return acceleration_noise_maximum_;
}
inline void ModelConfigs::set_acceleration_noise_maximum(float value) {
  set_has_acceleration_noise_maximum();
  acceleration_noise_maximum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.acceleration_noise_maximum)
}

// optional float speed_noise_maximum = 11 [default = 0.4];
inline bool ModelConfigs::has_speed_noise_maximum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelConfigs::set_has_speed_noise_maximum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelConfigs::clear_has_speed_noise_maximum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelConfigs::clear_speed_noise_maximum() {
  speed_noise_maximum_ = 0.4f;
  clear_has_speed_noise_maximum();
}
inline float ModelConfigs::speed_noise_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.speed_noise_maximum)
  return speed_noise_maximum_;
}
inline void ModelConfigs::set_speed_noise_maximum(float value) {
  set_has_speed_noise_maximum();
  speed_noise_maximum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.speed_noise_maximum)
}

// optional float match_distance_maximum = 12 [default = 4];
inline bool ModelConfigs::has_match_distance_maximum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModelConfigs::set_has_match_distance_maximum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModelConfigs::clear_has_match_distance_maximum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModelConfigs::clear_match_distance_maximum() {
  match_distance_maximum_ = 4;
  clear_has_match_distance_maximum();
}
inline float ModelConfigs::match_distance_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.match_distance_maximum)
  return match_distance_maximum_;
}
inline void ModelConfigs::set_match_distance_maximum(float value) {
  set_has_match_distance_maximum();
  match_distance_maximum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.match_distance_maximum)
}

// optional float location_distance_weight = 13 [default = 0.6];
inline bool ModelConfigs::has_location_distance_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModelConfigs::set_has_location_distance_weight() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModelConfigs::clear_has_location_distance_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModelConfigs::clear_location_distance_weight() {
  location_distance_weight_ = 0.6f;
  clear_has_location_distance_weight();
}
inline float ModelConfigs::location_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.location_distance_weight)
  return location_distance_weight_;
}
inline void ModelConfigs::set_location_distance_weight(float value) {
  set_has_location_distance_weight();
  location_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.location_distance_weight)
}

// optional float direction_distance_weight = 14 [default = 0.2];
inline bool ModelConfigs::has_direction_distance_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModelConfigs::set_has_direction_distance_weight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModelConfigs::clear_has_direction_distance_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModelConfigs::clear_direction_distance_weight() {
  direction_distance_weight_ = 0.2f;
  clear_has_direction_distance_weight();
}
inline float ModelConfigs::direction_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.direction_distance_weight)
  return direction_distance_weight_;
}
inline void ModelConfigs::set_direction_distance_weight(float value) {
  set_has_direction_distance_weight();
  direction_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.direction_distance_weight)
}

// optional float bbox_size_distance_weight = 15 [default = 0.1];
inline bool ModelConfigs::has_bbox_size_distance_weight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModelConfigs::set_has_bbox_size_distance_weight() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModelConfigs::clear_has_bbox_size_distance_weight() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModelConfigs::clear_bbox_size_distance_weight() {
  bbox_size_distance_weight_ = 0.1f;
  clear_has_bbox_size_distance_weight();
}
inline float ModelConfigs::bbox_size_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.bbox_size_distance_weight)
  return bbox_size_distance_weight_;
}
inline void ModelConfigs::set_bbox_size_distance_weight(float value) {
  set_has_bbox_size_distance_weight();
  bbox_size_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.bbox_size_distance_weight)
}

// optional float point_num_distance_weight = 16 [default = 0.1];
inline bool ModelConfigs::has_point_num_distance_weight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModelConfigs::set_has_point_num_distance_weight() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModelConfigs::clear_has_point_num_distance_weight() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModelConfigs::clear_point_num_distance_weight() {
  point_num_distance_weight_ = 0.1f;
  clear_has_point_num_distance_weight();
}
inline float ModelConfigs::point_num_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.point_num_distance_weight)
  return point_num_distance_weight_;
}
inline void ModelConfigs::set_point_num_distance_weight(float value) {
  set_has_point_num_distance_weight();
  point_num_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.point_num_distance_weight)
}

// optional float histogram_distance_weight = 17 [default = 0.5];
inline bool ModelConfigs::has_histogram_distance_weight() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModelConfigs::set_has_histogram_distance_weight() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModelConfigs::clear_has_histogram_distance_weight() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModelConfigs::clear_histogram_distance_weight() {
  histogram_distance_weight_ = 0.5f;
  clear_has_histogram_distance_weight();
}
inline float ModelConfigs::histogram_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.histogram_distance_weight)
  return histogram_distance_weight_;
}
inline void ModelConfigs::set_histogram_distance_weight(float value) {
  set_has_histogram_distance_weight();
  histogram_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.histogram_distance_weight)
}

// optional int32 histogram_bin_size = 18 [default = 10];
inline bool ModelConfigs::has_histogram_bin_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModelConfigs::set_has_histogram_bin_size() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModelConfigs::clear_has_histogram_bin_size() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModelConfigs::clear_histogram_bin_size() {
  histogram_bin_size_ = 10;
  clear_has_histogram_bin_size();
}
inline ::google::protobuf::int32 ModelConfigs::histogram_bin_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.histogram_bin_size)
  return histogram_bin_size_;
}
inline void ModelConfigs::set_histogram_bin_size(::google::protobuf::int32 value) {
  set_has_histogram_bin_size();
  histogram_bin_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.histogram_bin_size)
}

// optional bool use_adaptive = 19 [default = true];
inline bool ModelConfigs::has_use_adaptive() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModelConfigs::set_has_use_adaptive() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModelConfigs::clear_has_use_adaptive() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModelConfigs::clear_use_adaptive() {
  use_adaptive_ = true;
  clear_has_use_adaptive();
}
inline bool ModelConfigs::use_adaptive() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.use_adaptive)
  return use_adaptive_;
}
inline void ModelConfigs::set_use_adaptive(bool value) {
  set_has_use_adaptive();
  use_adaptive_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.use_adaptive)
}

// optional float measurement_noise = 20 [default = 0.4];
inline bool ModelConfigs::has_measurement_noise() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModelConfigs::set_has_measurement_noise() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModelConfigs::clear_has_measurement_noise() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModelConfigs::clear_measurement_noise() {
  measurement_noise_ = 0.4f;
  clear_has_measurement_noise();
}
inline float ModelConfigs::measurement_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.measurement_noise)
  return measurement_noise_;
}
inline void ModelConfigs::set_measurement_noise(float value) {
  set_has_measurement_noise();
  measurement_noise_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.measurement_noise)
}

// optional float initial_velocity_noise = 21 [default = 5];
inline bool ModelConfigs::has_initial_velocity_noise() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModelConfigs::set_has_initial_velocity_noise() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModelConfigs::clear_has_initial_velocity_noise() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModelConfigs::clear_initial_velocity_noise() {
  initial_velocity_noise_ = 5;
  clear_has_initial_velocity_noise();
}
inline float ModelConfigs::initial_velocity_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.initial_velocity_noise)
  return initial_velocity_noise_;
}
inline void ModelConfigs::set_initial_velocity_noise(float value) {
  set_has_initial_velocity_noise();
  initial_velocity_noise_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.initial_velocity_noise)
}

// optional float xy_propagation_noise = 22 [default = 10];
inline bool ModelConfigs::has_xy_propagation_noise() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModelConfigs::set_has_xy_propagation_noise() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModelConfigs::clear_has_xy_propagation_noise() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModelConfigs::clear_xy_propagation_noise() {
  xy_propagation_noise_ = 10;
  clear_has_xy_propagation_noise();
}
inline float ModelConfigs::xy_propagation_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.xy_propagation_noise)
  return xy_propagation_noise_;
}
inline void ModelConfigs::set_xy_propagation_noise(float value) {
  set_has_xy_propagation_noise();
  xy_propagation_noise_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.xy_propagation_noise)
}

// optional float z_propagation_noise = 23 [default = 10];
inline bool ModelConfigs::has_z_propagation_noise() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModelConfigs::set_has_z_propagation_noise() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModelConfigs::clear_has_z_propagation_noise() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModelConfigs::clear_z_propagation_noise() {
  z_propagation_noise_ = 10;
  clear_has_z_propagation_noise();
}
inline float ModelConfigs::z_propagation_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.z_propagation_noise)
  return z_propagation_noise_;
}
inline void ModelConfigs::set_z_propagation_noise(float value) {
  set_has_z_propagation_noise();
  z_propagation_noise_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.z_propagation_noise)
}

// optional float breakdown_threshold_maximum = 24 [default = 10];
inline bool ModelConfigs::has_breakdown_threshold_maximum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModelConfigs::set_has_breakdown_threshold_maximum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModelConfigs::clear_has_breakdown_threshold_maximum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModelConfigs::clear_breakdown_threshold_maximum() {
  breakdown_threshold_maximum_ = 10;
  clear_has_breakdown_threshold_maximum();
}
inline float ModelConfigs::breakdown_threshold_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.breakdown_threshold_maximum)
  return breakdown_threshold_maximum_;
}
inline void ModelConfigs::set_breakdown_threshold_maximum(float value) {
  set_has_breakdown_threshold_maximum();
  breakdown_threshold_maximum_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.breakdown_threshold_maximum)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker_config
}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::perception::tracker_config::ModelConfigs_MatcherType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::tracker_config::ModelConfigs_MatcherType>() {
  return ::apollo::perception::tracker_config::ModelConfigs_MatcherType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::tracker_config::ModelConfigs_FilterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::tracker_config::ModelConfigs_FilterType>() {
  return ::apollo::perception::tracker_config::ModelConfigs_FilterType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2ftracker_5fconfig_2eproto__INCLUDED
