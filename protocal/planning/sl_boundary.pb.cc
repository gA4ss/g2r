// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/sl_boundary.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/sl_boundary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* SLBoundary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBoundary_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fsl_5fboundary_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fsl_5fboundary_2eproto() {
  protobuf_AddDesc_planning_2fsl_5fboundary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/sl_boundary.proto");
  GOOGLE_CHECK(file != NULL);
  SLBoundary_descriptor_ = file->message_type(0);
  static const int SLBoundary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBoundary, start_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBoundary, end_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBoundary, start_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBoundary, end_l_),
  };
  SLBoundary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBoundary_descriptor_,
      SLBoundary::default_instance_,
      SLBoundary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBoundary, _has_bits_[0]),
      -1,
      -1,
      sizeof(SLBoundary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBoundary, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fsl_5fboundary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBoundary_descriptor_, &SLBoundary::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fsl_5fboundary_2eproto() {
  delete SLBoundary::default_instance_;
  delete SLBoundary_reflection_;
}

void protobuf_AddDesc_planning_2fsl_5fboundary_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fsl_5fboundary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032planning/sl_boundary.proto\022\017apollo.pla"
    "nning\"L\n\nSLBoundary\022\017\n\007start_s\030\001 \001(\001\022\r\n\005"
    "end_s\030\002 \001(\001\022\017\n\007start_l\030\003 \001(\001\022\r\n\005end_l\030\004 "
    "\001(\001", 123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/sl_boundary.proto", &protobuf_RegisterTypes);
  SLBoundary::default_instance_ = new SLBoundary();
  SLBoundary::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fsl_5fboundary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fsl_5fboundary_2eproto {
  StaticDescriptorInitializer_planning_2fsl_5fboundary_2eproto() {
    protobuf_AddDesc_planning_2fsl_5fboundary_2eproto();
  }
} static_descriptor_initializer_planning_2fsl_5fboundary_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLBoundary::kStartSFieldNumber;
const int SLBoundary::kEndSFieldNumber;
const int SLBoundary::kStartLFieldNumber;
const int SLBoundary::kEndLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBoundary::SLBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SLBoundary)
}

void SLBoundary::InitAsDefaultInstance() {
}

SLBoundary::SLBoundary(const SLBoundary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SLBoundary)
}

void SLBoundary::SharedCtor() {
  _cached_size_ = 0;
  start_s_ = 0;
  end_s_ = 0;
  start_l_ = 0;
  end_l_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLBoundary::~SLBoundary() {
  // @@protoc_insertion_point(destructor:apollo.planning.SLBoundary)
  SharedDtor();
}

void SLBoundary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBoundary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBoundary_descriptor_;
}

const SLBoundary& SLBoundary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fsl_5fboundary_2eproto();
  return *default_instance_;
}

SLBoundary* SLBoundary::default_instance_ = NULL;

SLBoundary* SLBoundary::New(::google::protobuf::Arena* arena) const {
  SLBoundary* n = new SLBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SLBoundary)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SLBoundary, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLBoundary*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_s_, end_l_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SLBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SLBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
          set_has_start_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_end_s;
        break;
      }

      // optional double end_s = 2;
      case 2: {
        if (tag == 17) {
         parse_end_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
          set_has_end_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_start_l;
        break;
      }

      // optional double start_l = 3;
      case 3: {
        if (tag == 25) {
         parse_start_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_l_)));
          set_has_start_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_end_l;
        break;
      }

      // optional double end_l = 4;
      case 4: {
        if (tag == 33) {
         parse_end_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_l_)));
          set_has_end_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SLBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SLBoundary)
  return false;
#undef DO_
}

void SLBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SLBoundary)
  // optional double start_s = 1;
  if (has_start_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_s(), output);
  }

  // optional double end_s = 2;
  if (has_end_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end_s(), output);
  }

  // optional double start_l = 3;
  if (has_start_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_l(), output);
  }

  // optional double end_l = 4;
  if (has_end_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->end_l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SLBoundary)
}

::google::protobuf::uint8* SLBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SLBoundary)
  // optional double start_s = 1;
  if (has_start_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_s(), target);
  }

  // optional double end_s = 2;
  if (has_end_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end_s(), target);
  }

  // optional double start_l = 3;
  if (has_start_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_l(), target);
  }

  // optional double end_l = 4;
  if (has_end_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->end_l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SLBoundary)
  return target;
}

int SLBoundary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SLBoundary)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double start_s = 1;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional double start_l = 3;
    if (has_start_l()) {
      total_size += 1 + 8;
    }

    // optional double end_l = 4;
    if (has_end_l()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SLBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SLBoundary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SLBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SLBoundary)
    MergeFrom(*source);
  }
}

void SLBoundary::MergeFrom(const SLBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SLBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_s()) {
      set_start_s(from.start_s());
    }
    if (from.has_end_s()) {
      set_end_s(from.end_s());
    }
    if (from.has_start_l()) {
      set_start_l(from.start_l());
    }
    if (from.has_end_l()) {
      set_end_l(from.end_l());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SLBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SLBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBoundary::CopyFrom(const SLBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SLBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBoundary::IsInitialized() const {

  return true;
}

void SLBoundary::Swap(SLBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBoundary::InternalSwap(SLBoundary* other) {
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(start_l_, other->start_l_);
  std::swap(end_l_, other->end_l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBoundary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBoundary_descriptor_;
  metadata.reflection = SLBoundary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBoundary

// optional double start_s = 1;
bool SLBoundary::has_start_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLBoundary::set_has_start_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SLBoundary::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLBoundary::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
 double SLBoundary::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SLBoundary.start_s)
  return start_s_;
}
 void SLBoundary::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SLBoundary.start_s)
}

// optional double end_s = 2;
bool SLBoundary::has_end_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SLBoundary::set_has_end_s() {
  _has_bits_[0] |= 0x00000002u;
}
void SLBoundary::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void SLBoundary::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
 double SLBoundary::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SLBoundary.end_s)
  return end_s_;
}
 void SLBoundary::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SLBoundary.end_s)
}

// optional double start_l = 3;
bool SLBoundary::has_start_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SLBoundary::set_has_start_l() {
  _has_bits_[0] |= 0x00000004u;
}
void SLBoundary::clear_has_start_l() {
  _has_bits_[0] &= ~0x00000004u;
}
void SLBoundary::clear_start_l() {
  start_l_ = 0;
  clear_has_start_l();
}
 double SLBoundary::start_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SLBoundary.start_l)
  return start_l_;
}
 void SLBoundary::set_start_l(double value) {
  set_has_start_l();
  start_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SLBoundary.start_l)
}

// optional double end_l = 4;
bool SLBoundary::has_end_l() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SLBoundary::set_has_end_l() {
  _has_bits_[0] |= 0x00000008u;
}
void SLBoundary::clear_has_end_l() {
  _has_bits_[0] &= ~0x00000008u;
}
void SLBoundary::clear_end_l() {
  end_l_ = 0;
  clear_has_end_l();
}
 double SLBoundary::end_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SLBoundary.end_l)
  return end_l_;
}
 void SLBoundary::set_end_l(double value) {
  set_has_end_l();
  end_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SLBoundary.end_l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
