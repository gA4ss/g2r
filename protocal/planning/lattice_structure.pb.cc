// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/lattice_structure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/lattice_structure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* PathTimePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathTimePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SamplePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SamplePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathTimeObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathTimeObstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StopPoint_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlanningTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningTarget_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto() {
  protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/lattice_structure.proto");
  GOOGLE_CHECK(file != NULL);
  PathTimePoint_descriptor_ = file->message_type(0);
  static const int PathTimePoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimePoint, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimePoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimePoint, obstacle_id_),
  };
  PathTimePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathTimePoint_descriptor_,
      PathTimePoint::default_instance_,
      PathTimePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimePoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathTimePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimePoint, _internal_metadata_),
      -1);
  SamplePoint_descriptor_ = file->message_type(1);
  static const int SamplePoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplePoint, path_time_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplePoint, ref_v_),
  };
  SamplePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SamplePoint_descriptor_,
      SamplePoint::default_instance_,
      SamplePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplePoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(SamplePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplePoint, _internal_metadata_),
      -1);
  PathTimeObstacle_descriptor_ = file->message_type(2);
  static const int PathTimeObstacle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, obstacle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, bottom_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, upper_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, upper_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, time_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, time_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, path_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, path_upper_),
  };
  PathTimeObstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathTimeObstacle_descriptor_,
      PathTimeObstacle::default_instance_,
      PathTimeObstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathTimeObstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTimeObstacle, _internal_metadata_),
      -1);
  StopPoint_descriptor_ = file->message_type(3);
  static const int StopPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, type_),
  };
  StopPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopPoint_descriptor_,
      StopPoint::default_instance_,
      StopPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, _internal_metadata_),
      -1);
  StopPoint_Type_descriptor_ = StopPoint_descriptor_->enum_type(0);
  PlanningTarget_descriptor_ = file->message_type(4);
  static const int PlanningTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, cruise_speed_),
  };
  PlanningTarget_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlanningTarget_descriptor_,
      PlanningTarget::default_instance_,
      PlanningTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlanningTarget),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2flattice_5fstructure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathTimePoint_descriptor_, &PathTimePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SamplePoint_descriptor_, &SamplePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathTimeObstacle_descriptor_, &PathTimeObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopPoint_descriptor_, &StopPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlanningTarget_descriptor_, &PlanningTarget::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto() {
  delete PathTimePoint::default_instance_;
  delete PathTimePoint_reflection_;
  delete SamplePoint::default_instance_;
  delete SamplePoint_reflection_;
  delete PathTimeObstacle::default_instance_;
  delete PathTimeObstacle_reflection_;
  delete StopPoint::default_instance_;
  delete StopPoint_reflection_;
  delete PlanningTarget::default_instance_;
  delete PlanningTarget_reflection_;
}

void protobuf_AddDesc_planning_2flattice_5fstructure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2flattice_5fstructure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n planning/lattice_structure.proto\022\017apol"
    "lo.planning\":\n\rPathTimePoint\022\t\n\001t\030\001 \001(\001\022"
    "\t\n\001s\030\002 \001(\001\022\023\n\013obstacle_id\030\004 \001(\t\"U\n\013Sampl"
    "ePoint\0227\n\017path_time_point\030\001 \001(\0132\036.apollo"
    ".planning.PathTimePoint\022\r\n\005ref_v\030\002 \001(\001\"\313"
    "\002\n\020PathTimeObstacle\022\023\n\013obstacle_id\030\001 \001(\t"
    "\0223\n\013bottom_left\030\002 \001(\0132\036.apollo.planning."
    "PathTimePoint\0222\n\nupper_left\030\003 \001(\0132\036.apol"
    "lo.planning.PathTimePoint\0223\n\013upper_right"
    "\030\004 \001(\0132\036.apollo.planning.PathTimePoint\0224"
    "\n\014bottom_right\030\005 \001(\0132\036.apollo.planning.P"
    "athTimePoint\022\022\n\ntime_lower\030\006 \001(\001\022\022\n\ntime"
    "_upper\030\007 \001(\001\022\022\n\npath_lower\030\010 \001(\001\022\022\n\npath"
    "_upper\030\t \001(\001\"g\n\tStopPoint\022\t\n\001s\030\001 \002(\001\0223\n\004"
    "type\030\002 \002(\0162\037.apollo.planning.StopPoint.T"
    "ype:\004HARD\"\032\n\004Type\022\010\n\004HARD\020\000\022\010\n\004SOFT\020\001\"V\n"
    "\016PlanningTarget\022.\n\nstop_point\030\001 \001(\0132\032.ap"
    "ollo.planning.StopPoint\022\024\n\014cruise_speed\030"
    "\002 \001(\001", 725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/lattice_structure.proto", &protobuf_RegisterTypes);
  PathTimePoint::default_instance_ = new PathTimePoint();
  SamplePoint::default_instance_ = new SamplePoint();
  PathTimeObstacle::default_instance_ = new PathTimeObstacle();
  StopPoint::default_instance_ = new StopPoint();
  PlanningTarget::default_instance_ = new PlanningTarget();
  PathTimePoint::default_instance_->InitAsDefaultInstance();
  SamplePoint::default_instance_->InitAsDefaultInstance();
  PathTimeObstacle::default_instance_->InitAsDefaultInstance();
  StopPoint::default_instance_->InitAsDefaultInstance();
  PlanningTarget::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2flattice_5fstructure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2flattice_5fstructure_2eproto {
  StaticDescriptorInitializer_planning_2flattice_5fstructure_2eproto() {
    protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  }
} static_descriptor_initializer_planning_2flattice_5fstructure_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathTimePoint::kTFieldNumber;
const int PathTimePoint::kSFieldNumber;
const int PathTimePoint::kObstacleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathTimePoint::PathTimePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathTimePoint)
}

void PathTimePoint::InitAsDefaultInstance() {
}

PathTimePoint::PathTimePoint(const PathTimePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathTimePoint)
}

void PathTimePoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  t_ = 0;
  s_ = 0;
  obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathTimePoint::~PathTimePoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathTimePoint)
  SharedDtor();
}

void PathTimePoint::SharedDtor() {
  obstacle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PathTimePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathTimePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathTimePoint_descriptor_;
}

const PathTimePoint& PathTimePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  return *default_instance_;
}

PathTimePoint* PathTimePoint::default_instance_ = NULL;

PathTimePoint* PathTimePoint::New(::google::protobuf::Arena* arena) const {
  PathTimePoint* n = new PathTimePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathTimePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathTimePoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathTimePoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathTimePoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(t_, s_);
    if (has_obstacle_id()) {
      obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathTimePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathTimePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double t = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_s;
        break;
      }

      // optional double s = 2;
      case 2: {
        if (tag == 17) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_obstacle_id;
        break;
      }

      // optional string obstacle_id = 4;
      case 4: {
        if (tag == 34) {
         parse_obstacle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obstacle_id().data(), this->obstacle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.PathTimePoint.obstacle_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathTimePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathTimePoint)
  return false;
#undef DO_
}

void PathTimePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathTimePoint)
  // optional double t = 1;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->t(), output);
  }

  // optional double s = 2;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // optional string obstacle_id = 4;
  if (has_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), this->obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathTimePoint.obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->obstacle_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathTimePoint)
}

::google::protobuf::uint8* PathTimePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathTimePoint)
  // optional double t = 1;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->t(), target);
  }

  // optional double s = 2;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // optional string obstacle_id = 4;
  if (has_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), this->obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathTimePoint.obstacle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->obstacle_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathTimePoint)
  return target;
}

int PathTimePoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathTimePoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double t = 1;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double s = 2;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional string obstacle_id = 4;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obstacle_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathTimePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathTimePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathTimePoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathTimePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathTimePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathTimePoint)
    MergeFrom(*source);
  }
}

void PathTimePoint::MergeFrom(const PathTimePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathTimePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_obstacle_id()) {
      set_has_obstacle_id();
      obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obstacle_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathTimePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathTimePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathTimePoint::CopyFrom(const PathTimePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathTimePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTimePoint::IsInitialized() const {

  return true;
}

void PathTimePoint::Swap(PathTimePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathTimePoint::InternalSwap(PathTimePoint* other) {
  std::swap(t_, other->t_);
  std::swap(s_, other->s_);
  obstacle_id_.Swap(&other->obstacle_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathTimePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathTimePoint_descriptor_;
  metadata.reflection = PathTimePoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathTimePoint

// optional double t = 1;
bool PathTimePoint::has_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathTimePoint::set_has_t() {
  _has_bits_[0] |= 0x00000001u;
}
void PathTimePoint::clear_has_t() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathTimePoint::clear_t() {
  t_ = 0;
  clear_has_t();
}
 double PathTimePoint::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.t)
  return t_;
}
 void PathTimePoint::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.t)
}

// optional double s = 2;
bool PathTimePoint::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathTimePoint::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
void PathTimePoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathTimePoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double PathTimePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.s)
  return s_;
}
 void PathTimePoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.s)
}

// optional string obstacle_id = 4;
bool PathTimePoint::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathTimePoint::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PathTimePoint::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathTimePoint::clear_obstacle_id() {
  obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obstacle_id();
}
 const ::std::string& PathTimePoint::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.obstacle_id)
  return obstacle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathTimePoint::set_obstacle_id(const ::std::string& value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.obstacle_id)
}
 void PathTimePoint::set_obstacle_id(const char* value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.PathTimePoint.obstacle_id)
}
 void PathTimePoint::set_obstacle_id(const char* value, size_t size) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.PathTimePoint.obstacle_id)
}
 ::std::string* PathTimePoint::mutable_obstacle_id() {
  set_has_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimePoint.obstacle_id)
  return obstacle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathTimePoint::release_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimePoint.obstacle_id)
  clear_has_obstacle_id();
  return obstacle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathTimePoint::set_allocated_obstacle_id(::std::string* obstacle_id) {
  if (obstacle_id != NULL) {
    set_has_obstacle_id();
  } else {
    clear_has_obstacle_id();
  }
  obstacle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obstacle_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimePoint.obstacle_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SamplePoint::kPathTimePointFieldNumber;
const int SamplePoint::kRefVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SamplePoint::SamplePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SamplePoint)
}

void SamplePoint::InitAsDefaultInstance() {
  path_time_point_ = const_cast< ::apollo::planning::PathTimePoint*>(&::apollo::planning::PathTimePoint::default_instance());
}

SamplePoint::SamplePoint(const SamplePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SamplePoint)
}

void SamplePoint::SharedCtor() {
  _cached_size_ = 0;
  path_time_point_ = NULL;
  ref_v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SamplePoint::~SamplePoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.SamplePoint)
  SharedDtor();
}

void SamplePoint::SharedDtor() {
  if (this != default_instance_) {
    delete path_time_point_;
  }
}

void SamplePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SamplePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamplePoint_descriptor_;
}

const SamplePoint& SamplePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  return *default_instance_;
}

SamplePoint* SamplePoint::default_instance_ = NULL;

SamplePoint* SamplePoint::New(::google::protobuf::Arena* arena) const {
  SamplePoint* n = new SamplePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SamplePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SamplePoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path_time_point()) {
      if (path_time_point_ != NULL) path_time_point_->::apollo::planning::PathTimePoint::Clear();
    }
    ref_v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SamplePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SamplePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.PathTimePoint path_time_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_time_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ref_v;
        break;
      }

      // optional double ref_v = 2;
      case 2: {
        if (tag == 17) {
         parse_ref_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_v_)));
          set_has_ref_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SamplePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SamplePoint)
  return false;
#undef DO_
}

void SamplePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SamplePoint)
  // optional .apollo.planning.PathTimePoint path_time_point = 1;
  if (has_path_time_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_time_point_, output);
  }

  // optional double ref_v = 2;
  if (has_ref_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SamplePoint)
}

::google::protobuf::uint8* SamplePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SamplePoint)
  // optional .apollo.planning.PathTimePoint path_time_point = 1;
  if (has_path_time_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_time_point_, false, target);
  }

  // optional double ref_v = 2;
  if (has_ref_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SamplePoint)
  return target;
}

int SamplePoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SamplePoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.PathTimePoint path_time_point = 1;
    if (has_path_time_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_time_point_);
    }

    // optional double ref_v = 2;
    if (has_ref_v()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SamplePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SamplePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SamplePoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SamplePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SamplePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SamplePoint)
    MergeFrom(*source);
  }
}

void SamplePoint::MergeFrom(const SamplePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SamplePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_time_point()) {
      mutable_path_time_point()->::apollo::planning::PathTimePoint::MergeFrom(from.path_time_point());
    }
    if (from.has_ref_v()) {
      set_ref_v(from.ref_v());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SamplePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SamplePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplePoint::CopyFrom(const SamplePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SamplePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplePoint::IsInitialized() const {

  return true;
}

void SamplePoint::Swap(SamplePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SamplePoint::InternalSwap(SamplePoint* other) {
  std::swap(path_time_point_, other->path_time_point_);
  std::swap(ref_v_, other->ref_v_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SamplePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SamplePoint_descriptor_;
  metadata.reflection = SamplePoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SamplePoint

// optional .apollo.planning.PathTimePoint path_time_point = 1;
bool SamplePoint::has_path_time_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SamplePoint::set_has_path_time_point() {
  _has_bits_[0] |= 0x00000001u;
}
void SamplePoint::clear_has_path_time_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void SamplePoint::clear_path_time_point() {
  if (path_time_point_ != NULL) path_time_point_->::apollo::planning::PathTimePoint::Clear();
  clear_has_path_time_point();
}
const ::apollo::planning::PathTimePoint& SamplePoint::path_time_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SamplePoint.path_time_point)
  return path_time_point_ != NULL ? *path_time_point_ : *default_instance_->path_time_point_;
}
::apollo::planning::PathTimePoint* SamplePoint::mutable_path_time_point() {
  set_has_path_time_point();
  if (path_time_point_ == NULL) {
    path_time_point_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.SamplePoint.path_time_point)
  return path_time_point_;
}
::apollo::planning::PathTimePoint* SamplePoint::release_path_time_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.SamplePoint.path_time_point)
  clear_has_path_time_point();
  ::apollo::planning::PathTimePoint* temp = path_time_point_;
  path_time_point_ = NULL;
  return temp;
}
void SamplePoint::set_allocated_path_time_point(::apollo::planning::PathTimePoint* path_time_point) {
  delete path_time_point_;
  path_time_point_ = path_time_point;
  if (path_time_point) {
    set_has_path_time_point();
  } else {
    clear_has_path_time_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SamplePoint.path_time_point)
}

// optional double ref_v = 2;
bool SamplePoint::has_ref_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SamplePoint::set_has_ref_v() {
  _has_bits_[0] |= 0x00000002u;
}
void SamplePoint::clear_has_ref_v() {
  _has_bits_[0] &= ~0x00000002u;
}
void SamplePoint::clear_ref_v() {
  ref_v_ = 0;
  clear_has_ref_v();
}
 double SamplePoint::ref_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SamplePoint.ref_v)
  return ref_v_;
}
 void SamplePoint::set_ref_v(double value) {
  set_has_ref_v();
  ref_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SamplePoint.ref_v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathTimeObstacle::kObstacleIdFieldNumber;
const int PathTimeObstacle::kBottomLeftFieldNumber;
const int PathTimeObstacle::kUpperLeftFieldNumber;
const int PathTimeObstacle::kUpperRightFieldNumber;
const int PathTimeObstacle::kBottomRightFieldNumber;
const int PathTimeObstacle::kTimeLowerFieldNumber;
const int PathTimeObstacle::kTimeUpperFieldNumber;
const int PathTimeObstacle::kPathLowerFieldNumber;
const int PathTimeObstacle::kPathUpperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathTimeObstacle::PathTimeObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathTimeObstacle)
}

void PathTimeObstacle::InitAsDefaultInstance() {
  bottom_left_ = const_cast< ::apollo::planning::PathTimePoint*>(&::apollo::planning::PathTimePoint::default_instance());
  upper_left_ = const_cast< ::apollo::planning::PathTimePoint*>(&::apollo::planning::PathTimePoint::default_instance());
  upper_right_ = const_cast< ::apollo::planning::PathTimePoint*>(&::apollo::planning::PathTimePoint::default_instance());
  bottom_right_ = const_cast< ::apollo::planning::PathTimePoint*>(&::apollo::planning::PathTimePoint::default_instance());
}

PathTimeObstacle::PathTimeObstacle(const PathTimeObstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathTimeObstacle)
}

void PathTimeObstacle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bottom_left_ = NULL;
  upper_left_ = NULL;
  upper_right_ = NULL;
  bottom_right_ = NULL;
  time_lower_ = 0;
  time_upper_ = 0;
  path_lower_ = 0;
  path_upper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathTimeObstacle::~PathTimeObstacle() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathTimeObstacle)
  SharedDtor();
}

void PathTimeObstacle::SharedDtor() {
  obstacle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete bottom_left_;
    delete upper_left_;
    delete upper_right_;
    delete bottom_right_;
  }
}

void PathTimeObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathTimeObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathTimeObstacle_descriptor_;
}

const PathTimeObstacle& PathTimeObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  return *default_instance_;
}

PathTimeObstacle* PathTimeObstacle::default_instance_ = NULL;

PathTimeObstacle* PathTimeObstacle::New(::google::protobuf::Arena* arena) const {
  PathTimeObstacle* n = new PathTimeObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathTimeObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathTimeObstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathTimeObstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathTimeObstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(time_lower_, path_lower_);
    if (has_obstacle_id()) {
      obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bottom_left()) {
      if (bottom_left_ != NULL) bottom_left_->::apollo::planning::PathTimePoint::Clear();
    }
    if (has_upper_left()) {
      if (upper_left_ != NULL) upper_left_->::apollo::planning::PathTimePoint::Clear();
    }
    if (has_upper_right()) {
      if (upper_right_ != NULL) upper_right_->::apollo::planning::PathTimePoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::apollo::planning::PathTimePoint::Clear();
    }
  }
  path_upper_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathTimeObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathTimeObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string obstacle_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obstacle_id().data(), this->obstacle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.PathTimeObstacle.obstacle_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom_left;
        break;
      }

      // optional .apollo.planning.PathTimePoint bottom_left = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upper_left;
        break;
      }

      // optional .apollo.planning.PathTimePoint upper_left = 3;
      case 3: {
        if (tag == 26) {
         parse_upper_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upper_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upper_right;
        break;
      }

      // optional .apollo.planning.PathTimePoint upper_right = 4;
      case 4: {
        if (tag == 34) {
         parse_upper_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upper_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bottom_right;
        break;
      }

      // optional .apollo.planning.PathTimePoint bottom_right = 5;
      case 5: {
        if (tag == 42) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_time_lower;
        break;
      }

      // optional double time_lower = 6;
      case 6: {
        if (tag == 49) {
         parse_time_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_lower_)));
          set_has_time_lower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_time_upper;
        break;
      }

      // optional double time_upper = 7;
      case 7: {
        if (tag == 57) {
         parse_time_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_upper_)));
          set_has_time_upper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_path_lower;
        break;
      }

      // optional double path_lower = 8;
      case 8: {
        if (tag == 65) {
         parse_path_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_lower_)));
          set_has_path_lower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_path_upper;
        break;
      }

      // optional double path_upper = 9;
      case 9: {
        if (tag == 73) {
         parse_path_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_upper_)));
          set_has_path_upper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathTimeObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathTimeObstacle)
  return false;
#undef DO_
}

void PathTimeObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathTimeObstacle)
  // optional string obstacle_id = 1;
  if (has_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), this->obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathTimeObstacle.obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obstacle_id(), output);
  }

  // optional .apollo.planning.PathTimePoint bottom_left = 2;
  if (has_bottom_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bottom_left_, output);
  }

  // optional .apollo.planning.PathTimePoint upper_left = 3;
  if (has_upper_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->upper_left_, output);
  }

  // optional .apollo.planning.PathTimePoint upper_right = 4;
  if (has_upper_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->upper_right_, output);
  }

  // optional .apollo.planning.PathTimePoint bottom_right = 5;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bottom_right_, output);
  }

  // optional double time_lower = 6;
  if (has_time_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->time_lower(), output);
  }

  // optional double time_upper = 7;
  if (has_time_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time_upper(), output);
  }

  // optional double path_lower = 8;
  if (has_path_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->path_lower(), output);
  }

  // optional double path_upper = 9;
  if (has_path_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->path_upper(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathTimeObstacle)
}

::google::protobuf::uint8* PathTimeObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathTimeObstacle)
  // optional string obstacle_id = 1;
  if (has_obstacle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), this->obstacle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathTimeObstacle.obstacle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obstacle_id(), target);
  }

  // optional .apollo.planning.PathTimePoint bottom_left = 2;
  if (has_bottom_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bottom_left_, false, target);
  }

  // optional .apollo.planning.PathTimePoint upper_left = 3;
  if (has_upper_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->upper_left_, false, target);
  }

  // optional .apollo.planning.PathTimePoint upper_right = 4;
  if (has_upper_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->upper_right_, false, target);
  }

  // optional .apollo.planning.PathTimePoint bottom_right = 5;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bottom_right_, false, target);
  }

  // optional double time_lower = 6;
  if (has_time_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->time_lower(), target);
  }

  // optional double time_upper = 7;
  if (has_time_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time_upper(), target);
  }

  // optional double path_lower = 8;
  if (has_path_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->path_lower(), target);
  }

  // optional double path_upper = 9;
  if (has_path_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->path_upper(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathTimeObstacle)
  return target;
}

int PathTimeObstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathTimeObstacle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string obstacle_id = 1;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obstacle_id());
    }

    // optional .apollo.planning.PathTimePoint bottom_left = 2;
    if (has_bottom_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bottom_left_);
    }

    // optional .apollo.planning.PathTimePoint upper_left = 3;
    if (has_upper_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upper_left_);
    }

    // optional .apollo.planning.PathTimePoint upper_right = 4;
    if (has_upper_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upper_right_);
    }

    // optional .apollo.planning.PathTimePoint bottom_right = 5;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bottom_right_);
    }

    // optional double time_lower = 6;
    if (has_time_lower()) {
      total_size += 1 + 8;
    }

    // optional double time_upper = 7;
    if (has_time_upper()) {
      total_size += 1 + 8;
    }

    // optional double path_lower = 8;
    if (has_path_lower()) {
      total_size += 1 + 8;
    }

  }
  // optional double path_upper = 9;
  if (has_path_upper()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathTimeObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathTimeObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathTimeObstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathTimeObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathTimeObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathTimeObstacle)
    MergeFrom(*source);
  }
}

void PathTimeObstacle::MergeFrom(const PathTimeObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathTimeObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obstacle_id()) {
      set_has_obstacle_id();
      obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obstacle_id_);
    }
    if (from.has_bottom_left()) {
      mutable_bottom_left()->::apollo::planning::PathTimePoint::MergeFrom(from.bottom_left());
    }
    if (from.has_upper_left()) {
      mutable_upper_left()->::apollo::planning::PathTimePoint::MergeFrom(from.upper_left());
    }
    if (from.has_upper_right()) {
      mutable_upper_right()->::apollo::planning::PathTimePoint::MergeFrom(from.upper_right());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::apollo::planning::PathTimePoint::MergeFrom(from.bottom_right());
    }
    if (from.has_time_lower()) {
      set_time_lower(from.time_lower());
    }
    if (from.has_time_upper()) {
      set_time_upper(from.time_upper());
    }
    if (from.has_path_lower()) {
      set_path_lower(from.path_lower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_path_upper()) {
      set_path_upper(from.path_upper());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathTimeObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathTimeObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathTimeObstacle::CopyFrom(const PathTimeObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathTimeObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTimeObstacle::IsInitialized() const {

  return true;
}

void PathTimeObstacle::Swap(PathTimeObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathTimeObstacle::InternalSwap(PathTimeObstacle* other) {
  obstacle_id_.Swap(&other->obstacle_id_);
  std::swap(bottom_left_, other->bottom_left_);
  std::swap(upper_left_, other->upper_left_);
  std::swap(upper_right_, other->upper_right_);
  std::swap(bottom_right_, other->bottom_right_);
  std::swap(time_lower_, other->time_lower_);
  std::swap(time_upper_, other->time_upper_);
  std::swap(path_lower_, other->path_lower_);
  std::swap(path_upper_, other->path_upper_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathTimeObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathTimeObstacle_descriptor_;
  metadata.reflection = PathTimeObstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathTimeObstacle

// optional string obstacle_id = 1;
bool PathTimeObstacle::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathTimeObstacle::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PathTimeObstacle::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathTimeObstacle::clear_obstacle_id() {
  obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obstacle_id();
}
 const ::std::string& PathTimeObstacle::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.obstacle_id)
  return obstacle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathTimeObstacle::set_obstacle_id(const ::std::string& value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.obstacle_id)
}
 void PathTimeObstacle::set_obstacle_id(const char* value) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.PathTimeObstacle.obstacle_id)
}
 void PathTimeObstacle::set_obstacle_id(const char* value, size_t size) {
  set_has_obstacle_id();
  obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.PathTimeObstacle.obstacle_id)
}
 ::std::string* PathTimeObstacle::mutable_obstacle_id() {
  set_has_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.obstacle_id)
  return obstacle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathTimeObstacle::release_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.obstacle_id)
  clear_has_obstacle_id();
  return obstacle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathTimeObstacle::set_allocated_obstacle_id(::std::string* obstacle_id) {
  if (obstacle_id != NULL) {
    set_has_obstacle_id();
  } else {
    clear_has_obstacle_id();
  }
  obstacle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obstacle_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.obstacle_id)
}

// optional .apollo.planning.PathTimePoint bottom_left = 2;
bool PathTimeObstacle::has_bottom_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathTimeObstacle::set_has_bottom_left() {
  _has_bits_[0] |= 0x00000002u;
}
void PathTimeObstacle::clear_has_bottom_left() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathTimeObstacle::clear_bottom_left() {
  if (bottom_left_ != NULL) bottom_left_->::apollo::planning::PathTimePoint::Clear();
  clear_has_bottom_left();
}
const ::apollo::planning::PathTimePoint& PathTimeObstacle::bottom_left() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.bottom_left)
  return bottom_left_ != NULL ? *bottom_left_ : *default_instance_->bottom_left_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_bottom_left() {
  set_has_bottom_left();
  if (bottom_left_ == NULL) {
    bottom_left_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.bottom_left)
  return bottom_left_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::release_bottom_left() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.bottom_left)
  clear_has_bottom_left();
  ::apollo::planning::PathTimePoint* temp = bottom_left_;
  bottom_left_ = NULL;
  return temp;
}
void PathTimeObstacle::set_allocated_bottom_left(::apollo::planning::PathTimePoint* bottom_left) {
  delete bottom_left_;
  bottom_left_ = bottom_left;
  if (bottom_left) {
    set_has_bottom_left();
  } else {
    clear_has_bottom_left();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.bottom_left)
}

// optional .apollo.planning.PathTimePoint upper_left = 3;
bool PathTimeObstacle::has_upper_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathTimeObstacle::set_has_upper_left() {
  _has_bits_[0] |= 0x00000004u;
}
void PathTimeObstacle::clear_has_upper_left() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathTimeObstacle::clear_upper_left() {
  if (upper_left_ != NULL) upper_left_->::apollo::planning::PathTimePoint::Clear();
  clear_has_upper_left();
}
const ::apollo::planning::PathTimePoint& PathTimeObstacle::upper_left() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.upper_left)
  return upper_left_ != NULL ? *upper_left_ : *default_instance_->upper_left_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_upper_left() {
  set_has_upper_left();
  if (upper_left_ == NULL) {
    upper_left_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.upper_left)
  return upper_left_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::release_upper_left() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.upper_left)
  clear_has_upper_left();
  ::apollo::planning::PathTimePoint* temp = upper_left_;
  upper_left_ = NULL;
  return temp;
}
void PathTimeObstacle::set_allocated_upper_left(::apollo::planning::PathTimePoint* upper_left) {
  delete upper_left_;
  upper_left_ = upper_left;
  if (upper_left) {
    set_has_upper_left();
  } else {
    clear_has_upper_left();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.upper_left)
}

// optional .apollo.planning.PathTimePoint upper_right = 4;
bool PathTimeObstacle::has_upper_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PathTimeObstacle::set_has_upper_right() {
  _has_bits_[0] |= 0x00000008u;
}
void PathTimeObstacle::clear_has_upper_right() {
  _has_bits_[0] &= ~0x00000008u;
}
void PathTimeObstacle::clear_upper_right() {
  if (upper_right_ != NULL) upper_right_->::apollo::planning::PathTimePoint::Clear();
  clear_has_upper_right();
}
const ::apollo::planning::PathTimePoint& PathTimeObstacle::upper_right() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.upper_right)
  return upper_right_ != NULL ? *upper_right_ : *default_instance_->upper_right_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_upper_right() {
  set_has_upper_right();
  if (upper_right_ == NULL) {
    upper_right_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.upper_right)
  return upper_right_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::release_upper_right() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.upper_right)
  clear_has_upper_right();
  ::apollo::planning::PathTimePoint* temp = upper_right_;
  upper_right_ = NULL;
  return temp;
}
void PathTimeObstacle::set_allocated_upper_right(::apollo::planning::PathTimePoint* upper_right) {
  delete upper_right_;
  upper_right_ = upper_right;
  if (upper_right) {
    set_has_upper_right();
  } else {
    clear_has_upper_right();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.upper_right)
}

// optional .apollo.planning.PathTimePoint bottom_right = 5;
bool PathTimeObstacle::has_bottom_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PathTimeObstacle::set_has_bottom_right() {
  _has_bits_[0] |= 0x00000010u;
}
void PathTimeObstacle::clear_has_bottom_right() {
  _has_bits_[0] &= ~0x00000010u;
}
void PathTimeObstacle::clear_bottom_right() {
  if (bottom_right_ != NULL) bottom_right_->::apollo::planning::PathTimePoint::Clear();
  clear_has_bottom_right();
}
const ::apollo::planning::PathTimePoint& PathTimeObstacle::bottom_right() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.bottom_right)
  return bottom_right_ != NULL ? *bottom_right_ : *default_instance_->bottom_right_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_bottom_right() {
  set_has_bottom_right();
  if (bottom_right_ == NULL) {
    bottom_right_ = new ::apollo::planning::PathTimePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.bottom_right)
  return bottom_right_;
}
::apollo::planning::PathTimePoint* PathTimeObstacle::release_bottom_right() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.bottom_right)
  clear_has_bottom_right();
  ::apollo::planning::PathTimePoint* temp = bottom_right_;
  bottom_right_ = NULL;
  return temp;
}
void PathTimeObstacle::set_allocated_bottom_right(::apollo::planning::PathTimePoint* bottom_right) {
  delete bottom_right_;
  bottom_right_ = bottom_right;
  if (bottom_right) {
    set_has_bottom_right();
  } else {
    clear_has_bottom_right();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.bottom_right)
}

// optional double time_lower = 6;
bool PathTimeObstacle::has_time_lower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PathTimeObstacle::set_has_time_lower() {
  _has_bits_[0] |= 0x00000020u;
}
void PathTimeObstacle::clear_has_time_lower() {
  _has_bits_[0] &= ~0x00000020u;
}
void PathTimeObstacle::clear_time_lower() {
  time_lower_ = 0;
  clear_has_time_lower();
}
 double PathTimeObstacle::time_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.time_lower)
  return time_lower_;
}
 void PathTimeObstacle::set_time_lower(double value) {
  set_has_time_lower();
  time_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.time_lower)
}

// optional double time_upper = 7;
bool PathTimeObstacle::has_time_upper() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PathTimeObstacle::set_has_time_upper() {
  _has_bits_[0] |= 0x00000040u;
}
void PathTimeObstacle::clear_has_time_upper() {
  _has_bits_[0] &= ~0x00000040u;
}
void PathTimeObstacle::clear_time_upper() {
  time_upper_ = 0;
  clear_has_time_upper();
}
 double PathTimeObstacle::time_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.time_upper)
  return time_upper_;
}
 void PathTimeObstacle::set_time_upper(double value) {
  set_has_time_upper();
  time_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.time_upper)
}

// optional double path_lower = 8;
bool PathTimeObstacle::has_path_lower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PathTimeObstacle::set_has_path_lower() {
  _has_bits_[0] |= 0x00000080u;
}
void PathTimeObstacle::clear_has_path_lower() {
  _has_bits_[0] &= ~0x00000080u;
}
void PathTimeObstacle::clear_path_lower() {
  path_lower_ = 0;
  clear_has_path_lower();
}
 double PathTimeObstacle::path_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.path_lower)
  return path_lower_;
}
 void PathTimeObstacle::set_path_lower(double value) {
  set_has_path_lower();
  path_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.path_lower)
}

// optional double path_upper = 9;
bool PathTimeObstacle::has_path_upper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PathTimeObstacle::set_has_path_upper() {
  _has_bits_[0] |= 0x00000100u;
}
void PathTimeObstacle::clear_has_path_upper() {
  _has_bits_[0] &= ~0x00000100u;
}
void PathTimeObstacle::clear_path_upper() {
  path_upper_ = 0;
  clear_has_path_upper();
}
 double PathTimeObstacle::path_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.path_upper)
  return path_upper_;
}
 void PathTimeObstacle::set_path_upper(double value) {
  set_has_path_upper();
  path_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.path_upper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* StopPoint_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopPoint_Type_descriptor_;
}
bool StopPoint_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StopPoint_Type StopPoint::HARD;
const StopPoint_Type StopPoint::SOFT;
const StopPoint_Type StopPoint::Type_MIN;
const StopPoint_Type StopPoint::Type_MAX;
const int StopPoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopPoint::kSFieldNumber;
const int StopPoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopPoint::StopPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopPoint)
}

void StopPoint::InitAsDefaultInstance() {
}

StopPoint::StopPoint(const StopPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopPoint)
}

void StopPoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopPoint::~StopPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopPoint)
  SharedDtor();
}

void StopPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopPoint_descriptor_;
}

const StopPoint& StopPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  return *default_instance_;
}

StopPoint* StopPoint::default_instance_ = NULL;

StopPoint* StopPoint::New(::google::protobuf::Arena* arena) const {
  StopPoint* n = new StopPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(s_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::StopPoint_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::planning::StopPoint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopPoint)
  return false;
#undef DO_
}

void StopPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopPoint)
  // required double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopPoint)
}

::google::protobuf::uint8* StopPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopPoint)
  // required double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopPoint)
  return target;
}

int StopPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.planning.StopPoint)
  int total_size = 0;

  if (has_s()) {
    // required double s = 1;
    total_size += 1 + 8;
  }

  if (has_type()) {
    // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int StopPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopPoint)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double s = 1;
    total_size += 1 + 8;

    // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopPoint)
    MergeFrom(*source);
  }
}

void StopPoint::MergeFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPoint::CopyFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StopPoint::Swap(StopPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopPoint::InternalSwap(StopPoint* other) {
  std::swap(s_, other->s_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopPoint_descriptor_;
  metadata.reflection = StopPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopPoint

// required double s = 1;
bool StopPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void StopPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double StopPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopPoint.s)
  return s_;
}
 void StopPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopPoint.s)
}

// required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
bool StopPoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopPoint::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void StopPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopPoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::planning::StopPoint_Type StopPoint::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopPoint.type)
  return static_cast< ::apollo::planning::StopPoint_Type >(type_);
}
 void StopPoint::set_type(::apollo::planning::StopPoint_Type value) {
  assert(::apollo::planning::StopPoint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StopPoint.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningTarget::kStopPointFieldNumber;
const int PlanningTarget::kCruiseSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningTarget::PlanningTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningTarget)
}

void PlanningTarget::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::apollo::planning::StopPoint*>(&::apollo::planning::StopPoint::default_instance());
}

PlanningTarget::PlanningTarget(const PlanningTarget& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningTarget)
}

void PlanningTarget::SharedCtor() {
  _cached_size_ = 0;
  stop_point_ = NULL;
  cruise_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanningTarget::~PlanningTarget() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningTarget)
  SharedDtor();
}

void PlanningTarget::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
  }
}

void PlanningTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningTarget_descriptor_;
}

const PlanningTarget& PlanningTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2flattice_5fstructure_2eproto();
  return *default_instance_;
}

PlanningTarget* PlanningTarget::default_instance_ = NULL;

PlanningTarget* PlanningTarget::New(::google::protobuf::Arena* arena) const {
  PlanningTarget* n = new PlanningTarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningTarget)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::apollo::planning::StopPoint::Clear();
    }
    cruise_speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlanningTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.StopPoint stop_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_cruise_speed;
        break;
      }

      // optional double cruise_speed = 2;
      case 2: {
        if (tag == 17) {
         parse_cruise_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_speed_)));
          set_has_cruise_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningTarget)
  return false;
#undef DO_
}

void PlanningTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningTarget)
  // optional .apollo.planning.StopPoint stop_point = 1;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // optional double cruise_speed = 2;
  if (has_cruise_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cruise_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningTarget)
}

::google::protobuf::uint8* PlanningTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningTarget)
  // optional .apollo.planning.StopPoint stop_point = 1;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_point_, false, target);
  }

  // optional double cruise_speed = 2;
  if (has_cruise_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cruise_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningTarget)
  return target;
}

int PlanningTarget::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningTarget)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.StopPoint stop_point = 1;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double cruise_speed = 2;
    if (has_cruise_speed()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningTarget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlanningTarget* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningTarget)
    MergeFrom(*source);
  }
}

void PlanningTarget::MergeFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningTarget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_point()) {
      mutable_stop_point()->::apollo::planning::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_cruise_speed()) {
      set_cruise_speed(from.cruise_speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlanningTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningTarget::CopyFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTarget::IsInitialized() const {

  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  return true;
}

void PlanningTarget::Swap(PlanningTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningTarget::InternalSwap(PlanningTarget* other) {
  std::swap(stop_point_, other->stop_point_);
  std::swap(cruise_speed_, other->cruise_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningTarget_descriptor_;
  metadata.reflection = PlanningTarget_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningTarget

// optional .apollo.planning.StopPoint stop_point = 1;
bool PlanningTarget::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningTarget::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningTarget::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningTarget::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::planning::StopPoint::Clear();
  clear_has_stop_point();
}
const ::apollo::planning::StopPoint& PlanningTarget::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningTarget.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::planning::StopPoint* PlanningTarget::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::planning::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningTarget.stop_point)
  return stop_point_;
}
::apollo::planning::StopPoint* PlanningTarget::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningTarget.stop_point)
  clear_has_stop_point();
  ::apollo::planning::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void PlanningTarget::set_allocated_stop_point(::apollo::planning::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningTarget.stop_point)
}

// optional double cruise_speed = 2;
bool PlanningTarget::has_cruise_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningTarget::set_has_cruise_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningTarget::clear_has_cruise_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningTarget::clear_cruise_speed() {
  cruise_speed_ = 0;
  clear_has_cruise_speed();
}
 double PlanningTarget::cruise_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningTarget.cruise_speed)
  return cruise_speed_;
}
 void PlanningTarget::set_cruise_speed(double value) {
  set_has_cruise_speed();
  cruise_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningTarget.cruise_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
