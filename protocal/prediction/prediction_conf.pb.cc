// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/prediction_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prediction/prediction_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace prediction {

namespace {

const ::google::protobuf::Descriptor* ObstacleConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleConf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ObstacleConf_PredictorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PredictionConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredictionConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prediction_2fprediction_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prediction_2fprediction_5fconf_2eproto() {
  protobuf_AddDesc_prediction_2fprediction_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prediction/prediction_conf.proto");
  GOOGLE_CHECK(file != NULL);
  ObstacleConf_descriptor_ = file->message_type(0);
  static const int ObstacleConf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, obstacle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, obstacle_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, evaluator_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, predictor_type_),
  };
  ObstacleConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObstacleConf_descriptor_,
      ObstacleConf::default_instance_,
      ObstacleConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObstacleConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, _internal_metadata_),
      -1);
  ObstacleConf_ObstacleStatus_descriptor_ = ObstacleConf_descriptor_->enum_type(0);
  ObstacleConf_EvaluatorType_descriptor_ = ObstacleConf_descriptor_->enum_type(1);
  ObstacleConf_PredictorType_descriptor_ = ObstacleConf_descriptor_->enum_type(2);
  PredictionConf_descriptor_ = file->message_type(1);
  static const int PredictionConf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionConf, obstacle_conf_),
  };
  PredictionConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PredictionConf_descriptor_,
      PredictionConf::default_instance_,
      PredictionConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(PredictionConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionConf, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prediction_2fprediction_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObstacleConf_descriptor_, &ObstacleConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PredictionConf_descriptor_, &PredictionConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prediction_2fprediction_5fconf_2eproto() {
  delete ObstacleConf::default_instance_;
  delete ObstacleConf_reflection_;
  delete PredictionConf::default_instance_;
  delete PredictionConf_reflection_;
}

void protobuf_AddDesc_prediction_2fprediction_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prediction_2fprediction_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n prediction/prediction_conf.proto\022\021apol"
    "lo.prediction\032$perception/perception_obs"
    "tacle.proto\"\351\004\n\014ObstacleConf\022A\n\robstacle"
    "_type\030\001 \001(\0162*.apollo.perception.Percepti"
    "onObstacle.Type\022G\n\017obstacle_status\030\002 \001(\016"
    "2..apollo.prediction.ObstacleConf.Obstac"
    "leStatus\022E\n\016evaluator_type\030\003 \001(\0162-.apoll"
    "o.prediction.ObstacleConf.EvaluatorType\022"
    "E\n\016predictor_type\030\004 \001(\0162-.apollo.predict"
    "ion.ObstacleConf.PredictorType\"G\n\016Obstac"
    "leStatus\022\013\n\007ON_LANE\020\000\022\014\n\010OFF_LANE\020\001\022\016\n\nS"
    "TATIONARY\020\003\022\n\n\006MOVING\020\004\"I\n\rEvaluatorType"
    "\022\021\n\rMLP_EVALUATOR\020\000\022\021\n\rRNN_EVALUATOR\020\001\022\022"
    "\n\016COST_EVALUATOR\020\002\"\252\001\n\rPredictorType\022\033\n\027"
    "LANE_SEQUENCE_PREDICTOR\020\000\022\027\n\023FREE_MOVE_P"
    "REDICTOR\020\001\022\026\n\022REGIONAL_PREDICTOR\020\002\022\033\n\027MO"
    "VE_SEQUENCE_PREDICTOR\020\003\022\023\n\017EMPTY_PREDICT"
    "OR\020\004\022\031\n\025SINGLE_LANE_PREDICTOR\020\005\"H\n\016Predi"
    "ctionConf\0226\n\robstacle_conf\030\001 \003(\0132\037.apoll"
    "o.prediction.ObstacleConf", 785);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction/prediction_conf.proto", &protobuf_RegisterTypes);
  ObstacleConf::default_instance_ = new ObstacleConf();
  PredictionConf::default_instance_ = new PredictionConf();
  ObstacleConf::default_instance_->InitAsDefaultInstance();
  PredictionConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prediction_2fprediction_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prediction_2fprediction_5fconf_2eproto {
  StaticDescriptorInitializer_prediction_2fprediction_5fconf_2eproto() {
    protobuf_AddDesc_prediction_2fprediction_5fconf_2eproto();
  }
} static_descriptor_initializer_prediction_2fprediction_5fconf_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleConf_ObstacleStatus_descriptor_;
}
bool ObstacleConf_ObstacleStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleConf_ObstacleStatus ObstacleConf::ON_LANE;
const ObstacleConf_ObstacleStatus ObstacleConf::OFF_LANE;
const ObstacleConf_ObstacleStatus ObstacleConf::STATIONARY;
const ObstacleConf_ObstacleStatus ObstacleConf::MOVING;
const ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MIN;
const ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MAX;
const int ObstacleConf::ObstacleStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleConf_EvaluatorType_descriptor_;
}
bool ObstacleConf_EvaluatorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleConf_EvaluatorType ObstacleConf::MLP_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf::RNN_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf::COST_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MIN;
const ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MAX;
const int ObstacleConf::EvaluatorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstacleConf_PredictorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleConf_PredictorType_descriptor_;
}
bool ObstacleConf_PredictorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleConf_PredictorType ObstacleConf::LANE_SEQUENCE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::FREE_MOVE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::REGIONAL_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::MOVE_SEQUENCE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::EMPTY_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::SINGLE_LANE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::PredictorType_MIN;
const ObstacleConf_PredictorType ObstacleConf::PredictorType_MAX;
const int ObstacleConf::PredictorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleConf::kObstacleTypeFieldNumber;
const int ObstacleConf::kObstacleStatusFieldNumber;
const int ObstacleConf::kEvaluatorTypeFieldNumber;
const int ObstacleConf::kPredictorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleConf::ObstacleConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstacleConf)
}

void ObstacleConf::InitAsDefaultInstance() {
}

ObstacleConf::ObstacleConf(const ObstacleConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleConf)
}

void ObstacleConf::SharedCtor() {
  _cached_size_ = 0;
  obstacle_type_ = 0;
  obstacle_status_ = 0;
  evaluator_type_ = 0;
  predictor_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleConf::~ObstacleConf() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleConf)
  SharedDtor();
}

void ObstacleConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleConf_descriptor_;
}

const ObstacleConf& ObstacleConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fprediction_5fconf_2eproto();
  return *default_instance_;
}

ObstacleConf* ObstacleConf::default_instance_ = NULL;

ObstacleConf* ObstacleConf::New(::google::protobuf::Arena* arena) const {
  ObstacleConf* n = new ObstacleConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ObstacleConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObstacleConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(obstacle_type_, predictor_type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObstacleConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.ObstacleConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_obstacle_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_obstacle_status;
        break;
      }

      // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
      case 2: {
        if (tag == 16) {
         parse_obstacle_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(value)) {
            set_obstacle_status(static_cast< ::apollo::prediction::ObstacleConf_ObstacleStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_evaluator_type;
        break;
      }

      // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
      case 3: {
        if (tag == 24) {
         parse_evaluator_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(value)) {
            set_evaluator_type(static_cast< ::apollo::prediction::ObstacleConf_EvaluatorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_predictor_type;
        break;
      }

      // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
      case 4: {
        if (tag == 32) {
         parse_predictor_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::ObstacleConf_PredictorType_IsValid(value)) {
            set_predictor_type(static_cast< ::apollo::prediction::ObstacleConf_PredictorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.ObstacleConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.ObstacleConf)
  return false;
#undef DO_
}

void ObstacleConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.ObstacleConf)
  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  if (has_obstacle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->obstacle_type(), output);
  }

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  if (has_obstacle_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->obstacle_status(), output);
  }

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  if (has_evaluator_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->evaluator_type(), output);
  }

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  if (has_predictor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->predictor_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.ObstacleConf)
}

::google::protobuf::uint8* ObstacleConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleConf)
  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  if (has_obstacle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->obstacle_type(), target);
  }

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  if (has_obstacle_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->obstacle_status(), target);
  }

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  if (has_evaluator_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->evaluator_type(), target);
  }

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  if (has_predictor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->predictor_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleConf)
  return target;
}

int ObstacleConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
    if (has_obstacle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_type());
    }

    // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
    if (has_obstacle_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_status());
    }

    // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
    if (has_evaluator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->evaluator_type());
    }

    // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
    if (has_predictor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->predictor_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstacleConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObstacleConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstacleConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstacleConf)
    MergeFrom(*source);
  }
}

void ObstacleConf::MergeFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obstacle_type()) {
      set_obstacle_type(from.obstacle_type());
    }
    if (from.has_obstacle_status()) {
      set_obstacle_status(from.obstacle_status());
    }
    if (from.has_evaluator_type()) {
      set_evaluator_type(from.evaluator_type());
    }
    if (from.has_predictor_type()) {
      set_predictor_type(from.predictor_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObstacleConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstacleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleConf::CopyFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleConf::IsInitialized() const {

  return true;
}

void ObstacleConf::Swap(ObstacleConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleConf::InternalSwap(ObstacleConf* other) {
  std::swap(obstacle_type_, other->obstacle_type_);
  std::swap(obstacle_status_, other->obstacle_status_);
  std::swap(evaluator_type_, other->evaluator_type_);
  std::swap(predictor_type_, other->predictor_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleConf_descriptor_;
  metadata.reflection = ObstacleConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleConf

// optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
bool ObstacleConf::has_obstacle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleConf::set_has_obstacle_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleConf::clear_has_obstacle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleConf::clear_obstacle_type() {
  obstacle_type_ = 0;
  clear_has_obstacle_type();
}
 ::apollo::perception::PerceptionObstacle_Type ObstacleConf::obstacle_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(obstacle_type_);
}
 void ObstacleConf::set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_obstacle_type();
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_type)
}

// optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
bool ObstacleConf::has_obstacle_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleConf::set_has_obstacle_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleConf::clear_has_obstacle_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleConf::clear_obstacle_status() {
  obstacle_status_ = 0;
  clear_has_obstacle_status();
}
 ::apollo::prediction::ObstacleConf_ObstacleStatus ObstacleConf::obstacle_status() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_status)
  return static_cast< ::apollo::prediction::ObstacleConf_ObstacleStatus >(obstacle_status_);
}
 void ObstacleConf::set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value) {
  assert(::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(value));
  set_has_obstacle_status();
  obstacle_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_status)
}

// optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
bool ObstacleConf::has_evaluator_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObstacleConf::set_has_evaluator_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ObstacleConf::clear_has_evaluator_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObstacleConf::clear_evaluator_type() {
  evaluator_type_ = 0;
  clear_has_evaluator_type();
}
 ::apollo::prediction::ObstacleConf_EvaluatorType ObstacleConf::evaluator_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.evaluator_type)
  return static_cast< ::apollo::prediction::ObstacleConf_EvaluatorType >(evaluator_type_);
}
 void ObstacleConf::set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value) {
  assert(::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(value));
  set_has_evaluator_type();
  evaluator_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.evaluator_type)
}

// optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
bool ObstacleConf::has_predictor_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObstacleConf::set_has_predictor_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ObstacleConf::clear_has_predictor_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObstacleConf::clear_predictor_type() {
  predictor_type_ = 0;
  clear_has_predictor_type();
}
 ::apollo::prediction::ObstacleConf_PredictorType ObstacleConf::predictor_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.predictor_type)
  return static_cast< ::apollo::prediction::ObstacleConf_PredictorType >(predictor_type_);
}
 void ObstacleConf::set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value) {
  assert(::apollo::prediction::ObstacleConf_PredictorType_IsValid(value));
  set_has_predictor_type();
  predictor_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.predictor_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionConf::kObstacleConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionConf::PredictionConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.PredictionConf)
}

void PredictionConf::InitAsDefaultInstance() {
}

PredictionConf::PredictionConf(const PredictionConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionConf)
}

void PredictionConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredictionConf::~PredictionConf() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionConf)
  SharedDtor();
}

void PredictionConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PredictionConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredictionConf_descriptor_;
}

const PredictionConf& PredictionConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fprediction_5fconf_2eproto();
  return *default_instance_;
}

PredictionConf* PredictionConf::default_instance_ = NULL;

PredictionConf* PredictionConf::New(::google::protobuf::Arena* arena) const {
  PredictionConf* n = new PredictionConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionConf)
  obstacle_conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PredictionConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.PredictionConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_obstacle_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_obstacle_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_obstacle_conf;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.PredictionConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.PredictionConf)
  return false;
#undef DO_
}

void PredictionConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.PredictionConf)
  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  for (unsigned int i = 0, n = this->obstacle_conf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obstacle_conf(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.PredictionConf)
}

::google::protobuf::uint8* PredictionConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionConf)
  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  for (unsigned int i = 0, n = this->obstacle_conf_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->obstacle_conf(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionConf)
  return target;
}

int PredictionConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionConf)
  int total_size = 0;

  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  total_size += 1 * this->obstacle_conf_size();
  for (int i = 0; i < this->obstacle_conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacle_conf(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.PredictionConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PredictionConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.PredictionConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.PredictionConf)
    MergeFrom(*source);
  }
}

void PredictionConf::MergeFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  obstacle_conf_.MergeFrom(from.obstacle_conf_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PredictionConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.PredictionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionConf::CopyFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionConf::IsInitialized() const {

  return true;
}

void PredictionConf::Swap(PredictionConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionConf::InternalSwap(PredictionConf* other) {
  obstacle_conf_.UnsafeArenaSwap(&other->obstacle_conf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredictionConf_descriptor_;
  metadata.reflection = PredictionConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionConf

// repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
int PredictionConf::obstacle_conf_size() const {
  return obstacle_conf_.size();
}
void PredictionConf::clear_obstacle_conf() {
  obstacle_conf_.Clear();
}
const ::apollo::prediction::ObstacleConf& PredictionConf::obstacle_conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Get(index);
}
::apollo::prediction::ObstacleConf* PredictionConf::mutable_obstacle_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Mutable(index);
}
::apollo::prediction::ObstacleConf* PredictionConf::add_obstacle_conf() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
PredictionConf::mutable_obstacle_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionConf.obstacle_conf)
  return &obstacle_conf_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
PredictionConf::obstacle_conf() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
