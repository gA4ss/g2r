// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization/gnss_pnt_result.proto

#ifndef PROTOBUF_localization_2fgnss_5fpnt_5fresult_2eproto__INCLUDED
#define PROTOBUF_localization_2fgnss_5fpnt_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "drivers/gnss/gnss_raw_observation.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
void protobuf_AssignDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
void protobuf_ShutdownFile_localization_2fgnss_5fpnt_5fresult_2eproto();

class GnssPntResult;
class SatDirCosine;

enum PntType {
  PNT_INVALID = 0,
  PNT_SPP = 1,
  PNT_PHASE_TD = 2,
  PNT_CODE_DIFF = 3,
  PNT_RTK_FLOAT = 4,
  PNT_RTK_FIXED = 5
};
bool PntType_IsValid(int value);
const PntType PntType_MIN = PNT_INVALID;
const PntType PntType_MAX = PNT_RTK_FIXED;
const int PntType_ARRAYSIZE = PntType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PntType_descriptor();
inline const ::std::string& PntType_Name(PntType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PntType_descriptor(), value);
}
inline bool PntType_Parse(
    const ::std::string& name, PntType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PntType>(
    PntType_descriptor(), name, value);
}
// ===================================================================

class SatDirCosine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.SatDirCosine) */ {
 public:
  SatDirCosine();
  virtual ~SatDirCosine();

  SatDirCosine(const SatDirCosine& from);

  inline SatDirCosine& operator=(const SatDirCosine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SatDirCosine& default_instance();

  void Swap(SatDirCosine* other);

  // implements Message ----------------------------------------------

  inline SatDirCosine* New() const { return New(NULL); }

  SatDirCosine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SatDirCosine& from);
  void MergeFrom(const SatDirCosine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SatDirCosine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sat_prn = 1;
  bool has_sat_prn() const;
  void clear_sat_prn();
  static const int kSatPrnFieldNumber = 1;
  ::google::protobuf::uint32 sat_prn() const;
  void set_sat_prn(::google::protobuf::uint32 value);

  // optional uint32 sat_sys = 2;
  bool has_sat_sys() const;
  void clear_sat_sys();
  static const int kSatSysFieldNumber = 2;
  ::google::protobuf::uint32 sat_sys() const;
  void set_sat_sys(::google::protobuf::uint32 value);

  // optional double cosine_x = 3;
  bool has_cosine_x() const;
  void clear_cosine_x();
  static const int kCosineXFieldNumber = 3;
  double cosine_x() const;
  void set_cosine_x(double value);

  // optional double cosine_y = 4;
  bool has_cosine_y() const;
  void clear_cosine_y();
  static const int kCosineYFieldNumber = 4;
  double cosine_y() const;
  void set_cosine_y(double value);

  // optional double cosine_z = 5;
  bool has_cosine_z() const;
  void clear_cosine_z();
  static const int kCosineZFieldNumber = 5;
  double cosine_z() const;
  void set_cosine_z(double value);

  // @@protoc_insertion_point(class_scope:apollo.localization.SatDirCosine)
 private:
  inline void set_has_sat_prn();
  inline void clear_has_sat_prn();
  inline void set_has_sat_sys();
  inline void clear_has_sat_sys();
  inline void set_has_cosine_x();
  inline void clear_has_cosine_x();
  inline void set_has_cosine_y();
  inline void clear_has_cosine_y();
  inline void set_has_cosine_z();
  inline void clear_has_cosine_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sat_prn_;
  ::google::protobuf::uint32 sat_sys_;
  double cosine_x_;
  double cosine_y_;
  double cosine_z_;
  friend void  protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  friend void protobuf_AssignDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  friend void protobuf_ShutdownFile_localization_2fgnss_5fpnt_5fresult_2eproto();

  void InitAsDefaultInstance();
  static SatDirCosine* default_instance_;
};
// -------------------------------------------------------------------

class GnssPntResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.GnssPntResult) */ {
 public:
  GnssPntResult();
  virtual ~GnssPntResult();

  GnssPntResult(const GnssPntResult& from);

  inline GnssPntResult& operator=(const GnssPntResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GnssPntResult& default_instance();

  void Swap(GnssPntResult* other);

  // implements Message ----------------------------------------------

  inline GnssPntResult* New() const { return New(NULL); }

  GnssPntResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GnssPntResult& from);
  void MergeFrom(const GnssPntResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GnssPntResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 receiver_id = 1;
  bool has_receiver_id() const;
  void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 1;
  ::google::protobuf::uint32 receiver_id() const;
  void set_receiver_id(::google::protobuf::uint32 value);

  // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
  bool has_time_type() const;
  void clear_time_type();
  static const int kTimeTypeFieldNumber = 2;
  ::apollo::drivers::gnss::GnssTimeType time_type() const;
  void set_time_type(::apollo::drivers::gnss::GnssTimeType value);

  // optional uint32 gnss_week = 3;
  bool has_gnss_week() const;
  void clear_gnss_week();
  static const int kGnssWeekFieldNumber = 3;
  ::google::protobuf::uint32 gnss_week() const;
  void set_gnss_week(::google::protobuf::uint32 value);

  // optional double gnss_second_s = 4;
  bool has_gnss_second_s() const;
  void clear_gnss_second_s();
  static const int kGnssSecondSFieldNumber = 4;
  double gnss_second_s() const;
  void set_gnss_second_s(double value);

  // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
  bool has_pnt_type() const;
  void clear_pnt_type();
  static const int kPntTypeFieldNumber = 5;
  ::apollo::localization::PntType pnt_type() const;
  void set_pnt_type(::apollo::localization::PntType value);

  // optional double pos_x_m = 6;
  bool has_pos_x_m() const;
  void clear_pos_x_m();
  static const int kPosXMFieldNumber = 6;
  double pos_x_m() const;
  void set_pos_x_m(double value);

  // optional double pos_y_m = 7;
  bool has_pos_y_m() const;
  void clear_pos_y_m();
  static const int kPosYMFieldNumber = 7;
  double pos_y_m() const;
  void set_pos_y_m(double value);

  // optional double pos_z_m = 8;
  bool has_pos_z_m() const;
  void clear_pos_z_m();
  static const int kPosZMFieldNumber = 8;
  double pos_z_m() const;
  void set_pos_z_m(double value);

  // optional double std_pos_x_m = 9;
  bool has_std_pos_x_m() const;
  void clear_std_pos_x_m();
  static const int kStdPosXMFieldNumber = 9;
  double std_pos_x_m() const;
  void set_std_pos_x_m(double value);

  // optional double std_pos_y_m = 10;
  bool has_std_pos_y_m() const;
  void clear_std_pos_y_m();
  static const int kStdPosYMFieldNumber = 10;
  double std_pos_y_m() const;
  void set_std_pos_y_m(double value);

  // optional double std_pos_z_m = 11;
  bool has_std_pos_z_m() const;
  void clear_std_pos_z_m();
  static const int kStdPosZMFieldNumber = 11;
  double std_pos_z_m() const;
  void set_std_pos_z_m(double value);

  // optional double vel_x_m = 12;
  bool has_vel_x_m() const;
  void clear_vel_x_m();
  static const int kVelXMFieldNumber = 12;
  double vel_x_m() const;
  void set_vel_x_m(double value);

  // optional double vel_y_m = 13;
  bool has_vel_y_m() const;
  void clear_vel_y_m();
  static const int kVelYMFieldNumber = 13;
  double vel_y_m() const;
  void set_vel_y_m(double value);

  // optional double vel_z_m = 14;
  bool has_vel_z_m() const;
  void clear_vel_z_m();
  static const int kVelZMFieldNumber = 14;
  double vel_z_m() const;
  void set_vel_z_m(double value);

  // optional double std_vel_x_m = 15;
  bool has_std_vel_x_m() const;
  void clear_std_vel_x_m();
  static const int kStdVelXMFieldNumber = 15;
  double std_vel_x_m() const;
  void set_std_vel_x_m(double value);

  // optional double std_vel_y_m = 16;
  bool has_std_vel_y_m() const;
  void clear_std_vel_y_m();
  static const int kStdVelYMFieldNumber = 16;
  double std_vel_y_m() const;
  void set_std_vel_y_m(double value);

  // optional double std_vel_z_m = 17;
  bool has_std_vel_z_m() const;
  void clear_std_vel_z_m();
  static const int kStdVelZMFieldNumber = 17;
  double std_vel_z_m() const;
  void set_std_vel_z_m(double value);

  // optional uint32 sovled_sat_num = 18;
  bool has_sovled_sat_num() const;
  void clear_sovled_sat_num();
  static const int kSovledSatNumFieldNumber = 18;
  ::google::protobuf::uint32 sovled_sat_num() const;
  void set_sovled_sat_num(::google::protobuf::uint32 value);

  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  int sat_dir_cosine_size() const;
  void clear_sat_dir_cosine();
  static const int kSatDirCosineFieldNumber = 19;
  const ::apollo::localization::SatDirCosine& sat_dir_cosine(int index) const;
  ::apollo::localization::SatDirCosine* mutable_sat_dir_cosine(int index);
  ::apollo::localization::SatDirCosine* add_sat_dir_cosine();
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::SatDirCosine >*
      mutable_sat_dir_cosine();
  const ::google::protobuf::RepeatedPtrField< ::apollo::localization::SatDirCosine >&
      sat_dir_cosine() const;

  // optional double pdop = 20;
  bool has_pdop() const;
  void clear_pdop();
  static const int kPdopFieldNumber = 20;
  double pdop() const;
  void set_pdop(double value);

  // optional double hdop = 21;
  bool has_hdop() const;
  void clear_hdop();
  static const int kHdopFieldNumber = 21;
  double hdop() const;
  void set_hdop(double value);

  // optional double vdop = 22;
  bool has_vdop() const;
  void clear_vdop();
  static const int kVdopFieldNumber = 22;
  double vdop() const;
  void set_vdop(double value);

  // @@protoc_insertion_point(class_scope:apollo.localization.GnssPntResult)
 private:
  inline void set_has_receiver_id();
  inline void clear_has_receiver_id();
  inline void set_has_time_type();
  inline void clear_has_time_type();
  inline void set_has_gnss_week();
  inline void clear_has_gnss_week();
  inline void set_has_gnss_second_s();
  inline void clear_has_gnss_second_s();
  inline void set_has_pnt_type();
  inline void clear_has_pnt_type();
  inline void set_has_pos_x_m();
  inline void clear_has_pos_x_m();
  inline void set_has_pos_y_m();
  inline void clear_has_pos_y_m();
  inline void set_has_pos_z_m();
  inline void clear_has_pos_z_m();
  inline void set_has_std_pos_x_m();
  inline void clear_has_std_pos_x_m();
  inline void set_has_std_pos_y_m();
  inline void clear_has_std_pos_y_m();
  inline void set_has_std_pos_z_m();
  inline void clear_has_std_pos_z_m();
  inline void set_has_vel_x_m();
  inline void clear_has_vel_x_m();
  inline void set_has_vel_y_m();
  inline void clear_has_vel_y_m();
  inline void set_has_vel_z_m();
  inline void clear_has_vel_z_m();
  inline void set_has_std_vel_x_m();
  inline void clear_has_std_vel_x_m();
  inline void set_has_std_vel_y_m();
  inline void clear_has_std_vel_y_m();
  inline void set_has_std_vel_z_m();
  inline void clear_has_std_vel_z_m();
  inline void set_has_sovled_sat_num();
  inline void clear_has_sovled_sat_num();
  inline void set_has_pdop();
  inline void clear_has_pdop();
  inline void set_has_hdop();
  inline void clear_has_hdop();
  inline void set_has_vdop();
  inline void clear_has_vdop();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 receiver_id_;
  int time_type_;
  double gnss_second_s_;
  ::google::protobuf::uint32 gnss_week_;
  int pnt_type_;
  double pos_x_m_;
  double pos_y_m_;
  double pos_z_m_;
  double std_pos_x_m_;
  double std_pos_y_m_;
  double std_pos_z_m_;
  double vel_x_m_;
  double vel_y_m_;
  double vel_z_m_;
  double std_vel_x_m_;
  double std_vel_y_m_;
  double std_vel_z_m_;
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::SatDirCosine > sat_dir_cosine_;
  double pdop_;
  double hdop_;
  double vdop_;
  ::google::protobuf::uint32 sovled_sat_num_;
  friend void  protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  friend void protobuf_AssignDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  friend void protobuf_ShutdownFile_localization_2fgnss_5fpnt_5fresult_2eproto();

  void InitAsDefaultInstance();
  static GnssPntResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SatDirCosine

// optional uint32 sat_prn = 1;
inline bool SatDirCosine::has_sat_prn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SatDirCosine::set_has_sat_prn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SatDirCosine::clear_has_sat_prn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SatDirCosine::clear_sat_prn() {
  sat_prn_ = 0u;
  clear_has_sat_prn();
}
inline ::google::protobuf::uint32 SatDirCosine::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.sat_prn)
  return sat_prn_;
}
inline void SatDirCosine::set_sat_prn(::google::protobuf::uint32 value) {
  set_has_sat_prn();
  sat_prn_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.sat_prn)
}

// optional uint32 sat_sys = 2;
inline bool SatDirCosine::has_sat_sys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SatDirCosine::set_has_sat_sys() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SatDirCosine::clear_has_sat_sys() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SatDirCosine::clear_sat_sys() {
  sat_sys_ = 0u;
  clear_has_sat_sys();
}
inline ::google::protobuf::uint32 SatDirCosine::sat_sys() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.sat_sys)
  return sat_sys_;
}
inline void SatDirCosine::set_sat_sys(::google::protobuf::uint32 value) {
  set_has_sat_sys();
  sat_sys_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.sat_sys)
}

// optional double cosine_x = 3;
inline bool SatDirCosine::has_cosine_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SatDirCosine::set_has_cosine_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SatDirCosine::clear_has_cosine_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SatDirCosine::clear_cosine_x() {
  cosine_x_ = 0;
  clear_has_cosine_x();
}
inline double SatDirCosine::cosine_x() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_x)
  return cosine_x_;
}
inline void SatDirCosine::set_cosine_x(double value) {
  set_has_cosine_x();
  cosine_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_x)
}

// optional double cosine_y = 4;
inline bool SatDirCosine::has_cosine_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SatDirCosine::set_has_cosine_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SatDirCosine::clear_has_cosine_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SatDirCosine::clear_cosine_y() {
  cosine_y_ = 0;
  clear_has_cosine_y();
}
inline double SatDirCosine::cosine_y() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_y)
  return cosine_y_;
}
inline void SatDirCosine::set_cosine_y(double value) {
  set_has_cosine_y();
  cosine_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_y)
}

// optional double cosine_z = 5;
inline bool SatDirCosine::has_cosine_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SatDirCosine::set_has_cosine_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SatDirCosine::clear_has_cosine_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SatDirCosine::clear_cosine_z() {
  cosine_z_ = 0;
  clear_has_cosine_z();
}
inline double SatDirCosine::cosine_z() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_z)
  return cosine_z_;
}
inline void SatDirCosine::set_cosine_z(double value) {
  set_has_cosine_z();
  cosine_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_z)
}

// -------------------------------------------------------------------

// GnssPntResult

// optional uint32 receiver_id = 1;
inline bool GnssPntResult::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GnssPntResult::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GnssPntResult::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GnssPntResult::clear_receiver_id() {
  receiver_id_ = 0u;
  clear_has_receiver_id();
}
inline ::google::protobuf::uint32 GnssPntResult::receiver_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.receiver_id)
  return receiver_id_;
}
inline void GnssPntResult::set_receiver_id(::google::protobuf::uint32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.receiver_id)
}

// optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
inline bool GnssPntResult::has_time_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GnssPntResult::set_has_time_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GnssPntResult::clear_has_time_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GnssPntResult::clear_time_type() {
  time_type_ = 1;
  clear_has_time_type();
}
inline ::apollo::drivers::gnss::GnssTimeType GnssPntResult::time_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.time_type)
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(time_type_);
}
inline void GnssPntResult::set_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_time_type();
  time_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.time_type)
}

// optional uint32 gnss_week = 3;
inline bool GnssPntResult::has_gnss_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GnssPntResult::set_has_gnss_week() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GnssPntResult::clear_has_gnss_week() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GnssPntResult::clear_gnss_week() {
  gnss_week_ = 0u;
  clear_has_gnss_week();
}
inline ::google::protobuf::uint32 GnssPntResult::gnss_week() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.gnss_week)
  return gnss_week_;
}
inline void GnssPntResult::set_gnss_week(::google::protobuf::uint32 value) {
  set_has_gnss_week();
  gnss_week_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.gnss_week)
}

// optional double gnss_second_s = 4;
inline bool GnssPntResult::has_gnss_second_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GnssPntResult::set_has_gnss_second_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GnssPntResult::clear_has_gnss_second_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GnssPntResult::clear_gnss_second_s() {
  gnss_second_s_ = 0;
  clear_has_gnss_second_s();
}
inline double GnssPntResult::gnss_second_s() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.gnss_second_s)
  return gnss_second_s_;
}
inline void GnssPntResult::set_gnss_second_s(double value) {
  set_has_gnss_second_s();
  gnss_second_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.gnss_second_s)
}

// optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
inline bool GnssPntResult::has_pnt_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GnssPntResult::set_has_pnt_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GnssPntResult::clear_has_pnt_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GnssPntResult::clear_pnt_type() {
  pnt_type_ = 0;
  clear_has_pnt_type();
}
inline ::apollo::localization::PntType GnssPntResult::pnt_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pnt_type)
  return static_cast< ::apollo::localization::PntType >(pnt_type_);
}
inline void GnssPntResult::set_pnt_type(::apollo::localization::PntType value) {
  assert(::apollo::localization::PntType_IsValid(value));
  set_has_pnt_type();
  pnt_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pnt_type)
}

// optional double pos_x_m = 6;
inline bool GnssPntResult::has_pos_x_m() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GnssPntResult::set_has_pos_x_m() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GnssPntResult::clear_has_pos_x_m() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GnssPntResult::clear_pos_x_m() {
  pos_x_m_ = 0;
  clear_has_pos_x_m();
}
inline double GnssPntResult::pos_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_x_m)
  return pos_x_m_;
}
inline void GnssPntResult::set_pos_x_m(double value) {
  set_has_pos_x_m();
  pos_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_x_m)
}

// optional double pos_y_m = 7;
inline bool GnssPntResult::has_pos_y_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GnssPntResult::set_has_pos_y_m() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GnssPntResult::clear_has_pos_y_m() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GnssPntResult::clear_pos_y_m() {
  pos_y_m_ = 0;
  clear_has_pos_y_m();
}
inline double GnssPntResult::pos_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_y_m)
  return pos_y_m_;
}
inline void GnssPntResult::set_pos_y_m(double value) {
  set_has_pos_y_m();
  pos_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_y_m)
}

// optional double pos_z_m = 8;
inline bool GnssPntResult::has_pos_z_m() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GnssPntResult::set_has_pos_z_m() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GnssPntResult::clear_has_pos_z_m() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GnssPntResult::clear_pos_z_m() {
  pos_z_m_ = 0;
  clear_has_pos_z_m();
}
inline double GnssPntResult::pos_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_z_m)
  return pos_z_m_;
}
inline void GnssPntResult::set_pos_z_m(double value) {
  set_has_pos_z_m();
  pos_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_z_m)
}

// optional double std_pos_x_m = 9;
inline bool GnssPntResult::has_std_pos_x_m() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GnssPntResult::set_has_std_pos_x_m() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GnssPntResult::clear_has_std_pos_x_m() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GnssPntResult::clear_std_pos_x_m() {
  std_pos_x_m_ = 0;
  clear_has_std_pos_x_m();
}
inline double GnssPntResult::std_pos_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_x_m)
  return std_pos_x_m_;
}
inline void GnssPntResult::set_std_pos_x_m(double value) {
  set_has_std_pos_x_m();
  std_pos_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_x_m)
}

// optional double std_pos_y_m = 10;
inline bool GnssPntResult::has_std_pos_y_m() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GnssPntResult::set_has_std_pos_y_m() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GnssPntResult::clear_has_std_pos_y_m() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GnssPntResult::clear_std_pos_y_m() {
  std_pos_y_m_ = 0;
  clear_has_std_pos_y_m();
}
inline double GnssPntResult::std_pos_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_y_m)
  return std_pos_y_m_;
}
inline void GnssPntResult::set_std_pos_y_m(double value) {
  set_has_std_pos_y_m();
  std_pos_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_y_m)
}

// optional double std_pos_z_m = 11;
inline bool GnssPntResult::has_std_pos_z_m() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GnssPntResult::set_has_std_pos_z_m() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GnssPntResult::clear_has_std_pos_z_m() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GnssPntResult::clear_std_pos_z_m() {
  std_pos_z_m_ = 0;
  clear_has_std_pos_z_m();
}
inline double GnssPntResult::std_pos_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_z_m)
  return std_pos_z_m_;
}
inline void GnssPntResult::set_std_pos_z_m(double value) {
  set_has_std_pos_z_m();
  std_pos_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_z_m)
}

// optional double vel_x_m = 12;
inline bool GnssPntResult::has_vel_x_m() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GnssPntResult::set_has_vel_x_m() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GnssPntResult::clear_has_vel_x_m() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GnssPntResult::clear_vel_x_m() {
  vel_x_m_ = 0;
  clear_has_vel_x_m();
}
inline double GnssPntResult::vel_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_x_m)
  return vel_x_m_;
}
inline void GnssPntResult::set_vel_x_m(double value) {
  set_has_vel_x_m();
  vel_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_x_m)
}

// optional double vel_y_m = 13;
inline bool GnssPntResult::has_vel_y_m() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GnssPntResult::set_has_vel_y_m() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GnssPntResult::clear_has_vel_y_m() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GnssPntResult::clear_vel_y_m() {
  vel_y_m_ = 0;
  clear_has_vel_y_m();
}
inline double GnssPntResult::vel_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_y_m)
  return vel_y_m_;
}
inline void GnssPntResult::set_vel_y_m(double value) {
  set_has_vel_y_m();
  vel_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_y_m)
}

// optional double vel_z_m = 14;
inline bool GnssPntResult::has_vel_z_m() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GnssPntResult::set_has_vel_z_m() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GnssPntResult::clear_has_vel_z_m() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GnssPntResult::clear_vel_z_m() {
  vel_z_m_ = 0;
  clear_has_vel_z_m();
}
inline double GnssPntResult::vel_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_z_m)
  return vel_z_m_;
}
inline void GnssPntResult::set_vel_z_m(double value) {
  set_has_vel_z_m();
  vel_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_z_m)
}

// optional double std_vel_x_m = 15;
inline bool GnssPntResult::has_std_vel_x_m() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GnssPntResult::set_has_std_vel_x_m() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GnssPntResult::clear_has_std_vel_x_m() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GnssPntResult::clear_std_vel_x_m() {
  std_vel_x_m_ = 0;
  clear_has_std_vel_x_m();
}
inline double GnssPntResult::std_vel_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_x_m)
  return std_vel_x_m_;
}
inline void GnssPntResult::set_std_vel_x_m(double value) {
  set_has_std_vel_x_m();
  std_vel_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_x_m)
}

// optional double std_vel_y_m = 16;
inline bool GnssPntResult::has_std_vel_y_m() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GnssPntResult::set_has_std_vel_y_m() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GnssPntResult::clear_has_std_vel_y_m() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GnssPntResult::clear_std_vel_y_m() {
  std_vel_y_m_ = 0;
  clear_has_std_vel_y_m();
}
inline double GnssPntResult::std_vel_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_y_m)
  return std_vel_y_m_;
}
inline void GnssPntResult::set_std_vel_y_m(double value) {
  set_has_std_vel_y_m();
  std_vel_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_y_m)
}

// optional double std_vel_z_m = 17;
inline bool GnssPntResult::has_std_vel_z_m() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GnssPntResult::set_has_std_vel_z_m() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GnssPntResult::clear_has_std_vel_z_m() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GnssPntResult::clear_std_vel_z_m() {
  std_vel_z_m_ = 0;
  clear_has_std_vel_z_m();
}
inline double GnssPntResult::std_vel_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_z_m)
  return std_vel_z_m_;
}
inline void GnssPntResult::set_std_vel_z_m(double value) {
  set_has_std_vel_z_m();
  std_vel_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_z_m)
}

// optional uint32 sovled_sat_num = 18;
inline bool GnssPntResult::has_sovled_sat_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GnssPntResult::set_has_sovled_sat_num() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GnssPntResult::clear_has_sovled_sat_num() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GnssPntResult::clear_sovled_sat_num() {
  sovled_sat_num_ = 0u;
  clear_has_sovled_sat_num();
}
inline ::google::protobuf::uint32 GnssPntResult::sovled_sat_num() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.sovled_sat_num)
  return sovled_sat_num_;
}
inline void GnssPntResult::set_sovled_sat_num(::google::protobuf::uint32 value) {
  set_has_sovled_sat_num();
  sovled_sat_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.sovled_sat_num)
}

// repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
inline int GnssPntResult::sat_dir_cosine_size() const {
  return sat_dir_cosine_.size();
}
inline void GnssPntResult::clear_sat_dir_cosine() {
  sat_dir_cosine_.Clear();
}
inline const ::apollo::localization::SatDirCosine& GnssPntResult::sat_dir_cosine(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_.Get(index);
}
inline ::apollo::localization::SatDirCosine* GnssPntResult::mutable_sat_dir_cosine(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_.Mutable(index);
}
inline ::apollo::localization::SatDirCosine* GnssPntResult::add_sat_dir_cosine() {
  // @@protoc_insertion_point(field_add:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::localization::SatDirCosine >*
GnssPntResult::mutable_sat_dir_cosine() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.GnssPntResult.sat_dir_cosine)
  return &sat_dir_cosine_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::localization::SatDirCosine >&
GnssPntResult::sat_dir_cosine() const {
  // @@protoc_insertion_point(field_list:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_;
}

// optional double pdop = 20;
inline bool GnssPntResult::has_pdop() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GnssPntResult::set_has_pdop() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GnssPntResult::clear_has_pdop() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GnssPntResult::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
inline double GnssPntResult::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pdop)
  return pdop_;
}
inline void GnssPntResult::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pdop)
}

// optional double hdop = 21;
inline bool GnssPntResult::has_hdop() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GnssPntResult::set_has_hdop() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GnssPntResult::clear_has_hdop() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GnssPntResult::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
inline double GnssPntResult::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.hdop)
  return hdop_;
}
inline void GnssPntResult::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.hdop)
}

// optional double vdop = 22;
inline bool GnssPntResult::has_vdop() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GnssPntResult::set_has_vdop() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GnssPntResult::clear_has_vdop() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GnssPntResult::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
inline double GnssPntResult::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vdop)
  return vdop_;
}
inline void GnssPntResult::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vdop)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::localization::PntType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::localization::PntType>() {
  return ::apollo::localization::PntType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_localization_2fgnss_5fpnt_5fresult_2eproto__INCLUDED
