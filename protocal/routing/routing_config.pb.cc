// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing/routing_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "routing/routing_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace routing {

namespace {

const ::google::protobuf::Descriptor* RoutingConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutingConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_routing_2frouting_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_routing_2frouting_5fconfig_2eproto() {
  protobuf_AddDesc_routing_2frouting_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "routing/routing_config.proto");
  GOOGLE_CHECK(file != NULL);
  RoutingConfig_descriptor_ = file->message_type(0);
  static const int RoutingConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, base_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, left_turn_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, right_turn_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, uturn_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, change_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, base_changing_length_),
  };
  RoutingConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoutingConfig_descriptor_,
      RoutingConfig::default_instance_,
      RoutingConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoutingConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_routing_2frouting_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoutingConfig_descriptor_, &RoutingConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_routing_2frouting_5fconfig_2eproto() {
  delete RoutingConfig::default_instance_;
  delete RoutingConfig_reflection_;
}

void protobuf_AddDesc_routing_2frouting_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_routing_2frouting_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034routing/routing_config.proto\022\016apollo.r"
    "outing\"\247\001\n\rRoutingConfig\022\022\n\nbase_speed\030\001"
    " \001(\001\022\031\n\021left_turn_penalty\030\002 \001(\001\022\032\n\022right"
    "_turn_penalty\030\003 \001(\001\022\025\n\ruturn_penalty\030\004 \001"
    "(\001\022\026\n\016change_penalty\030\005 \001(\001\022\034\n\024base_chang"
    "ing_length\030\006 \001(\001", 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "routing/routing_config.proto", &protobuf_RegisterTypes);
  RoutingConfig::default_instance_ = new RoutingConfig();
  RoutingConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_routing_2frouting_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_routing_2frouting_5fconfig_2eproto {
  StaticDescriptorInitializer_routing_2frouting_5fconfig_2eproto() {
    protobuf_AddDesc_routing_2frouting_5fconfig_2eproto();
  }
} static_descriptor_initializer_routing_2frouting_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingConfig::kBaseSpeedFieldNumber;
const int RoutingConfig::kLeftTurnPenaltyFieldNumber;
const int RoutingConfig::kRightTurnPenaltyFieldNumber;
const int RoutingConfig::kUturnPenaltyFieldNumber;
const int RoutingConfig::kChangePenaltyFieldNumber;
const int RoutingConfig::kBaseChangingLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingConfig::RoutingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingConfig)
}

void RoutingConfig::InitAsDefaultInstance() {
}

RoutingConfig::RoutingConfig(const RoutingConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingConfig)
}

void RoutingConfig::SharedCtor() {
  _cached_size_ = 0;
  base_speed_ = 0;
  left_turn_penalty_ = 0;
  right_turn_penalty_ = 0;
  uturn_penalty_ = 0;
  change_penalty_ = 0;
  base_changing_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutingConfig::~RoutingConfig() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingConfig)
  SharedDtor();
}

void RoutingConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoutingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingConfig_descriptor_;
}

const RoutingConfig& RoutingConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_5fconfig_2eproto();
  return *default_instance_;
}

RoutingConfig* RoutingConfig::default_instance_ = NULL;

RoutingConfig* RoutingConfig::New(::google::protobuf::Arena* arena) const {
  RoutingConfig* n = new RoutingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoutingConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoutingConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(base_speed_, base_changing_length_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoutingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoutingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base_speed = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_speed_)));
          set_has_base_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_left_turn_penalty;
        break;
      }

      // optional double left_turn_penalty = 2;
      case 2: {
        if (tag == 17) {
         parse_left_turn_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_turn_penalty_)));
          set_has_left_turn_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_right_turn_penalty;
        break;
      }

      // optional double right_turn_penalty = 3;
      case 3: {
        if (tag == 25) {
         parse_right_turn_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_turn_penalty_)));
          set_has_right_turn_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_uturn_penalty;
        break;
      }

      // optional double uturn_penalty = 4;
      case 4: {
        if (tag == 33) {
         parse_uturn_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uturn_penalty_)));
          set_has_uturn_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_change_penalty;
        break;
      }

      // optional double change_penalty = 5;
      case 5: {
        if (tag == 41) {
         parse_change_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &change_penalty_)));
          set_has_change_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_base_changing_length;
        break;
      }

      // optional double base_changing_length = 6;
      case 6: {
        if (tag == 49) {
         parse_base_changing_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_changing_length_)));
          set_has_base_changing_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoutingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoutingConfig)
  return false;
#undef DO_
}

void RoutingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoutingConfig)
  // optional double base_speed = 1;
  if (has_base_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base_speed(), output);
  }

  // optional double left_turn_penalty = 2;
  if (has_left_turn_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->left_turn_penalty(), output);
  }

  // optional double right_turn_penalty = 3;
  if (has_right_turn_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->right_turn_penalty(), output);
  }

  // optional double uturn_penalty = 4;
  if (has_uturn_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->uturn_penalty(), output);
  }

  // optional double change_penalty = 5;
  if (has_change_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->change_penalty(), output);
  }

  // optional double base_changing_length = 6;
  if (has_base_changing_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->base_changing_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoutingConfig)
}

::google::protobuf::uint8* RoutingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingConfig)
  // optional double base_speed = 1;
  if (has_base_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base_speed(), target);
  }

  // optional double left_turn_penalty = 2;
  if (has_left_turn_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->left_turn_penalty(), target);
  }

  // optional double right_turn_penalty = 3;
  if (has_right_turn_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->right_turn_penalty(), target);
  }

  // optional double uturn_penalty = 4;
  if (has_uturn_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->uturn_penalty(), target);
  }

  // optional double change_penalty = 5;
  if (has_change_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->change_penalty(), target);
  }

  // optional double base_changing_length = 6;
  if (has_base_changing_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->base_changing_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingConfig)
  return target;
}

int RoutingConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double base_speed = 1;
    if (has_base_speed()) {
      total_size += 1 + 8;
    }

    // optional double left_turn_penalty = 2;
    if (has_left_turn_penalty()) {
      total_size += 1 + 8;
    }

    // optional double right_turn_penalty = 3;
    if (has_right_turn_penalty()) {
      total_size += 1 + 8;
    }

    // optional double uturn_penalty = 4;
    if (has_uturn_penalty()) {
      total_size += 1 + 8;
    }

    // optional double change_penalty = 5;
    if (has_change_penalty()) {
      total_size += 1 + 8;
    }

    // optional double base_changing_length = 6;
    if (has_base_changing_length()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoutingConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingConfig)
    MergeFrom(*source);
  }
}

void RoutingConfig::MergeFrom(const RoutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_speed()) {
      set_base_speed(from.base_speed());
    }
    if (from.has_left_turn_penalty()) {
      set_left_turn_penalty(from.left_turn_penalty());
    }
    if (from.has_right_turn_penalty()) {
      set_right_turn_penalty(from.right_turn_penalty());
    }
    if (from.has_uturn_penalty()) {
      set_uturn_penalty(from.uturn_penalty());
    }
    if (from.has_change_penalty()) {
      set_change_penalty(from.change_penalty());
    }
    if (from.has_base_changing_length()) {
      set_base_changing_length(from.base_changing_length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoutingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingConfig::CopyFrom(const RoutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingConfig::IsInitialized() const {

  return true;
}

void RoutingConfig::Swap(RoutingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingConfig::InternalSwap(RoutingConfig* other) {
  std::swap(base_speed_, other->base_speed_);
  std::swap(left_turn_penalty_, other->left_turn_penalty_);
  std::swap(right_turn_penalty_, other->right_turn_penalty_);
  std::swap(uturn_penalty_, other->uturn_penalty_);
  std::swap(change_penalty_, other->change_penalty_);
  std::swap(base_changing_length_, other->base_changing_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutingConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutingConfig_descriptor_;
  metadata.reflection = RoutingConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutingConfig

// optional double base_speed = 1;
bool RoutingConfig::has_base_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoutingConfig::set_has_base_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void RoutingConfig::clear_has_base_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingConfig::clear_base_speed() {
  base_speed_ = 0;
  clear_has_base_speed();
}
 double RoutingConfig::base_speed() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.base_speed)
  return base_speed_;
}
 void RoutingConfig::set_base_speed(double value) {
  set_has_base_speed();
  base_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.base_speed)
}

// optional double left_turn_penalty = 2;
bool RoutingConfig::has_left_turn_penalty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoutingConfig::set_has_left_turn_penalty() {
  _has_bits_[0] |= 0x00000002u;
}
void RoutingConfig::clear_has_left_turn_penalty() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoutingConfig::clear_left_turn_penalty() {
  left_turn_penalty_ = 0;
  clear_has_left_turn_penalty();
}
 double RoutingConfig::left_turn_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.left_turn_penalty)
  return left_turn_penalty_;
}
 void RoutingConfig::set_left_turn_penalty(double value) {
  set_has_left_turn_penalty();
  left_turn_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.left_turn_penalty)
}

// optional double right_turn_penalty = 3;
bool RoutingConfig::has_right_turn_penalty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoutingConfig::set_has_right_turn_penalty() {
  _has_bits_[0] |= 0x00000004u;
}
void RoutingConfig::clear_has_right_turn_penalty() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoutingConfig::clear_right_turn_penalty() {
  right_turn_penalty_ = 0;
  clear_has_right_turn_penalty();
}
 double RoutingConfig::right_turn_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.right_turn_penalty)
  return right_turn_penalty_;
}
 void RoutingConfig::set_right_turn_penalty(double value) {
  set_has_right_turn_penalty();
  right_turn_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.right_turn_penalty)
}

// optional double uturn_penalty = 4;
bool RoutingConfig::has_uturn_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoutingConfig::set_has_uturn_penalty() {
  _has_bits_[0] |= 0x00000008u;
}
void RoutingConfig::clear_has_uturn_penalty() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoutingConfig::clear_uturn_penalty() {
  uturn_penalty_ = 0;
  clear_has_uturn_penalty();
}
 double RoutingConfig::uturn_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.uturn_penalty)
  return uturn_penalty_;
}
 void RoutingConfig::set_uturn_penalty(double value) {
  set_has_uturn_penalty();
  uturn_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.uturn_penalty)
}

// optional double change_penalty = 5;
bool RoutingConfig::has_change_penalty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoutingConfig::set_has_change_penalty() {
  _has_bits_[0] |= 0x00000010u;
}
void RoutingConfig::clear_has_change_penalty() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoutingConfig::clear_change_penalty() {
  change_penalty_ = 0;
  clear_has_change_penalty();
}
 double RoutingConfig::change_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.change_penalty)
  return change_penalty_;
}
 void RoutingConfig::set_change_penalty(double value) {
  set_has_change_penalty();
  change_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.change_penalty)
}

// optional double base_changing_length = 6;
bool RoutingConfig::has_base_changing_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoutingConfig::set_has_base_changing_length() {
  _has_bits_[0] |= 0x00000020u;
}
void RoutingConfig::clear_has_base_changing_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoutingConfig::clear_base_changing_length() {
  base_changing_length_ = 0;
  clear_has_base_changing_length();
}
 double RoutingConfig::base_changing_length() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.base_changing_length)
  return base_changing_length_;
}
 void RoutingConfig::set_base_changing_length(double value) {
  set_has_base_changing_length();
  base_changing_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.base_changing_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
