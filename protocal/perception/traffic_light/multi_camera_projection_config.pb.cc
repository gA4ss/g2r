// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light/multi_camera_projection_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/traffic_light/multi_camera_projection_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace traffic_light {
namespace multi_camera_projection_config {

namespace {

const ::google::protobuf::Descriptor* CameraFocusConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraFocusConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiCamerasProjectionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiCamerasProjectionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/traffic_light/multi_camera_projection_config.proto");
  GOOGLE_CHECK(file != NULL);
  CameraFocusConfig_descriptor_ = file->message_type(0);
  static const int CameraFocusConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, camera_extrinsic_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, camera_intrinsic_file_),
  };
  CameraFocusConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraFocusConfig_descriptor_,
      CameraFocusConfig::default_instance_,
      CameraFocusConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraFocusConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, _internal_metadata_),
      -1);
  MultiCamerasProjectionConfig_descriptor_ = file->message_type(1);
  static const int MultiCamerasProjectionConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, single_projection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, camera_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, camera_focus_config_),
  };
  MultiCamerasProjectionConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiCamerasProjectionConfig_descriptor_,
      MultiCamerasProjectionConfig::default_instance_,
      MultiCamerasProjectionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(MultiCamerasProjectionConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, _internal_metadata_),
      -1);
  ModelConfigs_descriptor_ = file->message_type(2);
  static const int ModelConfigs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, multi_camera_projection_config_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraFocusConfig_descriptor_, &CameraFocusConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiCamerasProjectionConfig_descriptor_, &MultiCamerasProjectionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto() {
  delete CameraFocusConfig::default_instance_;
  delete CameraFocusConfig_reflection_;
  delete MultiCamerasProjectionConfig::default_instance_;
  delete MultiCamerasProjectionConfig_reflection_;
  delete MultiCamerasProjectionConfig::_default_name_;
  delete MultiCamerasProjectionConfig::_default_version_;
  delete MultiCamerasProjectionConfig::_default_single_projection_;
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
}

void protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n=perception/traffic_light/multi_camera_"
    "projection_config.proto\022>apollo.percepti"
    "on.traffic_light.multi_camera_projection"
    "_config\"_\n\021CameraFocusConfig\022\014\n\004name\030\001 \001"
    "(\t\022\035\n\025camera_extrinsic_file\030\002 \001(\t\022\035\n\025cam"
    "era_intrinsic_file\030\003 \001(\t\"\221\002\n\034MultiCamera"
    "sProjectionConfig\022$\n\004name\030\001 \001(\t:\026MultiCa"
    "merasProjection\022\026\n\007version\030\002 \001(\t:\0051.0.0\022"
    "-\n\021single_projection\030\003 \001(\t:\022BoundaryProj"
    "ection\022\024\n\014camera_names\030\004 \003(\t\022n\n\023camera_f"
    "ocus_config\030\005 \003(\0132Q.apollo.perception.tr"
    "affic_light.multi_camera_projection_conf"
    "ig.CameraFocusConfig\"\225\001\n\014ModelConfigs\022\204\001"
    "\n\036multi_camera_projection_config\030\001 \001(\0132\\"
    ".apollo.perception.traffic_light.multi_c"
    "amera_projection_config.MultiCamerasProj"
    "ectionConfig", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/traffic_light/multi_camera_projection_config.proto", &protobuf_RegisterTypes);
  CameraFocusConfig::default_instance_ = new CameraFocusConfig();
  MultiCamerasProjectionConfig::_default_name_ =
      new ::std::string("MultiCamerasProjection", 22);
  MultiCamerasProjectionConfig::_default_version_ =
      new ::std::string("1.0.0", 5);
  MultiCamerasProjectionConfig::_default_single_projection_ =
      new ::std::string("BoundaryProjection", 18);
  MultiCamerasProjectionConfig::default_instance_ = new MultiCamerasProjectionConfig();
  ModelConfigs::default_instance_ = new ModelConfigs();
  CameraFocusConfig::default_instance_->InitAsDefaultInstance();
  MultiCamerasProjectionConfig::default_instance_->InitAsDefaultInstance();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraFocusConfig::kNameFieldNumber;
const int CameraFocusConfig::kCameraExtrinsicFileFieldNumber;
const int CameraFocusConfig::kCameraIntrinsicFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraFocusConfig::CameraFocusConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}

void CameraFocusConfig::InitAsDefaultInstance() {
}

CameraFocusConfig::CameraFocusConfig(const CameraFocusConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}

void CameraFocusConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_extrinsic_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_intrinsic_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraFocusConfig::~CameraFocusConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  SharedDtor();
}

void CameraFocusConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_extrinsic_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_intrinsic_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CameraFocusConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraFocusConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraFocusConfig_descriptor_;
}

const CameraFocusConfig& CameraFocusConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  return *default_instance_;
}

CameraFocusConfig* CameraFocusConfig::default_instance_ = NULL;

CameraFocusConfig* CameraFocusConfig::New(::google::protobuf::Arena* arena) const {
  CameraFocusConfig* n = new CameraFocusConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraFocusConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_camera_extrinsic_file()) {
      camera_extrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_camera_intrinsic_file()) {
      camera_intrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraFocusConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_extrinsic_file;
        break;
      }

      // optional string camera_extrinsic_file = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_extrinsic_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_extrinsic_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_extrinsic_file().data(), this->camera_extrinsic_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_camera_intrinsic_file;
        break;
      }

      // optional string camera_intrinsic_file = 3;
      case 3: {
        if (tag == 26) {
         parse_camera_intrinsic_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_intrinsic_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_intrinsic_file().data(), this->camera_intrinsic_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  return false;
#undef DO_
}

void CameraFocusConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string camera_extrinsic_file = 2;
  if (has_camera_extrinsic_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_extrinsic_file().data(), this->camera_extrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_extrinsic_file(), output);
  }

  // optional string camera_intrinsic_file = 3;
  if (has_camera_intrinsic_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_intrinsic_file().data(), this->camera_intrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->camera_intrinsic_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}

::google::protobuf::uint8* CameraFocusConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string camera_extrinsic_file = 2;
  if (has_camera_extrinsic_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_extrinsic_file().data(), this->camera_extrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_extrinsic_file(), target);
  }

  // optional string camera_intrinsic_file = 3;
  if (has_camera_intrinsic_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_intrinsic_file().data(), this->camera_intrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->camera_intrinsic_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  return target;
}

int CameraFocusConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string camera_extrinsic_file = 2;
    if (has_camera_extrinsic_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_extrinsic_file());
    }

    // optional string camera_intrinsic_file = 3;
    if (has_camera_intrinsic_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_intrinsic_file());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraFocusConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraFocusConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraFocusConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
    MergeFrom(*source);
  }
}

void CameraFocusConfig::MergeFrom(const CameraFocusConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_camera_extrinsic_file()) {
      set_has_camera_extrinsic_file();
      camera_extrinsic_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_extrinsic_file_);
    }
    if (from.has_camera_intrinsic_file()) {
      set_has_camera_intrinsic_file();
      camera_intrinsic_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_intrinsic_file_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraFocusConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFocusConfig::CopyFrom(const CameraFocusConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFocusConfig::IsInitialized() const {

  return true;
}

void CameraFocusConfig::Swap(CameraFocusConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraFocusConfig::InternalSwap(CameraFocusConfig* other) {
  name_.Swap(&other->name_);
  camera_extrinsic_file_.Swap(&other->camera_extrinsic_file_);
  camera_intrinsic_file_.Swap(&other->camera_intrinsic_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraFocusConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraFocusConfig_descriptor_;
  metadata.reflection = CameraFocusConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraFocusConfig

// optional string name = 1;
bool CameraFocusConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraFocusConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraFocusConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraFocusConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CameraFocusConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraFocusConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
 void CameraFocusConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
 void CameraFocusConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
 ::std::string* CameraFocusConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraFocusConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraFocusConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}

// optional string camera_extrinsic_file = 2;
bool CameraFocusConfig::has_camera_extrinsic_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraFocusConfig::set_has_camera_extrinsic_file() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraFocusConfig::clear_has_camera_extrinsic_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraFocusConfig::clear_camera_extrinsic_file() {
  camera_extrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_extrinsic_file();
}
 const ::std::string& CameraFocusConfig::camera_extrinsic_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return camera_extrinsic_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraFocusConfig::set_camera_extrinsic_file(const ::std::string& value) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
 void CameraFocusConfig::set_camera_extrinsic_file(const char* value) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
 void CameraFocusConfig::set_camera_extrinsic_file(const char* value, size_t size) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
 ::std::string* CameraFocusConfig::mutable_camera_extrinsic_file() {
  set_has_camera_extrinsic_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return camera_extrinsic_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraFocusConfig::release_camera_extrinsic_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  clear_has_camera_extrinsic_file();
  return camera_extrinsic_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraFocusConfig::set_allocated_camera_extrinsic_file(::std::string* camera_extrinsic_file) {
  if (camera_extrinsic_file != NULL) {
    set_has_camera_extrinsic_file();
  } else {
    clear_has_camera_extrinsic_file();
  }
  camera_extrinsic_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_extrinsic_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}

// optional string camera_intrinsic_file = 3;
bool CameraFocusConfig::has_camera_intrinsic_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraFocusConfig::set_has_camera_intrinsic_file() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraFocusConfig::clear_has_camera_intrinsic_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraFocusConfig::clear_camera_intrinsic_file() {
  camera_intrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_intrinsic_file();
}
 const ::std::string& CameraFocusConfig::camera_intrinsic_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return camera_intrinsic_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraFocusConfig::set_camera_intrinsic_file(const ::std::string& value) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
 void CameraFocusConfig::set_camera_intrinsic_file(const char* value) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
 void CameraFocusConfig::set_camera_intrinsic_file(const char* value, size_t size) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
 ::std::string* CameraFocusConfig::mutable_camera_intrinsic_file() {
  set_has_camera_intrinsic_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return camera_intrinsic_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraFocusConfig::release_camera_intrinsic_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  clear_has_camera_intrinsic_file();
  return camera_intrinsic_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraFocusConfig::set_allocated_camera_intrinsic_file(::std::string* camera_intrinsic_file) {
  if (camera_intrinsic_file != NULL) {
    set_has_camera_intrinsic_file();
  } else {
    clear_has_camera_intrinsic_file();
  }
  camera_intrinsic_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_intrinsic_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* MultiCamerasProjectionConfig::_default_name_ = NULL;
::std::string* MultiCamerasProjectionConfig::_default_version_ = NULL;
::std::string* MultiCamerasProjectionConfig::_default_single_projection_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiCamerasProjectionConfig::kNameFieldNumber;
const int MultiCamerasProjectionConfig::kVersionFieldNumber;
const int MultiCamerasProjectionConfig::kSingleProjectionFieldNumber;
const int MultiCamerasProjectionConfig::kCameraNamesFieldNumber;
const int MultiCamerasProjectionConfig::kCameraFocusConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiCamerasProjectionConfig::MultiCamerasProjectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}

void MultiCamerasProjectionConfig::InitAsDefaultInstance() {
}

MultiCamerasProjectionConfig::MultiCamerasProjectionConfig(const MultiCamerasProjectionConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}

void MultiCamerasProjectionConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  version_.UnsafeSetDefault(_default_version_);
  single_projection_.UnsafeSetDefault(_default_single_projection_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiCamerasProjectionConfig::~MultiCamerasProjectionConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  SharedDtor();
}

void MultiCamerasProjectionConfig::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  version_.DestroyNoArena(_default_version_);
  single_projection_.DestroyNoArena(_default_single_projection_);
  if (this != default_instance_) {
  }
}

void MultiCamerasProjectionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiCamerasProjectionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiCamerasProjectionConfig_descriptor_;
}

const MultiCamerasProjectionConfig& MultiCamerasProjectionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  return *default_instance_;
}

MultiCamerasProjectionConfig* MultiCamerasProjectionConfig::default_instance_ = NULL;

MultiCamerasProjectionConfig* MultiCamerasProjectionConfig::New(::google::protobuf::Arena* arena) const {
  MultiCamerasProjectionConfig* n = new MultiCamerasProjectionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiCamerasProjectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    if (has_version()) {
      version_.ClearToDefaultNoArena(_default_version_);
    }
    if (has_single_projection()) {
      single_projection_.ClearToDefaultNoArena(_default_single_projection_);
    }
  }
  camera_names_.Clear();
  camera_focus_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MultiCamerasProjectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "MultiCamerasProjection"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_single_projection;
        break;
      }

      // optional string single_projection = 3 [default = "BoundaryProjection"];
      case 3: {
        if (tag == 26) {
         parse_single_projection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_projection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->single_projection().data(), this->single_projection().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_camera_names;
        break;
      }

      // repeated string camera_names = 4;
      case 4: {
        if (tag == 34) {
         parse_camera_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_camera_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_names(this->camera_names_size() - 1).data(),
            this->camera_names(this->camera_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_camera_names;
        if (input->ExpectTag(42)) goto parse_camera_focus_config;
        break;
      }

      // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
      case 5: {
        if (tag == 42) {
         parse_camera_focus_config:
          DO_(input->IncrementRecursionDepth());
         parse_loop_camera_focus_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_camera_focus_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_camera_focus_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  return false;
#undef DO_
}

void MultiCamerasProjectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  // optional string name = 1 [default = "MultiCamerasProjection"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string single_projection = 3 [default = "BoundaryProjection"];
  if (has_single_projection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_projection().data(), this->single_projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->single_projection(), output);
  }

  // repeated string camera_names = 4;
  for (int i = 0; i < this->camera_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_names(i).data(), this->camera_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->camera_names(i), output);
  }

  // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  for (unsigned int i = 0, n = this->camera_focus_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_focus_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}

::google::protobuf::uint8* MultiCamerasProjectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  // optional string name = 1 [default = "MultiCamerasProjection"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string single_projection = 3 [default = "BoundaryProjection"];
  if (has_single_projection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_projection().data(), this->single_projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->single_projection(), target);
  }

  // repeated string camera_names = 4;
  for (int i = 0; i < this->camera_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_names(i).data(), this->camera_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->camera_names(i), target);
  }

  // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  for (unsigned int i = 0, n = this->camera_focus_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->camera_focus_config(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  return target;
}

int MultiCamerasProjectionConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1 [default = "MultiCamerasProjection"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string single_projection = 3 [default = "BoundaryProjection"];
    if (has_single_projection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->single_projection());
    }

  }
  // repeated string camera_names = 4;
  total_size += 1 * this->camera_names_size();
  for (int i = 0; i < this->camera_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->camera_names(i));
  }

  // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  total_size += 1 * this->camera_focus_config_size();
  for (int i = 0; i < this->camera_focus_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_focus_config(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiCamerasProjectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiCamerasProjectionConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiCamerasProjectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
    MergeFrom(*source);
  }
}

void MultiCamerasProjectionConfig::MergeFrom(const MultiCamerasProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  camera_names_.MergeFrom(from.camera_names_);
  camera_focus_config_.MergeFrom(from.camera_focus_config_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(_default_version_, from.version_);
    }
    if (from.has_single_projection()) {
      set_has_single_projection();
      single_projection_.AssignWithDefault(_default_single_projection_, from.single_projection_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MultiCamerasProjectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCamerasProjectionConfig::CopyFrom(const MultiCamerasProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCamerasProjectionConfig::IsInitialized() const {

  return true;
}

void MultiCamerasProjectionConfig::Swap(MultiCamerasProjectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiCamerasProjectionConfig::InternalSwap(MultiCamerasProjectionConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  single_projection_.Swap(&other->single_projection_);
  camera_names_.UnsafeArenaSwap(&other->camera_names_);
  camera_focus_config_.UnsafeArenaSwap(&other->camera_focus_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiCamerasProjectionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiCamerasProjectionConfig_descriptor_;
  metadata.reflection = MultiCamerasProjectionConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiCamerasProjectionConfig

// optional string name = 1 [default = "MultiCamerasProjection"];
bool MultiCamerasProjectionConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MultiCamerasProjectionConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MultiCamerasProjectionConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MultiCamerasProjectionConfig::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& MultiCamerasProjectionConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  return name_.GetNoArena(_default_name_);
}
 void MultiCamerasProjectionConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
 void MultiCamerasProjectionConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
 void MultiCamerasProjectionConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
 ::std::string* MultiCamerasProjectionConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* MultiCamerasProjectionConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void MultiCamerasProjectionConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
bool MultiCamerasProjectionConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MultiCamerasProjectionConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void MultiCamerasProjectionConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void MultiCamerasProjectionConfig::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
 const ::std::string& MultiCamerasProjectionConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  return version_.GetNoArena(_default_version_);
}
 void MultiCamerasProjectionConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
 void MultiCamerasProjectionConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
 void MultiCamerasProjectionConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
 ::std::string* MultiCamerasProjectionConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  return version_.MutableNoArena(_default_version_);
}
 ::std::string* MultiCamerasProjectionConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
 void MultiCamerasProjectionConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}

// optional string single_projection = 3 [default = "BoundaryProjection"];
bool MultiCamerasProjectionConfig::has_single_projection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MultiCamerasProjectionConfig::set_has_single_projection() {
  _has_bits_[0] |= 0x00000004u;
}
void MultiCamerasProjectionConfig::clear_has_single_projection() {
  _has_bits_[0] &= ~0x00000004u;
}
void MultiCamerasProjectionConfig::clear_single_projection() {
  single_projection_.ClearToDefaultNoArena(_default_single_projection_);
  clear_has_single_projection();
}
 const ::std::string& MultiCamerasProjectionConfig::single_projection() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  return single_projection_.GetNoArena(_default_single_projection_);
}
 void MultiCamerasProjectionConfig::set_single_projection(const ::std::string& value) {
  set_has_single_projection();
  single_projection_.SetNoArena(_default_single_projection_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
 void MultiCamerasProjectionConfig::set_single_projection(const char* value) {
  set_has_single_projection();
  single_projection_.SetNoArena(_default_single_projection_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
 void MultiCamerasProjectionConfig::set_single_projection(const char* value, size_t size) {
  set_has_single_projection();
  single_projection_.SetNoArena(_default_single_projection_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
 ::std::string* MultiCamerasProjectionConfig::mutable_single_projection() {
  set_has_single_projection();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  return single_projection_.MutableNoArena(_default_single_projection_);
}
 ::std::string* MultiCamerasProjectionConfig::release_single_projection() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  clear_has_single_projection();
  return single_projection_.ReleaseNoArena(_default_single_projection_);
}
 void MultiCamerasProjectionConfig::set_allocated_single_projection(::std::string* single_projection) {
  if (single_projection != NULL) {
    set_has_single_projection();
  } else {
    clear_has_single_projection();
  }
  single_projection_.SetAllocatedNoArena(_default_single_projection_, single_projection);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}

// repeated string camera_names = 4;
int MultiCamerasProjectionConfig::camera_names_size() const {
  return camera_names_.size();
}
void MultiCamerasProjectionConfig::clear_camera_names() {
  camera_names_.Clear();
}
 const ::std::string& MultiCamerasProjectionConfig::camera_names(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Get(index);
}
 ::std::string* MultiCamerasProjectionConfig::mutable_camera_names(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Mutable(index);
}
 void MultiCamerasProjectionConfig::set_camera_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  camera_names_.Mutable(index)->assign(value);
}
 void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value) {
  camera_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
 void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value, size_t size) {
  camera_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
 ::std::string* MultiCamerasProjectionConfig::add_camera_names() {
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Add();
}
 void MultiCamerasProjectionConfig::add_camera_names(const ::std::string& value) {
  camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
 void MultiCamerasProjectionConfig::add_camera_names(const char* value) {
  camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
 void MultiCamerasProjectionConfig::add_camera_names(const char* value, size_t size) {
  camera_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultiCamerasProjectionConfig::camera_names() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MultiCamerasProjectionConfig::mutable_camera_names() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return &camera_names_;
}

// repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
int MultiCamerasProjectionConfig::camera_focus_config_size() const {
  return camera_focus_config_.size();
}
void MultiCamerasProjectionConfig::clear_camera_focus_config() {
  camera_focus_config_.Clear();
}
const ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& MultiCamerasProjectionConfig::camera_focus_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Get(index);
}
::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::mutable_camera_focus_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Mutable(index);
}
::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::add_camera_focus_config() {
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >*
MultiCamerasProjectionConfig::mutable_camera_focus_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return &camera_focus_config_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >&
MultiCamerasProjectionConfig::camera_focus_config() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kMultiCameraProjectionConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
  multi_camera_projection_config_ = const_cast< ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig*>(&::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::default_instance());
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  multi_camera_projection_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  if (this != default_instance_) {
    delete multi_camera_projection_config_;
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (has_multi_camera_projection_config()) {
    if (multi_camera_projection_config_ != NULL) multi_camera_projection_config_->::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multi_camera_projection_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  if (has_multi_camera_projection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->multi_camera_projection_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  if (has_multi_camera_projection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->multi_camera_projection_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  int total_size = 0;

  // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  if (has_multi_camera_projection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->multi_camera_projection_config_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multi_camera_projection_config()) {
      mutable_multi_camera_projection_config()->::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::MergeFrom(from.multi_camera_projection_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  std::swap(multi_camera_projection_config_, other->multi_camera_projection_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
bool ModelConfigs::has_multi_camera_projection_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_multi_camera_projection_config() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_multi_camera_projection_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_multi_camera_projection_config() {
  if (multi_camera_projection_config_ != NULL) multi_camera_projection_config_->::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Clear();
  clear_has_multi_camera_projection_config();
}
const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& ModelConfigs::multi_camera_projection_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return multi_camera_projection_config_ != NULL ? *multi_camera_projection_config_ : *default_instance_->multi_camera_projection_config_;
}
::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::mutable_multi_camera_projection_config() {
  set_has_multi_camera_projection_config();
  if (multi_camera_projection_config_ == NULL) {
    multi_camera_projection_config_ = new ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return multi_camera_projection_config_;
}
::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::release_multi_camera_projection_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  clear_has_multi_camera_projection_config();
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* temp = multi_camera_projection_config_;
  multi_camera_projection_config_ = NULL;
  return temp;
}
void ModelConfigs::set_allocated_multi_camera_projection_config(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config) {
  delete multi_camera_projection_config_;
  multi_camera_projection_config_ = multi_camera_projection_config;
  if (multi_camera_projection_config) {
    set_has_multi_camera_projection_config();
  } else {
    clear_has_multi_camera_projection_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace multi_camera_projection_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
