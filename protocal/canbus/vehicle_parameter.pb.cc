// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: canbus/vehicle_parameter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "canbus/vehicle_parameter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace canbus {

namespace {

const ::google::protobuf::Descriptor* VehicleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleParameter_VehicleBrand_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_canbus_2fvehicle_5fparameter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_canbus_2fvehicle_5fparameter_2eproto() {
  protobuf_AddDesc_canbus_2fvehicle_5fparameter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "canbus/vehicle_parameter.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleParameter_descriptor_ = file->message_type(0);
  static const int VehicleParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParameter, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParameter, max_engine_pedal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParameter, max_enable_fail_attempt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParameter, driving_mode_),
  };
  VehicleParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleParameter_descriptor_,
      VehicleParameter::default_instance_,
      VehicleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParameter, _internal_metadata_),
      -1);
  VehicleParameter_VehicleBrand_descriptor_ = VehicleParameter_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_canbus_2fvehicle_5fparameter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleParameter_descriptor_, &VehicleParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_canbus_2fvehicle_5fparameter_2eproto() {
  delete VehicleParameter::default_instance_;
  delete VehicleParameter_reflection_;
}

void protobuf_AddDesc_canbus_2fvehicle_5fparameter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_canbus_2fvehicle_5fparameter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::canbus::protobuf_AddDesc_canbus_2fchassis_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036canbus/vehicle_parameter.proto\022\rapollo"
    ".canbus\032\024canbus/chassis.proto\"\356\001\n\020Vehicl"
    "eParameter\022;\n\005brand\030\001 \001(\0162,.apollo.canbu"
    "s.VehicleParameter.VehicleBrand\022\030\n\020max_e"
    "ngine_pedal\030\002 \001(\001\022\037\n\027max_enable_fail_att"
    "empt\030\003 \001(\005\0228\n\014driving_mode\030\004 \001(\0162\".apoll"
    "o.canbus.Chassis.DrivingMode\"(\n\014VehicleB"
    "rand\022\017\n\013LINCOLN_MKZ\020\000\022\007\n\003GEM\020\001", 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "canbus/vehicle_parameter.proto", &protobuf_RegisterTypes);
  VehicleParameter::default_instance_ = new VehicleParameter();
  VehicleParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_canbus_2fvehicle_5fparameter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_canbus_2fvehicle_5fparameter_2eproto {
  StaticDescriptorInitializer_canbus_2fvehicle_5fparameter_2eproto() {
    protobuf_AddDesc_canbus_2fvehicle_5fparameter_2eproto();
  }
} static_descriptor_initializer_canbus_2fvehicle_5fparameter_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleParameter_VehicleBrand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleParameter_VehicleBrand_descriptor_;
}
bool VehicleParameter_VehicleBrand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleParameter_VehicleBrand VehicleParameter::LINCOLN_MKZ;
const VehicleParameter_VehicleBrand VehicleParameter::GEM;
const VehicleParameter_VehicleBrand VehicleParameter::VehicleBrand_MIN;
const VehicleParameter_VehicleBrand VehicleParameter::VehicleBrand_MAX;
const int VehicleParameter::VehicleBrand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParameter::kBrandFieldNumber;
const int VehicleParameter::kMaxEnginePedalFieldNumber;
const int VehicleParameter::kMaxEnableFailAttemptFieldNumber;
const int VehicleParameter::kDrivingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParameter::VehicleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.VehicleParameter)
}

void VehicleParameter::InitAsDefaultInstance() {
}

VehicleParameter::VehicleParameter(const VehicleParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleParameter)
}

void VehicleParameter::SharedCtor() {
  _cached_size_ = 0;
  brand_ = 0;
  max_engine_pedal_ = 0;
  max_enable_fail_attempt_ = 0;
  driving_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleParameter::~VehicleParameter() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleParameter)
  SharedDtor();
}

void VehicleParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleParameter_descriptor_;
}

const VehicleParameter& VehicleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_canbus_2fvehicle_5fparameter_2eproto();
  return *default_instance_;
}

VehicleParameter* VehicleParameter::default_instance_ = NULL;

VehicleParameter* VehicleParameter::New(::google::protobuf::Arena* arena) const {
  VehicleParameter* n = new VehicleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_engine_pedal_, driving_mode_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.VehicleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::VehicleParameter_VehicleBrand_IsValid(value)) {
            set_brand(static_cast< ::apollo::canbus::VehicleParameter_VehicleBrand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max_engine_pedal;
        break;
      }

      // optional double max_engine_pedal = 2;
      case 2: {
        if (tag == 17) {
         parse_max_engine_pedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_engine_pedal_)));
          set_has_max_engine_pedal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_enable_fail_attempt;
        break;
      }

      // optional int32 max_enable_fail_attempt = 3;
      case 3: {
        if (tag == 24) {
         parse_max_enable_fail_attempt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_enable_fail_attempt_)));
          set_has_max_enable_fail_attempt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_driving_mode;
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_driving_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.VehicleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.VehicleParameter)
  return false;
#undef DO_
}

void VehicleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.VehicleParameter)
  // optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brand(), output);
  }

  // optional double max_engine_pedal = 2;
  if (has_max_engine_pedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_engine_pedal(), output);
  }

  // optional int32 max_enable_fail_attempt = 3;
  if (has_max_enable_fail_attempt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_enable_fail_attempt(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (has_driving_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->driving_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.VehicleParameter)
}

::google::protobuf::uint8* VehicleParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleParameter)
  // optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
  if (has_brand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brand(), target);
  }

  // optional double max_engine_pedal = 2;
  if (has_max_engine_pedal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_engine_pedal(), target);
  }

  // optional int32 max_enable_fail_attempt = 3;
  if (has_max_enable_fail_attempt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_enable_fail_attempt(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (has_driving_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->driving_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleParameter)
  return target;
}

int VehicleParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brand());
    }

    // optional double max_engine_pedal = 2;
    if (has_max_engine_pedal()) {
      total_size += 1 + 8;
    }

    // optional int32 max_enable_fail_attempt = 3;
    if (has_max_enable_fail_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_enable_fail_attempt());
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.VehicleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.VehicleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.VehicleParameter)
    MergeFrom(*source);
  }
}

void VehicleParameter::MergeFrom(const VehicleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_max_engine_pedal()) {
      set_max_engine_pedal(from.max_engine_pedal());
    }
    if (from.has_max_enable_fail_attempt()) {
      set_max_enable_fail_attempt(from.max_enable_fail_attempt());
    }
    if (from.has_driving_mode()) {
      set_driving_mode(from.driving_mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.VehicleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParameter::CopyFrom(const VehicleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParameter::IsInitialized() const {

  return true;
}

void VehicleParameter::Swap(VehicleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParameter::InternalSwap(VehicleParameter* other) {
  std::swap(brand_, other->brand_);
  std::swap(max_engine_pedal_, other->max_engine_pedal_);
  std::swap(max_enable_fail_attempt_, other->max_enable_fail_attempt_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleParameter_descriptor_;
  metadata.reflection = VehicleParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleParameter

// optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
bool VehicleParameter::has_brand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleParameter::set_has_brand() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleParameter::clear_has_brand() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleParameter::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
 ::apollo::canbus::VehicleParameter_VehicleBrand VehicleParameter::brand() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.brand)
  return static_cast< ::apollo::canbus::VehicleParameter_VehicleBrand >(brand_);
}
 void VehicleParameter::set_brand(::apollo::canbus::VehicleParameter_VehicleBrand value) {
  assert(::apollo::canbus::VehicleParameter_VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.brand)
}

// optional double max_engine_pedal = 2;
bool VehicleParameter::has_max_engine_pedal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleParameter::set_has_max_engine_pedal() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleParameter::clear_has_max_engine_pedal() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleParameter::clear_max_engine_pedal() {
  max_engine_pedal_ = 0;
  clear_has_max_engine_pedal();
}
 double VehicleParameter::max_engine_pedal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.max_engine_pedal)
  return max_engine_pedal_;
}
 void VehicleParameter::set_max_engine_pedal(double value) {
  set_has_max_engine_pedal();
  max_engine_pedal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.max_engine_pedal)
}

// optional int32 max_enable_fail_attempt = 3;
bool VehicleParameter::has_max_enable_fail_attempt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleParameter::set_has_max_enable_fail_attempt() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleParameter::clear_has_max_enable_fail_attempt() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleParameter::clear_max_enable_fail_attempt() {
  max_enable_fail_attempt_ = 0;
  clear_has_max_enable_fail_attempt();
}
 ::google::protobuf::int32 VehicleParameter::max_enable_fail_attempt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.max_enable_fail_attempt)
  return max_enable_fail_attempt_;
}
 void VehicleParameter::set_max_enable_fail_attempt(::google::protobuf::int32 value) {
  set_has_max_enable_fail_attempt();
  max_enable_fail_attempt_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.max_enable_fail_attempt)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
bool VehicleParameter::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleParameter::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleParameter::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleParameter::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
 ::apollo::canbus::Chassis_DrivingMode VehicleParameter::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
 void VehicleParameter::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.driving_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
