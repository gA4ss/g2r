// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/lane_post_process_config.proto

#ifndef PROTOBUF_perception_2flane_5fpost_5fprocess_5fconfig_2eproto__INCLUDED
#define PROTOBUF_perception_2flane_5fpost_5fprocess_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace lane_post_process_config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();
void protobuf_AssignDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();
void protobuf_ShutdownFile_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();

class ModelConfigs;

// ===================================================================

class ModelConfigs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lane_post_process_config.ModelConfigs) */ {
 public:
  ModelConfigs();
  virtual ~ModelConfigs();

  ModelConfigs(const ModelConfigs& from);

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfigs& default_instance();

  void Swap(ModelConfigs* other);

  // implements Message ----------------------------------------------

  inline ModelConfigs* New() const { return New(NULL); }

  ModelConfigs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelConfigs& from);
  void MergeFrom(const ModelConfigs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string space_type = 3;
  bool has_space_type() const;
  void clear_space_type();
  static const int kSpaceTypeFieldNumber = 3;
  const ::std::string& space_type() const;
  void set_space_type(const ::std::string& value);
  void set_space_type(const char* value);
  void set_space_type(const char* value, size_t size);
  ::std::string* mutable_space_type();
  ::std::string* release_space_type();
  void set_allocated_space_type(::std::string* space_type);

  // optional int32 image_width = 4;
  bool has_image_width() const;
  void clear_image_width();
  static const int kImageWidthFieldNumber = 4;
  ::google::protobuf::int32 image_width() const;
  void set_image_width(::google::protobuf::int32 value);

  // optional int32 image_height = 5;
  bool has_image_height() const;
  void clear_image_height();
  static const int kImageHeightFieldNumber = 5;
  ::google::protobuf::int32 image_height() const;
  void set_image_height(::google::protobuf::int32 value);

  // repeated float roi = 6;
  int roi_size() const;
  void clear_roi();
  static const int kRoiFieldNumber = 6;
  float roi(int index) const;
  void set_roi(int index, float value);
  void add_roi(float value);
  const ::google::protobuf::RepeatedField< float >&
      roi() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_roi();

  // optional bool use_non_mask = 7;
  bool has_use_non_mask() const;
  void clear_use_non_mask();
  static const int kUseNonMaskFieldNumber = 7;
  bool use_non_mask() const;
  void set_use_non_mask(bool value);

  // repeated float non_mask = 8;
  int non_mask_size() const;
  void clear_non_mask();
  static const int kNonMaskFieldNumber = 8;
  float non_mask(int index) const;
  void set_non_mask(int index, float value);
  void add_non_mask(float value);
  const ::google::protobuf::RepeatedField< float >&
      non_mask() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_non_mask();

  // optional float lane_map_confidence_thresh = 9 [default = 0.95];
  bool has_lane_map_confidence_thresh() const;
  void clear_lane_map_confidence_thresh();
  static const int kLaneMapConfidenceThreshFieldNumber = 9;
  float lane_map_confidence_thresh() const;
  void set_lane_map_confidence_thresh(float value);

  // optional float cc_split_siz = 10 [default = 50];
  bool has_cc_split_siz() const;
  void clear_cc_split_siz();
  static const int kCcSplitSizFieldNumber = 10;
  float cc_split_siz() const;
  void set_cc_split_siz(float value);

  // optional int32 cc_split_len = 11 [default = 25];
  bool has_cc_split_len() const;
  void clear_cc_split_len();
  static const int kCcSplitLenFieldNumber = 11;
  ::google::protobuf::int32 cc_split_len() const;
  void set_cc_split_len(::google::protobuf::int32 value);

  // optional int32 min_cc_pixel_num = 12 [default = 10];
  bool has_min_cc_pixel_num() const;
  void clear_min_cc_pixel_num();
  static const int kMinCcPixelNumFieldNumber = 12;
  ::google::protobuf::int32 min_cc_pixel_num() const;
  void set_min_cc_pixel_num(::google::protobuf::int32 value);

  // optional int32 min_cc_size = 13 [default = 5];
  bool has_min_cc_size() const;
  void clear_min_cc_size();
  static const int kMinCcSizeFieldNumber = 13;
  ::google::protobuf::int32 min_cc_size() const;
  void set_min_cc_size(::google::protobuf::int32 value);

  // optional float min_y_search_offset = 14 [default = 0.5];
  bool has_min_y_search_offset() const;
  void clear_min_y_search_offset();
  static const int kMinYSearchOffsetFieldNumber = 14;
  float min_y_search_offset() const;
  void set_min_y_search_offset(float value);

  // optional float min_y_search_offset_image = 15 [default = 0.5];
  bool has_min_y_search_offset_image() const;
  void clear_min_y_search_offset_image();
  static const int kMinYSearchOffsetImageFieldNumber = 15;
  float min_y_search_offset_image() const;
  void set_min_y_search_offset_image(float value);

  // optional string assoc_method = 16;
  bool has_assoc_method() const;
  void clear_assoc_method();
  static const int kAssocMethodFieldNumber = 16;
  const ::std::string& assoc_method() const;
  void set_assoc_method(const ::std::string& value);
  void set_assoc_method(const char* value);
  void set_assoc_method(const char* value, size_t size);
  ::std::string* mutable_assoc_method();
  ::std::string* release_assoc_method();
  void set_allocated_assoc_method(::std::string* assoc_method);

  // optional float assoc_min_distance = 17 [default = -0.5];
  bool has_assoc_min_distance() const;
  void clear_assoc_min_distance();
  static const int kAssocMinDistanceFieldNumber = 17;
  float assoc_min_distance() const;
  void set_assoc_min_distance(float value);

  // optional float assoc_min_distance_image = 18 [default = -3];
  bool has_assoc_min_distance_image() const;
  void clear_assoc_min_distance_image();
  static const int kAssocMinDistanceImageFieldNumber = 18;
  float assoc_min_distance_image() const;
  void set_assoc_min_distance_image(float value);

  // optional float assoc_max_distance = 19 [default = 60];
  bool has_assoc_max_distance() const;
  void clear_assoc_max_distance();
  static const int kAssocMaxDistanceFieldNumber = 19;
  float assoc_max_distance() const;
  void set_assoc_max_distance(float value);

  // optional float assoc_max_distance_image = 20 [default = 400];
  bool has_assoc_max_distance_image() const;
  void clear_assoc_max_distance_image();
  static const int kAssocMaxDistanceImageFieldNumber = 20;
  float assoc_max_distance_image() const;
  void set_assoc_max_distance_image(float value);

  // optional float assoc_distance_weight = 21 [default = 0.4];
  bool has_assoc_distance_weight() const;
  void clear_assoc_distance_weight();
  static const int kAssocDistanceWeightFieldNumber = 21;
  float assoc_distance_weight() const;
  void set_assoc_distance_weight(float value);

  // optional float assoc_max_deviation_angle = 22 [default = 15];
  bool has_assoc_max_deviation_angle() const;
  void clear_assoc_max_deviation_angle();
  static const int kAssocMaxDeviationAngleFieldNumber = 22;
  float assoc_max_deviation_angle() const;
  void set_assoc_max_deviation_angle(float value);

  // optional float assoc_max_deviation_angle_image = 23 [default = 45];
  bool has_assoc_max_deviation_angle_image() const;
  void clear_assoc_max_deviation_angle_image();
  static const int kAssocMaxDeviationAngleImageFieldNumber = 23;
  float assoc_max_deviation_angle_image() const;
  void set_assoc_max_deviation_angle_image(float value);

  // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
  bool has_assoc_deviation_angle_weight() const;
  void clear_assoc_deviation_angle_weight();
  static const int kAssocDeviationAngleWeightFieldNumber = 24;
  float assoc_deviation_angle_weight() const;
  void set_assoc_deviation_angle_weight(float value);

  // optional float assoc_max_departure_distance = 25 [default = 3];
  bool has_assoc_max_departure_distance() const;
  void clear_assoc_max_departure_distance();
  static const int kAssocMaxDepartureDistanceFieldNumber = 25;
  float assoc_max_departure_distance() const;
  void set_assoc_max_departure_distance(float value);

  // optional float assoc_max_departure_distance_image = 26 [default = 80];
  bool has_assoc_max_departure_distance_image() const;
  void clear_assoc_max_departure_distance_image();
  static const int kAssocMaxDepartureDistanceImageFieldNumber = 26;
  float assoc_max_departure_distance_image() const;
  void set_assoc_max_departure_distance_image(float value);

  // optional float assoc_departure_distance_weight = 27 [default = 0.2];
  bool has_assoc_departure_distance_weight() const;
  void clear_assoc_departure_distance_weight();
  static const int kAssocDepartureDistanceWeightFieldNumber = 27;
  float assoc_departure_distance_weight() const;
  void set_assoc_departure_distance_weight(float value);

  // optional float assoc_max_relative_orie = 28 [default = 15];
  bool has_assoc_max_relative_orie() const;
  void clear_assoc_max_relative_orie();
  static const int kAssocMaxRelativeOrieFieldNumber = 28;
  float assoc_max_relative_orie() const;
  void set_assoc_max_relative_orie(float value);

  // optional float assoc_max_relative_orie_image = 29 [default = 45];
  bool has_assoc_max_relative_orie_image() const;
  void clear_assoc_max_relative_orie_image();
  static const int kAssocMaxRelativeOrieImageFieldNumber = 29;
  float assoc_max_relative_orie_image() const;
  void set_assoc_max_relative_orie_image(float value);

  // optional float assoc_relative_orie_weight = 30 [default = 0.2];
  bool has_assoc_relative_orie_weight() const;
  void clear_assoc_relative_orie_weight();
  static const int kAssocRelativeOrieWeightFieldNumber = 30;
  float assoc_relative_orie_weight() const;
  void set_assoc_relative_orie_weight(float value);

  // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
  bool has_assoc_min_orientation_estimation_size() const;
  void clear_assoc_min_orientation_estimation_size();
  static const int kAssocMinOrientationEstimationSizeFieldNumber = 31;
  float assoc_min_orientation_estimation_size() const;
  void set_assoc_min_orientation_estimation_size(float value);

  // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
  bool has_assoc_min_orientation_estimation_size_image() const;
  void clear_assoc_min_orientation_estimation_size_image();
  static const int kAssocMinOrientationEstimationSizeImageFieldNumber = 32;
  float assoc_min_orientation_estimation_size_image() const;
  void set_assoc_min_orientation_estimation_size_image(float value);

  // optional int32 max_cc_marker_match_num = 33 [default = 1];
  bool has_max_cc_marker_match_num() const;
  void clear_max_cc_marker_match_num();
  static const int kMaxCcMarkerMatchNumFieldNumber = 33;
  ::google::protobuf::int32 max_cc_marker_match_num() const;
  void set_max_cc_marker_match_num(::google::protobuf::int32 value);

  // optional float slide_window_size = 34 [default = 15];
  bool has_slide_window_size() const;
  void clear_slide_window_size();
  static const int kSlideWindowSizeFieldNumber = 34;
  float slide_window_size() const;
  void set_slide_window_size(float value);

  // optional float slide_window_size_image = 35 [default = 200];
  bool has_slide_window_size_image() const;
  void clear_slide_window_size_image();
  static const int kSlideWindowSizeImageFieldNumber = 35;
  float slide_window_size_image() const;
  void set_slide_window_size_image(float value);

  // optional int32 slide_window_max_point_num = 36 [default = 3];
  bool has_slide_window_max_point_num() const;
  void clear_slide_window_max_point_num();
  static const int kSlideWindowMaxPointNumFieldNumber = 36;
  ::google::protobuf::int32 slide_window_max_point_num() const;
  void set_slide_window_max_point_num(::google::protobuf::int32 value);

  // optional int32 max_group_prediction_marker_num = 37 [default = 3];
  bool has_max_group_prediction_marker_num() const;
  void clear_max_group_prediction_marker_num();
  static const int kMaxGroupPredictionMarkerNumFieldNumber = 37;
  ::google::protobuf::int32 max_group_prediction_marker_num() const;
  void set_max_group_prediction_marker_num(::google::protobuf::int32 value);

  // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
  bool has_orientation_estimation_skip_marker_num() const;
  void clear_orientation_estimation_skip_marker_num();
  static const int kOrientationEstimationSkipMarkerNumFieldNumber = 38;
  ::google::protobuf::int32 orientation_estimation_skip_marker_num() const;
  void set_orientation_estimation_skip_marker_num(::google::protobuf::int32 value);

  // optional float lane_interval_distance = 39 [default = 4];
  bool has_lane_interval_distance() const;
  void clear_lane_interval_distance();
  static const int kLaneIntervalDistanceFieldNumber = 39;
  float lane_interval_distance() const;
  void set_lane_interval_distance(float value);

  // optional float min_instance_size_prefiltered = 40 [default = 3];
  bool has_min_instance_size_prefiltered() const;
  void clear_min_instance_size_prefiltered();
  static const int kMinInstanceSizePrefilteredFieldNumber = 40;
  float min_instance_size_prefiltered() const;
  void set_min_instance_size_prefiltered(float value);

  // optional float min_instance_size_prefiltered_image = 41 [default = 20];
  bool has_min_instance_size_prefiltered_image() const;
  void clear_min_instance_size_prefiltered_image();
  static const int kMinInstanceSizePrefilteredImageFieldNumber = 41;
  float min_instance_size_prefiltered_image() const;
  void set_min_instance_size_prefiltered_image(float value);

  // optional float max_size_to_fit_straight_line = 42 [default = 10];
  bool has_max_size_to_fit_straight_line() const;
  void clear_max_size_to_fit_straight_line();
  static const int kMaxSizeToFitStraightLineFieldNumber = 42;
  float max_size_to_fit_straight_line() const;
  void set_max_size_to_fit_straight_line(float value);

  // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
  bool has_max_size_to_fit_straight_line_image() const;
  void clear_max_size_to_fit_straight_line_image();
  static const int kMaxSizeToFitStraightLineImageFieldNumber = 43;
  float max_size_to_fit_straight_line_image() const;
  void set_max_size_to_fit_straight_line_image(float value);

  // optional float online_pitch_angle = 44 [default = -2.5];
  bool has_online_pitch_angle() const;
  void clear_online_pitch_angle();
  static const int kOnlinePitchAngleFieldNumber = 44;
  float online_pitch_angle() const;
  void set_online_pitch_angle(float value);

  // optional float ground_height = 45 [default = 1.6];
  bool has_ground_height() const;
  void clear_ground_height();
  static const int kGroundHeightFieldNumber = 45;
  float ground_height() const;
  void set_ground_height(float value);

  // optional float max_distance_to_see_for_transformer = 46 [default = 500];
  bool has_max_distance_to_see_for_transformer() const;
  void clear_max_distance_to_see_for_transformer();
  static const int kMaxDistanceToSeeForTransformerFieldNumber = 46;
  float max_distance_to_see_for_transformer() const;
  void set_max_distance_to_see_for_transformer(float value);

  // optional float lane_map_scale = 47 [default = 2];
  bool has_lane_map_scale() const;
  void clear_lane_map_scale();
  static const int kLaneMapScaleFieldNumber = 47;
  float lane_map_scale() const;
  void set_lane_map_scale(float value);

  // optional int32 start_y_pos = 48 [default = 312];
  bool has_start_y_pos() const;
  void clear_start_y_pos();
  static const int kStartYPosFieldNumber = 48;
  ::google::protobuf::int32 start_y_pos() const;
  void set_start_y_pos(::google::protobuf::int32 value);

  // optional int32 lane_map_width = 49 [default = 960];
  bool has_lane_map_width() const;
  void clear_lane_map_width();
  static const int kLaneMapWidthFieldNumber = 49;
  ::google::protobuf::int32 lane_map_width() const;
  void set_lane_map_width(::google::protobuf::int32 value);

  // optional int32 lane_map_height = 50 [default = 384];
  bool has_lane_map_height() const;
  void clear_lane_map_height();
  static const int kLaneMapHeightFieldNumber = 50;
  ::google::protobuf::int32 lane_map_height() const;
  void set_lane_map_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.lane_post_process_config.ModelConfigs)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_space_type();
  inline void clear_has_space_type();
  inline void set_has_image_width();
  inline void clear_has_image_width();
  inline void set_has_image_height();
  inline void clear_has_image_height();
  inline void set_has_use_non_mask();
  inline void clear_has_use_non_mask();
  inline void set_has_lane_map_confidence_thresh();
  inline void clear_has_lane_map_confidence_thresh();
  inline void set_has_cc_split_siz();
  inline void clear_has_cc_split_siz();
  inline void set_has_cc_split_len();
  inline void clear_has_cc_split_len();
  inline void set_has_min_cc_pixel_num();
  inline void clear_has_min_cc_pixel_num();
  inline void set_has_min_cc_size();
  inline void clear_has_min_cc_size();
  inline void set_has_min_y_search_offset();
  inline void clear_has_min_y_search_offset();
  inline void set_has_min_y_search_offset_image();
  inline void clear_has_min_y_search_offset_image();
  inline void set_has_assoc_method();
  inline void clear_has_assoc_method();
  inline void set_has_assoc_min_distance();
  inline void clear_has_assoc_min_distance();
  inline void set_has_assoc_min_distance_image();
  inline void clear_has_assoc_min_distance_image();
  inline void set_has_assoc_max_distance();
  inline void clear_has_assoc_max_distance();
  inline void set_has_assoc_max_distance_image();
  inline void clear_has_assoc_max_distance_image();
  inline void set_has_assoc_distance_weight();
  inline void clear_has_assoc_distance_weight();
  inline void set_has_assoc_max_deviation_angle();
  inline void clear_has_assoc_max_deviation_angle();
  inline void set_has_assoc_max_deviation_angle_image();
  inline void clear_has_assoc_max_deviation_angle_image();
  inline void set_has_assoc_deviation_angle_weight();
  inline void clear_has_assoc_deviation_angle_weight();
  inline void set_has_assoc_max_departure_distance();
  inline void clear_has_assoc_max_departure_distance();
  inline void set_has_assoc_max_departure_distance_image();
  inline void clear_has_assoc_max_departure_distance_image();
  inline void set_has_assoc_departure_distance_weight();
  inline void clear_has_assoc_departure_distance_weight();
  inline void set_has_assoc_max_relative_orie();
  inline void clear_has_assoc_max_relative_orie();
  inline void set_has_assoc_max_relative_orie_image();
  inline void clear_has_assoc_max_relative_orie_image();
  inline void set_has_assoc_relative_orie_weight();
  inline void clear_has_assoc_relative_orie_weight();
  inline void set_has_assoc_min_orientation_estimation_size();
  inline void clear_has_assoc_min_orientation_estimation_size();
  inline void set_has_assoc_min_orientation_estimation_size_image();
  inline void clear_has_assoc_min_orientation_estimation_size_image();
  inline void set_has_max_cc_marker_match_num();
  inline void clear_has_max_cc_marker_match_num();
  inline void set_has_slide_window_size();
  inline void clear_has_slide_window_size();
  inline void set_has_slide_window_size_image();
  inline void clear_has_slide_window_size_image();
  inline void set_has_slide_window_max_point_num();
  inline void clear_has_slide_window_max_point_num();
  inline void set_has_max_group_prediction_marker_num();
  inline void clear_has_max_group_prediction_marker_num();
  inline void set_has_orientation_estimation_skip_marker_num();
  inline void clear_has_orientation_estimation_skip_marker_num();
  inline void set_has_lane_interval_distance();
  inline void clear_has_lane_interval_distance();
  inline void set_has_min_instance_size_prefiltered();
  inline void clear_has_min_instance_size_prefiltered();
  inline void set_has_min_instance_size_prefiltered_image();
  inline void clear_has_min_instance_size_prefiltered_image();
  inline void set_has_max_size_to_fit_straight_line();
  inline void clear_has_max_size_to_fit_straight_line();
  inline void set_has_max_size_to_fit_straight_line_image();
  inline void clear_has_max_size_to_fit_straight_line_image();
  inline void set_has_online_pitch_angle();
  inline void clear_has_online_pitch_angle();
  inline void set_has_ground_height();
  inline void clear_has_ground_height();
  inline void set_has_max_distance_to_see_for_transformer();
  inline void clear_has_max_distance_to_see_for_transformer();
  inline void set_has_lane_map_scale();
  inline void clear_has_lane_map_scale();
  inline void set_has_start_y_pos();
  inline void clear_has_start_y_pos();
  inline void set_has_lane_map_width();
  inline void clear_has_lane_map_width();
  inline void set_has_lane_map_height();
  inline void clear_has_lane_map_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr space_type_;
  ::google::protobuf::int32 image_width_;
  ::google::protobuf::int32 image_height_;
  ::google::protobuf::RepeatedField< float > roi_;
  ::google::protobuf::RepeatedField< float > non_mask_;
  bool use_non_mask_;
  float lane_map_confidence_thresh_;
  float cc_split_siz_;
  ::google::protobuf::int32 cc_split_len_;
  ::google::protobuf::int32 min_cc_pixel_num_;
  ::google::protobuf::int32 min_cc_size_;
  float min_y_search_offset_;
  float min_y_search_offset_image_;
  ::google::protobuf::internal::ArenaStringPtr assoc_method_;
  float assoc_min_distance_;
  float assoc_min_distance_image_;
  float assoc_max_distance_;
  float assoc_max_distance_image_;
  float assoc_distance_weight_;
  float assoc_max_deviation_angle_;
  float assoc_max_deviation_angle_image_;
  float assoc_deviation_angle_weight_;
  float assoc_max_departure_distance_;
  float assoc_max_departure_distance_image_;
  float assoc_departure_distance_weight_;
  float assoc_max_relative_orie_;
  float assoc_max_relative_orie_image_;
  float assoc_relative_orie_weight_;
  float assoc_min_orientation_estimation_size_;
  float assoc_min_orientation_estimation_size_image_;
  ::google::protobuf::int32 max_cc_marker_match_num_;
  float slide_window_size_;
  float slide_window_size_image_;
  ::google::protobuf::int32 slide_window_max_point_num_;
  ::google::protobuf::int32 max_group_prediction_marker_num_;
  ::google::protobuf::int32 orientation_estimation_skip_marker_num_;
  float lane_interval_distance_;
  float min_instance_size_prefiltered_;
  float min_instance_size_prefiltered_image_;
  float max_size_to_fit_straight_line_;
  float max_size_to_fit_straight_line_image_;
  float online_pitch_angle_;
  float ground_height_;
  float max_distance_to_see_for_transformer_;
  float lane_map_scale_;
  ::google::protobuf::int32 start_y_pos_;
  ::google::protobuf::int32 lane_map_width_;
  ::google::protobuf::int32 lane_map_height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ModelConfigs* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1;
inline bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelConfigs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.name)
}
inline void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.name)
}
inline void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.name)
}
inline ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.name)
}

// optional string version = 2;
inline bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelConfigs::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.version)
}
inline void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.version)
}
inline void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.version)
}
inline ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.version)
}

// optional string space_type = 3;
inline bool ModelConfigs::has_space_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelConfigs::set_has_space_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelConfigs::clear_has_space_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelConfigs::clear_space_type() {
  space_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_space_type();
}
inline const ::std::string& ModelConfigs::space_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  return space_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_space_type(const ::std::string& value) {
  set_has_space_type();
  space_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}
inline void ModelConfigs::set_space_type(const char* value) {
  set_has_space_type();
  space_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}
inline void ModelConfigs::set_space_type(const char* value, size_t size) {
  set_has_space_type();
  space_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}
inline ::std::string* ModelConfigs::mutable_space_type() {
  set_has_space_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  return space_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelConfigs::release_space_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  clear_has_space_type();
  return space_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_allocated_space_type(::std::string* space_type) {
  if (space_type != NULL) {
    set_has_space_type();
  } else {
    clear_has_space_type();
  }
  space_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), space_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}

// optional int32 image_width = 4;
inline bool ModelConfigs::has_image_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelConfigs::set_has_image_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelConfigs::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelConfigs::clear_image_width() {
  image_width_ = 0;
  clear_has_image_width();
}
inline ::google::protobuf::int32 ModelConfigs::image_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.image_width)
  return image_width_;
}
inline void ModelConfigs::set_image_width(::google::protobuf::int32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.image_width)
}

// optional int32 image_height = 5;
inline bool ModelConfigs::has_image_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelConfigs::set_has_image_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelConfigs::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelConfigs::clear_image_height() {
  image_height_ = 0;
  clear_has_image_height();
}
inline ::google::protobuf::int32 ModelConfigs::image_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.image_height)
  return image_height_;
}
inline void ModelConfigs::set_image_height(::google::protobuf::int32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.image_height)
}

// repeated float roi = 6;
inline int ModelConfigs::roi_size() const {
  return roi_.size();
}
inline void ModelConfigs::clear_roi() {
  roi_.Clear();
}
inline float ModelConfigs::roi(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return roi_.Get(index);
}
inline void ModelConfigs::set_roi(int index, float value) {
  roi_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.roi)
}
inline void ModelConfigs::add_roi(float value) {
  roi_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.lane_post_process_config.ModelConfigs.roi)
}
inline const ::google::protobuf::RepeatedField< float >&
ModelConfigs::roi() const {
  // @@protoc_insertion_point(field_list:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return roi_;
}
inline ::google::protobuf::RepeatedField< float >*
ModelConfigs::mutable_roi() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return &roi_;
}

// optional bool use_non_mask = 7;
inline bool ModelConfigs::has_use_non_mask() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelConfigs::set_has_use_non_mask() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelConfigs::clear_has_use_non_mask() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelConfigs::clear_use_non_mask() {
  use_non_mask_ = false;
  clear_has_use_non_mask();
}
inline bool ModelConfigs::use_non_mask() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.use_non_mask)
  return use_non_mask_;
}
inline void ModelConfigs::set_use_non_mask(bool value) {
  set_has_use_non_mask();
  use_non_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.use_non_mask)
}

// repeated float non_mask = 8;
inline int ModelConfigs::non_mask_size() const {
  return non_mask_.size();
}
inline void ModelConfigs::clear_non_mask() {
  non_mask_.Clear();
}
inline float ModelConfigs::non_mask(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return non_mask_.Get(index);
}
inline void ModelConfigs::set_non_mask(int index, float value) {
  non_mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
}
inline void ModelConfigs::add_non_mask(float value) {
  non_mask_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
}
inline const ::google::protobuf::RepeatedField< float >&
ModelConfigs::non_mask() const {
  // @@protoc_insertion_point(field_list:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return non_mask_;
}
inline ::google::protobuf::RepeatedField< float >*
ModelConfigs::mutable_non_mask() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return &non_mask_;
}

// optional float lane_map_confidence_thresh = 9 [default = 0.95];
inline bool ModelConfigs::has_lane_map_confidence_thresh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelConfigs::set_has_lane_map_confidence_thresh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelConfigs::clear_has_lane_map_confidence_thresh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelConfigs::clear_lane_map_confidence_thresh() {
  lane_map_confidence_thresh_ = 0.95f;
  clear_has_lane_map_confidence_thresh();
}
inline float ModelConfigs::lane_map_confidence_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_confidence_thresh)
  return lane_map_confidence_thresh_;
}
inline void ModelConfigs::set_lane_map_confidence_thresh(float value) {
  set_has_lane_map_confidence_thresh();
  lane_map_confidence_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_confidence_thresh)
}

// optional float cc_split_siz = 10 [default = 50];
inline bool ModelConfigs::has_cc_split_siz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelConfigs::set_has_cc_split_siz() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelConfigs::clear_has_cc_split_siz() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelConfigs::clear_cc_split_siz() {
  cc_split_siz_ = 50;
  clear_has_cc_split_siz();
}
inline float ModelConfigs::cc_split_siz() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_siz)
  return cc_split_siz_;
}
inline void ModelConfigs::set_cc_split_siz(float value) {
  set_has_cc_split_siz();
  cc_split_siz_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_siz)
}

// optional int32 cc_split_len = 11 [default = 25];
inline bool ModelConfigs::has_cc_split_len() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelConfigs::set_has_cc_split_len() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelConfigs::clear_has_cc_split_len() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelConfigs::clear_cc_split_len() {
  cc_split_len_ = 25;
  clear_has_cc_split_len();
}
inline ::google::protobuf::int32 ModelConfigs::cc_split_len() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_len)
  return cc_split_len_;
}
inline void ModelConfigs::set_cc_split_len(::google::protobuf::int32 value) {
  set_has_cc_split_len();
  cc_split_len_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_len)
}

// optional int32 min_cc_pixel_num = 12 [default = 10];
inline bool ModelConfigs::has_min_cc_pixel_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModelConfigs::set_has_min_cc_pixel_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModelConfigs::clear_has_min_cc_pixel_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModelConfigs::clear_min_cc_pixel_num() {
  min_cc_pixel_num_ = 10;
  clear_has_min_cc_pixel_num();
}
inline ::google::protobuf::int32 ModelConfigs::min_cc_pixel_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_pixel_num)
  return min_cc_pixel_num_;
}
inline void ModelConfigs::set_min_cc_pixel_num(::google::protobuf::int32 value) {
  set_has_min_cc_pixel_num();
  min_cc_pixel_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_pixel_num)
}

// optional int32 min_cc_size = 13 [default = 5];
inline bool ModelConfigs::has_min_cc_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModelConfigs::set_has_min_cc_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModelConfigs::clear_has_min_cc_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModelConfigs::clear_min_cc_size() {
  min_cc_size_ = 5;
  clear_has_min_cc_size();
}
inline ::google::protobuf::int32 ModelConfigs::min_cc_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_size)
  return min_cc_size_;
}
inline void ModelConfigs::set_min_cc_size(::google::protobuf::int32 value) {
  set_has_min_cc_size();
  min_cc_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_size)
}

// optional float min_y_search_offset = 14 [default = 0.5];
inline bool ModelConfigs::has_min_y_search_offset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModelConfigs::set_has_min_y_search_offset() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModelConfigs::clear_has_min_y_search_offset() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModelConfigs::clear_min_y_search_offset() {
  min_y_search_offset_ = 0.5f;
  clear_has_min_y_search_offset();
}
inline float ModelConfigs::min_y_search_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset)
  return min_y_search_offset_;
}
inline void ModelConfigs::set_min_y_search_offset(float value) {
  set_has_min_y_search_offset();
  min_y_search_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset)
}

// optional float min_y_search_offset_image = 15 [default = 0.5];
inline bool ModelConfigs::has_min_y_search_offset_image() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModelConfigs::set_has_min_y_search_offset_image() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModelConfigs::clear_has_min_y_search_offset_image() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModelConfigs::clear_min_y_search_offset_image() {
  min_y_search_offset_image_ = 0.5f;
  clear_has_min_y_search_offset_image();
}
inline float ModelConfigs::min_y_search_offset_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset_image)
  return min_y_search_offset_image_;
}
inline void ModelConfigs::set_min_y_search_offset_image(float value) {
  set_has_min_y_search_offset_image();
  min_y_search_offset_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset_image)
}

// optional string assoc_method = 16;
inline bool ModelConfigs::has_assoc_method() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModelConfigs::set_has_assoc_method() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModelConfigs::clear_has_assoc_method() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModelConfigs::clear_assoc_method() {
  assoc_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_assoc_method();
}
inline const ::std::string& ModelConfigs::assoc_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  return assoc_method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_assoc_method(const ::std::string& value) {
  set_has_assoc_method();
  assoc_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}
inline void ModelConfigs::set_assoc_method(const char* value) {
  set_has_assoc_method();
  assoc_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}
inline void ModelConfigs::set_assoc_method(const char* value, size_t size) {
  set_has_assoc_method();
  assoc_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}
inline ::std::string* ModelConfigs::mutable_assoc_method() {
  set_has_assoc_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  return assoc_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelConfigs::release_assoc_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  clear_has_assoc_method();
  return assoc_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelConfigs::set_allocated_assoc_method(::std::string* assoc_method) {
  if (assoc_method != NULL) {
    set_has_assoc_method();
  } else {
    clear_has_assoc_method();
  }
  assoc_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assoc_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}

// optional float assoc_min_distance = 17 [default = -0.5];
inline bool ModelConfigs::has_assoc_min_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModelConfigs::set_has_assoc_min_distance() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModelConfigs::clear_has_assoc_min_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModelConfigs::clear_assoc_min_distance() {
  assoc_min_distance_ = -0.5f;
  clear_has_assoc_min_distance();
}
inline float ModelConfigs::assoc_min_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance)
  return assoc_min_distance_;
}
inline void ModelConfigs::set_assoc_min_distance(float value) {
  set_has_assoc_min_distance();
  assoc_min_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance)
}

// optional float assoc_min_distance_image = 18 [default = -3];
inline bool ModelConfigs::has_assoc_min_distance_image() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModelConfigs::set_has_assoc_min_distance_image() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModelConfigs::clear_has_assoc_min_distance_image() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModelConfigs::clear_assoc_min_distance_image() {
  assoc_min_distance_image_ = -3;
  clear_has_assoc_min_distance_image();
}
inline float ModelConfigs::assoc_min_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance_image)
  return assoc_min_distance_image_;
}
inline void ModelConfigs::set_assoc_min_distance_image(float value) {
  set_has_assoc_min_distance_image();
  assoc_min_distance_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance_image)
}

// optional float assoc_max_distance = 19 [default = 60];
inline bool ModelConfigs::has_assoc_max_distance() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_distance() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModelConfigs::clear_has_assoc_max_distance() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModelConfigs::clear_assoc_max_distance() {
  assoc_max_distance_ = 60;
  clear_has_assoc_max_distance();
}
inline float ModelConfigs::assoc_max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance)
  return assoc_max_distance_;
}
inline void ModelConfigs::set_assoc_max_distance(float value) {
  set_has_assoc_max_distance();
  assoc_max_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance)
}

// optional float assoc_max_distance_image = 20 [default = 400];
inline bool ModelConfigs::has_assoc_max_distance_image() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_distance_image() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModelConfigs::clear_has_assoc_max_distance_image() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModelConfigs::clear_assoc_max_distance_image() {
  assoc_max_distance_image_ = 400;
  clear_has_assoc_max_distance_image();
}
inline float ModelConfigs::assoc_max_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance_image)
  return assoc_max_distance_image_;
}
inline void ModelConfigs::set_assoc_max_distance_image(float value) {
  set_has_assoc_max_distance_image();
  assoc_max_distance_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance_image)
}

// optional float assoc_distance_weight = 21 [default = 0.4];
inline bool ModelConfigs::has_assoc_distance_weight() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModelConfigs::set_has_assoc_distance_weight() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModelConfigs::clear_has_assoc_distance_weight() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModelConfigs::clear_assoc_distance_weight() {
  assoc_distance_weight_ = 0.4f;
  clear_has_assoc_distance_weight();
}
inline float ModelConfigs::assoc_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_distance_weight)
  return assoc_distance_weight_;
}
inline void ModelConfigs::set_assoc_distance_weight(float value) {
  set_has_assoc_distance_weight();
  assoc_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_distance_weight)
}

// optional float assoc_max_deviation_angle = 22 [default = 15];
inline bool ModelConfigs::has_assoc_max_deviation_angle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_deviation_angle() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModelConfigs::clear_has_assoc_max_deviation_angle() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModelConfigs::clear_assoc_max_deviation_angle() {
  assoc_max_deviation_angle_ = 15;
  clear_has_assoc_max_deviation_angle();
}
inline float ModelConfigs::assoc_max_deviation_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle)
  return assoc_max_deviation_angle_;
}
inline void ModelConfigs::set_assoc_max_deviation_angle(float value) {
  set_has_assoc_max_deviation_angle();
  assoc_max_deviation_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle)
}

// optional float assoc_max_deviation_angle_image = 23 [default = 45];
inline bool ModelConfigs::has_assoc_max_deviation_angle_image() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_deviation_angle_image() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModelConfigs::clear_has_assoc_max_deviation_angle_image() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModelConfigs::clear_assoc_max_deviation_angle_image() {
  assoc_max_deviation_angle_image_ = 45;
  clear_has_assoc_max_deviation_angle_image();
}
inline float ModelConfigs::assoc_max_deviation_angle_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle_image)
  return assoc_max_deviation_angle_image_;
}
inline void ModelConfigs::set_assoc_max_deviation_angle_image(float value) {
  set_has_assoc_max_deviation_angle_image();
  assoc_max_deviation_angle_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle_image)
}

// optional float assoc_deviation_angle_weight = 24 [default = 0.2];
inline bool ModelConfigs::has_assoc_deviation_angle_weight() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModelConfigs::set_has_assoc_deviation_angle_weight() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModelConfigs::clear_has_assoc_deviation_angle_weight() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModelConfigs::clear_assoc_deviation_angle_weight() {
  assoc_deviation_angle_weight_ = 0.2f;
  clear_has_assoc_deviation_angle_weight();
}
inline float ModelConfigs::assoc_deviation_angle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_deviation_angle_weight)
  return assoc_deviation_angle_weight_;
}
inline void ModelConfigs::set_assoc_deviation_angle_weight(float value) {
  set_has_assoc_deviation_angle_weight();
  assoc_deviation_angle_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_deviation_angle_weight)
}

// optional float assoc_max_departure_distance = 25 [default = 3];
inline bool ModelConfigs::has_assoc_max_departure_distance() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_departure_distance() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ModelConfigs::clear_has_assoc_max_departure_distance() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ModelConfigs::clear_assoc_max_departure_distance() {
  assoc_max_departure_distance_ = 3;
  clear_has_assoc_max_departure_distance();
}
inline float ModelConfigs::assoc_max_departure_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance)
  return assoc_max_departure_distance_;
}
inline void ModelConfigs::set_assoc_max_departure_distance(float value) {
  set_has_assoc_max_departure_distance();
  assoc_max_departure_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance)
}

// optional float assoc_max_departure_distance_image = 26 [default = 80];
inline bool ModelConfigs::has_assoc_max_departure_distance_image() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_departure_distance_image() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ModelConfigs::clear_has_assoc_max_departure_distance_image() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ModelConfigs::clear_assoc_max_departure_distance_image() {
  assoc_max_departure_distance_image_ = 80;
  clear_has_assoc_max_departure_distance_image();
}
inline float ModelConfigs::assoc_max_departure_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance_image)
  return assoc_max_departure_distance_image_;
}
inline void ModelConfigs::set_assoc_max_departure_distance_image(float value) {
  set_has_assoc_max_departure_distance_image();
  assoc_max_departure_distance_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance_image)
}

// optional float assoc_departure_distance_weight = 27 [default = 0.2];
inline bool ModelConfigs::has_assoc_departure_distance_weight() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_departure_distance_weight() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ModelConfigs::clear_has_assoc_departure_distance_weight() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ModelConfigs::clear_assoc_departure_distance_weight() {
  assoc_departure_distance_weight_ = 0.2f;
  clear_has_assoc_departure_distance_weight();
}
inline float ModelConfigs::assoc_departure_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_departure_distance_weight)
  return assoc_departure_distance_weight_;
}
inline void ModelConfigs::set_assoc_departure_distance_weight(float value) {
  set_has_assoc_departure_distance_weight();
  assoc_departure_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_departure_distance_weight)
}

// optional float assoc_max_relative_orie = 28 [default = 15];
inline bool ModelConfigs::has_assoc_max_relative_orie() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_relative_orie() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ModelConfigs::clear_has_assoc_max_relative_orie() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ModelConfigs::clear_assoc_max_relative_orie() {
  assoc_max_relative_orie_ = 15;
  clear_has_assoc_max_relative_orie();
}
inline float ModelConfigs::assoc_max_relative_orie() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie)
  return assoc_max_relative_orie_;
}
inline void ModelConfigs::set_assoc_max_relative_orie(float value) {
  set_has_assoc_max_relative_orie();
  assoc_max_relative_orie_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie)
}

// optional float assoc_max_relative_orie_image = 29 [default = 45];
inline bool ModelConfigs::has_assoc_max_relative_orie_image() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_max_relative_orie_image() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ModelConfigs::clear_has_assoc_max_relative_orie_image() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ModelConfigs::clear_assoc_max_relative_orie_image() {
  assoc_max_relative_orie_image_ = 45;
  clear_has_assoc_max_relative_orie_image();
}
inline float ModelConfigs::assoc_max_relative_orie_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie_image)
  return assoc_max_relative_orie_image_;
}
inline void ModelConfigs::set_assoc_max_relative_orie_image(float value) {
  set_has_assoc_max_relative_orie_image();
  assoc_max_relative_orie_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie_image)
}

// optional float assoc_relative_orie_weight = 30 [default = 0.2];
inline bool ModelConfigs::has_assoc_relative_orie_weight() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_relative_orie_weight() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ModelConfigs::clear_has_assoc_relative_orie_weight() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ModelConfigs::clear_assoc_relative_orie_weight() {
  assoc_relative_orie_weight_ = 0.2f;
  clear_has_assoc_relative_orie_weight();
}
inline float ModelConfigs::assoc_relative_orie_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_relative_orie_weight)
  return assoc_relative_orie_weight_;
}
inline void ModelConfigs::set_assoc_relative_orie_weight(float value) {
  set_has_assoc_relative_orie_weight();
  assoc_relative_orie_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_relative_orie_weight)
}

// optional float assoc_min_orientation_estimation_size = 31 [default = 3];
inline bool ModelConfigs::has_assoc_min_orientation_estimation_size() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_min_orientation_estimation_size() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ModelConfigs::clear_has_assoc_min_orientation_estimation_size() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ModelConfigs::clear_assoc_min_orientation_estimation_size() {
  assoc_min_orientation_estimation_size_ = 3;
  clear_has_assoc_min_orientation_estimation_size();
}
inline float ModelConfigs::assoc_min_orientation_estimation_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size)
  return assoc_min_orientation_estimation_size_;
}
inline void ModelConfigs::set_assoc_min_orientation_estimation_size(float value) {
  set_has_assoc_min_orientation_estimation_size();
  assoc_min_orientation_estimation_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size)
}

// optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
inline bool ModelConfigs::has_assoc_min_orientation_estimation_size_image() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ModelConfigs::set_has_assoc_min_orientation_estimation_size_image() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ModelConfigs::clear_has_assoc_min_orientation_estimation_size_image() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ModelConfigs::clear_assoc_min_orientation_estimation_size_image() {
  assoc_min_orientation_estimation_size_image_ = 10;
  clear_has_assoc_min_orientation_estimation_size_image();
}
inline float ModelConfigs::assoc_min_orientation_estimation_size_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size_image)
  return assoc_min_orientation_estimation_size_image_;
}
inline void ModelConfigs::set_assoc_min_orientation_estimation_size_image(float value) {
  set_has_assoc_min_orientation_estimation_size_image();
  assoc_min_orientation_estimation_size_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size_image)
}

// optional int32 max_cc_marker_match_num = 33 [default = 1];
inline bool ModelConfigs::has_max_cc_marker_match_num() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ModelConfigs::set_has_max_cc_marker_match_num() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ModelConfigs::clear_has_max_cc_marker_match_num() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ModelConfigs::clear_max_cc_marker_match_num() {
  max_cc_marker_match_num_ = 1;
  clear_has_max_cc_marker_match_num();
}
inline ::google::protobuf::int32 ModelConfigs::max_cc_marker_match_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_cc_marker_match_num)
  return max_cc_marker_match_num_;
}
inline void ModelConfigs::set_max_cc_marker_match_num(::google::protobuf::int32 value) {
  set_has_max_cc_marker_match_num();
  max_cc_marker_match_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_cc_marker_match_num)
}

// optional float slide_window_size = 34 [default = 15];
inline bool ModelConfigs::has_slide_window_size() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ModelConfigs::set_has_slide_window_size() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ModelConfigs::clear_has_slide_window_size() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ModelConfigs::clear_slide_window_size() {
  slide_window_size_ = 15;
  clear_has_slide_window_size();
}
inline float ModelConfigs::slide_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size)
  return slide_window_size_;
}
inline void ModelConfigs::set_slide_window_size(float value) {
  set_has_slide_window_size();
  slide_window_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size)
}

// optional float slide_window_size_image = 35 [default = 200];
inline bool ModelConfigs::has_slide_window_size_image() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ModelConfigs::set_has_slide_window_size_image() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ModelConfigs::clear_has_slide_window_size_image() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ModelConfigs::clear_slide_window_size_image() {
  slide_window_size_image_ = 200;
  clear_has_slide_window_size_image();
}
inline float ModelConfigs::slide_window_size_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size_image)
  return slide_window_size_image_;
}
inline void ModelConfigs::set_slide_window_size_image(float value) {
  set_has_slide_window_size_image();
  slide_window_size_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size_image)
}

// optional int32 slide_window_max_point_num = 36 [default = 3];
inline bool ModelConfigs::has_slide_window_max_point_num() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ModelConfigs::set_has_slide_window_max_point_num() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ModelConfigs::clear_has_slide_window_max_point_num() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ModelConfigs::clear_slide_window_max_point_num() {
  slide_window_max_point_num_ = 3;
  clear_has_slide_window_max_point_num();
}
inline ::google::protobuf::int32 ModelConfigs::slide_window_max_point_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_max_point_num)
  return slide_window_max_point_num_;
}
inline void ModelConfigs::set_slide_window_max_point_num(::google::protobuf::int32 value) {
  set_has_slide_window_max_point_num();
  slide_window_max_point_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_max_point_num)
}

// optional int32 max_group_prediction_marker_num = 37 [default = 3];
inline bool ModelConfigs::has_max_group_prediction_marker_num() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ModelConfigs::set_has_max_group_prediction_marker_num() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ModelConfigs::clear_has_max_group_prediction_marker_num() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ModelConfigs::clear_max_group_prediction_marker_num() {
  max_group_prediction_marker_num_ = 3;
  clear_has_max_group_prediction_marker_num();
}
inline ::google::protobuf::int32 ModelConfigs::max_group_prediction_marker_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_group_prediction_marker_num)
  return max_group_prediction_marker_num_;
}
inline void ModelConfigs::set_max_group_prediction_marker_num(::google::protobuf::int32 value) {
  set_has_max_group_prediction_marker_num();
  max_group_prediction_marker_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_group_prediction_marker_num)
}

// optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
inline bool ModelConfigs::has_orientation_estimation_skip_marker_num() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ModelConfigs::set_has_orientation_estimation_skip_marker_num() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ModelConfigs::clear_has_orientation_estimation_skip_marker_num() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ModelConfigs::clear_orientation_estimation_skip_marker_num() {
  orientation_estimation_skip_marker_num_ = 1;
  clear_has_orientation_estimation_skip_marker_num();
}
inline ::google::protobuf::int32 ModelConfigs::orientation_estimation_skip_marker_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.orientation_estimation_skip_marker_num)
  return orientation_estimation_skip_marker_num_;
}
inline void ModelConfigs::set_orientation_estimation_skip_marker_num(::google::protobuf::int32 value) {
  set_has_orientation_estimation_skip_marker_num();
  orientation_estimation_skip_marker_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.orientation_estimation_skip_marker_num)
}

// optional float lane_interval_distance = 39 [default = 4];
inline bool ModelConfigs::has_lane_interval_distance() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ModelConfigs::set_has_lane_interval_distance() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ModelConfigs::clear_has_lane_interval_distance() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ModelConfigs::clear_lane_interval_distance() {
  lane_interval_distance_ = 4;
  clear_has_lane_interval_distance();
}
inline float ModelConfigs::lane_interval_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_interval_distance)
  return lane_interval_distance_;
}
inline void ModelConfigs::set_lane_interval_distance(float value) {
  set_has_lane_interval_distance();
  lane_interval_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_interval_distance)
}

// optional float min_instance_size_prefiltered = 40 [default = 3];
inline bool ModelConfigs::has_min_instance_size_prefiltered() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ModelConfigs::set_has_min_instance_size_prefiltered() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ModelConfigs::clear_has_min_instance_size_prefiltered() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ModelConfigs::clear_min_instance_size_prefiltered() {
  min_instance_size_prefiltered_ = 3;
  clear_has_min_instance_size_prefiltered();
}
inline float ModelConfigs::min_instance_size_prefiltered() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered)
  return min_instance_size_prefiltered_;
}
inline void ModelConfigs::set_min_instance_size_prefiltered(float value) {
  set_has_min_instance_size_prefiltered();
  min_instance_size_prefiltered_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered)
}

// optional float min_instance_size_prefiltered_image = 41 [default = 20];
inline bool ModelConfigs::has_min_instance_size_prefiltered_image() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ModelConfigs::set_has_min_instance_size_prefiltered_image() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ModelConfigs::clear_has_min_instance_size_prefiltered_image() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ModelConfigs::clear_min_instance_size_prefiltered_image() {
  min_instance_size_prefiltered_image_ = 20;
  clear_has_min_instance_size_prefiltered_image();
}
inline float ModelConfigs::min_instance_size_prefiltered_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered_image)
  return min_instance_size_prefiltered_image_;
}
inline void ModelConfigs::set_min_instance_size_prefiltered_image(float value) {
  set_has_min_instance_size_prefiltered_image();
  min_instance_size_prefiltered_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered_image)
}

// optional float max_size_to_fit_straight_line = 42 [default = 10];
inline bool ModelConfigs::has_max_size_to_fit_straight_line() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ModelConfigs::set_has_max_size_to_fit_straight_line() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ModelConfigs::clear_has_max_size_to_fit_straight_line() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ModelConfigs::clear_max_size_to_fit_straight_line() {
  max_size_to_fit_straight_line_ = 10;
  clear_has_max_size_to_fit_straight_line();
}
inline float ModelConfigs::max_size_to_fit_straight_line() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line)
  return max_size_to_fit_straight_line_;
}
inline void ModelConfigs::set_max_size_to_fit_straight_line(float value) {
  set_has_max_size_to_fit_straight_line();
  max_size_to_fit_straight_line_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line)
}

// optional float max_size_to_fit_straight_line_image = 43 [default = 300];
inline bool ModelConfigs::has_max_size_to_fit_straight_line_image() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ModelConfigs::set_has_max_size_to_fit_straight_line_image() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ModelConfigs::clear_has_max_size_to_fit_straight_line_image() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ModelConfigs::clear_max_size_to_fit_straight_line_image() {
  max_size_to_fit_straight_line_image_ = 300;
  clear_has_max_size_to_fit_straight_line_image();
}
inline float ModelConfigs::max_size_to_fit_straight_line_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line_image)
  return max_size_to_fit_straight_line_image_;
}
inline void ModelConfigs::set_max_size_to_fit_straight_line_image(float value) {
  set_has_max_size_to_fit_straight_line_image();
  max_size_to_fit_straight_line_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line_image)
}

// optional float online_pitch_angle = 44 [default = -2.5];
inline bool ModelConfigs::has_online_pitch_angle() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ModelConfigs::set_has_online_pitch_angle() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ModelConfigs::clear_has_online_pitch_angle() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ModelConfigs::clear_online_pitch_angle() {
  online_pitch_angle_ = -2.5f;
  clear_has_online_pitch_angle();
}
inline float ModelConfigs::online_pitch_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.online_pitch_angle)
  return online_pitch_angle_;
}
inline void ModelConfigs::set_online_pitch_angle(float value) {
  set_has_online_pitch_angle();
  online_pitch_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.online_pitch_angle)
}

// optional float ground_height = 45 [default = 1.6];
inline bool ModelConfigs::has_ground_height() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ModelConfigs::set_has_ground_height() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ModelConfigs::clear_has_ground_height() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ModelConfigs::clear_ground_height() {
  ground_height_ = 1.6f;
  clear_has_ground_height();
}
inline float ModelConfigs::ground_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.ground_height)
  return ground_height_;
}
inline void ModelConfigs::set_ground_height(float value) {
  set_has_ground_height();
  ground_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.ground_height)
}

// optional float max_distance_to_see_for_transformer = 46 [default = 500];
inline bool ModelConfigs::has_max_distance_to_see_for_transformer() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ModelConfigs::set_has_max_distance_to_see_for_transformer() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ModelConfigs::clear_has_max_distance_to_see_for_transformer() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ModelConfigs::clear_max_distance_to_see_for_transformer() {
  max_distance_to_see_for_transformer_ = 500;
  clear_has_max_distance_to_see_for_transformer();
}
inline float ModelConfigs::max_distance_to_see_for_transformer() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_distance_to_see_for_transformer)
  return max_distance_to_see_for_transformer_;
}
inline void ModelConfigs::set_max_distance_to_see_for_transformer(float value) {
  set_has_max_distance_to_see_for_transformer();
  max_distance_to_see_for_transformer_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_distance_to_see_for_transformer)
}

// optional float lane_map_scale = 47 [default = 2];
inline bool ModelConfigs::has_lane_map_scale() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ModelConfigs::set_has_lane_map_scale() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ModelConfigs::clear_has_lane_map_scale() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ModelConfigs::clear_lane_map_scale() {
  lane_map_scale_ = 2;
  clear_has_lane_map_scale();
}
inline float ModelConfigs::lane_map_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_scale)
  return lane_map_scale_;
}
inline void ModelConfigs::set_lane_map_scale(float value) {
  set_has_lane_map_scale();
  lane_map_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_scale)
}

// optional int32 start_y_pos = 48 [default = 312];
inline bool ModelConfigs::has_start_y_pos() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void ModelConfigs::set_has_start_y_pos() {
  _has_bits_[1] |= 0x00008000u;
}
inline void ModelConfigs::clear_has_start_y_pos() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void ModelConfigs::clear_start_y_pos() {
  start_y_pos_ = 312;
  clear_has_start_y_pos();
}
inline ::google::protobuf::int32 ModelConfigs::start_y_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.start_y_pos)
  return start_y_pos_;
}
inline void ModelConfigs::set_start_y_pos(::google::protobuf::int32 value) {
  set_has_start_y_pos();
  start_y_pos_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.start_y_pos)
}

// optional int32 lane_map_width = 49 [default = 960];
inline bool ModelConfigs::has_lane_map_width() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void ModelConfigs::set_has_lane_map_width() {
  _has_bits_[1] |= 0x00010000u;
}
inline void ModelConfigs::clear_has_lane_map_width() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void ModelConfigs::clear_lane_map_width() {
  lane_map_width_ = 960;
  clear_has_lane_map_width();
}
inline ::google::protobuf::int32 ModelConfigs::lane_map_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_width)
  return lane_map_width_;
}
inline void ModelConfigs::set_lane_map_width(::google::protobuf::int32 value) {
  set_has_lane_map_width();
  lane_map_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_width)
}

// optional int32 lane_map_height = 50 [default = 384];
inline bool ModelConfigs::has_lane_map_height() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void ModelConfigs::set_has_lane_map_height() {
  _has_bits_[1] |= 0x00020000u;
}
inline void ModelConfigs::clear_has_lane_map_height() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void ModelConfigs::clear_lane_map_height() {
  lane_map_height_ = 384;
  clear_has_lane_map_height();
}
inline ::google::protobuf::int32 ModelConfigs::lane_map_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_height)
  return lane_map_height_;
}
inline void ModelConfigs::set_lane_map_height(::google::protobuf::int32 value) {
  set_has_lane_map_height();
  lane_map_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_height)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lane_post_process_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2flane_5fpost_5fprocess_5fconfig_2eproto__INCLUDED
