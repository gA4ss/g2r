// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/configs/vehicle_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common/configs/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Transform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extrinsics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extrinsics_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleParam_VehicleBrand_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehicleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto() {
  protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/configs/vehicle_config.proto");
  GOOGLE_CHECK(file != NULL);
  Transform_descriptor_ = file->message_type(0);
  static const int Transform_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, source_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, target_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, rotation_),
  };
  Transform_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform_descriptor_,
      Transform::default_instance_,
      Transform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _has_bits_[0]),
      -1,
      -1,
      sizeof(Transform),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _internal_metadata_),
      -1);
  Extrinsics_descriptor_ = file->message_type(1);
  static const int Extrinsics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, tansforms_),
  };
  Extrinsics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Extrinsics_descriptor_,
      Extrinsics::default_instance_,
      Extrinsics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, _has_bits_[0]),
      -1,
      -1,
      sizeof(Extrinsics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, _internal_metadata_),
      -1);
  VehicleParam_descriptor_ = file->message_type(2);
  static const int VehicleParam_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, front_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, back_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, left_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, right_edge_to_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, min_turn_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, min_steer_angle_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, steer_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_rolling_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_abs_speed_when_stopped_),
  };
  VehicleParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleParam_descriptor_,
      VehicleParam::default_instance_,
      VehicleParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _internal_metadata_),
      -1);
  VehicleParam_VehicleBrand_descriptor_ = VehicleParam_descriptor_->enum_type(0);
  VehicleConfig_descriptor_ = file->message_type(3);
  static const int VehicleConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, vehicle_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, extrinsics_),
  };
  VehicleConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleConfig_descriptor_,
      VehicleConfig::default_instance_,
      VehicleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform_descriptor_, &Transform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Extrinsics_descriptor_, &Extrinsics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleParam_descriptor_, &VehicleParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleConfig_descriptor_, &VehicleConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fconfigs_2fvehicle_5fconfig_2eproto() {
  delete Transform::default_instance_;
  delete Transform_reflection_;
  delete Extrinsics::default_instance_;
  delete Extrinsics_reflection_;
  delete VehicleParam::default_instance_;
  delete VehicleParam_reflection_;
  delete VehicleConfig::default_instance_;
  delete VehicleConfig_reflection_;
}

void protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#common/configs/vehicle_config.proto\022\ra"
    "pollo.common\032\023common/header.proto\032\025commo"
    "n/geometry.proto\"\221\001\n\tTransform\022\024\n\014source"
    "_frame\030\001 \001(\014\022\024\n\014target_frame\030\002 \001(\014\022+\n\013tr"
    "anslation\030\003 \001(\0132\026.apollo.common.Point3D\022"
    "+\n\010rotation\030\004 \001(\0132\031.apollo.common.Quater"
    "nion\"9\n\nExtrinsics\022+\n\ttansforms\030\001 \003(\0132\030."
    "apollo.common.Transform\"\243\004\n\014VehicleParam"
    "\0227\n\005brand\030\001 \001(\0162(.apollo.common.VehicleP"
    "aram.VehicleBrand\022\034\n\024front_edge_to_cente"
    "r\030\002 \001(\001\022\033\n\023back_edge_to_center\030\003 \001(\001\022\033\n\023"
    "left_edge_to_center\030\004 \001(\001\022\034\n\024right_edge_"
    "to_center\030\005 \001(\001\022\016\n\006length\030\006 \001(\001\022\r\n\005width"
    "\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\027\n\017min_turn_radiu"
    "s\030\t \001(\001\022\030\n\020max_acceleration\030\n \001(\001\022\030\n\020max"
    "_deceleration\030\013 \001(\001\022\027\n\017max_steer_angle\030\014"
    " \001(\001\022\034\n\024max_steer_angle_rate\030\r \001(\001\022\034\n\024mi"
    "n_steer_angle_rate\030\016 \001(\001\022\023\n\013steer_ratio\030"
    "\017 \001(\001\022\022\n\nwheel_base\030\020 \001(\001\022\034\n\024wheel_rolli"
    "ng_radius\030\021 \001(\001\022\"\n\032max_abs_speed_when_st"
    "opped\030\022 \001(\002\"(\n\014VehicleBrand\022\017\n\013LINCOLN_M"
    "KZ\020\000\022\007\n\003GEM\020\001\"\231\001\n\rVehicleConfig\022%\n\006heade"
    "r\030\001 \001(\0132\025.apollo.common.Header\0222\n\rvehicl"
    "e_param\030\002 \001(\0132\033.apollo.common.VehiclePar"
    "am\022-\n\nextrinsics\030\003 \001(\0132\031.apollo.common.E"
    "xtrinsics", 1009);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/configs/vehicle_config.proto", &protobuf_RegisterTypes);
  Transform::default_instance_ = new Transform();
  Extrinsics::default_instance_ = new Extrinsics();
  VehicleParam::default_instance_ = new VehicleParam();
  VehicleConfig::default_instance_ = new VehicleConfig();
  Transform::default_instance_->InitAsDefaultInstance();
  Extrinsics::default_instance_->InitAsDefaultInstance();
  VehicleParam::default_instance_->InitAsDefaultInstance();
  VehicleConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fconfigs_2fvehicle_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fconfigs_2fvehicle_5fconfig_2eproto {
  StaticDescriptorInitializer_common_2fconfigs_2fvehicle_5fconfig_2eproto() {
    protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  }
} static_descriptor_initializer_common_2fconfigs_2fvehicle_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kSourceFrameFieldNumber;
const int Transform::kTargetFrameFieldNumber;
const int Transform::kTranslationFieldNumber;
const int Transform::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Transform)
}

void Transform::InitAsDefaultInstance() {
  translation_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  rotation_ = const_cast< ::apollo::common::Quaternion*>(&::apollo::common::Quaternion::default_instance());
}

Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Transform)
}

void Transform::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  translation_ = NULL;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:apollo.common.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  source_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete translation_;
    delete rotation_;
  }
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform_descriptor_;
}

const Transform& Transform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  return *default_instance_;
}

Transform* Transform::default_instance_ = NULL;

Transform* Transform::New(::google::protobuf::Arena* arena) const {
  Transform* n = new Transform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Transform)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_source_frame()) {
      source_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_target_frame()) {
      target_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_translation()) {
      if (translation_ != NULL) translation_->::apollo::common::Point3D::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::apollo::common::Quaternion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Transform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes source_frame = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_frame;
        break;
      }

      // optional bytes target_frame = 2;
      case 2: {
        if (tag == 18) {
         parse_target_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_translation;
        break;
      }

      // optional .apollo.common.Point3D translation = 3;
      case 3: {
        if (tag == 26) {
         parse_translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rotation;
        break;
      }

      // optional .apollo.common.Quaternion rotation = 4;
      case 4: {
        if (tag == 34) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Transform)
  // optional bytes source_frame = 1;
  if (has_source_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->source_frame(), output);
  }

  // optional bytes target_frame = 2;
  if (has_target_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target_frame(), output);
  }

  // optional .apollo.common.Point3D translation = 3;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->translation_, output);
  }

  // optional .apollo.common.Quaternion rotation = 4;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Transform)
  // optional bytes source_frame = 1;
  if (has_source_frame()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->source_frame(), target);
  }

  // optional bytes target_frame = 2;
  if (has_target_frame()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target_frame(), target);
  }

  // optional .apollo.common.Point3D translation = 3;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->translation_, false, target);
  }

  // optional .apollo.common.Quaternion rotation = 4;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rotation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Transform)
  return target;
}

int Transform::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Transform)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes source_frame = 1;
    if (has_source_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source_frame());
    }

    // optional bytes target_frame = 2;
    if (has_target_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_frame());
    }

    // optional .apollo.common.Point3D translation = 3;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->translation_);
    }

    // optional .apollo.common.Quaternion rotation = 4;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Transform)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Transform* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Transform)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_frame()) {
      set_has_source_frame();
      source_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_frame_);
    }
    if (from.has_target_frame()) {
      set_has_target_frame();
      target_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_frame_);
    }
    if (from.has_translation()) {
      mutable_translation()->::apollo::common::Point3D::MergeFrom(from.translation());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::apollo::common::Quaternion::MergeFrom(from.rotation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {

  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  source_frame_.Swap(&other->source_frame_);
  target_frame_.Swap(&other->target_frame_);
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform_descriptor_;
  metadata.reflection = Transform_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// optional bytes source_frame = 1;
bool Transform::has_source_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transform::set_has_source_frame() {
  _has_bits_[0] |= 0x00000001u;
}
void Transform::clear_has_source_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transform::clear_source_frame() {
  source_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_frame();
}
 const ::std::string& Transform::source_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.source_frame)
  return source_frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_source_frame(const ::std::string& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.source_frame)
}
 void Transform::set_source_frame(const char* value) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.source_frame)
}
 void Transform::set_source_frame(const void* value, size_t size) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.source_frame)
}
 ::std::string* Transform::mutable_source_frame() {
  set_has_source_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.source_frame)
  return source_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transform::release_source_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.source_frame)
  clear_has_source_frame();
  return source_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_allocated_source_frame(::std::string* source_frame) {
  if (source_frame != NULL) {
    set_has_source_frame();
  } else {
    clear_has_source_frame();
  }
  source_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.source_frame)
}

// optional bytes target_frame = 2;
bool Transform::has_target_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transform::set_has_target_frame() {
  _has_bits_[0] |= 0x00000002u;
}
void Transform::clear_has_target_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transform::clear_target_frame() {
  target_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_frame();
}
 const ::std::string& Transform::target_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.target_frame)
  return target_frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_target_frame(const ::std::string& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.target_frame)
}
 void Transform::set_target_frame(const char* value) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.target_frame)
}
 void Transform::set_target_frame(const void* value, size_t size) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.target_frame)
}
 ::std::string* Transform::mutable_target_frame() {
  set_has_target_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.target_frame)
  return target_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transform::release_target_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.target_frame)
  clear_has_target_frame();
  return target_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_allocated_target_frame(::std::string* target_frame) {
  if (target_frame != NULL) {
    set_has_target_frame();
  } else {
    clear_has_target_frame();
  }
  target_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.target_frame)
}

// optional .apollo.common.Point3D translation = 3;
bool Transform::has_translation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transform::set_has_translation() {
  _has_bits_[0] |= 0x00000004u;
}
void Transform::clear_has_translation() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_translation() {
  if (translation_ != NULL) translation_->::apollo::common::Point3D::Clear();
  clear_has_translation();
}
const ::apollo::common::Point3D& Transform::translation() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.translation)
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
::apollo::common::Point3D* Transform::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.translation)
  return translation_;
}
::apollo::common::Point3D* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.translation)
  clear_has_translation();
  ::apollo::common::Point3D* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform::set_allocated_translation(::apollo::common::Point3D* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.translation)
}

// optional .apollo.common.Quaternion rotation = 4;
bool Transform::has_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transform::set_has_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
void Transform::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transform::clear_rotation() {
  if (rotation_ != NULL) rotation_->::apollo::common::Quaternion::Clear();
  clear_has_rotation();
}
const ::apollo::common::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
::apollo::common::Quaternion* Transform::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::apollo::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.rotation)
  return rotation_;
}
::apollo::common::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.rotation)
  clear_has_rotation();
  ::apollo::common::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Transform::set_allocated_rotation(::apollo::common::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extrinsics::kTansformsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extrinsics::Extrinsics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Extrinsics)
}

void Extrinsics::InitAsDefaultInstance() {
}

Extrinsics::Extrinsics(const Extrinsics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Extrinsics)
}

void Extrinsics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:apollo.common.Extrinsics)
  SharedDtor();
}

void Extrinsics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Extrinsics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extrinsics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extrinsics_descriptor_;
}

const Extrinsics& Extrinsics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  return *default_instance_;
}

Extrinsics* Extrinsics::default_instance_ = NULL;

Extrinsics* Extrinsics::New(::google::protobuf::Arena* arena) const {
  Extrinsics* n = new Extrinsics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Extrinsics)
  tansforms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Extrinsics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Extrinsics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Transform tansforms = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tansforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tansforms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tansforms;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Extrinsics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Extrinsics)
  return false;
#undef DO_
}

void Extrinsics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Extrinsics)
  // repeated .apollo.common.Transform tansforms = 1;
  for (unsigned int i = 0, n = this->tansforms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tansforms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Extrinsics)
}

::google::protobuf::uint8* Extrinsics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Extrinsics)
  // repeated .apollo.common.Transform tansforms = 1;
  for (unsigned int i = 0, n = this->tansforms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tansforms(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Extrinsics)
  return target;
}

int Extrinsics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Extrinsics)
  int total_size = 0;

  // repeated .apollo.common.Transform tansforms = 1;
  total_size += 1 * this->tansforms_size();
  for (int i = 0; i < this->tansforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tansforms(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extrinsics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Extrinsics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Extrinsics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Extrinsics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Extrinsics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Extrinsics)
    MergeFrom(*source);
  }
}

void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Extrinsics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tansforms_.MergeFrom(from.tansforms_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Extrinsics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {

  return true;
}

void Extrinsics::Swap(Extrinsics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extrinsics::InternalSwap(Extrinsics* other) {
  tansforms_.UnsafeArenaSwap(&other->tansforms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extrinsics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extrinsics_descriptor_;
  metadata.reflection = Extrinsics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extrinsics

// repeated .apollo.common.Transform tansforms = 1;
int Extrinsics::tansforms_size() const {
  return tansforms_.size();
}
void Extrinsics::clear_tansforms() {
  tansforms_.Clear();
}
const ::apollo::common::Transform& Extrinsics::tansforms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Extrinsics.tansforms)
  return tansforms_.Get(index);
}
::apollo::common::Transform* Extrinsics::mutable_tansforms(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Extrinsics.tansforms)
  return tansforms_.Mutable(index);
}
::apollo::common::Transform* Extrinsics::add_tansforms() {
  // @@protoc_insertion_point(field_add:apollo.common.Extrinsics.tansforms)
  return tansforms_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >*
Extrinsics::mutable_tansforms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Extrinsics.tansforms)
  return &tansforms_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >&
Extrinsics::tansforms() const {
  // @@protoc_insertion_point(field_list:apollo.common.Extrinsics.tansforms)
  return tansforms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleParam_VehicleBrand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleParam_VehicleBrand_descriptor_;
}
bool VehicleParam_VehicleBrand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleParam_VehicleBrand VehicleParam::LINCOLN_MKZ;
const VehicleParam_VehicleBrand VehicleParam::GEM;
const VehicleParam_VehicleBrand VehicleParam::VehicleBrand_MIN;
const VehicleParam_VehicleBrand VehicleParam::VehicleBrand_MAX;
const int VehicleParam::VehicleBrand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParam::kBrandFieldNumber;
const int VehicleParam::kFrontEdgeToCenterFieldNumber;
const int VehicleParam::kBackEdgeToCenterFieldNumber;
const int VehicleParam::kLeftEdgeToCenterFieldNumber;
const int VehicleParam::kRightEdgeToCenterFieldNumber;
const int VehicleParam::kLengthFieldNumber;
const int VehicleParam::kWidthFieldNumber;
const int VehicleParam::kHeightFieldNumber;
const int VehicleParam::kMinTurnRadiusFieldNumber;
const int VehicleParam::kMaxAccelerationFieldNumber;
const int VehicleParam::kMaxDecelerationFieldNumber;
const int VehicleParam::kMaxSteerAngleFieldNumber;
const int VehicleParam::kMaxSteerAngleRateFieldNumber;
const int VehicleParam::kMinSteerAngleRateFieldNumber;
const int VehicleParam::kSteerRatioFieldNumber;
const int VehicleParam::kWheelBaseFieldNumber;
const int VehicleParam::kWheelRollingRadiusFieldNumber;
const int VehicleParam::kMaxAbsSpeedWhenStoppedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParam::VehicleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleParam)
}

void VehicleParam::InitAsDefaultInstance() {
}

VehicleParam::VehicleParam(const VehicleParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleParam)
}

void VehicleParam::SharedCtor() {
  _cached_size_ = 0;
  brand_ = 0;
  front_edge_to_center_ = 0;
  back_edge_to_center_ = 0;
  left_edge_to_center_ = 0;
  right_edge_to_center_ = 0;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  min_turn_radius_ = 0;
  max_acceleration_ = 0;
  max_deceleration_ = 0;
  max_steer_angle_ = 0;
  max_steer_angle_rate_ = 0;
  min_steer_angle_rate_ = 0;
  steer_ratio_ = 0;
  wheel_base_ = 0;
  wheel_rolling_radius_ = 0;
  max_abs_speed_when_stopped_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleParam_descriptor_;
}

const VehicleParam& VehicleParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  return *default_instance_;
}

VehicleParam* VehicleParam::default_instance_ = NULL;

VehicleParam* VehicleParam::New(::google::protobuf::Arena* arena) const {
  VehicleParam* n = new VehicleParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(front_edge_to_center_, height_);
    brand_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(max_acceleration_, wheel_base_);
    min_turn_radius_ = 0;
  }
  if (_has_bits_[16 / 32] & 196608u) {
    wheel_rolling_radius_ = 0;
    max_abs_speed_when_stopped_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::VehicleParam_VehicleBrand_IsValid(value)) {
            set_brand(static_cast< ::apollo::common::VehicleParam_VehicleBrand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_front_edge_to_center;
        break;
      }

      // optional double front_edge_to_center = 2;
      case 2: {
        if (tag == 17) {
         parse_front_edge_to_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_edge_to_center_)));
          set_has_front_edge_to_center();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_back_edge_to_center;
        break;
      }

      // optional double back_edge_to_center = 3;
      case 3: {
        if (tag == 25) {
         parse_back_edge_to_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_edge_to_center_)));
          set_has_back_edge_to_center();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_left_edge_to_center;
        break;
      }

      // optional double left_edge_to_center = 4;
      case 4: {
        if (tag == 33) {
         parse_left_edge_to_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_edge_to_center_)));
          set_has_left_edge_to_center();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_right_edge_to_center;
        break;
      }

      // optional double right_edge_to_center = 5;
      case 5: {
        if (tag == 41) {
         parse_right_edge_to_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_edge_to_center_)));
          set_has_right_edge_to_center();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_length;
        break;
      }

      // optional double length = 6;
      case 6: {
        if (tag == 49) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_width;
        break;
      }

      // optional double width = 7;
      case 7: {
        if (tag == 57) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_height;
        break;
      }

      // optional double height = 8;
      case 8: {
        if (tag == 65) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_min_turn_radius;
        break;
      }

      // optional double min_turn_radius = 9;
      case 9: {
        if (tag == 73) {
         parse_min_turn_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));
          set_has_min_turn_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_max_acceleration;
        break;
      }

      // optional double max_acceleration = 10;
      case 10: {
        if (tag == 81) {
         parse_max_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
          set_has_max_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_max_deceleration;
        break;
      }

      // optional double max_deceleration = 11;
      case 11: {
        if (tag == 89) {
         parse_max_deceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
          set_has_max_deceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_max_steer_angle;
        break;
      }

      // optional double max_steer_angle = 12;
      case 12: {
        if (tag == 97) {
         parse_max_steer_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_)));
          set_has_max_steer_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_max_steer_angle_rate;
        break;
      }

      // optional double max_steer_angle_rate = 13;
      case 13: {
        if (tag == 105) {
         parse_max_steer_angle_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_rate_)));
          set_has_max_steer_angle_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_min_steer_angle_rate;
        break;
      }

      // optional double min_steer_angle_rate = 14;
      case 14: {
        if (tag == 113) {
         parse_min_steer_angle_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_steer_angle_rate_)));
          set_has_min_steer_angle_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_steer_ratio;
        break;
      }

      // optional double steer_ratio = 15;
      case 15: {
        if (tag == 121) {
         parse_steer_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_ratio_)));
          set_has_steer_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_wheel_base;
        break;
      }

      // optional double wheel_base = 16;
      case 16: {
        if (tag == 129) {
         parse_wheel_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
          set_has_wheel_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_wheel_rolling_radius;
        break;
      }

      // optional double wheel_rolling_radius = 17;
      case 17: {
        if (tag == 137) {
         parse_wheel_rolling_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_rolling_radius_)));
          set_has_wheel_rolling_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_max_abs_speed_when_stopped;
        break;
      }

      // optional float max_abs_speed_when_stopped = 18;
      case 18: {
        if (tag == 149) {
         parse_max_abs_speed_when_stopped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_abs_speed_when_stopped_)));
          set_has_max_abs_speed_when_stopped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleParam)
  return false;
#undef DO_
}

void VehicleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleParam)
  // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brand(), output);
  }

  // optional double front_edge_to_center = 2;
  if (has_front_edge_to_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->front_edge_to_center(), output);
  }

  // optional double back_edge_to_center = 3;
  if (has_back_edge_to_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->back_edge_to_center(), output);
  }

  // optional double left_edge_to_center = 4;
  if (has_left_edge_to_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left_edge_to_center(), output);
  }

  // optional double right_edge_to_center = 5;
  if (has_right_edge_to_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->right_edge_to_center(), output);
  }

  // optional double length = 6;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // optional double width = 7;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // optional double height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // optional double min_turn_radius = 9;
  if (has_min_turn_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min_turn_radius(), output);
  }

  // optional double max_acceleration = 10;
  if (has_max_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 11;
  if (has_max_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_deceleration(), output);
  }

  // optional double max_steer_angle = 12;
  if (has_max_steer_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_steer_angle(), output);
  }

  // optional double max_steer_angle_rate = 13;
  if (has_max_steer_angle_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_steer_angle_rate(), output);
  }

  // optional double min_steer_angle_rate = 14;
  if (has_min_steer_angle_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->min_steer_angle_rate(), output);
  }

  // optional double steer_ratio = 15;
  if (has_steer_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steer_ratio(), output);
  }

  // optional double wheel_base = 16;
  if (has_wheel_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->wheel_base(), output);
  }

  // optional double wheel_rolling_radius = 17;
  if (has_wheel_rolling_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->wheel_rolling_radius(), output);
  }

  // optional float max_abs_speed_when_stopped = 18;
  if (has_max_abs_speed_when_stopped()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->max_abs_speed_when_stopped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleParam)
}

::google::protobuf::uint8* VehicleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleParam)
  // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
  if (has_brand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brand(), target);
  }

  // optional double front_edge_to_center = 2;
  if (has_front_edge_to_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 3;
  if (has_back_edge_to_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 4;
  if (has_left_edge_to_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 5;
  if (has_right_edge_to_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->right_edge_to_center(), target);
  }

  // optional double length = 6;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // optional double width = 7;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // optional double height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // optional double min_turn_radius = 9;
  if (has_min_turn_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min_turn_radius(), target);
  }

  // optional double max_acceleration = 10;
  if (has_max_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 11;
  if (has_max_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_deceleration(), target);
  }

  // optional double max_steer_angle = 12;
  if (has_max_steer_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 13;
  if (has_max_steer_angle_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 14;
  if (has_min_steer_angle_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 15;
  if (has_steer_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steer_ratio(), target);
  }

  // optional double wheel_base = 16;
  if (has_wheel_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 17;
  if (has_wheel_rolling_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 18;
  if (has_max_abs_speed_when_stopped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->max_abs_speed_when_stopped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleParam)
  return target;
}

int VehicleParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleParam)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brand());
    }

    // optional double front_edge_to_center = 2;
    if (has_front_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double back_edge_to_center = 3;
    if (has_back_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double left_edge_to_center = 4;
    if (has_left_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double right_edge_to_center = 5;
    if (has_right_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double length = 6;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 7;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double min_turn_radius = 9;
    if (has_min_turn_radius()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 10;
    if (has_max_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 11;
    if (has_max_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle = 12;
    if (has_max_steer_angle()) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle_rate = 13;
    if (has_max_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double min_steer_angle_rate = 14;
    if (has_min_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double steer_ratio = 15;
    if (has_steer_ratio()) {
      total_size += 1 + 8;
    }

    // optional double wheel_base = 16;
    if (has_wheel_base()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double wheel_rolling_radius = 17;
    if (has_wheel_rolling_radius()) {
      total_size += 2 + 8;
    }

    // optional float max_abs_speed_when_stopped = 18;
    if (has_max_abs_speed_when_stopped()) {
      total_size += 2 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_front_edge_to_center()) {
      set_front_edge_to_center(from.front_edge_to_center());
    }
    if (from.has_back_edge_to_center()) {
      set_back_edge_to_center(from.back_edge_to_center());
    }
    if (from.has_left_edge_to_center()) {
      set_left_edge_to_center(from.left_edge_to_center());
    }
    if (from.has_right_edge_to_center()) {
      set_right_edge_to_center(from.right_edge_to_center());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_turn_radius()) {
      set_min_turn_radius(from.min_turn_radius());
    }
    if (from.has_max_acceleration()) {
      set_max_acceleration(from.max_acceleration());
    }
    if (from.has_max_deceleration()) {
      set_max_deceleration(from.max_deceleration());
    }
    if (from.has_max_steer_angle()) {
      set_max_steer_angle(from.max_steer_angle());
    }
    if (from.has_max_steer_angle_rate()) {
      set_max_steer_angle_rate(from.max_steer_angle_rate());
    }
    if (from.has_min_steer_angle_rate()) {
      set_min_steer_angle_rate(from.min_steer_angle_rate());
    }
    if (from.has_steer_ratio()) {
      set_steer_ratio(from.steer_ratio());
    }
    if (from.has_wheel_base()) {
      set_wheel_base(from.wheel_base());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wheel_rolling_radius()) {
      set_wheel_rolling_radius(from.wheel_rolling_radius());
    }
    if (from.has_max_abs_speed_when_stopped()) {
      set_max_abs_speed_when_stopped(from.max_abs_speed_when_stopped());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {

  return true;
}

void VehicleParam::Swap(VehicleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParam::InternalSwap(VehicleParam* other) {
  std::swap(brand_, other->brand_);
  std::swap(front_edge_to_center_, other->front_edge_to_center_);
  std::swap(back_edge_to_center_, other->back_edge_to_center_);
  std::swap(left_edge_to_center_, other->left_edge_to_center_);
  std::swap(right_edge_to_center_, other->right_edge_to_center_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(min_turn_radius_, other->min_turn_radius_);
  std::swap(max_acceleration_, other->max_acceleration_);
  std::swap(max_deceleration_, other->max_deceleration_);
  std::swap(max_steer_angle_, other->max_steer_angle_);
  std::swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  std::swap(min_steer_angle_rate_, other->min_steer_angle_rate_);
  std::swap(steer_ratio_, other->steer_ratio_);
  std::swap(wheel_base_, other->wheel_base_);
  std::swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  std::swap(max_abs_speed_when_stopped_, other->max_abs_speed_when_stopped_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleParam_descriptor_;
  metadata.reflection = VehicleParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleParam

// optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
bool VehicleParam::has_brand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleParam::set_has_brand() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleParam::clear_has_brand() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleParam::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
 ::apollo::common::VehicleParam_VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brand)
  return static_cast< ::apollo::common::VehicleParam_VehicleBrand >(brand_);
}
 void VehicleParam::set_brand(::apollo::common::VehicleParam_VehicleBrand value) {
  assert(::apollo::common::VehicleParam_VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brand)
}

// optional double front_edge_to_center = 2;
bool VehicleParam::has_front_edge_to_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleParam::set_has_front_edge_to_center() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleParam::clear_has_front_edge_to_center() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 0;
  clear_has_front_edge_to_center();
}
 double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
 void VehicleParam::set_front_edge_to_center(double value) {
  set_has_front_edge_to_center();
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 3;
bool VehicleParam::has_back_edge_to_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleParam::set_has_back_edge_to_center() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleParam::clear_has_back_edge_to_center() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 0;
  clear_has_back_edge_to_center();
}
 double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
 void VehicleParam::set_back_edge_to_center(double value) {
  set_has_back_edge_to_center();
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 4;
bool VehicleParam::has_left_edge_to_center() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleParam::set_has_left_edge_to_center() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleParam::clear_has_left_edge_to_center() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 0;
  clear_has_left_edge_to_center();
}
 double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
 void VehicleParam::set_left_edge_to_center(double value) {
  set_has_left_edge_to_center();
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 5;
bool VehicleParam::has_right_edge_to_center() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleParam::set_has_right_edge_to_center() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleParam::clear_has_right_edge_to_center() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 0;
  clear_has_right_edge_to_center();
}
 double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
 void VehicleParam::set_right_edge_to_center(double value) {
  set_has_right_edge_to_center();
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.right_edge_to_center)
}

// optional double length = 6;
bool VehicleParam::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleParam::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleParam::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleParam::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.length)
  return length_;
}
 void VehicleParam::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.length)
}

// optional double width = 7;
bool VehicleParam::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleParam::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleParam::clear_width() {
  width_ = 0;
  clear_has_width();
}
 double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.width)
  return width_;
}
 void VehicleParam::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.width)
}

// optional double height = 8;
bool VehicleParam::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleParam::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleParam::clear_height() {
  height_ = 0;
  clear_has_height();
}
 double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.height)
  return height_;
}
 void VehicleParam::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.height)
}

// optional double min_turn_radius = 9;
bool VehicleParam::has_min_turn_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleParam::set_has_min_turn_radius() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleParam::clear_has_min_turn_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 0;
  clear_has_min_turn_radius();
}
 double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
 void VehicleParam::set_min_turn_radius(double value) {
  set_has_min_turn_radius();
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 10;
bool VehicleParam::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleParam::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleParam::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 0;
  clear_has_max_acceleration();
}
 double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_acceleration)
  return max_acceleration_;
}
 void VehicleParam::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 11;
bool VehicleParam::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleParam::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleParam::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = 0;
  clear_has_max_deceleration();
}
 double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_deceleration)
  return max_deceleration_;
}
 void VehicleParam::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 12;
bool VehicleParam::has_max_steer_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleParam::set_has_max_steer_angle() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleParam::clear_has_max_steer_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 0;
  clear_has_max_steer_angle();
}
 double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
 void VehicleParam::set_max_steer_angle(double value) {
  set_has_max_steer_angle();
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 13;
bool VehicleParam::has_max_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleParam::set_has_max_steer_angle_rate() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleParam::clear_has_max_steer_angle_rate() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 0;
  clear_has_max_steer_angle_rate();
}
 double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
 void VehicleParam::set_max_steer_angle_rate(double value) {
  set_has_max_steer_angle_rate();
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 14;
bool VehicleParam::has_min_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleParam::set_has_min_steer_angle_rate() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleParam::clear_has_min_steer_angle_rate() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = 0;
  clear_has_min_steer_angle_rate();
}
 double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
 void VehicleParam::set_min_steer_angle_rate(double value) {
  set_has_min_steer_angle_rate();
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 15;
bool VehicleParam::has_steer_ratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleParam::set_has_steer_ratio() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleParam::clear_has_steer_ratio() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 0;
  clear_has_steer_ratio();
}
 double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.steer_ratio)
  return steer_ratio_;
}
 void VehicleParam::set_steer_ratio(double value) {
  set_has_steer_ratio();
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.steer_ratio)
}

// optional double wheel_base = 16;
bool VehicleParam::has_wheel_base() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VehicleParam::set_has_wheel_base() {
  _has_bits_[0] |= 0x00008000u;
}
void VehicleParam::clear_has_wheel_base() {
  _has_bits_[0] &= ~0x00008000u;
}
void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
  clear_has_wheel_base();
}
 double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_base)
  return wheel_base_;
}
 void VehicleParam::set_wheel_base(double value) {
  set_has_wheel_base();
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 17;
bool VehicleParam::has_wheel_rolling_radius() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VehicleParam::set_has_wheel_rolling_radius() {
  _has_bits_[0] |= 0x00010000u;
}
void VehicleParam::clear_has_wheel_rolling_radius() {
  _has_bits_[0] &= ~0x00010000u;
}
void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = 0;
  clear_has_wheel_rolling_radius();
}
 double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
 void VehicleParam::set_wheel_rolling_radius(double value) {
  set_has_wheel_rolling_radius();
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 18;
bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VehicleParam::set_has_max_abs_speed_when_stopped() {
  _has_bits_[0] |= 0x00020000u;
}
void VehicleParam::clear_has_max_abs_speed_when_stopped() {
  _has_bits_[0] &= ~0x00020000u;
}
void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = 0;
  clear_has_max_abs_speed_when_stopped();
}
 float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_abs_speed_when_stopped)
  return max_abs_speed_when_stopped_;
}
 void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  set_has_max_abs_speed_when_stopped();
  max_abs_speed_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_abs_speed_when_stopped)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleConfig::kHeaderFieldNumber;
const int VehicleConfig::kVehicleParamFieldNumber;
const int VehicleConfig::kExtrinsicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleConfig::VehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleConfig)
}

void VehicleConfig::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  vehicle_param_ = const_cast< ::apollo::common::VehicleParam*>(&::apollo::common::VehicleParam::default_instance());
  extrinsics_ = const_cast< ::apollo::common::Extrinsics*>(&::apollo::common::Extrinsics::default_instance());
}

VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  vehicle_param_ = NULL;
  extrinsics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleConfig)
  SharedDtor();
}

void VehicleConfig::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete vehicle_param_;
    delete extrinsics_;
  }
}

void VehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleConfig_descriptor_;
}

const VehicleConfig& VehicleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fconfigs_2fvehicle_5fconfig_2eproto();
  return *default_instance_;
}

VehicleConfig* VehicleConfig::default_instance_ = NULL;

VehicleConfig* VehicleConfig::New(::google::protobuf::Arena* arena) const {
  VehicleConfig* n = new VehicleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_vehicle_param()) {
      if (vehicle_param_ != NULL) vehicle_param_->::apollo::common::VehicleParam::Clear();
    }
    if (has_extrinsics()) {
      if (extrinsics_ != NULL) extrinsics_->::apollo::common::Extrinsics::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_param;
        break;
      }

      // optional .apollo.common.VehicleParam vehicle_param = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extrinsics;
        break;
      }

      // optional .apollo.common.Extrinsics extrinsics = 3;
      case 3: {
        if (tag == 26) {
         parse_extrinsics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extrinsics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleConfig)
  return false;
#undef DO_
}

void VehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleConfig)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  if (has_vehicle_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_param_, output);
  }

  // optional .apollo.common.Extrinsics extrinsics = 3;
  if (has_extrinsics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->extrinsics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleConfig)
}

::google::protobuf::uint8* VehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleConfig)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  if (has_vehicle_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicle_param_, false, target);
  }

  // optional .apollo.common.Extrinsics extrinsics = 3;
  if (has_extrinsics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->extrinsics_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleConfig)
  return target;
}

int VehicleConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.VehicleParam vehicle_param = 2;
    if (has_vehicle_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_param_);
    }

    // optional .apollo.common.Extrinsics extrinsics = 3;
    if (has_extrinsics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extrinsics_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_vehicle_param()) {
      mutable_vehicle_param()->::apollo::common::VehicleParam::MergeFrom(from.vehicle_param());
    }
    if (from.has_extrinsics()) {
      mutable_extrinsics()->::apollo::common::Extrinsics::MergeFrom(from.extrinsics());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {

  return true;
}

void VehicleConfig::Swap(VehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleConfig::InternalSwap(VehicleConfig* other) {
  std::swap(header_, other->header_);
  std::swap(vehicle_param_, other->vehicle_param_);
  std::swap(extrinsics_, other->extrinsics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleConfig_descriptor_;
  metadata.reflection = VehicleConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleConfig

// optional .apollo.common.Header header = 1;
bool VehicleConfig::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleConfig::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleConfig::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleConfig::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& VehicleConfig::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* VehicleConfig::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.header)
  return header_;
}
::apollo::common::Header* VehicleConfig::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.header)
}

// optional .apollo.common.VehicleParam vehicle_param = 2;
bool VehicleConfig::has_vehicle_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleConfig::set_has_vehicle_param() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleConfig::clear_has_vehicle_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleConfig::clear_vehicle_param() {
  if (vehicle_param_ != NULL) vehicle_param_->::apollo::common::VehicleParam::Clear();
  clear_has_vehicle_param();
}
const ::apollo::common::VehicleParam& VehicleConfig::vehicle_param() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.vehicle_param)
  return vehicle_param_ != NULL ? *vehicle_param_ : *default_instance_->vehicle_param_;
}
::apollo::common::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  set_has_vehicle_param();
  if (vehicle_param_ == NULL) {
    vehicle_param_ = new ::apollo::common::VehicleParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.vehicle_param)
  return vehicle_param_;
}
::apollo::common::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.vehicle_param)
  clear_has_vehicle_param();
  ::apollo::common::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param) {
  delete vehicle_param_;
  vehicle_param_ = vehicle_param;
  if (vehicle_param) {
    set_has_vehicle_param();
  } else {
    clear_has_vehicle_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.vehicle_param)
}

// optional .apollo.common.Extrinsics extrinsics = 3;
bool VehicleConfig::has_extrinsics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleConfig::set_has_extrinsics() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleConfig::clear_has_extrinsics() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleConfig::clear_extrinsics() {
  if (extrinsics_ != NULL) extrinsics_->::apollo::common::Extrinsics::Clear();
  clear_has_extrinsics();
}
const ::apollo::common::Extrinsics& VehicleConfig::extrinsics() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.extrinsics)
  return extrinsics_ != NULL ? *extrinsics_ : *default_instance_->extrinsics_;
}
::apollo::common::Extrinsics* VehicleConfig::mutable_extrinsics() {
  set_has_extrinsics();
  if (extrinsics_ == NULL) {
    extrinsics_ = new ::apollo::common::Extrinsics;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.extrinsics)
  return extrinsics_;
}
::apollo::common::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.extrinsics)
  clear_has_extrinsics();
  ::apollo::common::Extrinsics* temp = extrinsics_;
  extrinsics_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics) {
  delete extrinsics_;
  extrinsics_ = extrinsics;
  if (extrinsics) {
    set_has_extrinsics();
  } else {
    clear_has_extrinsics();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.extrinsics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
