// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/gnss_best_pose.proto

#ifndef PROTOBUF_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto__INCLUDED
#define PROTOBUF_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/header.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();
void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();
void protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();

class GnssBestPose;

enum SolutionStatus {
  SOL_COMPUTED = 0,
  INSUFFICIENT_OBS = 1,
  NO_CONVERGENCE = 2,
  SINGULARITY = 3,
  COV_TRACE = 4,
  TEST_DIST = 5,
  COLD_START = 6,
  V_H_LIMIT = 7,
  VARIANCE = 8,
  RESIDUALS = 9,
  INTEGRITY_WARNING = 13,
  PENDING = 18,
  INVALID_FIX = 19,
  UNAUTHORIZED = 20,
  INVALID_RATE = 22
};
bool SolutionStatus_IsValid(int value);
const SolutionStatus SolutionStatus_MIN = SOL_COMPUTED;
const SolutionStatus SolutionStatus_MAX = INVALID_RATE;
const int SolutionStatus_ARRAYSIZE = SolutionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolutionStatus_descriptor();
inline const ::std::string& SolutionStatus_Name(SolutionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolutionStatus_descriptor(), value);
}
inline bool SolutionStatus_Parse(
    const ::std::string& name, SolutionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolutionStatus>(
    SolutionStatus_descriptor(), name, value);
}
enum SolutionType {
  NONE = 0,
  FIXEDPOS = 1,
  FIXEDHEIGHT = 2,
  FLOATCONV = 4,
  WIDELANE = 5,
  NARROWLANE = 6,
  DOPPLER_VELOCITY = 8,
  SINGLE = 16,
  PSRDIFF = 17,
  WAAS = 18,
  PROPOGATED = 19,
  OMNISTAR = 20,
  L1_FLOAT = 32,
  IONOFREE_FLOAT = 33,
  NARROW_FLOAT = 34,
  L1_INT = 48,
  WIDE_INT = 49,
  NARROW_INT = 50,
  RTK_DIRECT_INS = 51,
  INS_SBAS = 52,
  INS_PSRSP = 53,
  INS_PSRDIFF = 54,
  INS_RTKFLOAT = 55,
  INS_RTKFIXED = 56,
  INS_OMNISTAR = 57,
  INS_OMNISTAR_HP = 58,
  INS_OMNISTAR_XP = 59,
  OMNISTAR_HP = 64,
  OMNISTAR_XP = 65,
  PPP_CONVERGING = 68,
  PPP = 69,
  INS_PPP_CONVERGING = 73,
  INS_PPP = 74
};
bool SolutionType_IsValid(int value);
const SolutionType SolutionType_MIN = NONE;
const SolutionType SolutionType_MAX = INS_PPP;
const int SolutionType_ARRAYSIZE = SolutionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolutionType_descriptor();
inline const ::std::string& SolutionType_Name(SolutionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolutionType_descriptor(), value);
}
inline bool SolutionType_Parse(
    const ::std::string& name, SolutionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolutionType>(
    SolutionType_descriptor(), name, value);
}
enum DatumId {
  WGS84 = 61
};
bool DatumId_IsValid(int value);
const DatumId DatumId_MIN = WGS84;
const DatumId DatumId_MAX = WGS84;
const int DatumId_ARRAYSIZE = DatumId_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatumId_descriptor();
inline const ::std::string& DatumId_Name(DatumId value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatumId_descriptor(), value);
}
inline bool DatumId_Parse(
    const ::std::string& name, DatumId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatumId>(
    DatumId_descriptor(), name, value);
}
// ===================================================================

class GnssBestPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.GnssBestPose) */ {
 public:
  GnssBestPose();
  virtual ~GnssBestPose();

  GnssBestPose(const GnssBestPose& from);

  inline GnssBestPose& operator=(const GnssBestPose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GnssBestPose& default_instance();

  void Swap(GnssBestPose* other);

  // implements Message ----------------------------------------------

  inline GnssBestPose* New() const { return New(NULL); }

  GnssBestPose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GnssBestPose& from);
  void MergeFrom(const GnssBestPose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GnssBestPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 2;
  double measurement_time() const;
  void set_measurement_time(double value);

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  bool has_sol_status() const;
  void clear_sol_status();
  static const int kSolStatusFieldNumber = 3;
  ::apollo::drivers::gnss::SolutionStatus sol_status() const;
  void set_sol_status(::apollo::drivers::gnss::SolutionStatus value);

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  bool has_sol_type() const;
  void clear_sol_type();
  static const int kSolTypeFieldNumber = 4;
  ::apollo::drivers::gnss::SolutionType sol_type() const;
  void set_sol_type(::apollo::drivers::gnss::SolutionType value);

  // optional double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 6;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 6;
  double longitude() const;
  void set_longitude(double value);

  // optional double height_msl = 7;
  bool has_height_msl() const;
  void clear_height_msl();
  static const int kHeightMslFieldNumber = 7;
  double height_msl() const;
  void set_height_msl(double value);

  // optional float undulation = 8;
  bool has_undulation() const;
  void clear_undulation();
  static const int kUndulationFieldNumber = 8;
  float undulation() const;
  void set_undulation(float value);

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  bool has_datum_id() const;
  void clear_datum_id();
  static const int kDatumIdFieldNumber = 9;
  ::apollo::drivers::gnss::DatumId datum_id() const;
  void set_datum_id(::apollo::drivers::gnss::DatumId value);

  // optional float latitude_std_dev = 10;
  bool has_latitude_std_dev() const;
  void clear_latitude_std_dev();
  static const int kLatitudeStdDevFieldNumber = 10;
  float latitude_std_dev() const;
  void set_latitude_std_dev(float value);

  // optional float longitude_std_dev = 11;
  bool has_longitude_std_dev() const;
  void clear_longitude_std_dev();
  static const int kLongitudeStdDevFieldNumber = 11;
  float longitude_std_dev() const;
  void set_longitude_std_dev(float value);

  // optional float height_std_dev = 12;
  bool has_height_std_dev() const;
  void clear_height_std_dev();
  static const int kHeightStdDevFieldNumber = 12;
  float height_std_dev() const;
  void set_height_std_dev(float value);

  // optional bytes base_station_id = 13;
  bool has_base_station_id() const;
  void clear_base_station_id();
  static const int kBaseStationIdFieldNumber = 13;
  const ::std::string& base_station_id() const;
  void set_base_station_id(const ::std::string& value);
  void set_base_station_id(const char* value);
  void set_base_station_id(const void* value, size_t size);
  ::std::string* mutable_base_station_id();
  ::std::string* release_base_station_id();
  void set_allocated_base_station_id(::std::string* base_station_id);

  // optional float differential_age = 14;
  bool has_differential_age() const;
  void clear_differential_age();
  static const int kDifferentialAgeFieldNumber = 14;
  float differential_age() const;
  void set_differential_age(float value);

  // optional float solution_age = 15;
  bool has_solution_age() const;
  void clear_solution_age();
  static const int kSolutionAgeFieldNumber = 15;
  float solution_age() const;
  void set_solution_age(float value);

  // optional uint32 num_sats_tracked = 16;
  bool has_num_sats_tracked() const;
  void clear_num_sats_tracked();
  static const int kNumSatsTrackedFieldNumber = 16;
  ::google::protobuf::uint32 num_sats_tracked() const;
  void set_num_sats_tracked(::google::protobuf::uint32 value);

  // optional uint32 num_sats_in_solution = 17;
  bool has_num_sats_in_solution() const;
  void clear_num_sats_in_solution();
  static const int kNumSatsInSolutionFieldNumber = 17;
  ::google::protobuf::uint32 num_sats_in_solution() const;
  void set_num_sats_in_solution(::google::protobuf::uint32 value);

  // optional uint32 num_sats_l1 = 18;
  bool has_num_sats_l1() const;
  void clear_num_sats_l1();
  static const int kNumSatsL1FieldNumber = 18;
  ::google::protobuf::uint32 num_sats_l1() const;
  void set_num_sats_l1(::google::protobuf::uint32 value);

  // optional uint32 num_sats_multi = 19;
  bool has_num_sats_multi() const;
  void clear_num_sats_multi();
  static const int kNumSatsMultiFieldNumber = 19;
  ::google::protobuf::uint32 num_sats_multi() const;
  void set_num_sats_multi(::google::protobuf::uint32 value);

  // optional uint32 reserved = 20;
  bool has_reserved() const;
  void clear_reserved();
  static const int kReservedFieldNumber = 20;
  ::google::protobuf::uint32 reserved() const;
  void set_reserved(::google::protobuf::uint32 value);

  // optional uint32 extended_solution_status = 21;
  bool has_extended_solution_status() const;
  void clear_extended_solution_status();
  static const int kExtendedSolutionStatusFieldNumber = 21;
  ::google::protobuf::uint32 extended_solution_status() const;
  void set_extended_solution_status(::google::protobuf::uint32 value);

  // optional uint32 galileo_beidou_used_mask = 22;
  bool has_galileo_beidou_used_mask() const;
  void clear_galileo_beidou_used_mask();
  static const int kGalileoBeidouUsedMaskFieldNumber = 22;
  ::google::protobuf::uint32 galileo_beidou_used_mask() const;
  void set_galileo_beidou_used_mask(::google::protobuf::uint32 value);

  // optional uint32 gps_glonass_used_mask = 23;
  bool has_gps_glonass_used_mask() const;
  void clear_gps_glonass_used_mask();
  static const int kGpsGlonassUsedMaskFieldNumber = 23;
  ::google::protobuf::uint32 gps_glonass_used_mask() const;
  void set_gps_glonass_used_mask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.GnssBestPose)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_measurement_time();
  inline void clear_has_measurement_time();
  inline void set_has_sol_status();
  inline void clear_has_sol_status();
  inline void set_has_sol_type();
  inline void clear_has_sol_type();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_height_msl();
  inline void clear_has_height_msl();
  inline void set_has_undulation();
  inline void clear_has_undulation();
  inline void set_has_datum_id();
  inline void clear_has_datum_id();
  inline void set_has_latitude_std_dev();
  inline void clear_has_latitude_std_dev();
  inline void set_has_longitude_std_dev();
  inline void clear_has_longitude_std_dev();
  inline void set_has_height_std_dev();
  inline void clear_has_height_std_dev();
  inline void set_has_base_station_id();
  inline void clear_has_base_station_id();
  inline void set_has_differential_age();
  inline void clear_has_differential_age();
  inline void set_has_solution_age();
  inline void clear_has_solution_age();
  inline void set_has_num_sats_tracked();
  inline void clear_has_num_sats_tracked();
  inline void set_has_num_sats_in_solution();
  inline void clear_has_num_sats_in_solution();
  inline void set_has_num_sats_l1();
  inline void clear_has_num_sats_l1();
  inline void set_has_num_sats_multi();
  inline void clear_has_num_sats_multi();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  inline void set_has_extended_solution_status();
  inline void clear_has_extended_solution_status();
  inline void set_has_galileo_beidou_used_mask();
  inline void clear_has_galileo_beidou_used_mask();
  inline void set_has_gps_glonass_used_mask();
  inline void clear_has_gps_glonass_used_mask();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  double measurement_time_;
  int sol_status_;
  int sol_type_;
  double latitude_;
  double longitude_;
  double height_msl_;
  float undulation_;
  int datum_id_;
  float latitude_std_dev_;
  float longitude_std_dev_;
  ::google::protobuf::internal::ArenaStringPtr base_station_id_;
  float height_std_dev_;
  float differential_age_;
  float solution_age_;
  ::google::protobuf::uint32 num_sats_tracked_;
  ::google::protobuf::uint32 num_sats_in_solution_;
  ::google::protobuf::uint32 num_sats_l1_;
  ::google::protobuf::uint32 num_sats_multi_;
  ::google::protobuf::uint32 reserved_;
  ::google::protobuf::uint32 extended_solution_status_;
  ::google::protobuf::uint32 galileo_beidou_used_mask_;
  ::google::protobuf::uint32 gps_glonass_used_mask_;
  friend void  protobuf_AddDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();
  friend void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();

  void InitAsDefaultInstance();
  static GnssBestPose* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssBestPose

// optional .apollo.common.Header header = 1;
inline bool GnssBestPose::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GnssBestPose::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GnssBestPose::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GnssBestPose::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& GnssBestPose::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* GnssBestPose::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.header)
  return header_;
}
inline ::apollo::common::Header* GnssBestPose::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GnssBestPose::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.header)
}

// optional double measurement_time = 2;
inline bool GnssBestPose::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GnssBestPose::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GnssBestPose::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GnssBestPose::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double GnssBestPose::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.measurement_time)
  return measurement_time_;
}
inline void GnssBestPose::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.measurement_time)
}

// optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
inline bool GnssBestPose::has_sol_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GnssBestPose::set_has_sol_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GnssBestPose::clear_has_sol_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GnssBestPose::clear_sol_status() {
  sol_status_ = 0;
  clear_has_sol_status();
}
inline ::apollo::drivers::gnss::SolutionStatus GnssBestPose::sol_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_status)
  return static_cast< ::apollo::drivers::gnss::SolutionStatus >(sol_status_);
}
inline void GnssBestPose::set_sol_status(::apollo::drivers::gnss::SolutionStatus value) {
  assert(::apollo::drivers::gnss::SolutionStatus_IsValid(value));
  set_has_sol_status();
  sol_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_status)
}

// optional .apollo.drivers.gnss.SolutionType sol_type = 4;
inline bool GnssBestPose::has_sol_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GnssBestPose::set_has_sol_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GnssBestPose::clear_has_sol_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GnssBestPose::clear_sol_type() {
  sol_type_ = 0;
  clear_has_sol_type();
}
inline ::apollo::drivers::gnss::SolutionType GnssBestPose::sol_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_type)
  return static_cast< ::apollo::drivers::gnss::SolutionType >(sol_type_);
}
inline void GnssBestPose::set_sol_type(::apollo::drivers::gnss::SolutionType value) {
  assert(::apollo::drivers::gnss::SolutionType_IsValid(value));
  set_has_sol_type();
  sol_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_type)
}

// optional double latitude = 5;
inline bool GnssBestPose::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GnssBestPose::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GnssBestPose::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GnssBestPose::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double GnssBestPose::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude)
  return latitude_;
}
inline void GnssBestPose::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude)
}

// optional double longitude = 6;
inline bool GnssBestPose::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GnssBestPose::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GnssBestPose::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GnssBestPose::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double GnssBestPose::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude)
  return longitude_;
}
inline void GnssBestPose::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude)
}

// optional double height_msl = 7;
inline bool GnssBestPose::has_height_msl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GnssBestPose::set_has_height_msl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GnssBestPose::clear_has_height_msl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GnssBestPose::clear_height_msl() {
  height_msl_ = 0;
  clear_has_height_msl();
}
inline double GnssBestPose::height_msl() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_msl)
  return height_msl_;
}
inline void GnssBestPose::set_height_msl(double value) {
  set_has_height_msl();
  height_msl_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_msl)
}

// optional float undulation = 8;
inline bool GnssBestPose::has_undulation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GnssBestPose::set_has_undulation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GnssBestPose::clear_has_undulation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GnssBestPose::clear_undulation() {
  undulation_ = 0;
  clear_has_undulation();
}
inline float GnssBestPose::undulation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.undulation)
  return undulation_;
}
inline void GnssBestPose::set_undulation(float value) {
  set_has_undulation();
  undulation_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.undulation)
}

// optional .apollo.drivers.gnss.DatumId datum_id = 9;
inline bool GnssBestPose::has_datum_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GnssBestPose::set_has_datum_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GnssBestPose::clear_has_datum_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GnssBestPose::clear_datum_id() {
  datum_id_ = 61;
  clear_has_datum_id();
}
inline ::apollo::drivers::gnss::DatumId GnssBestPose::datum_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.datum_id)
  return static_cast< ::apollo::drivers::gnss::DatumId >(datum_id_);
}
inline void GnssBestPose::set_datum_id(::apollo::drivers::gnss::DatumId value) {
  assert(::apollo::drivers::gnss::DatumId_IsValid(value));
  set_has_datum_id();
  datum_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.datum_id)
}

// optional float latitude_std_dev = 10;
inline bool GnssBestPose::has_latitude_std_dev() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GnssBestPose::set_has_latitude_std_dev() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GnssBestPose::clear_has_latitude_std_dev() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GnssBestPose::clear_latitude_std_dev() {
  latitude_std_dev_ = 0;
  clear_has_latitude_std_dev();
}
inline float GnssBestPose::latitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
  return latitude_std_dev_;
}
inline void GnssBestPose::set_latitude_std_dev(float value) {
  set_has_latitude_std_dev();
  latitude_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
}

// optional float longitude_std_dev = 11;
inline bool GnssBestPose::has_longitude_std_dev() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GnssBestPose::set_has_longitude_std_dev() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GnssBestPose::clear_has_longitude_std_dev() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GnssBestPose::clear_longitude_std_dev() {
  longitude_std_dev_ = 0;
  clear_has_longitude_std_dev();
}
inline float GnssBestPose::longitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
  return longitude_std_dev_;
}
inline void GnssBestPose::set_longitude_std_dev(float value) {
  set_has_longitude_std_dev();
  longitude_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
}

// optional float height_std_dev = 12;
inline bool GnssBestPose::has_height_std_dev() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GnssBestPose::set_has_height_std_dev() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GnssBestPose::clear_has_height_std_dev() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GnssBestPose::clear_height_std_dev() {
  height_std_dev_ = 0;
  clear_has_height_std_dev();
}
inline float GnssBestPose::height_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_std_dev)
  return height_std_dev_;
}
inline void GnssBestPose::set_height_std_dev(float value) {
  set_has_height_std_dev();
  height_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_std_dev)
}

// optional bytes base_station_id = 13;
inline bool GnssBestPose::has_base_station_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GnssBestPose::set_has_base_station_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GnssBestPose::clear_has_base_station_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GnssBestPose::clear_base_station_id() {
  base_station_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_station_id();
}
inline const ::std::string& GnssBestPose::base_station_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return base_station_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GnssBestPose::set_base_station_id(const ::std::string& value) {
  set_has_base_station_id();
  base_station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline void GnssBestPose::set_base_station_id(const char* value) {
  set_has_base_station_id();
  base_station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline void GnssBestPose::set_base_station_id(const void* value, size_t size) {
  set_has_base_station_id();
  base_station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline ::std::string* GnssBestPose::mutable_base_station_id() {
  set_has_base_station_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return base_station_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GnssBestPose::release_base_station_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.base_station_id)
  clear_has_base_station_id();
  return base_station_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GnssBestPose::set_allocated_base_station_id(::std::string* base_station_id) {
  if (base_station_id != NULL) {
    set_has_base_station_id();
  } else {
    clear_has_base_station_id();
  }
  base_station_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_station_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.base_station_id)
}

// optional float differential_age = 14;
inline bool GnssBestPose::has_differential_age() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GnssBestPose::set_has_differential_age() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GnssBestPose::clear_has_differential_age() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GnssBestPose::clear_differential_age() {
  differential_age_ = 0;
  clear_has_differential_age();
}
inline float GnssBestPose::differential_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.differential_age)
  return differential_age_;
}
inline void GnssBestPose::set_differential_age(float value) {
  set_has_differential_age();
  differential_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.differential_age)
}

// optional float solution_age = 15;
inline bool GnssBestPose::has_solution_age() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GnssBestPose::set_has_solution_age() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GnssBestPose::clear_has_solution_age() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GnssBestPose::clear_solution_age() {
  solution_age_ = 0;
  clear_has_solution_age();
}
inline float GnssBestPose::solution_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.solution_age)
  return solution_age_;
}
inline void GnssBestPose::set_solution_age(float value) {
  set_has_solution_age();
  solution_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.solution_age)
}

// optional uint32 num_sats_tracked = 16;
inline bool GnssBestPose::has_num_sats_tracked() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GnssBestPose::set_has_num_sats_tracked() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GnssBestPose::clear_has_num_sats_tracked() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GnssBestPose::clear_num_sats_tracked() {
  num_sats_tracked_ = 0u;
  clear_has_num_sats_tracked();
}
inline ::google::protobuf::uint32 GnssBestPose::num_sats_tracked() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
  return num_sats_tracked_;
}
inline void GnssBestPose::set_num_sats_tracked(::google::protobuf::uint32 value) {
  set_has_num_sats_tracked();
  num_sats_tracked_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
}

// optional uint32 num_sats_in_solution = 17;
inline bool GnssBestPose::has_num_sats_in_solution() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GnssBestPose::set_has_num_sats_in_solution() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GnssBestPose::clear_has_num_sats_in_solution() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GnssBestPose::clear_num_sats_in_solution() {
  num_sats_in_solution_ = 0u;
  clear_has_num_sats_in_solution();
}
inline ::google::protobuf::uint32 GnssBestPose::num_sats_in_solution() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
  return num_sats_in_solution_;
}
inline void GnssBestPose::set_num_sats_in_solution(::google::protobuf::uint32 value) {
  set_has_num_sats_in_solution();
  num_sats_in_solution_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
}

// optional uint32 num_sats_l1 = 18;
inline bool GnssBestPose::has_num_sats_l1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GnssBestPose::set_has_num_sats_l1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GnssBestPose::clear_has_num_sats_l1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GnssBestPose::clear_num_sats_l1() {
  num_sats_l1_ = 0u;
  clear_has_num_sats_l1();
}
inline ::google::protobuf::uint32 GnssBestPose::num_sats_l1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
  return num_sats_l1_;
}
inline void GnssBestPose::set_num_sats_l1(::google::protobuf::uint32 value) {
  set_has_num_sats_l1();
  num_sats_l1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
}

// optional uint32 num_sats_multi = 19;
inline bool GnssBestPose::has_num_sats_multi() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GnssBestPose::set_has_num_sats_multi() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GnssBestPose::clear_has_num_sats_multi() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GnssBestPose::clear_num_sats_multi() {
  num_sats_multi_ = 0u;
  clear_has_num_sats_multi();
}
inline ::google::protobuf::uint32 GnssBestPose::num_sats_multi() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
  return num_sats_multi_;
}
inline void GnssBestPose::set_num_sats_multi(::google::protobuf::uint32 value) {
  set_has_num_sats_multi();
  num_sats_multi_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
}

// optional uint32 reserved = 20;
inline bool GnssBestPose::has_reserved() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GnssBestPose::set_has_reserved() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GnssBestPose::clear_has_reserved() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GnssBestPose::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
inline ::google::protobuf::uint32 GnssBestPose::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.reserved)
  return reserved_;
}
inline void GnssBestPose::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.reserved)
}

// optional uint32 extended_solution_status = 21;
inline bool GnssBestPose::has_extended_solution_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GnssBestPose::set_has_extended_solution_status() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GnssBestPose::clear_has_extended_solution_status() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GnssBestPose::clear_extended_solution_status() {
  extended_solution_status_ = 0u;
  clear_has_extended_solution_status();
}
inline ::google::protobuf::uint32 GnssBestPose::extended_solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
  return extended_solution_status_;
}
inline void GnssBestPose::set_extended_solution_status(::google::protobuf::uint32 value) {
  set_has_extended_solution_status();
  extended_solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
}

// optional uint32 galileo_beidou_used_mask = 22;
inline bool GnssBestPose::has_galileo_beidou_used_mask() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GnssBestPose::set_has_galileo_beidou_used_mask() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GnssBestPose::clear_has_galileo_beidou_used_mask() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GnssBestPose::clear_galileo_beidou_used_mask() {
  galileo_beidou_used_mask_ = 0u;
  clear_has_galileo_beidou_used_mask();
}
inline ::google::protobuf::uint32 GnssBestPose::galileo_beidou_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
  return galileo_beidou_used_mask_;
}
inline void GnssBestPose::set_galileo_beidou_used_mask(::google::protobuf::uint32 value) {
  set_has_galileo_beidou_used_mask();
  galileo_beidou_used_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
}

// optional uint32 gps_glonass_used_mask = 23;
inline bool GnssBestPose::has_gps_glonass_used_mask() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GnssBestPose::set_has_gps_glonass_used_mask() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GnssBestPose::clear_has_gps_glonass_used_mask() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GnssBestPose::clear_gps_glonass_used_mask() {
  gps_glonass_used_mask_ = 0u;
  clear_has_gps_glonass_used_mask();
}
inline ::google::protobuf::uint32 GnssBestPose::gps_glonass_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
  return gps_glonass_used_mask_;
}
inline void GnssBestPose::set_gps_glonass_used_mask(::google::protobuf::uint32 value) {
  set_has_gps_glonass_used_mask();
  gps_glonass_used_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::gnss::SolutionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::SolutionStatus>() {
  return ::apollo::drivers::gnss::SolutionStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::SolutionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::SolutionType>() {
  return ::apollo::drivers::gnss::SolutionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::DatumId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::DatumId>() {
  return ::apollo::drivers::gnss::DatumId_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto__INCLUDED
