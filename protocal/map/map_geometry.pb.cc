// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map/map_geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map/map_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace hdmap {

namespace {

const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveSegment_reflection_ = NULL;
struct CurveSegmentOneofInstance {
  const ::apollo::hdmap::LineSegment* line_segment_;
}* CurveSegment_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Curve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Curve_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2fmap_5fgeometry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_map_2fmap_5fgeometry_2eproto() {
  protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map/map_geometry.proto");
  GOOGLE_CHECK(file != NULL);
  Polygon_descriptor_ = file->message_type(0);
  static const int Polygon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, point_),
  };
  Polygon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_[0]),
      -1,
      -1,
      sizeof(Polygon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
      -1);
  LineSegment_descriptor_ = file->message_type(1);
  static const int LineSegment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, point_),
  };
  LineSegment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LineSegment_descriptor_,
      LineSegment::default_instance_,
      LineSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, _has_bits_[0]),
      -1,
      -1,
      sizeof(LineSegment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSegment, _internal_metadata_),
      -1);
  CurveSegment_descriptor_ = file->message_type(2);
  static const int CurveSegment_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CurveSegment_default_oneof_instance_, line_segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, start_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, curve_type_),
  };
  CurveSegment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurveSegment_descriptor_,
      CurveSegment::default_instance_,
      CurveSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, _has_bits_[0]),
      -1,
      -1,
      CurveSegment_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, _oneof_case_[0]),
      sizeof(CurveSegment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveSegment, _internal_metadata_),
      -1);
  Curve_descriptor_ = file->message_type(3);
  static const int Curve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Curve, segment_),
  };
  Curve_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Curve_descriptor_,
      Curve::default_instance_,
      Curve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Curve, _has_bits_[0]),
      -1,
      -1,
      sizeof(Curve),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Curve, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2fmap_5fgeometry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LineSegment_descriptor_, &LineSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurveSegment_descriptor_, &CurveSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Curve_descriptor_, &Curve::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2fmap_5fgeometry_2eproto() {
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete LineSegment::default_instance_;
  delete LineSegment_reflection_;
  delete CurveSegment::default_instance_;
  delete CurveSegment_default_oneof_instance_;
  delete CurveSegment_reflection_;
  delete Curve::default_instance_;
  delete Curve_reflection_;
}

void protobuf_AddDesc_map_2fmap_5fgeometry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_map_2fmap_5fgeometry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026map/map_geometry.proto\022\014apollo.hdmap\032\025"
    "common/geometry.proto\"1\n\007Polygon\022&\n\005poin"
    "t\030\001 \003(\0132\027.apollo.common.PointENU\"5\n\013Line"
    "Segment\022&\n\005point\030\001 \003(\0132\027.apollo.common.P"
    "ointENU\"\254\001\n\014CurveSegment\0221\n\014line_segment"
    "\030\001 \001(\0132\031.apollo.hdmap.LineSegmentH\000\022\t\n\001s"
    "\030\006 \001(\001\022/\n\016start_position\030\007 \001(\0132\027.apollo."
    "common.PointENU\022\017\n\007heading\030\010 \001(\001\022\016\n\006leng"
    "th\030\t \001(\001B\014\n\ncurve_type\"4\n\005Curve\022+\n\007segme"
    "nt\030\001 \003(\0132\032.apollo.hdmap.CurveSegment", 396);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map/map_geometry.proto", &protobuf_RegisterTypes);
  Polygon::default_instance_ = new Polygon();
  LineSegment::default_instance_ = new LineSegment();
  CurveSegment::default_instance_ = new CurveSegment();
  CurveSegment_default_oneof_instance_ = new CurveSegmentOneofInstance();
  Curve::default_instance_ = new Curve();
  Polygon::default_instance_->InitAsDefaultInstance();
  LineSegment::default_instance_->InitAsDefaultInstance();
  CurveSegment::default_instance_->InitAsDefaultInstance();
  Curve::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2fmap_5fgeometry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2fmap_5fgeometry_2eproto {
  StaticDescriptorInitializer_map_2fmap_5fgeometry_2eproto() {
    protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  }
} static_descriptor_initializer_map_2fmap_5fgeometry_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Polygon)
}

void Polygon::InitAsDefaultInstance() {
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Polygon)
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Polygon)
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.PointENU point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Polygon)
  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Polygon)
  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Polygon)
  return target;
}

int Polygon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Polygon)
  int total_size = 0;

  // repeated .apollo.common.PointENU point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Polygon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// repeated .apollo.common.PointENU point = 1;
int Polygon::point_size() const {
  return point_.size();
}
void Polygon::clear_point() {
  point_.Clear();
}
const ::apollo::common::PointENU& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Polygon.point)
  return point_.Get(index);
}
::apollo::common::PointENU* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Polygon.point)
  return point_.Mutable(index);
}
::apollo::common::PointENU* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Polygon.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Polygon.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Polygon.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineSegment::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineSegment::LineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LineSegment)
}

void LineSegment::InitAsDefaultInstance() {
}

LineSegment::LineSegment(const LineSegment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LineSegment)
}

void LineSegment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineSegment::~LineSegment() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LineSegment)
  SharedDtor();
}

void LineSegment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSegment_descriptor_;
}

const LineSegment& LineSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  return *default_instance_;
}

LineSegment* LineSegment::default_instance_ = NULL;

LineSegment* LineSegment::New(::google::protobuf::Arena* arena) const {
  LineSegment* n = new LineSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LineSegment)
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.LineSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.PointENU point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.LineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.LineSegment)
  return false;
#undef DO_
}

void LineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.LineSegment)
  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.LineSegment)
}

::google::protobuf::uint8* LineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LineSegment)
  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LineSegment)
  return target;
}

int LineSegment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LineSegment)
  int total_size = 0;

  // repeated .apollo.common.PointENU point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LineSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LineSegment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LineSegment)
    MergeFrom(*source);
  }
}

void LineSegment::MergeFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LineSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSegment::CopyFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSegment::IsInitialized() const {

  return true;
}

void LineSegment::Swap(LineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineSegment::InternalSwap(LineSegment* other) {
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineSegment_descriptor_;
  metadata.reflection = LineSegment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineSegment

// repeated .apollo.common.PointENU point = 1;
int LineSegment::point_size() const {
  return point_.size();
}
void LineSegment::clear_point() {
  point_.Clear();
}
const ::apollo::common::PointENU& LineSegment::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LineSegment.point)
  return point_.Get(index);
}
::apollo::common::PointENU* LineSegment::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.LineSegment.point)
  return point_.Mutable(index);
}
::apollo::common::PointENU* LineSegment::add_point() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.LineSegment.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
LineSegment::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.LineSegment.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
LineSegment::point() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.LineSegment.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveSegment::kLineSegmentFieldNumber;
const int CurveSegment::kSFieldNumber;
const int CurveSegment::kStartPositionFieldNumber;
const int CurveSegment::kHeadingFieldNumber;
const int CurveSegment::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveSegment::CurveSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.CurveSegment)
}

void CurveSegment::InitAsDefaultInstance() {
  CurveSegment_default_oneof_instance_->line_segment_ = const_cast< ::apollo::hdmap::LineSegment*>(&::apollo::hdmap::LineSegment::default_instance());
  start_position_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

CurveSegment::CurveSegment(const CurveSegment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.CurveSegment)
}

void CurveSegment::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  start_position_ = NULL;
  heading_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_curve_type();
}

CurveSegment::~CurveSegment() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.CurveSegment)
  SharedDtor();
}

void CurveSegment::SharedDtor() {
  if (has_curve_type()) {
    clear_curve_type();
  }
  if (this != default_instance_) {
    delete start_position_;
  }
}

void CurveSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveSegment_descriptor_;
}

const CurveSegment& CurveSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  return *default_instance_;
}

CurveSegment* CurveSegment::default_instance_ = NULL;

CurveSegment* CurveSegment::New(::google::protobuf::Arena* arena) const {
  CurveSegment* n = new CurveSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurveSegment::clear_curve_type() {
// @@protoc_insertion_point(one_of_clear_start:apollo.hdmap.CurveSegment)
  switch(curve_type_case()) {
    case kLineSegment: {
      delete curve_type_.line_segment_;
      break;
    }
    case CURVE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CURVE_TYPE_NOT_SET;
}


void CurveSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.CurveSegment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CurveSegment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CurveSegment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 30u) {
    ZR_(heading_, length_);
    s_ = 0;
    if (has_start_position()) {
      if (start_position_ != NULL) start_position_->::apollo::common::PointENU::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  clear_curve_type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CurveSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.CurveSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.LineSegment line_segment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_s;
        break;
      }

      // optional double s = 6;
      case 6: {
        if (tag == 49) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_start_position;
        break;
      }

      // optional .apollo.common.PointENU start_position = 7;
      case 7: {
        if (tag == 58) {
         parse_start_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_heading;
        break;
      }

      // optional double heading = 8;
      case 8: {
        if (tag == 65) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_length;
        break;
      }

      // optional double length = 9;
      case 9: {
        if (tag == 73) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.CurveSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.CurveSegment)
  return false;
#undef DO_
}

void CurveSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.CurveSegment)
  // optional .apollo.hdmap.LineSegment line_segment = 1;
  if (has_line_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *curve_type_.line_segment_, output);
  }

  // optional double s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s(), output);
  }

  // optional .apollo.common.PointENU start_position = 7;
  if (has_start_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->start_position_, output);
  }

  // optional double heading = 8;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->heading(), output);
  }

  // optional double length = 9;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.CurveSegment)
}

::google::protobuf::uint8* CurveSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.CurveSegment)
  // optional .apollo.hdmap.LineSegment line_segment = 1;
  if (has_line_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *curve_type_.line_segment_, false, target);
  }

  // optional double s = 6;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s(), target);
  }

  // optional .apollo.common.PointENU start_position = 7;
  if (has_start_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->start_position_, false, target);
  }

  // optional double heading = 8;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->heading(), target);
  }

  // optional double length = 9;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.CurveSegment)
  return target;
}

int CurveSegment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.CurveSegment)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 30u) {
    // optional double s = 6;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.PointENU start_position = 7;
    if (has_start_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_position_);
    }

    // optional double heading = 8;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (has_length()) {
      total_size += 1 + 8;
    }

  }
  switch (curve_type_case()) {
    // optional .apollo.hdmap.LineSegment line_segment = 1;
    case kLineSegment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *curve_type_.line_segment_);
      break;
    }
    case CURVE_TYPE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.CurveSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurveSegment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.CurveSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.CurveSegment)
    MergeFrom(*source);
  }
}

void CurveSegment::MergeFrom(const CurveSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.CurveSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.curve_type_case()) {
    case kLineSegment: {
      mutable_line_segment()->::apollo::hdmap::LineSegment::MergeFrom(from.line_segment());
      break;
    }
    case CURVE_TYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_start_position()) {
      mutable_start_position()->::apollo::common::PointENU::MergeFrom(from.start_position());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CurveSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.CurveSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveSegment::CopyFrom(const CurveSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.CurveSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveSegment::IsInitialized() const {

  return true;
}

void CurveSegment::Swap(CurveSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveSegment::InternalSwap(CurveSegment* other) {
  std::swap(s_, other->s_);
  std::swap(start_position_, other->start_position_);
  std::swap(heading_, other->heading_);
  std::swap(length_, other->length_);
  std::swap(curve_type_, other->curve_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurveSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveSegment_descriptor_;
  metadata.reflection = CurveSegment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurveSegment

// optional .apollo.hdmap.LineSegment line_segment = 1;
bool CurveSegment::has_line_segment() const {
  return curve_type_case() == kLineSegment;
}
void CurveSegment::set_has_line_segment() {
  _oneof_case_[0] = kLineSegment;
}
void CurveSegment::clear_line_segment() {
  if (has_line_segment()) {
    delete curve_type_.line_segment_;
    clear_has_curve_type();
  }
}
 const ::apollo::hdmap::LineSegment& CurveSegment::line_segment() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.line_segment)
  return has_line_segment()
      ? *curve_type_.line_segment_
      : ::apollo::hdmap::LineSegment::default_instance();
}
::apollo::hdmap::LineSegment* CurveSegment::mutable_line_segment() {
  if (!has_line_segment()) {
    clear_curve_type();
    set_has_line_segment();
    curve_type_.line_segment_ = new ::apollo::hdmap::LineSegment;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.CurveSegment.line_segment)
  return curve_type_.line_segment_;
}
::apollo::hdmap::LineSegment* CurveSegment::release_line_segment() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.CurveSegment.line_segment)
  if (has_line_segment()) {
    clear_has_curve_type();
    ::apollo::hdmap::LineSegment* temp = curve_type_.line_segment_;
    curve_type_.line_segment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CurveSegment::set_allocated_line_segment(::apollo::hdmap::LineSegment* line_segment) {
  clear_curve_type();
  if (line_segment) {
    set_has_line_segment();
    curve_type_.line_segment_ = line_segment;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.CurveSegment.line_segment)
}

// optional double s = 6;
bool CurveSegment::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurveSegment::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
void CurveSegment::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurveSegment::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double CurveSegment::s() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.s)
  return s_;
}
 void CurveSegment::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.s)
}

// optional .apollo.common.PointENU start_position = 7;
bool CurveSegment::has_start_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CurveSegment::set_has_start_position() {
  _has_bits_[0] |= 0x00000004u;
}
void CurveSegment::clear_has_start_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void CurveSegment::clear_start_position() {
  if (start_position_ != NULL) start_position_->::apollo::common::PointENU::Clear();
  clear_has_start_position();
}
const ::apollo::common::PointENU& CurveSegment::start_position() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.start_position)
  return start_position_ != NULL ? *start_position_ : *default_instance_->start_position_;
}
::apollo::common::PointENU* CurveSegment::mutable_start_position() {
  set_has_start_position();
  if (start_position_ == NULL) {
    start_position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.CurveSegment.start_position)
  return start_position_;
}
::apollo::common::PointENU* CurveSegment::release_start_position() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.CurveSegment.start_position)
  clear_has_start_position();
  ::apollo::common::PointENU* temp = start_position_;
  start_position_ = NULL;
  return temp;
}
void CurveSegment::set_allocated_start_position(::apollo::common::PointENU* start_position) {
  delete start_position_;
  start_position_ = start_position;
  if (start_position) {
    set_has_start_position();
  } else {
    clear_has_start_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.CurveSegment.start_position)
}

// optional double heading = 8;
bool CurveSegment::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CurveSegment::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
void CurveSegment::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
void CurveSegment::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double CurveSegment::heading() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.heading)
  return heading_;
}
 void CurveSegment::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.heading)
}

// optional double length = 9;
bool CurveSegment::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CurveSegment::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
void CurveSegment::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void CurveSegment::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double CurveSegment::length() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.length)
  return length_;
}
 void CurveSegment::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.length)
}

bool CurveSegment::has_curve_type() const {
  return curve_type_case() != CURVE_TYPE_NOT_SET;
}
void CurveSegment::clear_has_curve_type() {
  _oneof_case_[0] = CURVE_TYPE_NOT_SET;
}
CurveSegment::CurveTypeCase CurveSegment::curve_type_case() const {
  return CurveSegment::CurveTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Curve::kSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Curve::Curve()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Curve)
}

void Curve::InitAsDefaultInstance() {
}

Curve::Curve(const Curve& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Curve)
}

void Curve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Curve::~Curve() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Curve)
  SharedDtor();
}

void Curve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Curve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Curve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Curve_descriptor_;
}

const Curve& Curve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  return *default_instance_;
}

Curve* Curve::default_instance_ = NULL;

Curve* Curve::New(::google::protobuf::Arena* arena) const {
  Curve* n = new Curve;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Curve::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Curve)
  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Curve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Curve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.hdmap.CurveSegment segment = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_segment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Curve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Curve)
  return false;
#undef DO_
}

void Curve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Curve)
  // repeated .apollo.hdmap.CurveSegment segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Curve)
}

::google::protobuf::uint8* Curve::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Curve)
  // repeated .apollo.hdmap.CurveSegment segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segment(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Curve)
  return target;
}

int Curve::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Curve)
  int total_size = 0;

  // repeated .apollo.hdmap.CurveSegment segment = 1;
  total_size += 1 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Curve::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Curve)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Curve* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Curve>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Curve)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Curve)
    MergeFrom(*source);
  }
}

void Curve::MergeFrom(const Curve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Curve)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  segment_.MergeFrom(from.segment_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Curve::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Curve::CopyFrom(const Curve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Curve::IsInitialized() const {

  return true;
}

void Curve::Swap(Curve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Curve::InternalSwap(Curve* other) {
  segment_.UnsafeArenaSwap(&other->segment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Curve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Curve_descriptor_;
  metadata.reflection = Curve_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Curve

// repeated .apollo.hdmap.CurveSegment segment = 1;
int Curve::segment_size() const {
  return segment_.size();
}
void Curve::clear_segment() {
  segment_.Clear();
}
const ::apollo::hdmap::CurveSegment& Curve::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Curve.segment)
  return segment_.Get(index);
}
::apollo::hdmap::CurveSegment* Curve::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Curve.segment)
  return segment_.Mutable(index);
}
::apollo::hdmap::CurveSegment* Curve::add_segment() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Curve.segment)
  return segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::CurveSegment >*
Curve::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Curve.segment)
  return &segment_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::CurveSegment >&
Curve::segment() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Curve.segment)
  return segment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
