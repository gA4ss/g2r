// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization/gnss_pnt_result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localization/gnss_pnt_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* SatDirCosine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SatDirCosine_reflection_ = NULL;
const ::google::protobuf::Descriptor* GnssPntResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GnssPntResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PntType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_localization_2fgnss_5fpnt_5fresult_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_localization_2fgnss_5fpnt_5fresult_2eproto() {
  protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localization/gnss_pnt_result.proto");
  GOOGLE_CHECK(file != NULL);
  SatDirCosine_descriptor_ = file->message_type(0);
  static const int SatDirCosine_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatDirCosine, sat_prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatDirCosine, sat_sys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatDirCosine, cosine_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatDirCosine, cosine_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatDirCosine, cosine_z_),
  };
  SatDirCosine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SatDirCosine_descriptor_,
      SatDirCosine::default_instance_,
      SatDirCosine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatDirCosine, _has_bits_[0]),
      -1,
      -1,
      sizeof(SatDirCosine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatDirCosine, _internal_metadata_),
      -1);
  GnssPntResult_descriptor_ = file->message_type(1);
  static const int GnssPntResult_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, gnss_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, gnss_second_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, pnt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, pos_x_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, pos_y_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, pos_z_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, std_pos_x_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, std_pos_y_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, std_pos_z_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, vel_x_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, vel_y_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, vel_z_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, std_vel_x_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, std_vel_y_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, std_vel_z_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, sovled_sat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, sat_dir_cosine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, pdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, hdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, vdop_),
  };
  GnssPntResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GnssPntResult_descriptor_,
      GnssPntResult::default_instance_,
      GnssPntResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(GnssPntResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssPntResult, _internal_metadata_),
      -1);
  PntType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localization_2fgnss_5fpnt_5fresult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SatDirCosine_descriptor_, &SatDirCosine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GnssPntResult_descriptor_, &GnssPntResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localization_2fgnss_5fpnt_5fresult_2eproto() {
  delete SatDirCosine::default_instance_;
  delete SatDirCosine_reflection_;
  delete GnssPntResult::default_instance_;
  delete GnssPntResult_reflection_;
}

void protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::drivers::gnss::protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"localization/gnss_pnt_result.proto\022\023ap"
    "ollo.localization\032\'drivers/gnss/gnss_raw"
    "_observation.proto\"f\n\014SatDirCosine\022\017\n\007sa"
    "t_prn\030\001 \001(\r\022\017\n\007sat_sys\030\002 \001(\r\022\020\n\010cosine_x"
    "\030\003 \001(\001\022\020\n\010cosine_y\030\004 \001(\001\022\020\n\010cosine_z\030\005 \001"
    "(\001\"\254\004\n\rGnssPntResult\022\023\n\013receiver_id\030\001 \001("
    "\r\022>\n\ttime_type\030\002 \001(\0162!.apollo.drivers.gn"
    "ss.GnssTimeType:\010GPS_TIME\022\021\n\tgnss_week\030\003"
    " \001(\r\022\025\n\rgnss_second_s\030\004 \001(\001\022;\n\010pnt_type\030"
    "\005 \001(\0162\034.apollo.localization.PntType:\013PNT"
    "_INVALID\022\017\n\007pos_x_m\030\006 \001(\001\022\017\n\007pos_y_m\030\007 \001"
    "(\001\022\017\n\007pos_z_m\030\010 \001(\001\022\023\n\013std_pos_x_m\030\t \001(\001"
    "\022\023\n\013std_pos_y_m\030\n \001(\001\022\023\n\013std_pos_z_m\030\013 \001"
    "(\001\022\017\n\007vel_x_m\030\014 \001(\001\022\017\n\007vel_y_m\030\r \001(\001\022\017\n\007"
    "vel_z_m\030\016 \001(\001\022\023\n\013std_vel_x_m\030\017 \001(\001\022\023\n\013st"
    "d_vel_y_m\030\020 \001(\001\022\023\n\013std_vel_z_m\030\021 \001(\001\022\026\n\016"
    "sovled_sat_num\030\022 \001(\r\0229\n\016sat_dir_cosine\030\023"
    " \003(\0132!.apollo.localization.SatDirCosine\022"
    "\014\n\004pdop\030\024 \001(\001\022\014\n\004hdop\030\025 \001(\001\022\014\n\004vdop\030\026 \001("
    "\001*r\n\007PntType\022\017\n\013PNT_INVALID\020\000\022\013\n\007PNT_SPP"
    "\020\001\022\020\n\014PNT_PHASE_TD\020\002\022\021\n\rPNT_CODE_DIFF\020\003\022"
    "\021\n\rPNT_RTK_FLOAT\020\004\022\021\n\rPNT_RTK_FIXED\020\005", 877);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization/gnss_pnt_result.proto", &protobuf_RegisterTypes);
  SatDirCosine::default_instance_ = new SatDirCosine();
  GnssPntResult::default_instance_ = new GnssPntResult();
  SatDirCosine::default_instance_->InitAsDefaultInstance();
  GnssPntResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localization_2fgnss_5fpnt_5fresult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localization_2fgnss_5fpnt_5fresult_2eproto {
  StaticDescriptorInitializer_localization_2fgnss_5fpnt_5fresult_2eproto() {
    protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  }
} static_descriptor_initializer_localization_2fgnss_5fpnt_5fresult_2eproto_;
const ::google::protobuf::EnumDescriptor* PntType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PntType_descriptor_;
}
bool PntType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SatDirCosine::kSatPrnFieldNumber;
const int SatDirCosine::kSatSysFieldNumber;
const int SatDirCosine::kCosineXFieldNumber;
const int SatDirCosine::kCosineYFieldNumber;
const int SatDirCosine::kCosineZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SatDirCosine::SatDirCosine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.SatDirCosine)
}

void SatDirCosine::InitAsDefaultInstance() {
}

SatDirCosine::SatDirCosine(const SatDirCosine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.SatDirCosine)
}

void SatDirCosine::SharedCtor() {
  _cached_size_ = 0;
  sat_prn_ = 0u;
  sat_sys_ = 0u;
  cosine_x_ = 0;
  cosine_y_ = 0;
  cosine_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SatDirCosine::~SatDirCosine() {
  // @@protoc_insertion_point(destructor:apollo.localization.SatDirCosine)
  SharedDtor();
}

void SatDirCosine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SatDirCosine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatDirCosine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatDirCosine_descriptor_;
}

const SatDirCosine& SatDirCosine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  return *default_instance_;
}

SatDirCosine* SatDirCosine::default_instance_ = NULL;

SatDirCosine* SatDirCosine::New(::google::protobuf::Arena* arena) const {
  SatDirCosine* n = new SatDirCosine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SatDirCosine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.SatDirCosine)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SatDirCosine, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SatDirCosine*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sat_prn_, cosine_z_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SatDirCosine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.SatDirCosine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sat_prn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
          set_has_sat_prn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sat_sys;
        break;
      }

      // optional uint32 sat_sys = 2;
      case 2: {
        if (tag == 16) {
         parse_sat_sys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_sys_)));
          set_has_sat_sys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cosine_x;
        break;
      }

      // optional double cosine_x = 3;
      case 3: {
        if (tag == 25) {
         parse_cosine_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cosine_x_)));
          set_has_cosine_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_cosine_y;
        break;
      }

      // optional double cosine_y = 4;
      case 4: {
        if (tag == 33) {
         parse_cosine_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cosine_y_)));
          set_has_cosine_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_cosine_z;
        break;
      }

      // optional double cosine_z = 5;
      case 5: {
        if (tag == 41) {
         parse_cosine_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cosine_z_)));
          set_has_cosine_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.SatDirCosine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.SatDirCosine)
  return false;
#undef DO_
}

void SatDirCosine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.SatDirCosine)
  // optional uint32 sat_prn = 1;
  if (has_sat_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sat_prn(), output);
  }

  // optional uint32 sat_sys = 2;
  if (has_sat_sys()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sat_sys(), output);
  }

  // optional double cosine_x = 3;
  if (has_cosine_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cosine_x(), output);
  }

  // optional double cosine_y = 4;
  if (has_cosine_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cosine_y(), output);
  }

  // optional double cosine_z = 5;
  if (has_cosine_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cosine_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.SatDirCosine)
}

::google::protobuf::uint8* SatDirCosine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.SatDirCosine)
  // optional uint32 sat_prn = 1;
  if (has_sat_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sat_prn(), target);
  }

  // optional uint32 sat_sys = 2;
  if (has_sat_sys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sat_sys(), target);
  }

  // optional double cosine_x = 3;
  if (has_cosine_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cosine_x(), target);
  }

  // optional double cosine_y = 4;
  if (has_cosine_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cosine_y(), target);
  }

  // optional double cosine_z = 5;
  if (has_cosine_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cosine_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.SatDirCosine)
  return target;
}

int SatDirCosine::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.SatDirCosine)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 sat_prn = 1;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional uint32 sat_sys = 2;
    if (has_sat_sys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_sys());
    }

    // optional double cosine_x = 3;
    if (has_cosine_x()) {
      total_size += 1 + 8;
    }

    // optional double cosine_y = 4;
    if (has_cosine_y()) {
      total_size += 1 + 8;
    }

    // optional double cosine_z = 5;
    if (has_cosine_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatDirCosine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.SatDirCosine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SatDirCosine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SatDirCosine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.SatDirCosine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.SatDirCosine)
    MergeFrom(*source);
  }
}

void SatDirCosine::MergeFrom(const SatDirCosine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.SatDirCosine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sat_prn()) {
      set_sat_prn(from.sat_prn());
    }
    if (from.has_sat_sys()) {
      set_sat_sys(from.sat_sys());
    }
    if (from.has_cosine_x()) {
      set_cosine_x(from.cosine_x());
    }
    if (from.has_cosine_y()) {
      set_cosine_y(from.cosine_y());
    }
    if (from.has_cosine_z()) {
      set_cosine_z(from.cosine_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SatDirCosine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.SatDirCosine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatDirCosine::CopyFrom(const SatDirCosine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.SatDirCosine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatDirCosine::IsInitialized() const {

  return true;
}

void SatDirCosine::Swap(SatDirCosine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SatDirCosine::InternalSwap(SatDirCosine* other) {
  std::swap(sat_prn_, other->sat_prn_);
  std::swap(sat_sys_, other->sat_sys_);
  std::swap(cosine_x_, other->cosine_x_);
  std::swap(cosine_y_, other->cosine_y_);
  std::swap(cosine_z_, other->cosine_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SatDirCosine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SatDirCosine_descriptor_;
  metadata.reflection = SatDirCosine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SatDirCosine

// optional uint32 sat_prn = 1;
bool SatDirCosine::has_sat_prn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SatDirCosine::set_has_sat_prn() {
  _has_bits_[0] |= 0x00000001u;
}
void SatDirCosine::clear_has_sat_prn() {
  _has_bits_[0] &= ~0x00000001u;
}
void SatDirCosine::clear_sat_prn() {
  sat_prn_ = 0u;
  clear_has_sat_prn();
}
 ::google::protobuf::uint32 SatDirCosine::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.sat_prn)
  return sat_prn_;
}
 void SatDirCosine::set_sat_prn(::google::protobuf::uint32 value) {
  set_has_sat_prn();
  sat_prn_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.sat_prn)
}

// optional uint32 sat_sys = 2;
bool SatDirCosine::has_sat_sys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SatDirCosine::set_has_sat_sys() {
  _has_bits_[0] |= 0x00000002u;
}
void SatDirCosine::clear_has_sat_sys() {
  _has_bits_[0] &= ~0x00000002u;
}
void SatDirCosine::clear_sat_sys() {
  sat_sys_ = 0u;
  clear_has_sat_sys();
}
 ::google::protobuf::uint32 SatDirCosine::sat_sys() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.sat_sys)
  return sat_sys_;
}
 void SatDirCosine::set_sat_sys(::google::protobuf::uint32 value) {
  set_has_sat_sys();
  sat_sys_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.sat_sys)
}

// optional double cosine_x = 3;
bool SatDirCosine::has_cosine_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SatDirCosine::set_has_cosine_x() {
  _has_bits_[0] |= 0x00000004u;
}
void SatDirCosine::clear_has_cosine_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void SatDirCosine::clear_cosine_x() {
  cosine_x_ = 0;
  clear_has_cosine_x();
}
 double SatDirCosine::cosine_x() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_x)
  return cosine_x_;
}
 void SatDirCosine::set_cosine_x(double value) {
  set_has_cosine_x();
  cosine_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_x)
}

// optional double cosine_y = 4;
bool SatDirCosine::has_cosine_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SatDirCosine::set_has_cosine_y() {
  _has_bits_[0] |= 0x00000008u;
}
void SatDirCosine::clear_has_cosine_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void SatDirCosine::clear_cosine_y() {
  cosine_y_ = 0;
  clear_has_cosine_y();
}
 double SatDirCosine::cosine_y() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_y)
  return cosine_y_;
}
 void SatDirCosine::set_cosine_y(double value) {
  set_has_cosine_y();
  cosine_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_y)
}

// optional double cosine_z = 5;
bool SatDirCosine::has_cosine_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SatDirCosine::set_has_cosine_z() {
  _has_bits_[0] |= 0x00000010u;
}
void SatDirCosine::clear_has_cosine_z() {
  _has_bits_[0] &= ~0x00000010u;
}
void SatDirCosine::clear_cosine_z() {
  cosine_z_ = 0;
  clear_has_cosine_z();
}
 double SatDirCosine::cosine_z() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_z)
  return cosine_z_;
}
 void SatDirCosine::set_cosine_z(double value) {
  set_has_cosine_z();
  cosine_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssPntResult::kReceiverIdFieldNumber;
const int GnssPntResult::kTimeTypeFieldNumber;
const int GnssPntResult::kGnssWeekFieldNumber;
const int GnssPntResult::kGnssSecondSFieldNumber;
const int GnssPntResult::kPntTypeFieldNumber;
const int GnssPntResult::kPosXMFieldNumber;
const int GnssPntResult::kPosYMFieldNumber;
const int GnssPntResult::kPosZMFieldNumber;
const int GnssPntResult::kStdPosXMFieldNumber;
const int GnssPntResult::kStdPosYMFieldNumber;
const int GnssPntResult::kStdPosZMFieldNumber;
const int GnssPntResult::kVelXMFieldNumber;
const int GnssPntResult::kVelYMFieldNumber;
const int GnssPntResult::kVelZMFieldNumber;
const int GnssPntResult::kStdVelXMFieldNumber;
const int GnssPntResult::kStdVelYMFieldNumber;
const int GnssPntResult::kStdVelZMFieldNumber;
const int GnssPntResult::kSovledSatNumFieldNumber;
const int GnssPntResult::kSatDirCosineFieldNumber;
const int GnssPntResult::kPdopFieldNumber;
const int GnssPntResult::kHdopFieldNumber;
const int GnssPntResult::kVdopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssPntResult::GnssPntResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.GnssPntResult)
}

void GnssPntResult::InitAsDefaultInstance() {
}

GnssPntResult::GnssPntResult(const GnssPntResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.GnssPntResult)
}

void GnssPntResult::SharedCtor() {
  _cached_size_ = 0;
  receiver_id_ = 0u;
  time_type_ = 1;
  gnss_week_ = 0u;
  gnss_second_s_ = 0;
  pnt_type_ = 0;
  pos_x_m_ = 0;
  pos_y_m_ = 0;
  pos_z_m_ = 0;
  std_pos_x_m_ = 0;
  std_pos_y_m_ = 0;
  std_pos_z_m_ = 0;
  vel_x_m_ = 0;
  vel_y_m_ = 0;
  vel_z_m_ = 0;
  std_vel_x_m_ = 0;
  std_vel_y_m_ = 0;
  std_vel_z_m_ = 0;
  sovled_sat_num_ = 0u;
  pdop_ = 0;
  hdop_ = 0;
  vdop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GnssPntResult::~GnssPntResult() {
  // @@protoc_insertion_point(destructor:apollo.localization.GnssPntResult)
  SharedDtor();
}

void GnssPntResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GnssPntResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssPntResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssPntResult_descriptor_;
}

const GnssPntResult& GnssPntResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2fgnss_5fpnt_5fresult_2eproto();
  return *default_instance_;
}

GnssPntResult* GnssPntResult::default_instance_ = NULL;

GnssPntResult* GnssPntResult::New(::google::protobuf::Arena* arena) const {
  GnssPntResult* n = new GnssPntResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssPntResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.GnssPntResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GnssPntResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GnssPntResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(gnss_second_s_, pos_z_m_);
    receiver_id_ = 0u;
    time_type_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(std_pos_x_m_, std_vel_y_m_);
  }
  if (_has_bits_[16 / 32] & 3866624u) {
    ZR_(pdop_, sovled_sat_num_);
    std_vel_z_m_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  sat_dir_cosine_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GnssPntResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.GnssPntResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 receiver_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_type;
        break;
      }

      // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
      case 2: {
        if (tag == 16) {
         parse_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_time_type(static_cast< ::apollo::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gnss_week;
        break;
      }

      // optional uint32 gnss_week = 3;
      case 3: {
        if (tag == 24) {
         parse_gnss_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnss_week_)));
          set_has_gnss_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_gnss_second_s;
        break;
      }

      // optional double gnss_second_s = 4;
      case 4: {
        if (tag == 33) {
         parse_gnss_second_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gnss_second_s_)));
          set_has_gnss_second_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pnt_type;
        break;
      }

      // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
      case 5: {
        if (tag == 40) {
         parse_pnt_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::PntType_IsValid(value)) {
            set_pnt_type(static_cast< ::apollo::localization::PntType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_pos_x_m;
        break;
      }

      // optional double pos_x_m = 6;
      case 6: {
        if (tag == 49) {
         parse_pos_x_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_x_m_)));
          set_has_pos_x_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_pos_y_m;
        break;
      }

      // optional double pos_y_m = 7;
      case 7: {
        if (tag == 57) {
         parse_pos_y_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_y_m_)));
          set_has_pos_y_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_pos_z_m;
        break;
      }

      // optional double pos_z_m = 8;
      case 8: {
        if (tag == 65) {
         parse_pos_z_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_z_m_)));
          set_has_pos_z_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_std_pos_x_m;
        break;
      }

      // optional double std_pos_x_m = 9;
      case 9: {
        if (tag == 73) {
         parse_std_pos_x_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_pos_x_m_)));
          set_has_std_pos_x_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_std_pos_y_m;
        break;
      }

      // optional double std_pos_y_m = 10;
      case 10: {
        if (tag == 81) {
         parse_std_pos_y_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_pos_y_m_)));
          set_has_std_pos_y_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_std_pos_z_m;
        break;
      }

      // optional double std_pos_z_m = 11;
      case 11: {
        if (tag == 89) {
         parse_std_pos_z_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_pos_z_m_)));
          set_has_std_pos_z_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_vel_x_m;
        break;
      }

      // optional double vel_x_m = 12;
      case 12: {
        if (tag == 97) {
         parse_vel_x_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_x_m_)));
          set_has_vel_x_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_vel_y_m;
        break;
      }

      // optional double vel_y_m = 13;
      case 13: {
        if (tag == 105) {
         parse_vel_y_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_y_m_)));
          set_has_vel_y_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_vel_z_m;
        break;
      }

      // optional double vel_z_m = 14;
      case 14: {
        if (tag == 113) {
         parse_vel_z_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_z_m_)));
          set_has_vel_z_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_std_vel_x_m;
        break;
      }

      // optional double std_vel_x_m = 15;
      case 15: {
        if (tag == 121) {
         parse_std_vel_x_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_vel_x_m_)));
          set_has_std_vel_x_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_std_vel_y_m;
        break;
      }

      // optional double std_vel_y_m = 16;
      case 16: {
        if (tag == 129) {
         parse_std_vel_y_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_vel_y_m_)));
          set_has_std_vel_y_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_std_vel_z_m;
        break;
      }

      // optional double std_vel_z_m = 17;
      case 17: {
        if (tag == 137) {
         parse_std_vel_z_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_vel_z_m_)));
          set_has_std_vel_z_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_sovled_sat_num;
        break;
      }

      // optional uint32 sovled_sat_num = 18;
      case 18: {
        if (tag == 144) {
         parse_sovled_sat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sovled_sat_num_)));
          set_has_sovled_sat_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_sat_dir_cosine;
        break;
      }

      // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
      case 19: {
        if (tag == 154) {
         parse_sat_dir_cosine:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sat_dir_cosine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sat_dir_cosine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_loop_sat_dir_cosine;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(161)) goto parse_pdop;
        break;
      }

      // optional double pdop = 20;
      case 20: {
        if (tag == 161) {
         parse_pdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
          set_has_pdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_hdop;
        break;
      }

      // optional double hdop = 21;
      case 21: {
        if (tag == 169) {
         parse_hdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
          set_has_hdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_vdop;
        break;
      }

      // optional double vdop = 22;
      case 22: {
        if (tag == 177) {
         parse_vdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
          set_has_vdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.GnssPntResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.GnssPntResult)
  return false;
#undef DO_
}

void GnssPntResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.GnssPntResult)
  // optional uint32 receiver_id = 1;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->receiver_id(), output);
  }

  // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->time_type(), output);
  }

  // optional uint32 gnss_week = 3;
  if (has_gnss_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gnss_week(), output);
  }

  // optional double gnss_second_s = 4;
  if (has_gnss_second_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gnss_second_s(), output);
  }

  // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
  if (has_pnt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pnt_type(), output);
  }

  // optional double pos_x_m = 6;
  if (has_pos_x_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pos_x_m(), output);
  }

  // optional double pos_y_m = 7;
  if (has_pos_y_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pos_y_m(), output);
  }

  // optional double pos_z_m = 8;
  if (has_pos_z_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pos_z_m(), output);
  }

  // optional double std_pos_x_m = 9;
  if (has_std_pos_x_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->std_pos_x_m(), output);
  }

  // optional double std_pos_y_m = 10;
  if (has_std_pos_y_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->std_pos_y_m(), output);
  }

  // optional double std_pos_z_m = 11;
  if (has_std_pos_z_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->std_pos_z_m(), output);
  }

  // optional double vel_x_m = 12;
  if (has_vel_x_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vel_x_m(), output);
  }

  // optional double vel_y_m = 13;
  if (has_vel_y_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->vel_y_m(), output);
  }

  // optional double vel_z_m = 14;
  if (has_vel_z_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->vel_z_m(), output);
  }

  // optional double std_vel_x_m = 15;
  if (has_std_vel_x_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->std_vel_x_m(), output);
  }

  // optional double std_vel_y_m = 16;
  if (has_std_vel_y_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->std_vel_y_m(), output);
  }

  // optional double std_vel_z_m = 17;
  if (has_std_vel_z_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->std_vel_z_m(), output);
  }

  // optional uint32 sovled_sat_num = 18;
  if (has_sovled_sat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sovled_sat_num(), output);
  }

  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  for (unsigned int i = 0, n = this->sat_dir_cosine_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->sat_dir_cosine(i), output);
  }

  // optional double pdop = 20;
  if (has_pdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->pdop(), output);
  }

  // optional double hdop = 21;
  if (has_hdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->hdop(), output);
  }

  // optional double vdop = 22;
  if (has_vdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->vdop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.GnssPntResult)
}

::google::protobuf::uint8* GnssPntResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.GnssPntResult)
  // optional uint32 receiver_id = 1;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->receiver_id(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->time_type(), target);
  }

  // optional uint32 gnss_week = 3;
  if (has_gnss_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gnss_week(), target);
  }

  // optional double gnss_second_s = 4;
  if (has_gnss_second_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gnss_second_s(), target);
  }

  // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
  if (has_pnt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pnt_type(), target);
  }

  // optional double pos_x_m = 6;
  if (has_pos_x_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pos_x_m(), target);
  }

  // optional double pos_y_m = 7;
  if (has_pos_y_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pos_y_m(), target);
  }

  // optional double pos_z_m = 8;
  if (has_pos_z_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pos_z_m(), target);
  }

  // optional double std_pos_x_m = 9;
  if (has_std_pos_x_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->std_pos_x_m(), target);
  }

  // optional double std_pos_y_m = 10;
  if (has_std_pos_y_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->std_pos_y_m(), target);
  }

  // optional double std_pos_z_m = 11;
  if (has_std_pos_z_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->std_pos_z_m(), target);
  }

  // optional double vel_x_m = 12;
  if (has_vel_x_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vel_x_m(), target);
  }

  // optional double vel_y_m = 13;
  if (has_vel_y_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->vel_y_m(), target);
  }

  // optional double vel_z_m = 14;
  if (has_vel_z_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->vel_z_m(), target);
  }

  // optional double std_vel_x_m = 15;
  if (has_std_vel_x_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->std_vel_x_m(), target);
  }

  // optional double std_vel_y_m = 16;
  if (has_std_vel_y_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->std_vel_y_m(), target);
  }

  // optional double std_vel_z_m = 17;
  if (has_std_vel_z_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->std_vel_z_m(), target);
  }

  // optional uint32 sovled_sat_num = 18;
  if (has_sovled_sat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sovled_sat_num(), target);
  }

  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  for (unsigned int i = 0, n = this->sat_dir_cosine_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->sat_dir_cosine(i), false, target);
  }

  // optional double pdop = 20;
  if (has_pdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->pdop(), target);
  }

  // optional double hdop = 21;
  if (has_hdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->hdop(), target);
  }

  // optional double vdop = 22;
  if (has_vdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->vdop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.GnssPntResult)
  return target;
}

int GnssPntResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.GnssPntResult)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 receiver_id = 1;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_id());
    }

    // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_type());
    }

    // optional uint32 gnss_week = 3;
    if (has_gnss_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gnss_week());
    }

    // optional double gnss_second_s = 4;
    if (has_gnss_second_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
    if (has_pnt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pnt_type());
    }

    // optional double pos_x_m = 6;
    if (has_pos_x_m()) {
      total_size += 1 + 8;
    }

    // optional double pos_y_m = 7;
    if (has_pos_y_m()) {
      total_size += 1 + 8;
    }

    // optional double pos_z_m = 8;
    if (has_pos_z_m()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double std_pos_x_m = 9;
    if (has_std_pos_x_m()) {
      total_size += 1 + 8;
    }

    // optional double std_pos_y_m = 10;
    if (has_std_pos_y_m()) {
      total_size += 1 + 8;
    }

    // optional double std_pos_z_m = 11;
    if (has_std_pos_z_m()) {
      total_size += 1 + 8;
    }

    // optional double vel_x_m = 12;
    if (has_vel_x_m()) {
      total_size += 1 + 8;
    }

    // optional double vel_y_m = 13;
    if (has_vel_y_m()) {
      total_size += 1 + 8;
    }

    // optional double vel_z_m = 14;
    if (has_vel_z_m()) {
      total_size += 1 + 8;
    }

    // optional double std_vel_x_m = 15;
    if (has_std_vel_x_m()) {
      total_size += 1 + 8;
    }

    // optional double std_vel_y_m = 16;
    if (has_std_vel_y_m()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 3866624u) {
    // optional double std_vel_z_m = 17;
    if (has_std_vel_z_m()) {
      total_size += 2 + 8;
    }

    // optional uint32 sovled_sat_num = 18;
    if (has_sovled_sat_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sovled_sat_num());
    }

    // optional double pdop = 20;
    if (has_pdop()) {
      total_size += 2 + 8;
    }

    // optional double hdop = 21;
    if (has_hdop()) {
      total_size += 2 + 8;
    }

    // optional double vdop = 22;
    if (has_vdop()) {
      total_size += 2 + 8;
    }

  }
  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  total_size += 2 * this->sat_dir_cosine_size();
  for (int i = 0; i < this->sat_dir_cosine_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sat_dir_cosine(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssPntResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.GnssPntResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GnssPntResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssPntResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.GnssPntResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.GnssPntResult)
    MergeFrom(*source);
  }
}

void GnssPntResult::MergeFrom(const GnssPntResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.GnssPntResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sat_dir_cosine_.MergeFrom(from.sat_dir_cosine_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
    if (from.has_gnss_week()) {
      set_gnss_week(from.gnss_week());
    }
    if (from.has_gnss_second_s()) {
      set_gnss_second_s(from.gnss_second_s());
    }
    if (from.has_pnt_type()) {
      set_pnt_type(from.pnt_type());
    }
    if (from.has_pos_x_m()) {
      set_pos_x_m(from.pos_x_m());
    }
    if (from.has_pos_y_m()) {
      set_pos_y_m(from.pos_y_m());
    }
    if (from.has_pos_z_m()) {
      set_pos_z_m(from.pos_z_m());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_std_pos_x_m()) {
      set_std_pos_x_m(from.std_pos_x_m());
    }
    if (from.has_std_pos_y_m()) {
      set_std_pos_y_m(from.std_pos_y_m());
    }
    if (from.has_std_pos_z_m()) {
      set_std_pos_z_m(from.std_pos_z_m());
    }
    if (from.has_vel_x_m()) {
      set_vel_x_m(from.vel_x_m());
    }
    if (from.has_vel_y_m()) {
      set_vel_y_m(from.vel_y_m());
    }
    if (from.has_vel_z_m()) {
      set_vel_z_m(from.vel_z_m());
    }
    if (from.has_std_vel_x_m()) {
      set_std_vel_x_m(from.std_vel_x_m());
    }
    if (from.has_std_vel_y_m()) {
      set_std_vel_y_m(from.std_vel_y_m());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_std_vel_z_m()) {
      set_std_vel_z_m(from.std_vel_z_m());
    }
    if (from.has_sovled_sat_num()) {
      set_sovled_sat_num(from.sovled_sat_num());
    }
    if (from.has_pdop()) {
      set_pdop(from.pdop());
    }
    if (from.has_hdop()) {
      set_hdop(from.hdop());
    }
    if (from.has_vdop()) {
      set_vdop(from.vdop());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GnssPntResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.GnssPntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssPntResult::CopyFrom(const GnssPntResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.GnssPntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssPntResult::IsInitialized() const {

  return true;
}

void GnssPntResult::Swap(GnssPntResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssPntResult::InternalSwap(GnssPntResult* other) {
  std::swap(receiver_id_, other->receiver_id_);
  std::swap(time_type_, other->time_type_);
  std::swap(gnss_week_, other->gnss_week_);
  std::swap(gnss_second_s_, other->gnss_second_s_);
  std::swap(pnt_type_, other->pnt_type_);
  std::swap(pos_x_m_, other->pos_x_m_);
  std::swap(pos_y_m_, other->pos_y_m_);
  std::swap(pos_z_m_, other->pos_z_m_);
  std::swap(std_pos_x_m_, other->std_pos_x_m_);
  std::swap(std_pos_y_m_, other->std_pos_y_m_);
  std::swap(std_pos_z_m_, other->std_pos_z_m_);
  std::swap(vel_x_m_, other->vel_x_m_);
  std::swap(vel_y_m_, other->vel_y_m_);
  std::swap(vel_z_m_, other->vel_z_m_);
  std::swap(std_vel_x_m_, other->std_vel_x_m_);
  std::swap(std_vel_y_m_, other->std_vel_y_m_);
  std::swap(std_vel_z_m_, other->std_vel_z_m_);
  std::swap(sovled_sat_num_, other->sovled_sat_num_);
  sat_dir_cosine_.UnsafeArenaSwap(&other->sat_dir_cosine_);
  std::swap(pdop_, other->pdop_);
  std::swap(hdop_, other->hdop_);
  std::swap(vdop_, other->vdop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssPntResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GnssPntResult_descriptor_;
  metadata.reflection = GnssPntResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssPntResult

// optional uint32 receiver_id = 1;
bool GnssPntResult::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GnssPntResult::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GnssPntResult::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GnssPntResult::clear_receiver_id() {
  receiver_id_ = 0u;
  clear_has_receiver_id();
}
 ::google::protobuf::uint32 GnssPntResult::receiver_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.receiver_id)
  return receiver_id_;
}
 void GnssPntResult::set_receiver_id(::google::protobuf::uint32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.receiver_id)
}

// optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
bool GnssPntResult::has_time_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GnssPntResult::set_has_time_type() {
  _has_bits_[0] |= 0x00000002u;
}
void GnssPntResult::clear_has_time_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void GnssPntResult::clear_time_type() {
  time_type_ = 1;
  clear_has_time_type();
}
 ::apollo::drivers::gnss::GnssTimeType GnssPntResult::time_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.time_type)
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(time_type_);
}
 void GnssPntResult::set_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_time_type();
  time_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.time_type)
}

// optional uint32 gnss_week = 3;
bool GnssPntResult::has_gnss_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GnssPntResult::set_has_gnss_week() {
  _has_bits_[0] |= 0x00000004u;
}
void GnssPntResult::clear_has_gnss_week() {
  _has_bits_[0] &= ~0x00000004u;
}
void GnssPntResult::clear_gnss_week() {
  gnss_week_ = 0u;
  clear_has_gnss_week();
}
 ::google::protobuf::uint32 GnssPntResult::gnss_week() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.gnss_week)
  return gnss_week_;
}
 void GnssPntResult::set_gnss_week(::google::protobuf::uint32 value) {
  set_has_gnss_week();
  gnss_week_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.gnss_week)
}

// optional double gnss_second_s = 4;
bool GnssPntResult::has_gnss_second_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GnssPntResult::set_has_gnss_second_s() {
  _has_bits_[0] |= 0x00000008u;
}
void GnssPntResult::clear_has_gnss_second_s() {
  _has_bits_[0] &= ~0x00000008u;
}
void GnssPntResult::clear_gnss_second_s() {
  gnss_second_s_ = 0;
  clear_has_gnss_second_s();
}
 double GnssPntResult::gnss_second_s() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.gnss_second_s)
  return gnss_second_s_;
}
 void GnssPntResult::set_gnss_second_s(double value) {
  set_has_gnss_second_s();
  gnss_second_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.gnss_second_s)
}

// optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
bool GnssPntResult::has_pnt_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GnssPntResult::set_has_pnt_type() {
  _has_bits_[0] |= 0x00000010u;
}
void GnssPntResult::clear_has_pnt_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void GnssPntResult::clear_pnt_type() {
  pnt_type_ = 0;
  clear_has_pnt_type();
}
 ::apollo::localization::PntType GnssPntResult::pnt_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pnt_type)
  return static_cast< ::apollo::localization::PntType >(pnt_type_);
}
 void GnssPntResult::set_pnt_type(::apollo::localization::PntType value) {
  assert(::apollo::localization::PntType_IsValid(value));
  set_has_pnt_type();
  pnt_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pnt_type)
}

// optional double pos_x_m = 6;
bool GnssPntResult::has_pos_x_m() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GnssPntResult::set_has_pos_x_m() {
  _has_bits_[0] |= 0x00000020u;
}
void GnssPntResult::clear_has_pos_x_m() {
  _has_bits_[0] &= ~0x00000020u;
}
void GnssPntResult::clear_pos_x_m() {
  pos_x_m_ = 0;
  clear_has_pos_x_m();
}
 double GnssPntResult::pos_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_x_m)
  return pos_x_m_;
}
 void GnssPntResult::set_pos_x_m(double value) {
  set_has_pos_x_m();
  pos_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_x_m)
}

// optional double pos_y_m = 7;
bool GnssPntResult::has_pos_y_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GnssPntResult::set_has_pos_y_m() {
  _has_bits_[0] |= 0x00000040u;
}
void GnssPntResult::clear_has_pos_y_m() {
  _has_bits_[0] &= ~0x00000040u;
}
void GnssPntResult::clear_pos_y_m() {
  pos_y_m_ = 0;
  clear_has_pos_y_m();
}
 double GnssPntResult::pos_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_y_m)
  return pos_y_m_;
}
 void GnssPntResult::set_pos_y_m(double value) {
  set_has_pos_y_m();
  pos_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_y_m)
}

// optional double pos_z_m = 8;
bool GnssPntResult::has_pos_z_m() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GnssPntResult::set_has_pos_z_m() {
  _has_bits_[0] |= 0x00000080u;
}
void GnssPntResult::clear_has_pos_z_m() {
  _has_bits_[0] &= ~0x00000080u;
}
void GnssPntResult::clear_pos_z_m() {
  pos_z_m_ = 0;
  clear_has_pos_z_m();
}
 double GnssPntResult::pos_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_z_m)
  return pos_z_m_;
}
 void GnssPntResult::set_pos_z_m(double value) {
  set_has_pos_z_m();
  pos_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_z_m)
}

// optional double std_pos_x_m = 9;
bool GnssPntResult::has_std_pos_x_m() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GnssPntResult::set_has_std_pos_x_m() {
  _has_bits_[0] |= 0x00000100u;
}
void GnssPntResult::clear_has_std_pos_x_m() {
  _has_bits_[0] &= ~0x00000100u;
}
void GnssPntResult::clear_std_pos_x_m() {
  std_pos_x_m_ = 0;
  clear_has_std_pos_x_m();
}
 double GnssPntResult::std_pos_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_x_m)
  return std_pos_x_m_;
}
 void GnssPntResult::set_std_pos_x_m(double value) {
  set_has_std_pos_x_m();
  std_pos_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_x_m)
}

// optional double std_pos_y_m = 10;
bool GnssPntResult::has_std_pos_y_m() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GnssPntResult::set_has_std_pos_y_m() {
  _has_bits_[0] |= 0x00000200u;
}
void GnssPntResult::clear_has_std_pos_y_m() {
  _has_bits_[0] &= ~0x00000200u;
}
void GnssPntResult::clear_std_pos_y_m() {
  std_pos_y_m_ = 0;
  clear_has_std_pos_y_m();
}
 double GnssPntResult::std_pos_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_y_m)
  return std_pos_y_m_;
}
 void GnssPntResult::set_std_pos_y_m(double value) {
  set_has_std_pos_y_m();
  std_pos_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_y_m)
}

// optional double std_pos_z_m = 11;
bool GnssPntResult::has_std_pos_z_m() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GnssPntResult::set_has_std_pos_z_m() {
  _has_bits_[0] |= 0x00000400u;
}
void GnssPntResult::clear_has_std_pos_z_m() {
  _has_bits_[0] &= ~0x00000400u;
}
void GnssPntResult::clear_std_pos_z_m() {
  std_pos_z_m_ = 0;
  clear_has_std_pos_z_m();
}
 double GnssPntResult::std_pos_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_z_m)
  return std_pos_z_m_;
}
 void GnssPntResult::set_std_pos_z_m(double value) {
  set_has_std_pos_z_m();
  std_pos_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_z_m)
}

// optional double vel_x_m = 12;
bool GnssPntResult::has_vel_x_m() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GnssPntResult::set_has_vel_x_m() {
  _has_bits_[0] |= 0x00000800u;
}
void GnssPntResult::clear_has_vel_x_m() {
  _has_bits_[0] &= ~0x00000800u;
}
void GnssPntResult::clear_vel_x_m() {
  vel_x_m_ = 0;
  clear_has_vel_x_m();
}
 double GnssPntResult::vel_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_x_m)
  return vel_x_m_;
}
 void GnssPntResult::set_vel_x_m(double value) {
  set_has_vel_x_m();
  vel_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_x_m)
}

// optional double vel_y_m = 13;
bool GnssPntResult::has_vel_y_m() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GnssPntResult::set_has_vel_y_m() {
  _has_bits_[0] |= 0x00001000u;
}
void GnssPntResult::clear_has_vel_y_m() {
  _has_bits_[0] &= ~0x00001000u;
}
void GnssPntResult::clear_vel_y_m() {
  vel_y_m_ = 0;
  clear_has_vel_y_m();
}
 double GnssPntResult::vel_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_y_m)
  return vel_y_m_;
}
 void GnssPntResult::set_vel_y_m(double value) {
  set_has_vel_y_m();
  vel_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_y_m)
}

// optional double vel_z_m = 14;
bool GnssPntResult::has_vel_z_m() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GnssPntResult::set_has_vel_z_m() {
  _has_bits_[0] |= 0x00002000u;
}
void GnssPntResult::clear_has_vel_z_m() {
  _has_bits_[0] &= ~0x00002000u;
}
void GnssPntResult::clear_vel_z_m() {
  vel_z_m_ = 0;
  clear_has_vel_z_m();
}
 double GnssPntResult::vel_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_z_m)
  return vel_z_m_;
}
 void GnssPntResult::set_vel_z_m(double value) {
  set_has_vel_z_m();
  vel_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_z_m)
}

// optional double std_vel_x_m = 15;
bool GnssPntResult::has_std_vel_x_m() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GnssPntResult::set_has_std_vel_x_m() {
  _has_bits_[0] |= 0x00004000u;
}
void GnssPntResult::clear_has_std_vel_x_m() {
  _has_bits_[0] &= ~0x00004000u;
}
void GnssPntResult::clear_std_vel_x_m() {
  std_vel_x_m_ = 0;
  clear_has_std_vel_x_m();
}
 double GnssPntResult::std_vel_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_x_m)
  return std_vel_x_m_;
}
 void GnssPntResult::set_std_vel_x_m(double value) {
  set_has_std_vel_x_m();
  std_vel_x_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_x_m)
}

// optional double std_vel_y_m = 16;
bool GnssPntResult::has_std_vel_y_m() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GnssPntResult::set_has_std_vel_y_m() {
  _has_bits_[0] |= 0x00008000u;
}
void GnssPntResult::clear_has_std_vel_y_m() {
  _has_bits_[0] &= ~0x00008000u;
}
void GnssPntResult::clear_std_vel_y_m() {
  std_vel_y_m_ = 0;
  clear_has_std_vel_y_m();
}
 double GnssPntResult::std_vel_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_y_m)
  return std_vel_y_m_;
}
 void GnssPntResult::set_std_vel_y_m(double value) {
  set_has_std_vel_y_m();
  std_vel_y_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_y_m)
}

// optional double std_vel_z_m = 17;
bool GnssPntResult::has_std_vel_z_m() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void GnssPntResult::set_has_std_vel_z_m() {
  _has_bits_[0] |= 0x00010000u;
}
void GnssPntResult::clear_has_std_vel_z_m() {
  _has_bits_[0] &= ~0x00010000u;
}
void GnssPntResult::clear_std_vel_z_m() {
  std_vel_z_m_ = 0;
  clear_has_std_vel_z_m();
}
 double GnssPntResult::std_vel_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_z_m)
  return std_vel_z_m_;
}
 void GnssPntResult::set_std_vel_z_m(double value) {
  set_has_std_vel_z_m();
  std_vel_z_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_z_m)
}

// optional uint32 sovled_sat_num = 18;
bool GnssPntResult::has_sovled_sat_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void GnssPntResult::set_has_sovled_sat_num() {
  _has_bits_[0] |= 0x00020000u;
}
void GnssPntResult::clear_has_sovled_sat_num() {
  _has_bits_[0] &= ~0x00020000u;
}
void GnssPntResult::clear_sovled_sat_num() {
  sovled_sat_num_ = 0u;
  clear_has_sovled_sat_num();
}
 ::google::protobuf::uint32 GnssPntResult::sovled_sat_num() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.sovled_sat_num)
  return sovled_sat_num_;
}
 void GnssPntResult::set_sovled_sat_num(::google::protobuf::uint32 value) {
  set_has_sovled_sat_num();
  sovled_sat_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.sovled_sat_num)
}

// repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
int GnssPntResult::sat_dir_cosine_size() const {
  return sat_dir_cosine_.size();
}
void GnssPntResult::clear_sat_dir_cosine() {
  sat_dir_cosine_.Clear();
}
const ::apollo::localization::SatDirCosine& GnssPntResult::sat_dir_cosine(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_.Get(index);
}
::apollo::localization::SatDirCosine* GnssPntResult::mutable_sat_dir_cosine(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_.Mutable(index);
}
::apollo::localization::SatDirCosine* GnssPntResult::add_sat_dir_cosine() {
  // @@protoc_insertion_point(field_add:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::localization::SatDirCosine >*
GnssPntResult::mutable_sat_dir_cosine() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.GnssPntResult.sat_dir_cosine)
  return &sat_dir_cosine_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::localization::SatDirCosine >&
GnssPntResult::sat_dir_cosine() const {
  // @@protoc_insertion_point(field_list:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_;
}

// optional double pdop = 20;
bool GnssPntResult::has_pdop() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void GnssPntResult::set_has_pdop() {
  _has_bits_[0] |= 0x00080000u;
}
void GnssPntResult::clear_has_pdop() {
  _has_bits_[0] &= ~0x00080000u;
}
void GnssPntResult::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
 double GnssPntResult::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pdop)
  return pdop_;
}
 void GnssPntResult::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pdop)
}

// optional double hdop = 21;
bool GnssPntResult::has_hdop() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void GnssPntResult::set_has_hdop() {
  _has_bits_[0] |= 0x00100000u;
}
void GnssPntResult::clear_has_hdop() {
  _has_bits_[0] &= ~0x00100000u;
}
void GnssPntResult::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
 double GnssPntResult::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.hdop)
  return hdop_;
}
 void GnssPntResult::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.hdop)
}

// optional double vdop = 22;
bool GnssPntResult::has_vdop() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void GnssPntResult::set_has_vdop() {
  _has_bits_[0] |= 0x00200000u;
}
void GnssPntResult::clear_has_vdop() {
  _has_bits_[0] &= ~0x00200000u;
}
void GnssPntResult::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
 double GnssPntResult::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vdop)
  return vdop_;
}
 void GnssPntResult::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vdop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
