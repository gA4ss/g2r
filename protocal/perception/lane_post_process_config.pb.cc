// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/lane_post_process_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/lane_post_process_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace lane_post_process_config {

namespace {

const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/lane_post_process_config.proto");
  GOOGLE_CHECK(file != NULL);
  ModelConfigs_descriptor_ = file->message_type(0);
  static const int ModelConfigs_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, space_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, roi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_non_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, non_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lane_map_confidence_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, cc_split_siz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, cc_split_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_cc_pixel_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_cc_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_y_search_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_y_search_offset_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_min_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_min_distance_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_distance_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_distance_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_deviation_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_deviation_angle_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_deviation_angle_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_departure_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_departure_distance_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_departure_distance_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_relative_orie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_max_relative_orie_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_relative_orie_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_min_orientation_estimation_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, assoc_min_orientation_estimation_size_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_cc_marker_match_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, slide_window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, slide_window_size_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, slide_window_max_point_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_group_prediction_marker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, orientation_estimation_skip_marker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lane_interval_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_instance_size_prefiltered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_instance_size_prefiltered_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_size_to_fit_straight_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_size_to_fit_straight_line_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, online_pitch_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, ground_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_distance_to_see_for_transformer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lane_map_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, start_y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lane_map_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lane_map_height_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2flane_5fpost_5fprocess_5fconfig_2eproto() {
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
}

void protobuf_AddDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)perception/lane_post_process_config.pr"
    "oto\022*apollo.perception.lane_post_process"
    "_config\"\334\r\n\014ModelConfigs\022\014\n\004name\030\001 \001(\t\022\017"
    "\n\007version\030\002 \001(\t\022\022\n\nspace_type\030\003 \001(\t\022\023\n\013i"
    "mage_width\030\004 \001(\005\022\024\n\014image_height\030\005 \001(\005\022\013"
    "\n\003roi\030\006 \003(\002\022\024\n\014use_non_mask\030\007 \001(\010\022\020\n\010non"
    "_mask\030\010 \003(\002\022(\n\032lane_map_confidence_thres"
    "h\030\t \001(\002:\0040.95\022\030\n\014cc_split_siz\030\n \001(\002:\00250\022"
    "\030\n\014cc_split_len\030\013 \001(\005:\00225\022\034\n\020min_cc_pixe"
    "l_num\030\014 \001(\005:\00210\022\026\n\013min_cc_size\030\r \001(\005:\0015\022"
    " \n\023min_y_search_offset\030\016 \001(\002:\0030.5\022&\n\031min"
    "_y_search_offset_image\030\017 \001(\002:\0030.5\022\024\n\014ass"
    "oc_method\030\020 \001(\t\022 \n\022assoc_min_distance\030\021 "
    "\001(\002:\004-0.5\022$\n\030assoc_min_distance_image\030\022 "
    "\001(\002:\002-3\022\036\n\022assoc_max_distance\030\023 \001(\002:\00260\022"
    "%\n\030assoc_max_distance_image\030\024 \001(\002:\003400\022\""
    "\n\025assoc_distance_weight\030\025 \001(\002:\0030.4\022%\n\031as"
    "soc_max_deviation_angle\030\026 \001(\002:\00215\022+\n\037ass"
    "oc_max_deviation_angle_image\030\027 \001(\002:\00245\022)"
    "\n\034assoc_deviation_angle_weight\030\030 \001(\002:\0030."
    "2\022\'\n\034assoc_max_departure_distance\030\031 \001(\002:"
    "\0013\022.\n\"assoc_max_departure_distance_image"
    "\030\032 \001(\002:\00280\022,\n\037assoc_departure_distance_w"
    "eight\030\033 \001(\002:\0030.2\022#\n\027assoc_max_relative_o"
    "rie\030\034 \001(\002:\00215\022)\n\035assoc_max_relative_orie"
    "_image\030\035 \001(\002:\00245\022\'\n\032assoc_relative_orie_"
    "weight\030\036 \001(\002:\0030.2\0220\n%assoc_min_orientati"
    "on_estimation_size\030\037 \001(\002:\0013\0227\n+assoc_min"
    "_orientation_estimation_size_image\030  \001(\002"
    ":\00210\022\"\n\027max_cc_marker_match_num\030! \001(\005:\0011"
    "\022\035\n\021slide_window_size\030\" \001(\002:\00215\022$\n\027slide"
    "_window_size_image\030# \001(\002:\003200\022%\n\032slide_w"
    "indow_max_point_num\030$ \001(\005:\0013\022*\n\037max_grou"
    "p_prediction_marker_num\030% \001(\005:\0013\0221\n&orie"
    "ntation_estimation_skip_marker_num\030& \001(\005"
    ":\0011\022!\n\026lane_interval_distance\030\' \001(\002:\0014\022("
    "\n\035min_instance_size_prefiltered\030( \001(\002:\0013"
    "\022/\n#min_instance_size_prefiltered_image\030"
    ") \001(\002:\00220\022)\n\035max_size_to_fit_straight_li"
    "ne\030* \001(\002:\00210\0220\n#max_size_to_fit_straight"
    "_line_image\030+ \001(\002:\003300\022 \n\022online_pitch_a"
    "ngle\030, \001(\002:\004-2.5\022\032\n\rground_height\030- \001(\002:"
    "\0031.6\0220\n#max_distance_to_see_for_transfor"
    "mer\030. \001(\002:\003500\022\031\n\016lane_map_scale\030/ \001(\002:\001"
    "2\022\030\n\013start_y_pos\0300 \001(\005:\003312\022\033\n\016lane_map_"
    "width\0301 \001(\005:\003960\022\034\n\017lane_map_height\0302 \001("
    "\005:\003384", 1846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/lane_post_process_config.proto", &protobuf_RegisterTypes);
  ModelConfigs::default_instance_ = new ModelConfigs();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2flane_5fpost_5fprocess_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2flane_5fpost_5fprocess_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2flane_5fpost_5fprocess_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2flane_5fpost_5fprocess_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kSpaceTypeFieldNumber;
const int ModelConfigs::kImageWidthFieldNumber;
const int ModelConfigs::kImageHeightFieldNumber;
const int ModelConfigs::kRoiFieldNumber;
const int ModelConfigs::kUseNonMaskFieldNumber;
const int ModelConfigs::kNonMaskFieldNumber;
const int ModelConfigs::kLaneMapConfidenceThreshFieldNumber;
const int ModelConfigs::kCcSplitSizFieldNumber;
const int ModelConfigs::kCcSplitLenFieldNumber;
const int ModelConfigs::kMinCcPixelNumFieldNumber;
const int ModelConfigs::kMinCcSizeFieldNumber;
const int ModelConfigs::kMinYSearchOffsetFieldNumber;
const int ModelConfigs::kMinYSearchOffsetImageFieldNumber;
const int ModelConfigs::kAssocMethodFieldNumber;
const int ModelConfigs::kAssocMinDistanceFieldNumber;
const int ModelConfigs::kAssocMinDistanceImageFieldNumber;
const int ModelConfigs::kAssocMaxDistanceFieldNumber;
const int ModelConfigs::kAssocMaxDistanceImageFieldNumber;
const int ModelConfigs::kAssocDistanceWeightFieldNumber;
const int ModelConfigs::kAssocMaxDeviationAngleFieldNumber;
const int ModelConfigs::kAssocMaxDeviationAngleImageFieldNumber;
const int ModelConfigs::kAssocDeviationAngleWeightFieldNumber;
const int ModelConfigs::kAssocMaxDepartureDistanceFieldNumber;
const int ModelConfigs::kAssocMaxDepartureDistanceImageFieldNumber;
const int ModelConfigs::kAssocDepartureDistanceWeightFieldNumber;
const int ModelConfigs::kAssocMaxRelativeOrieFieldNumber;
const int ModelConfigs::kAssocMaxRelativeOrieImageFieldNumber;
const int ModelConfigs::kAssocRelativeOrieWeightFieldNumber;
const int ModelConfigs::kAssocMinOrientationEstimationSizeFieldNumber;
const int ModelConfigs::kAssocMinOrientationEstimationSizeImageFieldNumber;
const int ModelConfigs::kMaxCcMarkerMatchNumFieldNumber;
const int ModelConfigs::kSlideWindowSizeFieldNumber;
const int ModelConfigs::kSlideWindowSizeImageFieldNumber;
const int ModelConfigs::kSlideWindowMaxPointNumFieldNumber;
const int ModelConfigs::kMaxGroupPredictionMarkerNumFieldNumber;
const int ModelConfigs::kOrientationEstimationSkipMarkerNumFieldNumber;
const int ModelConfigs::kLaneIntervalDistanceFieldNumber;
const int ModelConfigs::kMinInstanceSizePrefilteredFieldNumber;
const int ModelConfigs::kMinInstanceSizePrefilteredImageFieldNumber;
const int ModelConfigs::kMaxSizeToFitStraightLineFieldNumber;
const int ModelConfigs::kMaxSizeToFitStraightLineImageFieldNumber;
const int ModelConfigs::kOnlinePitchAngleFieldNumber;
const int ModelConfigs::kGroundHeightFieldNumber;
const int ModelConfigs::kMaxDistanceToSeeForTransformerFieldNumber;
const int ModelConfigs::kLaneMapScaleFieldNumber;
const int ModelConfigs::kStartYPosFieldNumber;
const int ModelConfigs::kLaneMapWidthFieldNumber;
const int ModelConfigs::kLaneMapHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lane_post_process_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lane_post_process_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_width_ = 0;
  image_height_ = 0;
  use_non_mask_ = false;
  lane_map_confidence_thresh_ = 0.95f;
  cc_split_siz_ = 50;
  cc_split_len_ = 25;
  min_cc_pixel_num_ = 10;
  min_cc_size_ = 5;
  min_y_search_offset_ = 0.5f;
  min_y_search_offset_image_ = 0.5f;
  assoc_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assoc_min_distance_ = -0.5f;
  assoc_min_distance_image_ = -3;
  assoc_max_distance_ = 60;
  assoc_max_distance_image_ = 400;
  assoc_distance_weight_ = 0.4f;
  assoc_max_deviation_angle_ = 15;
  assoc_max_deviation_angle_image_ = 45;
  assoc_deviation_angle_weight_ = 0.2f;
  assoc_max_departure_distance_ = 3;
  assoc_max_departure_distance_image_ = 80;
  assoc_departure_distance_weight_ = 0.2f;
  assoc_max_relative_orie_ = 15;
  assoc_max_relative_orie_image_ = 45;
  assoc_relative_orie_weight_ = 0.2f;
  assoc_min_orientation_estimation_size_ = 3;
  assoc_min_orientation_estimation_size_image_ = 10;
  max_cc_marker_match_num_ = 1;
  slide_window_size_ = 15;
  slide_window_size_image_ = 200;
  slide_window_max_point_num_ = 3;
  max_group_prediction_marker_num_ = 3;
  orientation_estimation_skip_marker_num_ = 1;
  lane_interval_distance_ = 4;
  min_instance_size_prefiltered_ = 3;
  min_instance_size_prefiltered_image_ = 20;
  max_size_to_fit_straight_line_ = 10;
  max_size_to_fit_straight_line_image_ = 300;
  online_pitch_angle_ = -2.5f;
  ground_height_ = 1.6f;
  max_distance_to_see_for_transformer_ = 500;
  lane_map_scale_ = 2;
  start_y_pos_ = 312;
  lane_map_width_ = 960;
  lane_map_height_ = 384;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.lane_post_process_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assoc_method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2flane_5fpost_5fprocess_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lane_post_process_config.ModelConfigs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ModelConfigs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModelConfigs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 95u) {
    ZR_(image_width_, image_height_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_space_type()) {
      space_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    use_non_mask_ = false;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    lane_map_confidence_thresh_ = 0.95f;
    cc_split_siz_ = 50;
    cc_split_len_ = 25;
    min_cc_pixel_num_ = 10;
    min_cc_size_ = 5;
    min_y_search_offset_ = 0.5f;
    min_y_search_offset_image_ = 0.5f;
    if (has_assoc_method()) {
      assoc_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    assoc_min_distance_ = -0.5f;
    assoc_min_distance_image_ = -3;
    assoc_max_distance_ = 60;
    assoc_max_distance_image_ = 400;
    assoc_distance_weight_ = 0.4f;
    assoc_max_deviation_angle_ = 15;
    assoc_max_deviation_angle_image_ = 45;
    assoc_deviation_angle_weight_ = 0.2f;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    assoc_max_departure_distance_ = 3;
    assoc_max_departure_distance_image_ = 80;
    assoc_departure_distance_weight_ = 0.2f;
    assoc_max_relative_orie_ = 15;
    assoc_max_relative_orie_image_ = 45;
    assoc_relative_orie_weight_ = 0.2f;
    assoc_min_orientation_estimation_size_ = 3;
    assoc_min_orientation_estimation_size_image_ = 10;
  }
  if (_has_bits_[32 / 32] & 255u) {
    max_cc_marker_match_num_ = 1;
    slide_window_size_ = 15;
    slide_window_size_image_ = 200;
    slide_window_max_point_num_ = 3;
    max_group_prediction_marker_num_ = 3;
    orientation_estimation_skip_marker_num_ = 1;
    lane_interval_distance_ = 4;
    min_instance_size_prefiltered_ = 3;
  }
  if (_has_bits_[40 / 32] & 65280u) {
    min_instance_size_prefiltered_image_ = 20;
    max_size_to_fit_straight_line_ = 10;
    max_size_to_fit_straight_line_image_ = 300;
    online_pitch_angle_ = -2.5f;
    ground_height_ = 1.6f;
    max_distance_to_see_for_transformer_ = 500;
    lane_map_scale_ = 2;
    start_y_pos_ = 312;
  }
  if (_has_bits_[48 / 32] & 196608u) {
    lane_map_width_ = 960;
    lane_map_height_ = 384;
  }

#undef ZR_HELPER_
#undef ZR_

  roi_.Clear();
  non_mask_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lane_post_process_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lane_post_process_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lane_post_process_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_space_type;
        break;
      }

      // optional string space_type = 3;
      case 3: {
        if (tag == 26) {
         parse_space_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_space_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->space_type().data(), this->space_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lane_post_process_config.ModelConfigs.space_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_image_width;
        break;
      }

      // optional int32 image_width = 4;
      case 4: {
        if (tag == 32) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));
          set_has_image_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image_height;
        break;
      }

      // optional int32 image_height = 5;
      case 5: {
        if (tag == 40) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));
          set_has_image_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_roi;
        break;
      }

      // repeated float roi = 6;
      case 6: {
        if (tag == 53) {
         parse_roi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_roi())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_roi())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_roi;
        if (input->ExpectTag(56)) goto parse_use_non_mask;
        break;
      }

      // optional bool use_non_mask = 7;
      case 7: {
        if (tag == 56) {
         parse_use_non_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_non_mask_)));
          set_has_use_non_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_non_mask;
        break;
      }

      // repeated float non_mask = 8;
      case 8: {
        if (tag == 69) {
         parse_non_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_non_mask())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_non_mask())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_non_mask;
        if (input->ExpectTag(77)) goto parse_lane_map_confidence_thresh;
        break;
      }

      // optional float lane_map_confidence_thresh = 9 [default = 0.95];
      case 9: {
        if (tag == 77) {
         parse_lane_map_confidence_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_map_confidence_thresh_)));
          set_has_lane_map_confidence_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_cc_split_siz;
        break;
      }

      // optional float cc_split_siz = 10 [default = 50];
      case 10: {
        if (tag == 85) {
         parse_cc_split_siz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cc_split_siz_)));
          set_has_cc_split_siz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cc_split_len;
        break;
      }

      // optional int32 cc_split_len = 11 [default = 25];
      case 11: {
        if (tag == 88) {
         parse_cc_split_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cc_split_len_)));
          set_has_cc_split_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_min_cc_pixel_num;
        break;
      }

      // optional int32 min_cc_pixel_num = 12 [default = 10];
      case 12: {
        if (tag == 96) {
         parse_min_cc_pixel_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_cc_pixel_num_)));
          set_has_min_cc_pixel_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_min_cc_size;
        break;
      }

      // optional int32 min_cc_size = 13 [default = 5];
      case 13: {
        if (tag == 104) {
         parse_min_cc_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_cc_size_)));
          set_has_min_cc_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_min_y_search_offset;
        break;
      }

      // optional float min_y_search_offset = 14 [default = 0.5];
      case 14: {
        if (tag == 117) {
         parse_min_y_search_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_y_search_offset_)));
          set_has_min_y_search_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_min_y_search_offset_image;
        break;
      }

      // optional float min_y_search_offset_image = 15 [default = 0.5];
      case 15: {
        if (tag == 125) {
         parse_min_y_search_offset_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_y_search_offset_image_)));
          set_has_min_y_search_offset_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_assoc_method;
        break;
      }

      // optional string assoc_method = 16;
      case 16: {
        if (tag == 130) {
         parse_assoc_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assoc_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assoc_method().data(), this->assoc_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lane_post_process_config.ModelConfigs.assoc_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_assoc_min_distance;
        break;
      }

      // optional float assoc_min_distance = 17 [default = -0.5];
      case 17: {
        if (tag == 141) {
         parse_assoc_min_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_min_distance_)));
          set_has_assoc_min_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_assoc_min_distance_image;
        break;
      }

      // optional float assoc_min_distance_image = 18 [default = -3];
      case 18: {
        if (tag == 149) {
         parse_assoc_min_distance_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_min_distance_image_)));
          set_has_assoc_min_distance_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_assoc_max_distance;
        break;
      }

      // optional float assoc_max_distance = 19 [default = 60];
      case 19: {
        if (tag == 157) {
         parse_assoc_max_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_distance_)));
          set_has_assoc_max_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_assoc_max_distance_image;
        break;
      }

      // optional float assoc_max_distance_image = 20 [default = 400];
      case 20: {
        if (tag == 165) {
         parse_assoc_max_distance_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_distance_image_)));
          set_has_assoc_max_distance_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_assoc_distance_weight;
        break;
      }

      // optional float assoc_distance_weight = 21 [default = 0.4];
      case 21: {
        if (tag == 173) {
         parse_assoc_distance_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_distance_weight_)));
          set_has_assoc_distance_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_assoc_max_deviation_angle;
        break;
      }

      // optional float assoc_max_deviation_angle = 22 [default = 15];
      case 22: {
        if (tag == 181) {
         parse_assoc_max_deviation_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_deviation_angle_)));
          set_has_assoc_max_deviation_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_assoc_max_deviation_angle_image;
        break;
      }

      // optional float assoc_max_deviation_angle_image = 23 [default = 45];
      case 23: {
        if (tag == 189) {
         parse_assoc_max_deviation_angle_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_deviation_angle_image_)));
          set_has_assoc_max_deviation_angle_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_assoc_deviation_angle_weight;
        break;
      }

      // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
      case 24: {
        if (tag == 197) {
         parse_assoc_deviation_angle_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_deviation_angle_weight_)));
          set_has_assoc_deviation_angle_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_assoc_max_departure_distance;
        break;
      }

      // optional float assoc_max_departure_distance = 25 [default = 3];
      case 25: {
        if (tag == 205) {
         parse_assoc_max_departure_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_departure_distance_)));
          set_has_assoc_max_departure_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_assoc_max_departure_distance_image;
        break;
      }

      // optional float assoc_max_departure_distance_image = 26 [default = 80];
      case 26: {
        if (tag == 213) {
         parse_assoc_max_departure_distance_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_departure_distance_image_)));
          set_has_assoc_max_departure_distance_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_assoc_departure_distance_weight;
        break;
      }

      // optional float assoc_departure_distance_weight = 27 [default = 0.2];
      case 27: {
        if (tag == 221) {
         parse_assoc_departure_distance_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_departure_distance_weight_)));
          set_has_assoc_departure_distance_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_assoc_max_relative_orie;
        break;
      }

      // optional float assoc_max_relative_orie = 28 [default = 15];
      case 28: {
        if (tag == 229) {
         parse_assoc_max_relative_orie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_relative_orie_)));
          set_has_assoc_max_relative_orie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_assoc_max_relative_orie_image;
        break;
      }

      // optional float assoc_max_relative_orie_image = 29 [default = 45];
      case 29: {
        if (tag == 237) {
         parse_assoc_max_relative_orie_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_max_relative_orie_image_)));
          set_has_assoc_max_relative_orie_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_assoc_relative_orie_weight;
        break;
      }

      // optional float assoc_relative_orie_weight = 30 [default = 0.2];
      case 30: {
        if (tag == 245) {
         parse_assoc_relative_orie_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_relative_orie_weight_)));
          set_has_assoc_relative_orie_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_assoc_min_orientation_estimation_size;
        break;
      }

      // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
      case 31: {
        if (tag == 253) {
         parse_assoc_min_orientation_estimation_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_min_orientation_estimation_size_)));
          set_has_assoc_min_orientation_estimation_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_assoc_min_orientation_estimation_size_image;
        break;
      }

      // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
      case 32: {
        if (tag == 261) {
         parse_assoc_min_orientation_estimation_size_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assoc_min_orientation_estimation_size_image_)));
          set_has_assoc_min_orientation_estimation_size_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_max_cc_marker_match_num;
        break;
      }

      // optional int32 max_cc_marker_match_num = 33 [default = 1];
      case 33: {
        if (tag == 264) {
         parse_max_cc_marker_match_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cc_marker_match_num_)));
          set_has_max_cc_marker_match_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_slide_window_size;
        break;
      }

      // optional float slide_window_size = 34 [default = 15];
      case 34: {
        if (tag == 277) {
         parse_slide_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slide_window_size_)));
          set_has_slide_window_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_slide_window_size_image;
        break;
      }

      // optional float slide_window_size_image = 35 [default = 200];
      case 35: {
        if (tag == 285) {
         parse_slide_window_size_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slide_window_size_image_)));
          set_has_slide_window_size_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_slide_window_max_point_num;
        break;
      }

      // optional int32 slide_window_max_point_num = 36 [default = 3];
      case 36: {
        if (tag == 288) {
         parse_slide_window_max_point_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slide_window_max_point_num_)));
          set_has_slide_window_max_point_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_max_group_prediction_marker_num;
        break;
      }

      // optional int32 max_group_prediction_marker_num = 37 [default = 3];
      case 37: {
        if (tag == 296) {
         parse_max_group_prediction_marker_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_group_prediction_marker_num_)));
          set_has_max_group_prediction_marker_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_orientation_estimation_skip_marker_num;
        break;
      }

      // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
      case 38: {
        if (tag == 304) {
         parse_orientation_estimation_skip_marker_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_estimation_skip_marker_num_)));
          set_has_orientation_estimation_skip_marker_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_lane_interval_distance;
        break;
      }

      // optional float lane_interval_distance = 39 [default = 4];
      case 39: {
        if (tag == 317) {
         parse_lane_interval_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_interval_distance_)));
          set_has_lane_interval_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_min_instance_size_prefiltered;
        break;
      }

      // optional float min_instance_size_prefiltered = 40 [default = 3];
      case 40: {
        if (tag == 325) {
         parse_min_instance_size_prefiltered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_instance_size_prefiltered_)));
          set_has_min_instance_size_prefiltered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_min_instance_size_prefiltered_image;
        break;
      }

      // optional float min_instance_size_prefiltered_image = 41 [default = 20];
      case 41: {
        if (tag == 333) {
         parse_min_instance_size_prefiltered_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_instance_size_prefiltered_image_)));
          set_has_min_instance_size_prefiltered_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_max_size_to_fit_straight_line;
        break;
      }

      // optional float max_size_to_fit_straight_line = 42 [default = 10];
      case 42: {
        if (tag == 341) {
         parse_max_size_to_fit_straight_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_size_to_fit_straight_line_)));
          set_has_max_size_to_fit_straight_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(349)) goto parse_max_size_to_fit_straight_line_image;
        break;
      }

      // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
      case 43: {
        if (tag == 349) {
         parse_max_size_to_fit_straight_line_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_size_to_fit_straight_line_image_)));
          set_has_max_size_to_fit_straight_line_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(357)) goto parse_online_pitch_angle;
        break;
      }

      // optional float online_pitch_angle = 44 [default = -2.5];
      case 44: {
        if (tag == 357) {
         parse_online_pitch_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &online_pitch_angle_)));
          set_has_online_pitch_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(365)) goto parse_ground_height;
        break;
      }

      // optional float ground_height = 45 [default = 1.6];
      case 45: {
        if (tag == 365) {
         parse_ground_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ground_height_)));
          set_has_ground_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(373)) goto parse_max_distance_to_see_for_transformer;
        break;
      }

      // optional float max_distance_to_see_for_transformer = 46 [default = 500];
      case 46: {
        if (tag == 373) {
         parse_max_distance_to_see_for_transformer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_distance_to_see_for_transformer_)));
          set_has_max_distance_to_see_for_transformer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(381)) goto parse_lane_map_scale;
        break;
      }

      // optional float lane_map_scale = 47 [default = 2];
      case 47: {
        if (tag == 381) {
         parse_lane_map_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_map_scale_)));
          set_has_lane_map_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_start_y_pos;
        break;
      }

      // optional int32 start_y_pos = 48 [default = 312];
      case 48: {
        if (tag == 384) {
         parse_start_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_y_pos_)));
          set_has_start_y_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_lane_map_width;
        break;
      }

      // optional int32 lane_map_width = 49 [default = 960];
      case 49: {
        if (tag == 392) {
         parse_lane_map_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_map_width_)));
          set_has_lane_map_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_lane_map_height;
        break;
      }

      // optional int32 lane_map_height = 50 [default = 384];
      case 50: {
        if (tag == 400) {
         parse_lane_map_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_map_height_)));
          set_has_lane_map_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lane_post_process_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lane_post_process_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lane_post_process_config.ModelConfigs)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string space_type = 3;
  if (has_space_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->space_type().data(), this->space_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.space_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->space_type(), output);
  }

  // optional int32 image_width = 4;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->image_width(), output);
  }

  // optional int32 image_height = 5;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->image_height(), output);
  }

  // repeated float roi = 6;
  for (int i = 0; i < this->roi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->roi(i), output);
  }

  // optional bool use_non_mask = 7;
  if (has_use_non_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_non_mask(), output);
  }

  // repeated float non_mask = 8;
  for (int i = 0; i < this->non_mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->non_mask(i), output);
  }

  // optional float lane_map_confidence_thresh = 9 [default = 0.95];
  if (has_lane_map_confidence_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lane_map_confidence_thresh(), output);
  }

  // optional float cc_split_siz = 10 [default = 50];
  if (has_cc_split_siz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->cc_split_siz(), output);
  }

  // optional int32 cc_split_len = 11 [default = 25];
  if (has_cc_split_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cc_split_len(), output);
  }

  // optional int32 min_cc_pixel_num = 12 [default = 10];
  if (has_min_cc_pixel_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->min_cc_pixel_num(), output);
  }

  // optional int32 min_cc_size = 13 [default = 5];
  if (has_min_cc_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->min_cc_size(), output);
  }

  // optional float min_y_search_offset = 14 [default = 0.5];
  if (has_min_y_search_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->min_y_search_offset(), output);
  }

  // optional float min_y_search_offset_image = 15 [default = 0.5];
  if (has_min_y_search_offset_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->min_y_search_offset_image(), output);
  }

  // optional string assoc_method = 16;
  if (has_assoc_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assoc_method().data(), this->assoc_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.assoc_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->assoc_method(), output);
  }

  // optional float assoc_min_distance = 17 [default = -0.5];
  if (has_assoc_min_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->assoc_min_distance(), output);
  }

  // optional float assoc_min_distance_image = 18 [default = -3];
  if (has_assoc_min_distance_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->assoc_min_distance_image(), output);
  }

  // optional float assoc_max_distance = 19 [default = 60];
  if (has_assoc_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->assoc_max_distance(), output);
  }

  // optional float assoc_max_distance_image = 20 [default = 400];
  if (has_assoc_max_distance_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->assoc_max_distance_image(), output);
  }

  // optional float assoc_distance_weight = 21 [default = 0.4];
  if (has_assoc_distance_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->assoc_distance_weight(), output);
  }

  // optional float assoc_max_deviation_angle = 22 [default = 15];
  if (has_assoc_max_deviation_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->assoc_max_deviation_angle(), output);
  }

  // optional float assoc_max_deviation_angle_image = 23 [default = 45];
  if (has_assoc_max_deviation_angle_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->assoc_max_deviation_angle_image(), output);
  }

  // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
  if (has_assoc_deviation_angle_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->assoc_deviation_angle_weight(), output);
  }

  // optional float assoc_max_departure_distance = 25 [default = 3];
  if (has_assoc_max_departure_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->assoc_max_departure_distance(), output);
  }

  // optional float assoc_max_departure_distance_image = 26 [default = 80];
  if (has_assoc_max_departure_distance_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->assoc_max_departure_distance_image(), output);
  }

  // optional float assoc_departure_distance_weight = 27 [default = 0.2];
  if (has_assoc_departure_distance_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->assoc_departure_distance_weight(), output);
  }

  // optional float assoc_max_relative_orie = 28 [default = 15];
  if (has_assoc_max_relative_orie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->assoc_max_relative_orie(), output);
  }

  // optional float assoc_max_relative_orie_image = 29 [default = 45];
  if (has_assoc_max_relative_orie_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->assoc_max_relative_orie_image(), output);
  }

  // optional float assoc_relative_orie_weight = 30 [default = 0.2];
  if (has_assoc_relative_orie_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->assoc_relative_orie_weight(), output);
  }

  // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
  if (has_assoc_min_orientation_estimation_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->assoc_min_orientation_estimation_size(), output);
  }

  // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
  if (has_assoc_min_orientation_estimation_size_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->assoc_min_orientation_estimation_size_image(), output);
  }

  // optional int32 max_cc_marker_match_num = 33 [default = 1];
  if (has_max_cc_marker_match_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->max_cc_marker_match_num(), output);
  }

  // optional float slide_window_size = 34 [default = 15];
  if (has_slide_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->slide_window_size(), output);
  }

  // optional float slide_window_size_image = 35 [default = 200];
  if (has_slide_window_size_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->slide_window_size_image(), output);
  }

  // optional int32 slide_window_max_point_num = 36 [default = 3];
  if (has_slide_window_max_point_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->slide_window_max_point_num(), output);
  }

  // optional int32 max_group_prediction_marker_num = 37 [default = 3];
  if (has_max_group_prediction_marker_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->max_group_prediction_marker_num(), output);
  }

  // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
  if (has_orientation_estimation_skip_marker_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->orientation_estimation_skip_marker_num(), output);
  }

  // optional float lane_interval_distance = 39 [default = 4];
  if (has_lane_interval_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->lane_interval_distance(), output);
  }

  // optional float min_instance_size_prefiltered = 40 [default = 3];
  if (has_min_instance_size_prefiltered()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->min_instance_size_prefiltered(), output);
  }

  // optional float min_instance_size_prefiltered_image = 41 [default = 20];
  if (has_min_instance_size_prefiltered_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->min_instance_size_prefiltered_image(), output);
  }

  // optional float max_size_to_fit_straight_line = 42 [default = 10];
  if (has_max_size_to_fit_straight_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->max_size_to_fit_straight_line(), output);
  }

  // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
  if (has_max_size_to_fit_straight_line_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->max_size_to_fit_straight_line_image(), output);
  }

  // optional float online_pitch_angle = 44 [default = -2.5];
  if (has_online_pitch_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->online_pitch_angle(), output);
  }

  // optional float ground_height = 45 [default = 1.6];
  if (has_ground_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->ground_height(), output);
  }

  // optional float max_distance_to_see_for_transformer = 46 [default = 500];
  if (has_max_distance_to_see_for_transformer()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->max_distance_to_see_for_transformer(), output);
  }

  // optional float lane_map_scale = 47 [default = 2];
  if (has_lane_map_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->lane_map_scale(), output);
  }

  // optional int32 start_y_pos = 48 [default = 312];
  if (has_start_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->start_y_pos(), output);
  }

  // optional int32 lane_map_width = 49 [default = 960];
  if (has_lane_map_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->lane_map_width(), output);
  }

  // optional int32 lane_map_height = 50 [default = 384];
  if (has_lane_map_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->lane_map_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lane_post_process_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lane_post_process_config.ModelConfigs)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string space_type = 3;
  if (has_space_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->space_type().data(), this->space_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.space_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->space_type(), target);
  }

  // optional int32 image_width = 4;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->image_width(), target);
  }

  // optional int32 image_height = 5;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->image_height(), target);
  }

  // repeated float roi = 6;
  for (int i = 0; i < this->roi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->roi(i), target);
  }

  // optional bool use_non_mask = 7;
  if (has_use_non_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_non_mask(), target);
  }

  // repeated float non_mask = 8;
  for (int i = 0; i < this->non_mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->non_mask(i), target);
  }

  // optional float lane_map_confidence_thresh = 9 [default = 0.95];
  if (has_lane_map_confidence_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lane_map_confidence_thresh(), target);
  }

  // optional float cc_split_siz = 10 [default = 50];
  if (has_cc_split_siz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->cc_split_siz(), target);
  }

  // optional int32 cc_split_len = 11 [default = 25];
  if (has_cc_split_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cc_split_len(), target);
  }

  // optional int32 min_cc_pixel_num = 12 [default = 10];
  if (has_min_cc_pixel_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->min_cc_pixel_num(), target);
  }

  // optional int32 min_cc_size = 13 [default = 5];
  if (has_min_cc_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->min_cc_size(), target);
  }

  // optional float min_y_search_offset = 14 [default = 0.5];
  if (has_min_y_search_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->min_y_search_offset(), target);
  }

  // optional float min_y_search_offset_image = 15 [default = 0.5];
  if (has_min_y_search_offset_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->min_y_search_offset_image(), target);
  }

  // optional string assoc_method = 16;
  if (has_assoc_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assoc_method().data(), this->assoc_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.assoc_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->assoc_method(), target);
  }

  // optional float assoc_min_distance = 17 [default = -0.5];
  if (has_assoc_min_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->assoc_min_distance(), target);
  }

  // optional float assoc_min_distance_image = 18 [default = -3];
  if (has_assoc_min_distance_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->assoc_min_distance_image(), target);
  }

  // optional float assoc_max_distance = 19 [default = 60];
  if (has_assoc_max_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->assoc_max_distance(), target);
  }

  // optional float assoc_max_distance_image = 20 [default = 400];
  if (has_assoc_max_distance_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->assoc_max_distance_image(), target);
  }

  // optional float assoc_distance_weight = 21 [default = 0.4];
  if (has_assoc_distance_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->assoc_distance_weight(), target);
  }

  // optional float assoc_max_deviation_angle = 22 [default = 15];
  if (has_assoc_max_deviation_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->assoc_max_deviation_angle(), target);
  }

  // optional float assoc_max_deviation_angle_image = 23 [default = 45];
  if (has_assoc_max_deviation_angle_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->assoc_max_deviation_angle_image(), target);
  }

  // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
  if (has_assoc_deviation_angle_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->assoc_deviation_angle_weight(), target);
  }

  // optional float assoc_max_departure_distance = 25 [default = 3];
  if (has_assoc_max_departure_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->assoc_max_departure_distance(), target);
  }

  // optional float assoc_max_departure_distance_image = 26 [default = 80];
  if (has_assoc_max_departure_distance_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->assoc_max_departure_distance_image(), target);
  }

  // optional float assoc_departure_distance_weight = 27 [default = 0.2];
  if (has_assoc_departure_distance_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->assoc_departure_distance_weight(), target);
  }

  // optional float assoc_max_relative_orie = 28 [default = 15];
  if (has_assoc_max_relative_orie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->assoc_max_relative_orie(), target);
  }

  // optional float assoc_max_relative_orie_image = 29 [default = 45];
  if (has_assoc_max_relative_orie_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->assoc_max_relative_orie_image(), target);
  }

  // optional float assoc_relative_orie_weight = 30 [default = 0.2];
  if (has_assoc_relative_orie_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->assoc_relative_orie_weight(), target);
  }

  // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
  if (has_assoc_min_orientation_estimation_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->assoc_min_orientation_estimation_size(), target);
  }

  // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
  if (has_assoc_min_orientation_estimation_size_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->assoc_min_orientation_estimation_size_image(), target);
  }

  // optional int32 max_cc_marker_match_num = 33 [default = 1];
  if (has_max_cc_marker_match_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->max_cc_marker_match_num(), target);
  }

  // optional float slide_window_size = 34 [default = 15];
  if (has_slide_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->slide_window_size(), target);
  }

  // optional float slide_window_size_image = 35 [default = 200];
  if (has_slide_window_size_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->slide_window_size_image(), target);
  }

  // optional int32 slide_window_max_point_num = 36 [default = 3];
  if (has_slide_window_max_point_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->slide_window_max_point_num(), target);
  }

  // optional int32 max_group_prediction_marker_num = 37 [default = 3];
  if (has_max_group_prediction_marker_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->max_group_prediction_marker_num(), target);
  }

  // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
  if (has_orientation_estimation_skip_marker_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->orientation_estimation_skip_marker_num(), target);
  }

  // optional float lane_interval_distance = 39 [default = 4];
  if (has_lane_interval_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->lane_interval_distance(), target);
  }

  // optional float min_instance_size_prefiltered = 40 [default = 3];
  if (has_min_instance_size_prefiltered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->min_instance_size_prefiltered(), target);
  }

  // optional float min_instance_size_prefiltered_image = 41 [default = 20];
  if (has_min_instance_size_prefiltered_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->min_instance_size_prefiltered_image(), target);
  }

  // optional float max_size_to_fit_straight_line = 42 [default = 10];
  if (has_max_size_to_fit_straight_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->max_size_to_fit_straight_line(), target);
  }

  // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
  if (has_max_size_to_fit_straight_line_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->max_size_to_fit_straight_line_image(), target);
  }

  // optional float online_pitch_angle = 44 [default = -2.5];
  if (has_online_pitch_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->online_pitch_angle(), target);
  }

  // optional float ground_height = 45 [default = 1.6];
  if (has_ground_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->ground_height(), target);
  }

  // optional float max_distance_to_see_for_transformer = 46 [default = 500];
  if (has_max_distance_to_see_for_transformer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->max_distance_to_see_for_transformer(), target);
  }

  // optional float lane_map_scale = 47 [default = 2];
  if (has_lane_map_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->lane_map_scale(), target);
  }

  // optional int32 start_y_pos = 48 [default = 312];
  if (has_start_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->start_y_pos(), target);
  }

  // optional int32 lane_map_width = 49 [default = 960];
  if (has_lane_map_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->lane_map_width(), target);
  }

  // optional int32 lane_map_height = 50 [default = 384];
  if (has_lane_map_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->lane_map_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lane_post_process_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lane_post_process_config.ModelConfigs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 95u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string space_type = 3;
    if (has_space_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->space_type());
    }

    // optional int32 image_width = 4;
    if (has_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_width());
    }

    // optional int32 image_height = 5;
    if (has_image_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_height());
    }

    // optional bool use_non_mask = 7;
    if (has_use_non_mask()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float lane_map_confidence_thresh = 9 [default = 0.95];
    if (has_lane_map_confidence_thresh()) {
      total_size += 1 + 4;
    }

    // optional float cc_split_siz = 10 [default = 50];
    if (has_cc_split_siz()) {
      total_size += 1 + 4;
    }

    // optional int32 cc_split_len = 11 [default = 25];
    if (has_cc_split_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cc_split_len());
    }

    // optional int32 min_cc_pixel_num = 12 [default = 10];
    if (has_min_cc_pixel_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_cc_pixel_num());
    }

    // optional int32 min_cc_size = 13 [default = 5];
    if (has_min_cc_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_cc_size());
    }

    // optional float min_y_search_offset = 14 [default = 0.5];
    if (has_min_y_search_offset()) {
      total_size += 1 + 4;
    }

    // optional float min_y_search_offset_image = 15 [default = 0.5];
    if (has_min_y_search_offset_image()) {
      total_size += 1 + 4;
    }

    // optional string assoc_method = 16;
    if (has_assoc_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assoc_method());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float assoc_min_distance = 17 [default = -0.5];
    if (has_assoc_min_distance()) {
      total_size += 2 + 4;
    }

    // optional float assoc_min_distance_image = 18 [default = -3];
    if (has_assoc_min_distance_image()) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_distance = 19 [default = 60];
    if (has_assoc_max_distance()) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_distance_image = 20 [default = 400];
    if (has_assoc_max_distance_image()) {
      total_size += 2 + 4;
    }

    // optional float assoc_distance_weight = 21 [default = 0.4];
    if (has_assoc_distance_weight()) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_deviation_angle = 22 [default = 15];
    if (has_assoc_max_deviation_angle()) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_deviation_angle_image = 23 [default = 45];
    if (has_assoc_max_deviation_angle_image()) {
      total_size += 2 + 4;
    }

    // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
    if (has_assoc_deviation_angle_weight()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional float assoc_max_departure_distance = 25 [default = 3];
    if (has_assoc_max_departure_distance()) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_departure_distance_image = 26 [default = 80];
    if (has_assoc_max_departure_distance_image()) {
      total_size += 2 + 4;
    }

    // optional float assoc_departure_distance_weight = 27 [default = 0.2];
    if (has_assoc_departure_distance_weight()) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_relative_orie = 28 [default = 15];
    if (has_assoc_max_relative_orie()) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_relative_orie_image = 29 [default = 45];
    if (has_assoc_max_relative_orie_image()) {
      total_size += 2 + 4;
    }

    // optional float assoc_relative_orie_weight = 30 [default = 0.2];
    if (has_assoc_relative_orie_weight()) {
      total_size += 2 + 4;
    }

    // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
    if (has_assoc_min_orientation_estimation_size()) {
      total_size += 2 + 4;
    }

    // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
    if (has_assoc_min_orientation_estimation_size_image()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 max_cc_marker_match_num = 33 [default = 1];
    if (has_max_cc_marker_match_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cc_marker_match_num());
    }

    // optional float slide_window_size = 34 [default = 15];
    if (has_slide_window_size()) {
      total_size += 2 + 4;
    }

    // optional float slide_window_size_image = 35 [default = 200];
    if (has_slide_window_size_image()) {
      total_size += 2 + 4;
    }

    // optional int32 slide_window_max_point_num = 36 [default = 3];
    if (has_slide_window_max_point_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slide_window_max_point_num());
    }

    // optional int32 max_group_prediction_marker_num = 37 [default = 3];
    if (has_max_group_prediction_marker_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_group_prediction_marker_num());
    }

    // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
    if (has_orientation_estimation_skip_marker_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation_estimation_skip_marker_num());
    }

    // optional float lane_interval_distance = 39 [default = 4];
    if (has_lane_interval_distance()) {
      total_size += 2 + 4;
    }

    // optional float min_instance_size_prefiltered = 40 [default = 3];
    if (has_min_instance_size_prefiltered()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional float min_instance_size_prefiltered_image = 41 [default = 20];
    if (has_min_instance_size_prefiltered_image()) {
      total_size += 2 + 4;
    }

    // optional float max_size_to_fit_straight_line = 42 [default = 10];
    if (has_max_size_to_fit_straight_line()) {
      total_size += 2 + 4;
    }

    // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
    if (has_max_size_to_fit_straight_line_image()) {
      total_size += 2 + 4;
    }

    // optional float online_pitch_angle = 44 [default = -2.5];
    if (has_online_pitch_angle()) {
      total_size += 2 + 4;
    }

    // optional float ground_height = 45 [default = 1.6];
    if (has_ground_height()) {
      total_size += 2 + 4;
    }

    // optional float max_distance_to_see_for_transformer = 46 [default = 500];
    if (has_max_distance_to_see_for_transformer()) {
      total_size += 2 + 4;
    }

    // optional float lane_map_scale = 47 [default = 2];
    if (has_lane_map_scale()) {
      total_size += 2 + 4;
    }

    // optional int32 start_y_pos = 48 [default = 312];
    if (has_start_y_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_y_pos());
    }

  }
  if (_has_bits_[48 / 32] & 196608u) {
    // optional int32 lane_map_width = 49 [default = 960];
    if (has_lane_map_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_map_width());
    }

    // optional int32 lane_map_height = 50 [default = 384];
    if (has_lane_map_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_map_height());
    }

  }
  // repeated float roi = 6;
  {
    int data_size = 0;
    data_size = 4 * this->roi_size();
    total_size += 1 * this->roi_size() + data_size;
  }

  // repeated float non_mask = 8;
  {
    int data_size = 0;
    data_size = 4 * this->non_mask_size();
    total_size += 1 * this->non_mask_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lane_post_process_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lane_post_process_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lane_post_process_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lane_post_process_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  roi_.MergeFrom(from.roi_);
  non_mask_.MergeFrom(from.non_mask_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_space_type()) {
      set_has_space_type();
      space_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.space_type_);
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_use_non_mask()) {
      set_use_non_mask(from.use_non_mask());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lane_map_confidence_thresh()) {
      set_lane_map_confidence_thresh(from.lane_map_confidence_thresh());
    }
    if (from.has_cc_split_siz()) {
      set_cc_split_siz(from.cc_split_siz());
    }
    if (from.has_cc_split_len()) {
      set_cc_split_len(from.cc_split_len());
    }
    if (from.has_min_cc_pixel_num()) {
      set_min_cc_pixel_num(from.min_cc_pixel_num());
    }
    if (from.has_min_cc_size()) {
      set_min_cc_size(from.min_cc_size());
    }
    if (from.has_min_y_search_offset()) {
      set_min_y_search_offset(from.min_y_search_offset());
    }
    if (from.has_min_y_search_offset_image()) {
      set_min_y_search_offset_image(from.min_y_search_offset_image());
    }
    if (from.has_assoc_method()) {
      set_has_assoc_method();
      assoc_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assoc_method_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_assoc_min_distance()) {
      set_assoc_min_distance(from.assoc_min_distance());
    }
    if (from.has_assoc_min_distance_image()) {
      set_assoc_min_distance_image(from.assoc_min_distance_image());
    }
    if (from.has_assoc_max_distance()) {
      set_assoc_max_distance(from.assoc_max_distance());
    }
    if (from.has_assoc_max_distance_image()) {
      set_assoc_max_distance_image(from.assoc_max_distance_image());
    }
    if (from.has_assoc_distance_weight()) {
      set_assoc_distance_weight(from.assoc_distance_weight());
    }
    if (from.has_assoc_max_deviation_angle()) {
      set_assoc_max_deviation_angle(from.assoc_max_deviation_angle());
    }
    if (from.has_assoc_max_deviation_angle_image()) {
      set_assoc_max_deviation_angle_image(from.assoc_max_deviation_angle_image());
    }
    if (from.has_assoc_deviation_angle_weight()) {
      set_assoc_deviation_angle_weight(from.assoc_deviation_angle_weight());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_assoc_max_departure_distance()) {
      set_assoc_max_departure_distance(from.assoc_max_departure_distance());
    }
    if (from.has_assoc_max_departure_distance_image()) {
      set_assoc_max_departure_distance_image(from.assoc_max_departure_distance_image());
    }
    if (from.has_assoc_departure_distance_weight()) {
      set_assoc_departure_distance_weight(from.assoc_departure_distance_weight());
    }
    if (from.has_assoc_max_relative_orie()) {
      set_assoc_max_relative_orie(from.assoc_max_relative_orie());
    }
    if (from.has_assoc_max_relative_orie_image()) {
      set_assoc_max_relative_orie_image(from.assoc_max_relative_orie_image());
    }
    if (from.has_assoc_relative_orie_weight()) {
      set_assoc_relative_orie_weight(from.assoc_relative_orie_weight());
    }
    if (from.has_assoc_min_orientation_estimation_size()) {
      set_assoc_min_orientation_estimation_size(from.assoc_min_orientation_estimation_size());
    }
    if (from.has_assoc_min_orientation_estimation_size_image()) {
      set_assoc_min_orientation_estimation_size_image(from.assoc_min_orientation_estimation_size_image());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_max_cc_marker_match_num()) {
      set_max_cc_marker_match_num(from.max_cc_marker_match_num());
    }
    if (from.has_slide_window_size()) {
      set_slide_window_size(from.slide_window_size());
    }
    if (from.has_slide_window_size_image()) {
      set_slide_window_size_image(from.slide_window_size_image());
    }
    if (from.has_slide_window_max_point_num()) {
      set_slide_window_max_point_num(from.slide_window_max_point_num());
    }
    if (from.has_max_group_prediction_marker_num()) {
      set_max_group_prediction_marker_num(from.max_group_prediction_marker_num());
    }
    if (from.has_orientation_estimation_skip_marker_num()) {
      set_orientation_estimation_skip_marker_num(from.orientation_estimation_skip_marker_num());
    }
    if (from.has_lane_interval_distance()) {
      set_lane_interval_distance(from.lane_interval_distance());
    }
    if (from.has_min_instance_size_prefiltered()) {
      set_min_instance_size_prefiltered(from.min_instance_size_prefiltered());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_min_instance_size_prefiltered_image()) {
      set_min_instance_size_prefiltered_image(from.min_instance_size_prefiltered_image());
    }
    if (from.has_max_size_to_fit_straight_line()) {
      set_max_size_to_fit_straight_line(from.max_size_to_fit_straight_line());
    }
    if (from.has_max_size_to_fit_straight_line_image()) {
      set_max_size_to_fit_straight_line_image(from.max_size_to_fit_straight_line_image());
    }
    if (from.has_online_pitch_angle()) {
      set_online_pitch_angle(from.online_pitch_angle());
    }
    if (from.has_ground_height()) {
      set_ground_height(from.ground_height());
    }
    if (from.has_max_distance_to_see_for_transformer()) {
      set_max_distance_to_see_for_transformer(from.max_distance_to_see_for_transformer());
    }
    if (from.has_lane_map_scale()) {
      set_lane_map_scale(from.lane_map_scale());
    }
    if (from.has_start_y_pos()) {
      set_start_y_pos(from.start_y_pos());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_lane_map_width()) {
      set_lane_map_width(from.lane_map_width());
    }
    if (from.has_lane_map_height()) {
      set_lane_map_height(from.lane_map_height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lane_post_process_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lane_post_process_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  space_type_.Swap(&other->space_type_);
  std::swap(image_width_, other->image_width_);
  std::swap(image_height_, other->image_height_);
  roi_.UnsafeArenaSwap(&other->roi_);
  std::swap(use_non_mask_, other->use_non_mask_);
  non_mask_.UnsafeArenaSwap(&other->non_mask_);
  std::swap(lane_map_confidence_thresh_, other->lane_map_confidence_thresh_);
  std::swap(cc_split_siz_, other->cc_split_siz_);
  std::swap(cc_split_len_, other->cc_split_len_);
  std::swap(min_cc_pixel_num_, other->min_cc_pixel_num_);
  std::swap(min_cc_size_, other->min_cc_size_);
  std::swap(min_y_search_offset_, other->min_y_search_offset_);
  std::swap(min_y_search_offset_image_, other->min_y_search_offset_image_);
  assoc_method_.Swap(&other->assoc_method_);
  std::swap(assoc_min_distance_, other->assoc_min_distance_);
  std::swap(assoc_min_distance_image_, other->assoc_min_distance_image_);
  std::swap(assoc_max_distance_, other->assoc_max_distance_);
  std::swap(assoc_max_distance_image_, other->assoc_max_distance_image_);
  std::swap(assoc_distance_weight_, other->assoc_distance_weight_);
  std::swap(assoc_max_deviation_angle_, other->assoc_max_deviation_angle_);
  std::swap(assoc_max_deviation_angle_image_, other->assoc_max_deviation_angle_image_);
  std::swap(assoc_deviation_angle_weight_, other->assoc_deviation_angle_weight_);
  std::swap(assoc_max_departure_distance_, other->assoc_max_departure_distance_);
  std::swap(assoc_max_departure_distance_image_, other->assoc_max_departure_distance_image_);
  std::swap(assoc_departure_distance_weight_, other->assoc_departure_distance_weight_);
  std::swap(assoc_max_relative_orie_, other->assoc_max_relative_orie_);
  std::swap(assoc_max_relative_orie_image_, other->assoc_max_relative_orie_image_);
  std::swap(assoc_relative_orie_weight_, other->assoc_relative_orie_weight_);
  std::swap(assoc_min_orientation_estimation_size_, other->assoc_min_orientation_estimation_size_);
  std::swap(assoc_min_orientation_estimation_size_image_, other->assoc_min_orientation_estimation_size_image_);
  std::swap(max_cc_marker_match_num_, other->max_cc_marker_match_num_);
  std::swap(slide_window_size_, other->slide_window_size_);
  std::swap(slide_window_size_image_, other->slide_window_size_image_);
  std::swap(slide_window_max_point_num_, other->slide_window_max_point_num_);
  std::swap(max_group_prediction_marker_num_, other->max_group_prediction_marker_num_);
  std::swap(orientation_estimation_skip_marker_num_, other->orientation_estimation_skip_marker_num_);
  std::swap(lane_interval_distance_, other->lane_interval_distance_);
  std::swap(min_instance_size_prefiltered_, other->min_instance_size_prefiltered_);
  std::swap(min_instance_size_prefiltered_image_, other->min_instance_size_prefiltered_image_);
  std::swap(max_size_to_fit_straight_line_, other->max_size_to_fit_straight_line_);
  std::swap(max_size_to_fit_straight_line_image_, other->max_size_to_fit_straight_line_image_);
  std::swap(online_pitch_angle_, other->online_pitch_angle_);
  std::swap(ground_height_, other->ground_height_);
  std::swap(max_distance_to_see_for_transformer_, other->max_distance_to_see_for_transformer_);
  std::swap(lane_map_scale_, other->lane_map_scale_);
  std::swap(start_y_pos_, other->start_y_pos_);
  std::swap(lane_map_width_, other->lane_map_width_);
  std::swap(lane_map_height_, other->lane_map_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1;
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.name)
}
 ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.name)
}

// optional string version = 2;
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.version)
}
 ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.version)
}

// optional string space_type = 3;
bool ModelConfigs::has_space_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_space_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_space_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_space_type() {
  space_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_space_type();
}
 const ::std::string& ModelConfigs::space_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  return space_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_space_type(const ::std::string& value) {
  set_has_space_type();
  space_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}
 void ModelConfigs::set_space_type(const char* value) {
  set_has_space_type();
  space_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}
 void ModelConfigs::set_space_type(const char* value, size_t size) {
  set_has_space_type();
  space_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}
 ::std::string* ModelConfigs::mutable_space_type() {
  set_has_space_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  return space_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_space_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  clear_has_space_type();
  return space_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_space_type(::std::string* space_type) {
  if (space_type != NULL) {
    set_has_space_type();
  } else {
    clear_has_space_type();
  }
  space_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), space_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}

// optional int32 image_width = 4;
bool ModelConfigs::has_image_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_image_width() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_image_width() {
  image_width_ = 0;
  clear_has_image_width();
}
 ::google::protobuf::int32 ModelConfigs::image_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.image_width)
  return image_width_;
}
 void ModelConfigs::set_image_width(::google::protobuf::int32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.image_width)
}

// optional int32 image_height = 5;
bool ModelConfigs::has_image_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_image_height() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_image_height() {
  image_height_ = 0;
  clear_has_image_height();
}
 ::google::protobuf::int32 ModelConfigs::image_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.image_height)
  return image_height_;
}
 void ModelConfigs::set_image_height(::google::protobuf::int32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.image_height)
}

// repeated float roi = 6;
int ModelConfigs::roi_size() const {
  return roi_.size();
}
void ModelConfigs::clear_roi() {
  roi_.Clear();
}
 float ModelConfigs::roi(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return roi_.Get(index);
}
 void ModelConfigs::set_roi(int index, float value) {
  roi_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.roi)
}
 void ModelConfigs::add_roi(float value) {
  roi_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.lane_post_process_config.ModelConfigs.roi)
}
 const ::google::protobuf::RepeatedField< float >&
ModelConfigs::roi() const {
  // @@protoc_insertion_point(field_list:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return roi_;
}
 ::google::protobuf::RepeatedField< float >*
ModelConfigs::mutable_roi() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return &roi_;
}

// optional bool use_non_mask = 7;
bool ModelConfigs::has_use_non_mask() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_use_non_mask() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_use_non_mask() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_use_non_mask() {
  use_non_mask_ = false;
  clear_has_use_non_mask();
}
 bool ModelConfigs::use_non_mask() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.use_non_mask)
  return use_non_mask_;
}
 void ModelConfigs::set_use_non_mask(bool value) {
  set_has_use_non_mask();
  use_non_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.use_non_mask)
}

// repeated float non_mask = 8;
int ModelConfigs::non_mask_size() const {
  return non_mask_.size();
}
void ModelConfigs::clear_non_mask() {
  non_mask_.Clear();
}
 float ModelConfigs::non_mask(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return non_mask_.Get(index);
}
 void ModelConfigs::set_non_mask(int index, float value) {
  non_mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
}
 void ModelConfigs::add_non_mask(float value) {
  non_mask_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
}
 const ::google::protobuf::RepeatedField< float >&
ModelConfigs::non_mask() const {
  // @@protoc_insertion_point(field_list:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return non_mask_;
}
 ::google::protobuf::RepeatedField< float >*
ModelConfigs::mutable_non_mask() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return &non_mask_;
}

// optional float lane_map_confidence_thresh = 9 [default = 0.95];
bool ModelConfigs::has_lane_map_confidence_thresh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelConfigs::set_has_lane_map_confidence_thresh() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelConfigs::clear_has_lane_map_confidence_thresh() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelConfigs::clear_lane_map_confidence_thresh() {
  lane_map_confidence_thresh_ = 0.95f;
  clear_has_lane_map_confidence_thresh();
}
 float ModelConfigs::lane_map_confidence_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_confidence_thresh)
  return lane_map_confidence_thresh_;
}
 void ModelConfigs::set_lane_map_confidence_thresh(float value) {
  set_has_lane_map_confidence_thresh();
  lane_map_confidence_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_confidence_thresh)
}

// optional float cc_split_siz = 10 [default = 50];
bool ModelConfigs::has_cc_split_siz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelConfigs::set_has_cc_split_siz() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelConfigs::clear_has_cc_split_siz() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelConfigs::clear_cc_split_siz() {
  cc_split_siz_ = 50;
  clear_has_cc_split_siz();
}
 float ModelConfigs::cc_split_siz() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_siz)
  return cc_split_siz_;
}
 void ModelConfigs::set_cc_split_siz(float value) {
  set_has_cc_split_siz();
  cc_split_siz_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_siz)
}

// optional int32 cc_split_len = 11 [default = 25];
bool ModelConfigs::has_cc_split_len() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelConfigs::set_has_cc_split_len() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelConfigs::clear_has_cc_split_len() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelConfigs::clear_cc_split_len() {
  cc_split_len_ = 25;
  clear_has_cc_split_len();
}
 ::google::protobuf::int32 ModelConfigs::cc_split_len() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_len)
  return cc_split_len_;
}
 void ModelConfigs::set_cc_split_len(::google::protobuf::int32 value) {
  set_has_cc_split_len();
  cc_split_len_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_len)
}

// optional int32 min_cc_pixel_num = 12 [default = 10];
bool ModelConfigs::has_min_cc_pixel_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelConfigs::set_has_min_cc_pixel_num() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelConfigs::clear_has_min_cc_pixel_num() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelConfigs::clear_min_cc_pixel_num() {
  min_cc_pixel_num_ = 10;
  clear_has_min_cc_pixel_num();
}
 ::google::protobuf::int32 ModelConfigs::min_cc_pixel_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_pixel_num)
  return min_cc_pixel_num_;
}
 void ModelConfigs::set_min_cc_pixel_num(::google::protobuf::int32 value) {
  set_has_min_cc_pixel_num();
  min_cc_pixel_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_pixel_num)
}

// optional int32 min_cc_size = 13 [default = 5];
bool ModelConfigs::has_min_cc_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModelConfigs::set_has_min_cc_size() {
  _has_bits_[0] |= 0x00001000u;
}
void ModelConfigs::clear_has_min_cc_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModelConfigs::clear_min_cc_size() {
  min_cc_size_ = 5;
  clear_has_min_cc_size();
}
 ::google::protobuf::int32 ModelConfigs::min_cc_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_size)
  return min_cc_size_;
}
 void ModelConfigs::set_min_cc_size(::google::protobuf::int32 value) {
  set_has_min_cc_size();
  min_cc_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_size)
}

// optional float min_y_search_offset = 14 [default = 0.5];
bool ModelConfigs::has_min_y_search_offset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModelConfigs::set_has_min_y_search_offset() {
  _has_bits_[0] |= 0x00002000u;
}
void ModelConfigs::clear_has_min_y_search_offset() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModelConfigs::clear_min_y_search_offset() {
  min_y_search_offset_ = 0.5f;
  clear_has_min_y_search_offset();
}
 float ModelConfigs::min_y_search_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset)
  return min_y_search_offset_;
}
 void ModelConfigs::set_min_y_search_offset(float value) {
  set_has_min_y_search_offset();
  min_y_search_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset)
}

// optional float min_y_search_offset_image = 15 [default = 0.5];
bool ModelConfigs::has_min_y_search_offset_image() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModelConfigs::set_has_min_y_search_offset_image() {
  _has_bits_[0] |= 0x00004000u;
}
void ModelConfigs::clear_has_min_y_search_offset_image() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModelConfigs::clear_min_y_search_offset_image() {
  min_y_search_offset_image_ = 0.5f;
  clear_has_min_y_search_offset_image();
}
 float ModelConfigs::min_y_search_offset_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset_image)
  return min_y_search_offset_image_;
}
 void ModelConfigs::set_min_y_search_offset_image(float value) {
  set_has_min_y_search_offset_image();
  min_y_search_offset_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset_image)
}

// optional string assoc_method = 16;
bool ModelConfigs::has_assoc_method() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModelConfigs::set_has_assoc_method() {
  _has_bits_[0] |= 0x00008000u;
}
void ModelConfigs::clear_has_assoc_method() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModelConfigs::clear_assoc_method() {
  assoc_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_assoc_method();
}
 const ::std::string& ModelConfigs::assoc_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  return assoc_method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_assoc_method(const ::std::string& value) {
  set_has_assoc_method();
  assoc_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}
 void ModelConfigs::set_assoc_method(const char* value) {
  set_has_assoc_method();
  assoc_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}
 void ModelConfigs::set_assoc_method(const char* value, size_t size) {
  set_has_assoc_method();
  assoc_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}
 ::std::string* ModelConfigs::mutable_assoc_method() {
  set_has_assoc_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  return assoc_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_assoc_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  clear_has_assoc_method();
  return assoc_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_assoc_method(::std::string* assoc_method) {
  if (assoc_method != NULL) {
    set_has_assoc_method();
  } else {
    clear_has_assoc_method();
  }
  assoc_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assoc_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}

// optional float assoc_min_distance = 17 [default = -0.5];
bool ModelConfigs::has_assoc_min_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModelConfigs::set_has_assoc_min_distance() {
  _has_bits_[0] |= 0x00010000u;
}
void ModelConfigs::clear_has_assoc_min_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModelConfigs::clear_assoc_min_distance() {
  assoc_min_distance_ = -0.5f;
  clear_has_assoc_min_distance();
}
 float ModelConfigs::assoc_min_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance)
  return assoc_min_distance_;
}
 void ModelConfigs::set_assoc_min_distance(float value) {
  set_has_assoc_min_distance();
  assoc_min_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance)
}

// optional float assoc_min_distance_image = 18 [default = -3];
bool ModelConfigs::has_assoc_min_distance_image() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModelConfigs::set_has_assoc_min_distance_image() {
  _has_bits_[0] |= 0x00020000u;
}
void ModelConfigs::clear_has_assoc_min_distance_image() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModelConfigs::clear_assoc_min_distance_image() {
  assoc_min_distance_image_ = -3;
  clear_has_assoc_min_distance_image();
}
 float ModelConfigs::assoc_min_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance_image)
  return assoc_min_distance_image_;
}
 void ModelConfigs::set_assoc_min_distance_image(float value) {
  set_has_assoc_min_distance_image();
  assoc_min_distance_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance_image)
}

// optional float assoc_max_distance = 19 [default = 60];
bool ModelConfigs::has_assoc_max_distance() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModelConfigs::set_has_assoc_max_distance() {
  _has_bits_[0] |= 0x00040000u;
}
void ModelConfigs::clear_has_assoc_max_distance() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModelConfigs::clear_assoc_max_distance() {
  assoc_max_distance_ = 60;
  clear_has_assoc_max_distance();
}
 float ModelConfigs::assoc_max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance)
  return assoc_max_distance_;
}
 void ModelConfigs::set_assoc_max_distance(float value) {
  set_has_assoc_max_distance();
  assoc_max_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance)
}

// optional float assoc_max_distance_image = 20 [default = 400];
bool ModelConfigs::has_assoc_max_distance_image() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModelConfigs::set_has_assoc_max_distance_image() {
  _has_bits_[0] |= 0x00080000u;
}
void ModelConfigs::clear_has_assoc_max_distance_image() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModelConfigs::clear_assoc_max_distance_image() {
  assoc_max_distance_image_ = 400;
  clear_has_assoc_max_distance_image();
}
 float ModelConfigs::assoc_max_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance_image)
  return assoc_max_distance_image_;
}
 void ModelConfigs::set_assoc_max_distance_image(float value) {
  set_has_assoc_max_distance_image();
  assoc_max_distance_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance_image)
}

// optional float assoc_distance_weight = 21 [default = 0.4];
bool ModelConfigs::has_assoc_distance_weight() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModelConfigs::set_has_assoc_distance_weight() {
  _has_bits_[0] |= 0x00100000u;
}
void ModelConfigs::clear_has_assoc_distance_weight() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModelConfigs::clear_assoc_distance_weight() {
  assoc_distance_weight_ = 0.4f;
  clear_has_assoc_distance_weight();
}
 float ModelConfigs::assoc_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_distance_weight)
  return assoc_distance_weight_;
}
 void ModelConfigs::set_assoc_distance_weight(float value) {
  set_has_assoc_distance_weight();
  assoc_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_distance_weight)
}

// optional float assoc_max_deviation_angle = 22 [default = 15];
bool ModelConfigs::has_assoc_max_deviation_angle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModelConfigs::set_has_assoc_max_deviation_angle() {
  _has_bits_[0] |= 0x00200000u;
}
void ModelConfigs::clear_has_assoc_max_deviation_angle() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModelConfigs::clear_assoc_max_deviation_angle() {
  assoc_max_deviation_angle_ = 15;
  clear_has_assoc_max_deviation_angle();
}
 float ModelConfigs::assoc_max_deviation_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle)
  return assoc_max_deviation_angle_;
}
 void ModelConfigs::set_assoc_max_deviation_angle(float value) {
  set_has_assoc_max_deviation_angle();
  assoc_max_deviation_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle)
}

// optional float assoc_max_deviation_angle_image = 23 [default = 45];
bool ModelConfigs::has_assoc_max_deviation_angle_image() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModelConfigs::set_has_assoc_max_deviation_angle_image() {
  _has_bits_[0] |= 0x00400000u;
}
void ModelConfigs::clear_has_assoc_max_deviation_angle_image() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModelConfigs::clear_assoc_max_deviation_angle_image() {
  assoc_max_deviation_angle_image_ = 45;
  clear_has_assoc_max_deviation_angle_image();
}
 float ModelConfigs::assoc_max_deviation_angle_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle_image)
  return assoc_max_deviation_angle_image_;
}
 void ModelConfigs::set_assoc_max_deviation_angle_image(float value) {
  set_has_assoc_max_deviation_angle_image();
  assoc_max_deviation_angle_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle_image)
}

// optional float assoc_deviation_angle_weight = 24 [default = 0.2];
bool ModelConfigs::has_assoc_deviation_angle_weight() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModelConfigs::set_has_assoc_deviation_angle_weight() {
  _has_bits_[0] |= 0x00800000u;
}
void ModelConfigs::clear_has_assoc_deviation_angle_weight() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModelConfigs::clear_assoc_deviation_angle_weight() {
  assoc_deviation_angle_weight_ = 0.2f;
  clear_has_assoc_deviation_angle_weight();
}
 float ModelConfigs::assoc_deviation_angle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_deviation_angle_weight)
  return assoc_deviation_angle_weight_;
}
 void ModelConfigs::set_assoc_deviation_angle_weight(float value) {
  set_has_assoc_deviation_angle_weight();
  assoc_deviation_angle_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_deviation_angle_weight)
}

// optional float assoc_max_departure_distance = 25 [default = 3];
bool ModelConfigs::has_assoc_max_departure_distance() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ModelConfigs::set_has_assoc_max_departure_distance() {
  _has_bits_[0] |= 0x01000000u;
}
void ModelConfigs::clear_has_assoc_max_departure_distance() {
  _has_bits_[0] &= ~0x01000000u;
}
void ModelConfigs::clear_assoc_max_departure_distance() {
  assoc_max_departure_distance_ = 3;
  clear_has_assoc_max_departure_distance();
}
 float ModelConfigs::assoc_max_departure_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance)
  return assoc_max_departure_distance_;
}
 void ModelConfigs::set_assoc_max_departure_distance(float value) {
  set_has_assoc_max_departure_distance();
  assoc_max_departure_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance)
}

// optional float assoc_max_departure_distance_image = 26 [default = 80];
bool ModelConfigs::has_assoc_max_departure_distance_image() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ModelConfigs::set_has_assoc_max_departure_distance_image() {
  _has_bits_[0] |= 0x02000000u;
}
void ModelConfigs::clear_has_assoc_max_departure_distance_image() {
  _has_bits_[0] &= ~0x02000000u;
}
void ModelConfigs::clear_assoc_max_departure_distance_image() {
  assoc_max_departure_distance_image_ = 80;
  clear_has_assoc_max_departure_distance_image();
}
 float ModelConfigs::assoc_max_departure_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance_image)
  return assoc_max_departure_distance_image_;
}
 void ModelConfigs::set_assoc_max_departure_distance_image(float value) {
  set_has_assoc_max_departure_distance_image();
  assoc_max_departure_distance_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance_image)
}

// optional float assoc_departure_distance_weight = 27 [default = 0.2];
bool ModelConfigs::has_assoc_departure_distance_weight() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ModelConfigs::set_has_assoc_departure_distance_weight() {
  _has_bits_[0] |= 0x04000000u;
}
void ModelConfigs::clear_has_assoc_departure_distance_weight() {
  _has_bits_[0] &= ~0x04000000u;
}
void ModelConfigs::clear_assoc_departure_distance_weight() {
  assoc_departure_distance_weight_ = 0.2f;
  clear_has_assoc_departure_distance_weight();
}
 float ModelConfigs::assoc_departure_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_departure_distance_weight)
  return assoc_departure_distance_weight_;
}
 void ModelConfigs::set_assoc_departure_distance_weight(float value) {
  set_has_assoc_departure_distance_weight();
  assoc_departure_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_departure_distance_weight)
}

// optional float assoc_max_relative_orie = 28 [default = 15];
bool ModelConfigs::has_assoc_max_relative_orie() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void ModelConfigs::set_has_assoc_max_relative_orie() {
  _has_bits_[0] |= 0x08000000u;
}
void ModelConfigs::clear_has_assoc_max_relative_orie() {
  _has_bits_[0] &= ~0x08000000u;
}
void ModelConfigs::clear_assoc_max_relative_orie() {
  assoc_max_relative_orie_ = 15;
  clear_has_assoc_max_relative_orie();
}
 float ModelConfigs::assoc_max_relative_orie() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie)
  return assoc_max_relative_orie_;
}
 void ModelConfigs::set_assoc_max_relative_orie(float value) {
  set_has_assoc_max_relative_orie();
  assoc_max_relative_orie_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie)
}

// optional float assoc_max_relative_orie_image = 29 [default = 45];
bool ModelConfigs::has_assoc_max_relative_orie_image() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void ModelConfigs::set_has_assoc_max_relative_orie_image() {
  _has_bits_[0] |= 0x10000000u;
}
void ModelConfigs::clear_has_assoc_max_relative_orie_image() {
  _has_bits_[0] &= ~0x10000000u;
}
void ModelConfigs::clear_assoc_max_relative_orie_image() {
  assoc_max_relative_orie_image_ = 45;
  clear_has_assoc_max_relative_orie_image();
}
 float ModelConfigs::assoc_max_relative_orie_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie_image)
  return assoc_max_relative_orie_image_;
}
 void ModelConfigs::set_assoc_max_relative_orie_image(float value) {
  set_has_assoc_max_relative_orie_image();
  assoc_max_relative_orie_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie_image)
}

// optional float assoc_relative_orie_weight = 30 [default = 0.2];
bool ModelConfigs::has_assoc_relative_orie_weight() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void ModelConfigs::set_has_assoc_relative_orie_weight() {
  _has_bits_[0] |= 0x20000000u;
}
void ModelConfigs::clear_has_assoc_relative_orie_weight() {
  _has_bits_[0] &= ~0x20000000u;
}
void ModelConfigs::clear_assoc_relative_orie_weight() {
  assoc_relative_orie_weight_ = 0.2f;
  clear_has_assoc_relative_orie_weight();
}
 float ModelConfigs::assoc_relative_orie_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_relative_orie_weight)
  return assoc_relative_orie_weight_;
}
 void ModelConfigs::set_assoc_relative_orie_weight(float value) {
  set_has_assoc_relative_orie_weight();
  assoc_relative_orie_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_relative_orie_weight)
}

// optional float assoc_min_orientation_estimation_size = 31 [default = 3];
bool ModelConfigs::has_assoc_min_orientation_estimation_size() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void ModelConfigs::set_has_assoc_min_orientation_estimation_size() {
  _has_bits_[0] |= 0x40000000u;
}
void ModelConfigs::clear_has_assoc_min_orientation_estimation_size() {
  _has_bits_[0] &= ~0x40000000u;
}
void ModelConfigs::clear_assoc_min_orientation_estimation_size() {
  assoc_min_orientation_estimation_size_ = 3;
  clear_has_assoc_min_orientation_estimation_size();
}
 float ModelConfigs::assoc_min_orientation_estimation_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size)
  return assoc_min_orientation_estimation_size_;
}
 void ModelConfigs::set_assoc_min_orientation_estimation_size(float value) {
  set_has_assoc_min_orientation_estimation_size();
  assoc_min_orientation_estimation_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size)
}

// optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
bool ModelConfigs::has_assoc_min_orientation_estimation_size_image() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void ModelConfigs::set_has_assoc_min_orientation_estimation_size_image() {
  _has_bits_[0] |= 0x80000000u;
}
void ModelConfigs::clear_has_assoc_min_orientation_estimation_size_image() {
  _has_bits_[0] &= ~0x80000000u;
}
void ModelConfigs::clear_assoc_min_orientation_estimation_size_image() {
  assoc_min_orientation_estimation_size_image_ = 10;
  clear_has_assoc_min_orientation_estimation_size_image();
}
 float ModelConfigs::assoc_min_orientation_estimation_size_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size_image)
  return assoc_min_orientation_estimation_size_image_;
}
 void ModelConfigs::set_assoc_min_orientation_estimation_size_image(float value) {
  set_has_assoc_min_orientation_estimation_size_image();
  assoc_min_orientation_estimation_size_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size_image)
}

// optional int32 max_cc_marker_match_num = 33 [default = 1];
bool ModelConfigs::has_max_cc_marker_match_num() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_max_cc_marker_match_num() {
  _has_bits_[1] |= 0x00000001u;
}
void ModelConfigs::clear_has_max_cc_marker_match_num() {
  _has_bits_[1] &= ~0x00000001u;
}
void ModelConfigs::clear_max_cc_marker_match_num() {
  max_cc_marker_match_num_ = 1;
  clear_has_max_cc_marker_match_num();
}
 ::google::protobuf::int32 ModelConfigs::max_cc_marker_match_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_cc_marker_match_num)
  return max_cc_marker_match_num_;
}
 void ModelConfigs::set_max_cc_marker_match_num(::google::protobuf::int32 value) {
  set_has_max_cc_marker_match_num();
  max_cc_marker_match_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_cc_marker_match_num)
}

// optional float slide_window_size = 34 [default = 15];
bool ModelConfigs::has_slide_window_size() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_slide_window_size() {
  _has_bits_[1] |= 0x00000002u;
}
void ModelConfigs::clear_has_slide_window_size() {
  _has_bits_[1] &= ~0x00000002u;
}
void ModelConfigs::clear_slide_window_size() {
  slide_window_size_ = 15;
  clear_has_slide_window_size();
}
 float ModelConfigs::slide_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size)
  return slide_window_size_;
}
 void ModelConfigs::set_slide_window_size(float value) {
  set_has_slide_window_size();
  slide_window_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size)
}

// optional float slide_window_size_image = 35 [default = 200];
bool ModelConfigs::has_slide_window_size_image() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_slide_window_size_image() {
  _has_bits_[1] |= 0x00000004u;
}
void ModelConfigs::clear_has_slide_window_size_image() {
  _has_bits_[1] &= ~0x00000004u;
}
void ModelConfigs::clear_slide_window_size_image() {
  slide_window_size_image_ = 200;
  clear_has_slide_window_size_image();
}
 float ModelConfigs::slide_window_size_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size_image)
  return slide_window_size_image_;
}
 void ModelConfigs::set_slide_window_size_image(float value) {
  set_has_slide_window_size_image();
  slide_window_size_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size_image)
}

// optional int32 slide_window_max_point_num = 36 [default = 3];
bool ModelConfigs::has_slide_window_max_point_num() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_slide_window_max_point_num() {
  _has_bits_[1] |= 0x00000008u;
}
void ModelConfigs::clear_has_slide_window_max_point_num() {
  _has_bits_[1] &= ~0x00000008u;
}
void ModelConfigs::clear_slide_window_max_point_num() {
  slide_window_max_point_num_ = 3;
  clear_has_slide_window_max_point_num();
}
 ::google::protobuf::int32 ModelConfigs::slide_window_max_point_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_max_point_num)
  return slide_window_max_point_num_;
}
 void ModelConfigs::set_slide_window_max_point_num(::google::protobuf::int32 value) {
  set_has_slide_window_max_point_num();
  slide_window_max_point_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_max_point_num)
}

// optional int32 max_group_prediction_marker_num = 37 [default = 3];
bool ModelConfigs::has_max_group_prediction_marker_num() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_max_group_prediction_marker_num() {
  _has_bits_[1] |= 0x00000010u;
}
void ModelConfigs::clear_has_max_group_prediction_marker_num() {
  _has_bits_[1] &= ~0x00000010u;
}
void ModelConfigs::clear_max_group_prediction_marker_num() {
  max_group_prediction_marker_num_ = 3;
  clear_has_max_group_prediction_marker_num();
}
 ::google::protobuf::int32 ModelConfigs::max_group_prediction_marker_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_group_prediction_marker_num)
  return max_group_prediction_marker_num_;
}
 void ModelConfigs::set_max_group_prediction_marker_num(::google::protobuf::int32 value) {
  set_has_max_group_prediction_marker_num();
  max_group_prediction_marker_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_group_prediction_marker_num)
}

// optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
bool ModelConfigs::has_orientation_estimation_skip_marker_num() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_orientation_estimation_skip_marker_num() {
  _has_bits_[1] |= 0x00000020u;
}
void ModelConfigs::clear_has_orientation_estimation_skip_marker_num() {
  _has_bits_[1] &= ~0x00000020u;
}
void ModelConfigs::clear_orientation_estimation_skip_marker_num() {
  orientation_estimation_skip_marker_num_ = 1;
  clear_has_orientation_estimation_skip_marker_num();
}
 ::google::protobuf::int32 ModelConfigs::orientation_estimation_skip_marker_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.orientation_estimation_skip_marker_num)
  return orientation_estimation_skip_marker_num_;
}
 void ModelConfigs::set_orientation_estimation_skip_marker_num(::google::protobuf::int32 value) {
  set_has_orientation_estimation_skip_marker_num();
  orientation_estimation_skip_marker_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.orientation_estimation_skip_marker_num)
}

// optional float lane_interval_distance = 39 [default = 4];
bool ModelConfigs::has_lane_interval_distance() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_lane_interval_distance() {
  _has_bits_[1] |= 0x00000040u;
}
void ModelConfigs::clear_has_lane_interval_distance() {
  _has_bits_[1] &= ~0x00000040u;
}
void ModelConfigs::clear_lane_interval_distance() {
  lane_interval_distance_ = 4;
  clear_has_lane_interval_distance();
}
 float ModelConfigs::lane_interval_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_interval_distance)
  return lane_interval_distance_;
}
 void ModelConfigs::set_lane_interval_distance(float value) {
  set_has_lane_interval_distance();
  lane_interval_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_interval_distance)
}

// optional float min_instance_size_prefiltered = 40 [default = 3];
bool ModelConfigs::has_min_instance_size_prefiltered() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void ModelConfigs::set_has_min_instance_size_prefiltered() {
  _has_bits_[1] |= 0x00000080u;
}
void ModelConfigs::clear_has_min_instance_size_prefiltered() {
  _has_bits_[1] &= ~0x00000080u;
}
void ModelConfigs::clear_min_instance_size_prefiltered() {
  min_instance_size_prefiltered_ = 3;
  clear_has_min_instance_size_prefiltered();
}
 float ModelConfigs::min_instance_size_prefiltered() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered)
  return min_instance_size_prefiltered_;
}
 void ModelConfigs::set_min_instance_size_prefiltered(float value) {
  set_has_min_instance_size_prefiltered();
  min_instance_size_prefiltered_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered)
}

// optional float min_instance_size_prefiltered_image = 41 [default = 20];
bool ModelConfigs::has_min_instance_size_prefiltered_image() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void ModelConfigs::set_has_min_instance_size_prefiltered_image() {
  _has_bits_[1] |= 0x00000100u;
}
void ModelConfigs::clear_has_min_instance_size_prefiltered_image() {
  _has_bits_[1] &= ~0x00000100u;
}
void ModelConfigs::clear_min_instance_size_prefiltered_image() {
  min_instance_size_prefiltered_image_ = 20;
  clear_has_min_instance_size_prefiltered_image();
}
 float ModelConfigs::min_instance_size_prefiltered_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered_image)
  return min_instance_size_prefiltered_image_;
}
 void ModelConfigs::set_min_instance_size_prefiltered_image(float value) {
  set_has_min_instance_size_prefiltered_image();
  min_instance_size_prefiltered_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered_image)
}

// optional float max_size_to_fit_straight_line = 42 [default = 10];
bool ModelConfigs::has_max_size_to_fit_straight_line() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void ModelConfigs::set_has_max_size_to_fit_straight_line() {
  _has_bits_[1] |= 0x00000200u;
}
void ModelConfigs::clear_has_max_size_to_fit_straight_line() {
  _has_bits_[1] &= ~0x00000200u;
}
void ModelConfigs::clear_max_size_to_fit_straight_line() {
  max_size_to_fit_straight_line_ = 10;
  clear_has_max_size_to_fit_straight_line();
}
 float ModelConfigs::max_size_to_fit_straight_line() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line)
  return max_size_to_fit_straight_line_;
}
 void ModelConfigs::set_max_size_to_fit_straight_line(float value) {
  set_has_max_size_to_fit_straight_line();
  max_size_to_fit_straight_line_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line)
}

// optional float max_size_to_fit_straight_line_image = 43 [default = 300];
bool ModelConfigs::has_max_size_to_fit_straight_line_image() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void ModelConfigs::set_has_max_size_to_fit_straight_line_image() {
  _has_bits_[1] |= 0x00000400u;
}
void ModelConfigs::clear_has_max_size_to_fit_straight_line_image() {
  _has_bits_[1] &= ~0x00000400u;
}
void ModelConfigs::clear_max_size_to_fit_straight_line_image() {
  max_size_to_fit_straight_line_image_ = 300;
  clear_has_max_size_to_fit_straight_line_image();
}
 float ModelConfigs::max_size_to_fit_straight_line_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line_image)
  return max_size_to_fit_straight_line_image_;
}
 void ModelConfigs::set_max_size_to_fit_straight_line_image(float value) {
  set_has_max_size_to_fit_straight_line_image();
  max_size_to_fit_straight_line_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line_image)
}

// optional float online_pitch_angle = 44 [default = -2.5];
bool ModelConfigs::has_online_pitch_angle() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void ModelConfigs::set_has_online_pitch_angle() {
  _has_bits_[1] |= 0x00000800u;
}
void ModelConfigs::clear_has_online_pitch_angle() {
  _has_bits_[1] &= ~0x00000800u;
}
void ModelConfigs::clear_online_pitch_angle() {
  online_pitch_angle_ = -2.5f;
  clear_has_online_pitch_angle();
}
 float ModelConfigs::online_pitch_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.online_pitch_angle)
  return online_pitch_angle_;
}
 void ModelConfigs::set_online_pitch_angle(float value) {
  set_has_online_pitch_angle();
  online_pitch_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.online_pitch_angle)
}

// optional float ground_height = 45 [default = 1.6];
bool ModelConfigs::has_ground_height() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void ModelConfigs::set_has_ground_height() {
  _has_bits_[1] |= 0x00001000u;
}
void ModelConfigs::clear_has_ground_height() {
  _has_bits_[1] &= ~0x00001000u;
}
void ModelConfigs::clear_ground_height() {
  ground_height_ = 1.6f;
  clear_has_ground_height();
}
 float ModelConfigs::ground_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.ground_height)
  return ground_height_;
}
 void ModelConfigs::set_ground_height(float value) {
  set_has_ground_height();
  ground_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.ground_height)
}

// optional float max_distance_to_see_for_transformer = 46 [default = 500];
bool ModelConfigs::has_max_distance_to_see_for_transformer() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void ModelConfigs::set_has_max_distance_to_see_for_transformer() {
  _has_bits_[1] |= 0x00002000u;
}
void ModelConfigs::clear_has_max_distance_to_see_for_transformer() {
  _has_bits_[1] &= ~0x00002000u;
}
void ModelConfigs::clear_max_distance_to_see_for_transformer() {
  max_distance_to_see_for_transformer_ = 500;
  clear_has_max_distance_to_see_for_transformer();
}
 float ModelConfigs::max_distance_to_see_for_transformer() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_distance_to_see_for_transformer)
  return max_distance_to_see_for_transformer_;
}
 void ModelConfigs::set_max_distance_to_see_for_transformer(float value) {
  set_has_max_distance_to_see_for_transformer();
  max_distance_to_see_for_transformer_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_distance_to_see_for_transformer)
}

// optional float lane_map_scale = 47 [default = 2];
bool ModelConfigs::has_lane_map_scale() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void ModelConfigs::set_has_lane_map_scale() {
  _has_bits_[1] |= 0x00004000u;
}
void ModelConfigs::clear_has_lane_map_scale() {
  _has_bits_[1] &= ~0x00004000u;
}
void ModelConfigs::clear_lane_map_scale() {
  lane_map_scale_ = 2;
  clear_has_lane_map_scale();
}
 float ModelConfigs::lane_map_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_scale)
  return lane_map_scale_;
}
 void ModelConfigs::set_lane_map_scale(float value) {
  set_has_lane_map_scale();
  lane_map_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_scale)
}

// optional int32 start_y_pos = 48 [default = 312];
bool ModelConfigs::has_start_y_pos() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void ModelConfigs::set_has_start_y_pos() {
  _has_bits_[1] |= 0x00008000u;
}
void ModelConfigs::clear_has_start_y_pos() {
  _has_bits_[1] &= ~0x00008000u;
}
void ModelConfigs::clear_start_y_pos() {
  start_y_pos_ = 312;
  clear_has_start_y_pos();
}
 ::google::protobuf::int32 ModelConfigs::start_y_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.start_y_pos)
  return start_y_pos_;
}
 void ModelConfigs::set_start_y_pos(::google::protobuf::int32 value) {
  set_has_start_y_pos();
  start_y_pos_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.start_y_pos)
}

// optional int32 lane_map_width = 49 [default = 960];
bool ModelConfigs::has_lane_map_width() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void ModelConfigs::set_has_lane_map_width() {
  _has_bits_[1] |= 0x00010000u;
}
void ModelConfigs::clear_has_lane_map_width() {
  _has_bits_[1] &= ~0x00010000u;
}
void ModelConfigs::clear_lane_map_width() {
  lane_map_width_ = 960;
  clear_has_lane_map_width();
}
 ::google::protobuf::int32 ModelConfigs::lane_map_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_width)
  return lane_map_width_;
}
 void ModelConfigs::set_lane_map_width(::google::protobuf::int32 value) {
  set_has_lane_map_width();
  lane_map_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_width)
}

// optional int32 lane_map_height = 50 [default = 384];
bool ModelConfigs::has_lane_map_height() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void ModelConfigs::set_has_lane_map_height() {
  _has_bits_[1] |= 0x00020000u;
}
void ModelConfigs::clear_has_lane_map_height() {
  _has_bits_[1] &= ~0x00020000u;
}
void ModelConfigs::clear_lane_map_height() {
  lane_map_height_ = 384;
  clear_has_lane_map_height();
}
 ::google::protobuf::int32 ModelConfigs::lane_map_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_height)
  return lane_map_height_;
}
 void ModelConfigs::set_lane_map_height(::google::protobuf::int32 value) {
  set_has_lane_map_height();
  lane_map_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lane_post_process_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
