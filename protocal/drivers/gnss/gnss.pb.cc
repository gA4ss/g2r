// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/gnss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/gnss/gnss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss {

namespace {

const ::google::protobuf::Descriptor* Gnss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gnss_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Gnss_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RangeInfo_Constellation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GnssRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GnssRange_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fgnss_2fgnss_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fgnss_2fgnss_2eproto() {
  protobuf_AddDesc_drivers_2fgnss_2fgnss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/gnss/gnss.proto");
  GOOGLE_CHECK(file != NULL);
  Gnss_descriptor_ = file->message_type(0);
  static const int Gnss_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, velocity_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, position_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, linear_velocity_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, num_sats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, solution_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, position_type_),
  };
  Gnss_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gnss_descriptor_,
      Gnss::default_instance_,
      Gnss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gnss),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gnss, _internal_metadata_),
      -1);
  Gnss_Type_descriptor_ = Gnss_descriptor_->enum_type(0);
  RangeInfo_descriptor_ = file->message_type(1);
  static const int RangeInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, carrier_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, pseudorange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, pseudorange_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, carrier_phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, carrier_phase_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, doppler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, doppler_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, cno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, lock_time_),
  };
  RangeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeInfo_descriptor_,
      RangeInfo::default_instance_,
      RangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, _internal_metadata_),
      -1);
  RangeInfo_Constellation_descriptor_ = RangeInfo_descriptor_->enum_type(0);
  GnssRange_descriptor_ = file->message_type(2);
  static const int GnssRange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssRange, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssRange, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssRange, ranges_),
  };
  GnssRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GnssRange_descriptor_,
      GnssRange::default_instance_,
      GnssRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssRange, _has_bits_[0]),
      -1,
      -1,
      sizeof(GnssRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssRange, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fgnss_2fgnss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gnss_descriptor_, &Gnss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeInfo_descriptor_, &RangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GnssRange_descriptor_, &GnssRange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fgnss_2fgnss_2eproto() {
  delete Gnss::default_instance_;
  delete Gnss_reflection_;
  delete RangeInfo::default_instance_;
  delete RangeInfo_reflection_;
  delete GnssRange::default_instance_;
  delete GnssRange_reflection_;
}

void protobuf_AddDesc_drivers_2fgnss_2fgnss_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fgnss_2fgnss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027drivers/gnss/gnss.proto\022\023apollo.driver"
    "s.gnss\032\023common/header.proto\032\025common/geom"
    "etry.proto\"\202\004\n\004Gnss\022%\n\006header\030\001 \001(\0132\025.ap"
    "ollo.common.Header\022\030\n\020measurement_time\030\002"
    " \001(\001\022\033\n\020velocity_latency\030\003 \001(\002:\0010\022)\n\010pos"
    "ition\030\004 \001(\0132\027.apollo.common.PointLLH\0220\n\020"
    "position_std_dev\030\005 \001(\0132\026.apollo.common.P"
    "oint3D\022/\n\017linear_velocity\030\006 \001(\0132\026.apollo"
    ".common.Point3D\0227\n\027linear_velocity_std_d"
    "ev\030\007 \001(\0132\026.apollo.common.Point3D\022\020\n\010num_"
    "sats\030\010 \001(\005\022,\n\004type\030\t \001(\0162\036.apollo.driver"
    "s.gnss.Gnss.Type\022\027\n\017solution_status\030\n \001("
    "\r\022\025\n\rposition_type\030\013 \001(\r\"e\n\004Type\022\013\n\007INVA"
    "LID\020\000\022\016\n\nPROPAGATED\020\001\022\n\n\006SINGLE\020\002\022\013\n\007PSR"
    "DIFF\020\003\022\007\n\003PPP\020\004\022\r\n\tRTK_FLOAT\020\005\022\017\n\013RTK_IN"
    "TEGER\020\006\"\251\003\n\tRangeInfo\022H\n\rconstellation\030\001"
    " \001(\0162,.apollo.drivers.gnss.RangeInfo.Con"
    "stellation:\003GPS\022\013\n\003prn\030\002 \001(\005\022\031\n\021carrier_"
    "frequency\030\003 \001(\007\022\030\n\013pseudorange\030\004 \001(\001:\003na"
    "n\022 \n\023pseudorange_std_dev\030\005 \001(\002:\003nan\022\032\n\rc"
    "arrier_phase\030\006 \001(\001:\003nan\022\"\n\025carrier_phase"
    "_std_dev\030\007 \001(\002:\003nan\022\024\n\007doppler\030\010 \001(\002:\003na"
    "n\022\034\n\017doppler_std_dev\030\t \001(\002:\003nan\022\017\n\003cno\030\n"
    " \001(\005:\002-1\022\025\n\tlock_time\030\013 \001(\005:\002-1\"R\n\rConst"
    "ellation\022\007\n\003GPS\020\000\022\013\n\007GLONASS\020\001\022\010\n\004SBAS\020\002"
    "\022\013\n\007GALILEO\020\003\022\n\n\006BEIDOU\020\004\022\010\n\004QZSS\020\005\"|\n\tG"
    "nssRange\022%\n\006header\030\001 \001(\0132\025.apollo.common"
    ".Header\022\030\n\020measurement_time\030\002 \001(\001\022.\n\006ran"
    "ges\030\003 \003(\0132\036.apollo.drivers.gnss.RangeInf"
    "o", 1161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/gnss/gnss.proto", &protobuf_RegisterTypes);
  Gnss::default_instance_ = new Gnss();
  RangeInfo::default_instance_ = new RangeInfo();
  GnssRange::default_instance_ = new GnssRange();
  Gnss::default_instance_->InitAsDefaultInstance();
  RangeInfo::default_instance_->InitAsDefaultInstance();
  GnssRange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fgnss_2fgnss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fgnss_2fgnss_2eproto {
  StaticDescriptorInitializer_drivers_2fgnss_2fgnss_2eproto() {
    protobuf_AddDesc_drivers_2fgnss_2fgnss_2eproto();
  }
} static_descriptor_initializer_drivers_2fgnss_2fgnss_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Gnss_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gnss_Type_descriptor_;
}
bool Gnss_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gnss_Type Gnss::INVALID;
const Gnss_Type Gnss::PROPAGATED;
const Gnss_Type Gnss::SINGLE;
const Gnss_Type Gnss::PSRDIFF;
const Gnss_Type Gnss::PPP;
const Gnss_Type Gnss::RTK_FLOAT;
const Gnss_Type Gnss::RTK_INTEGER;
const Gnss_Type Gnss::Type_MIN;
const Gnss_Type Gnss::Type_MAX;
const int Gnss::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss::kHeaderFieldNumber;
const int Gnss::kMeasurementTimeFieldNumber;
const int Gnss::kVelocityLatencyFieldNumber;
const int Gnss::kPositionFieldNumber;
const int Gnss::kPositionStdDevFieldNumber;
const int Gnss::kLinearVelocityFieldNumber;
const int Gnss::kLinearVelocityStdDevFieldNumber;
const int Gnss::kNumSatsFieldNumber;
const int Gnss::kTypeFieldNumber;
const int Gnss::kSolutionStatusFieldNumber;
const int Gnss::kPositionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss::Gnss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.Gnss)
}

void Gnss::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  position_ = const_cast< ::apollo::common::PointLLH*>(&::apollo::common::PointLLH::default_instance());
  position_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_velocity_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
}

Gnss::Gnss(const Gnss& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Gnss)
}

void Gnss::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  measurement_time_ = 0;
  velocity_latency_ = 0;
  position_ = NULL;
  position_std_dev_ = NULL;
  linear_velocity_ = NULL;
  linear_velocity_std_dev_ = NULL;
  num_sats_ = 0;
  type_ = 0;
  solution_status_ = 0u;
  position_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Gnss)
  SharedDtor();
}

void Gnss::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete position_;
    delete position_std_dev_;
    delete linear_velocity_;
    delete linear_velocity_std_dev_;
  }
}

void Gnss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gnss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gnss_descriptor_;
}

const Gnss& Gnss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_2eproto();
  return *default_instance_;
}

Gnss* Gnss::default_instance_ = NULL;

Gnss* Gnss::New(::google::protobuf::Arena* arena) const {
  Gnss* n = new Gnss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Gnss)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Gnss, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Gnss*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(velocity_latency_, num_sats_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    measurement_time_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::apollo::common::PointLLH::Clear();
    }
    if (has_position_std_dev()) {
      if (position_std_dev_ != NULL) position_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_velocity()) {
      if (linear_velocity_ != NULL) linear_velocity_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_velocity_std_dev()) {
      if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::apollo::common::Point3D::Clear();
    }
  }
  ZR_(type_, position_type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gnss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.Gnss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (tag == 17) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_velocity_latency;
        break;
      }

      // optional float velocity_latency = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_velocity_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_latency_)));
          set_has_velocity_latency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // optional .apollo.common.PointLLH position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_position_std_dev;
        break;
      }

      // optional .apollo.common.Point3D position_std_dev = 5;
      case 5: {
        if (tag == 42) {
         parse_position_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_linear_velocity;
        break;
      }

      // optional .apollo.common.Point3D linear_velocity = 6;
      case 6: {
        if (tag == 50) {
         parse_linear_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_linear_velocity_std_dev;
        break;
      }

      // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
      case 7: {
        if (tag == 58) {
         parse_linear_velocity_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_sats;
        break;
      }

      // optional int32 num_sats = 8;
      case 8: {
        if (tag == 64) {
         parse_num_sats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sats_)));
          set_has_num_sats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .apollo.drivers.gnss.Gnss.Type type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::Gnss_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::drivers::gnss::Gnss_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_solution_status;
        break;
      }

      // optional uint32 solution_status = 10;
      case 10: {
        if (tag == 80) {
         parse_solution_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
          set_has_solution_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_position_type;
        break;
      }

      // optional uint32 position_type = 11;
      case 11: {
        if (tag == 88) {
         parse_position_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
          set_has_position_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.Gnss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.Gnss)
  return false;
#undef DO_
}

void Gnss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.Gnss)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional float velocity_latency = 3 [default = 0];
  if (has_velocity_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->velocity_latency(), output);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->position_, output);
  }

  // optional .apollo.common.Point3D position_std_dev = 5;
  if (has_position_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->position_std_dev_, output);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->linear_velocity_, output);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  if (has_linear_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->linear_velocity_std_dev_, output);
  }

  // optional int32 num_sats = 8;
  if (has_num_sats()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_sats(), output);
  }

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint32 solution_status = 10;
  if (has_solution_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->solution_status(), output);
  }

  // optional uint32 position_type = 11;
  if (has_position_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->position_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.Gnss)
}

::google::protobuf::uint8* Gnss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Gnss)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional float velocity_latency = 3 [default = 0];
  if (has_velocity_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->velocity_latency(), target);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->position_, false, target);
  }

  // optional .apollo.common.Point3D position_std_dev = 5;
  if (has_position_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->position_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->linear_velocity_, false, target);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  if (has_linear_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->linear_velocity_std_dev_, false, target);
  }

  // optional int32 num_sats = 8;
  if (has_num_sats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_sats(), target);
  }

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint32 solution_status = 10;
  if (has_solution_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->solution_status(), target);
  }

  // optional uint32 position_type = 11;
  if (has_position_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->position_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Gnss)
  return target;
}

int Gnss::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Gnss)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional float velocity_latency = 3 [default = 0];
    if (has_velocity_latency()) {
      total_size += 1 + 4;
    }

    // optional .apollo.common.PointLLH position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .apollo.common.Point3D position_std_dev = 5;
    if (has_position_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity = 6;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
    if (has_linear_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_velocity_std_dev_);
    }

    // optional int32 num_sats = 8;
    if (has_num_sats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sats());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .apollo.drivers.gnss.Gnss.Type type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 solution_status = 10;
    if (has_solution_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_status());
    }

    // optional uint32 position_type = 11;
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gnss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.Gnss)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Gnss* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.Gnss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.Gnss)
    MergeFrom(*source);
  }
}

void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Gnss)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
    if (from.has_velocity_latency()) {
      set_velocity_latency(from.velocity_latency());
    }
    if (from.has_position()) {
      mutable_position()->::apollo::common::PointLLH::MergeFrom(from.position());
    }
    if (from.has_position_std_dev()) {
      mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from.position_std_dev());
    }
    if (from.has_linear_velocity()) {
      mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from.linear_velocity());
    }
    if (from.has_linear_velocity_std_dev()) {
      mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_velocity_std_dev());
    }
    if (from.has_num_sats()) {
      set_num_sats(from.num_sats());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_solution_status()) {
      set_solution_status(from.solution_status());
    }
    if (from.has_position_type()) {
      set_position_type(from.position_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gnss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {

  return true;
}

void Gnss::Swap(Gnss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss::InternalSwap(Gnss* other) {
  std::swap(header_, other->header_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(velocity_latency_, other->velocity_latency_);
  std::swap(position_, other->position_);
  std::swap(position_std_dev_, other->position_std_dev_);
  std::swap(linear_velocity_, other->linear_velocity_);
  std::swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  std::swap(num_sats_, other->num_sats_);
  std::swap(type_, other->type_);
  std::swap(solution_status_, other->solution_status_);
  std::swap(position_type_, other->position_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gnss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gnss_descriptor_;
  metadata.reflection = Gnss_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gnss

// optional .apollo.common.Header header = 1;
bool Gnss::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gnss::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Gnss::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gnss::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& Gnss::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* Gnss::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.header)
  return header_;
}
::apollo::common::Header* Gnss::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Gnss::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.header)
}

// optional double measurement_time = 2;
bool Gnss::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gnss::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Gnss::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gnss::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double Gnss::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.measurement_time)
  return measurement_time_;
}
 void Gnss::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.measurement_time)
}

// optional float velocity_latency = 3 [default = 0];
bool Gnss::has_velocity_latency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gnss::set_has_velocity_latency() {
  _has_bits_[0] |= 0x00000004u;
}
void Gnss::clear_has_velocity_latency() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gnss::clear_velocity_latency() {
  velocity_latency_ = 0;
  clear_has_velocity_latency();
}
 float Gnss::velocity_latency() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.velocity_latency)
  return velocity_latency_;
}
 void Gnss::set_velocity_latency(float value) {
  set_has_velocity_latency();
  velocity_latency_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.velocity_latency)
}

// optional .apollo.common.PointLLH position = 4;
bool Gnss::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gnss::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
void Gnss::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gnss::clear_position() {
  if (position_ != NULL) position_->::apollo::common::PointLLH::Clear();
  clear_has_position();
}
const ::apollo::common::PointLLH& Gnss::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::common::PointLLH* Gnss::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.position)
  return position_;
}
::apollo::common::PointLLH* Gnss::release_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.position)
  clear_has_position();
  ::apollo::common::PointLLH* temp = position_;
  position_ = NULL;
  return temp;
}
void Gnss::set_allocated_position(::apollo::common::PointLLH* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.position)
}

// optional .apollo.common.Point3D position_std_dev = 5;
bool Gnss::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gnss::set_has_position_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
void Gnss::clear_has_position_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gnss::clear_position_std_dev() {
  if (position_std_dev_ != NULL) position_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_position_std_dev();
}
const ::apollo::common::Point3D& Gnss::position_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position_std_dev)
  return position_std_dev_ != NULL ? *position_std_dev_ : *default_instance_->position_std_dev_;
}
::apollo::common::Point3D* Gnss::mutable_position_std_dev() {
  set_has_position_std_dev();
  if (position_std_dev_ == NULL) {
    position_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.position_std_dev)
  return position_std_dev_;
}
::apollo::common::Point3D* Gnss::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.position_std_dev)
  clear_has_position_std_dev();
  ::apollo::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
void Gnss::set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev) {
  delete position_std_dev_;
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    set_has_position_std_dev();
  } else {
    clear_has_position_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.position_std_dev)
}

// optional .apollo.common.Point3D linear_velocity = 6;
bool Gnss::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gnss::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
void Gnss::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gnss::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::apollo::common::Point3D::Clear();
  clear_has_linear_velocity();
}
const ::apollo::common::Point3D& Gnss::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
::apollo::common::Point3D* Gnss::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.linear_velocity)
  return linear_velocity_;
}
::apollo::common::Point3D* Gnss::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.linear_velocity)
  clear_has_linear_velocity();
  ::apollo::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
void Gnss::set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity)
}

// optional .apollo.common.Point3D linear_velocity_std_dev = 7;
bool Gnss::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gnss::set_has_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000040u;
}
void Gnss::clear_has_linear_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gnss::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_linear_velocity_std_dev();
}
const ::apollo::common::Point3D& Gnss::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  return linear_velocity_std_dev_ != NULL ? *linear_velocity_std_dev_ : *default_instance_->linear_velocity_std_dev_;
}
::apollo::common::Point3D* Gnss::mutable_linear_velocity_std_dev() {
  set_has_linear_velocity_std_dev();
  if (linear_velocity_std_dev_ == NULL) {
    linear_velocity_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
::apollo::common::Point3D* Gnss::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  clear_has_linear_velocity_std_dev();
  ::apollo::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
void Gnss::set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev) {
  delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    set_has_linear_velocity_std_dev();
  } else {
    clear_has_linear_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
}

// optional int32 num_sats = 8;
bool Gnss::has_num_sats() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gnss::set_has_num_sats() {
  _has_bits_[0] |= 0x00000080u;
}
void Gnss::clear_has_num_sats() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gnss::clear_num_sats() {
  num_sats_ = 0;
  clear_has_num_sats();
}
 ::google::protobuf::int32 Gnss::num_sats() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.num_sats)
  return num_sats_;
}
 void Gnss::set_num_sats(::google::protobuf::int32 value) {
  set_has_num_sats();
  num_sats_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.num_sats)
}

// optional .apollo.drivers.gnss.Gnss.Type type = 9;
bool Gnss::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gnss::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Gnss::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gnss::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::drivers::gnss::Gnss_Type Gnss::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.type)
  return static_cast< ::apollo::drivers::gnss::Gnss_Type >(type_);
}
 void Gnss::set_type(::apollo::drivers::gnss::Gnss_Type value) {
  assert(::apollo::drivers::gnss::Gnss_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.type)
}

// optional uint32 solution_status = 10;
bool Gnss::has_solution_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gnss::set_has_solution_status() {
  _has_bits_[0] |= 0x00000200u;
}
void Gnss::clear_has_solution_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gnss::clear_solution_status() {
  solution_status_ = 0u;
  clear_has_solution_status();
}
 ::google::protobuf::uint32 Gnss::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.solution_status)
  return solution_status_;
}
 void Gnss::set_solution_status(::google::protobuf::uint32 value) {
  set_has_solution_status();
  solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.solution_status)
}

// optional uint32 position_type = 11;
bool Gnss::has_position_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gnss::set_has_position_type() {
  _has_bits_[0] |= 0x00000400u;
}
void Gnss::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gnss::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
 ::google::protobuf::uint32 Gnss::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position_type)
  return position_type_;
}
 void Gnss::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.position_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RangeInfo_Constellation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeInfo_Constellation_descriptor_;
}
bool RangeInfo_Constellation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RangeInfo_Constellation RangeInfo::GPS;
const RangeInfo_Constellation RangeInfo::GLONASS;
const RangeInfo_Constellation RangeInfo::SBAS;
const RangeInfo_Constellation RangeInfo::GALILEO;
const RangeInfo_Constellation RangeInfo::BEIDOU;
const RangeInfo_Constellation RangeInfo::QZSS;
const RangeInfo_Constellation RangeInfo::Constellation_MIN;
const RangeInfo_Constellation RangeInfo::Constellation_MAX;
const int RangeInfo::Constellation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeInfo::kConstellationFieldNumber;
const int RangeInfo::kPrnFieldNumber;
const int RangeInfo::kCarrierFrequencyFieldNumber;
const int RangeInfo::kPseudorangeFieldNumber;
const int RangeInfo::kPseudorangeStdDevFieldNumber;
const int RangeInfo::kCarrierPhaseFieldNumber;
const int RangeInfo::kCarrierPhaseStdDevFieldNumber;
const int RangeInfo::kDopplerFieldNumber;
const int RangeInfo::kDopplerStdDevFieldNumber;
const int RangeInfo::kCnoFieldNumber;
const int RangeInfo::kLockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeInfo::RangeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.RangeInfo)
}

void RangeInfo::InitAsDefaultInstance() {
}

RangeInfo::RangeInfo(const RangeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.RangeInfo)
}

void RangeInfo::SharedCtor() {
  _cached_size_ = 0;
  constellation_ = 0;
  prn_ = 0;
  carrier_frequency_ = 0u;
  pseudorange_ = ::google::protobuf::internal::NaN();
  pseudorange_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  carrier_phase_ = ::google::protobuf::internal::NaN();
  carrier_phase_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  doppler_ = static_cast<float>(::google::protobuf::internal::NaN());
  doppler_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  cno_ = -1;
  lock_time_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeInfo::~RangeInfo() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.RangeInfo)
  SharedDtor();
}

void RangeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeInfo_descriptor_;
}

const RangeInfo& RangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_2eproto();
  return *default_instance_;
}

RangeInfo* RangeInfo::default_instance_ = NULL;

RangeInfo* RangeInfo::New(::google::protobuf::Arena* arena) const {
  RangeInfo* n = new RangeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.RangeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RangeInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RangeInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(constellation_, prn_);
    carrier_frequency_ = 0u;
    pseudorange_ = ::google::protobuf::internal::NaN();
    pseudorange_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
    carrier_phase_ = ::google::protobuf::internal::NaN();
    carrier_phase_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
    doppler_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  if (_has_bits_[8 / 32] & 1792u) {
    doppler_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
    cno_ = -1;
    lock_time_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.RangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::RangeInfo_Constellation_IsValid(value)) {
            set_constellation(static_cast< ::apollo::drivers::gnss::RangeInfo_Constellation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prn;
        break;
      }

      // optional int32 prn = 2;
      case 2: {
        if (tag == 16) {
         parse_prn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prn_)));
          set_has_prn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_carrier_frequency;
        break;
      }

      // optional fixed32 carrier_frequency = 3;
      case 3: {
        if (tag == 29) {
         parse_carrier_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &carrier_frequency_)));
          set_has_carrier_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pseudorange;
        break;
      }

      // optional double pseudorange = 4 [default = nan];
      case 4: {
        if (tag == 33) {
         parse_pseudorange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudorange_)));
          set_has_pseudorange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pseudorange_std_dev;
        break;
      }

      // optional float pseudorange_std_dev = 5 [default = nan];
      case 5: {
        if (tag == 45) {
         parse_pseudorange_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pseudorange_std_dev_)));
          set_has_pseudorange_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_carrier_phase;
        break;
      }

      // optional double carrier_phase = 6 [default = nan];
      case 6: {
        if (tag == 49) {
         parse_carrier_phase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrier_phase_)));
          set_has_carrier_phase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_carrier_phase_std_dev;
        break;
      }

      // optional float carrier_phase_std_dev = 7 [default = nan];
      case 7: {
        if (tag == 61) {
         parse_carrier_phase_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrier_phase_std_dev_)));
          set_has_carrier_phase_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_doppler;
        break;
      }

      // optional float doppler = 8 [default = nan];
      case 8: {
        if (tag == 69) {
         parse_doppler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &doppler_)));
          set_has_doppler();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_doppler_std_dev;
        break;
      }

      // optional float doppler_std_dev = 9 [default = nan];
      case 9: {
        if (tag == 77) {
         parse_doppler_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &doppler_std_dev_)));
          set_has_doppler_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cno;
        break;
      }

      // optional int32 cno = 10 [default = -1];
      case 10: {
        if (tag == 80) {
         parse_cno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cno_)));
          set_has_cno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lock_time;
        break;
      }

      // optional int32 lock_time = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_lock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_time_)));
          set_has_lock_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.RangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.RangeInfo)
  return false;
#undef DO_
}

void RangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.RangeInfo)
  // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->constellation(), output);
  }

  // optional int32 prn = 2;
  if (has_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prn(), output);
  }

  // optional fixed32 carrier_frequency = 3;
  if (has_carrier_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->carrier_frequency(), output);
  }

  // optional double pseudorange = 4 [default = nan];
  if (has_pseudorange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pseudorange(), output);
  }

  // optional float pseudorange_std_dev = 5 [default = nan];
  if (has_pseudorange_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pseudorange_std_dev(), output);
  }

  // optional double carrier_phase = 6 [default = nan];
  if (has_carrier_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->carrier_phase(), output);
  }

  // optional float carrier_phase_std_dev = 7 [default = nan];
  if (has_carrier_phase_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->carrier_phase_std_dev(), output);
  }

  // optional float doppler = 8 [default = nan];
  if (has_doppler()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->doppler(), output);
  }

  // optional float doppler_std_dev = 9 [default = nan];
  if (has_doppler_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->doppler_std_dev(), output);
  }

  // optional int32 cno = 10 [default = -1];
  if (has_cno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cno(), output);
  }

  // optional int32 lock_time = 11 [default = -1];
  if (has_lock_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lock_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.RangeInfo)
}

::google::protobuf::uint8* RangeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.RangeInfo)
  // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->constellation(), target);
  }

  // optional int32 prn = 2;
  if (has_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prn(), target);
  }

  // optional fixed32 carrier_frequency = 3;
  if (has_carrier_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->carrier_frequency(), target);
  }

  // optional double pseudorange = 4 [default = nan];
  if (has_pseudorange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pseudorange(), target);
  }

  // optional float pseudorange_std_dev = 5 [default = nan];
  if (has_pseudorange_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pseudorange_std_dev(), target);
  }

  // optional double carrier_phase = 6 [default = nan];
  if (has_carrier_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->carrier_phase(), target);
  }

  // optional float carrier_phase_std_dev = 7 [default = nan];
  if (has_carrier_phase_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->carrier_phase_std_dev(), target);
  }

  // optional float doppler = 8 [default = nan];
  if (has_doppler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->doppler(), target);
  }

  // optional float doppler_std_dev = 9 [default = nan];
  if (has_doppler_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->doppler_std_dev(), target);
  }

  // optional int32 cno = 10 [default = -1];
  if (has_cno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cno(), target);
  }

  // optional int32 lock_time = 11 [default = -1];
  if (has_lock_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lock_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.RangeInfo)
  return target;
}

int RangeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.RangeInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->constellation());
    }

    // optional int32 prn = 2;
    if (has_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prn());
    }

    // optional fixed32 carrier_frequency = 3;
    if (has_carrier_frequency()) {
      total_size += 1 + 4;
    }

    // optional double pseudorange = 4 [default = nan];
    if (has_pseudorange()) {
      total_size += 1 + 8;
    }

    // optional float pseudorange_std_dev = 5 [default = nan];
    if (has_pseudorange_std_dev()) {
      total_size += 1 + 4;
    }

    // optional double carrier_phase = 6 [default = nan];
    if (has_carrier_phase()) {
      total_size += 1 + 8;
    }

    // optional float carrier_phase_std_dev = 7 [default = nan];
    if (has_carrier_phase_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float doppler = 8 [default = nan];
    if (has_doppler()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float doppler_std_dev = 9 [default = nan];
    if (has_doppler_std_dev()) {
      total_size += 1 + 4;
    }

    // optional int32 cno = 10 [default = -1];
    if (has_cno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cno());
    }

    // optional int32 lock_time = 11 [default = -1];
    if (has_lock_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.RangeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RangeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.RangeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.RangeInfo)
    MergeFrom(*source);
  }
}

void RangeInfo::MergeFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.RangeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
    if (from.has_prn()) {
      set_prn(from.prn());
    }
    if (from.has_carrier_frequency()) {
      set_carrier_frequency(from.carrier_frequency());
    }
    if (from.has_pseudorange()) {
      set_pseudorange(from.pseudorange());
    }
    if (from.has_pseudorange_std_dev()) {
      set_pseudorange_std_dev(from.pseudorange_std_dev());
    }
    if (from.has_carrier_phase()) {
      set_carrier_phase(from.carrier_phase());
    }
    if (from.has_carrier_phase_std_dev()) {
      set_carrier_phase_std_dev(from.carrier_phase_std_dev());
    }
    if (from.has_doppler()) {
      set_doppler(from.doppler());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_doppler_std_dev()) {
      set_doppler_std_dev(from.doppler_std_dev());
    }
    if (from.has_cno()) {
      set_cno(from.cno());
    }
    if (from.has_lock_time()) {
      set_lock_time(from.lock_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeInfo::CopyFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeInfo::IsInitialized() const {

  return true;
}

void RangeInfo::Swap(RangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeInfo::InternalSwap(RangeInfo* other) {
  std::swap(constellation_, other->constellation_);
  std::swap(prn_, other->prn_);
  std::swap(carrier_frequency_, other->carrier_frequency_);
  std::swap(pseudorange_, other->pseudorange_);
  std::swap(pseudorange_std_dev_, other->pseudorange_std_dev_);
  std::swap(carrier_phase_, other->carrier_phase_);
  std::swap(carrier_phase_std_dev_, other->carrier_phase_std_dev_);
  std::swap(doppler_, other->doppler_);
  std::swap(doppler_std_dev_, other->doppler_std_dev_);
  std::swap(cno_, other->cno_);
  std::swap(lock_time_, other->lock_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeInfo_descriptor_;
  metadata.reflection = RangeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeInfo

// optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
bool RangeInfo::has_constellation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeInfo::set_has_constellation() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeInfo::clear_has_constellation() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeInfo::clear_constellation() {
  constellation_ = 0;
  clear_has_constellation();
}
 ::apollo::drivers::gnss::RangeInfo_Constellation RangeInfo::constellation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.constellation)
  return static_cast< ::apollo::drivers::gnss::RangeInfo_Constellation >(constellation_);
}
 void RangeInfo::set_constellation(::apollo::drivers::gnss::RangeInfo_Constellation value) {
  assert(::apollo::drivers::gnss::RangeInfo_Constellation_IsValid(value));
  set_has_constellation();
  constellation_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.constellation)
}

// optional int32 prn = 2;
bool RangeInfo::has_prn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangeInfo::set_has_prn() {
  _has_bits_[0] |= 0x00000002u;
}
void RangeInfo::clear_has_prn() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangeInfo::clear_prn() {
  prn_ = 0;
  clear_has_prn();
}
 ::google::protobuf::int32 RangeInfo::prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.prn)
  return prn_;
}
 void RangeInfo::set_prn(::google::protobuf::int32 value) {
  set_has_prn();
  prn_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.prn)
}

// optional fixed32 carrier_frequency = 3;
bool RangeInfo::has_carrier_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangeInfo::set_has_carrier_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
void RangeInfo::clear_has_carrier_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangeInfo::clear_carrier_frequency() {
  carrier_frequency_ = 0u;
  clear_has_carrier_frequency();
}
 ::google::protobuf::uint32 RangeInfo::carrier_frequency() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.carrier_frequency)
  return carrier_frequency_;
}
 void RangeInfo::set_carrier_frequency(::google::protobuf::uint32 value) {
  set_has_carrier_frequency();
  carrier_frequency_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.carrier_frequency)
}

// optional double pseudorange = 4 [default = nan];
bool RangeInfo::has_pseudorange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RangeInfo::set_has_pseudorange() {
  _has_bits_[0] |= 0x00000008u;
}
void RangeInfo::clear_has_pseudorange() {
  _has_bits_[0] &= ~0x00000008u;
}
void RangeInfo::clear_pseudorange() {
  pseudorange_ = ::google::protobuf::internal::NaN();
  clear_has_pseudorange();
}
 double RangeInfo::pseudorange() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.pseudorange)
  return pseudorange_;
}
 void RangeInfo::set_pseudorange(double value) {
  set_has_pseudorange();
  pseudorange_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.pseudorange)
}

// optional float pseudorange_std_dev = 5 [default = nan];
bool RangeInfo::has_pseudorange_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RangeInfo::set_has_pseudorange_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
void RangeInfo::clear_has_pseudorange_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
void RangeInfo::clear_pseudorange_std_dev() {
  pseudorange_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_pseudorange_std_dev();
}
 float RangeInfo::pseudorange_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.pseudorange_std_dev)
  return pseudorange_std_dev_;
}
 void RangeInfo::set_pseudorange_std_dev(float value) {
  set_has_pseudorange_std_dev();
  pseudorange_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.pseudorange_std_dev)
}

// optional double carrier_phase = 6 [default = nan];
bool RangeInfo::has_carrier_phase() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RangeInfo::set_has_carrier_phase() {
  _has_bits_[0] |= 0x00000020u;
}
void RangeInfo::clear_has_carrier_phase() {
  _has_bits_[0] &= ~0x00000020u;
}
void RangeInfo::clear_carrier_phase() {
  carrier_phase_ = ::google::protobuf::internal::NaN();
  clear_has_carrier_phase();
}
 double RangeInfo::carrier_phase() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.carrier_phase)
  return carrier_phase_;
}
 void RangeInfo::set_carrier_phase(double value) {
  set_has_carrier_phase();
  carrier_phase_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.carrier_phase)
}

// optional float carrier_phase_std_dev = 7 [default = nan];
bool RangeInfo::has_carrier_phase_std_dev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RangeInfo::set_has_carrier_phase_std_dev() {
  _has_bits_[0] |= 0x00000040u;
}
void RangeInfo::clear_has_carrier_phase_std_dev() {
  _has_bits_[0] &= ~0x00000040u;
}
void RangeInfo::clear_carrier_phase_std_dev() {
  carrier_phase_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_carrier_phase_std_dev();
}
 float RangeInfo::carrier_phase_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.carrier_phase_std_dev)
  return carrier_phase_std_dev_;
}
 void RangeInfo::set_carrier_phase_std_dev(float value) {
  set_has_carrier_phase_std_dev();
  carrier_phase_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.carrier_phase_std_dev)
}

// optional float doppler = 8 [default = nan];
bool RangeInfo::has_doppler() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RangeInfo::set_has_doppler() {
  _has_bits_[0] |= 0x00000080u;
}
void RangeInfo::clear_has_doppler() {
  _has_bits_[0] &= ~0x00000080u;
}
void RangeInfo::clear_doppler() {
  doppler_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_doppler();
}
 float RangeInfo::doppler() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.doppler)
  return doppler_;
}
 void RangeInfo::set_doppler(float value) {
  set_has_doppler();
  doppler_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.doppler)
}

// optional float doppler_std_dev = 9 [default = nan];
bool RangeInfo::has_doppler_std_dev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RangeInfo::set_has_doppler_std_dev() {
  _has_bits_[0] |= 0x00000100u;
}
void RangeInfo::clear_has_doppler_std_dev() {
  _has_bits_[0] &= ~0x00000100u;
}
void RangeInfo::clear_doppler_std_dev() {
  doppler_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_doppler_std_dev();
}
 float RangeInfo::doppler_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.doppler_std_dev)
  return doppler_std_dev_;
}
 void RangeInfo::set_doppler_std_dev(float value) {
  set_has_doppler_std_dev();
  doppler_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.doppler_std_dev)
}

// optional int32 cno = 10 [default = -1];
bool RangeInfo::has_cno() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RangeInfo::set_has_cno() {
  _has_bits_[0] |= 0x00000200u;
}
void RangeInfo::clear_has_cno() {
  _has_bits_[0] &= ~0x00000200u;
}
void RangeInfo::clear_cno() {
  cno_ = -1;
  clear_has_cno();
}
 ::google::protobuf::int32 RangeInfo::cno() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.cno)
  return cno_;
}
 void RangeInfo::set_cno(::google::protobuf::int32 value) {
  set_has_cno();
  cno_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.cno)
}

// optional int32 lock_time = 11 [default = -1];
bool RangeInfo::has_lock_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RangeInfo::set_has_lock_time() {
  _has_bits_[0] |= 0x00000400u;
}
void RangeInfo::clear_has_lock_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void RangeInfo::clear_lock_time() {
  lock_time_ = -1;
  clear_has_lock_time();
}
 ::google::protobuf::int32 RangeInfo::lock_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.lock_time)
  return lock_time_;
}
 void RangeInfo::set_lock_time(::google::protobuf::int32 value) {
  set_has_lock_time();
  lock_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.lock_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssRange::kHeaderFieldNumber;
const int GnssRange::kMeasurementTimeFieldNumber;
const int GnssRange::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssRange::GnssRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssRange)
}

void GnssRange::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

GnssRange::GnssRange(const GnssRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssRange)
}

void GnssRange::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  measurement_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GnssRange::~GnssRange() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssRange)
  SharedDtor();
}

void GnssRange::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GnssRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssRange_descriptor_;
}

const GnssRange& GnssRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_2eproto();
  return *default_instance_;
}

GnssRange* GnssRange::default_instance_ = NULL;

GnssRange* GnssRange::New(::google::protobuf::Arena* arena) const {
  GnssRange* n = new GnssRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssRange)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    measurement_time_ = 0;
  }
  ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GnssRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.GnssRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (tag == 17) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranges;
        break;
      }

      // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
      case 3: {
        if (tag == 26) {
         parse_ranges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.GnssRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.GnssRange)
  return false;
#undef DO_
}

void GnssRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.GnssRange)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranges(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.GnssRange)
}

::google::protobuf::uint8* GnssRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssRange)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ranges(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssRange)
  return target;
}

int GnssRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssRange)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  total_size += 1 * this->ranges_size();
  for (int i = 0; i < this->ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranges(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GnssRange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssRange)
    MergeFrom(*source);
  }
}

void GnssRange::MergeFrom(const GnssRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ranges_.MergeFrom(from.ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GnssRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssRange::CopyFrom(const GnssRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssRange::IsInitialized() const {

  return true;
}

void GnssRange::Swap(GnssRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssRange::InternalSwap(GnssRange* other) {
  std::swap(header_, other->header_);
  std::swap(measurement_time_, other->measurement_time_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GnssRange_descriptor_;
  metadata.reflection = GnssRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssRange

// optional .apollo.common.Header header = 1;
bool GnssRange::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GnssRange::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void GnssRange::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void GnssRange::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& GnssRange::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssRange.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* GnssRange::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssRange.header)
  return header_;
}
::apollo::common::Header* GnssRange::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssRange.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void GnssRange::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssRange.header)
}

// optional double measurement_time = 2;
bool GnssRange::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GnssRange::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000002u;
}
void GnssRange::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void GnssRange::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double GnssRange::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssRange.measurement_time)
  return measurement_time_;
}
 void GnssRange::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssRange.measurement_time)
}

// repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
int GnssRange::ranges_size() const {
  return ranges_.size();
}
void GnssRange::clear_ranges() {
  ranges_.Clear();
}
const ::apollo::drivers::gnss::RangeInfo& GnssRange::ranges(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssRange.ranges)
  return ranges_.Get(index);
}
::apollo::drivers::gnss::RangeInfo* GnssRange::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssRange.ranges)
  return ranges_.Mutable(index);
}
::apollo::drivers::gnss::RangeInfo* GnssRange::add_ranges() {
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.GnssRange.ranges)
  return ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::gnss::RangeInfo >*
GnssRange::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.GnssRange.ranges)
  return &ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::gnss::RangeInfo >&
GnssRange::ranges() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.GnssRange.ranges)
  return ranges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
