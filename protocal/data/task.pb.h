// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/task.proto

#ifndef PROTOBUF_data_2ftask_2eproto__INCLUDED
#define PROTOBUF_data_2ftask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "data/static_info.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_data_2ftask_2eproto();
void protobuf_AssignDesc_data_2ftask_2eproto();
void protobuf_ShutdownFile_data_2ftask_2eproto();

class Disengagement;
class MapPoint;
class Rosbag;
class Rosbag_Topic;
class Task;

enum Task_LoopType {
  Task_LoopType_UNKNOWN = 0,
  Task_LoopType_OPEN_LOOP = 1,
  Task_LoopType_CLOSE_LOOP = 2
};
bool Task_LoopType_IsValid(int value);
const Task_LoopType Task_LoopType_LoopType_MIN = Task_LoopType_UNKNOWN;
const Task_LoopType Task_LoopType_LoopType_MAX = Task_LoopType_CLOSE_LOOP;
const int Task_LoopType_LoopType_ARRAYSIZE = Task_LoopType_LoopType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_LoopType_descriptor();
inline const ::std::string& Task_LoopType_Name(Task_LoopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_LoopType_descriptor(), value);
}
inline bool Task_LoopType_Parse(
    const ::std::string& name, Task_LoopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_LoopType>(
    Task_LoopType_descriptor(), name, value);
}
// ===================================================================

class MapPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.data.MapPoint) */ {
 public:
  MapPoint();
  virtual ~MapPoint();

  MapPoint(const MapPoint& from);

  inline MapPoint& operator=(const MapPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapPoint& default_instance();

  void Swap(MapPoint* other);

  // implements Message ----------------------------------------------

  inline MapPoint* New() const { return New(NULL); }

  MapPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapPoint& from);
  void MergeFrom(const MapPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:apollo.data.MapPoint)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  friend void  protobuf_AddDesc_data_2ftask_2eproto();
  friend void protobuf_AssignDesc_data_2ftask_2eproto();
  friend void protobuf_ShutdownFile_data_2ftask_2eproto();

  void InitAsDefaultInstance();
  static MapPoint* default_instance_;
};
// -------------------------------------------------------------------

class Rosbag_Topic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.data.Rosbag.Topic) */ {
 public:
  Rosbag_Topic();
  virtual ~Rosbag_Topic();

  Rosbag_Topic(const Rosbag_Topic& from);

  inline Rosbag_Topic& operator=(const Rosbag_Topic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rosbag_Topic& default_instance();

  void Swap(Rosbag_Topic* other);

  // implements Message ----------------------------------------------

  inline Rosbag_Topic* New() const { return New(NULL); }

  Rosbag_Topic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rosbag_Topic& from);
  void MergeFrom(const Rosbag_Topic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rosbag_Topic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg_type = 1;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  const ::std::string& msg_type() const;
  void set_msg_type(const ::std::string& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  ::std::string* mutable_msg_type();
  ::std::string* release_msg_type();
  void set_allocated_msg_type(::std::string* msg_type);

  // optional int32 msg_count = 2;
  bool has_msg_count() const;
  void clear_msg_count();
  static const int kMsgCountFieldNumber = 2;
  ::google::protobuf::int32 msg_count() const;
  void set_msg_count(::google::protobuf::int32 value);

  // optional double frequency = 3;
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 3;
  double frequency() const;
  void set_frequency(double value);

  // @@protoc_insertion_point(class_scope:apollo.data.Rosbag.Topic)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_count();
  inline void clear_has_msg_count();
  inline void set_has_frequency();
  inline void clear_has_frequency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_type_;
  double frequency_;
  ::google::protobuf::int32 msg_count_;
  friend void  protobuf_AddDesc_data_2ftask_2eproto();
  friend void protobuf_AssignDesc_data_2ftask_2eproto();
  friend void protobuf_ShutdownFile_data_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Rosbag_Topic* default_instance_;
};
// -------------------------------------------------------------------

class Rosbag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.data.Rosbag) */ {
 public:
  Rosbag();
  virtual ~Rosbag();

  Rosbag(const Rosbag& from);

  inline Rosbag& operator=(const Rosbag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rosbag& default_instance();

  void Swap(Rosbag* other);

  // implements Message ----------------------------------------------

  inline Rosbag* New() const { return New(NULL); }

  Rosbag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rosbag& from);
  void MergeFrom(const Rosbag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rosbag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Rosbag_Topic Topic;

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // optional int32 version = 3;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional double start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  double start_time() const;
  void set_start_time(double value);

  // optional double end_time = 5;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  double end_time() const;
  void set_end_time(double value);

  // optional int32 msg_count = 6;
  bool has_msg_count() const;
  void clear_msg_count();
  static const int kMsgCountFieldNumber = 6;
  ::google::protobuf::int32 msg_count() const;
  void set_msg_count(::google::protobuf::int32 value);

  // map<string, .apollo.data.Rosbag.Topic> topics = 7;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >&
      topics() const;
  ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >*
      mutable_topics();

  // @@protoc_insertion_point(class_scope:apollo.data.Rosbag)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_msg_count();
  inline void clear_has_msg_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 size_;
  double start_time_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 msg_count_;
  double end_time_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::apollo::data::Rosbag_Topic,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Rosbag_TopicsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::apollo::data::Rosbag_Topic,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > topics_;
  friend void  protobuf_AddDesc_data_2ftask_2eproto();
  friend void protobuf_AssignDesc_data_2ftask_2eproto();
  friend void protobuf_ShutdownFile_data_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Rosbag* default_instance_;
};
// -------------------------------------------------------------------

class Disengagement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.data.Disengagement) */ {
 public:
  Disengagement();
  virtual ~Disengagement();

  Disengagement(const Disengagement& from);

  inline Disengagement& operator=(const Disengagement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Disengagement& default_instance();

  void Swap(Disengagement* other);

  // implements Message ----------------------------------------------

  inline Disengagement* New() const { return New(NULL); }

  Disengagement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Disengagement& from);
  void MergeFrom(const Disengagement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Disengagement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // optional .apollo.data.MapPoint location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::apollo::data::MapPoint& location() const;
  ::apollo::data::MapPoint* mutable_location();
  ::apollo::data::MapPoint* release_location();
  void set_allocated_location(::apollo::data::MapPoint* location);

  // optional string desc = 3;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:apollo.data.Disengagement)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double time_;
  ::apollo::data::MapPoint* location_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  friend void  protobuf_AddDesc_data_2ftask_2eproto();
  friend void protobuf_AssignDesc_data_2ftask_2eproto();
  friend void protobuf_ShutdownFile_data_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Disengagement* default_instance_;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.data.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  inline Task* New() const { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  typedef Task_LoopType LoopType;
  static const LoopType UNKNOWN =
    Task_LoopType_UNKNOWN;
  static const LoopType OPEN_LOOP =
    Task_LoopType_OPEN_LOOP;
  static const LoopType CLOSE_LOOP =
    Task_LoopType_CLOSE_LOOP;
  static inline bool LoopType_IsValid(int value) {
    return Task_LoopType_IsValid(value);
  }
  static const LoopType LoopType_MIN =
    Task_LoopType_LoopType_MIN;
  static const LoopType LoopType_MAX =
    Task_LoopType_LoopType_MAX;
  static const int LoopType_ARRAYSIZE =
    Task_LoopType_LoopType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoopType_descriptor() {
    return Task_LoopType_descriptor();
  }
  static inline const ::std::string& LoopType_Name(LoopType value) {
    return Task_LoopType_Name(value);
  }
  static inline bool LoopType_Parse(const ::std::string& name,
      LoopType* value) {
    return Task_LoopType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  double start_time() const;
  void set_start_time(double value);

  // optional double end_time = 3;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  double end_time() const;
  void set_end_time(double value);

  // optional .apollo.data.Task.LoopType loop_type = 4;
  bool has_loop_type() const;
  void clear_loop_type();
  static const int kLoopTypeFieldNumber = 4;
  ::apollo::data::Task_LoopType loop_type() const;
  void set_loop_type(::apollo::data::Task_LoopType value);

  // optional .apollo.data.StaticInfo info = 5;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 5;
  const ::apollo::data::StaticInfo& info() const;
  ::apollo::data::StaticInfo* mutable_info();
  ::apollo::data::StaticInfo* release_info();
  void set_allocated_info(::apollo::data::StaticInfo* info);

  // repeated .apollo.data.Rosbag bags = 6;
  int bags_size() const;
  void clear_bags();
  static const int kBagsFieldNumber = 6;
  const ::apollo::data::Rosbag& bags(int index) const;
  ::apollo::data::Rosbag* mutable_bags(int index);
  ::apollo::data::Rosbag* add_bags();
  ::google::protobuf::RepeatedPtrField< ::apollo::data::Rosbag >*
      mutable_bags();
  const ::google::protobuf::RepeatedPtrField< ::apollo::data::Rosbag >&
      bags() const;

  // repeated string topics = 7;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 7;
  const ::std::string& topics(int index) const;
  ::std::string* mutable_topics(int index);
  void set_topics(int index, const ::std::string& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  ::std::string* add_topics();
  void add_topics(const ::std::string& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // repeated .apollo.data.Disengagement disengagements = 8;
  int disengagements_size() const;
  void clear_disengagements();
  static const int kDisengagementsFieldNumber = 8;
  const ::apollo::data::Disengagement& disengagements(int index) const;
  ::apollo::data::Disengagement* mutable_disengagements(int index);
  ::apollo::data::Disengagement* add_disengagements();
  ::google::protobuf::RepeatedPtrField< ::apollo::data::Disengagement >*
      mutable_disengagements();
  const ::google::protobuf::RepeatedPtrField< ::apollo::data::Disengagement >&
      disengagements() const;

  // repeated .apollo.data.MapPoint map_path = 9;
  int map_path_size() const;
  void clear_map_path();
  static const int kMapPathFieldNumber = 9;
  const ::apollo::data::MapPoint& map_path(int index) const;
  ::apollo::data::MapPoint* mutable_map_path(int index);
  ::apollo::data::MapPoint* add_map_path();
  ::google::protobuf::RepeatedPtrField< ::apollo::data::MapPoint >*
      mutable_map_path();
  const ::google::protobuf::RepeatedPtrField< ::apollo::data::MapPoint >&
      map_path() const;

  // map<string, double> mileage = 10;
  int mileage_size() const;
  void clear_mileage();
  static const int kMileageFieldNumber = 10;
  const ::google::protobuf::Map< ::std::string, double >&
      mileage() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_mileage();

  // @@protoc_insertion_point(class_scope:apollo.data.Task)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_loop_type();
  inline void clear_has_loop_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double start_time_;
  double end_time_;
  ::apollo::data::StaticInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::apollo::data::Rosbag > bags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;
  ::google::protobuf::RepeatedPtrField< ::apollo::data::Disengagement > disengagements_;
  ::google::protobuf::RepeatedPtrField< ::apollo::data::MapPoint > map_path_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Task_MileageEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > mileage_;
  int loop_type_;
  friend void  protobuf_AddDesc_data_2ftask_2eproto();
  friend void protobuf_AssignDesc_data_2ftask_2eproto();
  friend void protobuf_ShutdownFile_data_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MapPoint

// optional double latitude = 1;
inline bool MapPoint::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapPoint::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapPoint::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapPoint::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double MapPoint::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.data.MapPoint.latitude)
  return latitude_;
}
inline void MapPoint::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.MapPoint.latitude)
}

// optional double longitude = 2;
inline bool MapPoint::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapPoint::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapPoint::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapPoint::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double MapPoint::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.data.MapPoint.longitude)
  return longitude_;
}
inline void MapPoint::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.MapPoint.longitude)
}

// -------------------------------------------------------------------

// Rosbag_Topic

// optional string msg_type = 1;
inline bool Rosbag_Topic::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rosbag_Topic::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rosbag_Topic::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rosbag_Topic::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_type();
}
inline const ::std::string& Rosbag_Topic::msg_type() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.msg_type)
  return msg_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rosbag_Topic::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.msg_type)
}
inline void Rosbag_Topic::set_msg_type(const char* value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Rosbag.Topic.msg_type)
}
inline void Rosbag_Topic::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Rosbag.Topic.msg_type)
}
inline ::std::string* Rosbag_Topic::mutable_msg_type() {
  set_has_msg_type();
  // @@protoc_insertion_point(field_mutable:apollo.data.Rosbag.Topic.msg_type)
  return msg_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rosbag_Topic::release_msg_type() {
  // @@protoc_insertion_point(field_release:apollo.data.Rosbag.Topic.msg_type)
  clear_has_msg_type();
  return msg_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rosbag_Topic::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type != NULL) {
    set_has_msg_type();
  } else {
    clear_has_msg_type();
  }
  msg_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Rosbag.Topic.msg_type)
}

// optional int32 msg_count = 2;
inline bool Rosbag_Topic::has_msg_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rosbag_Topic::set_has_msg_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rosbag_Topic::clear_has_msg_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rosbag_Topic::clear_msg_count() {
  msg_count_ = 0;
  clear_has_msg_count();
}
inline ::google::protobuf::int32 Rosbag_Topic::msg_count() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.msg_count)
  return msg_count_;
}
inline void Rosbag_Topic::set_msg_count(::google::protobuf::int32 value) {
  set_has_msg_count();
  msg_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.msg_count)
}

// optional double frequency = 3;
inline bool Rosbag_Topic::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rosbag_Topic::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rosbag_Topic::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rosbag_Topic::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
inline double Rosbag_Topic::frequency() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.frequency)
  return frequency_;
}
inline void Rosbag_Topic::set_frequency(double value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.frequency)
}

// -------------------------------------------------------------------

// Rosbag

// optional string name = 1;
inline bool Rosbag::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rosbag::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rosbag::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rosbag::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Rosbag::name() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rosbag::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.name)
}
inline void Rosbag::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Rosbag.name)
}
inline void Rosbag::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Rosbag.name)
}
inline ::std::string* Rosbag::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.Rosbag.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rosbag::release_name() {
  // @@protoc_insertion_point(field_release:apollo.data.Rosbag.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rosbag::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Rosbag.name)
}

// optional uint64 size = 2;
inline bool Rosbag::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rosbag::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rosbag::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rosbag::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 Rosbag::size() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.size)
  return size_;
}
inline void Rosbag::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.size)
}

// optional int32 version = 3;
inline bool Rosbag::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rosbag::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rosbag::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rosbag::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Rosbag::version() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.version)
  return version_;
}
inline void Rosbag::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.version)
}

// optional double start_time = 4;
inline bool Rosbag::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rosbag::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rosbag::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rosbag::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline double Rosbag::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.start_time)
  return start_time_;
}
inline void Rosbag::set_start_time(double value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.start_time)
}

// optional double end_time = 5;
inline bool Rosbag::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Rosbag::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Rosbag::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Rosbag::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline double Rosbag::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.end_time)
  return end_time_;
}
inline void Rosbag::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.end_time)
}

// optional int32 msg_count = 6;
inline bool Rosbag::has_msg_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Rosbag::set_has_msg_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Rosbag::clear_has_msg_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Rosbag::clear_msg_count() {
  msg_count_ = 0;
  clear_has_msg_count();
}
inline ::google::protobuf::int32 Rosbag::msg_count() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.msg_count)
  return msg_count_;
}
inline void Rosbag::set_msg_count(::google::protobuf::int32 value) {
  set_has_msg_count();
  msg_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.msg_count)
}

// map<string, .apollo.data.Rosbag.Topic> topics = 7;
inline int Rosbag::topics_size() const {
  return topics_.size();
}
inline void Rosbag::clear_topics() {
  topics_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >&
Rosbag::topics() const {
  // @@protoc_insertion_point(field_map:apollo.data.Rosbag.topics)
  return topics_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::data::Rosbag_Topic >*
Rosbag::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.Rosbag.topics)
  return topics_.MutableMap();
}

// -------------------------------------------------------------------

// Disengagement

// optional double time = 1;
inline bool Disengagement::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Disengagement::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Disengagement::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Disengagement::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double Disengagement::time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.time)
  return time_;
}
inline void Disengagement::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Disengagement.time)
}

// optional .apollo.data.MapPoint location = 2;
inline bool Disengagement::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Disengagement::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Disengagement::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Disengagement::clear_location() {
  if (location_ != NULL) location_->::apollo::data::MapPoint::Clear();
  clear_has_location();
}
inline const ::apollo::data::MapPoint& Disengagement::location() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::apollo::data::MapPoint* Disengagement::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::apollo::data::MapPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.Disengagement.location)
  return location_;
}
inline ::apollo::data::MapPoint* Disengagement::release_location() {
  // @@protoc_insertion_point(field_release:apollo.data.Disengagement.location)
  clear_has_location();
  ::apollo::data::MapPoint* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Disengagement::set_allocated_location(::apollo::data::MapPoint* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Disengagement.location)
}

// optional string desc = 3;
inline bool Disengagement::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Disengagement::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Disengagement::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Disengagement::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& Disengagement::desc() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disengagement::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Disengagement.desc)
}
inline void Disengagement::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Disengagement.desc)
}
inline void Disengagement::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Disengagement.desc)
}
inline ::std::string* Disengagement::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:apollo.data.Disengagement.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Disengagement::release_desc() {
  // @@protoc_insertion_point(field_release:apollo.data.Disengagement.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disengagement::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Disengagement.desc)
}

// -------------------------------------------------------------------

// Task

// optional string id = 1;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.Task.id)
}
inline void Task::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Task.id)
}
inline void Task::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Task.id)
}
inline ::std::string* Task::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:apollo.data.Task.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Task.id)
}

// optional double start_time = 2;
inline bool Task::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline double Task::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.start_time)
  return start_time_;
}
inline void Task::set_start_time(double value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Task.start_time)
}

// optional double end_time = 3;
inline bool Task::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline double Task::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.end_time)
  return end_time_;
}
inline void Task::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Task.end_time)
}

// optional .apollo.data.Task.LoopType loop_type = 4;
inline bool Task::has_loop_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_loop_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_loop_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_loop_type() {
  loop_type_ = 0;
  clear_has_loop_type();
}
inline ::apollo::data::Task_LoopType Task::loop_type() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.loop_type)
  return static_cast< ::apollo::data::Task_LoopType >(loop_type_);
}
inline void Task::set_loop_type(::apollo::data::Task_LoopType value) {
  assert(::apollo::data::Task_LoopType_IsValid(value));
  set_has_loop_type();
  loop_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.Task.loop_type)
}

// optional .apollo.data.StaticInfo info = 5;
inline bool Task::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_info() {
  if (info_ != NULL) info_->::apollo::data::StaticInfo::Clear();
  clear_has_info();
}
inline const ::apollo::data::StaticInfo& Task::info() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::apollo::data::StaticInfo* Task::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::apollo::data::StaticInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.info)
  return info_;
}
inline ::apollo::data::StaticInfo* Task::release_info() {
  // @@protoc_insertion_point(field_release:apollo.data.Task.info)
  clear_has_info();
  ::apollo::data::StaticInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Task::set_allocated_info(::apollo::data::StaticInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Task.info)
}

// repeated .apollo.data.Rosbag bags = 6;
inline int Task::bags_size() const {
  return bags_.size();
}
inline void Task::clear_bags() {
  bags_.Clear();
}
inline const ::apollo::data::Rosbag& Task::bags(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.bags)
  return bags_.Get(index);
}
inline ::apollo::data::Rosbag* Task::mutable_bags(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.bags)
  return bags_.Mutable(index);
}
inline ::apollo::data::Rosbag* Task::add_bags() {
  // @@protoc_insertion_point(field_add:apollo.data.Task.bags)
  return bags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::data::Rosbag >*
Task::mutable_bags() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.bags)
  return &bags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::data::Rosbag >&
Task::bags() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.bags)
  return bags_;
}

// repeated string topics = 7;
inline int Task::topics_size() const {
  return topics_.size();
}
inline void Task::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& Task::topics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.topics)
  return topics_.Get(index);
}
inline ::std::string* Task::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.topics)
  return topics_.Mutable(index);
}
inline void Task::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.data.Task.topics)
  topics_.Mutable(index)->assign(value);
}
inline void Task::set_topics(int index, const char* value) {
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.data.Task.topics)
}
inline void Task::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Task.topics)
}
inline ::std::string* Task::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:apollo.data.Task.topics)
  return topics_.Add();
}
inline void Task::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.data.Task.topics)
}
inline void Task::add_topics(const char* value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.data.Task.topics)
}
inline void Task::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.data.Task.topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Task::topics() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.topics)
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Task::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.topics)
  return &topics_;
}

// repeated .apollo.data.Disengagement disengagements = 8;
inline int Task::disengagements_size() const {
  return disengagements_.size();
}
inline void Task::clear_disengagements() {
  disengagements_.Clear();
}
inline const ::apollo::data::Disengagement& Task::disengagements(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.disengagements)
  return disengagements_.Get(index);
}
inline ::apollo::data::Disengagement* Task::mutable_disengagements(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.disengagements)
  return disengagements_.Mutable(index);
}
inline ::apollo::data::Disengagement* Task::add_disengagements() {
  // @@protoc_insertion_point(field_add:apollo.data.Task.disengagements)
  return disengagements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::data::Disengagement >*
Task::mutable_disengagements() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.disengagements)
  return &disengagements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::data::Disengagement >&
Task::disengagements() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.disengagements)
  return disengagements_;
}

// repeated .apollo.data.MapPoint map_path = 9;
inline int Task::map_path_size() const {
  return map_path_.size();
}
inline void Task::clear_map_path() {
  map_path_.Clear();
}
inline const ::apollo::data::MapPoint& Task::map_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.map_path)
  return map_path_.Get(index);
}
inline ::apollo::data::MapPoint* Task::mutable_map_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.map_path)
  return map_path_.Mutable(index);
}
inline ::apollo::data::MapPoint* Task::add_map_path() {
  // @@protoc_insertion_point(field_add:apollo.data.Task.map_path)
  return map_path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::data::MapPoint >*
Task::mutable_map_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.map_path)
  return &map_path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::data::MapPoint >&
Task::map_path() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.map_path)
  return map_path_;
}

// map<string, double> mileage = 10;
inline int Task::mileage_size() const {
  return mileage_.size();
}
inline void Task::clear_mileage() {
  mileage_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
Task::mileage() const {
  // @@protoc_insertion_point(field_map:apollo.data.Task.mileage)
  return mileage_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
Task::mutable_mileage() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.Task.mileage)
  return mileage_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::data::Task_LoopType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::data::Task_LoopType>() {
  return ::apollo::data::Task_LoopType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2ftask_2eproto__INCLUDED
