// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/spiral_curve_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/spiral_curve_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* SpiralCurveConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiralCurveConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fspiral_5fcurve_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fspiral_5fcurve_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fspiral_5fcurve_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/spiral_curve_config.proto");
  GOOGLE_CHECK(file != NULL);
  SpiralCurveConfig_descriptor_ = file->message_type(0);
  static const int SpiralCurveConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralCurveConfig, simpson_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralCurveConfig, newton_raphson_tol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralCurveConfig, newton_raphson_max_iter_),
  };
  SpiralCurveConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpiralCurveConfig_descriptor_,
      SpiralCurveConfig::default_instance_,
      SpiralCurveConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralCurveConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpiralCurveConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralCurveConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fspiral_5fcurve_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpiralCurveConfig_descriptor_, &SpiralCurveConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fspiral_5fcurve_5fconfig_2eproto() {
  delete SpiralCurveConfig::default_instance_;
  delete SpiralCurveConfig_reflection_;
}

void protobuf_AddDesc_planning_2fspiral_5fcurve_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fspiral_5fcurve_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"planning/spiral_curve_config.proto\022\017ap"
    "ollo.planning\"s\n\021SpiralCurveConfig\022\027\n\014si"
    "mpson_size\030\001 \001(\005:\0019\022 \n\022newton_raphson_to"
    "l\030\002 \001(\001:\0040.01\022#\n\027newton_raphson_max_iter"
    "\030\003 \001(\005:\00220", 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/spiral_curve_config.proto", &protobuf_RegisterTypes);
  SpiralCurveConfig::default_instance_ = new SpiralCurveConfig();
  SpiralCurveConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fspiral_5fcurve_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fspiral_5fcurve_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fspiral_5fcurve_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fspiral_5fcurve_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fspiral_5fcurve_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiralCurveConfig::kSimpsonSizeFieldNumber;
const int SpiralCurveConfig::kNewtonRaphsonTolFieldNumber;
const int SpiralCurveConfig::kNewtonRaphsonMaxIterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiralCurveConfig::SpiralCurveConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SpiralCurveConfig)
}

void SpiralCurveConfig::InitAsDefaultInstance() {
}

SpiralCurveConfig::SpiralCurveConfig(const SpiralCurveConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpiralCurveConfig)
}

void SpiralCurveConfig::SharedCtor() {
  _cached_size_ = 0;
  simpson_size_ = 9;
  newton_raphson_tol_ = 0.01;
  newton_raphson_max_iter_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiralCurveConfig::~SpiralCurveConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpiralCurveConfig)
  SharedDtor();
}

void SpiralCurveConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiralCurveConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiralCurveConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiralCurveConfig_descriptor_;
}

const SpiralCurveConfig& SpiralCurveConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fspiral_5fcurve_5fconfig_2eproto();
  return *default_instance_;
}

SpiralCurveConfig* SpiralCurveConfig::default_instance_ = NULL;

SpiralCurveConfig* SpiralCurveConfig::New(::google::protobuf::Arena* arena) const {
  SpiralCurveConfig* n = new SpiralCurveConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiralCurveConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpiralCurveConfig)
  if (_has_bits_[0 / 32] & 7u) {
    simpson_size_ = 9;
    newton_raphson_tol_ = 0.01;
    newton_raphson_max_iter_ = 20;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpiralCurveConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SpiralCurveConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 simpson_size = 1 [default = 9];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &simpson_size_)));
          set_has_simpson_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_newton_raphson_tol;
        break;
      }

      // optional double newton_raphson_tol = 2 [default = 0.01];
      case 2: {
        if (tag == 17) {
         parse_newton_raphson_tol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &newton_raphson_tol_)));
          set_has_newton_raphson_tol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newton_raphson_max_iter;
        break;
      }

      // optional int32 newton_raphson_max_iter = 3 [default = 20];
      case 3: {
        if (tag == 24) {
         parse_newton_raphson_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newton_raphson_max_iter_)));
          set_has_newton_raphson_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SpiralCurveConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SpiralCurveConfig)
  return false;
#undef DO_
}

void SpiralCurveConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SpiralCurveConfig)
  // optional int32 simpson_size = 1 [default = 9];
  if (has_simpson_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->simpson_size(), output);
  }

  // optional double newton_raphson_tol = 2 [default = 0.01];
  if (has_newton_raphson_tol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->newton_raphson_tol(), output);
  }

  // optional int32 newton_raphson_max_iter = 3 [default = 20];
  if (has_newton_raphson_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newton_raphson_max_iter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SpiralCurveConfig)
}

::google::protobuf::uint8* SpiralCurveConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpiralCurveConfig)
  // optional int32 simpson_size = 1 [default = 9];
  if (has_simpson_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->simpson_size(), target);
  }

  // optional double newton_raphson_tol = 2 [default = 0.01];
  if (has_newton_raphson_tol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->newton_raphson_tol(), target);
  }

  // optional int32 newton_raphson_max_iter = 3 [default = 20];
  if (has_newton_raphson_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newton_raphson_max_iter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpiralCurveConfig)
  return target;
}

int SpiralCurveConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpiralCurveConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 simpson_size = 1 [default = 9];
    if (has_simpson_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->simpson_size());
    }

    // optional double newton_raphson_tol = 2 [default = 0.01];
    if (has_newton_raphson_tol()) {
      total_size += 1 + 8;
    }

    // optional int32 newton_raphson_max_iter = 3 [default = 20];
    if (has_newton_raphson_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newton_raphson_max_iter());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiralCurveConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SpiralCurveConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpiralCurveConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiralCurveConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SpiralCurveConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SpiralCurveConfig)
    MergeFrom(*source);
  }
}

void SpiralCurveConfig::MergeFrom(const SpiralCurveConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpiralCurveConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simpson_size()) {
      set_simpson_size(from.simpson_size());
    }
    if (from.has_newton_raphson_tol()) {
      set_newton_raphson_tol(from.newton_raphson_tol());
    }
    if (from.has_newton_raphson_max_iter()) {
      set_newton_raphson_max_iter(from.newton_raphson_max_iter());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpiralCurveConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SpiralCurveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiralCurveConfig::CopyFrom(const SpiralCurveConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpiralCurveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiralCurveConfig::IsInitialized() const {

  return true;
}

void SpiralCurveConfig::Swap(SpiralCurveConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiralCurveConfig::InternalSwap(SpiralCurveConfig* other) {
  std::swap(simpson_size_, other->simpson_size_);
  std::swap(newton_raphson_tol_, other->newton_raphson_tol_);
  std::swap(newton_raphson_max_iter_, other->newton_raphson_max_iter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiralCurveConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiralCurveConfig_descriptor_;
  metadata.reflection = SpiralCurveConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiralCurveConfig

// optional int32 simpson_size = 1 [default = 9];
bool SpiralCurveConfig::has_simpson_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpiralCurveConfig::set_has_simpson_size() {
  _has_bits_[0] |= 0x00000001u;
}
void SpiralCurveConfig::clear_has_simpson_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpiralCurveConfig::clear_simpson_size() {
  simpson_size_ = 9;
  clear_has_simpson_size();
}
 ::google::protobuf::int32 SpiralCurveConfig::simpson_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralCurveConfig.simpson_size)
  return simpson_size_;
}
 void SpiralCurveConfig::set_simpson_size(::google::protobuf::int32 value) {
  set_has_simpson_size();
  simpson_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralCurveConfig.simpson_size)
}

// optional double newton_raphson_tol = 2 [default = 0.01];
bool SpiralCurveConfig::has_newton_raphson_tol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpiralCurveConfig::set_has_newton_raphson_tol() {
  _has_bits_[0] |= 0x00000002u;
}
void SpiralCurveConfig::clear_has_newton_raphson_tol() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpiralCurveConfig::clear_newton_raphson_tol() {
  newton_raphson_tol_ = 0.01;
  clear_has_newton_raphson_tol();
}
 double SpiralCurveConfig::newton_raphson_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralCurveConfig.newton_raphson_tol)
  return newton_raphson_tol_;
}
 void SpiralCurveConfig::set_newton_raphson_tol(double value) {
  set_has_newton_raphson_tol();
  newton_raphson_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralCurveConfig.newton_raphson_tol)
}

// optional int32 newton_raphson_max_iter = 3 [default = 20];
bool SpiralCurveConfig::has_newton_raphson_max_iter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpiralCurveConfig::set_has_newton_raphson_max_iter() {
  _has_bits_[0] |= 0x00000004u;
}
void SpiralCurveConfig::clear_has_newton_raphson_max_iter() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpiralCurveConfig::clear_newton_raphson_max_iter() {
  newton_raphson_max_iter_ = 20;
  clear_has_newton_raphson_max_iter();
}
 ::google::protobuf::int32 SpiralCurveConfig::newton_raphson_max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralCurveConfig.newton_raphson_max_iter)
  return newton_raphson_max_iter_;
}
 void SpiralCurveConfig::set_newton_raphson_max_iter(::google::protobuf::int32 value) {
  set_has_newton_raphson_max_iter();
  newton_raphson_max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralCurveConfig.newton_raphson_max_iter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
