// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/modest_radar_detector_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/modest_radar_detector_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace modest_radar_detector_config {

namespace {

const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/modest_radar_detector_config.proto");
  GOOGLE_CHECK(file != NULL);
  ModelConfigs_descriptor_ = file->message_type(0);
  static const int ModelConfigs_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_had_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, delay_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_fp_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_pedestrian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_bicycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_pedestrian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_pedestrian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_pedestrian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_pedestrian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_bicycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_bicycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_bicycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_bicycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_unknown_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto() {
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
  delete ModelConfigs::_default_name_;
  delete ModelConfigs::_default_version_;
}

void protobuf_AddDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-perception/modest_radar_detector_confi"
    "g.proto\022.apollo.perception.modest_radar_"
    "detector_config\"\334\006\n\014ModelConfigs\022!\n\004name"
    "\030\001 \001(\t:\023ModestRadarDetector\022\026\n\007version\030\002"
    " \001(\t:\0051.0.0\022\031\n\013use_had_map\030\003 \001(\010:\004true\022\025"
    "\n\tmax_theta\030\004 \001(\001:\00230\022\027\n\014delay_frames\030\005 "
    "\001(\005:\0014\022\033\n\ruse_fp_filter\030\006 \001(\010:\004true\022\036\n\021p"
    "robexist_vehicle\030\007 \001(\001:\0030.9\022\"\n\024probexist"
    "_pedestrian\030\010 \001(\001:\0040.25\022\037\n\021probexist_bic"
    "ycle\030\t \001(\001:\0040.25\022\037\n\021probexist_unknown\030\n "
    "\001(\001:\0040.99\022\037\n\022lo_vel_rms_vehicle\030\013 \001(\001:\0030"
    ".2\022\037\n\022la_vel_rms_vehicle\030\014 \001(\001:\0030.3\022!\n\023l"
    "o_dist_rms_vehicle\030\r \001(\001:\0040.15\022 \n\023la_dis"
    "t_rms_vehicle\030\016 \001(\001:\0030.2\022\"\n\025lo_vel_rms_p"
    "edestrian\030\017 \001(\001:\0030.5\022\"\n\025la_vel_rms_pedes"
    "trian\030\020 \001(\001:\0030.8\022#\n\026lo_dist_rms_pedestri"
    "an\030\021 \001(\001:\0030.5\022#\n\026la_dist_rms_pedestrian\030"
    "\022 \001(\001:\0030.8\022\037\n\022lo_vel_rms_bicycle\030\023 \001(\001:\003"
    "0.5\022\037\n\022la_vel_rms_bicycle\030\024 \001(\001:\0030.8\022 \n\023"
    "lo_dist_rms_bicycle\030\025 \001(\001:\0030.5\022 \n\023la_dis"
    "t_rms_bicycle\030\026 \001(\001:\0030.8\022\037\n\022lo_vel_rms_u"
    "nknown\030\027 \001(\001:\0030.2\022\037\n\022la_vel_rms_unknown\030"
    "\030 \001(\001:\0030.3\022 \n\023lo_dist_rms_unknown\030\031 \001(\001:"
    "\0030.2\022 \n\023la_dist_rms_unknown\030\032 \001(\001:\0030.3", 958);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/modest_radar_detector_config.proto", &protobuf_RegisterTypes);
  ModelConfigs::_default_name_ =
      new ::std::string("ModestRadarDetector", 19);
  ModelConfigs::_default_version_ =
      new ::std::string("1.0.0", 5);
  ModelConfigs::default_instance_ = new ModelConfigs();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto_;

// ===================================================================

::std::string* ModelConfigs::_default_name_ = NULL;
::std::string* ModelConfigs::_default_version_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kUseHadMapFieldNumber;
const int ModelConfigs::kMaxThetaFieldNumber;
const int ModelConfigs::kDelayFramesFieldNumber;
const int ModelConfigs::kUseFpFilterFieldNumber;
const int ModelConfigs::kProbexistVehicleFieldNumber;
const int ModelConfigs::kProbexistPedestrianFieldNumber;
const int ModelConfigs::kProbexistBicycleFieldNumber;
const int ModelConfigs::kProbexistUnknownFieldNumber;
const int ModelConfigs::kLoVelRmsVehicleFieldNumber;
const int ModelConfigs::kLaVelRmsVehicleFieldNumber;
const int ModelConfigs::kLoDistRmsVehicleFieldNumber;
const int ModelConfigs::kLaDistRmsVehicleFieldNumber;
const int ModelConfigs::kLoVelRmsPedestrianFieldNumber;
const int ModelConfigs::kLaVelRmsPedestrianFieldNumber;
const int ModelConfigs::kLoDistRmsPedestrianFieldNumber;
const int ModelConfigs::kLaDistRmsPedestrianFieldNumber;
const int ModelConfigs::kLoVelRmsBicycleFieldNumber;
const int ModelConfigs::kLaVelRmsBicycleFieldNumber;
const int ModelConfigs::kLoDistRmsBicycleFieldNumber;
const int ModelConfigs::kLaDistRmsBicycleFieldNumber;
const int ModelConfigs::kLoVelRmsUnknownFieldNumber;
const int ModelConfigs::kLaVelRmsUnknownFieldNumber;
const int ModelConfigs::kLoDistRmsUnknownFieldNumber;
const int ModelConfigs::kLaDistRmsUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.modest_radar_detector_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.modest_radar_detector_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  version_.UnsafeSetDefault(_default_version_);
  use_had_map_ = true;
  max_theta_ = 30;
  delay_frames_ = 4;
  use_fp_filter_ = true;
  probexist_vehicle_ = 0.9;
  probexist_pedestrian_ = 0.25;
  probexist_bicycle_ = 0.25;
  probexist_unknown_ = 0.99;
  lo_vel_rms_vehicle_ = 0.2;
  la_vel_rms_vehicle_ = 0.3;
  lo_dist_rms_vehicle_ = 0.15;
  la_dist_rms_vehicle_ = 0.2;
  lo_vel_rms_pedestrian_ = 0.5;
  la_vel_rms_pedestrian_ = 0.8;
  lo_dist_rms_pedestrian_ = 0.5;
  la_dist_rms_pedestrian_ = 0.8;
  lo_vel_rms_bicycle_ = 0.5;
  la_vel_rms_bicycle_ = 0.8;
  lo_dist_rms_bicycle_ = 0.5;
  la_dist_rms_bicycle_ = 0.8;
  lo_vel_rms_unknown_ = 0.2;
  la_vel_rms_unknown_ = 0.3;
  lo_dist_rms_unknown_ = 0.2;
  la_dist_rms_unknown_ = 0.3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.modest_radar_detector_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  version_.DestroyNoArena(_default_version_);
  if (this != default_instance_) {
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fmodest_5fradar_5fdetector_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    if (has_version()) {
      version_.ClearToDefaultNoArena(_default_version_);
    }
    use_had_map_ = true;
    max_theta_ = 30;
    delay_frames_ = 4;
    use_fp_filter_ = true;
    probexist_vehicle_ = 0.9;
    probexist_pedestrian_ = 0.25;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    probexist_bicycle_ = 0.25;
    probexist_unknown_ = 0.99;
    lo_vel_rms_vehicle_ = 0.2;
    la_vel_rms_vehicle_ = 0.3;
    lo_dist_rms_vehicle_ = 0.15;
    la_dist_rms_vehicle_ = 0.2;
    lo_vel_rms_pedestrian_ = 0.5;
    la_vel_rms_pedestrian_ = 0.8;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    lo_dist_rms_pedestrian_ = 0.5;
    la_dist_rms_pedestrian_ = 0.8;
    lo_vel_rms_bicycle_ = 0.5;
    la_vel_rms_bicycle_ = 0.8;
    lo_dist_rms_bicycle_ = 0.5;
    la_dist_rms_bicycle_ = 0.8;
    lo_vel_rms_unknown_ = 0.2;
    la_vel_rms_unknown_ = 0.3;
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    lo_dist_rms_unknown_ = 0.2;
    la_dist_rms_unknown_ = 0.3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "ModestRadarDetector"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.modest_radar_detector_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.modest_radar_detector_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_had_map;
        break;
      }

      // optional bool use_had_map = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_use_had_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_had_map_)));
          set_has_use_had_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_theta;
        break;
      }

      // optional double max_theta = 4 [default = 30];
      case 4: {
        if (tag == 33) {
         parse_max_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_theta_)));
          set_has_max_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delay_frames;
        break;
      }

      // optional int32 delay_frames = 5 [default = 4];
      case 5: {
        if (tag == 40) {
         parse_delay_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_frames_)));
          set_has_delay_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_use_fp_filter;
        break;
      }

      // optional bool use_fp_filter = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_use_fp_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fp_filter_)));
          set_has_use_fp_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_probexist_vehicle;
        break;
      }

      // optional double probexist_vehicle = 7 [default = 0.9];
      case 7: {
        if (tag == 57) {
         parse_probexist_vehicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_vehicle_)));
          set_has_probexist_vehicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_probexist_pedestrian;
        break;
      }

      // optional double probexist_pedestrian = 8 [default = 0.25];
      case 8: {
        if (tag == 65) {
         parse_probexist_pedestrian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_pedestrian_)));
          set_has_probexist_pedestrian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_probexist_bicycle;
        break;
      }

      // optional double probexist_bicycle = 9 [default = 0.25];
      case 9: {
        if (tag == 73) {
         parse_probexist_bicycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_bicycle_)));
          set_has_probexist_bicycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_probexist_unknown;
        break;
      }

      // optional double probexist_unknown = 10 [default = 0.99];
      case 10: {
        if (tag == 81) {
         parse_probexist_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_unknown_)));
          set_has_probexist_unknown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_lo_vel_rms_vehicle;
        break;
      }

      // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
      case 11: {
        if (tag == 89) {
         parse_lo_vel_rms_vehicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_vehicle_)));
          set_has_lo_vel_rms_vehicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_la_vel_rms_vehicle;
        break;
      }

      // optional double la_vel_rms_vehicle = 12 [default = 0.3];
      case 12: {
        if (tag == 97) {
         parse_la_vel_rms_vehicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_vehicle_)));
          set_has_la_vel_rms_vehicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_lo_dist_rms_vehicle;
        break;
      }

      // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
      case 13: {
        if (tag == 105) {
         parse_lo_dist_rms_vehicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_vehicle_)));
          set_has_lo_dist_rms_vehicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_la_dist_rms_vehicle;
        break;
      }

      // optional double la_dist_rms_vehicle = 14 [default = 0.2];
      case 14: {
        if (tag == 113) {
         parse_la_dist_rms_vehicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_vehicle_)));
          set_has_la_dist_rms_vehicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_lo_vel_rms_pedestrian;
        break;
      }

      // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
      case 15: {
        if (tag == 121) {
         parse_lo_vel_rms_pedestrian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_pedestrian_)));
          set_has_lo_vel_rms_pedestrian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_la_vel_rms_pedestrian;
        break;
      }

      // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
      case 16: {
        if (tag == 129) {
         parse_la_vel_rms_pedestrian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_pedestrian_)));
          set_has_la_vel_rms_pedestrian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_lo_dist_rms_pedestrian;
        break;
      }

      // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
      case 17: {
        if (tag == 137) {
         parse_lo_dist_rms_pedestrian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_pedestrian_)));
          set_has_lo_dist_rms_pedestrian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_la_dist_rms_pedestrian;
        break;
      }

      // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
      case 18: {
        if (tag == 145) {
         parse_la_dist_rms_pedestrian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_pedestrian_)));
          set_has_la_dist_rms_pedestrian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_lo_vel_rms_bicycle;
        break;
      }

      // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
      case 19: {
        if (tag == 153) {
         parse_lo_vel_rms_bicycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_bicycle_)));
          set_has_lo_vel_rms_bicycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_la_vel_rms_bicycle;
        break;
      }

      // optional double la_vel_rms_bicycle = 20 [default = 0.8];
      case 20: {
        if (tag == 161) {
         parse_la_vel_rms_bicycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_bicycle_)));
          set_has_la_vel_rms_bicycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_lo_dist_rms_bicycle;
        break;
      }

      // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
      case 21: {
        if (tag == 169) {
         parse_lo_dist_rms_bicycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_bicycle_)));
          set_has_lo_dist_rms_bicycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_la_dist_rms_bicycle;
        break;
      }

      // optional double la_dist_rms_bicycle = 22 [default = 0.8];
      case 22: {
        if (tag == 177) {
         parse_la_dist_rms_bicycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_bicycle_)));
          set_has_la_dist_rms_bicycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_lo_vel_rms_unknown;
        break;
      }

      // optional double lo_vel_rms_unknown = 23 [default = 0.2];
      case 23: {
        if (tag == 185) {
         parse_lo_vel_rms_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_unknown_)));
          set_has_lo_vel_rms_unknown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_la_vel_rms_unknown;
        break;
      }

      // optional double la_vel_rms_unknown = 24 [default = 0.3];
      case 24: {
        if (tag == 193) {
         parse_la_vel_rms_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_unknown_)));
          set_has_la_vel_rms_unknown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_lo_dist_rms_unknown;
        break;
      }

      // optional double lo_dist_rms_unknown = 25 [default = 0.2];
      case 25: {
        if (tag == 201) {
         parse_lo_dist_rms_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_unknown_)));
          set_has_lo_dist_rms_unknown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_la_dist_rms_unknown;
        break;
      }

      // optional double la_dist_rms_unknown = 26 [default = 0.3];
      case 26: {
        if (tag == 209) {
         parse_la_dist_rms_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_unknown_)));
          set_has_la_dist_rms_unknown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.modest_radar_detector_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.modest_radar_detector_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  // optional string name = 1 [default = "ModestRadarDetector"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.modest_radar_detector_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.modest_radar_detector_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional bool use_had_map = 3 [default = true];
  if (has_use_had_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_had_map(), output);
  }

  // optional double max_theta = 4 [default = 30];
  if (has_max_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_theta(), output);
  }

  // optional int32 delay_frames = 5 [default = 4];
  if (has_delay_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delay_frames(), output);
  }

  // optional bool use_fp_filter = 6 [default = true];
  if (has_use_fp_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_fp_filter(), output);
  }

  // optional double probexist_vehicle = 7 [default = 0.9];
  if (has_probexist_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->probexist_vehicle(), output);
  }

  // optional double probexist_pedestrian = 8 [default = 0.25];
  if (has_probexist_pedestrian()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->probexist_pedestrian(), output);
  }

  // optional double probexist_bicycle = 9 [default = 0.25];
  if (has_probexist_bicycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->probexist_bicycle(), output);
  }

  // optional double probexist_unknown = 10 [default = 0.99];
  if (has_probexist_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->probexist_unknown(), output);
  }

  // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
  if (has_lo_vel_rms_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lo_vel_rms_vehicle(), output);
  }

  // optional double la_vel_rms_vehicle = 12 [default = 0.3];
  if (has_la_vel_rms_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->la_vel_rms_vehicle(), output);
  }

  // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
  if (has_lo_dist_rms_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lo_dist_rms_vehicle(), output);
  }

  // optional double la_dist_rms_vehicle = 14 [default = 0.2];
  if (has_la_dist_rms_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->la_dist_rms_vehicle(), output);
  }

  // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
  if (has_lo_vel_rms_pedestrian()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lo_vel_rms_pedestrian(), output);
  }

  // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
  if (has_la_vel_rms_pedestrian()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->la_vel_rms_pedestrian(), output);
  }

  // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
  if (has_lo_dist_rms_pedestrian()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lo_dist_rms_pedestrian(), output);
  }

  // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
  if (has_la_dist_rms_pedestrian()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->la_dist_rms_pedestrian(), output);
  }

  // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
  if (has_lo_vel_rms_bicycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->lo_vel_rms_bicycle(), output);
  }

  // optional double la_vel_rms_bicycle = 20 [default = 0.8];
  if (has_la_vel_rms_bicycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->la_vel_rms_bicycle(), output);
  }

  // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
  if (has_lo_dist_rms_bicycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->lo_dist_rms_bicycle(), output);
  }

  // optional double la_dist_rms_bicycle = 22 [default = 0.8];
  if (has_la_dist_rms_bicycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->la_dist_rms_bicycle(), output);
  }

  // optional double lo_vel_rms_unknown = 23 [default = 0.2];
  if (has_lo_vel_rms_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->lo_vel_rms_unknown(), output);
  }

  // optional double la_vel_rms_unknown = 24 [default = 0.3];
  if (has_la_vel_rms_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->la_vel_rms_unknown(), output);
  }

  // optional double lo_dist_rms_unknown = 25 [default = 0.2];
  if (has_lo_dist_rms_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lo_dist_rms_unknown(), output);
  }

  // optional double la_dist_rms_unknown = 26 [default = 0.3];
  if (has_la_dist_rms_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->la_dist_rms_unknown(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.modest_radar_detector_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  // optional string name = 1 [default = "ModestRadarDetector"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.modest_radar_detector_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.modest_radar_detector_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional bool use_had_map = 3 [default = true];
  if (has_use_had_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_had_map(), target);
  }

  // optional double max_theta = 4 [default = 30];
  if (has_max_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_theta(), target);
  }

  // optional int32 delay_frames = 5 [default = 4];
  if (has_delay_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delay_frames(), target);
  }

  // optional bool use_fp_filter = 6 [default = true];
  if (has_use_fp_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_fp_filter(), target);
  }

  // optional double probexist_vehicle = 7 [default = 0.9];
  if (has_probexist_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->probexist_vehicle(), target);
  }

  // optional double probexist_pedestrian = 8 [default = 0.25];
  if (has_probexist_pedestrian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->probexist_pedestrian(), target);
  }

  // optional double probexist_bicycle = 9 [default = 0.25];
  if (has_probexist_bicycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->probexist_bicycle(), target);
  }

  // optional double probexist_unknown = 10 [default = 0.99];
  if (has_probexist_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->probexist_unknown(), target);
  }

  // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
  if (has_lo_vel_rms_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lo_vel_rms_vehicle(), target);
  }

  // optional double la_vel_rms_vehicle = 12 [default = 0.3];
  if (has_la_vel_rms_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->la_vel_rms_vehicle(), target);
  }

  // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
  if (has_lo_dist_rms_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lo_dist_rms_vehicle(), target);
  }

  // optional double la_dist_rms_vehicle = 14 [default = 0.2];
  if (has_la_dist_rms_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->la_dist_rms_vehicle(), target);
  }

  // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
  if (has_lo_vel_rms_pedestrian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lo_vel_rms_pedestrian(), target);
  }

  // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
  if (has_la_vel_rms_pedestrian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->la_vel_rms_pedestrian(), target);
  }

  // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
  if (has_lo_dist_rms_pedestrian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lo_dist_rms_pedestrian(), target);
  }

  // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
  if (has_la_dist_rms_pedestrian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->la_dist_rms_pedestrian(), target);
  }

  // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
  if (has_lo_vel_rms_bicycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->lo_vel_rms_bicycle(), target);
  }

  // optional double la_vel_rms_bicycle = 20 [default = 0.8];
  if (has_la_vel_rms_bicycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->la_vel_rms_bicycle(), target);
  }

  // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
  if (has_lo_dist_rms_bicycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->lo_dist_rms_bicycle(), target);
  }

  // optional double la_dist_rms_bicycle = 22 [default = 0.8];
  if (has_la_dist_rms_bicycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->la_dist_rms_bicycle(), target);
  }

  // optional double lo_vel_rms_unknown = 23 [default = 0.2];
  if (has_lo_vel_rms_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->lo_vel_rms_unknown(), target);
  }

  // optional double la_vel_rms_unknown = 24 [default = 0.3];
  if (has_la_vel_rms_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->la_vel_rms_unknown(), target);
  }

  // optional double lo_dist_rms_unknown = 25 [default = 0.2];
  if (has_lo_dist_rms_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lo_dist_rms_unknown(), target);
  }

  // optional double la_dist_rms_unknown = 26 [default = 0.3];
  if (has_la_dist_rms_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->la_dist_rms_unknown(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.modest_radar_detector_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = "ModestRadarDetector"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bool use_had_map = 3 [default = true];
    if (has_use_had_map()) {
      total_size += 1 + 1;
    }

    // optional double max_theta = 4 [default = 30];
    if (has_max_theta()) {
      total_size += 1 + 8;
    }

    // optional int32 delay_frames = 5 [default = 4];
    if (has_delay_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_frames());
    }

    // optional bool use_fp_filter = 6 [default = true];
    if (has_use_fp_filter()) {
      total_size += 1 + 1;
    }

    // optional double probexist_vehicle = 7 [default = 0.9];
    if (has_probexist_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double probexist_pedestrian = 8 [default = 0.25];
    if (has_probexist_pedestrian()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double probexist_bicycle = 9 [default = 0.25];
    if (has_probexist_bicycle()) {
      total_size += 1 + 8;
    }

    // optional double probexist_unknown = 10 [default = 0.99];
    if (has_probexist_unknown()) {
      total_size += 1 + 8;
    }

    // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
    if (has_lo_vel_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double la_vel_rms_vehicle = 12 [default = 0.3];
    if (has_la_vel_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
    if (has_lo_dist_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double la_dist_rms_vehicle = 14 [default = 0.2];
    if (has_la_dist_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
    if (has_lo_vel_rms_pedestrian()) {
      total_size += 1 + 8;
    }

    // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
    if (has_la_vel_rms_pedestrian()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
    if (has_lo_dist_rms_pedestrian()) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
    if (has_la_dist_rms_pedestrian()) {
      total_size += 2 + 8;
    }

    // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
    if (has_lo_vel_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double la_vel_rms_bicycle = 20 [default = 0.8];
    if (has_la_vel_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
    if (has_lo_dist_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_bicycle = 22 [default = 0.8];
    if (has_la_dist_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double lo_vel_rms_unknown = 23 [default = 0.2];
    if (has_lo_vel_rms_unknown()) {
      total_size += 2 + 8;
    }

    // optional double la_vel_rms_unknown = 24 [default = 0.3];
    if (has_la_vel_rms_unknown()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional double lo_dist_rms_unknown = 25 [default = 0.2];
    if (has_lo_dist_rms_unknown()) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_unknown = 26 [default = 0.3];
    if (has_la_dist_rms_unknown()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.modest_radar_detector_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.modest_radar_detector_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(_default_version_, from.version_);
    }
    if (from.has_use_had_map()) {
      set_use_had_map(from.use_had_map());
    }
    if (from.has_max_theta()) {
      set_max_theta(from.max_theta());
    }
    if (from.has_delay_frames()) {
      set_delay_frames(from.delay_frames());
    }
    if (from.has_use_fp_filter()) {
      set_use_fp_filter(from.use_fp_filter());
    }
    if (from.has_probexist_vehicle()) {
      set_probexist_vehicle(from.probexist_vehicle());
    }
    if (from.has_probexist_pedestrian()) {
      set_probexist_pedestrian(from.probexist_pedestrian());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_probexist_bicycle()) {
      set_probexist_bicycle(from.probexist_bicycle());
    }
    if (from.has_probexist_unknown()) {
      set_probexist_unknown(from.probexist_unknown());
    }
    if (from.has_lo_vel_rms_vehicle()) {
      set_lo_vel_rms_vehicle(from.lo_vel_rms_vehicle());
    }
    if (from.has_la_vel_rms_vehicle()) {
      set_la_vel_rms_vehicle(from.la_vel_rms_vehicle());
    }
    if (from.has_lo_dist_rms_vehicle()) {
      set_lo_dist_rms_vehicle(from.lo_dist_rms_vehicle());
    }
    if (from.has_la_dist_rms_vehicle()) {
      set_la_dist_rms_vehicle(from.la_dist_rms_vehicle());
    }
    if (from.has_lo_vel_rms_pedestrian()) {
      set_lo_vel_rms_pedestrian(from.lo_vel_rms_pedestrian());
    }
    if (from.has_la_vel_rms_pedestrian()) {
      set_la_vel_rms_pedestrian(from.la_vel_rms_pedestrian());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lo_dist_rms_pedestrian()) {
      set_lo_dist_rms_pedestrian(from.lo_dist_rms_pedestrian());
    }
    if (from.has_la_dist_rms_pedestrian()) {
      set_la_dist_rms_pedestrian(from.la_dist_rms_pedestrian());
    }
    if (from.has_lo_vel_rms_bicycle()) {
      set_lo_vel_rms_bicycle(from.lo_vel_rms_bicycle());
    }
    if (from.has_la_vel_rms_bicycle()) {
      set_la_vel_rms_bicycle(from.la_vel_rms_bicycle());
    }
    if (from.has_lo_dist_rms_bicycle()) {
      set_lo_dist_rms_bicycle(from.lo_dist_rms_bicycle());
    }
    if (from.has_la_dist_rms_bicycle()) {
      set_la_dist_rms_bicycle(from.la_dist_rms_bicycle());
    }
    if (from.has_lo_vel_rms_unknown()) {
      set_lo_vel_rms_unknown(from.lo_vel_rms_unknown());
    }
    if (from.has_la_vel_rms_unknown()) {
      set_la_vel_rms_unknown(from.la_vel_rms_unknown());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lo_dist_rms_unknown()) {
      set_lo_dist_rms_unknown(from.lo_dist_rms_unknown());
    }
    if (from.has_la_dist_rms_unknown()) {
      set_la_dist_rms_unknown(from.la_dist_rms_unknown());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(use_had_map_, other->use_had_map_);
  std::swap(max_theta_, other->max_theta_);
  std::swap(delay_frames_, other->delay_frames_);
  std::swap(use_fp_filter_, other->use_fp_filter_);
  std::swap(probexist_vehicle_, other->probexist_vehicle_);
  std::swap(probexist_pedestrian_, other->probexist_pedestrian_);
  std::swap(probexist_bicycle_, other->probexist_bicycle_);
  std::swap(probexist_unknown_, other->probexist_unknown_);
  std::swap(lo_vel_rms_vehicle_, other->lo_vel_rms_vehicle_);
  std::swap(la_vel_rms_vehicle_, other->la_vel_rms_vehicle_);
  std::swap(lo_dist_rms_vehicle_, other->lo_dist_rms_vehicle_);
  std::swap(la_dist_rms_vehicle_, other->la_dist_rms_vehicle_);
  std::swap(lo_vel_rms_pedestrian_, other->lo_vel_rms_pedestrian_);
  std::swap(la_vel_rms_pedestrian_, other->la_vel_rms_pedestrian_);
  std::swap(lo_dist_rms_pedestrian_, other->lo_dist_rms_pedestrian_);
  std::swap(la_dist_rms_pedestrian_, other->la_dist_rms_pedestrian_);
  std::swap(lo_vel_rms_bicycle_, other->lo_vel_rms_bicycle_);
  std::swap(la_vel_rms_bicycle_, other->la_vel_rms_bicycle_);
  std::swap(lo_dist_rms_bicycle_, other->lo_dist_rms_bicycle_);
  std::swap(la_dist_rms_bicycle_, other->la_dist_rms_bicycle_);
  std::swap(lo_vel_rms_unknown_, other->lo_vel_rms_unknown_);
  std::swap(la_vel_rms_unknown_, other->la_vel_rms_unknown_);
  std::swap(lo_dist_rms_unknown_, other->lo_dist_rms_unknown_);
  std::swap(la_dist_rms_unknown_, other->la_dist_rms_unknown_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "ModestRadarDetector"];
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  return name_.GetNoArena(_default_name_);
}
 void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}
 ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
 const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  return version_.GetNoArena(_default_version_);
}
 void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}
 ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  return version_.MutableNoArena(_default_version_);
}
 ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
 void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}

// optional bool use_had_map = 3 [default = true];
bool ModelConfigs::has_use_had_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_use_had_map() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_use_had_map() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_use_had_map() {
  use_had_map_ = true;
  clear_has_use_had_map();
}
 bool ModelConfigs::use_had_map() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
  return use_had_map_;
}
 void ModelConfigs::set_use_had_map(bool value) {
  set_has_use_had_map();
  use_had_map_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
}

// optional double max_theta = 4 [default = 30];
bool ModelConfigs::has_max_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_max_theta() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_max_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_max_theta() {
  max_theta_ = 30;
  clear_has_max_theta();
}
 double ModelConfigs::max_theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.max_theta)
  return max_theta_;
}
 void ModelConfigs::set_max_theta(double value) {
  set_has_max_theta();
  max_theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.max_theta)
}

// optional int32 delay_frames = 5 [default = 4];
bool ModelConfigs::has_delay_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_delay_frames() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_delay_frames() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_delay_frames() {
  delay_frames_ = 4;
  clear_has_delay_frames();
}
 ::google::protobuf::int32 ModelConfigs::delay_frames() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
  return delay_frames_;
}
 void ModelConfigs::set_delay_frames(::google::protobuf::int32 value) {
  set_has_delay_frames();
  delay_frames_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
}

// optional bool use_fp_filter = 6 [default = true];
bool ModelConfigs::has_use_fp_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_use_fp_filter() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelConfigs::clear_has_use_fp_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelConfigs::clear_use_fp_filter() {
  use_fp_filter_ = true;
  clear_has_use_fp_filter();
}
 bool ModelConfigs::use_fp_filter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
  return use_fp_filter_;
}
 void ModelConfigs::set_use_fp_filter(bool value) {
  set_has_use_fp_filter();
  use_fp_filter_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
}

// optional double probexist_vehicle = 7 [default = 0.9];
bool ModelConfigs::has_probexist_vehicle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_probexist_vehicle() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_probexist_vehicle() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_probexist_vehicle() {
  probexist_vehicle_ = 0.9;
  clear_has_probexist_vehicle();
}
 double ModelConfigs::probexist_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
  return probexist_vehicle_;
}
 void ModelConfigs::set_probexist_vehicle(double value) {
  set_has_probexist_vehicle();
  probexist_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
}

// optional double probexist_pedestrian = 8 [default = 0.25];
bool ModelConfigs::has_probexist_pedestrian() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelConfigs::set_has_probexist_pedestrian() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelConfigs::clear_has_probexist_pedestrian() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelConfigs::clear_probexist_pedestrian() {
  probexist_pedestrian_ = 0.25;
  clear_has_probexist_pedestrian();
}
 double ModelConfigs::probexist_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
  return probexist_pedestrian_;
}
 void ModelConfigs::set_probexist_pedestrian(double value) {
  set_has_probexist_pedestrian();
  probexist_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
}

// optional double probexist_bicycle = 9 [default = 0.25];
bool ModelConfigs::has_probexist_bicycle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelConfigs::set_has_probexist_bicycle() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelConfigs::clear_has_probexist_bicycle() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelConfigs::clear_probexist_bicycle() {
  probexist_bicycle_ = 0.25;
  clear_has_probexist_bicycle();
}
 double ModelConfigs::probexist_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
  return probexist_bicycle_;
}
 void ModelConfigs::set_probexist_bicycle(double value) {
  set_has_probexist_bicycle();
  probexist_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
}

// optional double probexist_unknown = 10 [default = 0.99];
bool ModelConfigs::has_probexist_unknown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelConfigs::set_has_probexist_unknown() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelConfigs::clear_has_probexist_unknown() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelConfigs::clear_probexist_unknown() {
  probexist_unknown_ = 0.99;
  clear_has_probexist_unknown();
}
 double ModelConfigs::probexist_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
  return probexist_unknown_;
}
 void ModelConfigs::set_probexist_unknown(double value) {
  set_has_probexist_unknown();
  probexist_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
}

// optional double lo_vel_rms_vehicle = 11 [default = 0.2];
bool ModelConfigs::has_lo_vel_rms_vehicle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_vehicle() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelConfigs::clear_has_lo_vel_rms_vehicle() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelConfigs::clear_lo_vel_rms_vehicle() {
  lo_vel_rms_vehicle_ = 0.2;
  clear_has_lo_vel_rms_vehicle();
}
 double ModelConfigs::lo_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
  return lo_vel_rms_vehicle_;
}
 void ModelConfigs::set_lo_vel_rms_vehicle(double value) {
  set_has_lo_vel_rms_vehicle();
  lo_vel_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
}

// optional double la_vel_rms_vehicle = 12 [default = 0.3];
bool ModelConfigs::has_la_vel_rms_vehicle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_vehicle() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelConfigs::clear_has_la_vel_rms_vehicle() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelConfigs::clear_la_vel_rms_vehicle() {
  la_vel_rms_vehicle_ = 0.3;
  clear_has_la_vel_rms_vehicle();
}
 double ModelConfigs::la_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
  return la_vel_rms_vehicle_;
}
 void ModelConfigs::set_la_vel_rms_vehicle(double value) {
  set_has_la_vel_rms_vehicle();
  la_vel_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
}

// optional double lo_dist_rms_vehicle = 13 [default = 0.15];
bool ModelConfigs::has_lo_dist_rms_vehicle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_vehicle() {
  _has_bits_[0] |= 0x00001000u;
}
void ModelConfigs::clear_has_lo_dist_rms_vehicle() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModelConfigs::clear_lo_dist_rms_vehicle() {
  lo_dist_rms_vehicle_ = 0.15;
  clear_has_lo_dist_rms_vehicle();
}
 double ModelConfigs::lo_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
  return lo_dist_rms_vehicle_;
}
 void ModelConfigs::set_lo_dist_rms_vehicle(double value) {
  set_has_lo_dist_rms_vehicle();
  lo_dist_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
}

// optional double la_dist_rms_vehicle = 14 [default = 0.2];
bool ModelConfigs::has_la_dist_rms_vehicle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_vehicle() {
  _has_bits_[0] |= 0x00002000u;
}
void ModelConfigs::clear_has_la_dist_rms_vehicle() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModelConfigs::clear_la_dist_rms_vehicle() {
  la_dist_rms_vehicle_ = 0.2;
  clear_has_la_dist_rms_vehicle();
}
 double ModelConfigs::la_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
  return la_dist_rms_vehicle_;
}
 void ModelConfigs::set_la_dist_rms_vehicle(double value) {
  set_has_la_dist_rms_vehicle();
  la_dist_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
}

// optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
bool ModelConfigs::has_lo_vel_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_pedestrian() {
  _has_bits_[0] |= 0x00004000u;
}
void ModelConfigs::clear_has_lo_vel_rms_pedestrian() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModelConfigs::clear_lo_vel_rms_pedestrian() {
  lo_vel_rms_pedestrian_ = 0.5;
  clear_has_lo_vel_rms_pedestrian();
}
 double ModelConfigs::lo_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
  return lo_vel_rms_pedestrian_;
}
 void ModelConfigs::set_lo_vel_rms_pedestrian(double value) {
  set_has_lo_vel_rms_pedestrian();
  lo_vel_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
}

// optional double la_vel_rms_pedestrian = 16 [default = 0.8];
bool ModelConfigs::has_la_vel_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_pedestrian() {
  _has_bits_[0] |= 0x00008000u;
}
void ModelConfigs::clear_has_la_vel_rms_pedestrian() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModelConfigs::clear_la_vel_rms_pedestrian() {
  la_vel_rms_pedestrian_ = 0.8;
  clear_has_la_vel_rms_pedestrian();
}
 double ModelConfigs::la_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
  return la_vel_rms_pedestrian_;
}
 void ModelConfigs::set_la_vel_rms_pedestrian(double value) {
  set_has_la_vel_rms_pedestrian();
  la_vel_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
}

// optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
bool ModelConfigs::has_lo_dist_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_pedestrian() {
  _has_bits_[0] |= 0x00010000u;
}
void ModelConfigs::clear_has_lo_dist_rms_pedestrian() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModelConfigs::clear_lo_dist_rms_pedestrian() {
  lo_dist_rms_pedestrian_ = 0.5;
  clear_has_lo_dist_rms_pedestrian();
}
 double ModelConfigs::lo_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
  return lo_dist_rms_pedestrian_;
}
 void ModelConfigs::set_lo_dist_rms_pedestrian(double value) {
  set_has_lo_dist_rms_pedestrian();
  lo_dist_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
}

// optional double la_dist_rms_pedestrian = 18 [default = 0.8];
bool ModelConfigs::has_la_dist_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_pedestrian() {
  _has_bits_[0] |= 0x00020000u;
}
void ModelConfigs::clear_has_la_dist_rms_pedestrian() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModelConfigs::clear_la_dist_rms_pedestrian() {
  la_dist_rms_pedestrian_ = 0.8;
  clear_has_la_dist_rms_pedestrian();
}
 double ModelConfigs::la_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
  return la_dist_rms_pedestrian_;
}
 void ModelConfigs::set_la_dist_rms_pedestrian(double value) {
  set_has_la_dist_rms_pedestrian();
  la_dist_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
}

// optional double lo_vel_rms_bicycle = 19 [default = 0.5];
bool ModelConfigs::has_lo_vel_rms_bicycle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_bicycle() {
  _has_bits_[0] |= 0x00040000u;
}
void ModelConfigs::clear_has_lo_vel_rms_bicycle() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModelConfigs::clear_lo_vel_rms_bicycle() {
  lo_vel_rms_bicycle_ = 0.5;
  clear_has_lo_vel_rms_bicycle();
}
 double ModelConfigs::lo_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
  return lo_vel_rms_bicycle_;
}
 void ModelConfigs::set_lo_vel_rms_bicycle(double value) {
  set_has_lo_vel_rms_bicycle();
  lo_vel_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
}

// optional double la_vel_rms_bicycle = 20 [default = 0.8];
bool ModelConfigs::has_la_vel_rms_bicycle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_bicycle() {
  _has_bits_[0] |= 0x00080000u;
}
void ModelConfigs::clear_has_la_vel_rms_bicycle() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModelConfigs::clear_la_vel_rms_bicycle() {
  la_vel_rms_bicycle_ = 0.8;
  clear_has_la_vel_rms_bicycle();
}
 double ModelConfigs::la_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
  return la_vel_rms_bicycle_;
}
 void ModelConfigs::set_la_vel_rms_bicycle(double value) {
  set_has_la_vel_rms_bicycle();
  la_vel_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
}

// optional double lo_dist_rms_bicycle = 21 [default = 0.5];
bool ModelConfigs::has_lo_dist_rms_bicycle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_bicycle() {
  _has_bits_[0] |= 0x00100000u;
}
void ModelConfigs::clear_has_lo_dist_rms_bicycle() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModelConfigs::clear_lo_dist_rms_bicycle() {
  lo_dist_rms_bicycle_ = 0.5;
  clear_has_lo_dist_rms_bicycle();
}
 double ModelConfigs::lo_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
  return lo_dist_rms_bicycle_;
}
 void ModelConfigs::set_lo_dist_rms_bicycle(double value) {
  set_has_lo_dist_rms_bicycle();
  lo_dist_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
}

// optional double la_dist_rms_bicycle = 22 [default = 0.8];
bool ModelConfigs::has_la_dist_rms_bicycle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_bicycle() {
  _has_bits_[0] |= 0x00200000u;
}
void ModelConfigs::clear_has_la_dist_rms_bicycle() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModelConfigs::clear_la_dist_rms_bicycle() {
  la_dist_rms_bicycle_ = 0.8;
  clear_has_la_dist_rms_bicycle();
}
 double ModelConfigs::la_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
  return la_dist_rms_bicycle_;
}
 void ModelConfigs::set_la_dist_rms_bicycle(double value) {
  set_has_la_dist_rms_bicycle();
  la_dist_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
}

// optional double lo_vel_rms_unknown = 23 [default = 0.2];
bool ModelConfigs::has_lo_vel_rms_unknown() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_unknown() {
  _has_bits_[0] |= 0x00400000u;
}
void ModelConfigs::clear_has_lo_vel_rms_unknown() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModelConfigs::clear_lo_vel_rms_unknown() {
  lo_vel_rms_unknown_ = 0.2;
  clear_has_lo_vel_rms_unknown();
}
 double ModelConfigs::lo_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
  return lo_vel_rms_unknown_;
}
 void ModelConfigs::set_lo_vel_rms_unknown(double value) {
  set_has_lo_vel_rms_unknown();
  lo_vel_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
}

// optional double la_vel_rms_unknown = 24 [default = 0.3];
bool ModelConfigs::has_la_vel_rms_unknown() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_unknown() {
  _has_bits_[0] |= 0x00800000u;
}
void ModelConfigs::clear_has_la_vel_rms_unknown() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModelConfigs::clear_la_vel_rms_unknown() {
  la_vel_rms_unknown_ = 0.3;
  clear_has_la_vel_rms_unknown();
}
 double ModelConfigs::la_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
  return la_vel_rms_unknown_;
}
 void ModelConfigs::set_la_vel_rms_unknown(double value) {
  set_has_la_vel_rms_unknown();
  la_vel_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
}

// optional double lo_dist_rms_unknown = 25 [default = 0.2];
bool ModelConfigs::has_lo_dist_rms_unknown() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_unknown() {
  _has_bits_[0] |= 0x01000000u;
}
void ModelConfigs::clear_has_lo_dist_rms_unknown() {
  _has_bits_[0] &= ~0x01000000u;
}
void ModelConfigs::clear_lo_dist_rms_unknown() {
  lo_dist_rms_unknown_ = 0.2;
  clear_has_lo_dist_rms_unknown();
}
 double ModelConfigs::lo_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
  return lo_dist_rms_unknown_;
}
 void ModelConfigs::set_lo_dist_rms_unknown(double value) {
  set_has_lo_dist_rms_unknown();
  lo_dist_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
}

// optional double la_dist_rms_unknown = 26 [default = 0.3];
bool ModelConfigs::has_la_dist_rms_unknown() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_unknown() {
  _has_bits_[0] |= 0x02000000u;
}
void ModelConfigs::clear_has_la_dist_rms_unknown() {
  _has_bits_[0] &= ~0x02000000u;
}
void ModelConfigs::clear_la_dist_rms_unknown() {
  la_dist_rms_unknown_ = 0.3;
  clear_has_la_dist_rms_unknown();
}
 double ModelConfigs::la_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
  return la_dist_rms_unknown_;
}
 void ModelConfigs::set_la_dist_rms_unknown(double value) {
  set_has_la_dist_rms_unknown();
  la_dist_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace modest_radar_detector_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
