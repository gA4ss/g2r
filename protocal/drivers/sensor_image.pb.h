// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/sensor_image.proto

#ifndef PROTOBUF_drivers_2fsensor_5fimage_2eproto__INCLUDED
#define PROTOBUF_drivers_2fsensor_5fimage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/header.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto();
void protobuf_AssignDesc_drivers_2fsensor_5fimage_2eproto();
void protobuf_ShutdownFile_drivers_2fsensor_5fimage_2eproto();

class CompressedImage;
class Image;

enum PixelFormat {
  RGB8 = 1001,
  RGBA8 = 1002,
  RGB16 = 1003,
  RGBA16 = 1004,
  BGR8 = 1005,
  BGRA8 = 1006,
  BGR16 = 1007,
  BGRA16 = 1008,
  MONO8 = 1009,
  MONO16 = 1010,
  TYPE_8UC1 = 2001,
  TYPE_8UC2 = 2002,
  TYPE_8UC3 = 2003,
  TYPE_8UC4 = 2004,
  TYPE_8SC1 = 2005,
  TYPE_8SC2 = 2006,
  TYPE_8SC3 = 2007,
  TYPE_8SC4 = 2008,
  TYPE_16UC1 = 2009,
  TYPE_16UC2 = 2010,
  TYPE_16UC3 = 2011,
  TYPE_16UC4 = 2012,
  TYPE_16SC1 = 2013,
  TYPE_16SC2 = 2014,
  TYPE_16SC3 = 2015,
  TYPE_16SC4 = 2016,
  TYPE_32SC1 = 2017,
  TYPE_32SC2 = 2018,
  TYPE_32SC3 = 2019,
  TYPE_32SC4 = 2020,
  TYPE_32FC1 = 2021,
  TYPE_32FC2 = 2022,
  TYPE_32FC3 = 2023,
  TYPE_32FC4 = 2024,
  TYPE_64FC1 = 2025,
  TYPE_64FC2 = 2026,
  TYPE_64FC3 = 2027,
  TYPE_64FC4 = 2028,
  BAYER_RGGB8 = 3001,
  BAYER_BGGR8 = 3002,
  BAYER_GBRG8 = 3003,
  BAYER_GRBG8 = 3004,
  BAYER_RGGB16 = 3005,
  BAYER_BGGR16 = 3006,
  BAYER_GBRG16 = 3007,
  BAYER_GRBG16 = 3008,
  YUV422 = 4001
};
bool PixelFormat_IsValid(int value);
const PixelFormat PixelFormat_MIN = RGB8;
const PixelFormat PixelFormat_MAX = YUV422;
const int PixelFormat_ARRAYSIZE = PixelFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* PixelFormat_descriptor();
inline const ::std::string& PixelFormat_Name(PixelFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    PixelFormat_descriptor(), value);
}
inline bool PixelFormat_Parse(
    const ::std::string& name, PixelFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PixelFormat>(
    PixelFormat_descriptor(), name, value);
}
// ===================================================================

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional string frame_id = 2;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // required double measurement_time = 3;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 3;
  double measurement_time() const;
  void set_measurement_time(double value);

  // optional uint32 height = 4;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 5;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional string encoding = 6;
  bool has_encoding() const;
  void clear_encoding();
  static const int kEncodingFieldNumber = 6;
  const ::std::string& encoding() const;
  void set_encoding(const ::std::string& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  ::std::string* mutable_encoding();
  ::std::string* release_encoding();
  void set_allocated_encoding(::std::string* encoding);

  // optional uint32 step = 7;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 7;
  ::google::protobuf::uint32 step() const;
  void set_step(::google::protobuf::uint32 value);

  // optional bytes data = 8;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:apollo.drivers.Image)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_measurement_time();
  inline void clear_has_measurement_time();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_encoding();
  inline void clear_has_encoding();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  double measurement_time_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::internal::ArenaStringPtr encoding_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 step_;
  friend void  protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto();
  friend void protobuf_AssignDesc_drivers_2fsensor_5fimage_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fsensor_5fimage_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class CompressedImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.CompressedImage) */ {
 public:
  CompressedImage();
  virtual ~CompressedImage();

  CompressedImage(const CompressedImage& from);

  inline CompressedImage& operator=(const CompressedImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedImage& default_instance();

  void Swap(CompressedImage* other);

  // implements Message ----------------------------------------------

  inline CompressedImage* New() const { return New(NULL); }

  CompressedImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompressedImage& from);
  void MergeFrom(const CompressedImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompressedImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional string frame_id = 2;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // optional string format = 3;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:apollo.drivers.CompressedImage)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend void  protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto();
  friend void protobuf_AssignDesc_drivers_2fsensor_5fimage_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fsensor_5fimage_2eproto();

  void InitAsDefaultInstance();
  static CompressedImage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional .apollo.common.Header header = 1;
inline bool Image::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& Image::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* Image::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.header)
  return header_;
}
inline ::apollo::common::Header* Image::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Image::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.header)
}

// optional string frame_id = 2;
inline bool Image::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& Image::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.frame_id)
  return frame_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.frame_id)
}
inline void Image::set_frame_id(const char* value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.Image.frame_id)
}
inline void Image::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.Image.frame_id)
}
inline ::std::string* Image::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.frame_id)
}

// required double measurement_time = 3;
inline bool Image::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double Image::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.measurement_time)
  return measurement_time_;
}
inline void Image::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.measurement_time)
}

// optional uint32 height = 4;
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.height)
}

// optional uint32 width = 5;
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.width)
}

// optional string encoding = 6;
inline bool Image::has_encoding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_encoding() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encoding();
}
inline const ::std::string& Image::encoding() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.encoding)
  return encoding_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_encoding(const ::std::string& value) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.encoding)
}
inline void Image::set_encoding(const char* value) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.Image.encoding)
}
inline void Image::set_encoding(const char* value, size_t size) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.Image.encoding)
}
inline ::std::string* Image::mutable_encoding() {
  set_has_encoding();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.encoding)
  return encoding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_encoding() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.encoding)
  clear_has_encoding();
  return encoding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_encoding(::std::string* encoding) {
  if (encoding != NULL) {
    set_has_encoding();
  } else {
    clear_has_encoding();
  }
  encoding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.encoding)
}

// optional uint32 step = 7;
inline bool Image::has_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Image::set_has_step() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Image::clear_has_step() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Image::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 Image::step() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.step)
  return step_;
}
inline void Image::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.step)
}

// optional bytes data = 8;
inline bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Image::set_has_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.data)
}
inline void Image::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.Image.data)
}
inline ::std::string* Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.data)
}

// -------------------------------------------------------------------

// CompressedImage

// optional .apollo.common.Header header = 1;
inline bool CompressedImage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompressedImage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompressedImage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompressedImage::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& CompressedImage::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* CompressedImage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.header)
  return header_;
}
inline ::apollo::common::Header* CompressedImage::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CompressedImage::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.header)
}

// optional string frame_id = 2;
inline bool CompressedImage::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompressedImage::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompressedImage::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompressedImage::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& CompressedImage::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.frame_id)
  return frame_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.CompressedImage.frame_id)
}
inline void CompressedImage::set_frame_id(const char* value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.CompressedImage.frame_id)
}
inline void CompressedImage::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.CompressedImage.frame_id)
}
inline ::std::string* CompressedImage::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompressedImage::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.frame_id)
}

// optional string format = 3;
inline bool CompressedImage::has_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompressedImage::set_has_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompressedImage::clear_has_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompressedImage::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
inline const ::std::string& CompressedImage::format() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.format)
  return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.CompressedImage.format)
}
inline void CompressedImage::set_format(const char* value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.CompressedImage.format)
}
inline void CompressedImage::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.CompressedImage.format)
}
inline ::std::string* CompressedImage::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompressedImage::release_format() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.format)
  clear_has_format();
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.format)
}

// optional bytes data = 4;
inline bool CompressedImage::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompressedImage::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompressedImage::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompressedImage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& CompressedImage::data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.CompressedImage.data)
}
inline void CompressedImage::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.CompressedImage.data)
}
inline void CompressedImage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.CompressedImage.data)
}
inline ::std::string* CompressedImage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompressedImage::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::PixelFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::PixelFormat>() {
  return ::apollo::drivers::PixelFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drivers_2fsensor_5fimage_2eproto__INCLUDED
