// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/reference_line_smoother_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/reference_line_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* QpSplineSmootherConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QpSplineSmootherConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiralSmootherConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiralSmootherConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CosThetaSmootherConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CosThetaSmootherConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceLineSmootherConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceLineSmootherConfig_reflection_ = NULL;
struct ReferenceLineSmootherConfigOneofInstance {
  const ::apollo::planning::QpSplineSmootherConfig* qp_spline_;
  const ::apollo::planning::SpiralSmootherConfig* spiral_;
  const ::apollo::planning::CosThetaSmootherConfig* cos_theta_;
}* ReferenceLineSmootherConfig_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* ReferenceLineSmootherConfig_DrivingSide_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/reference_line_smoother_config.proto");
  GOOGLE_CHECK(file != NULL);
  QpSplineSmootherConfig_descriptor_ = file->message_type(0);
  static const int QpSplineSmootherConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineSmootherConfig, spline_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineSmootherConfig, max_spline_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineSmootherConfig, regularization_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineSmootherConfig, second_derivative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineSmootherConfig, third_derivative_weight_),
  };
  QpSplineSmootherConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QpSplineSmootherConfig_descriptor_,
      QpSplineSmootherConfig::default_instance_,
      QpSplineSmootherConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineSmootherConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(QpSplineSmootherConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineSmootherConfig, _internal_metadata_),
      -1);
  SpiralSmootherConfig_descriptor_ = file->message_type(1);
  static const int SpiralSmootherConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, max_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, piecewise_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, max_iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, opt_tol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, opt_acceptable_tol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, opt_acceptable_iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, opt_weight_curve_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, opt_weight_kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, opt_weight_dkappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, opt_weight_d2kappa_),
  };
  SpiralSmootherConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpiralSmootherConfig_descriptor_,
      SpiralSmootherConfig::default_instance_,
      SpiralSmootherConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpiralSmootherConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiralSmootherConfig, _internal_metadata_),
      -1);
  CosThetaSmootherConfig_descriptor_ = file->message_type(2);
  static const int CosThetaSmootherConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, max_point_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, num_of_iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, weight_cos_included_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, acceptable_tol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, relax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, reopt_qp_bound_),
  };
  CosThetaSmootherConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CosThetaSmootherConfig_descriptor_,
      CosThetaSmootherConfig::default_instance_,
      CosThetaSmootherConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CosThetaSmootherConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosThetaSmootherConfig, _internal_metadata_),
      -1);
  ReferenceLineSmootherConfig_descriptor_ = file->message_type(3);
  static const int ReferenceLineSmootherConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, max_constraint_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, longitudinal_boundary_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, lateral_boundary_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, num_of_total_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, curb_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, driving_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, wide_lane_threshold_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, wide_lane_shift_remain_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, resolution_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReferenceLineSmootherConfig_default_oneof_instance_, qp_spline_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReferenceLineSmootherConfig_default_oneof_instance_, spiral_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReferenceLineSmootherConfig_default_oneof_instance_, cos_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, SmootherConfig_),
  };
  ReferenceLineSmootherConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReferenceLineSmootherConfig_descriptor_,
      ReferenceLineSmootherConfig::default_instance_,
      ReferenceLineSmootherConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, _has_bits_[0]),
      -1,
      -1,
      ReferenceLineSmootherConfig_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, _oneof_case_[0]),
      sizeof(ReferenceLineSmootherConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineSmootherConfig, _internal_metadata_),
      -1);
  ReferenceLineSmootherConfig_DrivingSide_descriptor_ = ReferenceLineSmootherConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QpSplineSmootherConfig_descriptor_, &QpSplineSmootherConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpiralSmootherConfig_descriptor_, &SpiralSmootherConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CosThetaSmootherConfig_descriptor_, &CosThetaSmootherConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReferenceLineSmootherConfig_descriptor_, &ReferenceLineSmootherConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2freference_5fline_5fsmoother_5fconfig_2eproto() {
  delete QpSplineSmootherConfig::default_instance_;
  delete QpSplineSmootherConfig_reflection_;
  delete SpiralSmootherConfig::default_instance_;
  delete SpiralSmootherConfig_reflection_;
  delete CosThetaSmootherConfig::default_instance_;
  delete CosThetaSmootherConfig_reflection_;
  delete ReferenceLineSmootherConfig::default_instance_;
  delete ReferenceLineSmootherConfig_default_oneof_instance_;
  delete ReferenceLineSmootherConfig_reflection_;
}

void protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-planning/reference_line_smoother_confi"
    "g.proto\022\017apollo.planning\"\277\001\n\026QpSplineSmo"
    "otherConfig\022\027\n\014spline_order\030\001 \001(\r:\0015\022\035\n\021"
    "max_spline_length\030\002 \001(\001:\00225\022\"\n\025regulariz"
    "ation_weight\030\003 \001(\001:\0030.1\022#\n\030second_deriva"
    "tive_weight\030\004 \001(\001:\0010\022$\n\027third_derivative"
    "_weight\030\005 \001(\001:\003100\"\316\002\n\024SpiralSmootherCon"
    "fig\022\032\n\rmax_deviation\030\001 \001(\001:\0030.1\022\034\n\020piece"
    "wise_length\030\002 \001(\001:\00210\022\033\n\rmax_iteration\030\003"
    " \001(\005:\0041000\022\026\n\007opt_tol\030\004 \001(\001:\0051e-08\022!\n\022op"
    "t_acceptable_tol\030\005 \001(\001:\0051e-06\022$\n\030opt_acc"
    "eptable_iteration\030\006 \001(\005:\00215\022\"\n\027opt_weigh"
    "t_curve_length\030\007 \001(\001:\0010\022\035\n\020opt_weight_ka"
    "ppa\030\010 \001(\001:\0031.5\022\034\n\021opt_weight_dkappa\030\t \001("
    "\001:\0011\022\035\n\022opt_weight_d2kappa\030\n \001(\001:\0010\"\322\001\n\026"
    "CosThetaSmootherConfig\022\036\n\023max_point_devi"
    "ation\030\001 \001(\001:\0015\022\037\n\020num_of_iteration\030\002 \001(\005"
    ":\00510000\022(\n\031weight_cos_included_angle\030\003 \001"
    "(\001:\00510000\022\033\n\016acceptable_tol\030\004 \001(\001:\0030.1\022\022"
    "\n\005relax\030\005 \001(\001:\0030.2\022\034\n\016reopt_qp_bound\030\006 \001"
    "(\001:\0040.05\"\370\004\n\033ReferenceLineSmootherConfig"
    "\022\"\n\027max_constraint_interval\030\001 \001(\001:\0015\022&\n\033"
    "longitudinal_boundary_bound\030\002 \001(\001:\0011\022#\n\026"
    "lateral_boundary_bound\030\003 \001(\001:\0030.1\022 \n\023num"
    "_of_total_points\030\004 \001(\r:\003500\022\027\n\ncurb_shif"
    "t\030\005 \001(\001:\0030.2\022U\n\014driving_side\030\006 \001(\01628.apo"
    "llo.planning.ReferenceLineSmootherConfig"
    ".DrivingSide:\005RIGHT\022%\n\032wide_lane_thresho"
    "ld_factor\030\007 \001(\001:\0012\022*\n\035wide_lane_shift_re"
    "main_factor\030\010 \001(\001:\0030.5\022\030\n\nresolution\030\t \001"
    "(\001:\0040.02\022<\n\tqp_spline\030\024 \001(\0132\'.apollo.pla"
    "nning.QpSplineSmootherConfigH\000\0227\n\006spiral"
    "\030\025 \001(\0132%.apollo.planning.SpiralSmootherC"
    "onfigH\000\022<\n\tcos_theta\030\026 \001(\0132\'.apollo.plan"
    "ning.CosThetaSmootherConfigH\000\"\"\n\013Driving"
    "Side\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002B\020\n\016SmootherCon"
    "fig", 1443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/reference_line_smoother_config.proto", &protobuf_RegisterTypes);
  QpSplineSmootherConfig::default_instance_ = new QpSplineSmootherConfig();
  SpiralSmootherConfig::default_instance_ = new SpiralSmootherConfig();
  CosThetaSmootherConfig::default_instance_ = new CosThetaSmootherConfig();
  ReferenceLineSmootherConfig::default_instance_ = new ReferenceLineSmootherConfig();
  ReferenceLineSmootherConfig_default_oneof_instance_ = new ReferenceLineSmootherConfigOneofInstance();
  QpSplineSmootherConfig::default_instance_->InitAsDefaultInstance();
  SpiralSmootherConfig::default_instance_->InitAsDefaultInstance();
  CosThetaSmootherConfig::default_instance_->InitAsDefaultInstance();
  ReferenceLineSmootherConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2freference_5fline_5fsmoother_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2freference_5fline_5fsmoother_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2freference_5fline_5fsmoother_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2freference_5fline_5fsmoother_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplineSmootherConfig::kSplineOrderFieldNumber;
const int QpSplineSmootherConfig::kMaxSplineLengthFieldNumber;
const int QpSplineSmootherConfig::kRegularizationWeightFieldNumber;
const int QpSplineSmootherConfig::kSecondDerivativeWeightFieldNumber;
const int QpSplineSmootherConfig::kThirdDerivativeWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplineSmootherConfig::QpSplineSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QpSplineSmootherConfig)
}

void QpSplineSmootherConfig::InitAsDefaultInstance() {
}

QpSplineSmootherConfig::QpSplineSmootherConfig(const QpSplineSmootherConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplineSmootherConfig)
}

void QpSplineSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  spline_order_ = 5u;
  max_spline_length_ = 25;
  regularization_weight_ = 0.1;
  second_derivative_weight_ = 0;
  third_derivative_weight_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QpSplineSmootherConfig::~QpSplineSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplineSmootherConfig)
  SharedDtor();
}

void QpSplineSmootherConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QpSplineSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpSplineSmootherConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QpSplineSmootherConfig_descriptor_;
}

const QpSplineSmootherConfig& QpSplineSmootherConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  return *default_instance_;
}

QpSplineSmootherConfig* QpSplineSmootherConfig::default_instance_ = NULL;

QpSplineSmootherConfig* QpSplineSmootherConfig::New(::google::protobuf::Arena* arena) const {
  QpSplineSmootherConfig* n = new QpSplineSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpSplineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplineSmootherConfig)
  if (_has_bits_[0 / 32] & 31u) {
    spline_order_ = 5u;
    max_spline_length_ = 25;
    regularization_weight_ = 0.1;
    second_derivative_weight_ = 0;
    third_derivative_weight_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QpSplineSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.QpSplineSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spline_order = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
          set_has_spline_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max_spline_length;
        break;
      }

      // optional double max_spline_length = 2 [default = 25];
      case 2: {
        if (tag == 17) {
         parse_max_spline_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_spline_length_)));
          set_has_max_spline_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_regularization_weight;
        break;
      }

      // optional double regularization_weight = 3 [default = 0.1];
      case 3: {
        if (tag == 25) {
         parse_regularization_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
          set_has_regularization_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_second_derivative_weight;
        break;
      }

      // optional double second_derivative_weight = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_second_derivative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_derivative_weight_)));
          set_has_second_derivative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_third_derivative_weight;
        break;
      }

      // optional double third_derivative_weight = 5 [default = 100];
      case 5: {
        if (tag == 41) {
         parse_third_derivative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &third_derivative_weight_)));
          set_has_third_derivative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.QpSplineSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.QpSplineSmootherConfig)
  return false;
#undef DO_
}

void QpSplineSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.QpSplineSmootherConfig)
  // optional uint32 spline_order = 1 [default = 5];
  if (has_spline_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spline_order(), output);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (has_max_spline_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_spline_length(), output);
  }

  // optional double regularization_weight = 3 [default = 0.1];
  if (has_regularization_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->regularization_weight(), output);
  }

  // optional double second_derivative_weight = 4 [default = 0];
  if (has_second_derivative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->second_derivative_weight(), output);
  }

  // optional double third_derivative_weight = 5 [default = 100];
  if (has_third_derivative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->third_derivative_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.QpSplineSmootherConfig)
}

::google::protobuf::uint8* QpSplineSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplineSmootherConfig)
  // optional uint32 spline_order = 1 [default = 5];
  if (has_spline_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (has_max_spline_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_spline_length(), target);
  }

  // optional double regularization_weight = 3 [default = 0.1];
  if (has_regularization_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->regularization_weight(), target);
  }

  // optional double second_derivative_weight = 4 [default = 0];
  if (has_second_derivative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 5 [default = 100];
  if (has_third_derivative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->third_derivative_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplineSmootherConfig)
  return target;
}

int QpSplineSmootherConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplineSmootherConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 spline_order = 1 [default = 5];
    if (has_spline_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_order());
    }

    // optional double max_spline_length = 2 [default = 25];
    if (has_max_spline_length()) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 3 [default = 0.1];
    if (has_regularization_weight()) {
      total_size += 1 + 8;
    }

    // optional double second_derivative_weight = 4 [default = 0];
    if (has_second_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional double third_derivative_weight = 5 [default = 100];
    if (has_third_derivative_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpSplineSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QpSplineSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QpSplineSmootherConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplineSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QpSplineSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QpSplineSmootherConfig)
    MergeFrom(*source);
  }
}

void QpSplineSmootherConfig::MergeFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplineSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spline_order()) {
      set_spline_order(from.spline_order());
    }
    if (from.has_max_spline_length()) {
      set_max_spline_length(from.max_spline_length());
    }
    if (from.has_regularization_weight()) {
      set_regularization_weight(from.regularization_weight());
    }
    if (from.has_second_derivative_weight()) {
      set_second_derivative_weight(from.second_derivative_weight());
    }
    if (from.has_third_derivative_weight()) {
      set_third_derivative_weight(from.third_derivative_weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QpSplineSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplineSmootherConfig::CopyFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineSmootherConfig::IsInitialized() const {

  return true;
}

void QpSplineSmootherConfig::Swap(QpSplineSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplineSmootherConfig::InternalSwap(QpSplineSmootherConfig* other) {
  std::swap(spline_order_, other->spline_order_);
  std::swap(max_spline_length_, other->max_spline_length_);
  std::swap(regularization_weight_, other->regularization_weight_);
  std::swap(second_derivative_weight_, other->second_derivative_weight_);
  std::swap(third_derivative_weight_, other->third_derivative_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpSplineSmootherConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QpSplineSmootherConfig_descriptor_;
  metadata.reflection = QpSplineSmootherConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplineSmootherConfig

// optional uint32 spline_order = 1 [default = 5];
bool QpSplineSmootherConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QpSplineSmootherConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000001u;
}
void QpSplineSmootherConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000001u;
}
void QpSplineSmootherConfig::clear_spline_order() {
  spline_order_ = 5u;
  clear_has_spline_order();
}
 ::google::protobuf::uint32 QpSplineSmootherConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.spline_order)
  return spline_order_;
}
 void QpSplineSmootherConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 25];
bool QpSplineSmootherConfig::has_max_spline_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QpSplineSmootherConfig::set_has_max_spline_length() {
  _has_bits_[0] |= 0x00000002u;
}
void QpSplineSmootherConfig::clear_has_max_spline_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void QpSplineSmootherConfig::clear_max_spline_length() {
  max_spline_length_ = 25;
  clear_has_max_spline_length();
}
 double QpSplineSmootherConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.max_spline_length)
  return max_spline_length_;
}
 void QpSplineSmootherConfig::set_max_spline_length(double value) {
  set_has_max_spline_length();
  max_spline_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.max_spline_length)
}

// optional double regularization_weight = 3 [default = 0.1];
bool QpSplineSmootherConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QpSplineSmootherConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void QpSplineSmootherConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void QpSplineSmootherConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
 double QpSplineSmootherConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.regularization_weight)
  return regularization_weight_;
}
 void QpSplineSmootherConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.regularization_weight)
}

// optional double second_derivative_weight = 4 [default = 0];
bool QpSplineSmootherConfig::has_second_derivative_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QpSplineSmootherConfig::set_has_second_derivative_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void QpSplineSmootherConfig::clear_has_second_derivative_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void QpSplineSmootherConfig::clear_second_derivative_weight() {
  second_derivative_weight_ = 0;
  clear_has_second_derivative_weight();
}
 double QpSplineSmootherConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.second_derivative_weight)
  return second_derivative_weight_;
}
 void QpSplineSmootherConfig::set_second_derivative_weight(double value) {
  set_has_second_derivative_weight();
  second_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 5 [default = 100];
bool QpSplineSmootherConfig::has_third_derivative_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QpSplineSmootherConfig::set_has_third_derivative_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void QpSplineSmootherConfig::clear_has_third_derivative_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void QpSplineSmootherConfig::clear_third_derivative_weight() {
  third_derivative_weight_ = 100;
  clear_has_third_derivative_weight();
}
 double QpSplineSmootherConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.third_derivative_weight)
  return third_derivative_weight_;
}
 void QpSplineSmootherConfig::set_third_derivative_weight(double value) {
  set_has_third_derivative_weight();
  third_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.third_derivative_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiralSmootherConfig::kMaxDeviationFieldNumber;
const int SpiralSmootherConfig::kPiecewiseLengthFieldNumber;
const int SpiralSmootherConfig::kMaxIterationFieldNumber;
const int SpiralSmootherConfig::kOptTolFieldNumber;
const int SpiralSmootherConfig::kOptAcceptableTolFieldNumber;
const int SpiralSmootherConfig::kOptAcceptableIterationFieldNumber;
const int SpiralSmootherConfig::kOptWeightCurveLengthFieldNumber;
const int SpiralSmootherConfig::kOptWeightKappaFieldNumber;
const int SpiralSmootherConfig::kOptWeightDkappaFieldNumber;
const int SpiralSmootherConfig::kOptWeightD2KappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiralSmootherConfig::SpiralSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SpiralSmootherConfig)
}

void SpiralSmootherConfig::InitAsDefaultInstance() {
}

SpiralSmootherConfig::SpiralSmootherConfig(const SpiralSmootherConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpiralSmootherConfig)
}

void SpiralSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  max_deviation_ = 0.1;
  piecewise_length_ = 10;
  max_iteration_ = 1000;
  opt_tol_ = 1e-08;
  opt_acceptable_tol_ = 1e-06;
  opt_acceptable_iteration_ = 15;
  opt_weight_curve_length_ = 0;
  opt_weight_kappa_ = 1.5;
  opt_weight_dkappa_ = 1;
  opt_weight_d2kappa_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiralSmootherConfig::~SpiralSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpiralSmootherConfig)
  SharedDtor();
}

void SpiralSmootherConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiralSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiralSmootherConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiralSmootherConfig_descriptor_;
}

const SpiralSmootherConfig& SpiralSmootherConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  return *default_instance_;
}

SpiralSmootherConfig* SpiralSmootherConfig::default_instance_ = NULL;

SpiralSmootherConfig* SpiralSmootherConfig::New(::google::protobuf::Arena* arena) const {
  SpiralSmootherConfig* n = new SpiralSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiralSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpiralSmootherConfig)
  if (_has_bits_[0 / 32] & 255u) {
    max_deviation_ = 0.1;
    piecewise_length_ = 10;
    max_iteration_ = 1000;
    opt_tol_ = 1e-08;
    opt_acceptable_tol_ = 1e-06;
    opt_acceptable_iteration_ = 15;
    opt_weight_curve_length_ = 0;
    opt_weight_kappa_ = 1.5;
  }
  if (_has_bits_[8 / 32] & 768u) {
    opt_weight_dkappa_ = 1;
    opt_weight_d2kappa_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpiralSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SpiralSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_deviation = 1 [default = 0.1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deviation_)));
          set_has_max_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_piecewise_length;
        break;
      }

      // optional double piecewise_length = 2 [default = 10];
      case 2: {
        if (tag == 17) {
         parse_piecewise_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &piecewise_length_)));
          set_has_piecewise_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_iteration;
        break;
      }

      // optional int32 max_iteration = 3 [default = 1000];
      case 3: {
        if (tag == 24) {
         parse_max_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));
          set_has_max_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_opt_tol;
        break;
      }

      // optional double opt_tol = 4 [default = 1e-08];
      case 4: {
        if (tag == 33) {
         parse_opt_tol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_tol_)));
          set_has_opt_tol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_opt_acceptable_tol;
        break;
      }

      // optional double opt_acceptable_tol = 5 [default = 1e-06];
      case 5: {
        if (tag == 41) {
         parse_opt_acceptable_tol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_acceptable_tol_)));
          set_has_opt_acceptable_tol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_opt_acceptable_iteration;
        break;
      }

      // optional int32 opt_acceptable_iteration = 6 [default = 15];
      case 6: {
        if (tag == 48) {
         parse_opt_acceptable_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_acceptable_iteration_)));
          set_has_opt_acceptable_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_opt_weight_curve_length;
        break;
      }

      // optional double opt_weight_curve_length = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_opt_weight_curve_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_weight_curve_length_)));
          set_has_opt_weight_curve_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_opt_weight_kappa;
        break;
      }

      // optional double opt_weight_kappa = 8 [default = 1.5];
      case 8: {
        if (tag == 65) {
         parse_opt_weight_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_weight_kappa_)));
          set_has_opt_weight_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_opt_weight_dkappa;
        break;
      }

      // optional double opt_weight_dkappa = 9 [default = 1];
      case 9: {
        if (tag == 73) {
         parse_opt_weight_dkappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_weight_dkappa_)));
          set_has_opt_weight_dkappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_opt_weight_d2kappa;
        break;
      }

      // optional double opt_weight_d2kappa = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_opt_weight_d2kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_weight_d2kappa_)));
          set_has_opt_weight_d2kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SpiralSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SpiralSmootherConfig)
  return false;
#undef DO_
}

void SpiralSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SpiralSmootherConfig)
  // optional double max_deviation = 1 [default = 0.1];
  if (has_max_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_deviation(), output);
  }

  // optional double piecewise_length = 2 [default = 10];
  if (has_piecewise_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->piecewise_length(), output);
  }

  // optional int32 max_iteration = 3 [default = 1000];
  if (has_max_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_iteration(), output);
  }

  // optional double opt_tol = 4 [default = 1e-08];
  if (has_opt_tol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->opt_tol(), output);
  }

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  if (has_opt_acceptable_tol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->opt_acceptable_tol(), output);
  }

  // optional int32 opt_acceptable_iteration = 6 [default = 15];
  if (has_opt_acceptable_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->opt_acceptable_iteration(), output);
  }

  // optional double opt_weight_curve_length = 7 [default = 0];
  if (has_opt_weight_curve_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->opt_weight_curve_length(), output);
  }

  // optional double opt_weight_kappa = 8 [default = 1.5];
  if (has_opt_weight_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->opt_weight_kappa(), output);
  }

  // optional double opt_weight_dkappa = 9 [default = 1];
  if (has_opt_weight_dkappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->opt_weight_dkappa(), output);
  }

  // optional double opt_weight_d2kappa = 10 [default = 0];
  if (has_opt_weight_d2kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->opt_weight_d2kappa(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SpiralSmootherConfig)
}

::google::protobuf::uint8* SpiralSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpiralSmootherConfig)
  // optional double max_deviation = 1 [default = 0.1];
  if (has_max_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_deviation(), target);
  }

  // optional double piecewise_length = 2 [default = 10];
  if (has_piecewise_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->piecewise_length(), target);
  }

  // optional int32 max_iteration = 3 [default = 1000];
  if (has_max_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_iteration(), target);
  }

  // optional double opt_tol = 4 [default = 1e-08];
  if (has_opt_tol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->opt_tol(), target);
  }

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  if (has_opt_acceptable_tol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->opt_acceptable_tol(), target);
  }

  // optional int32 opt_acceptable_iteration = 6 [default = 15];
  if (has_opt_acceptable_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->opt_acceptable_iteration(), target);
  }

  // optional double opt_weight_curve_length = 7 [default = 0];
  if (has_opt_weight_curve_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->opt_weight_curve_length(), target);
  }

  // optional double opt_weight_kappa = 8 [default = 1.5];
  if (has_opt_weight_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->opt_weight_kappa(), target);
  }

  // optional double opt_weight_dkappa = 9 [default = 1];
  if (has_opt_weight_dkappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->opt_weight_dkappa(), target);
  }

  // optional double opt_weight_d2kappa = 10 [default = 0];
  if (has_opt_weight_d2kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->opt_weight_d2kappa(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpiralSmootherConfig)
  return target;
}

int SpiralSmootherConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpiralSmootherConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double max_deviation = 1 [default = 0.1];
    if (has_max_deviation()) {
      total_size += 1 + 8;
    }

    // optional double piecewise_length = 2 [default = 10];
    if (has_piecewise_length()) {
      total_size += 1 + 8;
    }

    // optional int32 max_iteration = 3 [default = 1000];
    if (has_max_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iteration());
    }

    // optional double opt_tol = 4 [default = 1e-08];
    if (has_opt_tol()) {
      total_size += 1 + 8;
    }

    // optional double opt_acceptable_tol = 5 [default = 1e-06];
    if (has_opt_acceptable_tol()) {
      total_size += 1 + 8;
    }

    // optional int32 opt_acceptable_iteration = 6 [default = 15];
    if (has_opt_acceptable_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_acceptable_iteration());
    }

    // optional double opt_weight_curve_length = 7 [default = 0];
    if (has_opt_weight_curve_length()) {
      total_size += 1 + 8;
    }

    // optional double opt_weight_kappa = 8 [default = 1.5];
    if (has_opt_weight_kappa()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double opt_weight_dkappa = 9 [default = 1];
    if (has_opt_weight_dkappa()) {
      total_size += 1 + 8;
    }

    // optional double opt_weight_d2kappa = 10 [default = 0];
    if (has_opt_weight_d2kappa()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiralSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SpiralSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpiralSmootherConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiralSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SpiralSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SpiralSmootherConfig)
    MergeFrom(*source);
  }
}

void SpiralSmootherConfig::MergeFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpiralSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_deviation()) {
      set_max_deviation(from.max_deviation());
    }
    if (from.has_piecewise_length()) {
      set_piecewise_length(from.piecewise_length());
    }
    if (from.has_max_iteration()) {
      set_max_iteration(from.max_iteration());
    }
    if (from.has_opt_tol()) {
      set_opt_tol(from.opt_tol());
    }
    if (from.has_opt_acceptable_tol()) {
      set_opt_acceptable_tol(from.opt_acceptable_tol());
    }
    if (from.has_opt_acceptable_iteration()) {
      set_opt_acceptable_iteration(from.opt_acceptable_iteration());
    }
    if (from.has_opt_weight_curve_length()) {
      set_opt_weight_curve_length(from.opt_weight_curve_length());
    }
    if (from.has_opt_weight_kappa()) {
      set_opt_weight_kappa(from.opt_weight_kappa());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opt_weight_dkappa()) {
      set_opt_weight_dkappa(from.opt_weight_dkappa());
    }
    if (from.has_opt_weight_d2kappa()) {
      set_opt_weight_d2kappa(from.opt_weight_d2kappa());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpiralSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiralSmootherConfig::CopyFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiralSmootherConfig::IsInitialized() const {

  return true;
}

void SpiralSmootherConfig::Swap(SpiralSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiralSmootherConfig::InternalSwap(SpiralSmootherConfig* other) {
  std::swap(max_deviation_, other->max_deviation_);
  std::swap(piecewise_length_, other->piecewise_length_);
  std::swap(max_iteration_, other->max_iteration_);
  std::swap(opt_tol_, other->opt_tol_);
  std::swap(opt_acceptable_tol_, other->opt_acceptable_tol_);
  std::swap(opt_acceptable_iteration_, other->opt_acceptable_iteration_);
  std::swap(opt_weight_curve_length_, other->opt_weight_curve_length_);
  std::swap(opt_weight_kappa_, other->opt_weight_kappa_);
  std::swap(opt_weight_dkappa_, other->opt_weight_dkappa_);
  std::swap(opt_weight_d2kappa_, other->opt_weight_d2kappa_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiralSmootherConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiralSmootherConfig_descriptor_;
  metadata.reflection = SpiralSmootherConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiralSmootherConfig

// optional double max_deviation = 1 [default = 0.1];
bool SpiralSmootherConfig::has_max_deviation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpiralSmootherConfig::set_has_max_deviation() {
  _has_bits_[0] |= 0x00000001u;
}
void SpiralSmootherConfig::clear_has_max_deviation() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpiralSmootherConfig::clear_max_deviation() {
  max_deviation_ = 0.1;
  clear_has_max_deviation();
}
 double SpiralSmootherConfig::max_deviation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.max_deviation)
  return max_deviation_;
}
 void SpiralSmootherConfig::set_max_deviation(double value) {
  set_has_max_deviation();
  max_deviation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.max_deviation)
}

// optional double piecewise_length = 2 [default = 10];
bool SpiralSmootherConfig::has_piecewise_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpiralSmootherConfig::set_has_piecewise_length() {
  _has_bits_[0] |= 0x00000002u;
}
void SpiralSmootherConfig::clear_has_piecewise_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpiralSmootherConfig::clear_piecewise_length() {
  piecewise_length_ = 10;
  clear_has_piecewise_length();
}
 double SpiralSmootherConfig::piecewise_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.piecewise_length)
  return piecewise_length_;
}
 void SpiralSmootherConfig::set_piecewise_length(double value) {
  set_has_piecewise_length();
  piecewise_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.piecewise_length)
}

// optional int32 max_iteration = 3 [default = 1000];
bool SpiralSmootherConfig::has_max_iteration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpiralSmootherConfig::set_has_max_iteration() {
  _has_bits_[0] |= 0x00000004u;
}
void SpiralSmootherConfig::clear_has_max_iteration() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpiralSmootherConfig::clear_max_iteration() {
  max_iteration_ = 1000;
  clear_has_max_iteration();
}
 ::google::protobuf::int32 SpiralSmootherConfig::max_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.max_iteration)
  return max_iteration_;
}
 void SpiralSmootherConfig::set_max_iteration(::google::protobuf::int32 value) {
  set_has_max_iteration();
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.max_iteration)
}

// optional double opt_tol = 4 [default = 1e-08];
bool SpiralSmootherConfig::has_opt_tol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpiralSmootherConfig::set_has_opt_tol() {
  _has_bits_[0] |= 0x00000008u;
}
void SpiralSmootherConfig::clear_has_opt_tol() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpiralSmootherConfig::clear_opt_tol() {
  opt_tol_ = 1e-08;
  clear_has_opt_tol();
}
 double SpiralSmootherConfig::opt_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_tol)
  return opt_tol_;
}
 void SpiralSmootherConfig::set_opt_tol(double value) {
  set_has_opt_tol();
  opt_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_tol)
}

// optional double opt_acceptable_tol = 5 [default = 1e-06];
bool SpiralSmootherConfig::has_opt_acceptable_tol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpiralSmootherConfig::set_has_opt_acceptable_tol() {
  _has_bits_[0] |= 0x00000010u;
}
void SpiralSmootherConfig::clear_has_opt_acceptable_tol() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpiralSmootherConfig::clear_opt_acceptable_tol() {
  opt_acceptable_tol_ = 1e-06;
  clear_has_opt_acceptable_tol();
}
 double SpiralSmootherConfig::opt_acceptable_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_acceptable_tol)
  return opt_acceptable_tol_;
}
 void SpiralSmootherConfig::set_opt_acceptable_tol(double value) {
  set_has_opt_acceptable_tol();
  opt_acceptable_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_acceptable_tol)
}

// optional int32 opt_acceptable_iteration = 6 [default = 15];
bool SpiralSmootherConfig::has_opt_acceptable_iteration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpiralSmootherConfig::set_has_opt_acceptable_iteration() {
  _has_bits_[0] |= 0x00000020u;
}
void SpiralSmootherConfig::clear_has_opt_acceptable_iteration() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpiralSmootherConfig::clear_opt_acceptable_iteration() {
  opt_acceptable_iteration_ = 15;
  clear_has_opt_acceptable_iteration();
}
 ::google::protobuf::int32 SpiralSmootherConfig::opt_acceptable_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_acceptable_iteration)
  return opt_acceptable_iteration_;
}
 void SpiralSmootherConfig::set_opt_acceptable_iteration(::google::protobuf::int32 value) {
  set_has_opt_acceptable_iteration();
  opt_acceptable_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_acceptable_iteration)
}

// optional double opt_weight_curve_length = 7 [default = 0];
bool SpiralSmootherConfig::has_opt_weight_curve_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SpiralSmootherConfig::set_has_opt_weight_curve_length() {
  _has_bits_[0] |= 0x00000040u;
}
void SpiralSmootherConfig::clear_has_opt_weight_curve_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void SpiralSmootherConfig::clear_opt_weight_curve_length() {
  opt_weight_curve_length_ = 0;
  clear_has_opt_weight_curve_length();
}
 double SpiralSmootherConfig::opt_weight_curve_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_curve_length)
  return opt_weight_curve_length_;
}
 void SpiralSmootherConfig::set_opt_weight_curve_length(double value) {
  set_has_opt_weight_curve_length();
  opt_weight_curve_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_curve_length)
}

// optional double opt_weight_kappa = 8 [default = 1.5];
bool SpiralSmootherConfig::has_opt_weight_kappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SpiralSmootherConfig::set_has_opt_weight_kappa() {
  _has_bits_[0] |= 0x00000080u;
}
void SpiralSmootherConfig::clear_has_opt_weight_kappa() {
  _has_bits_[0] &= ~0x00000080u;
}
void SpiralSmootherConfig::clear_opt_weight_kappa() {
  opt_weight_kappa_ = 1.5;
  clear_has_opt_weight_kappa();
}
 double SpiralSmootherConfig::opt_weight_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_kappa)
  return opt_weight_kappa_;
}
 void SpiralSmootherConfig::set_opt_weight_kappa(double value) {
  set_has_opt_weight_kappa();
  opt_weight_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_kappa)
}

// optional double opt_weight_dkappa = 9 [default = 1];
bool SpiralSmootherConfig::has_opt_weight_dkappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SpiralSmootherConfig::set_has_opt_weight_dkappa() {
  _has_bits_[0] |= 0x00000100u;
}
void SpiralSmootherConfig::clear_has_opt_weight_dkappa() {
  _has_bits_[0] &= ~0x00000100u;
}
void SpiralSmootherConfig::clear_opt_weight_dkappa() {
  opt_weight_dkappa_ = 1;
  clear_has_opt_weight_dkappa();
}
 double SpiralSmootherConfig::opt_weight_dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_dkappa)
  return opt_weight_dkappa_;
}
 void SpiralSmootherConfig::set_opt_weight_dkappa(double value) {
  set_has_opt_weight_dkappa();
  opt_weight_dkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_dkappa)
}

// optional double opt_weight_d2kappa = 10 [default = 0];
bool SpiralSmootherConfig::has_opt_weight_d2kappa() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SpiralSmootherConfig::set_has_opt_weight_d2kappa() {
  _has_bits_[0] |= 0x00000200u;
}
void SpiralSmootherConfig::clear_has_opt_weight_d2kappa() {
  _has_bits_[0] &= ~0x00000200u;
}
void SpiralSmootherConfig::clear_opt_weight_d2kappa() {
  opt_weight_d2kappa_ = 0;
  clear_has_opt_weight_d2kappa();
}
 double SpiralSmootherConfig::opt_weight_d2kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_d2kappa)
  return opt_weight_d2kappa_;
}
 void SpiralSmootherConfig::set_opt_weight_d2kappa(double value) {
  set_has_opt_weight_d2kappa();
  opt_weight_d2kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_d2kappa)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosThetaSmootherConfig::kMaxPointDeviationFieldNumber;
const int CosThetaSmootherConfig::kNumOfIterationFieldNumber;
const int CosThetaSmootherConfig::kWeightCosIncludedAngleFieldNumber;
const int CosThetaSmootherConfig::kAcceptableTolFieldNumber;
const int CosThetaSmootherConfig::kRelaxFieldNumber;
const int CosThetaSmootherConfig::kReoptQpBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosThetaSmootherConfig::CosThetaSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CosThetaSmootherConfig)
}

void CosThetaSmootherConfig::InitAsDefaultInstance() {
}

CosThetaSmootherConfig::CosThetaSmootherConfig(const CosThetaSmootherConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CosThetaSmootherConfig)
}

void CosThetaSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  max_point_deviation_ = 5;
  num_of_iteration_ = 10000;
  weight_cos_included_angle_ = 10000;
  acceptable_tol_ = 0.1;
  relax_ = 0.2;
  reopt_qp_bound_ = 0.05;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CosThetaSmootherConfig::~CosThetaSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CosThetaSmootherConfig)
  SharedDtor();
}

void CosThetaSmootherConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CosThetaSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosThetaSmootherConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CosThetaSmootherConfig_descriptor_;
}

const CosThetaSmootherConfig& CosThetaSmootherConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  return *default_instance_;
}

CosThetaSmootherConfig* CosThetaSmootherConfig::default_instance_ = NULL;

CosThetaSmootherConfig* CosThetaSmootherConfig::New(::google::protobuf::Arena* arena) const {
  CosThetaSmootherConfig* n = new CosThetaSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosThetaSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CosThetaSmootherConfig)
  if (_has_bits_[0 / 32] & 63u) {
    max_point_deviation_ = 5;
    num_of_iteration_ = 10000;
    weight_cos_included_angle_ = 10000;
    acceptable_tol_ = 0.1;
    relax_ = 0.2;
    reopt_qp_bound_ = 0.05;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CosThetaSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CosThetaSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_point_deviation = 1 [default = 5];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_point_deviation_)));
          set_has_max_point_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_of_iteration;
        break;
      }

      // optional int32 num_of_iteration = 2 [default = 10000];
      case 2: {
        if (tag == 16) {
         parse_num_of_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_iteration_)));
          set_has_num_of_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_weight_cos_included_angle;
        break;
      }

      // optional double weight_cos_included_angle = 3 [default = 10000];
      case 3: {
        if (tag == 25) {
         parse_weight_cos_included_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_cos_included_angle_)));
          set_has_weight_cos_included_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_acceptable_tol;
        break;
      }

      // optional double acceptable_tol = 4 [default = 0.1];
      case 4: {
        if (tag == 33) {
         parse_acceptable_tol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceptable_tol_)));
          set_has_acceptable_tol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_relax;
        break;
      }

      // optional double relax = 5 [default = 0.2];
      case 5: {
        if (tag == 41) {
         parse_relax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relax_)));
          set_has_relax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_reopt_qp_bound;
        break;
      }

      // optional double reopt_qp_bound = 6 [default = 0.05];
      case 6: {
        if (tag == 49) {
         parse_reopt_qp_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reopt_qp_bound_)));
          set_has_reopt_qp_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CosThetaSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CosThetaSmootherConfig)
  return false;
#undef DO_
}

void CosThetaSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CosThetaSmootherConfig)
  // optional double max_point_deviation = 1 [default = 5];
  if (has_max_point_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_point_deviation(), output);
  }

  // optional int32 num_of_iteration = 2 [default = 10000];
  if (has_num_of_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_of_iteration(), output);
  }

  // optional double weight_cos_included_angle = 3 [default = 10000];
  if (has_weight_cos_included_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_cos_included_angle(), output);
  }

  // optional double acceptable_tol = 4 [default = 0.1];
  if (has_acceptable_tol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acceptable_tol(), output);
  }

  // optional double relax = 5 [default = 0.2];
  if (has_relax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relax(), output);
  }

  // optional double reopt_qp_bound = 6 [default = 0.05];
  if (has_reopt_qp_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->reopt_qp_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CosThetaSmootherConfig)
}

::google::protobuf::uint8* CosThetaSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CosThetaSmootherConfig)
  // optional double max_point_deviation = 1 [default = 5];
  if (has_max_point_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_point_deviation(), target);
  }

  // optional int32 num_of_iteration = 2 [default = 10000];
  if (has_num_of_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_of_iteration(), target);
  }

  // optional double weight_cos_included_angle = 3 [default = 10000];
  if (has_weight_cos_included_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_cos_included_angle(), target);
  }

  // optional double acceptable_tol = 4 [default = 0.1];
  if (has_acceptable_tol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acceptable_tol(), target);
  }

  // optional double relax = 5 [default = 0.2];
  if (has_relax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relax(), target);
  }

  // optional double reopt_qp_bound = 6 [default = 0.05];
  if (has_reopt_qp_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->reopt_qp_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CosThetaSmootherConfig)
  return target;
}

int CosThetaSmootherConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CosThetaSmootherConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double max_point_deviation = 1 [default = 5];
    if (has_max_point_deviation()) {
      total_size += 1 + 8;
    }

    // optional int32 num_of_iteration = 2 [default = 10000];
    if (has_num_of_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_of_iteration());
    }

    // optional double weight_cos_included_angle = 3 [default = 10000];
    if (has_weight_cos_included_angle()) {
      total_size += 1 + 8;
    }

    // optional double acceptable_tol = 4 [default = 0.1];
    if (has_acceptable_tol()) {
      total_size += 1 + 8;
    }

    // optional double relax = 5 [default = 0.2];
    if (has_relax()) {
      total_size += 1 + 8;
    }

    // optional double reopt_qp_bound = 6 [default = 0.05];
    if (has_reopt_qp_bound()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosThetaSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CosThetaSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CosThetaSmootherConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CosThetaSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CosThetaSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CosThetaSmootherConfig)
    MergeFrom(*source);
  }
}

void CosThetaSmootherConfig::MergeFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CosThetaSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_point_deviation()) {
      set_max_point_deviation(from.max_point_deviation());
    }
    if (from.has_num_of_iteration()) {
      set_num_of_iteration(from.num_of_iteration());
    }
    if (from.has_weight_cos_included_angle()) {
      set_weight_cos_included_angle(from.weight_cos_included_angle());
    }
    if (from.has_acceptable_tol()) {
      set_acceptable_tol(from.acceptable_tol());
    }
    if (from.has_relax()) {
      set_relax(from.relax());
    }
    if (from.has_reopt_qp_bound()) {
      set_reopt_qp_bound(from.reopt_qp_bound());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CosThetaSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosThetaSmootherConfig::CopyFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosThetaSmootherConfig::IsInitialized() const {

  return true;
}

void CosThetaSmootherConfig::Swap(CosThetaSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosThetaSmootherConfig::InternalSwap(CosThetaSmootherConfig* other) {
  std::swap(max_point_deviation_, other->max_point_deviation_);
  std::swap(num_of_iteration_, other->num_of_iteration_);
  std::swap(weight_cos_included_angle_, other->weight_cos_included_angle_);
  std::swap(acceptable_tol_, other->acceptable_tol_);
  std::swap(relax_, other->relax_);
  std::swap(reopt_qp_bound_, other->reopt_qp_bound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosThetaSmootherConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CosThetaSmootherConfig_descriptor_;
  metadata.reflection = CosThetaSmootherConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosThetaSmootherConfig

// optional double max_point_deviation = 1 [default = 5];
bool CosThetaSmootherConfig::has_max_point_deviation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosThetaSmootherConfig::set_has_max_point_deviation() {
  _has_bits_[0] |= 0x00000001u;
}
void CosThetaSmootherConfig::clear_has_max_point_deviation() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosThetaSmootherConfig::clear_max_point_deviation() {
  max_point_deviation_ = 5;
  clear_has_max_point_deviation();
}
 double CosThetaSmootherConfig::max_point_deviation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.max_point_deviation)
  return max_point_deviation_;
}
 void CosThetaSmootherConfig::set_max_point_deviation(double value) {
  set_has_max_point_deviation();
  max_point_deviation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.max_point_deviation)
}

// optional int32 num_of_iteration = 2 [default = 10000];
bool CosThetaSmootherConfig::has_num_of_iteration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CosThetaSmootherConfig::set_has_num_of_iteration() {
  _has_bits_[0] |= 0x00000002u;
}
void CosThetaSmootherConfig::clear_has_num_of_iteration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CosThetaSmootherConfig::clear_num_of_iteration() {
  num_of_iteration_ = 10000;
  clear_has_num_of_iteration();
}
 ::google::protobuf::int32 CosThetaSmootherConfig::num_of_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.num_of_iteration)
  return num_of_iteration_;
}
 void CosThetaSmootherConfig::set_num_of_iteration(::google::protobuf::int32 value) {
  set_has_num_of_iteration();
  num_of_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.num_of_iteration)
}

// optional double weight_cos_included_angle = 3 [default = 10000];
bool CosThetaSmootherConfig::has_weight_cos_included_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CosThetaSmootherConfig::set_has_weight_cos_included_angle() {
  _has_bits_[0] |= 0x00000004u;
}
void CosThetaSmootherConfig::clear_has_weight_cos_included_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CosThetaSmootherConfig::clear_weight_cos_included_angle() {
  weight_cos_included_angle_ = 10000;
  clear_has_weight_cos_included_angle();
}
 double CosThetaSmootherConfig::weight_cos_included_angle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.weight_cos_included_angle)
  return weight_cos_included_angle_;
}
 void CosThetaSmootherConfig::set_weight_cos_included_angle(double value) {
  set_has_weight_cos_included_angle();
  weight_cos_included_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.weight_cos_included_angle)
}

// optional double acceptable_tol = 4 [default = 0.1];
bool CosThetaSmootherConfig::has_acceptable_tol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CosThetaSmootherConfig::set_has_acceptable_tol() {
  _has_bits_[0] |= 0x00000008u;
}
void CosThetaSmootherConfig::clear_has_acceptable_tol() {
  _has_bits_[0] &= ~0x00000008u;
}
void CosThetaSmootherConfig::clear_acceptable_tol() {
  acceptable_tol_ = 0.1;
  clear_has_acceptable_tol();
}
 double CosThetaSmootherConfig::acceptable_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.acceptable_tol)
  return acceptable_tol_;
}
 void CosThetaSmootherConfig::set_acceptable_tol(double value) {
  set_has_acceptable_tol();
  acceptable_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.acceptable_tol)
}

// optional double relax = 5 [default = 0.2];
bool CosThetaSmootherConfig::has_relax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CosThetaSmootherConfig::set_has_relax() {
  _has_bits_[0] |= 0x00000010u;
}
void CosThetaSmootherConfig::clear_has_relax() {
  _has_bits_[0] &= ~0x00000010u;
}
void CosThetaSmootherConfig::clear_relax() {
  relax_ = 0.2;
  clear_has_relax();
}
 double CosThetaSmootherConfig::relax() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.relax)
  return relax_;
}
 void CosThetaSmootherConfig::set_relax(double value) {
  set_has_relax();
  relax_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.relax)
}

// optional double reopt_qp_bound = 6 [default = 0.05];
bool CosThetaSmootherConfig::has_reopt_qp_bound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CosThetaSmootherConfig::set_has_reopt_qp_bound() {
  _has_bits_[0] |= 0x00000020u;
}
void CosThetaSmootherConfig::clear_has_reopt_qp_bound() {
  _has_bits_[0] &= ~0x00000020u;
}
void CosThetaSmootherConfig::clear_reopt_qp_bound() {
  reopt_qp_bound_ = 0.05;
  clear_has_reopt_qp_bound();
}
 double CosThetaSmootherConfig::reopt_qp_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.reopt_qp_bound)
  return reopt_qp_bound_;
}
 void CosThetaSmootherConfig::set_reopt_qp_bound(double value) {
  set_has_reopt_qp_bound();
  reopt_qp_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.reopt_qp_bound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReferenceLineSmootherConfig_DrivingSide_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceLineSmootherConfig_DrivingSide_descriptor_;
}
bool ReferenceLineSmootherConfig_DrivingSide_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::LEFT;
const ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::RIGHT;
const ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::DrivingSide_MIN;
const ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::DrivingSide_MAX;
const int ReferenceLineSmootherConfig::DrivingSide_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineSmootherConfig::kMaxConstraintIntervalFieldNumber;
const int ReferenceLineSmootherConfig::kLongitudinalBoundaryBoundFieldNumber;
const int ReferenceLineSmootherConfig::kLateralBoundaryBoundFieldNumber;
const int ReferenceLineSmootherConfig::kNumOfTotalPointsFieldNumber;
const int ReferenceLineSmootherConfig::kCurbShiftFieldNumber;
const int ReferenceLineSmootherConfig::kDrivingSideFieldNumber;
const int ReferenceLineSmootherConfig::kWideLaneThresholdFactorFieldNumber;
const int ReferenceLineSmootherConfig::kWideLaneShiftRemainFactorFieldNumber;
const int ReferenceLineSmootherConfig::kResolutionFieldNumber;
const int ReferenceLineSmootherConfig::kQpSplineFieldNumber;
const int ReferenceLineSmootherConfig::kSpiralFieldNumber;
const int ReferenceLineSmootherConfig::kCosThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineSmootherConfig::ReferenceLineSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReferenceLineSmootherConfig)
}

void ReferenceLineSmootherConfig::InitAsDefaultInstance() {
  ReferenceLineSmootherConfig_default_oneof_instance_->qp_spline_ = const_cast< ::apollo::planning::QpSplineSmootherConfig*>(&::apollo::planning::QpSplineSmootherConfig::default_instance());
  ReferenceLineSmootherConfig_default_oneof_instance_->spiral_ = const_cast< ::apollo::planning::SpiralSmootherConfig*>(&::apollo::planning::SpiralSmootherConfig::default_instance());
  ReferenceLineSmootherConfig_default_oneof_instance_->cos_theta_ = const_cast< ::apollo::planning::CosThetaSmootherConfig*>(&::apollo::planning::CosThetaSmootherConfig::default_instance());
}

ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReferenceLineSmootherConfig)
}

void ReferenceLineSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  max_constraint_interval_ = 5;
  longitudinal_boundary_bound_ = 1;
  lateral_boundary_bound_ = 0.1;
  num_of_total_points_ = 500u;
  curb_shift_ = 0.2;
  driving_side_ = 2;
  wide_lane_threshold_factor_ = 2;
  wide_lane_shift_remain_factor_ = 0.5;
  resolution_ = 0.02;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_SmootherConfig();
}

ReferenceLineSmootherConfig::~ReferenceLineSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReferenceLineSmootherConfig)
  SharedDtor();
}

void ReferenceLineSmootherConfig::SharedDtor() {
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
  if (this != default_instance_) {
  }
}

void ReferenceLineSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineSmootherConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceLineSmootherConfig_descriptor_;
}

const ReferenceLineSmootherConfig& ReferenceLineSmootherConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  return *default_instance_;
}

ReferenceLineSmootherConfig* ReferenceLineSmootherConfig::default_instance_ = NULL;

ReferenceLineSmootherConfig* ReferenceLineSmootherConfig::New(::google::protobuf::Arena* arena) const {
  ReferenceLineSmootherConfig* n = new ReferenceLineSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ReferenceLineSmootherConfig)
  switch(SmootherConfig_case()) {
    case kQpSpline: {
      delete SmootherConfig_.qp_spline_;
      break;
    }
    case kSpiral: {
      delete SmootherConfig_.spiral_;
      break;
    }
    case kCosTheta: {
      delete SmootherConfig_.cos_theta_;
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void ReferenceLineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReferenceLineSmootherConfig)
  if (_has_bits_[0 / 32] & 255u) {
    max_constraint_interval_ = 5;
    longitudinal_boundary_bound_ = 1;
    lateral_boundary_bound_ = 0.1;
    num_of_total_points_ = 500u;
    curb_shift_ = 0.2;
    driving_side_ = 2;
    wide_lane_threshold_factor_ = 2;
    wide_lane_shift_remain_factor_ = 0.5;
  }
  resolution_ = 0.02;
  clear_SmootherConfig();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReferenceLineSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ReferenceLineSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_constraint_interval = 1 [default = 5];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_interval_)));
          set_has_max_constraint_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitudinal_boundary_bound;
        break;
      }

      // optional double longitudinal_boundary_bound = 2 [default = 1];
      case 2: {
        if (tag == 17) {
         parse_longitudinal_boundary_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_boundary_bound_)));
          set_has_longitudinal_boundary_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lateral_boundary_bound;
        break;
      }

      // optional double lateral_boundary_bound = 3 [default = 0.1];
      case 3: {
        if (tag == 25) {
         parse_lateral_boundary_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_boundary_bound_)));
          set_has_lateral_boundary_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_of_total_points;
        break;
      }

      // optional uint32 num_of_total_points = 4 [default = 500];
      case 4: {
        if (tag == 32) {
         parse_num_of_total_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_of_total_points_)));
          set_has_num_of_total_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_curb_shift;
        break;
      }

      // optional double curb_shift = 5 [default = 0.2];
      case 5: {
        if (tag == 41) {
         parse_curb_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curb_shift_)));
          set_has_curb_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_driving_side;
        break;
      }

      // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
      case 6: {
        if (tag == 48) {
         parse_driving_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ReferenceLineSmootherConfig_DrivingSide_IsValid(value)) {
            set_driving_side(static_cast< ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_wide_lane_threshold_factor;
        break;
      }

      // optional double wide_lane_threshold_factor = 7 [default = 2];
      case 7: {
        if (tag == 57) {
         parse_wide_lane_threshold_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wide_lane_threshold_factor_)));
          set_has_wide_lane_threshold_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_wide_lane_shift_remain_factor;
        break;
      }

      // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
      case 8: {
        if (tag == 65) {
         parse_wide_lane_shift_remain_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wide_lane_shift_remain_factor_)));
          set_has_wide_lane_shift_remain_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_resolution;
        break;
      }

      // optional double resolution = 9 [default = 0.02];
      case 9: {
        if (tag == 73) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_qp_spline;
        break;
      }

      // optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
      case 20: {
        if (tag == 162) {
         parse_qp_spline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_spline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_spiral;
        break;
      }

      // optional .apollo.planning.SpiralSmootherConfig spiral = 21;
      case 21: {
        if (tag == 170) {
         parse_spiral:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spiral()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_cos_theta;
        break;
      }

      // optional .apollo.planning.CosThetaSmootherConfig cos_theta = 22;
      case 22: {
        if (tag == 178) {
         parse_cos_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cos_theta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ReferenceLineSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ReferenceLineSmootherConfig)
  return false;
#undef DO_
}

void ReferenceLineSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ReferenceLineSmootherConfig)
  // optional double max_constraint_interval = 1 [default = 5];
  if (has_max_constraint_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_constraint_interval(), output);
  }

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  if (has_longitudinal_boundary_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitudinal_boundary_bound(), output);
  }

  // optional double lateral_boundary_bound = 3 [default = 0.1];
  if (has_lateral_boundary_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lateral_boundary_bound(), output);
  }

  // optional uint32 num_of_total_points = 4 [default = 500];
  if (has_num_of_total_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_of_total_points(), output);
  }

  // optional double curb_shift = 5 [default = 0.2];
  if (has_curb_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->curb_shift(), output);
  }

  // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
  if (has_driving_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->driving_side(), output);
  }

  // optional double wide_lane_threshold_factor = 7 [default = 2];
  if (has_wide_lane_threshold_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->wide_lane_threshold_factor(), output);
  }

  // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
  if (has_wide_lane_shift_remain_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->wide_lane_shift_remain_factor(), output);
  }

  // optional double resolution = 9 [default = 0.02];
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->resolution(), output);
  }

  // optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
  if (has_qp_spline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *SmootherConfig_.qp_spline_, output);
  }

  // optional .apollo.planning.SpiralSmootherConfig spiral = 21;
  if (has_spiral()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *SmootherConfig_.spiral_, output);
  }

  // optional .apollo.planning.CosThetaSmootherConfig cos_theta = 22;
  if (has_cos_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *SmootherConfig_.cos_theta_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ReferenceLineSmootherConfig)
}

::google::protobuf::uint8* ReferenceLineSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReferenceLineSmootherConfig)
  // optional double max_constraint_interval = 1 [default = 5];
  if (has_max_constraint_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_constraint_interval(), target);
  }

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  if (has_longitudinal_boundary_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitudinal_boundary_bound(), target);
  }

  // optional double lateral_boundary_bound = 3 [default = 0.1];
  if (has_lateral_boundary_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lateral_boundary_bound(), target);
  }

  // optional uint32 num_of_total_points = 4 [default = 500];
  if (has_num_of_total_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_of_total_points(), target);
  }

  // optional double curb_shift = 5 [default = 0.2];
  if (has_curb_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->curb_shift(), target);
  }

  // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
  if (has_driving_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->driving_side(), target);
  }

  // optional double wide_lane_threshold_factor = 7 [default = 2];
  if (has_wide_lane_threshold_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->wide_lane_threshold_factor(), target);
  }

  // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
  if (has_wide_lane_shift_remain_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->wide_lane_shift_remain_factor(), target);
  }

  // optional double resolution = 9 [default = 0.02];
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->resolution(), target);
  }

  // optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
  if (has_qp_spline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *SmootherConfig_.qp_spline_, false, target);
  }

  // optional .apollo.planning.SpiralSmootherConfig spiral = 21;
  if (has_spiral()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *SmootherConfig_.spiral_, false, target);
  }

  // optional .apollo.planning.CosThetaSmootherConfig cos_theta = 22;
  if (has_cos_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *SmootherConfig_.cos_theta_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReferenceLineSmootherConfig)
  return target;
}

int ReferenceLineSmootherConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReferenceLineSmootherConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double max_constraint_interval = 1 [default = 5];
    if (has_max_constraint_interval()) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_boundary_bound = 2 [default = 1];
    if (has_longitudinal_boundary_bound()) {
      total_size += 1 + 8;
    }

    // optional double lateral_boundary_bound = 3 [default = 0.1];
    if (has_lateral_boundary_bound()) {
      total_size += 1 + 8;
    }

    // optional uint32 num_of_total_points = 4 [default = 500];
    if (has_num_of_total_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_of_total_points());
    }

    // optional double curb_shift = 5 [default = 0.2];
    if (has_curb_shift()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
    if (has_driving_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_side());
    }

    // optional double wide_lane_threshold_factor = 7 [default = 2];
    if (has_wide_lane_threshold_factor()) {
      total_size += 1 + 8;
    }

    // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
    if (has_wide_lane_shift_remain_factor()) {
      total_size += 1 + 8;
    }

  }
  // optional double resolution = 9 [default = 0.02];
  if (has_resolution()) {
    total_size += 1 + 8;
  }

  switch (SmootherConfig_case()) {
    // optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
    case kQpSpline: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *SmootherConfig_.qp_spline_);
      break;
    }
    // optional .apollo.planning.SpiralSmootherConfig spiral = 21;
    case kSpiral: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *SmootherConfig_.spiral_);
      break;
    }
    // optional .apollo.planning.CosThetaSmootherConfig cos_theta = 22;
    case kCosTheta: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *SmootherConfig_.cos_theta_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReferenceLineSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReferenceLineSmootherConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReferenceLineSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReferenceLineSmootherConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineSmootherConfig::MergeFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReferenceLineSmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      mutable_qp_spline()->::apollo::planning::QpSplineSmootherConfig::MergeFrom(from.qp_spline());
      break;
    }
    case kSpiral: {
      mutable_spiral()->::apollo::planning::SpiralSmootherConfig::MergeFrom(from.spiral());
      break;
    }
    case kCosTheta: {
      mutable_cos_theta()->::apollo::planning::CosThetaSmootherConfig::MergeFrom(from.cos_theta());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_constraint_interval()) {
      set_max_constraint_interval(from.max_constraint_interval());
    }
    if (from.has_longitudinal_boundary_bound()) {
      set_longitudinal_boundary_bound(from.longitudinal_boundary_bound());
    }
    if (from.has_lateral_boundary_bound()) {
      set_lateral_boundary_bound(from.lateral_boundary_bound());
    }
    if (from.has_num_of_total_points()) {
      set_num_of_total_points(from.num_of_total_points());
    }
    if (from.has_curb_shift()) {
      set_curb_shift(from.curb_shift());
    }
    if (from.has_driving_side()) {
      set_driving_side(from.driving_side());
    }
    if (from.has_wide_lane_threshold_factor()) {
      set_wide_lane_threshold_factor(from.wide_lane_threshold_factor());
    }
    if (from.has_wide_lane_shift_remain_factor()) {
      set_wide_lane_shift_remain_factor(from.wide_lane_shift_remain_factor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReferenceLineSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineSmootherConfig::CopyFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineSmootherConfig::IsInitialized() const {

  return true;
}

void ReferenceLineSmootherConfig::Swap(ReferenceLineSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineSmootherConfig::InternalSwap(ReferenceLineSmootherConfig* other) {
  std::swap(max_constraint_interval_, other->max_constraint_interval_);
  std::swap(longitudinal_boundary_bound_, other->longitudinal_boundary_bound_);
  std::swap(lateral_boundary_bound_, other->lateral_boundary_bound_);
  std::swap(num_of_total_points_, other->num_of_total_points_);
  std::swap(curb_shift_, other->curb_shift_);
  std::swap(driving_side_, other->driving_side_);
  std::swap(wide_lane_threshold_factor_, other->wide_lane_threshold_factor_);
  std::swap(wide_lane_shift_remain_factor_, other->wide_lane_shift_remain_factor_);
  std::swap(resolution_, other->resolution_);
  std::swap(SmootherConfig_, other->SmootherConfig_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineSmootherConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceLineSmootherConfig_descriptor_;
  metadata.reflection = ReferenceLineSmootherConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceLineSmootherConfig

// optional double max_constraint_interval = 1 [default = 5];
bool ReferenceLineSmootherConfig::has_max_constraint_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReferenceLineSmootherConfig::set_has_max_constraint_interval() {
  _has_bits_[0] |= 0x00000001u;
}
void ReferenceLineSmootherConfig::clear_has_max_constraint_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReferenceLineSmootherConfig::clear_max_constraint_interval() {
  max_constraint_interval_ = 5;
  clear_has_max_constraint_interval();
}
 double ReferenceLineSmootherConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.max_constraint_interval)
  return max_constraint_interval_;
}
 void ReferenceLineSmootherConfig::set_max_constraint_interval(double value) {
  set_has_max_constraint_interval();
  max_constraint_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.max_constraint_interval)
}

// optional double longitudinal_boundary_bound = 2 [default = 1];
bool ReferenceLineSmootherConfig::has_longitudinal_boundary_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReferenceLineSmootherConfig::set_has_longitudinal_boundary_bound() {
  _has_bits_[0] |= 0x00000002u;
}
void ReferenceLineSmootherConfig::clear_has_longitudinal_boundary_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineSmootherConfig::clear_longitudinal_boundary_bound() {
  longitudinal_boundary_bound_ = 1;
  clear_has_longitudinal_boundary_bound();
}
 double ReferenceLineSmootherConfig::longitudinal_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
  return longitudinal_boundary_bound_;
}
 void ReferenceLineSmootherConfig::set_longitudinal_boundary_bound(double value) {
  set_has_longitudinal_boundary_bound();
  longitudinal_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
}

// optional double lateral_boundary_bound = 3 [default = 0.1];
bool ReferenceLineSmootherConfig::has_lateral_boundary_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReferenceLineSmootherConfig::set_has_lateral_boundary_bound() {
  _has_bits_[0] |= 0x00000004u;
}
void ReferenceLineSmootherConfig::clear_has_lateral_boundary_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReferenceLineSmootherConfig::clear_lateral_boundary_bound() {
  lateral_boundary_bound_ = 0.1;
  clear_has_lateral_boundary_bound();
}
 double ReferenceLineSmootherConfig::lateral_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.lateral_boundary_bound)
  return lateral_boundary_bound_;
}
 void ReferenceLineSmootherConfig::set_lateral_boundary_bound(double value) {
  set_has_lateral_boundary_bound();
  lateral_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.lateral_boundary_bound)
}

// optional uint32 num_of_total_points = 4 [default = 500];
bool ReferenceLineSmootherConfig::has_num_of_total_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReferenceLineSmootherConfig::set_has_num_of_total_points() {
  _has_bits_[0] |= 0x00000008u;
}
void ReferenceLineSmootherConfig::clear_has_num_of_total_points() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReferenceLineSmootherConfig::clear_num_of_total_points() {
  num_of_total_points_ = 500u;
  clear_has_num_of_total_points();
}
 ::google::protobuf::uint32 ReferenceLineSmootherConfig::num_of_total_points() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.num_of_total_points)
  return num_of_total_points_;
}
 void ReferenceLineSmootherConfig::set_num_of_total_points(::google::protobuf::uint32 value) {
  set_has_num_of_total_points();
  num_of_total_points_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.num_of_total_points)
}

// optional double curb_shift = 5 [default = 0.2];
bool ReferenceLineSmootherConfig::has_curb_shift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReferenceLineSmootherConfig::set_has_curb_shift() {
  _has_bits_[0] |= 0x00000010u;
}
void ReferenceLineSmootherConfig::clear_has_curb_shift() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReferenceLineSmootherConfig::clear_curb_shift() {
  curb_shift_ = 0.2;
  clear_has_curb_shift();
}
 double ReferenceLineSmootherConfig::curb_shift() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.curb_shift)
  return curb_shift_;
}
 void ReferenceLineSmootherConfig::set_curb_shift(double value) {
  set_has_curb_shift();
  curb_shift_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.curb_shift)
}

// optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
bool ReferenceLineSmootherConfig::has_driving_side() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReferenceLineSmootherConfig::set_has_driving_side() {
  _has_bits_[0] |= 0x00000020u;
}
void ReferenceLineSmootherConfig::clear_has_driving_side() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReferenceLineSmootherConfig::clear_driving_side() {
  driving_side_ = 2;
  clear_has_driving_side();
}
 ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::driving_side() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.driving_side)
  return static_cast< ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide >(driving_side_);
}
 void ReferenceLineSmootherConfig::set_driving_side(::apollo::planning::ReferenceLineSmootherConfig_DrivingSide value) {
  assert(::apollo::planning::ReferenceLineSmootherConfig_DrivingSide_IsValid(value));
  set_has_driving_side();
  driving_side_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.driving_side)
}

// optional double wide_lane_threshold_factor = 7 [default = 2];
bool ReferenceLineSmootherConfig::has_wide_lane_threshold_factor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReferenceLineSmootherConfig::set_has_wide_lane_threshold_factor() {
  _has_bits_[0] |= 0x00000040u;
}
void ReferenceLineSmootherConfig::clear_has_wide_lane_threshold_factor() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReferenceLineSmootherConfig::clear_wide_lane_threshold_factor() {
  wide_lane_threshold_factor_ = 2;
  clear_has_wide_lane_threshold_factor();
}
 double ReferenceLineSmootherConfig::wide_lane_threshold_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.wide_lane_threshold_factor)
  return wide_lane_threshold_factor_;
}
 void ReferenceLineSmootherConfig::set_wide_lane_threshold_factor(double value) {
  set_has_wide_lane_threshold_factor();
  wide_lane_threshold_factor_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.wide_lane_threshold_factor)
}

// optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
bool ReferenceLineSmootherConfig::has_wide_lane_shift_remain_factor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ReferenceLineSmootherConfig::set_has_wide_lane_shift_remain_factor() {
  _has_bits_[0] |= 0x00000080u;
}
void ReferenceLineSmootherConfig::clear_has_wide_lane_shift_remain_factor() {
  _has_bits_[0] &= ~0x00000080u;
}
void ReferenceLineSmootherConfig::clear_wide_lane_shift_remain_factor() {
  wide_lane_shift_remain_factor_ = 0.5;
  clear_has_wide_lane_shift_remain_factor();
}
 double ReferenceLineSmootherConfig::wide_lane_shift_remain_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.wide_lane_shift_remain_factor)
  return wide_lane_shift_remain_factor_;
}
 void ReferenceLineSmootherConfig::set_wide_lane_shift_remain_factor(double value) {
  set_has_wide_lane_shift_remain_factor();
  wide_lane_shift_remain_factor_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.wide_lane_shift_remain_factor)
}

// optional double resolution = 9 [default = 0.02];
bool ReferenceLineSmootherConfig::has_resolution() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ReferenceLineSmootherConfig::set_has_resolution() {
  _has_bits_[0] |= 0x00000100u;
}
void ReferenceLineSmootherConfig::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000100u;
}
void ReferenceLineSmootherConfig::clear_resolution() {
  resolution_ = 0.02;
  clear_has_resolution();
}
 double ReferenceLineSmootherConfig::resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.resolution)
  return resolution_;
}
 void ReferenceLineSmootherConfig::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.resolution)
}

// optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
bool ReferenceLineSmootherConfig::has_qp_spline() const {
  return SmootherConfig_case() == kQpSpline;
}
void ReferenceLineSmootherConfig::set_has_qp_spline() {
  _oneof_case_[0] = kQpSpline;
}
void ReferenceLineSmootherConfig::clear_qp_spline() {
  if (has_qp_spline()) {
    delete SmootherConfig_.qp_spline_;
    clear_has_SmootherConfig();
  }
}
 const ::apollo::planning::QpSplineSmootherConfig& ReferenceLineSmootherConfig::qp_spline() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  return has_qp_spline()
      ? *SmootherConfig_.qp_spline_
      : ::apollo::planning::QpSplineSmootherConfig::default_instance();
}
::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::mutable_qp_spline() {
  if (!has_qp_spline()) {
    clear_SmootherConfig();
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = new ::apollo::planning::QpSplineSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  return SmootherConfig_.qp_spline_;
}
::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::release_qp_spline() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  if (has_qp_spline()) {
    clear_has_SmootherConfig();
    ::apollo::planning::QpSplineSmootherConfig* temp = SmootherConfig_.qp_spline_;
    SmootherConfig_.qp_spline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReferenceLineSmootherConfig::set_allocated_qp_spline(::apollo::planning::QpSplineSmootherConfig* qp_spline) {
  clear_SmootherConfig();
  if (qp_spline) {
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
}

// optional .apollo.planning.SpiralSmootherConfig spiral = 21;
bool ReferenceLineSmootherConfig::has_spiral() const {
  return SmootherConfig_case() == kSpiral;
}
void ReferenceLineSmootherConfig::set_has_spiral() {
  _oneof_case_[0] = kSpiral;
}
void ReferenceLineSmootherConfig::clear_spiral() {
  if (has_spiral()) {
    delete SmootherConfig_.spiral_;
    clear_has_SmootherConfig();
  }
}
 const ::apollo::planning::SpiralSmootherConfig& ReferenceLineSmootherConfig::spiral() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.spiral)
  return has_spiral()
      ? *SmootherConfig_.spiral_
      : ::apollo::planning::SpiralSmootherConfig::default_instance();
}
::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::mutable_spiral() {
  if (!has_spiral()) {
    clear_SmootherConfig();
    set_has_spiral();
    SmootherConfig_.spiral_ = new ::apollo::planning::SpiralSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.spiral)
  return SmootherConfig_.spiral_;
}
::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::release_spiral() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.spiral)
  if (has_spiral()) {
    clear_has_SmootherConfig();
    ::apollo::planning::SpiralSmootherConfig* temp = SmootherConfig_.spiral_;
    SmootherConfig_.spiral_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReferenceLineSmootherConfig::set_allocated_spiral(::apollo::planning::SpiralSmootherConfig* spiral) {
  clear_SmootherConfig();
  if (spiral) {
    set_has_spiral();
    SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.spiral)
}

// optional .apollo.planning.CosThetaSmootherConfig cos_theta = 22;
bool ReferenceLineSmootherConfig::has_cos_theta() const {
  return SmootherConfig_case() == kCosTheta;
}
void ReferenceLineSmootherConfig::set_has_cos_theta() {
  _oneof_case_[0] = kCosTheta;
}
void ReferenceLineSmootherConfig::clear_cos_theta() {
  if (has_cos_theta()) {
    delete SmootherConfig_.cos_theta_;
    clear_has_SmootherConfig();
  }
}
 const ::apollo::planning::CosThetaSmootherConfig& ReferenceLineSmootherConfig::cos_theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
  return has_cos_theta()
      ? *SmootherConfig_.cos_theta_
      : ::apollo::planning::CosThetaSmootherConfig::default_instance();
}
::apollo::planning::CosThetaSmootherConfig* ReferenceLineSmootherConfig::mutable_cos_theta() {
  if (!has_cos_theta()) {
    clear_SmootherConfig();
    set_has_cos_theta();
    SmootherConfig_.cos_theta_ = new ::apollo::planning::CosThetaSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
  return SmootherConfig_.cos_theta_;
}
::apollo::planning::CosThetaSmootherConfig* ReferenceLineSmootherConfig::release_cos_theta() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
  if (has_cos_theta()) {
    clear_has_SmootherConfig();
    ::apollo::planning::CosThetaSmootherConfig* temp = SmootherConfig_.cos_theta_;
    SmootherConfig_.cos_theta_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReferenceLineSmootherConfig::set_allocated_cos_theta(::apollo::planning::CosThetaSmootherConfig* cos_theta) {
  clear_SmootherConfig();
  if (cos_theta) {
    set_has_cos_theta();
    SmootherConfig_.cos_theta_ = cos_theta;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
}

bool ReferenceLineSmootherConfig::has_SmootherConfig() const {
  return SmootherConfig_case() != SMOOTHERCONFIG_NOT_SET;
}
void ReferenceLineSmootherConfig::clear_has_SmootherConfig() {
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}
ReferenceLineSmootherConfig::SmootherConfigCase ReferenceLineSmootherConfig::SmootherConfig_case() const {
  return ReferenceLineSmootherConfig::SmootherConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
