// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map/map_road.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map/map_road.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace hdmap {

namespace {

const ::google::protobuf::Descriptor* BoundaryEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundaryEdge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BoundaryEdge_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BoundaryPolygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundaryPolygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadBoundary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadBoundary_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadROIBoundary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadROIBoundary_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadSection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadSection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Road_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Road_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2fmap_5froad_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_map_2fmap_5froad_2eproto() {
  protobuf_AddDesc_map_2fmap_5froad_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map/map_road.proto");
  GOOGLE_CHECK(file != NULL);
  BoundaryEdge_descriptor_ = file->message_type(0);
  static const int BoundaryEdge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, curve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, type_),
  };
  BoundaryEdge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoundaryEdge_descriptor_,
      BoundaryEdge::default_instance_,
      BoundaryEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, _has_bits_[0]),
      -1,
      -1,
      sizeof(BoundaryEdge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, _internal_metadata_),
      -1);
  BoundaryEdge_Type_descriptor_ = BoundaryEdge_descriptor_->enum_type(0);
  BoundaryPolygon_descriptor_ = file->message_type(1);
  static const int BoundaryPolygon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryPolygon, edge_),
  };
  BoundaryPolygon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoundaryPolygon_descriptor_,
      BoundaryPolygon::default_instance_,
      BoundaryPolygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryPolygon, _has_bits_[0]),
      -1,
      -1,
      sizeof(BoundaryPolygon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryPolygon, _internal_metadata_),
      -1);
  RoadBoundary_descriptor_ = file->message_type(2);
  static const int RoadBoundary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, outer_polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, hole_),
  };
  RoadBoundary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoadBoundary_descriptor_,
      RoadBoundary::default_instance_,
      RoadBoundary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoadBoundary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, _internal_metadata_),
      -1);
  RoadROIBoundary_descriptor_ = file->message_type(3);
  static const int RoadROIBoundary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, road_boundaries_),
  };
  RoadROIBoundary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoadROIBoundary_descriptor_,
      RoadROIBoundary::default_instance_,
      RoadROIBoundary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoadROIBoundary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, _internal_metadata_),
      -1);
  RoadSection_descriptor_ = file->message_type(4);
  static const int RoadSection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, boundary_),
  };
  RoadSection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoadSection_descriptor_,
      RoadSection::default_instance_,
      RoadSection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoadSection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, _internal_metadata_),
      -1);
  Road_descriptor_ = file->message_type(5);
  static const int Road_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, junction_id_),
  };
  Road_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Road_descriptor_,
      Road::default_instance_,
      Road_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, _has_bits_[0]),
      -1,
      -1,
      sizeof(Road),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2fmap_5froad_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoundaryEdge_descriptor_, &BoundaryEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoundaryPolygon_descriptor_, &BoundaryPolygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoadBoundary_descriptor_, &RoadBoundary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoadROIBoundary_descriptor_, &RoadROIBoundary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoadSection_descriptor_, &RoadSection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Road_descriptor_, &Road::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2fmap_5froad_2eproto() {
  delete BoundaryEdge::default_instance_;
  delete BoundaryEdge_reflection_;
  delete BoundaryPolygon::default_instance_;
  delete BoundaryPolygon_reflection_;
  delete RoadBoundary::default_instance_;
  delete RoadBoundary_reflection_;
  delete RoadROIBoundary::default_instance_;
  delete RoadROIBoundary_reflection_;
  delete RoadSection::default_instance_;
  delete RoadSection_reflection_;
  delete Road::default_instance_;
  delete Road_reflection_;
}

void protobuf_AddDesc_map_2fmap_5froad_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_map_2fmap_5froad_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::hdmap::protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  ::apollo::hdmap::protobuf_AddDesc_map_2fmap_5fid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022map/map_road.proto\022\014apollo.hdmap\032\026map/"
    "map_geometry.proto\032\020map/map_id.proto\"\251\001\n"
    "\014BoundaryEdge\022\"\n\005curve\030\001 \001(\0132\023.apollo.hd"
    "map.Curve\022-\n\004type\030\002 \001(\0162\037.apollo.hdmap.B"
    "oundaryEdge.Type\"F\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n"
    "\006NORMAL\020\001\022\021\n\rLEFT_BOUNDARY\020\002\022\022\n\016RIGHT_BO"
    "UNDARY\020\003\";\n\017BoundaryPolygon\022(\n\004edge\030\001 \003("
    "\0132\032.apollo.hdmap.BoundaryEdge\"q\n\014RoadBou"
    "ndary\0224\n\router_polygon\030\001 \001(\0132\035.apollo.hd"
    "map.BoundaryPolygon\022+\n\004hole\030\002 \003(\0132\035.apol"
    "lo.hdmap.BoundaryPolygon\"d\n\017RoadROIBound"
    "ary\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\0223\n\017roa"
    "d_boundaries\030\002 \003(\0132\032.apollo.hdmap.RoadBo"
    "undary\"|\n\013RoadSection\022\034\n\002id\030\001 \001(\0132\020.apol"
    "lo.hdmap.Id\022!\n\007lane_id\030\002 \003(\0132\020.apollo.hd"
    "map.Id\022,\n\010boundary\030\003 \001(\0132\032.apollo.hdmap."
    "RoadBoundary\"w\n\004Road\022\034\n\002id\030\001 \001(\0132\020.apoll"
    "o.hdmap.Id\022*\n\007section\030\002 \003(\0132\031.apollo.hdm"
    "ap.RoadSection\022%\n\013junction_id\030\003 \001(\0132\020.ap"
    "ollo.hdmap.Id", 773);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map/map_road.proto", &protobuf_RegisterTypes);
  BoundaryEdge::default_instance_ = new BoundaryEdge();
  BoundaryPolygon::default_instance_ = new BoundaryPolygon();
  RoadBoundary::default_instance_ = new RoadBoundary();
  RoadROIBoundary::default_instance_ = new RoadROIBoundary();
  RoadSection::default_instance_ = new RoadSection();
  Road::default_instance_ = new Road();
  BoundaryEdge::default_instance_->InitAsDefaultInstance();
  BoundaryPolygon::default_instance_->InitAsDefaultInstance();
  RoadBoundary::default_instance_->InitAsDefaultInstance();
  RoadROIBoundary::default_instance_->InitAsDefaultInstance();
  RoadSection::default_instance_->InitAsDefaultInstance();
  Road::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2fmap_5froad_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2fmap_5froad_2eproto {
  StaticDescriptorInitializer_map_2fmap_5froad_2eproto() {
    protobuf_AddDesc_map_2fmap_5froad_2eproto();
  }
} static_descriptor_initializer_map_2fmap_5froad_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BoundaryEdge_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundaryEdge_Type_descriptor_;
}
bool BoundaryEdge_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BoundaryEdge_Type BoundaryEdge::UNKNOWN;
const BoundaryEdge_Type BoundaryEdge::NORMAL;
const BoundaryEdge_Type BoundaryEdge::LEFT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::RIGHT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::Type_MIN;
const BoundaryEdge_Type BoundaryEdge::Type_MAX;
const int BoundaryEdge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryEdge::kCurveFieldNumber;
const int BoundaryEdge::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryEdge::BoundaryEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.BoundaryEdge)
}

void BoundaryEdge::InitAsDefaultInstance() {
  curve_ = const_cast< ::apollo::hdmap::Curve*>(&::apollo::hdmap::Curve::default_instance());
}

BoundaryEdge::BoundaryEdge(const BoundaryEdge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryEdge)
}

void BoundaryEdge::SharedCtor() {
  _cached_size_ = 0;
  curve_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundaryEdge::~BoundaryEdge() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryEdge)
  SharedDtor();
}

void BoundaryEdge::SharedDtor() {
  if (this != default_instance_) {
    delete curve_;
  }
}

void BoundaryEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundaryEdge_descriptor_;
}

const BoundaryEdge& BoundaryEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5froad_2eproto();
  return *default_instance_;
}

BoundaryEdge* BoundaryEdge::default_instance_ = NULL;

BoundaryEdge* BoundaryEdge::New(::google::protobuf::Arena* arena) const {
  BoundaryEdge* n = new BoundaryEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryEdge)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_curve()) {
      if (curve_ != NULL) curve_->::apollo::hdmap::Curve::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoundaryEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.BoundaryEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Curve curve = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::BoundaryEdge_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::hdmap::BoundaryEdge_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.BoundaryEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.BoundaryEdge)
  return false;
#undef DO_
}

void BoundaryEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.BoundaryEdge)
  // optional .apollo.hdmap.Curve curve = 1;
  if (has_curve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->curve_, output);
  }

  // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.BoundaryEdge)
}

::google::protobuf::uint8* BoundaryEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryEdge)
  // optional .apollo.hdmap.Curve curve = 1;
  if (has_curve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->curve_, false, target);
  }

  // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryEdge)
  return target;
}

int BoundaryEdge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryEdge)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.hdmap.Curve curve = 1;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->curve_);
    }

    // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.BoundaryEdge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoundaryEdge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.BoundaryEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.BoundaryEdge)
    MergeFrom(*source);
  }
}

void BoundaryEdge::MergeFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryEdge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curve()) {
      mutable_curve()->::apollo::hdmap::Curve::MergeFrom(from.curve());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BoundaryEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryEdge::CopyFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryEdge::IsInitialized() const {

  return true;
}

void BoundaryEdge::Swap(BoundaryEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryEdge::InternalSwap(BoundaryEdge* other) {
  std::swap(curve_, other->curve_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundaryEdge_descriptor_;
  metadata.reflection = BoundaryEdge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryEdge

// optional .apollo.hdmap.Curve curve = 1;
bool BoundaryEdge::has_curve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoundaryEdge::set_has_curve() {
  _has_bits_[0] |= 0x00000001u;
}
void BoundaryEdge::clear_has_curve() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoundaryEdge::clear_curve() {
  if (curve_ != NULL) curve_->::apollo::hdmap::Curve::Clear();
  clear_has_curve();
}
const ::apollo::hdmap::Curve& BoundaryEdge::curve() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.BoundaryEdge.curve)
  return curve_ != NULL ? *curve_ : *default_instance_->curve_;
}
::apollo::hdmap::Curve* BoundaryEdge::mutable_curve() {
  set_has_curve();
  if (curve_ == NULL) {
    curve_ = new ::apollo::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.BoundaryEdge.curve)
  return curve_;
}
::apollo::hdmap::Curve* BoundaryEdge::release_curve() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.BoundaryEdge.curve)
  clear_has_curve();
  ::apollo::hdmap::Curve* temp = curve_;
  curve_ = NULL;
  return temp;
}
void BoundaryEdge::set_allocated_curve(::apollo::hdmap::Curve* curve) {
  delete curve_;
  curve_ = curve;
  if (curve) {
    set_has_curve();
  } else {
    clear_has_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.BoundaryEdge.curve)
}

// optional .apollo.hdmap.BoundaryEdge.Type type = 2;
bool BoundaryEdge::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoundaryEdge::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void BoundaryEdge::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoundaryEdge::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::hdmap::BoundaryEdge_Type BoundaryEdge::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.BoundaryEdge.type)
  return static_cast< ::apollo::hdmap::BoundaryEdge_Type >(type_);
}
 void BoundaryEdge::set_type(::apollo::hdmap::BoundaryEdge_Type value) {
  assert(::apollo::hdmap::BoundaryEdge_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.BoundaryEdge.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryPolygon::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryPolygon::BoundaryPolygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.BoundaryPolygon)
}

void BoundaryPolygon::InitAsDefaultInstance() {
}

BoundaryPolygon::BoundaryPolygon(const BoundaryPolygon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryPolygon)
}

void BoundaryPolygon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundaryPolygon::~BoundaryPolygon() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryPolygon)
  SharedDtor();
}

void BoundaryPolygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundaryPolygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryPolygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundaryPolygon_descriptor_;
}

const BoundaryPolygon& BoundaryPolygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5froad_2eproto();
  return *default_instance_;
}

BoundaryPolygon* BoundaryPolygon::default_instance_ = NULL;

BoundaryPolygon* BoundaryPolygon::New(::google::protobuf::Arena* arena) const {
  BoundaryPolygon* n = new BoundaryPolygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryPolygon)
  edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoundaryPolygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.BoundaryPolygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.hdmap.BoundaryEdge edge = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_edge;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.BoundaryPolygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.BoundaryPolygon)
  return false;
#undef DO_
}

void BoundaryPolygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.BoundaryPolygon)
  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edge(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.BoundaryPolygon)
}

::google::protobuf::uint8* BoundaryPolygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryPolygon)
  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->edge(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryPolygon)
  return target;
}

int BoundaryPolygon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryPolygon)
  int total_size = 0;

  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryPolygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.BoundaryPolygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoundaryPolygon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryPolygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.BoundaryPolygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.BoundaryPolygon)
    MergeFrom(*source);
  }
}

void BoundaryPolygon::MergeFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryPolygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  edge_.MergeFrom(from.edge_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BoundaryPolygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryPolygon::CopyFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPolygon::IsInitialized() const {

  return true;
}

void BoundaryPolygon::Swap(BoundaryPolygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryPolygon::InternalSwap(BoundaryPolygon* other) {
  edge_.UnsafeArenaSwap(&other->edge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryPolygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundaryPolygon_descriptor_;
  metadata.reflection = BoundaryPolygon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryPolygon

// repeated .apollo.hdmap.BoundaryEdge edge = 1;
int BoundaryPolygon::edge_size() const {
  return edge_.size();
}
void BoundaryPolygon::clear_edge() {
  edge_.Clear();
}
const ::apollo::hdmap::BoundaryEdge& BoundaryPolygon::edge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.BoundaryPolygon.edge)
  return edge_.Get(index);
}
::apollo::hdmap::BoundaryEdge* BoundaryPolygon::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.BoundaryPolygon.edge)
  return edge_.Mutable(index);
}
::apollo::hdmap::BoundaryEdge* BoundaryPolygon::add_edge() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.BoundaryPolygon.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::BoundaryEdge >*
BoundaryPolygon::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.BoundaryPolygon.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::BoundaryEdge >&
BoundaryPolygon::edge() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.BoundaryPolygon.edge)
  return edge_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadBoundary::kOuterPolygonFieldNumber;
const int RoadBoundary::kHoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadBoundary::RoadBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RoadBoundary)
}

void RoadBoundary::InitAsDefaultInstance() {
  outer_polygon_ = const_cast< ::apollo::hdmap::BoundaryPolygon*>(&::apollo::hdmap::BoundaryPolygon::default_instance());
}

RoadBoundary::RoadBoundary(const RoadBoundary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadBoundary)
}

void RoadBoundary::SharedCtor() {
  _cached_size_ = 0;
  outer_polygon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadBoundary::~RoadBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadBoundary)
  SharedDtor();
}

void RoadBoundary::SharedDtor() {
  if (this != default_instance_) {
    delete outer_polygon_;
  }
}

void RoadBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadBoundary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadBoundary_descriptor_;
}

const RoadBoundary& RoadBoundary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5froad_2eproto();
  return *default_instance_;
}

RoadBoundary* RoadBoundary::default_instance_ = NULL;

RoadBoundary* RoadBoundary::New(::google::protobuf::Arena* arena) const {
  RoadBoundary* n = new RoadBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadBoundary)
  if (has_outer_polygon()) {
    if (outer_polygon_ != NULL) outer_polygon_->::apollo::hdmap::BoundaryPolygon::Clear();
  }
  hole_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoadBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RoadBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hole;
        break;
      }

      // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
      case 2: {
        if (tag == 18) {
         parse_hole:
          DO_(input->IncrementRecursionDepth());
         parse_loop_hole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hole()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_hole;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RoadBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RoadBoundary)
  return false;
#undef DO_
}

void RoadBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RoadBoundary)
  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (has_outer_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->outer_polygon_, output);
  }

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0, n = this->hole_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hole(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RoadBoundary)
}

::google::protobuf::uint8* RoadBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadBoundary)
  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (has_outer_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->outer_polygon_, false, target);
  }

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0, n = this->hole_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->hole(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadBoundary)
  return target;
}

int RoadBoundary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadBoundary)
  int total_size = 0;

  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (has_outer_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->outer_polygon_);
  }

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  total_size += 1 * this->hole_size();
  for (int i = 0; i < this->hole_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hole(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoadBoundary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadBoundary)
    MergeFrom(*source);
  }
}

void RoadBoundary::MergeFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  hole_.MergeFrom(from.hole_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outer_polygon()) {
      mutable_outer_polygon()->::apollo::hdmap::BoundaryPolygon::MergeFrom(from.outer_polygon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoadBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadBoundary::CopyFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundary::IsInitialized() const {

  return true;
}

void RoadBoundary::Swap(RoadBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadBoundary::InternalSwap(RoadBoundary* other) {
  std::swap(outer_polygon_, other->outer_polygon_);
  hole_.UnsafeArenaSwap(&other->hole_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadBoundary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadBoundary_descriptor_;
  metadata.reflection = RoadBoundary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadBoundary

// optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
bool RoadBoundary::has_outer_polygon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadBoundary::set_has_outer_polygon() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadBoundary::clear_has_outer_polygon() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadBoundary::clear_outer_polygon() {
  if (outer_polygon_ != NULL) outer_polygon_->::apollo::hdmap::BoundaryPolygon::Clear();
  clear_has_outer_polygon();
}
const ::apollo::hdmap::BoundaryPolygon& RoadBoundary::outer_polygon() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadBoundary.outer_polygon)
  return outer_polygon_ != NULL ? *outer_polygon_ : *default_instance_->outer_polygon_;
}
::apollo::hdmap::BoundaryPolygon* RoadBoundary::mutable_outer_polygon() {
  set_has_outer_polygon();
  if (outer_polygon_ == NULL) {
    outer_polygon_ = new ::apollo::hdmap::BoundaryPolygon;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadBoundary.outer_polygon)
  return outer_polygon_;
}
::apollo::hdmap::BoundaryPolygon* RoadBoundary::release_outer_polygon() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadBoundary.outer_polygon)
  clear_has_outer_polygon();
  ::apollo::hdmap::BoundaryPolygon* temp = outer_polygon_;
  outer_polygon_ = NULL;
  return temp;
}
void RoadBoundary::set_allocated_outer_polygon(::apollo::hdmap::BoundaryPolygon* outer_polygon) {
  delete outer_polygon_;
  outer_polygon_ = outer_polygon;
  if (outer_polygon) {
    set_has_outer_polygon();
  } else {
    clear_has_outer_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadBoundary.outer_polygon)
}

// repeated .apollo.hdmap.BoundaryPolygon hole = 2;
int RoadBoundary::hole_size() const {
  return hole_.size();
}
void RoadBoundary::clear_hole() {
  hole_.Clear();
}
const ::apollo::hdmap::BoundaryPolygon& RoadBoundary::hole(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadBoundary.hole)
  return hole_.Get(index);
}
::apollo::hdmap::BoundaryPolygon* RoadBoundary::mutable_hole(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadBoundary.hole)
  return hole_.Mutable(index);
}
::apollo::hdmap::BoundaryPolygon* RoadBoundary::add_hole() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.RoadBoundary.hole)
  return hole_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::BoundaryPolygon >*
RoadBoundary::mutable_hole() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.RoadBoundary.hole)
  return &hole_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::BoundaryPolygon >&
RoadBoundary::hole() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.RoadBoundary.hole)
  return hole_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadROIBoundary::kIdFieldNumber;
const int RoadROIBoundary::kRoadBoundariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadROIBoundary::RoadROIBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RoadROIBoundary)
}

void RoadROIBoundary::InitAsDefaultInstance() {
  id_ = const_cast< ::apollo::hdmap::Id*>(&::apollo::hdmap::Id::default_instance());
}

RoadROIBoundary::RoadROIBoundary(const RoadROIBoundary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadROIBoundary)
}

void RoadROIBoundary::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadROIBoundary::~RoadROIBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadROIBoundary)
  SharedDtor();
}

void RoadROIBoundary::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void RoadROIBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadROIBoundary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadROIBoundary_descriptor_;
}

const RoadROIBoundary& RoadROIBoundary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5froad_2eproto();
  return *default_instance_;
}

RoadROIBoundary* RoadROIBoundary::default_instance_ = NULL;

RoadROIBoundary* RoadROIBoundary::New(::google::protobuf::Arena* arena) const {
  RoadROIBoundary* n = new RoadROIBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadROIBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadROIBoundary)
  if (has_id()) {
    if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  }
  road_boundaries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoadROIBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RoadROIBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_road_boundaries;
        break;
      }

      // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
      case 2: {
        if (tag == 18) {
         parse_road_boundaries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_road_boundaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_road_boundaries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_road_boundaries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RoadROIBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RoadROIBoundary)
  return false;
#undef DO_
}

void RoadROIBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RoadROIBoundary)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0, n = this->road_boundaries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road_boundaries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RoadROIBoundary)
}

::google::protobuf::uint8* RoadROIBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadROIBoundary)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0, n = this->road_boundaries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->road_boundaries(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadROIBoundary)
  return target;
}

int RoadROIBoundary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadROIBoundary)
  int total_size = 0;

  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  total_size += 1 * this->road_boundaries_size();
  for (int i = 0; i < this->road_boundaries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->road_boundaries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadROIBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadROIBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoadROIBoundary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadROIBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadROIBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadROIBoundary)
    MergeFrom(*source);
  }
}

void RoadROIBoundary::MergeFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadROIBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  road_boundaries_.MergeFrom(from.road_boundaries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoadROIBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadROIBoundary::CopyFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadROIBoundary::IsInitialized() const {

  return true;
}

void RoadROIBoundary::Swap(RoadROIBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadROIBoundary::InternalSwap(RoadROIBoundary* other) {
  std::swap(id_, other->id_);
  road_boundaries_.UnsafeArenaSwap(&other->road_boundaries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadROIBoundary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadROIBoundary_descriptor_;
  metadata.reflection = RoadROIBoundary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadROIBoundary

// optional .apollo.hdmap.Id id = 1;
bool RoadROIBoundary::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadROIBoundary::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadROIBoundary::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadROIBoundary::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& RoadROIBoundary::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadROIBoundary.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::apollo::hdmap::Id* RoadROIBoundary::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadROIBoundary.id)
  return id_;
}
::apollo::hdmap::Id* RoadROIBoundary::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadROIBoundary.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void RoadROIBoundary::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadROIBoundary.id)
}

// repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
int RoadROIBoundary::road_boundaries_size() const {
  return road_boundaries_.size();
}
void RoadROIBoundary::clear_road_boundaries() {
  road_boundaries_.Clear();
}
const ::apollo::hdmap::RoadBoundary& RoadROIBoundary::road_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Get(index);
}
::apollo::hdmap::RoadBoundary* RoadROIBoundary::mutable_road_boundaries(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Mutable(index);
}
::apollo::hdmap::RoadBoundary* RoadROIBoundary::add_road_boundaries() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RoadBoundary >*
RoadROIBoundary::mutable_road_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return &road_boundaries_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RoadBoundary >&
RoadROIBoundary::road_boundaries() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSection::kIdFieldNumber;
const int RoadSection::kLaneIdFieldNumber;
const int RoadSection::kBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSection::RoadSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RoadSection)
}

void RoadSection::InitAsDefaultInstance() {
  id_ = const_cast< ::apollo::hdmap::Id*>(&::apollo::hdmap::Id::default_instance());
  boundary_ = const_cast< ::apollo::hdmap::RoadBoundary*>(&::apollo::hdmap::RoadBoundary::default_instance());
}

RoadSection::RoadSection(const RoadSection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadSection)
}

void RoadSection::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  boundary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadSection::~RoadSection() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadSection)
  SharedDtor();
}

void RoadSection::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete boundary_;
  }
}

void RoadSection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadSection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadSection_descriptor_;
}

const RoadSection& RoadSection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5froad_2eproto();
  return *default_instance_;
}

RoadSection* RoadSection::default_instance_ = NULL;

RoadSection* RoadSection::New(::google::protobuf::Arena* arena) const {
  RoadSection* n = new RoadSection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadSection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadSection)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_id()) {
      if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
    }
    if (has_boundary()) {
      if (boundary_ != NULL) boundary_->::apollo::hdmap::RoadBoundary::Clear();
    }
  }
  lane_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoadSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RoadSection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lane_id;
        break;
      }

      // repeated .apollo.hdmap.Id lane_id = 2;
      case 2: {
        if (tag == 18) {
         parse_lane_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_lane_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_boundary;
        break;
      }

      // optional .apollo.hdmap.RoadBoundary boundary = 3;
      case 3: {
        if (tag == 26) {
         parse_boundary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RoadSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RoadSection)
  return false;
#undef DO_
}

void RoadSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RoadSection)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .apollo.hdmap.Id lane_id = 2;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_id(i), output);
  }

  // optional .apollo.hdmap.RoadBoundary boundary = 3;
  if (has_boundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->boundary_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RoadSection)
}

::google::protobuf::uint8* RoadSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadSection)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // repeated .apollo.hdmap.Id lane_id = 2;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_id(i), false, target);
  }

  // optional .apollo.hdmap.RoadBoundary boundary = 3;
  if (has_boundary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->boundary_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadSection)
  return target;
}

int RoadSection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadSection)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .apollo.hdmap.RoadBoundary boundary = 3;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

  }
  // repeated .apollo.hdmap.Id lane_id = 2;
  total_size += 1 * this->lane_id_size();
  for (int i = 0; i < this->lane_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadSection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoadSection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadSection)
    MergeFrom(*source);
  }
}

void RoadSection::MergeFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadSection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lane_id_.MergeFrom(from.lane_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (from.has_boundary()) {
      mutable_boundary()->::apollo::hdmap::RoadBoundary::MergeFrom(from.boundary());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoadSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSection::CopyFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection::IsInitialized() const {

  return true;
}

void RoadSection::Swap(RoadSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSection::InternalSwap(RoadSection* other) {
  std::swap(id_, other->id_);
  lane_id_.UnsafeArenaSwap(&other->lane_id_);
  std::swap(boundary_, other->boundary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadSection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadSection_descriptor_;
  metadata.reflection = RoadSection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadSection

// optional .apollo.hdmap.Id id = 1;
bool RoadSection::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadSection::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadSection::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadSection::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& RoadSection::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadSection.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::apollo::hdmap::Id* RoadSection::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadSection.id)
  return id_;
}
::apollo::hdmap::Id* RoadSection::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadSection.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void RoadSection::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadSection.id)
}

// repeated .apollo.hdmap.Id lane_id = 2;
int RoadSection::lane_id_size() const {
  return lane_id_.size();
}
void RoadSection::clear_lane_id() {
  lane_id_.Clear();
}
const ::apollo::hdmap::Id& RoadSection::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadSection.lane_id)
  return lane_id_.Get(index);
}
::apollo::hdmap::Id* RoadSection::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadSection.lane_id)
  return lane_id_.Mutable(index);
}
::apollo::hdmap::Id* RoadSection::add_lane_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.RoadSection.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
RoadSection::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.RoadSection.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
RoadSection::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.RoadSection.lane_id)
  return lane_id_;
}

// optional .apollo.hdmap.RoadBoundary boundary = 3;
bool RoadSection::has_boundary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoadSection::set_has_boundary() {
  _has_bits_[0] |= 0x00000004u;
}
void RoadSection::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoadSection::clear_boundary() {
  if (boundary_ != NULL) boundary_->::apollo::hdmap::RoadBoundary::Clear();
  clear_has_boundary();
}
const ::apollo::hdmap::RoadBoundary& RoadSection::boundary() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadSection.boundary)
  return boundary_ != NULL ? *boundary_ : *default_instance_->boundary_;
}
::apollo::hdmap::RoadBoundary* RoadSection::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::apollo::hdmap::RoadBoundary;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadSection.boundary)
  return boundary_;
}
::apollo::hdmap::RoadBoundary* RoadSection::release_boundary() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadSection.boundary)
  clear_has_boundary();
  ::apollo::hdmap::RoadBoundary* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void RoadSection::set_allocated_boundary(::apollo::hdmap::RoadBoundary* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadSection.boundary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kIdFieldNumber;
const int Road::kSectionFieldNumber;
const int Road::kJunctionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Road)
}

void Road::InitAsDefaultInstance() {
  id_ = const_cast< ::apollo::hdmap::Id*>(&::apollo::hdmap::Id::default_instance());
  junction_id_ = const_cast< ::apollo::hdmap::Id*>(&::apollo::hdmap::Id::default_instance());
}

Road::Road(const Road& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Road)
}

void Road::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  junction_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete junction_id_;
  }
}

void Road::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Road_descriptor_;
}

const Road& Road::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5froad_2eproto();
  return *default_instance_;
}

Road* Road::default_instance_ = NULL;

Road* Road::New(::google::protobuf::Arena* arena) const {
  Road* n = new Road;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Road)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_id()) {
      if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
    }
    if (has_junction_id()) {
      if (junction_id_ != NULL) junction_id_->::apollo::hdmap::Id::Clear();
    }
  }
  section_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Road)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_section;
        break;
      }

      // repeated .apollo.hdmap.RoadSection section = 2;
      case 2: {
        if (tag == 18) {
         parse_section:
          DO_(input->IncrementRecursionDepth());
         parse_loop_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_section()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_section;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_junction_id;
        break;
      }

      // optional .apollo.hdmap.Id junction_id = 3;
      case 3: {
        if (tag == 26) {
         parse_junction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_junction_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Road)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .apollo.hdmap.RoadSection section = 2;
  for (unsigned int i = 0, n = this->section_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->section(i), output);
  }

  // optional .apollo.hdmap.Id junction_id = 3;
  if (has_junction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->junction_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Road)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // repeated .apollo.hdmap.RoadSection section = 2;
  for (unsigned int i = 0, n = this->section_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->section(i), false, target);
  }

  // optional .apollo.hdmap.Id junction_id = 3;
  if (has_junction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->junction_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Road)
  return target;
}

int Road::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Road)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .apollo.hdmap.Id junction_id = 3;
    if (has_junction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->junction_id_);
    }

  }
  // repeated .apollo.hdmap.RoadSection section = 2;
  total_size += 1 * this->section_size();
  for (int i = 0; i < this->section_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->section(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Road)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Road* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Road)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  section_.MergeFrom(from.section_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (from.has_junction_id()) {
      mutable_junction_id()->::apollo::hdmap::Id::MergeFrom(from.junction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {

  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  std::swap(id_, other->id_);
  section_.UnsafeArenaSwap(&other->section_);
  std::swap(junction_id_, other->junction_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Road_descriptor_;
  metadata.reflection = Road_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Road

// optional .apollo.hdmap.Id id = 1;
bool Road::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Road::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Road::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Road::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& Road::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Road.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::apollo::hdmap::Id* Road::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Road.id)
  return id_;
}
::apollo::hdmap::Id* Road::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Road.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Road::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Road.id)
}

// repeated .apollo.hdmap.RoadSection section = 2;
int Road::section_size() const {
  return section_.size();
}
void Road::clear_section() {
  section_.Clear();
}
const ::apollo::hdmap::RoadSection& Road::section(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Road.section)
  return section_.Get(index);
}
::apollo::hdmap::RoadSection* Road::mutable_section(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Road.section)
  return section_.Mutable(index);
}
::apollo::hdmap::RoadSection* Road::add_section() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Road.section)
  return section_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RoadSection >*
Road::mutable_section() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Road.section)
  return &section_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RoadSection >&
Road::section() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Road.section)
  return section_;
}

// optional .apollo.hdmap.Id junction_id = 3;
bool Road::has_junction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Road::set_has_junction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Road::clear_has_junction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Road::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->::apollo::hdmap::Id::Clear();
  clear_has_junction_id();
}
const ::apollo::hdmap::Id& Road::junction_id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Road.junction_id)
  return junction_id_ != NULL ? *junction_id_ : *default_instance_->junction_id_;
}
::apollo::hdmap::Id* Road::mutable_junction_id() {
  set_has_junction_id();
  if (junction_id_ == NULL) {
    junction_id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Road.junction_id)
  return junction_id_;
}
::apollo::hdmap::Id* Road::release_junction_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Road.junction_id)
  clear_has_junction_id();
  ::apollo::hdmap::Id* temp = junction_id_;
  junction_id_ = NULL;
  return temp;
}
void Road::set_allocated_junction_id(::apollo::hdmap::Id* junction_id) {
  delete junction_id_;
  junction_id_ = junction_id;
  if (junction_id) {
    set_has_junction_id();
  } else {
    clear_has_junction_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Road.junction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
