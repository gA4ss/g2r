// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization/localization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localization/localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* Uncertainty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uncertainty_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationEstimate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationEstimate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MeasureState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_localization_2flocalization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_localization_2flocalization_2eproto() {
  protobuf_AddDesc_localization_2flocalization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localization/localization.proto");
  GOOGLE_CHECK(file != NULL);
  Uncertainty_descriptor_ = file->message_type(0);
  static const int Uncertainty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, position_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, orientation_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_velocity_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_acceleration_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, angular_velocity_std_dev_),
  };
  Uncertainty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uncertainty_descriptor_,
      Uncertainty::default_instance_,
      Uncertainty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _has_bits_[0]),
      -1,
      -1,
      sizeof(Uncertainty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _internal_metadata_),
      -1);
  LocalizationEstimate_descriptor_ = file->message_type(1);
  static const int LocalizationEstimate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, trajectory_point_),
  };
  LocalizationEstimate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalizationEstimate_descriptor_,
      LocalizationEstimate::default_instance_,
      LocalizationEstimate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _has_bits_[0]),
      -1,
      -1,
      sizeof(LocalizationEstimate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _internal_metadata_),
      -1);
  LocalizationStatus_descriptor_ = file->message_type(2);
  static const int LocalizationStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, fusion_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, gnss_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, lidar_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, measurement_time_),
  };
  LocalizationStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalizationStatus_descriptor_,
      LocalizationStatus::default_instance_,
      LocalizationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(LocalizationStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, _internal_metadata_),
      -1);
  MeasureState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localization_2flocalization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uncertainty_descriptor_, &Uncertainty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalizationEstimate_descriptor_, &LocalizationEstimate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalizationStatus_descriptor_, &LocalizationStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localization_2flocalization_2eproto() {
  delete Uncertainty::default_instance_;
  delete Uncertainty_reflection_;
  delete LocalizationEstimate::default_instance_;
  delete LocalizationEstimate_reflection_;
  delete LocalizationStatus::default_instance_;
  delete LocalizationStatus_reflection_;
}

void protobuf_AddDesc_localization_2flocalization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_localization_2flocalization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::localization::protobuf_AddDesc_localization_2fpose_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037localization/localization.proto\022\023apoll"
    "o.localization\032\023common/header.proto\032\027loc"
    "alization/pose.proto\032\025common/geometry.pr"
    "oto\032\026common/pnc_point.proto\"\244\002\n\013Uncertai"
    "nty\0220\n\020position_std_dev\030\001 \001(\0132\026.apollo.c"
    "ommon.Point3D\0223\n\023orientation_std_dev\030\002 \001"
    "(\0132\026.apollo.common.Point3D\0227\n\027linear_vel"
    "ocity_std_dev\030\003 \001(\0132\026.apollo.common.Poin"
    "t3D\022;\n\033linear_acceleration_std_dev\030\004 \001(\013"
    "2\026.apollo.common.Point3D\0228\n\030angular_velo"
    "city_std_dev\030\005 \001(\0132\026.apollo.common.Point"
    "3D\"\361\001\n\024LocalizationEstimate\022%\n\006header\030\001 "
    "\001(\0132\025.apollo.common.Header\022\'\n\004pose\030\002 \001(\013"
    "2\031.apollo.localization.Pose\0225\n\013uncertain"
    "ty\030\003 \001(\0132 .apollo.localization.Uncertain"
    "ty\022\030\n\020measurement_time\030\004 \001(\001\0228\n\020trajecto"
    "ry_point\030\005 \003(\0132\036.apollo.common.Trajector"
    "yPoint\"\200\002\n\022LocalizationStatus\022%\n\006header\030"
    "\001 \001(\0132\025.apollo.common.Header\0228\n\rfusion_s"
    "tatus\030\002 \001(\0162!.apollo.localization.Measur"
    "eState\0226\n\013gnss_status\030\003 \001(\0162!.apollo.loc"
    "alization.MeasureState\0227\n\014lidar_status\030\004"
    " \001(\0162!.apollo.localization.MeasureState\022"
    "\030\n\020measurement_time\030\005 \001(\001*@\n\014MeasureStat"
    "e\022\r\n\tNOT_VALID\020\000\022\016\n\nNOT_STABLE\020\001\022\006\n\002OK\020\002"
    "\022\t\n\005VALID\020\003", 1011);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization/localization.proto", &protobuf_RegisterTypes);
  Uncertainty::default_instance_ = new Uncertainty();
  LocalizationEstimate::default_instance_ = new LocalizationEstimate();
  LocalizationStatus::default_instance_ = new LocalizationStatus();
  Uncertainty::default_instance_->InitAsDefaultInstance();
  LocalizationEstimate::default_instance_->InitAsDefaultInstance();
  LocalizationStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localization_2flocalization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localization_2flocalization_2eproto {
  StaticDescriptorInitializer_localization_2flocalization_2eproto() {
    protobuf_AddDesc_localization_2flocalization_2eproto();
  }
} static_descriptor_initializer_localization_2flocalization_2eproto_;
const ::google::protobuf::EnumDescriptor* MeasureState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeasureState_descriptor_;
}
bool MeasureState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uncertainty::kPositionStdDevFieldNumber;
const int Uncertainty::kOrientationStdDevFieldNumber;
const int Uncertainty::kLinearVelocityStdDevFieldNumber;
const int Uncertainty::kLinearAccelerationStdDevFieldNumber;
const int Uncertainty::kAngularVelocityStdDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uncertainty::Uncertainty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.Uncertainty)
}

void Uncertainty::InitAsDefaultInstance() {
  position_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  orientation_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_acceleration_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  angular_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
}

Uncertainty::Uncertainty(const Uncertainty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Uncertainty)
}

void Uncertainty::SharedCtor() {
  _cached_size_ = 0;
  position_std_dev_ = NULL;
  orientation_std_dev_ = NULL;
  linear_velocity_std_dev_ = NULL;
  linear_acceleration_std_dev_ = NULL;
  angular_velocity_std_dev_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:apollo.localization.Uncertainty)
  SharedDtor();
}

void Uncertainty::SharedDtor() {
  if (this != default_instance_) {
    delete position_std_dev_;
    delete orientation_std_dev_;
    delete linear_velocity_std_dev_;
    delete linear_acceleration_std_dev_;
    delete angular_velocity_std_dev_;
  }
}

void Uncertainty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uncertainty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uncertainty_descriptor_;
}

const Uncertainty& Uncertainty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2flocalization_2eproto();
  return *default_instance_;
}

Uncertainty* Uncertainty::default_instance_ = NULL;

Uncertainty* Uncertainty::New(::google::protobuf::Arena* arena) const {
  Uncertainty* n = new Uncertainty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.Uncertainty)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_position_std_dev()) {
      if (position_std_dev_ != NULL) position_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_orientation_std_dev()) {
      if (orientation_std_dev_ != NULL) orientation_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_velocity_std_dev()) {
      if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_acceleration_std_dev()) {
      if (linear_acceleration_std_dev_ != NULL) linear_acceleration_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_angular_velocity_std_dev()) {
      if (angular_velocity_std_dev_ != NULL) angular_velocity_std_dev_->::apollo::common::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Uncertainty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.Uncertainty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point3D position_std_dev = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation_std_dev;
        break;
      }

      // optional .apollo.common.Point3D orientation_std_dev = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_linear_velocity_std_dev;
        break;
      }

      // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
      case 3: {
        if (tag == 26) {
         parse_linear_velocity_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_linear_acceleration_std_dev;
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
      case 4: {
        if (tag == 34) {
         parse_linear_acceleration_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_angular_velocity_std_dev;
        break;
      }

      // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
      case 5: {
        if (tag == 42) {
         parse_angular_velocity_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.Uncertainty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.Uncertainty)
  return false;
#undef DO_
}

void Uncertainty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.Uncertainty)
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (has_position_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_std_dev_, output);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (has_orientation_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_std_dev_, output);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (has_linear_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->linear_velocity_std_dev_, output);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (has_linear_acceleration_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->linear_acceleration_std_dev_, output);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (has_angular_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->angular_velocity_std_dev_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.Uncertainty)
}

::google::protobuf::uint8* Uncertainty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Uncertainty)
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (has_position_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (has_orientation_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (has_linear_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->linear_velocity_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (has_linear_acceleration_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->linear_acceleration_std_dev_, false, target);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (has_angular_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->angular_velocity_std_dev_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Uncertainty)
  return target;
}

int Uncertainty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.Uncertainty)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Point3D position_std_dev = 1;
    if (has_position_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_std_dev_);
    }

    // optional .apollo.common.Point3D orientation_std_dev = 2;
    if (has_orientation_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
    if (has_linear_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_velocity_std_dev_);
    }

    // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
    if (has_linear_acceleration_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_acceleration_std_dev_);
    }

    // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
    if (has_angular_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_std_dev_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uncertainty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.Uncertainty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Uncertainty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Uncertainty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.Uncertainty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.Uncertainty)
    MergeFrom(*source);
  }
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.Uncertainty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_std_dev()) {
      mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from.position_std_dev());
    }
    if (from.has_orientation_std_dev()) {
      mutable_orientation_std_dev()->::apollo::common::Point3D::MergeFrom(from.orientation_std_dev());
    }
    if (from.has_linear_velocity_std_dev()) {
      mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_velocity_std_dev());
    }
    if (from.has_linear_acceleration_std_dev()) {
      mutable_linear_acceleration_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration_std_dev());
    }
    if (from.has_angular_velocity_std_dev()) {
      mutable_angular_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.angular_velocity_std_dev());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Uncertainty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {

  return true;
}

void Uncertainty::Swap(Uncertainty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uncertainty::InternalSwap(Uncertainty* other) {
  std::swap(position_std_dev_, other->position_std_dev_);
  std::swap(orientation_std_dev_, other->orientation_std_dev_);
  std::swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  std::swap(linear_acceleration_std_dev_, other->linear_acceleration_std_dev_);
  std::swap(angular_velocity_std_dev_, other->angular_velocity_std_dev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uncertainty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uncertainty_descriptor_;
  metadata.reflection = Uncertainty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uncertainty

// optional .apollo.common.Point3D position_std_dev = 1;
bool Uncertainty::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Uncertainty::set_has_position_std_dev() {
  _has_bits_[0] |= 0x00000001u;
}
void Uncertainty::clear_has_position_std_dev() {
  _has_bits_[0] &= ~0x00000001u;
}
void Uncertainty::clear_position_std_dev() {
  if (position_std_dev_ != NULL) position_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_position_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::position_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.position_std_dev)
  return position_std_dev_ != NULL ? *position_std_dev_ : *default_instance_->position_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_position_std_dev() {
  set_has_position_std_dev();
  if (position_std_dev_ == NULL) {
    position_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.position_std_dev)
  return position_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.position_std_dev)
  clear_has_position_std_dev();
  ::apollo::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev) {
  delete position_std_dev_;
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    set_has_position_std_dev();
  } else {
    clear_has_position_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.position_std_dev)
}

// optional .apollo.common.Point3D orientation_std_dev = 2;
bool Uncertainty::has_orientation_std_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Uncertainty::set_has_orientation_std_dev() {
  _has_bits_[0] |= 0x00000002u;
}
void Uncertainty::clear_has_orientation_std_dev() {
  _has_bits_[0] &= ~0x00000002u;
}
void Uncertainty::clear_orientation_std_dev() {
  if (orientation_std_dev_ != NULL) orientation_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_orientation_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::orientation_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_ != NULL ? *orientation_std_dev_ : *default_instance_->orientation_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_orientation_std_dev() {
  set_has_orientation_std_dev();
  if (orientation_std_dev_ == NULL) {
    orientation_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_orientation_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.orientation_std_dev)
  clear_has_orientation_std_dev();
  ::apollo::common::Point3D* temp = orientation_std_dev_;
  orientation_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_orientation_std_dev(::apollo::common::Point3D* orientation_std_dev) {
  delete orientation_std_dev_;
  orientation_std_dev_ = orientation_std_dev;
  if (orientation_std_dev) {
    set_has_orientation_std_dev();
  } else {
    clear_has_orientation_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.orientation_std_dev)
}

// optional .apollo.common.Point3D linear_velocity_std_dev = 3;
bool Uncertainty::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Uncertainty::set_has_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000004u;
}
void Uncertainty::clear_has_linear_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000004u;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_linear_velocity_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_ != NULL ? *linear_velocity_std_dev_ : *default_instance_->linear_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_linear_velocity_std_dev() {
  set_has_linear_velocity_std_dev();
  if (linear_velocity_std_dev_ == NULL) {
    linear_velocity_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_velocity_std_dev)
  clear_has_linear_velocity_std_dev();
  ::apollo::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev) {
  delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    set_has_linear_velocity_std_dev();
  } else {
    clear_has_linear_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_velocity_std_dev)
}

// optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
bool Uncertainty::has_linear_acceleration_std_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Uncertainty::set_has_linear_acceleration_std_dev() {
  _has_bits_[0] |= 0x00000008u;
}
void Uncertainty::clear_has_linear_acceleration_std_dev() {
  _has_bits_[0] &= ~0x00000008u;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (linear_acceleration_std_dev_ != NULL) linear_acceleration_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_linear_acceleration_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::linear_acceleration_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_ != NULL ? *linear_acceleration_std_dev_ : *default_instance_->linear_acceleration_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() {
  set_has_linear_acceleration_std_dev();
  if (linear_acceleration_std_dev_ == NULL) {
    linear_acceleration_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  clear_has_linear_acceleration_std_dev();
  ::apollo::common::Point3D* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_acceleration_std_dev(::apollo::common::Point3D* linear_acceleration_std_dev) {
  delete linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  if (linear_acceleration_std_dev) {
    set_has_linear_acceleration_std_dev();
  } else {
    clear_has_linear_acceleration_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_acceleration_std_dev)
}

// optional .apollo.common.Point3D angular_velocity_std_dev = 5;
bool Uncertainty::has_angular_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Uncertainty::set_has_angular_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
void Uncertainty::clear_has_angular_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (angular_velocity_std_dev_ != NULL) angular_velocity_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_angular_velocity_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::angular_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_ != NULL ? *angular_velocity_std_dev_ : *default_instance_->angular_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::mutable_angular_velocity_std_dev() {
  set_has_angular_velocity_std_dev();
  if (angular_velocity_std_dev_ == NULL) {
    angular_velocity_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.angular_velocity_std_dev)
  clear_has_angular_velocity_std_dev();
  ::apollo::common::Point3D* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_angular_velocity_std_dev(::apollo::common::Point3D* angular_velocity_std_dev) {
  delete angular_velocity_std_dev_;
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  if (angular_velocity_std_dev) {
    set_has_angular_velocity_std_dev();
  } else {
    clear_has_angular_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.angular_velocity_std_dev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationEstimate::kHeaderFieldNumber;
const int LocalizationEstimate::kPoseFieldNumber;
const int LocalizationEstimate::kUncertaintyFieldNumber;
const int LocalizationEstimate::kMeasurementTimeFieldNumber;
const int LocalizationEstimate::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationEstimate::LocalizationEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.LocalizationEstimate)
}

void LocalizationEstimate::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  pose_ = const_cast< ::apollo::localization::Pose*>(&::apollo::localization::Pose::default_instance());
  uncertainty_ = const_cast< ::apollo::localization::Uncertainty*>(&::apollo::localization::Uncertainty::default_instance());
}

LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationEstimate)
}

void LocalizationEstimate::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  pose_ = NULL;
  uncertainty_ = NULL;
  measurement_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationEstimate)
  SharedDtor();
}

void LocalizationEstimate::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete pose_;
    delete uncertainty_;
  }
}

void LocalizationEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationEstimate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationEstimate_descriptor_;
}

const LocalizationEstimate& LocalizationEstimate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2flocalization_2eproto();
  return *default_instance_;
}

LocalizationEstimate* LocalizationEstimate::default_instance_ = NULL;

LocalizationEstimate* LocalizationEstimate::New(::google::protobuf::Arena* arena) const {
  LocalizationEstimate* n = new LocalizationEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.LocalizationEstimate)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::apollo::localization::Pose::Clear();
    }
    if (has_uncertainty()) {
      if (uncertainty_ != NULL) uncertainty_->::apollo::localization::Uncertainty::Clear();
    }
    measurement_time_ = 0;
  }
  trajectory_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LocalizationEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.LocalizationEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .apollo.localization.Pose pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uncertainty;
        break;
      }

      // optional .apollo.localization.Uncertainty uncertainty = 3;
      case 3: {
        if (tag == 26) {
         parse_uncertainty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 4;
      case 4: {
        if (tag == 33) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trajectory_point;
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
      case 5: {
        if (tag == 42) {
         parse_trajectory_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_trajectory_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.LocalizationEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.LocalizationEstimate)
  return false;
#undef DO_
}

void LocalizationEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.LocalizationEstimate)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (has_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->uncertainty_, output);
  }

  // optional double measurement_time = 4;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->measurement_time(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trajectory_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.LocalizationEstimate)
}

::google::protobuf::uint8* LocalizationEstimate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationEstimate)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, false, target);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (has_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->uncertainty_, false, target);
  }

  // optional double measurement_time = 4;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->measurement_time(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->trajectory_point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationEstimate)
  return target;
}

int LocalizationEstimate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.LocalizationEstimate)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.localization.Pose pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .apollo.localization.Uncertainty uncertainty = 3;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uncertainty_);
    }

    // optional double measurement_time = 4;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  total_size += 1 * this->trajectory_point_size();
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationEstimate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.LocalizationEstimate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalizationEstimate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationEstimate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.LocalizationEstimate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.LocalizationEstimate)
    MergeFrom(*source);
  }
}

void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.LocalizationEstimate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_pose()) {
      mutable_pose()->::apollo::localization::Pose::MergeFrom(from.pose());
    }
    if (from.has_uncertainty()) {
      mutable_uncertainty()->::apollo::localization::Uncertainty::MergeFrom(from.uncertainty());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LocalizationEstimate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {

  return true;
}

void LocalizationEstimate::Swap(LocalizationEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationEstimate::InternalSwap(LocalizationEstimate* other) {
  std::swap(header_, other->header_);
  std::swap(pose_, other->pose_);
  std::swap(uncertainty_, other->uncertainty_);
  std::swap(measurement_time_, other->measurement_time_);
  trajectory_point_.UnsafeArenaSwap(&other->trajectory_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationEstimate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationEstimate_descriptor_;
  metadata.reflection = LocalizationEstimate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationEstimate

// optional .apollo.common.Header header = 1;
bool LocalizationEstimate::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationEstimate::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationEstimate::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationEstimate::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& LocalizationEstimate::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* LocalizationEstimate::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.header)
  return header_;
}
::apollo::common::Header* LocalizationEstimate::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.header)
}

// optional .apollo.localization.Pose pose = 2;
bool LocalizationEstimate::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationEstimate::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationEstimate::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationEstimate::clear_pose() {
  if (pose_ != NULL) pose_->::apollo::localization::Pose::Clear();
  clear_has_pose();
}
const ::apollo::localization::Pose& LocalizationEstimate::pose() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::apollo::localization::Pose* LocalizationEstimate::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.pose)
  return pose_;
}
::apollo::localization::Pose* LocalizationEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.pose)
  clear_has_pose();
  ::apollo::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_pose(::apollo::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.pose)
}

// optional .apollo.localization.Uncertainty uncertainty = 3;
bool LocalizationEstimate::has_uncertainty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationEstimate::set_has_uncertainty() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationEstimate::clear_has_uncertainty() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationEstimate::clear_uncertainty() {
  if (uncertainty_ != NULL) uncertainty_->::apollo::localization::Uncertainty::Clear();
  clear_has_uncertainty();
}
const ::apollo::localization::Uncertainty& LocalizationEstimate::uncertainty() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.uncertainty)
  return uncertainty_ != NULL ? *uncertainty_ : *default_instance_->uncertainty_;
}
::apollo::localization::Uncertainty* LocalizationEstimate::mutable_uncertainty() {
  set_has_uncertainty();
  if (uncertainty_ == NULL) {
    uncertainty_ = new ::apollo::localization::Uncertainty;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.uncertainty)
  return uncertainty_;
}
::apollo::localization::Uncertainty* LocalizationEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.uncertainty)
  clear_has_uncertainty();
  ::apollo::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_uncertainty(::apollo::localization::Uncertainty* uncertainty) {
  delete uncertainty_;
  uncertainty_ = uncertainty;
  if (uncertainty) {
    set_has_uncertainty();
  } else {
    clear_has_uncertainty();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.uncertainty)
}

// optional double measurement_time = 4;
bool LocalizationEstimate::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationEstimate::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationEstimate::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationEstimate::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double LocalizationEstimate::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.measurement_time)
  return measurement_time_;
}
 void LocalizationEstimate::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationEstimate.measurement_time)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
int LocalizationEstimate::trajectory_point_size() const {
  return trajectory_point_.size();
}
void LocalizationEstimate::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::apollo::common::TrajectoryPoint& LocalizationEstimate::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Get(index);
}
::apollo::common::TrajectoryPoint* LocalizationEstimate::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::apollo::common::TrajectoryPoint* LocalizationEstimate::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
LocalizationEstimate::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.LocalizationEstimate.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
LocalizationEstimate::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationStatus::kHeaderFieldNumber;
const int LocalizationStatus::kFusionStatusFieldNumber;
const int LocalizationStatus::kGnssStatusFieldNumber;
const int LocalizationStatus::kLidarStatusFieldNumber;
const int LocalizationStatus::kMeasurementTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationStatus::LocalizationStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.LocalizationStatus)
}

void LocalizationStatus::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

LocalizationStatus::LocalizationStatus(const LocalizationStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationStatus)
}

void LocalizationStatus::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  fusion_status_ = 0;
  gnss_status_ = 0;
  lidar_status_ = 0;
  measurement_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationStatus::~LocalizationStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationStatus)
  SharedDtor();
}

void LocalizationStatus::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void LocalizationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationStatus_descriptor_;
}

const LocalizationStatus& LocalizationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2flocalization_2eproto();
  return *default_instance_;
}

LocalizationStatus* LocalizationStatus::default_instance_ = NULL;

LocalizationStatus* LocalizationStatus::New(::google::protobuf::Arena* arena) const {
  LocalizationStatus* n = new LocalizationStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.LocalizationStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LocalizationStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LocalizationStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(fusion_status_, lidar_status_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LocalizationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.LocalizationStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fusion_status;
        break;
      }

      // optional .apollo.localization.MeasureState fusion_status = 2;
      case 2: {
        if (tag == 16) {
         parse_fusion_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_fusion_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gnss_status;
        break;
      }

      // optional .apollo.localization.MeasureState gnss_status = 3;
      case 3: {
        if (tag == 24) {
         parse_gnss_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_gnss_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lidar_status;
        break;
      }

      // optional .apollo.localization.MeasureState lidar_status = 4;
      case 4: {
        if (tag == 32) {
         parse_lidar_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_lidar_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 5;
      case 5: {
        if (tag == 41) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.LocalizationStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.LocalizationStatus)
  return false;
#undef DO_
}

void LocalizationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.LocalizationStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.MeasureState fusion_status = 2;
  if (has_fusion_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fusion_status(), output);
  }

  // optional .apollo.localization.MeasureState gnss_status = 3;
  if (has_gnss_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_status(), output);
  }

  // optional .apollo.localization.MeasureState lidar_status = 4;
  if (has_lidar_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->lidar_status(), output);
  }

  // optional double measurement_time = 5;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->measurement_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.LocalizationStatus)
}

::google::protobuf::uint8* LocalizationStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.localization.MeasureState fusion_status = 2;
  if (has_fusion_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fusion_status(), target);
  }

  // optional .apollo.localization.MeasureState gnss_status = 3;
  if (has_gnss_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_status(), target);
  }

  // optional .apollo.localization.MeasureState lidar_status = 4;
  if (has_lidar_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->lidar_status(), target);
  }

  // optional double measurement_time = 5;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->measurement_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationStatus)
  return target;
}

int LocalizationStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.LocalizationStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.localization.MeasureState fusion_status = 2;
    if (has_fusion_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fusion_status());
    }

    // optional .apollo.localization.MeasureState gnss_status = 3;
    if (has_gnss_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_status());
    }

    // optional .apollo.localization.MeasureState lidar_status = 4;
    if (has_lidar_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lidar_status());
    }

    // optional double measurement_time = 5;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.LocalizationStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalizationStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.LocalizationStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.LocalizationStatus)
    MergeFrom(*source);
  }
}

void LocalizationStatus::MergeFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.LocalizationStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_fusion_status()) {
      set_fusion_status(from.fusion_status());
    }
    if (from.has_gnss_status()) {
      set_gnss_status(from.gnss_status());
    }
    if (from.has_lidar_status()) {
      set_lidar_status(from.lidar_status());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LocalizationStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationStatus::CopyFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationStatus::IsInitialized() const {

  return true;
}

void LocalizationStatus::Swap(LocalizationStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationStatus::InternalSwap(LocalizationStatus* other) {
  std::swap(header_, other->header_);
  std::swap(fusion_status_, other->fusion_status_);
  std::swap(gnss_status_, other->gnss_status_);
  std::swap(lidar_status_, other->lidar_status_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationStatus_descriptor_;
  metadata.reflection = LocalizationStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationStatus

// optional .apollo.common.Header header = 1;
bool LocalizationStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& LocalizationStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* LocalizationStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationStatus.header)
  return header_;
}
::apollo::common::Header* LocalizationStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationStatus.header)
}

// optional .apollo.localization.MeasureState fusion_status = 2;
bool LocalizationStatus::has_fusion_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationStatus::set_has_fusion_status() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationStatus::clear_has_fusion_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationStatus::clear_fusion_status() {
  fusion_status_ = 0;
  clear_has_fusion_status();
}
 ::apollo::localization::MeasureState LocalizationStatus::fusion_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.fusion_status)
  return static_cast< ::apollo::localization::MeasureState >(fusion_status_);
}
 void LocalizationStatus::set_fusion_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_fusion_status();
  fusion_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.fusion_status)
}

// optional .apollo.localization.MeasureState gnss_status = 3;
bool LocalizationStatus::has_gnss_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationStatus::set_has_gnss_status() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationStatus::clear_has_gnss_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationStatus::clear_gnss_status() {
  gnss_status_ = 0;
  clear_has_gnss_status();
}
 ::apollo::localization::MeasureState LocalizationStatus::gnss_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.gnss_status)
  return static_cast< ::apollo::localization::MeasureState >(gnss_status_);
}
 void LocalizationStatus::set_gnss_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_gnss_status();
  gnss_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.gnss_status)
}

// optional .apollo.localization.MeasureState lidar_status = 4;
bool LocalizationStatus::has_lidar_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationStatus::set_has_lidar_status() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationStatus::clear_has_lidar_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationStatus::clear_lidar_status() {
  lidar_status_ = 0;
  clear_has_lidar_status();
}
 ::apollo::localization::MeasureState LocalizationStatus::lidar_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.lidar_status)
  return static_cast< ::apollo::localization::MeasureState >(lidar_status_);
}
 void LocalizationStatus::set_lidar_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_lidar_status();
  lidar_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.lidar_status)
}

// optional double measurement_time = 5;
bool LocalizationStatus::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalizationStatus::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalizationStatus::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalizationStatus::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double LocalizationStatus::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.measurement_time)
  return measurement_time_;
}
 void LocalizationStatus::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.measurement_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
