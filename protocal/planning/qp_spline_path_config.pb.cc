// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/qp_spline_path_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/qp_spline_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* QpSplinePathConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QpSplinePathConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/qp_spline_path_config.proto");
  GOOGLE_CHECK(file != NULL);
  QpSplinePathConfig_descriptor_ = file->message_type(0);
  static const int QpSplinePathConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, spline_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, max_spline_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, max_constraint_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, time_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, regularization_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, first_spline_weight_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, derivative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, second_derivative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, third_derivative_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, reference_line_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, cross_lane_lateral_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, cross_lane_longitudinal_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, history_path_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, lane_change_mid_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, point_constraint_s_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, lane_change_lateral_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, uturn_speed_limit_),
  };
  QpSplinePathConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QpSplinePathConfig_descriptor_,
      QpSplinePathConfig::default_instance_,
      QpSplinePathConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(QpSplinePathConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplinePathConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QpSplinePathConfig_descriptor_, &QpSplinePathConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fqp_5fspline_5fpath_5fconfig_2eproto() {
  delete QpSplinePathConfig::default_instance_;
  delete QpSplinePathConfig_reflection_;
}

void protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$planning/qp_spline_path_config.proto\022\017"
    "apollo.planning\"\211\005\n\022QpSplinePathConfig\022\027"
    "\n\014spline_order\030\001 \001(\r:\0016\022\035\n\021max_spline_le"
    "ngth\030\002 \001(\001:\00215\022#\n\027max_constraint_interva"
    "l\030\003 \001(\001:\00215\022\034\n\017time_resolution\030\004 \001(\001:\0030."
    "1\022$\n\025regularization_weight\030\005 \001(\001:\0050.001\022"
    "&\n\032first_spline_weight_factor\030\006 \001(\001:\00210\022"
    "\034\n\021derivative_weight\030\007 \001(\001:\0010\022#\n\030second_"
    "derivative_weight\030\010 \001(\001:\0010\022$\n\027third_deri"
    "vative_weight\030\t \001(\001:\003100\022 \n\025reference_li"
    "ne_weight\030\n \001(\001:\0010\022\027\n\nnum_output\030\013 \001(\r:\003"
    "100\022)\n\034cross_lane_lateral_extension\030\014 \001("
    "\001:\0031.2\022-\n!cross_lane_longitudinal_extens"
    "ion\030\r \001(\001:\00250\022\036\n\023history_path_weight\030\016 \001"
    "(\001:\0010\022\036\n\021lane_change_mid_l\030\017 \001(\001:\0030.6\022(\n"
    "\033point_constraint_s_position\030\020 \001(\001:\003110\022"
    "$\n\031lane_change_lateral_shift\030\021 \001(\001:\0011\022\034\n"
    "\021uturn_speed_limit\030\022 \001(\001:\0015", 707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/qp_spline_path_config.proto", &protobuf_RegisterTypes);
  QpSplinePathConfig::default_instance_ = new QpSplinePathConfig();
  QpSplinePathConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fqp_5fspline_5fpath_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fqp_5fspline_5fpath_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fqp_5fspline_5fpath_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fqp_5fspline_5fpath_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplinePathConfig::kSplineOrderFieldNumber;
const int QpSplinePathConfig::kMaxSplineLengthFieldNumber;
const int QpSplinePathConfig::kMaxConstraintIntervalFieldNumber;
const int QpSplinePathConfig::kTimeResolutionFieldNumber;
const int QpSplinePathConfig::kRegularizationWeightFieldNumber;
const int QpSplinePathConfig::kFirstSplineWeightFactorFieldNumber;
const int QpSplinePathConfig::kDerivativeWeightFieldNumber;
const int QpSplinePathConfig::kSecondDerivativeWeightFieldNumber;
const int QpSplinePathConfig::kThirdDerivativeWeightFieldNumber;
const int QpSplinePathConfig::kReferenceLineWeightFieldNumber;
const int QpSplinePathConfig::kNumOutputFieldNumber;
const int QpSplinePathConfig::kCrossLaneLateralExtensionFieldNumber;
const int QpSplinePathConfig::kCrossLaneLongitudinalExtensionFieldNumber;
const int QpSplinePathConfig::kHistoryPathWeightFieldNumber;
const int QpSplinePathConfig::kLaneChangeMidLFieldNumber;
const int QpSplinePathConfig::kPointConstraintSPositionFieldNumber;
const int QpSplinePathConfig::kLaneChangeLateralShiftFieldNumber;
const int QpSplinePathConfig::kUturnSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplinePathConfig::QpSplinePathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QpSplinePathConfig)
}

void QpSplinePathConfig::InitAsDefaultInstance() {
}

QpSplinePathConfig::QpSplinePathConfig(const QpSplinePathConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplinePathConfig)
}

void QpSplinePathConfig::SharedCtor() {
  _cached_size_ = 0;
  spline_order_ = 6u;
  max_spline_length_ = 15;
  max_constraint_interval_ = 15;
  time_resolution_ = 0.1;
  regularization_weight_ = 0.001;
  first_spline_weight_factor_ = 10;
  derivative_weight_ = 0;
  second_derivative_weight_ = 0;
  third_derivative_weight_ = 100;
  reference_line_weight_ = 0;
  num_output_ = 100u;
  cross_lane_lateral_extension_ = 1.2;
  cross_lane_longitudinal_extension_ = 50;
  history_path_weight_ = 0;
  lane_change_mid_l_ = 0.6;
  point_constraint_s_position_ = 110;
  lane_change_lateral_shift_ = 1;
  uturn_speed_limit_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QpSplinePathConfig::~QpSplinePathConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplinePathConfig)
  SharedDtor();
}

void QpSplinePathConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QpSplinePathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpSplinePathConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QpSplinePathConfig_descriptor_;
}

const QpSplinePathConfig& QpSplinePathConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fqp_5fspline_5fpath_5fconfig_2eproto();
  return *default_instance_;
}

QpSplinePathConfig* QpSplinePathConfig::default_instance_ = NULL;

QpSplinePathConfig* QpSplinePathConfig::New(::google::protobuf::Arena* arena) const {
  QpSplinePathConfig* n = new QpSplinePathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpSplinePathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplinePathConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QpSplinePathConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QpSplinePathConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(derivative_weight_, second_derivative_weight_);
    spline_order_ = 6u;
    max_spline_length_ = 15;
    max_constraint_interval_ = 15;
    time_resolution_ = 0.1;
    regularization_weight_ = 0.001;
    first_spline_weight_factor_ = 10;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    third_derivative_weight_ = 100;
    reference_line_weight_ = 0;
    num_output_ = 100u;
    cross_lane_lateral_extension_ = 1.2;
    cross_lane_longitudinal_extension_ = 50;
    history_path_weight_ = 0;
    lane_change_mid_l_ = 0.6;
    point_constraint_s_position_ = 110;
  }
  if (_has_bits_[16 / 32] & 196608u) {
    lane_change_lateral_shift_ = 1;
    uturn_speed_limit_ = 5;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QpSplinePathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.QpSplinePathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spline_order = 1 [default = 6];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
          set_has_spline_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max_spline_length;
        break;
      }

      // optional double max_spline_length = 2 [default = 15];
      case 2: {
        if (tag == 17) {
         parse_max_spline_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_spline_length_)));
          set_has_max_spline_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_constraint_interval;
        break;
      }

      // optional double max_constraint_interval = 3 [default = 15];
      case 3: {
        if (tag == 25) {
         parse_max_constraint_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_interval_)));
          set_has_max_constraint_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_time_resolution;
        break;
      }

      // optional double time_resolution = 4 [default = 0.1];
      case 4: {
        if (tag == 33) {
         parse_time_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_resolution_)));
          set_has_time_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_regularization_weight;
        break;
      }

      // optional double regularization_weight = 5 [default = 0.001];
      case 5: {
        if (tag == 41) {
         parse_regularization_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
          set_has_regularization_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_first_spline_weight_factor;
        break;
      }

      // optional double first_spline_weight_factor = 6 [default = 10];
      case 6: {
        if (tag == 49) {
         parse_first_spline_weight_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &first_spline_weight_factor_)));
          set_has_first_spline_weight_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_derivative_weight;
        break;
      }

      // optional double derivative_weight = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_derivative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &derivative_weight_)));
          set_has_derivative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_second_derivative_weight;
        break;
      }

      // optional double second_derivative_weight = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_second_derivative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_derivative_weight_)));
          set_has_second_derivative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_third_derivative_weight;
        break;
      }

      // optional double third_derivative_weight = 9 [default = 100];
      case 9: {
        if (tag == 73) {
         parse_third_derivative_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &third_derivative_weight_)));
          set_has_third_derivative_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_reference_line_weight;
        break;
      }

      // optional double reference_line_weight = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_reference_line_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_line_weight_)));
          set_has_reference_line_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num_output;
        break;
      }

      // optional uint32 num_output = 11 [default = 100];
      case 11: {
        if (tag == 88) {
         parse_num_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_cross_lane_lateral_extension;
        break;
      }

      // optional double cross_lane_lateral_extension = 12 [default = 1.2];
      case 12: {
        if (tag == 97) {
         parse_cross_lane_lateral_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_lane_lateral_extension_)));
          set_has_cross_lane_lateral_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_cross_lane_longitudinal_extension;
        break;
      }

      // optional double cross_lane_longitudinal_extension = 13 [default = 50];
      case 13: {
        if (tag == 105) {
         parse_cross_lane_longitudinal_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_lane_longitudinal_extension_)));
          set_has_cross_lane_longitudinal_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_history_path_weight;
        break;
      }

      // optional double history_path_weight = 14 [default = 0];
      case 14: {
        if (tag == 113) {
         parse_history_path_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &history_path_weight_)));
          set_has_history_path_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_lane_change_mid_l;
        break;
      }

      // optional double lane_change_mid_l = 15 [default = 0.6];
      case 15: {
        if (tag == 121) {
         parse_lane_change_mid_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_change_mid_l_)));
          set_has_lane_change_mid_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_point_constraint_s_position;
        break;
      }

      // optional double point_constraint_s_position = 16 [default = 110];
      case 16: {
        if (tag == 129) {
         parse_point_constraint_s_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_constraint_s_position_)));
          set_has_point_constraint_s_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_lane_change_lateral_shift;
        break;
      }

      // optional double lane_change_lateral_shift = 17 [default = 1];
      case 17: {
        if (tag == 137) {
         parse_lane_change_lateral_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_change_lateral_shift_)));
          set_has_lane_change_lateral_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_uturn_speed_limit;
        break;
      }

      // optional double uturn_speed_limit = 18 [default = 5];
      case 18: {
        if (tag == 145) {
         parse_uturn_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uturn_speed_limit_)));
          set_has_uturn_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.QpSplinePathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.QpSplinePathConfig)
  return false;
#undef DO_
}

void QpSplinePathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.QpSplinePathConfig)
  // optional uint32 spline_order = 1 [default = 6];
  if (has_spline_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spline_order(), output);
  }

  // optional double max_spline_length = 2 [default = 15];
  if (has_max_spline_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_spline_length(), output);
  }

  // optional double max_constraint_interval = 3 [default = 15];
  if (has_max_constraint_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_constraint_interval(), output);
  }

  // optional double time_resolution = 4 [default = 0.1];
  if (has_time_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_resolution(), output);
  }

  // optional double regularization_weight = 5 [default = 0.001];
  if (has_regularization_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->regularization_weight(), output);
  }

  // optional double first_spline_weight_factor = 6 [default = 10];
  if (has_first_spline_weight_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->first_spline_weight_factor(), output);
  }

  // optional double derivative_weight = 7 [default = 0];
  if (has_derivative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->derivative_weight(), output);
  }

  // optional double second_derivative_weight = 8 [default = 0];
  if (has_second_derivative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->second_derivative_weight(), output);
  }

  // optional double third_derivative_weight = 9 [default = 100];
  if (has_third_derivative_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->third_derivative_weight(), output);
  }

  // optional double reference_line_weight = 10 [default = 0];
  if (has_reference_line_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->reference_line_weight(), output);
  }

  // optional uint32 num_output = 11 [default = 100];
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num_output(), output);
  }

  // optional double cross_lane_lateral_extension = 12 [default = 1.2];
  if (has_cross_lane_lateral_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->cross_lane_lateral_extension(), output);
  }

  // optional double cross_lane_longitudinal_extension = 13 [default = 50];
  if (has_cross_lane_longitudinal_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cross_lane_longitudinal_extension(), output);
  }

  // optional double history_path_weight = 14 [default = 0];
  if (has_history_path_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->history_path_weight(), output);
  }

  // optional double lane_change_mid_l = 15 [default = 0.6];
  if (has_lane_change_mid_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lane_change_mid_l(), output);
  }

  // optional double point_constraint_s_position = 16 [default = 110];
  if (has_point_constraint_s_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->point_constraint_s_position(), output);
  }

  // optional double lane_change_lateral_shift = 17 [default = 1];
  if (has_lane_change_lateral_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lane_change_lateral_shift(), output);
  }

  // optional double uturn_speed_limit = 18 [default = 5];
  if (has_uturn_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->uturn_speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.QpSplinePathConfig)
}

::google::protobuf::uint8* QpSplinePathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplinePathConfig)
  // optional uint32 spline_order = 1 [default = 6];
  if (has_spline_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 15];
  if (has_max_spline_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_spline_length(), target);
  }

  // optional double max_constraint_interval = 3 [default = 15];
  if (has_max_constraint_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_constraint_interval(), target);
  }

  // optional double time_resolution = 4 [default = 0.1];
  if (has_time_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_resolution(), target);
  }

  // optional double regularization_weight = 5 [default = 0.001];
  if (has_regularization_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->regularization_weight(), target);
  }

  // optional double first_spline_weight_factor = 6 [default = 10];
  if (has_first_spline_weight_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->first_spline_weight_factor(), target);
  }

  // optional double derivative_weight = 7 [default = 0];
  if (has_derivative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->derivative_weight(), target);
  }

  // optional double second_derivative_weight = 8 [default = 0];
  if (has_second_derivative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 9 [default = 100];
  if (has_third_derivative_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->third_derivative_weight(), target);
  }

  // optional double reference_line_weight = 10 [default = 0];
  if (has_reference_line_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->reference_line_weight(), target);
  }

  // optional uint32 num_output = 11 [default = 100];
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num_output(), target);
  }

  // optional double cross_lane_lateral_extension = 12 [default = 1.2];
  if (has_cross_lane_lateral_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->cross_lane_lateral_extension(), target);
  }

  // optional double cross_lane_longitudinal_extension = 13 [default = 50];
  if (has_cross_lane_longitudinal_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cross_lane_longitudinal_extension(), target);
  }

  // optional double history_path_weight = 14 [default = 0];
  if (has_history_path_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->history_path_weight(), target);
  }

  // optional double lane_change_mid_l = 15 [default = 0.6];
  if (has_lane_change_mid_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lane_change_mid_l(), target);
  }

  // optional double point_constraint_s_position = 16 [default = 110];
  if (has_point_constraint_s_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->point_constraint_s_position(), target);
  }

  // optional double lane_change_lateral_shift = 17 [default = 1];
  if (has_lane_change_lateral_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lane_change_lateral_shift(), target);
  }

  // optional double uturn_speed_limit = 18 [default = 5];
  if (has_uturn_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->uturn_speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplinePathConfig)
  return target;
}

int QpSplinePathConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplinePathConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 spline_order = 1 [default = 6];
    if (has_spline_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_order());
    }

    // optional double max_spline_length = 2 [default = 15];
    if (has_max_spline_length()) {
      total_size += 1 + 8;
    }

    // optional double max_constraint_interval = 3 [default = 15];
    if (has_max_constraint_interval()) {
      total_size += 1 + 8;
    }

    // optional double time_resolution = 4 [default = 0.1];
    if (has_time_resolution()) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 5 [default = 0.001];
    if (has_regularization_weight()) {
      total_size += 1 + 8;
    }

    // optional double first_spline_weight_factor = 6 [default = 10];
    if (has_first_spline_weight_factor()) {
      total_size += 1 + 8;
    }

    // optional double derivative_weight = 7 [default = 0];
    if (has_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional double second_derivative_weight = 8 [default = 0];
    if (has_second_derivative_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double third_derivative_weight = 9 [default = 100];
    if (has_third_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional double reference_line_weight = 10 [default = 0];
    if (has_reference_line_weight()) {
      total_size += 1 + 8;
    }

    // optional uint32 num_output = 11 [default = 100];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional double cross_lane_lateral_extension = 12 [default = 1.2];
    if (has_cross_lane_lateral_extension()) {
      total_size += 1 + 8;
    }

    // optional double cross_lane_longitudinal_extension = 13 [default = 50];
    if (has_cross_lane_longitudinal_extension()) {
      total_size += 1 + 8;
    }

    // optional double history_path_weight = 14 [default = 0];
    if (has_history_path_weight()) {
      total_size += 1 + 8;
    }

    // optional double lane_change_mid_l = 15 [default = 0.6];
    if (has_lane_change_mid_l()) {
      total_size += 1 + 8;
    }

    // optional double point_constraint_s_position = 16 [default = 110];
    if (has_point_constraint_s_position()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double lane_change_lateral_shift = 17 [default = 1];
    if (has_lane_change_lateral_shift()) {
      total_size += 2 + 8;
    }

    // optional double uturn_speed_limit = 18 [default = 5];
    if (has_uturn_speed_limit()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpSplinePathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QpSplinePathConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QpSplinePathConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplinePathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QpSplinePathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QpSplinePathConfig)
    MergeFrom(*source);
  }
}

void QpSplinePathConfig::MergeFrom(const QpSplinePathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplinePathConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spline_order()) {
      set_spline_order(from.spline_order());
    }
    if (from.has_max_spline_length()) {
      set_max_spline_length(from.max_spline_length());
    }
    if (from.has_max_constraint_interval()) {
      set_max_constraint_interval(from.max_constraint_interval());
    }
    if (from.has_time_resolution()) {
      set_time_resolution(from.time_resolution());
    }
    if (from.has_regularization_weight()) {
      set_regularization_weight(from.regularization_weight());
    }
    if (from.has_first_spline_weight_factor()) {
      set_first_spline_weight_factor(from.first_spline_weight_factor());
    }
    if (from.has_derivative_weight()) {
      set_derivative_weight(from.derivative_weight());
    }
    if (from.has_second_derivative_weight()) {
      set_second_derivative_weight(from.second_derivative_weight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_third_derivative_weight()) {
      set_third_derivative_weight(from.third_derivative_weight());
    }
    if (from.has_reference_line_weight()) {
      set_reference_line_weight(from.reference_line_weight());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_cross_lane_lateral_extension()) {
      set_cross_lane_lateral_extension(from.cross_lane_lateral_extension());
    }
    if (from.has_cross_lane_longitudinal_extension()) {
      set_cross_lane_longitudinal_extension(from.cross_lane_longitudinal_extension());
    }
    if (from.has_history_path_weight()) {
      set_history_path_weight(from.history_path_weight());
    }
    if (from.has_lane_change_mid_l()) {
      set_lane_change_mid_l(from.lane_change_mid_l());
    }
    if (from.has_point_constraint_s_position()) {
      set_point_constraint_s_position(from.point_constraint_s_position());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lane_change_lateral_shift()) {
      set_lane_change_lateral_shift(from.lane_change_lateral_shift());
    }
    if (from.has_uturn_speed_limit()) {
      set_uturn_speed_limit(from.uturn_speed_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QpSplinePathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QpSplinePathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplinePathConfig::CopyFrom(const QpSplinePathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplinePathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplinePathConfig::IsInitialized() const {

  return true;
}

void QpSplinePathConfig::Swap(QpSplinePathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplinePathConfig::InternalSwap(QpSplinePathConfig* other) {
  std::swap(spline_order_, other->spline_order_);
  std::swap(max_spline_length_, other->max_spline_length_);
  std::swap(max_constraint_interval_, other->max_constraint_interval_);
  std::swap(time_resolution_, other->time_resolution_);
  std::swap(regularization_weight_, other->regularization_weight_);
  std::swap(first_spline_weight_factor_, other->first_spline_weight_factor_);
  std::swap(derivative_weight_, other->derivative_weight_);
  std::swap(second_derivative_weight_, other->second_derivative_weight_);
  std::swap(third_derivative_weight_, other->third_derivative_weight_);
  std::swap(reference_line_weight_, other->reference_line_weight_);
  std::swap(num_output_, other->num_output_);
  std::swap(cross_lane_lateral_extension_, other->cross_lane_lateral_extension_);
  std::swap(cross_lane_longitudinal_extension_, other->cross_lane_longitudinal_extension_);
  std::swap(history_path_weight_, other->history_path_weight_);
  std::swap(lane_change_mid_l_, other->lane_change_mid_l_);
  std::swap(point_constraint_s_position_, other->point_constraint_s_position_);
  std::swap(lane_change_lateral_shift_, other->lane_change_lateral_shift_);
  std::swap(uturn_speed_limit_, other->uturn_speed_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpSplinePathConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QpSplinePathConfig_descriptor_;
  metadata.reflection = QpSplinePathConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplinePathConfig

// optional uint32 spline_order = 1 [default = 6];
bool QpSplinePathConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QpSplinePathConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000001u;
}
void QpSplinePathConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000001u;
}
void QpSplinePathConfig::clear_spline_order() {
  spline_order_ = 6u;
  clear_has_spline_order();
}
 ::google::protobuf::uint32 QpSplinePathConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.spline_order)
  return spline_order_;
}
 void QpSplinePathConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 15];
bool QpSplinePathConfig::has_max_spline_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QpSplinePathConfig::set_has_max_spline_length() {
  _has_bits_[0] |= 0x00000002u;
}
void QpSplinePathConfig::clear_has_max_spline_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void QpSplinePathConfig::clear_max_spline_length() {
  max_spline_length_ = 15;
  clear_has_max_spline_length();
}
 double QpSplinePathConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.max_spline_length)
  return max_spline_length_;
}
 void QpSplinePathConfig::set_max_spline_length(double value) {
  set_has_max_spline_length();
  max_spline_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.max_spline_length)
}

// optional double max_constraint_interval = 3 [default = 15];
bool QpSplinePathConfig::has_max_constraint_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QpSplinePathConfig::set_has_max_constraint_interval() {
  _has_bits_[0] |= 0x00000004u;
}
void QpSplinePathConfig::clear_has_max_constraint_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
void QpSplinePathConfig::clear_max_constraint_interval() {
  max_constraint_interval_ = 15;
  clear_has_max_constraint_interval();
}
 double QpSplinePathConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.max_constraint_interval)
  return max_constraint_interval_;
}
 void QpSplinePathConfig::set_max_constraint_interval(double value) {
  set_has_max_constraint_interval();
  max_constraint_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.max_constraint_interval)
}

// optional double time_resolution = 4 [default = 0.1];
bool QpSplinePathConfig::has_time_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QpSplinePathConfig::set_has_time_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
void QpSplinePathConfig::clear_has_time_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
void QpSplinePathConfig::clear_time_resolution() {
  time_resolution_ = 0.1;
  clear_has_time_resolution();
}
 double QpSplinePathConfig::time_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.time_resolution)
  return time_resolution_;
}
 void QpSplinePathConfig::set_time_resolution(double value) {
  set_has_time_resolution();
  time_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.time_resolution)
}

// optional double regularization_weight = 5 [default = 0.001];
bool QpSplinePathConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QpSplinePathConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void QpSplinePathConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void QpSplinePathConfig::clear_regularization_weight() {
  regularization_weight_ = 0.001;
  clear_has_regularization_weight();
}
 double QpSplinePathConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.regularization_weight)
  return regularization_weight_;
}
 void QpSplinePathConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.regularization_weight)
}

// optional double first_spline_weight_factor = 6 [default = 10];
bool QpSplinePathConfig::has_first_spline_weight_factor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QpSplinePathConfig::set_has_first_spline_weight_factor() {
  _has_bits_[0] |= 0x00000020u;
}
void QpSplinePathConfig::clear_has_first_spline_weight_factor() {
  _has_bits_[0] &= ~0x00000020u;
}
void QpSplinePathConfig::clear_first_spline_weight_factor() {
  first_spline_weight_factor_ = 10;
  clear_has_first_spline_weight_factor();
}
 double QpSplinePathConfig::first_spline_weight_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.first_spline_weight_factor)
  return first_spline_weight_factor_;
}
 void QpSplinePathConfig::set_first_spline_weight_factor(double value) {
  set_has_first_spline_weight_factor();
  first_spline_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.first_spline_weight_factor)
}

// optional double derivative_weight = 7 [default = 0];
bool QpSplinePathConfig::has_derivative_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QpSplinePathConfig::set_has_derivative_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void QpSplinePathConfig::clear_has_derivative_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void QpSplinePathConfig::clear_derivative_weight() {
  derivative_weight_ = 0;
  clear_has_derivative_weight();
}
 double QpSplinePathConfig::derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.derivative_weight)
  return derivative_weight_;
}
 void QpSplinePathConfig::set_derivative_weight(double value) {
  set_has_derivative_weight();
  derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.derivative_weight)
}

// optional double second_derivative_weight = 8 [default = 0];
bool QpSplinePathConfig::has_second_derivative_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QpSplinePathConfig::set_has_second_derivative_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void QpSplinePathConfig::clear_has_second_derivative_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void QpSplinePathConfig::clear_second_derivative_weight() {
  second_derivative_weight_ = 0;
  clear_has_second_derivative_weight();
}
 double QpSplinePathConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.second_derivative_weight)
  return second_derivative_weight_;
}
 void QpSplinePathConfig::set_second_derivative_weight(double value) {
  set_has_second_derivative_weight();
  second_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 9 [default = 100];
bool QpSplinePathConfig::has_third_derivative_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QpSplinePathConfig::set_has_third_derivative_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void QpSplinePathConfig::clear_has_third_derivative_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void QpSplinePathConfig::clear_third_derivative_weight() {
  third_derivative_weight_ = 100;
  clear_has_third_derivative_weight();
}
 double QpSplinePathConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.third_derivative_weight)
  return third_derivative_weight_;
}
 void QpSplinePathConfig::set_third_derivative_weight(double value) {
  set_has_third_derivative_weight();
  third_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.third_derivative_weight)
}

// optional double reference_line_weight = 10 [default = 0];
bool QpSplinePathConfig::has_reference_line_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QpSplinePathConfig::set_has_reference_line_weight() {
  _has_bits_[0] |= 0x00000200u;
}
void QpSplinePathConfig::clear_has_reference_line_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
void QpSplinePathConfig::clear_reference_line_weight() {
  reference_line_weight_ = 0;
  clear_has_reference_line_weight();
}
 double QpSplinePathConfig::reference_line_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.reference_line_weight)
  return reference_line_weight_;
}
 void QpSplinePathConfig::set_reference_line_weight(double value) {
  set_has_reference_line_weight();
  reference_line_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.reference_line_weight)
}

// optional uint32 num_output = 11 [default = 100];
bool QpSplinePathConfig::has_num_output() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void QpSplinePathConfig::set_has_num_output() {
  _has_bits_[0] |= 0x00000400u;
}
void QpSplinePathConfig::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000400u;
}
void QpSplinePathConfig::clear_num_output() {
  num_output_ = 100u;
  clear_has_num_output();
}
 ::google::protobuf::uint32 QpSplinePathConfig::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.num_output)
  return num_output_;
}
 void QpSplinePathConfig::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.num_output)
}

// optional double cross_lane_lateral_extension = 12 [default = 1.2];
bool QpSplinePathConfig::has_cross_lane_lateral_extension() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void QpSplinePathConfig::set_has_cross_lane_lateral_extension() {
  _has_bits_[0] |= 0x00000800u;
}
void QpSplinePathConfig::clear_has_cross_lane_lateral_extension() {
  _has_bits_[0] &= ~0x00000800u;
}
void QpSplinePathConfig::clear_cross_lane_lateral_extension() {
  cross_lane_lateral_extension_ = 1.2;
  clear_has_cross_lane_lateral_extension();
}
 double QpSplinePathConfig::cross_lane_lateral_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.cross_lane_lateral_extension)
  return cross_lane_lateral_extension_;
}
 void QpSplinePathConfig::set_cross_lane_lateral_extension(double value) {
  set_has_cross_lane_lateral_extension();
  cross_lane_lateral_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.cross_lane_lateral_extension)
}

// optional double cross_lane_longitudinal_extension = 13 [default = 50];
bool QpSplinePathConfig::has_cross_lane_longitudinal_extension() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void QpSplinePathConfig::set_has_cross_lane_longitudinal_extension() {
  _has_bits_[0] |= 0x00001000u;
}
void QpSplinePathConfig::clear_has_cross_lane_longitudinal_extension() {
  _has_bits_[0] &= ~0x00001000u;
}
void QpSplinePathConfig::clear_cross_lane_longitudinal_extension() {
  cross_lane_longitudinal_extension_ = 50;
  clear_has_cross_lane_longitudinal_extension();
}
 double QpSplinePathConfig::cross_lane_longitudinal_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.cross_lane_longitudinal_extension)
  return cross_lane_longitudinal_extension_;
}
 void QpSplinePathConfig::set_cross_lane_longitudinal_extension(double value) {
  set_has_cross_lane_longitudinal_extension();
  cross_lane_longitudinal_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.cross_lane_longitudinal_extension)
}

// optional double history_path_weight = 14 [default = 0];
bool QpSplinePathConfig::has_history_path_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void QpSplinePathConfig::set_has_history_path_weight() {
  _has_bits_[0] |= 0x00002000u;
}
void QpSplinePathConfig::clear_has_history_path_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
void QpSplinePathConfig::clear_history_path_weight() {
  history_path_weight_ = 0;
  clear_has_history_path_weight();
}
 double QpSplinePathConfig::history_path_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.history_path_weight)
  return history_path_weight_;
}
 void QpSplinePathConfig::set_history_path_weight(double value) {
  set_has_history_path_weight();
  history_path_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.history_path_weight)
}

// optional double lane_change_mid_l = 15 [default = 0.6];
bool QpSplinePathConfig::has_lane_change_mid_l() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void QpSplinePathConfig::set_has_lane_change_mid_l() {
  _has_bits_[0] |= 0x00004000u;
}
void QpSplinePathConfig::clear_has_lane_change_mid_l() {
  _has_bits_[0] &= ~0x00004000u;
}
void QpSplinePathConfig::clear_lane_change_mid_l() {
  lane_change_mid_l_ = 0.6;
  clear_has_lane_change_mid_l();
}
 double QpSplinePathConfig::lane_change_mid_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.lane_change_mid_l)
  return lane_change_mid_l_;
}
 void QpSplinePathConfig::set_lane_change_mid_l(double value) {
  set_has_lane_change_mid_l();
  lane_change_mid_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.lane_change_mid_l)
}

// optional double point_constraint_s_position = 16 [default = 110];
bool QpSplinePathConfig::has_point_constraint_s_position() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void QpSplinePathConfig::set_has_point_constraint_s_position() {
  _has_bits_[0] |= 0x00008000u;
}
void QpSplinePathConfig::clear_has_point_constraint_s_position() {
  _has_bits_[0] &= ~0x00008000u;
}
void QpSplinePathConfig::clear_point_constraint_s_position() {
  point_constraint_s_position_ = 110;
  clear_has_point_constraint_s_position();
}
 double QpSplinePathConfig::point_constraint_s_position() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.point_constraint_s_position)
  return point_constraint_s_position_;
}
 void QpSplinePathConfig::set_point_constraint_s_position(double value) {
  set_has_point_constraint_s_position();
  point_constraint_s_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.point_constraint_s_position)
}

// optional double lane_change_lateral_shift = 17 [default = 1];
bool QpSplinePathConfig::has_lane_change_lateral_shift() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void QpSplinePathConfig::set_has_lane_change_lateral_shift() {
  _has_bits_[0] |= 0x00010000u;
}
void QpSplinePathConfig::clear_has_lane_change_lateral_shift() {
  _has_bits_[0] &= ~0x00010000u;
}
void QpSplinePathConfig::clear_lane_change_lateral_shift() {
  lane_change_lateral_shift_ = 1;
  clear_has_lane_change_lateral_shift();
}
 double QpSplinePathConfig::lane_change_lateral_shift() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.lane_change_lateral_shift)
  return lane_change_lateral_shift_;
}
 void QpSplinePathConfig::set_lane_change_lateral_shift(double value) {
  set_has_lane_change_lateral_shift();
  lane_change_lateral_shift_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.lane_change_lateral_shift)
}

// optional double uturn_speed_limit = 18 [default = 5];
bool QpSplinePathConfig::has_uturn_speed_limit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void QpSplinePathConfig::set_has_uturn_speed_limit() {
  _has_bits_[0] |= 0x00020000u;
}
void QpSplinePathConfig::clear_has_uturn_speed_limit() {
  _has_bits_[0] &= ~0x00020000u;
}
void QpSplinePathConfig::clear_uturn_speed_limit() {
  uturn_speed_limit_ = 5;
  clear_has_uturn_speed_limit();
}
 double QpSplinePathConfig::uturn_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.uturn_speed_limit)
  return uturn_speed_limit_;
}
 void QpSplinePathConfig::set_uturn_speed_limit(double value) {
  set_has_uturn_speed_limit();
  uturn_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.uturn_speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
