// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/poly_st_speed_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/poly_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* PolyStSpeedConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolyStSpeedConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/poly_st_speed_config.proto");
  GOOGLE_CHECK(file != NULL);
  PolyStSpeedConfig_descriptor_ = file->message_type(0);
  static const int PolyStSpeedConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, total_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, preferred_accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, preferred_decel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, max_accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, min_decel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, speed_limit_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, speed_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, jerk_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, obstacle_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, unblocking_obstacle_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, st_boundary_config_),
  };
  PolyStSpeedConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PolyStSpeedConfig_descriptor_,
      PolyStSpeedConfig::default_instance_,
      PolyStSpeedConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PolyStSpeedConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PolyStSpeedConfig_descriptor_, &PolyStSpeedConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto() {
  delete PolyStSpeedConfig::default_instance_;
  delete PolyStSpeedConfig_reflection_;
}

void protobuf_AddDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::planning::protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#planning/poly_st_speed_config.proto\022\017a"
    "pollo.planning\032!planning/st_boundary_con"
    "fig.proto\"\333\002\n\021PolyStSpeedConfig\022\031\n\021total"
    "_path_length\030\001 \001(\001\022\022\n\ntotal_time\030\002 \001(\001\022\027"
    "\n\017preferred_accel\030\003 \001(\001\022\027\n\017preferred_dec"
    "el\030\004 \001(\001\022\021\n\tmax_accel\030\005 \001(\001\022\021\n\tmin_decel"
    "\030\006 \001(\001\022\032\n\022speed_limit_buffer\030\007 \001(\001\022\024\n\014sp"
    "eed_weight\030\010 \001(\001\022\023\n\013jerk_weight\030\t \001(\001\022\027\n"
    "\017obstacle_weight\030\n \001(\001\022 \n\030unblocking_obs"
    "tacle_cost\030\013 \001(\001\022=\n\022st_boundary_config\030\014"
    " \001(\0132!.apollo.planning.StBoundaryConfig", 439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/poly_st_speed_config.proto", &protobuf_RegisterTypes);
  PolyStSpeedConfig::default_instance_ = new PolyStSpeedConfig();
  PolyStSpeedConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolyStSpeedConfig::kTotalPathLengthFieldNumber;
const int PolyStSpeedConfig::kTotalTimeFieldNumber;
const int PolyStSpeedConfig::kPreferredAccelFieldNumber;
const int PolyStSpeedConfig::kPreferredDecelFieldNumber;
const int PolyStSpeedConfig::kMaxAccelFieldNumber;
const int PolyStSpeedConfig::kMinDecelFieldNumber;
const int PolyStSpeedConfig::kSpeedLimitBufferFieldNumber;
const int PolyStSpeedConfig::kSpeedWeightFieldNumber;
const int PolyStSpeedConfig::kJerkWeightFieldNumber;
const int PolyStSpeedConfig::kObstacleWeightFieldNumber;
const int PolyStSpeedConfig::kUnblockingObstacleCostFieldNumber;
const int PolyStSpeedConfig::kStBoundaryConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolyStSpeedConfig::PolyStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PolyStSpeedConfig)
}

void PolyStSpeedConfig::InitAsDefaultInstance() {
  st_boundary_config_ = const_cast< ::apollo::planning::StBoundaryConfig*>(&::apollo::planning::StBoundaryConfig::default_instance());
}

PolyStSpeedConfig::PolyStSpeedConfig(const PolyStSpeedConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PolyStSpeedConfig)
}

void PolyStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  total_path_length_ = 0;
  total_time_ = 0;
  preferred_accel_ = 0;
  preferred_decel_ = 0;
  max_accel_ = 0;
  min_decel_ = 0;
  speed_limit_buffer_ = 0;
  speed_weight_ = 0;
  jerk_weight_ = 0;
  obstacle_weight_ = 0;
  unblocking_obstacle_cost_ = 0;
  st_boundary_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolyStSpeedConfig::~PolyStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PolyStSpeedConfig)
  SharedDtor();
}

void PolyStSpeedConfig::SharedDtor() {
  if (this != default_instance_) {
    delete st_boundary_config_;
  }
}

void PolyStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolyStSpeedConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolyStSpeedConfig_descriptor_;
}

const PolyStSpeedConfig& PolyStSpeedConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fpoly_5fst_5fspeed_5fconfig_2eproto();
  return *default_instance_;
}

PolyStSpeedConfig* PolyStSpeedConfig::default_instance_ = NULL;

PolyStSpeedConfig* PolyStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  PolyStSpeedConfig* n = new PolyStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolyStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PolyStSpeedConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PolyStSpeedConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PolyStSpeedConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(total_path_length_, speed_weight_);
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(jerk_weight_, unblocking_obstacle_cost_);
    if (has_st_boundary_config()) {
      if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PolyStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PolyStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_path_length = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
          set_has_total_path_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_time;
        break;
      }

      // optional double total_time = 2;
      case 2: {
        if (tag == 17) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_preferred_accel;
        break;
      }

      // optional double preferred_accel = 3;
      case 3: {
        if (tag == 25) {
         parse_preferred_accel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_accel_)));
          set_has_preferred_accel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_preferred_decel;
        break;
      }

      // optional double preferred_decel = 4;
      case 4: {
        if (tag == 33) {
         parse_preferred_decel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_decel_)));
          set_has_preferred_decel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max_accel;
        break;
      }

      // optional double max_accel = 5;
      case 5: {
        if (tag == 41) {
         parse_max_accel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_accel_)));
          set_has_max_accel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min_decel;
        break;
      }

      // optional double min_decel = 6;
      case 6: {
        if (tag == 49) {
         parse_min_decel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_decel_)));
          set_has_min_decel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_speed_limit_buffer;
        break;
      }

      // optional double speed_limit_buffer = 7;
      case 7: {
        if (tag == 57) {
         parse_speed_limit_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_buffer_)));
          set_has_speed_limit_buffer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_speed_weight;
        break;
      }

      // optional double speed_weight = 8;
      case 8: {
        if (tag == 65) {
         parse_speed_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_weight_)));
          set_has_speed_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_jerk_weight;
        break;
      }

      // optional double jerk_weight = 9;
      case 9: {
        if (tag == 73) {
         parse_jerk_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
          set_has_jerk_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_obstacle_weight;
        break;
      }

      // optional double obstacle_weight = 10;
      case 10: {
        if (tag == 81) {
         parse_obstacle_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
          set_has_obstacle_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_unblocking_obstacle_cost;
        break;
      }

      // optional double unblocking_obstacle_cost = 11;
      case 11: {
        if (tag == 89) {
         parse_unblocking_obstacle_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unblocking_obstacle_cost_)));
          set_has_unblocking_obstacle_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_st_boundary_config;
        break;
      }

      // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
      case 12: {
        if (tag == 98) {
         parse_st_boundary_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st_boundary_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PolyStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PolyStSpeedConfig)
  return false;
#undef DO_
}

void PolyStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PolyStSpeedConfig)
  // optional double total_path_length = 1;
  if (has_total_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_path_length(), output);
  }

  // optional double total_time = 2;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time(), output);
  }

  // optional double preferred_accel = 3;
  if (has_preferred_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->preferred_accel(), output);
  }

  // optional double preferred_decel = 4;
  if (has_preferred_decel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preferred_decel(), output);
  }

  // optional double max_accel = 5;
  if (has_max_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_accel(), output);
  }

  // optional double min_decel = 6;
  if (has_min_decel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_decel(), output);
  }

  // optional double speed_limit_buffer = 7;
  if (has_speed_limit_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed_limit_buffer(), output);
  }

  // optional double speed_weight = 8;
  if (has_speed_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->speed_weight(), output);
  }

  // optional double jerk_weight = 9;
  if (has_jerk_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->jerk_weight(), output);
  }

  // optional double obstacle_weight = 10;
  if (has_obstacle_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->obstacle_weight(), output);
  }

  // optional double unblocking_obstacle_cost = 11;
  if (has_unblocking_obstacle_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->unblocking_obstacle_cost(), output);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
  if (has_st_boundary_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->st_boundary_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PolyStSpeedConfig)
}

::google::protobuf::uint8* PolyStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PolyStSpeedConfig)
  // optional double total_path_length = 1;
  if (has_total_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_path_length(), target);
  }

  // optional double total_time = 2;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time(), target);
  }

  // optional double preferred_accel = 3;
  if (has_preferred_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->preferred_accel(), target);
  }

  // optional double preferred_decel = 4;
  if (has_preferred_decel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preferred_decel(), target);
  }

  // optional double max_accel = 5;
  if (has_max_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_accel(), target);
  }

  // optional double min_decel = 6;
  if (has_min_decel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_decel(), target);
  }

  // optional double speed_limit_buffer = 7;
  if (has_speed_limit_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->speed_limit_buffer(), target);
  }

  // optional double speed_weight = 8;
  if (has_speed_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->speed_weight(), target);
  }

  // optional double jerk_weight = 9;
  if (has_jerk_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->jerk_weight(), target);
  }

  // optional double obstacle_weight = 10;
  if (has_obstacle_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->obstacle_weight(), target);
  }

  // optional double unblocking_obstacle_cost = 11;
  if (has_unblocking_obstacle_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->unblocking_obstacle_cost(), target);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
  if (has_st_boundary_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->st_boundary_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PolyStSpeedConfig)
  return target;
}

int PolyStSpeedConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PolyStSpeedConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double total_path_length = 1;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional double preferred_accel = 3;
    if (has_preferred_accel()) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 4;
    if (has_preferred_decel()) {
      total_size += 1 + 8;
    }

    // optional double max_accel = 5;
    if (has_max_accel()) {
      total_size += 1 + 8;
    }

    // optional double min_decel = 6;
    if (has_min_decel()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit_buffer = 7;
    if (has_speed_limit_buffer()) {
      total_size += 1 + 8;
    }

    // optional double speed_weight = 8;
    if (has_speed_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double jerk_weight = 9;
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 10;
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

    // optional double unblocking_obstacle_cost = 11;
    if (has_unblocking_obstacle_cost()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
    if (has_st_boundary_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->st_boundary_config_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolyStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PolyStSpeedConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PolyStSpeedConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PolyStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PolyStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PolyStSpeedConfig)
    MergeFrom(*source);
  }
}

void PolyStSpeedConfig::MergeFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PolyStSpeedConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_path_length()) {
      set_total_path_length(from.total_path_length());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_preferred_accel()) {
      set_preferred_accel(from.preferred_accel());
    }
    if (from.has_preferred_decel()) {
      set_preferred_decel(from.preferred_decel());
    }
    if (from.has_max_accel()) {
      set_max_accel(from.max_accel());
    }
    if (from.has_min_decel()) {
      set_min_decel(from.min_decel());
    }
    if (from.has_speed_limit_buffer()) {
      set_speed_limit_buffer(from.speed_limit_buffer());
    }
    if (from.has_speed_weight()) {
      set_speed_weight(from.speed_weight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jerk_weight()) {
      set_jerk_weight(from.jerk_weight());
    }
    if (from.has_obstacle_weight()) {
      set_obstacle_weight(from.obstacle_weight());
    }
    if (from.has_unblocking_obstacle_cost()) {
      set_unblocking_obstacle_cost(from.unblocking_obstacle_cost());
    }
    if (from.has_st_boundary_config()) {
      mutable_st_boundary_config()->::apollo::planning::StBoundaryConfig::MergeFrom(from.st_boundary_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PolyStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PolyStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolyStSpeedConfig::CopyFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PolyStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyStSpeedConfig::IsInitialized() const {

  return true;
}

void PolyStSpeedConfig::Swap(PolyStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolyStSpeedConfig::InternalSwap(PolyStSpeedConfig* other) {
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_time_, other->total_time_);
  std::swap(preferred_accel_, other->preferred_accel_);
  std::swap(preferred_decel_, other->preferred_decel_);
  std::swap(max_accel_, other->max_accel_);
  std::swap(min_decel_, other->min_decel_);
  std::swap(speed_limit_buffer_, other->speed_limit_buffer_);
  std::swap(speed_weight_, other->speed_weight_);
  std::swap(jerk_weight_, other->jerk_weight_);
  std::swap(obstacle_weight_, other->obstacle_weight_);
  std::swap(unblocking_obstacle_cost_, other->unblocking_obstacle_cost_);
  std::swap(st_boundary_config_, other->st_boundary_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolyStSpeedConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolyStSpeedConfig_descriptor_;
  metadata.reflection = PolyStSpeedConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolyStSpeedConfig

// optional double total_path_length = 1;
bool PolyStSpeedConfig::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolyStSpeedConfig::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000001u;
}
void PolyStSpeedConfig::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolyStSpeedConfig::clear_total_path_length() {
  total_path_length_ = 0;
  clear_has_total_path_length();
}
 double PolyStSpeedConfig::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.total_path_length)
  return total_path_length_;
}
 void PolyStSpeedConfig::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.total_path_length)
}

// optional double total_time = 2;
bool PolyStSpeedConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolyStSpeedConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
void PolyStSpeedConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolyStSpeedConfig::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
 double PolyStSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.total_time)
  return total_time_;
}
 void PolyStSpeedConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.total_time)
}

// optional double preferred_accel = 3;
bool PolyStSpeedConfig::has_preferred_accel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolyStSpeedConfig::set_has_preferred_accel() {
  _has_bits_[0] |= 0x00000004u;
}
void PolyStSpeedConfig::clear_has_preferred_accel() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolyStSpeedConfig::clear_preferred_accel() {
  preferred_accel_ = 0;
  clear_has_preferred_accel();
}
 double PolyStSpeedConfig::preferred_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.preferred_accel)
  return preferred_accel_;
}
 void PolyStSpeedConfig::set_preferred_accel(double value) {
  set_has_preferred_accel();
  preferred_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.preferred_accel)
}

// optional double preferred_decel = 4;
bool PolyStSpeedConfig::has_preferred_decel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolyStSpeedConfig::set_has_preferred_decel() {
  _has_bits_[0] |= 0x00000008u;
}
void PolyStSpeedConfig::clear_has_preferred_decel() {
  _has_bits_[0] &= ~0x00000008u;
}
void PolyStSpeedConfig::clear_preferred_decel() {
  preferred_decel_ = 0;
  clear_has_preferred_decel();
}
 double PolyStSpeedConfig::preferred_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.preferred_decel)
  return preferred_decel_;
}
 void PolyStSpeedConfig::set_preferred_decel(double value) {
  set_has_preferred_decel();
  preferred_decel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.preferred_decel)
}

// optional double max_accel = 5;
bool PolyStSpeedConfig::has_max_accel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolyStSpeedConfig::set_has_max_accel() {
  _has_bits_[0] |= 0x00000010u;
}
void PolyStSpeedConfig::clear_has_max_accel() {
  _has_bits_[0] &= ~0x00000010u;
}
void PolyStSpeedConfig::clear_max_accel() {
  max_accel_ = 0;
  clear_has_max_accel();
}
 double PolyStSpeedConfig::max_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.max_accel)
  return max_accel_;
}
 void PolyStSpeedConfig::set_max_accel(double value) {
  set_has_max_accel();
  max_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.max_accel)
}

// optional double min_decel = 6;
bool PolyStSpeedConfig::has_min_decel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolyStSpeedConfig::set_has_min_decel() {
  _has_bits_[0] |= 0x00000020u;
}
void PolyStSpeedConfig::clear_has_min_decel() {
  _has_bits_[0] &= ~0x00000020u;
}
void PolyStSpeedConfig::clear_min_decel() {
  min_decel_ = 0;
  clear_has_min_decel();
}
 double PolyStSpeedConfig::min_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.min_decel)
  return min_decel_;
}
 void PolyStSpeedConfig::set_min_decel(double value) {
  set_has_min_decel();
  min_decel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.min_decel)
}

// optional double speed_limit_buffer = 7;
bool PolyStSpeedConfig::has_speed_limit_buffer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolyStSpeedConfig::set_has_speed_limit_buffer() {
  _has_bits_[0] |= 0x00000040u;
}
void PolyStSpeedConfig::clear_has_speed_limit_buffer() {
  _has_bits_[0] &= ~0x00000040u;
}
void PolyStSpeedConfig::clear_speed_limit_buffer() {
  speed_limit_buffer_ = 0;
  clear_has_speed_limit_buffer();
}
 double PolyStSpeedConfig::speed_limit_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.speed_limit_buffer)
  return speed_limit_buffer_;
}
 void PolyStSpeedConfig::set_speed_limit_buffer(double value) {
  set_has_speed_limit_buffer();
  speed_limit_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.speed_limit_buffer)
}

// optional double speed_weight = 8;
bool PolyStSpeedConfig::has_speed_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolyStSpeedConfig::set_has_speed_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void PolyStSpeedConfig::clear_has_speed_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void PolyStSpeedConfig::clear_speed_weight() {
  speed_weight_ = 0;
  clear_has_speed_weight();
}
 double PolyStSpeedConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.speed_weight)
  return speed_weight_;
}
 void PolyStSpeedConfig::set_speed_weight(double value) {
  set_has_speed_weight();
  speed_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.speed_weight)
}

// optional double jerk_weight = 9;
bool PolyStSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolyStSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void PolyStSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void PolyStSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 0;
  clear_has_jerk_weight();
}
 double PolyStSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.jerk_weight)
  return jerk_weight_;
}
 void PolyStSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.jerk_weight)
}

// optional double obstacle_weight = 10;
bool PolyStSpeedConfig::has_obstacle_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PolyStSpeedConfig::set_has_obstacle_weight() {
  _has_bits_[0] |= 0x00000200u;
}
void PolyStSpeedConfig::clear_has_obstacle_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
void PolyStSpeedConfig::clear_obstacle_weight() {
  obstacle_weight_ = 0;
  clear_has_obstacle_weight();
}
 double PolyStSpeedConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.obstacle_weight)
  return obstacle_weight_;
}
 void PolyStSpeedConfig::set_obstacle_weight(double value) {
  set_has_obstacle_weight();
  obstacle_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.obstacle_weight)
}

// optional double unblocking_obstacle_cost = 11;
bool PolyStSpeedConfig::has_unblocking_obstacle_cost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PolyStSpeedConfig::set_has_unblocking_obstacle_cost() {
  _has_bits_[0] |= 0x00000400u;
}
void PolyStSpeedConfig::clear_has_unblocking_obstacle_cost() {
  _has_bits_[0] &= ~0x00000400u;
}
void PolyStSpeedConfig::clear_unblocking_obstacle_cost() {
  unblocking_obstacle_cost_ = 0;
  clear_has_unblocking_obstacle_cost();
}
 double PolyStSpeedConfig::unblocking_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.unblocking_obstacle_cost)
  return unblocking_obstacle_cost_;
}
 void PolyStSpeedConfig::set_unblocking_obstacle_cost(double value) {
  set_has_unblocking_obstacle_cost();
  unblocking_obstacle_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.unblocking_obstacle_cost)
}

// optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
bool PolyStSpeedConfig::has_st_boundary_config() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PolyStSpeedConfig::set_has_st_boundary_config() {
  _has_bits_[0] |= 0x00000800u;
}
void PolyStSpeedConfig::clear_has_st_boundary_config() {
  _has_bits_[0] &= ~0x00000800u;
}
void PolyStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
  clear_has_st_boundary_config();
}
const ::apollo::planning::StBoundaryConfig& PolyStSpeedConfig::st_boundary_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.st_boundary_config)
  return st_boundary_config_ != NULL ? *st_boundary_config_ : *default_instance_->st_boundary_config_;
}
::apollo::planning::StBoundaryConfig* PolyStSpeedConfig::mutable_st_boundary_config() {
  set_has_st_boundary_config();
  if (st_boundary_config_ == NULL) {
    st_boundary_config_ = new ::apollo::planning::StBoundaryConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PolyStSpeedConfig.st_boundary_config)
  return st_boundary_config_;
}
::apollo::planning::StBoundaryConfig* PolyStSpeedConfig::release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PolyStSpeedConfig.st_boundary_config)
  clear_has_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* temp = st_boundary_config_;
  st_boundary_config_ = NULL;
  return temp;
}
void PolyStSpeedConfig::set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config) {
  delete st_boundary_config_;
  st_boundary_config_ = st_boundary_config;
  if (st_boundary_config) {
    set_has_st_boundary_config();
  } else {
    clear_has_st_boundary_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PolyStSpeedConfig.st_boundary_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
