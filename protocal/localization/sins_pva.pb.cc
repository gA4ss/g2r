// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization/sins_pva.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localization/sins_pva.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* IntegSinsPva_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegSinsPva_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_localization_2fsins_5fpva_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_localization_2fsins_5fpva_2eproto() {
  protobuf_AddDesc_localization_2fsins_5fpva_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localization/sins_pva.proto");
  GOOGLE_CHECK(file != NULL);
  IntegSinsPva_descriptor_ = file->message_type(0);
  static const int IntegSinsPva_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, attitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, pva_covar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, init_and_alignment_),
  };
  IntegSinsPva_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntegSinsPva_descriptor_,
      IntegSinsPva::default_instance_,
      IntegSinsPva_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, _has_bits_[0]),
      -1,
      -1,
      sizeof(IntegSinsPva),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegSinsPva, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localization_2fsins_5fpva_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntegSinsPva_descriptor_, &IntegSinsPva::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localization_2fsins_5fpva_2eproto() {
  delete IntegSinsPva::default_instance_;
  delete IntegSinsPva_reflection_;
}

void protobuf_AddDesc_localization_2fsins_5fpva_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_localization_2fsins_5fpva_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033localization/sins_pva.proto\022\023apollo.lo"
    "calization\032\023common/header.proto\032\025common/"
    "geometry.proto\"\347\001\n\014IntegSinsPva\022%\n\006heade"
    "r\030\001 \001(\0132\025.apollo.common.Header\022)\n\010positi"
    "on\030\002 \001(\0132\027.apollo.common.PointLLH\022(\n\010vel"
    "ocity\030\003 \001(\0132\026.apollo.common.Point3D\022(\n\010a"
    "ttitude\030\004 \001(\0132\026.apollo.common.Point3D\022\025\n"
    "\tpva_covar\030\005 \003(\001B\002\020\001\022\032\n\022init_and_alignme"
    "nt\030\006 \001(\010", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization/sins_pva.proto", &protobuf_RegisterTypes);
  IntegSinsPva::default_instance_ = new IntegSinsPva();
  IntegSinsPva::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localization_2fsins_5fpva_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localization_2fsins_5fpva_2eproto {
  StaticDescriptorInitializer_localization_2fsins_5fpva_2eproto() {
    protobuf_AddDesc_localization_2fsins_5fpva_2eproto();
  }
} static_descriptor_initializer_localization_2fsins_5fpva_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegSinsPva::kHeaderFieldNumber;
const int IntegSinsPva::kPositionFieldNumber;
const int IntegSinsPva::kVelocityFieldNumber;
const int IntegSinsPva::kAttitudeFieldNumber;
const int IntegSinsPva::kPvaCovarFieldNumber;
const int IntegSinsPva::kInitAndAlignmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegSinsPva::IntegSinsPva()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.IntegSinsPva)
}

void IntegSinsPva::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  position_ = const_cast< ::apollo::common::PointLLH*>(&::apollo::common::PointLLH::default_instance());
  velocity_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  attitude_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
}

IntegSinsPva::IntegSinsPva(const IntegSinsPva& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.IntegSinsPva)
}

void IntegSinsPva::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  position_ = NULL;
  velocity_ = NULL;
  attitude_ = NULL;
  init_and_alignment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegSinsPva::~IntegSinsPva() {
  // @@protoc_insertion_point(destructor:apollo.localization.IntegSinsPva)
  SharedDtor();
}

void IntegSinsPva::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete position_;
    delete velocity_;
    delete attitude_;
  }
}

void IntegSinsPva::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegSinsPva::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegSinsPva_descriptor_;
}

const IntegSinsPva& IntegSinsPva::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2fsins_5fpva_2eproto();
  return *default_instance_;
}

IntegSinsPva* IntegSinsPva::default_instance_ = NULL;

IntegSinsPva* IntegSinsPva::New(::google::protobuf::Arena* arena) const {
  IntegSinsPva* n = new IntegSinsPva;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntegSinsPva::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.IntegSinsPva)
  if (_has_bits_[0 / 32] & 47u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::apollo::common::PointLLH::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
    }
    if (has_attitude()) {
      if (attitude_ != NULL) attitude_->::apollo::common::Point3D::Clear();
    }
    init_and_alignment_ = false;
  }
  pva_covar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IntegSinsPva::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.IntegSinsPva)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .apollo.common.PointLLH position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // optional .apollo.common.Point3D velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attitude;
        break;
      }

      // optional .apollo.common.Point3D attitude = 4;
      case 4: {
        if (tag == 34) {
         parse_attitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attitude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pva_covar;
        break;
      }

      // repeated double pva_covar = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_pva_covar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pva_covar())));
        } else if (tag == 41) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_pva_covar())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_init_and_alignment;
        break;
      }

      // optional bool init_and_alignment = 6;
      case 6: {
        if (tag == 48) {
         parse_init_and_alignment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &init_and_alignment_)));
          set_has_init_and_alignment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.IntegSinsPva)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.IntegSinsPva)
  return false;
#undef DO_
}

void IntegSinsPva::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.IntegSinsPva)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.common.PointLLH position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .apollo.common.Point3D velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // optional .apollo.common.Point3D attitude = 4;
  if (has_attitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->attitude_, output);
  }

  // repeated double pva_covar = 5 [packed = true];
  if (this->pva_covar_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pva_covar_cached_byte_size_);
  }
  for (int i = 0; i < this->pva_covar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pva_covar(i), output);
  }

  // optional bool init_and_alignment = 6;
  if (has_init_and_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->init_and_alignment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.IntegSinsPva)
}

::google::protobuf::uint8* IntegSinsPva::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.IntegSinsPva)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.common.PointLLH position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional .apollo.common.Point3D velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->velocity_, false, target);
  }

  // optional .apollo.common.Point3D attitude = 4;
  if (has_attitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->attitude_, false, target);
  }

  // repeated double pva_covar = 5 [packed = true];
  if (this->pva_covar_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pva_covar_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pva_covar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pva_covar(i), target);
  }

  // optional bool init_and_alignment = 6;
  if (has_init_and_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->init_and_alignment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.IntegSinsPva)
  return target;
}

int IntegSinsPva::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.IntegSinsPva)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 47u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.PointLLH position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .apollo.common.Point3D velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .apollo.common.Point3D attitude = 4;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attitude_);
    }

    // optional bool init_and_alignment = 6;
    if (has_init_and_alignment()) {
      total_size += 1 + 1;
    }

  }
  // repeated double pva_covar = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->pva_covar_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pva_covar_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegSinsPva::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.IntegSinsPva)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntegSinsPva* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegSinsPva>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.IntegSinsPva)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.IntegSinsPva)
    MergeFrom(*source);
  }
}

void IntegSinsPva::MergeFrom(const IntegSinsPva& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.IntegSinsPva)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pva_covar_.MergeFrom(from.pva_covar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_position()) {
      mutable_position()->::apollo::common::PointLLH::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::apollo::common::Point3D::MergeFrom(from.velocity());
    }
    if (from.has_attitude()) {
      mutable_attitude()->::apollo::common::Point3D::MergeFrom(from.attitude());
    }
    if (from.has_init_and_alignment()) {
      set_init_and_alignment(from.init_and_alignment());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IntegSinsPva::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.IntegSinsPva)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegSinsPva::CopyFrom(const IntegSinsPva& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.IntegSinsPva)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegSinsPva::IsInitialized() const {

  return true;
}

void IntegSinsPva::Swap(IntegSinsPva* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegSinsPva::InternalSwap(IntegSinsPva* other) {
  std::swap(header_, other->header_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(attitude_, other->attitude_);
  pva_covar_.UnsafeArenaSwap(&other->pva_covar_);
  std::swap(init_and_alignment_, other->init_and_alignment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntegSinsPva::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegSinsPva_descriptor_;
  metadata.reflection = IntegSinsPva_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntegSinsPva

// optional .apollo.common.Header header = 1;
bool IntegSinsPva::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntegSinsPva::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void IntegSinsPva::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntegSinsPva::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& IntegSinsPva::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegSinsPva.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* IntegSinsPva::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegSinsPva.header)
  return header_;
}
::apollo::common::Header* IntegSinsPva::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegSinsPva.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void IntegSinsPva::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegSinsPva.header)
}

// optional .apollo.common.PointLLH position = 2;
bool IntegSinsPva::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntegSinsPva::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void IntegSinsPva::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntegSinsPva::clear_position() {
  if (position_ != NULL) position_->::apollo::common::PointLLH::Clear();
  clear_has_position();
}
const ::apollo::common::PointLLH& IntegSinsPva::position() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegSinsPva.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::common::PointLLH* IntegSinsPva::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegSinsPva.position)
  return position_;
}
::apollo::common::PointLLH* IntegSinsPva::release_position() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegSinsPva.position)
  clear_has_position();
  ::apollo::common::PointLLH* temp = position_;
  position_ = NULL;
  return temp;
}
void IntegSinsPva::set_allocated_position(::apollo::common::PointLLH* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegSinsPva.position)
}

// optional .apollo.common.Point3D velocity = 3;
bool IntegSinsPva::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IntegSinsPva::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void IntegSinsPva::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void IntegSinsPva::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
  clear_has_velocity();
}
const ::apollo::common::Point3D& IntegSinsPva::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegSinsPva.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::apollo::common::Point3D* IntegSinsPva::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegSinsPva.velocity)
  return velocity_;
}
::apollo::common::Point3D* IntegSinsPva::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegSinsPva.velocity)
  clear_has_velocity();
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void IntegSinsPva::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegSinsPva.velocity)
}

// optional .apollo.common.Point3D attitude = 4;
bool IntegSinsPva::has_attitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IntegSinsPva::set_has_attitude() {
  _has_bits_[0] |= 0x00000008u;
}
void IntegSinsPva::clear_has_attitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void IntegSinsPva::clear_attitude() {
  if (attitude_ != NULL) attitude_->::apollo::common::Point3D::Clear();
  clear_has_attitude();
}
const ::apollo::common::Point3D& IntegSinsPva::attitude() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegSinsPva.attitude)
  return attitude_ != NULL ? *attitude_ : *default_instance_->attitude_;
}
::apollo::common::Point3D* IntegSinsPva::mutable_attitude() {
  set_has_attitude();
  if (attitude_ == NULL) {
    attitude_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegSinsPva.attitude)
  return attitude_;
}
::apollo::common::Point3D* IntegSinsPva::release_attitude() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegSinsPva.attitude)
  clear_has_attitude();
  ::apollo::common::Point3D* temp = attitude_;
  attitude_ = NULL;
  return temp;
}
void IntegSinsPva::set_allocated_attitude(::apollo::common::Point3D* attitude) {
  delete attitude_;
  attitude_ = attitude;
  if (attitude) {
    set_has_attitude();
  } else {
    clear_has_attitude();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegSinsPva.attitude)
}

// repeated double pva_covar = 5 [packed = true];
int IntegSinsPva::pva_covar_size() const {
  return pva_covar_.size();
}
void IntegSinsPva::clear_pva_covar() {
  pva_covar_.Clear();
}
 double IntegSinsPva::pva_covar(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegSinsPva.pva_covar)
  return pva_covar_.Get(index);
}
 void IntegSinsPva::set_pva_covar(int index, double value) {
  pva_covar_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegSinsPva.pva_covar)
}
 void IntegSinsPva::add_pva_covar(double value) {
  pva_covar_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.localization.IntegSinsPva.pva_covar)
}
 const ::google::protobuf::RepeatedField< double >&
IntegSinsPva::pva_covar() const {
  // @@protoc_insertion_point(field_list:apollo.localization.IntegSinsPva.pva_covar)
  return pva_covar_;
}
 ::google::protobuf::RepeatedField< double >*
IntegSinsPva::mutable_pva_covar() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.IntegSinsPva.pva_covar)
  return &pva_covar_;
}

// optional bool init_and_alignment = 6;
bool IntegSinsPva::has_init_and_alignment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IntegSinsPva::set_has_init_and_alignment() {
  _has_bits_[0] |= 0x00000020u;
}
void IntegSinsPva::clear_has_init_and_alignment() {
  _has_bits_[0] &= ~0x00000020u;
}
void IntegSinsPva::clear_init_and_alignment() {
  init_and_alignment_ = false;
  clear_has_init_and_alignment();
}
 bool IntegSinsPva::init_and_alignment() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegSinsPva.init_and_alignment)
  return init_and_alignment_;
}
 void IntegSinsPva::set_init_and_alignment(bool value) {
  set_has_init_and_alignment();
  init_and_alignment_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.IntegSinsPva.init_and_alignment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
