// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map/relative_map/relative_map_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map/relative_map/relative_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace relative_map {

namespace {

const ::google::protobuf::Descriptor* MapGenerationParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapGenerationParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NavigationLaneConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavigationLaneConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RelativeMapConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelativeMapConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto() {
  protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map/relative_map/relative_map_config.proto");
  GOOGLE_CHECK(file != NULL);
  MapGenerationParam_descriptor_ = file->message_type(0);
  static const int MapGenerationParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, default_left_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, default_right_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, default_speed_limit_),
  };
  MapGenerationParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapGenerationParam_descriptor_,
      MapGenerationParam::default_instance_,
      MapGenerationParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapGenerationParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, _internal_metadata_),
      -1);
  NavigationLaneConfig_descriptor_ = file->message_type(1);
  static const int NavigationLaneConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, min_lane_marker_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, lane_source_),
  };
  NavigationLaneConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NavigationLaneConfig_descriptor_,
      NavigationLaneConfig::default_instance_,
      NavigationLaneConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(NavigationLaneConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, _internal_metadata_),
      -1);
  NavigationLaneConfig_LaneSource_descriptor_ = NavigationLaneConfig_descriptor_->enum_type(0);
  RelativeMapConfig_descriptor_ = file->message_type(2);
  static const int RelativeMapConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, map_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, navigation_lane_),
  };
  RelativeMapConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelativeMapConfig_descriptor_,
      RelativeMapConfig::default_instance_,
      RelativeMapConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelativeMapConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapGenerationParam_descriptor_, &MapGenerationParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NavigationLaneConfig_descriptor_, &NavigationLaneConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelativeMapConfig_descriptor_, &RelativeMapConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto() {
  delete MapGenerationParam::default_instance_;
  delete MapGenerationParam_reflection_;
  delete NavigationLaneConfig::default_instance_;
  delete NavigationLaneConfig_reflection_;
  delete RelativeMapConfig::default_instance_;
  delete RelativeMapConfig_reflection_;
}

void protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*map/relative_map/relative_map_config.p"
    "roto\022\023apollo.relative_map\"\177\n\022MapGenerati"
    "onParam\022 \n\022default_left_width\030\001 \001(\001:\0041.7"
    "5\022!\n\023default_right_width\030\002 \001(\001:\0041.75\022$\n\023"
    "default_speed_limit\030\003 \001(\001:\00729.0576\"\274\001\n\024N"
    "avigationLaneConfig\022$\n\027min_lane_marker_q"
    "uality\030\001 \001(\001:\0030.5\022I\n\013lane_source\030\002 \001(\01624"
    ".apollo.relative_map.NavigationLaneConfi"
    "g.LaneSource\"3\n\nLaneSource\022\016\n\nPERCEPTION"
    "\020\001\022\025\n\021OFFLINE_GENERATED\020\002\"\223\001\n\021RelativeMa"
    "pConfig\022:\n\tmap_param\030\001 \001(\0132\'.apollo.rela"
    "tive_map.MapGenerationParam\022B\n\017navigatio"
    "n_lane\030\002 \001(\0132).apollo.relative_map.Navig"
    "ationLaneConfig", 535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map/relative_map/relative_map_config.proto", &protobuf_RegisterTypes);
  MapGenerationParam::default_instance_ = new MapGenerationParam();
  NavigationLaneConfig::default_instance_ = new NavigationLaneConfig();
  RelativeMapConfig::default_instance_ = new RelativeMapConfig();
  MapGenerationParam::default_instance_->InitAsDefaultInstance();
  NavigationLaneConfig::default_instance_->InitAsDefaultInstance();
  RelativeMapConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto {
  StaticDescriptorInitializer_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto() {
    protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  }
} static_descriptor_initializer_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGenerationParam::kDefaultLeftWidthFieldNumber;
const int MapGenerationParam::kDefaultRightWidthFieldNumber;
const int MapGenerationParam::kDefaultSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGenerationParam::MapGenerationParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.MapGenerationParam)
}

void MapGenerationParam::InitAsDefaultInstance() {
}

MapGenerationParam::MapGenerationParam(const MapGenerationParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapGenerationParam)
}

void MapGenerationParam::SharedCtor() {
  _cached_size_ = 0;
  default_left_width_ = 1.75;
  default_right_width_ = 1.75;
  default_speed_limit_ = 29.0576;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapGenerationParam::~MapGenerationParam() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapGenerationParam)
  SharedDtor();
}

void MapGenerationParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapGenerationParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapGenerationParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapGenerationParam_descriptor_;
}

const MapGenerationParam& MapGenerationParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  return *default_instance_;
}

MapGenerationParam* MapGenerationParam::default_instance_ = NULL;

MapGenerationParam* MapGenerationParam::New(::google::protobuf::Arena* arena) const {
  MapGenerationParam* n = new MapGenerationParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapGenerationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapGenerationParam)
  if (_has_bits_[0 / 32] & 7u) {
    default_left_width_ = 1.75;
    default_right_width_ = 1.75;
    default_speed_limit_ = 29.0576;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapGenerationParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.MapGenerationParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double default_left_width = 1 [default = 1.75];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_left_width_)));
          set_has_default_left_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_default_right_width;
        break;
      }

      // optional double default_right_width = 2 [default = 1.75];
      case 2: {
        if (tag == 17) {
         parse_default_right_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_right_width_)));
          set_has_default_right_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_default_speed_limit;
        break;
      }

      // optional double default_speed_limit = 3 [default = 29.0576];
      case 3: {
        if (tag == 25) {
         parse_default_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_limit_)));
          set_has_default_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.MapGenerationParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.MapGenerationParam)
  return false;
#undef DO_
}

void MapGenerationParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.MapGenerationParam)
  // optional double default_left_width = 1 [default = 1.75];
  if (has_default_left_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->default_left_width(), output);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (has_default_right_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->default_right_width(), output);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (has_default_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->default_speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.MapGenerationParam)
}

::google::protobuf::uint8* MapGenerationParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapGenerationParam)
  // optional double default_left_width = 1 [default = 1.75];
  if (has_default_left_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->default_left_width(), target);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (has_default_right_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->default_right_width(), target);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (has_default_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->default_speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapGenerationParam)
  return target;
}

int MapGenerationParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapGenerationParam)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double default_left_width = 1 [default = 1.75];
    if (has_default_left_width()) {
      total_size += 1 + 8;
    }

    // optional double default_right_width = 2 [default = 1.75];
    if (has_default_right_width()) {
      total_size += 1 + 8;
    }

    // optional double default_speed_limit = 3 [default = 29.0576];
    if (has_default_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapGenerationParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.MapGenerationParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapGenerationParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGenerationParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.MapGenerationParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.MapGenerationParam)
    MergeFrom(*source);
  }
}

void MapGenerationParam::MergeFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapGenerationParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_default_left_width()) {
      set_default_left_width(from.default_left_width());
    }
    if (from.has_default_right_width()) {
      set_default_right_width(from.default_right_width());
    }
    if (from.has_default_speed_limit()) {
      set_default_speed_limit(from.default_speed_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapGenerationParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGenerationParam::CopyFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGenerationParam::IsInitialized() const {

  return true;
}

void MapGenerationParam::Swap(MapGenerationParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGenerationParam::InternalSwap(MapGenerationParam* other) {
  std::swap(default_left_width_, other->default_left_width_);
  std::swap(default_right_width_, other->default_right_width_);
  std::swap(default_speed_limit_, other->default_speed_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapGenerationParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapGenerationParam_descriptor_;
  metadata.reflection = MapGenerationParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapGenerationParam

// optional double default_left_width = 1 [default = 1.75];
bool MapGenerationParam::has_default_left_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapGenerationParam::set_has_default_left_width() {
  _has_bits_[0] |= 0x00000001u;
}
void MapGenerationParam::clear_has_default_left_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapGenerationParam::clear_default_left_width() {
  default_left_width_ = 1.75;
  clear_has_default_left_width();
}
 double MapGenerationParam::default_left_width() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_left_width)
  return default_left_width_;
}
 void MapGenerationParam::set_default_left_width(double value) {
  set_has_default_left_width();
  default_left_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_left_width)
}

// optional double default_right_width = 2 [default = 1.75];
bool MapGenerationParam::has_default_right_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapGenerationParam::set_has_default_right_width() {
  _has_bits_[0] |= 0x00000002u;
}
void MapGenerationParam::clear_has_default_right_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapGenerationParam::clear_default_right_width() {
  default_right_width_ = 1.75;
  clear_has_default_right_width();
}
 double MapGenerationParam::default_right_width() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_right_width)
  return default_right_width_;
}
 void MapGenerationParam::set_default_right_width(double value) {
  set_has_default_right_width();
  default_right_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_right_width)
}

// optional double default_speed_limit = 3 [default = 29.0576];
bool MapGenerationParam::has_default_speed_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapGenerationParam::set_has_default_speed_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void MapGenerationParam::clear_has_default_speed_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapGenerationParam::clear_default_speed_limit() {
  default_speed_limit_ = 29.0576;
  clear_has_default_speed_limit();
}
 double MapGenerationParam::default_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_speed_limit)
  return default_speed_limit_;
}
 void MapGenerationParam::set_default_speed_limit(double value) {
  set_has_default_speed_limit();
  default_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationLaneConfig_LaneSource_descriptor_;
}
bool NavigationLaneConfig_LaneSource_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavigationLaneConfig_LaneSource NavigationLaneConfig::PERCEPTION;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::OFFLINE_GENERATED;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MIN;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MAX;
const int NavigationLaneConfig::LaneSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationLaneConfig::kMinLaneMarkerQualityFieldNumber;
const int NavigationLaneConfig::kLaneSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationLaneConfig::NavigationLaneConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationLaneConfig)
}

void NavigationLaneConfig::InitAsDefaultInstance() {
}

NavigationLaneConfig::NavigationLaneConfig(const NavigationLaneConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationLaneConfig)
}

void NavigationLaneConfig::SharedCtor() {
  _cached_size_ = 0;
  min_lane_marker_quality_ = 0.5;
  lane_source_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavigationLaneConfig::~NavigationLaneConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationLaneConfig)
  SharedDtor();
}

void NavigationLaneConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NavigationLaneConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationLaneConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationLaneConfig_descriptor_;
}

const NavigationLaneConfig& NavigationLaneConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  return *default_instance_;
}

NavigationLaneConfig* NavigationLaneConfig::default_instance_ = NULL;

NavigationLaneConfig* NavigationLaneConfig::New(::google::protobuf::Arena* arena) const {
  NavigationLaneConfig* n = new NavigationLaneConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationLaneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationLaneConfig)
  if (_has_bits_[0 / 32] & 3u) {
    min_lane_marker_quality_ = 0.5;
    lane_source_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NavigationLaneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.NavigationLaneConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_lane_marker_quality = 1 [default = 0.5];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_lane_marker_quality_)));
          set_has_min_lane_marker_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lane_source;
        break;
      }

      // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
      case 2: {
        if (tag == 16) {
         parse_lane_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::relative_map::NavigationLaneConfig_LaneSource_IsValid(value)) {
            set_lane_source(static_cast< ::apollo::relative_map::NavigationLaneConfig_LaneSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.NavigationLaneConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.NavigationLaneConfig)
  return false;
#undef DO_
}

void NavigationLaneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.NavigationLaneConfig)
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (has_min_lane_marker_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_lane_marker_quality(), output);
  }

  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (has_lane_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lane_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.NavigationLaneConfig)
}

::google::protobuf::uint8* NavigationLaneConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationLaneConfig)
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (has_min_lane_marker_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_lane_marker_quality(), target);
  }

  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (has_lane_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lane_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationLaneConfig)
  return target;
}

int NavigationLaneConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationLaneConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double min_lane_marker_quality = 1 [default = 0.5];
    if (has_min_lane_marker_quality()) {
      total_size += 1 + 8;
    }

    // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
    if (has_lane_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_source());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationLaneConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationLaneConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NavigationLaneConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationLaneConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationLaneConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationLaneConfig)
    MergeFrom(*source);
  }
}

void NavigationLaneConfig::MergeFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationLaneConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_lane_marker_quality()) {
      set_min_lane_marker_quality(from.min_lane_marker_quality());
    }
    if (from.has_lane_source()) {
      set_lane_source(from.lane_source());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NavigationLaneConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationLaneConfig::CopyFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationLaneConfig::IsInitialized() const {

  return true;
}

void NavigationLaneConfig::Swap(NavigationLaneConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationLaneConfig::InternalSwap(NavigationLaneConfig* other) {
  std::swap(min_lane_marker_quality_, other->min_lane_marker_quality_);
  std::swap(lane_source_, other->lane_source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationLaneConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavigationLaneConfig_descriptor_;
  metadata.reflection = NavigationLaneConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationLaneConfig

// optional double min_lane_marker_quality = 1 [default = 0.5];
bool NavigationLaneConfig::has_min_lane_marker_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigationLaneConfig::set_has_min_lane_marker_quality() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigationLaneConfig::clear_has_min_lane_marker_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigationLaneConfig::clear_min_lane_marker_quality() {
  min_lane_marker_quality_ = 0.5;
  clear_has_min_lane_marker_quality();
}
 double NavigationLaneConfig::min_lane_marker_quality() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationLaneConfig.min_lane_marker_quality)
  return min_lane_marker_quality_;
}
 void NavigationLaneConfig::set_min_lane_marker_quality(double value) {
  set_has_min_lane_marker_quality();
  min_lane_marker_quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationLaneConfig.min_lane_marker_quality)
}

// optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
bool NavigationLaneConfig::has_lane_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NavigationLaneConfig::set_has_lane_source() {
  _has_bits_[0] |= 0x00000002u;
}
void NavigationLaneConfig::clear_has_lane_source() {
  _has_bits_[0] &= ~0x00000002u;
}
void NavigationLaneConfig::clear_lane_source() {
  lane_source_ = 1;
  clear_has_lane_source();
}
 ::apollo::relative_map::NavigationLaneConfig_LaneSource NavigationLaneConfig::lane_source() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationLaneConfig.lane_source)
  return static_cast< ::apollo::relative_map::NavigationLaneConfig_LaneSource >(lane_source_);
}
 void NavigationLaneConfig::set_lane_source(::apollo::relative_map::NavigationLaneConfig_LaneSource value) {
  assert(::apollo::relative_map::NavigationLaneConfig_LaneSource_IsValid(value));
  set_has_lane_source();
  lane_source_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationLaneConfig.lane_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelativeMapConfig::kMapParamFieldNumber;
const int RelativeMapConfig::kNavigationLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelativeMapConfig::RelativeMapConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.RelativeMapConfig)
}

void RelativeMapConfig::InitAsDefaultInstance() {
  map_param_ = const_cast< ::apollo::relative_map::MapGenerationParam*>(&::apollo::relative_map::MapGenerationParam::default_instance());
  navigation_lane_ = const_cast< ::apollo::relative_map::NavigationLaneConfig*>(&::apollo::relative_map::NavigationLaneConfig::default_instance());
}

RelativeMapConfig::RelativeMapConfig(const RelativeMapConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.RelativeMapConfig)
}

void RelativeMapConfig::SharedCtor() {
  _cached_size_ = 0;
  map_param_ = NULL;
  navigation_lane_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelativeMapConfig::~RelativeMapConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.RelativeMapConfig)
  SharedDtor();
}

void RelativeMapConfig::SharedDtor() {
  if (this != default_instance_) {
    delete map_param_;
    delete navigation_lane_;
  }
}

void RelativeMapConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelativeMapConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelativeMapConfig_descriptor_;
}

const RelativeMapConfig& RelativeMapConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2frelative_5fmap_2frelative_5fmap_5fconfig_2eproto();
  return *default_instance_;
}

RelativeMapConfig* RelativeMapConfig::default_instance_ = NULL;

RelativeMapConfig* RelativeMapConfig::New(::google::protobuf::Arena* arena) const {
  RelativeMapConfig* n = new RelativeMapConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelativeMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.RelativeMapConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map_param()) {
      if (map_param_ != NULL) map_param_->::apollo::relative_map::MapGenerationParam::Clear();
    }
    if (has_navigation_lane()) {
      if (navigation_lane_ != NULL) navigation_lane_->::apollo::relative_map::NavigationLaneConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelativeMapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.RelativeMapConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.relative_map.MapGenerationParam map_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_navigation_lane;
        break;
      }

      // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
      case 2: {
        if (tag == 18) {
         parse_navigation_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navigation_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.RelativeMapConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.RelativeMapConfig)
  return false;
#undef DO_
}

void RelativeMapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.RelativeMapConfig)
  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  if (has_map_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_param_, output);
  }

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (has_navigation_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->navigation_lane_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.RelativeMapConfig)
}

::google::protobuf::uint8* RelativeMapConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.RelativeMapConfig)
  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  if (has_map_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_param_, false, target);
  }

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (has_navigation_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->navigation_lane_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.RelativeMapConfig)
  return target;
}

int RelativeMapConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.RelativeMapConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.relative_map.MapGenerationParam map_param = 1;
    if (has_map_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_param_);
    }

    // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
    if (has_navigation_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->navigation_lane_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelativeMapConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.RelativeMapConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RelativeMapConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelativeMapConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.RelativeMapConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.RelativeMapConfig)
    MergeFrom(*source);
  }
}

void RelativeMapConfig::MergeFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.RelativeMapConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_param()) {
      mutable_map_param()->::apollo::relative_map::MapGenerationParam::MergeFrom(from.map_param());
    }
    if (from.has_navigation_lane()) {
      mutable_navigation_lane()->::apollo::relative_map::NavigationLaneConfig::MergeFrom(from.navigation_lane());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelativeMapConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeMapConfig::CopyFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeMapConfig::IsInitialized() const {

  return true;
}

void RelativeMapConfig::Swap(RelativeMapConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelativeMapConfig::InternalSwap(RelativeMapConfig* other) {
  std::swap(map_param_, other->map_param_);
  std::swap(navigation_lane_, other->navigation_lane_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelativeMapConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelativeMapConfig_descriptor_;
  metadata.reflection = RelativeMapConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelativeMapConfig

// optional .apollo.relative_map.MapGenerationParam map_param = 1;
bool RelativeMapConfig::has_map_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RelativeMapConfig::set_has_map_param() {
  _has_bits_[0] |= 0x00000001u;
}
void RelativeMapConfig::clear_has_map_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void RelativeMapConfig::clear_map_param() {
  if (map_param_ != NULL) map_param_->::apollo::relative_map::MapGenerationParam::Clear();
  clear_has_map_param();
}
const ::apollo::relative_map::MapGenerationParam& RelativeMapConfig::map_param() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.RelativeMapConfig.map_param)
  return map_param_ != NULL ? *map_param_ : *default_instance_->map_param_;
}
::apollo::relative_map::MapGenerationParam* RelativeMapConfig::mutable_map_param() {
  set_has_map_param();
  if (map_param_ == NULL) {
    map_param_ = new ::apollo::relative_map::MapGenerationParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.RelativeMapConfig.map_param)
  return map_param_;
}
::apollo::relative_map::MapGenerationParam* RelativeMapConfig::release_map_param() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.RelativeMapConfig.map_param)
  clear_has_map_param();
  ::apollo::relative_map::MapGenerationParam* temp = map_param_;
  map_param_ = NULL;
  return temp;
}
void RelativeMapConfig::set_allocated_map_param(::apollo::relative_map::MapGenerationParam* map_param) {
  delete map_param_;
  map_param_ = map_param;
  if (map_param) {
    set_has_map_param();
  } else {
    clear_has_map_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.RelativeMapConfig.map_param)
}

// optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
bool RelativeMapConfig::has_navigation_lane() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RelativeMapConfig::set_has_navigation_lane() {
  _has_bits_[0] |= 0x00000002u;
}
void RelativeMapConfig::clear_has_navigation_lane() {
  _has_bits_[0] &= ~0x00000002u;
}
void RelativeMapConfig::clear_navigation_lane() {
  if (navigation_lane_ != NULL) navigation_lane_->::apollo::relative_map::NavigationLaneConfig::Clear();
  clear_has_navigation_lane();
}
const ::apollo::relative_map::NavigationLaneConfig& RelativeMapConfig::navigation_lane() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.RelativeMapConfig.navigation_lane)
  return navigation_lane_ != NULL ? *navigation_lane_ : *default_instance_->navigation_lane_;
}
::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::mutable_navigation_lane() {
  set_has_navigation_lane();
  if (navigation_lane_ == NULL) {
    navigation_lane_ = new ::apollo::relative_map::NavigationLaneConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.RelativeMapConfig.navigation_lane)
  return navigation_lane_;
}
::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::release_navigation_lane() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.RelativeMapConfig.navigation_lane)
  clear_has_navigation_lane();
  ::apollo::relative_map::NavigationLaneConfig* temp = navigation_lane_;
  navigation_lane_ = NULL;
  return temp;
}
void RelativeMapConfig::set_allocated_navigation_lane(::apollo::relative_map::NavigationLaneConfig* navigation_lane) {
  delete navigation_lane_;
  navigation_lane_ = navigation_lane;
  if (navigation_lane) {
    set_has_navigation_lane();
  } else {
    clear_has_navigation_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.RelativeMapConfig.navigation_lane)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
