// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/reference_line_smoother_config.proto

#ifndef PROTOBUF_planning_2freference_5fline_5fsmoother_5fconfig_2eproto__INCLUDED
#define PROTOBUF_planning_2freference_5fline_5fsmoother_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
void protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
void protobuf_ShutdownFile_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();

class CosThetaSmootherConfig;
class QpSplineSmootherConfig;
class ReferenceLineSmootherConfig;
class SpiralSmootherConfig;

enum ReferenceLineSmootherConfig_DrivingSide {
  ReferenceLineSmootherConfig_DrivingSide_LEFT = 1,
  ReferenceLineSmootherConfig_DrivingSide_RIGHT = 2
};
bool ReferenceLineSmootherConfig_DrivingSide_IsValid(int value);
const ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig_DrivingSide_DrivingSide_MIN = ReferenceLineSmootherConfig_DrivingSide_LEFT;
const ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig_DrivingSide_DrivingSide_MAX = ReferenceLineSmootherConfig_DrivingSide_RIGHT;
const int ReferenceLineSmootherConfig_DrivingSide_DrivingSide_ARRAYSIZE = ReferenceLineSmootherConfig_DrivingSide_DrivingSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReferenceLineSmootherConfig_DrivingSide_descriptor();
inline const ::std::string& ReferenceLineSmootherConfig_DrivingSide_Name(ReferenceLineSmootherConfig_DrivingSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReferenceLineSmootherConfig_DrivingSide_descriptor(), value);
}
inline bool ReferenceLineSmootherConfig_DrivingSide_Parse(
    const ::std::string& name, ReferenceLineSmootherConfig_DrivingSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReferenceLineSmootherConfig_DrivingSide>(
    ReferenceLineSmootherConfig_DrivingSide_descriptor(), name, value);
}
// ===================================================================

class QpSplineSmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpSplineSmootherConfig) */ {
 public:
  QpSplineSmootherConfig();
  virtual ~QpSplineSmootherConfig();

  QpSplineSmootherConfig(const QpSplineSmootherConfig& from);

  inline QpSplineSmootherConfig& operator=(const QpSplineSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QpSplineSmootherConfig& default_instance();

  void Swap(QpSplineSmootherConfig* other);

  // implements Message ----------------------------------------------

  inline QpSplineSmootherConfig* New() const { return New(NULL); }

  QpSplineSmootherConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QpSplineSmootherConfig& from);
  void MergeFrom(const QpSplineSmootherConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QpSplineSmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 spline_order = 1 [default = 5];
  bool has_spline_order() const;
  void clear_spline_order();
  static const int kSplineOrderFieldNumber = 1;
  ::google::protobuf::uint32 spline_order() const;
  void set_spline_order(::google::protobuf::uint32 value);

  // optional double max_spline_length = 2 [default = 25];
  bool has_max_spline_length() const;
  void clear_max_spline_length();
  static const int kMaxSplineLengthFieldNumber = 2;
  double max_spline_length() const;
  void set_max_spline_length(double value);

  // optional double regularization_weight = 3 [default = 0.1];
  bool has_regularization_weight() const;
  void clear_regularization_weight();
  static const int kRegularizationWeightFieldNumber = 3;
  double regularization_weight() const;
  void set_regularization_weight(double value);

  // optional double second_derivative_weight = 4 [default = 0];
  bool has_second_derivative_weight() const;
  void clear_second_derivative_weight();
  static const int kSecondDerivativeWeightFieldNumber = 4;
  double second_derivative_weight() const;
  void set_second_derivative_weight(double value);

  // optional double third_derivative_weight = 5 [default = 100];
  bool has_third_derivative_weight() const;
  void clear_third_derivative_weight();
  static const int kThirdDerivativeWeightFieldNumber = 5;
  double third_derivative_weight() const;
  void set_third_derivative_weight(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.QpSplineSmootherConfig)
 private:
  inline void set_has_spline_order();
  inline void clear_has_spline_order();
  inline void set_has_max_spline_length();
  inline void clear_has_max_spline_length();
  inline void set_has_regularization_weight();
  inline void clear_has_regularization_weight();
  inline void set_has_second_derivative_weight();
  inline void clear_has_second_derivative_weight();
  inline void set_has_third_derivative_weight();
  inline void clear_has_third_derivative_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_spline_length_;
  double regularization_weight_;
  double second_derivative_weight_;
  double third_derivative_weight_;
  ::google::protobuf::uint32 spline_order_;
  friend void  protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static QpSplineSmootherConfig* default_instance_;
};
// -------------------------------------------------------------------

class SpiralSmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SpiralSmootherConfig) */ {
 public:
  SpiralSmootherConfig();
  virtual ~SpiralSmootherConfig();

  SpiralSmootherConfig(const SpiralSmootherConfig& from);

  inline SpiralSmootherConfig& operator=(const SpiralSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpiralSmootherConfig& default_instance();

  void Swap(SpiralSmootherConfig* other);

  // implements Message ----------------------------------------------

  inline SpiralSmootherConfig* New() const { return New(NULL); }

  SpiralSmootherConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpiralSmootherConfig& from);
  void MergeFrom(const SpiralSmootherConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpiralSmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_deviation = 1 [default = 0.1];
  bool has_max_deviation() const;
  void clear_max_deviation();
  static const int kMaxDeviationFieldNumber = 1;
  double max_deviation() const;
  void set_max_deviation(double value);

  // optional double piecewise_length = 2 [default = 10];
  bool has_piecewise_length() const;
  void clear_piecewise_length();
  static const int kPiecewiseLengthFieldNumber = 2;
  double piecewise_length() const;
  void set_piecewise_length(double value);

  // optional int32 max_iteration = 3 [default = 1000];
  bool has_max_iteration() const;
  void clear_max_iteration();
  static const int kMaxIterationFieldNumber = 3;
  ::google::protobuf::int32 max_iteration() const;
  void set_max_iteration(::google::protobuf::int32 value);

  // optional double opt_tol = 4 [default = 1e-08];
  bool has_opt_tol() const;
  void clear_opt_tol();
  static const int kOptTolFieldNumber = 4;
  double opt_tol() const;
  void set_opt_tol(double value);

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  bool has_opt_acceptable_tol() const;
  void clear_opt_acceptable_tol();
  static const int kOptAcceptableTolFieldNumber = 5;
  double opt_acceptable_tol() const;
  void set_opt_acceptable_tol(double value);

  // optional int32 opt_acceptable_iteration = 6 [default = 15];
  bool has_opt_acceptable_iteration() const;
  void clear_opt_acceptable_iteration();
  static const int kOptAcceptableIterationFieldNumber = 6;
  ::google::protobuf::int32 opt_acceptable_iteration() const;
  void set_opt_acceptable_iteration(::google::protobuf::int32 value);

  // optional double opt_weight_curve_length = 7 [default = 0];
  bool has_opt_weight_curve_length() const;
  void clear_opt_weight_curve_length();
  static const int kOptWeightCurveLengthFieldNumber = 7;
  double opt_weight_curve_length() const;
  void set_opt_weight_curve_length(double value);

  // optional double opt_weight_kappa = 8 [default = 1.5];
  bool has_opt_weight_kappa() const;
  void clear_opt_weight_kappa();
  static const int kOptWeightKappaFieldNumber = 8;
  double opt_weight_kappa() const;
  void set_opt_weight_kappa(double value);

  // optional double opt_weight_dkappa = 9 [default = 1];
  bool has_opt_weight_dkappa() const;
  void clear_opt_weight_dkappa();
  static const int kOptWeightDkappaFieldNumber = 9;
  double opt_weight_dkappa() const;
  void set_opt_weight_dkappa(double value);

  // optional double opt_weight_d2kappa = 10 [default = 0];
  bool has_opt_weight_d2kappa() const;
  void clear_opt_weight_d2kappa();
  static const int kOptWeightD2KappaFieldNumber = 10;
  double opt_weight_d2kappa() const;
  void set_opt_weight_d2kappa(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.SpiralSmootherConfig)
 private:
  inline void set_has_max_deviation();
  inline void clear_has_max_deviation();
  inline void set_has_piecewise_length();
  inline void clear_has_piecewise_length();
  inline void set_has_max_iteration();
  inline void clear_has_max_iteration();
  inline void set_has_opt_tol();
  inline void clear_has_opt_tol();
  inline void set_has_opt_acceptable_tol();
  inline void clear_has_opt_acceptable_tol();
  inline void set_has_opt_acceptable_iteration();
  inline void clear_has_opt_acceptable_iteration();
  inline void set_has_opt_weight_curve_length();
  inline void clear_has_opt_weight_curve_length();
  inline void set_has_opt_weight_kappa();
  inline void clear_has_opt_weight_kappa();
  inline void set_has_opt_weight_dkappa();
  inline void clear_has_opt_weight_dkappa();
  inline void set_has_opt_weight_d2kappa();
  inline void clear_has_opt_weight_d2kappa();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_deviation_;
  double piecewise_length_;
  double opt_tol_;
  ::google::protobuf::int32 max_iteration_;
  ::google::protobuf::int32 opt_acceptable_iteration_;
  double opt_acceptable_tol_;
  double opt_weight_curve_length_;
  double opt_weight_kappa_;
  double opt_weight_dkappa_;
  double opt_weight_d2kappa_;
  friend void  protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static SpiralSmootherConfig* default_instance_;
};
// -------------------------------------------------------------------

class CosThetaSmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.CosThetaSmootherConfig) */ {
 public:
  CosThetaSmootherConfig();
  virtual ~CosThetaSmootherConfig();

  CosThetaSmootherConfig(const CosThetaSmootherConfig& from);

  inline CosThetaSmootherConfig& operator=(const CosThetaSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosThetaSmootherConfig& default_instance();

  void Swap(CosThetaSmootherConfig* other);

  // implements Message ----------------------------------------------

  inline CosThetaSmootherConfig* New() const { return New(NULL); }

  CosThetaSmootherConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CosThetaSmootherConfig& from);
  void MergeFrom(const CosThetaSmootherConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CosThetaSmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_point_deviation = 1 [default = 5];
  bool has_max_point_deviation() const;
  void clear_max_point_deviation();
  static const int kMaxPointDeviationFieldNumber = 1;
  double max_point_deviation() const;
  void set_max_point_deviation(double value);

  // optional int32 num_of_iteration = 2 [default = 10000];
  bool has_num_of_iteration() const;
  void clear_num_of_iteration();
  static const int kNumOfIterationFieldNumber = 2;
  ::google::protobuf::int32 num_of_iteration() const;
  void set_num_of_iteration(::google::protobuf::int32 value);

  // optional double weight_cos_included_angle = 3 [default = 10000];
  bool has_weight_cos_included_angle() const;
  void clear_weight_cos_included_angle();
  static const int kWeightCosIncludedAngleFieldNumber = 3;
  double weight_cos_included_angle() const;
  void set_weight_cos_included_angle(double value);

  // optional double acceptable_tol = 4 [default = 0.1];
  bool has_acceptable_tol() const;
  void clear_acceptable_tol();
  static const int kAcceptableTolFieldNumber = 4;
  double acceptable_tol() const;
  void set_acceptable_tol(double value);

  // optional double relax = 5 [default = 0.2];
  bool has_relax() const;
  void clear_relax();
  static const int kRelaxFieldNumber = 5;
  double relax() const;
  void set_relax(double value);

  // optional double reopt_qp_bound = 6 [default = 0.05];
  bool has_reopt_qp_bound() const;
  void clear_reopt_qp_bound();
  static const int kReoptQpBoundFieldNumber = 6;
  double reopt_qp_bound() const;
  void set_reopt_qp_bound(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.CosThetaSmootherConfig)
 private:
  inline void set_has_max_point_deviation();
  inline void clear_has_max_point_deviation();
  inline void set_has_num_of_iteration();
  inline void clear_has_num_of_iteration();
  inline void set_has_weight_cos_included_angle();
  inline void clear_has_weight_cos_included_angle();
  inline void set_has_acceptable_tol();
  inline void clear_has_acceptable_tol();
  inline void set_has_relax();
  inline void clear_has_relax();
  inline void set_has_reopt_qp_bound();
  inline void clear_has_reopt_qp_bound();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_point_deviation_;
  double weight_cos_included_angle_;
  double acceptable_tol_;
  double relax_;
  double reopt_qp_bound_;
  ::google::protobuf::int32 num_of_iteration_;
  friend void  protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static CosThetaSmootherConfig* default_instance_;
};
// -------------------------------------------------------------------

class ReferenceLineSmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ReferenceLineSmootherConfig) */ {
 public:
  ReferenceLineSmootherConfig();
  virtual ~ReferenceLineSmootherConfig();

  ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from);

  inline ReferenceLineSmootherConfig& operator=(const ReferenceLineSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceLineSmootherConfig& default_instance();

  enum SmootherConfigCase {
    kQpSpline = 20,
    kSpiral = 21,
    kCosTheta = 22,
    SMOOTHERCONFIG_NOT_SET = 0,
  };

  void Swap(ReferenceLineSmootherConfig* other);

  // implements Message ----------------------------------------------

  inline ReferenceLineSmootherConfig* New() const { return New(NULL); }

  ReferenceLineSmootherConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferenceLineSmootherConfig& from);
  void MergeFrom(const ReferenceLineSmootherConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferenceLineSmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReferenceLineSmootherConfig_DrivingSide DrivingSide;
  static const DrivingSide LEFT =
    ReferenceLineSmootherConfig_DrivingSide_LEFT;
  static const DrivingSide RIGHT =
    ReferenceLineSmootherConfig_DrivingSide_RIGHT;
  static inline bool DrivingSide_IsValid(int value) {
    return ReferenceLineSmootherConfig_DrivingSide_IsValid(value);
  }
  static const DrivingSide DrivingSide_MIN =
    ReferenceLineSmootherConfig_DrivingSide_DrivingSide_MIN;
  static const DrivingSide DrivingSide_MAX =
    ReferenceLineSmootherConfig_DrivingSide_DrivingSide_MAX;
  static const int DrivingSide_ARRAYSIZE =
    ReferenceLineSmootherConfig_DrivingSide_DrivingSide_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrivingSide_descriptor() {
    return ReferenceLineSmootherConfig_DrivingSide_descriptor();
  }
  static inline const ::std::string& DrivingSide_Name(DrivingSide value) {
    return ReferenceLineSmootherConfig_DrivingSide_Name(value);
  }
  static inline bool DrivingSide_Parse(const ::std::string& name,
      DrivingSide* value) {
    return ReferenceLineSmootherConfig_DrivingSide_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double max_constraint_interval = 1 [default = 5];
  bool has_max_constraint_interval() const;
  void clear_max_constraint_interval();
  static const int kMaxConstraintIntervalFieldNumber = 1;
  double max_constraint_interval() const;
  void set_max_constraint_interval(double value);

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  bool has_longitudinal_boundary_bound() const;
  void clear_longitudinal_boundary_bound();
  static const int kLongitudinalBoundaryBoundFieldNumber = 2;
  double longitudinal_boundary_bound() const;
  void set_longitudinal_boundary_bound(double value);

  // optional double lateral_boundary_bound = 3 [default = 0.1];
  bool has_lateral_boundary_bound() const;
  void clear_lateral_boundary_bound();
  static const int kLateralBoundaryBoundFieldNumber = 3;
  double lateral_boundary_bound() const;
  void set_lateral_boundary_bound(double value);

  // optional uint32 num_of_total_points = 4 [default = 500];
  bool has_num_of_total_points() const;
  void clear_num_of_total_points();
  static const int kNumOfTotalPointsFieldNumber = 4;
  ::google::protobuf::uint32 num_of_total_points() const;
  void set_num_of_total_points(::google::protobuf::uint32 value);

  // optional double curb_shift = 5 [default = 0.2];
  bool has_curb_shift() const;
  void clear_curb_shift();
  static const int kCurbShiftFieldNumber = 5;
  double curb_shift() const;
  void set_curb_shift(double value);

  // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
  bool has_driving_side() const;
  void clear_driving_side();
  static const int kDrivingSideFieldNumber = 6;
  ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide driving_side() const;
  void set_driving_side(::apollo::planning::ReferenceLineSmootherConfig_DrivingSide value);

  // optional double wide_lane_threshold_factor = 7 [default = 2];
  bool has_wide_lane_threshold_factor() const;
  void clear_wide_lane_threshold_factor();
  static const int kWideLaneThresholdFactorFieldNumber = 7;
  double wide_lane_threshold_factor() const;
  void set_wide_lane_threshold_factor(double value);

  // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
  bool has_wide_lane_shift_remain_factor() const;
  void clear_wide_lane_shift_remain_factor();
  static const int kWideLaneShiftRemainFactorFieldNumber = 8;
  double wide_lane_shift_remain_factor() const;
  void set_wide_lane_shift_remain_factor(double value);

  // optional double resolution = 9 [default = 0.02];
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 9;
  double resolution() const;
  void set_resolution(double value);

  // optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
  bool has_qp_spline() const;
  void clear_qp_spline();
  static const int kQpSplineFieldNumber = 20;
  const ::apollo::planning::QpSplineSmootherConfig& qp_spline() const;
  ::apollo::planning::QpSplineSmootherConfig* mutable_qp_spline();
  ::apollo::planning::QpSplineSmootherConfig* release_qp_spline();
  void set_allocated_qp_spline(::apollo::planning::QpSplineSmootherConfig* qp_spline);

  // optional .apollo.planning.SpiralSmootherConfig spiral = 21;
  bool has_spiral() const;
  void clear_spiral();
  static const int kSpiralFieldNumber = 21;
  const ::apollo::planning::SpiralSmootherConfig& spiral() const;
  ::apollo::planning::SpiralSmootherConfig* mutable_spiral();
  ::apollo::planning::SpiralSmootherConfig* release_spiral();
  void set_allocated_spiral(::apollo::planning::SpiralSmootherConfig* spiral);

  // optional .apollo.planning.CosThetaSmootherConfig cos_theta = 22;
  bool has_cos_theta() const;
  void clear_cos_theta();
  static const int kCosThetaFieldNumber = 22;
  const ::apollo::planning::CosThetaSmootherConfig& cos_theta() const;
  ::apollo::planning::CosThetaSmootherConfig* mutable_cos_theta();
  ::apollo::planning::CosThetaSmootherConfig* release_cos_theta();
  void set_allocated_cos_theta(::apollo::planning::CosThetaSmootherConfig* cos_theta);

  SmootherConfigCase SmootherConfig_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.ReferenceLineSmootherConfig)
 private:
  inline void set_has_max_constraint_interval();
  inline void clear_has_max_constraint_interval();
  inline void set_has_longitudinal_boundary_bound();
  inline void clear_has_longitudinal_boundary_bound();
  inline void set_has_lateral_boundary_bound();
  inline void clear_has_lateral_boundary_bound();
  inline void set_has_num_of_total_points();
  inline void clear_has_num_of_total_points();
  inline void set_has_curb_shift();
  inline void clear_has_curb_shift();
  inline void set_has_driving_side();
  inline void clear_has_driving_side();
  inline void set_has_wide_lane_threshold_factor();
  inline void clear_has_wide_lane_threshold_factor();
  inline void set_has_wide_lane_shift_remain_factor();
  inline void clear_has_wide_lane_shift_remain_factor();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_qp_spline();
  inline void set_has_spiral();
  inline void set_has_cos_theta();

  inline bool has_SmootherConfig() const;
  void clear_SmootherConfig();
  inline void clear_has_SmootherConfig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_constraint_interval_;
  double longitudinal_boundary_bound_;
  double lateral_boundary_bound_;
  double curb_shift_;
  ::google::protobuf::uint32 num_of_total_points_;
  int driving_side_;
  double wide_lane_threshold_factor_;
  double wide_lane_shift_remain_factor_;
  double resolution_;
  union SmootherConfigUnion {
    SmootherConfigUnion() {}
    ::apollo::planning::QpSplineSmootherConfig* qp_spline_;
    ::apollo::planning::SpiralSmootherConfig* spiral_;
    ::apollo::planning::CosThetaSmootherConfig* cos_theta_;
  } SmootherConfig_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2freference_5fline_5fsmoother_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ReferenceLineSmootherConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplineSmootherConfig

// optional uint32 spline_order = 1 [default = 5];
inline bool QpSplineSmootherConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpSplineSmootherConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpSplineSmootherConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpSplineSmootherConfig::clear_spline_order() {
  spline_order_ = 5u;
  clear_has_spline_order();
}
inline ::google::protobuf::uint32 QpSplineSmootherConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.spline_order)
  return spline_order_;
}
inline void QpSplineSmootherConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 25];
inline bool QpSplineSmootherConfig::has_max_spline_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpSplineSmootherConfig::set_has_max_spline_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpSplineSmootherConfig::clear_has_max_spline_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpSplineSmootherConfig::clear_max_spline_length() {
  max_spline_length_ = 25;
  clear_has_max_spline_length();
}
inline double QpSplineSmootherConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.max_spline_length)
  return max_spline_length_;
}
inline void QpSplineSmootherConfig::set_max_spline_length(double value) {
  set_has_max_spline_length();
  max_spline_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.max_spline_length)
}

// optional double regularization_weight = 3 [default = 0.1];
inline bool QpSplineSmootherConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QpSplineSmootherConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QpSplineSmootherConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QpSplineSmootherConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
inline double QpSplineSmootherConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.regularization_weight)
  return regularization_weight_;
}
inline void QpSplineSmootherConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.regularization_weight)
}

// optional double second_derivative_weight = 4 [default = 0];
inline bool QpSplineSmootherConfig::has_second_derivative_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QpSplineSmootherConfig::set_has_second_derivative_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QpSplineSmootherConfig::clear_has_second_derivative_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QpSplineSmootherConfig::clear_second_derivative_weight() {
  second_derivative_weight_ = 0;
  clear_has_second_derivative_weight();
}
inline double QpSplineSmootherConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.second_derivative_weight)
  return second_derivative_weight_;
}
inline void QpSplineSmootherConfig::set_second_derivative_weight(double value) {
  set_has_second_derivative_weight();
  second_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 5 [default = 100];
inline bool QpSplineSmootherConfig::has_third_derivative_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QpSplineSmootherConfig::set_has_third_derivative_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QpSplineSmootherConfig::clear_has_third_derivative_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QpSplineSmootherConfig::clear_third_derivative_weight() {
  third_derivative_weight_ = 100;
  clear_has_third_derivative_weight();
}
inline double QpSplineSmootherConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.third_derivative_weight)
  return third_derivative_weight_;
}
inline void QpSplineSmootherConfig::set_third_derivative_weight(double value) {
  set_has_third_derivative_weight();
  third_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.third_derivative_weight)
}

// -------------------------------------------------------------------

// SpiralSmootherConfig

// optional double max_deviation = 1 [default = 0.1];
inline bool SpiralSmootherConfig::has_max_deviation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpiralSmootherConfig::set_has_max_deviation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpiralSmootherConfig::clear_has_max_deviation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpiralSmootherConfig::clear_max_deviation() {
  max_deviation_ = 0.1;
  clear_has_max_deviation();
}
inline double SpiralSmootherConfig::max_deviation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.max_deviation)
  return max_deviation_;
}
inline void SpiralSmootherConfig::set_max_deviation(double value) {
  set_has_max_deviation();
  max_deviation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.max_deviation)
}

// optional double piecewise_length = 2 [default = 10];
inline bool SpiralSmootherConfig::has_piecewise_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpiralSmootherConfig::set_has_piecewise_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpiralSmootherConfig::clear_has_piecewise_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpiralSmootherConfig::clear_piecewise_length() {
  piecewise_length_ = 10;
  clear_has_piecewise_length();
}
inline double SpiralSmootherConfig::piecewise_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.piecewise_length)
  return piecewise_length_;
}
inline void SpiralSmootherConfig::set_piecewise_length(double value) {
  set_has_piecewise_length();
  piecewise_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.piecewise_length)
}

// optional int32 max_iteration = 3 [default = 1000];
inline bool SpiralSmootherConfig::has_max_iteration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpiralSmootherConfig::set_has_max_iteration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpiralSmootherConfig::clear_has_max_iteration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpiralSmootherConfig::clear_max_iteration() {
  max_iteration_ = 1000;
  clear_has_max_iteration();
}
inline ::google::protobuf::int32 SpiralSmootherConfig::max_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.max_iteration)
  return max_iteration_;
}
inline void SpiralSmootherConfig::set_max_iteration(::google::protobuf::int32 value) {
  set_has_max_iteration();
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.max_iteration)
}

// optional double opt_tol = 4 [default = 1e-08];
inline bool SpiralSmootherConfig::has_opt_tol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpiralSmootherConfig::set_has_opt_tol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpiralSmootherConfig::clear_has_opt_tol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpiralSmootherConfig::clear_opt_tol() {
  opt_tol_ = 1e-08;
  clear_has_opt_tol();
}
inline double SpiralSmootherConfig::opt_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_tol)
  return opt_tol_;
}
inline void SpiralSmootherConfig::set_opt_tol(double value) {
  set_has_opt_tol();
  opt_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_tol)
}

// optional double opt_acceptable_tol = 5 [default = 1e-06];
inline bool SpiralSmootherConfig::has_opt_acceptable_tol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpiralSmootherConfig::set_has_opt_acceptable_tol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpiralSmootherConfig::clear_has_opt_acceptable_tol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpiralSmootherConfig::clear_opt_acceptable_tol() {
  opt_acceptable_tol_ = 1e-06;
  clear_has_opt_acceptable_tol();
}
inline double SpiralSmootherConfig::opt_acceptable_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_acceptable_tol)
  return opt_acceptable_tol_;
}
inline void SpiralSmootherConfig::set_opt_acceptable_tol(double value) {
  set_has_opt_acceptable_tol();
  opt_acceptable_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_acceptable_tol)
}

// optional int32 opt_acceptable_iteration = 6 [default = 15];
inline bool SpiralSmootherConfig::has_opt_acceptable_iteration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpiralSmootherConfig::set_has_opt_acceptable_iteration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpiralSmootherConfig::clear_has_opt_acceptable_iteration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpiralSmootherConfig::clear_opt_acceptable_iteration() {
  opt_acceptable_iteration_ = 15;
  clear_has_opt_acceptable_iteration();
}
inline ::google::protobuf::int32 SpiralSmootherConfig::opt_acceptable_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_acceptable_iteration)
  return opt_acceptable_iteration_;
}
inline void SpiralSmootherConfig::set_opt_acceptable_iteration(::google::protobuf::int32 value) {
  set_has_opt_acceptable_iteration();
  opt_acceptable_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_acceptable_iteration)
}

// optional double opt_weight_curve_length = 7 [default = 0];
inline bool SpiralSmootherConfig::has_opt_weight_curve_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpiralSmootherConfig::set_has_opt_weight_curve_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpiralSmootherConfig::clear_has_opt_weight_curve_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpiralSmootherConfig::clear_opt_weight_curve_length() {
  opt_weight_curve_length_ = 0;
  clear_has_opt_weight_curve_length();
}
inline double SpiralSmootherConfig::opt_weight_curve_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_curve_length)
  return opt_weight_curve_length_;
}
inline void SpiralSmootherConfig::set_opt_weight_curve_length(double value) {
  set_has_opt_weight_curve_length();
  opt_weight_curve_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_curve_length)
}

// optional double opt_weight_kappa = 8 [default = 1.5];
inline bool SpiralSmootherConfig::has_opt_weight_kappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpiralSmootherConfig::set_has_opt_weight_kappa() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpiralSmootherConfig::clear_has_opt_weight_kappa() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpiralSmootherConfig::clear_opt_weight_kappa() {
  opt_weight_kappa_ = 1.5;
  clear_has_opt_weight_kappa();
}
inline double SpiralSmootherConfig::opt_weight_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_kappa)
  return opt_weight_kappa_;
}
inline void SpiralSmootherConfig::set_opt_weight_kappa(double value) {
  set_has_opt_weight_kappa();
  opt_weight_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_kappa)
}

// optional double opt_weight_dkappa = 9 [default = 1];
inline bool SpiralSmootherConfig::has_opt_weight_dkappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpiralSmootherConfig::set_has_opt_weight_dkappa() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpiralSmootherConfig::clear_has_opt_weight_dkappa() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpiralSmootherConfig::clear_opt_weight_dkappa() {
  opt_weight_dkappa_ = 1;
  clear_has_opt_weight_dkappa();
}
inline double SpiralSmootherConfig::opt_weight_dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_dkappa)
  return opt_weight_dkappa_;
}
inline void SpiralSmootherConfig::set_opt_weight_dkappa(double value) {
  set_has_opt_weight_dkappa();
  opt_weight_dkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_dkappa)
}

// optional double opt_weight_d2kappa = 10 [default = 0];
inline bool SpiralSmootherConfig::has_opt_weight_d2kappa() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SpiralSmootherConfig::set_has_opt_weight_d2kappa() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SpiralSmootherConfig::clear_has_opt_weight_d2kappa() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SpiralSmootherConfig::clear_opt_weight_d2kappa() {
  opt_weight_d2kappa_ = 0;
  clear_has_opt_weight_d2kappa();
}
inline double SpiralSmootherConfig::opt_weight_d2kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_weight_d2kappa)
  return opt_weight_d2kappa_;
}
inline void SpiralSmootherConfig::set_opt_weight_d2kappa(double value) {
  set_has_opt_weight_d2kappa();
  opt_weight_d2kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_weight_d2kappa)
}

// -------------------------------------------------------------------

// CosThetaSmootherConfig

// optional double max_point_deviation = 1 [default = 5];
inline bool CosThetaSmootherConfig::has_max_point_deviation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CosThetaSmootherConfig::set_has_max_point_deviation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CosThetaSmootherConfig::clear_has_max_point_deviation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CosThetaSmootherConfig::clear_max_point_deviation() {
  max_point_deviation_ = 5;
  clear_has_max_point_deviation();
}
inline double CosThetaSmootherConfig::max_point_deviation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.max_point_deviation)
  return max_point_deviation_;
}
inline void CosThetaSmootherConfig::set_max_point_deviation(double value) {
  set_has_max_point_deviation();
  max_point_deviation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.max_point_deviation)
}

// optional int32 num_of_iteration = 2 [default = 10000];
inline bool CosThetaSmootherConfig::has_num_of_iteration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CosThetaSmootherConfig::set_has_num_of_iteration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CosThetaSmootherConfig::clear_has_num_of_iteration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CosThetaSmootherConfig::clear_num_of_iteration() {
  num_of_iteration_ = 10000;
  clear_has_num_of_iteration();
}
inline ::google::protobuf::int32 CosThetaSmootherConfig::num_of_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.num_of_iteration)
  return num_of_iteration_;
}
inline void CosThetaSmootherConfig::set_num_of_iteration(::google::protobuf::int32 value) {
  set_has_num_of_iteration();
  num_of_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.num_of_iteration)
}

// optional double weight_cos_included_angle = 3 [default = 10000];
inline bool CosThetaSmootherConfig::has_weight_cos_included_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CosThetaSmootherConfig::set_has_weight_cos_included_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CosThetaSmootherConfig::clear_has_weight_cos_included_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CosThetaSmootherConfig::clear_weight_cos_included_angle() {
  weight_cos_included_angle_ = 10000;
  clear_has_weight_cos_included_angle();
}
inline double CosThetaSmootherConfig::weight_cos_included_angle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.weight_cos_included_angle)
  return weight_cos_included_angle_;
}
inline void CosThetaSmootherConfig::set_weight_cos_included_angle(double value) {
  set_has_weight_cos_included_angle();
  weight_cos_included_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.weight_cos_included_angle)
}

// optional double acceptable_tol = 4 [default = 0.1];
inline bool CosThetaSmootherConfig::has_acceptable_tol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CosThetaSmootherConfig::set_has_acceptable_tol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CosThetaSmootherConfig::clear_has_acceptable_tol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CosThetaSmootherConfig::clear_acceptable_tol() {
  acceptable_tol_ = 0.1;
  clear_has_acceptable_tol();
}
inline double CosThetaSmootherConfig::acceptable_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.acceptable_tol)
  return acceptable_tol_;
}
inline void CosThetaSmootherConfig::set_acceptable_tol(double value) {
  set_has_acceptable_tol();
  acceptable_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.acceptable_tol)
}

// optional double relax = 5 [default = 0.2];
inline bool CosThetaSmootherConfig::has_relax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CosThetaSmootherConfig::set_has_relax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CosThetaSmootherConfig::clear_has_relax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CosThetaSmootherConfig::clear_relax() {
  relax_ = 0.2;
  clear_has_relax();
}
inline double CosThetaSmootherConfig::relax() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.relax)
  return relax_;
}
inline void CosThetaSmootherConfig::set_relax(double value) {
  set_has_relax();
  relax_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.relax)
}

// optional double reopt_qp_bound = 6 [default = 0.05];
inline bool CosThetaSmootherConfig::has_reopt_qp_bound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CosThetaSmootherConfig::set_has_reopt_qp_bound() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CosThetaSmootherConfig::clear_has_reopt_qp_bound() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CosThetaSmootherConfig::clear_reopt_qp_bound() {
  reopt_qp_bound_ = 0.05;
  clear_has_reopt_qp_bound();
}
inline double CosThetaSmootherConfig::reopt_qp_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CosThetaSmootherConfig.reopt_qp_bound)
  return reopt_qp_bound_;
}
inline void CosThetaSmootherConfig::set_reopt_qp_bound(double value) {
  set_has_reopt_qp_bound();
  reopt_qp_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CosThetaSmootherConfig.reopt_qp_bound)
}

// -------------------------------------------------------------------

// ReferenceLineSmootherConfig

// optional double max_constraint_interval = 1 [default = 5];
inline bool ReferenceLineSmootherConfig::has_max_constraint_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_max_constraint_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReferenceLineSmootherConfig::clear_has_max_constraint_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReferenceLineSmootherConfig::clear_max_constraint_interval() {
  max_constraint_interval_ = 5;
  clear_has_max_constraint_interval();
}
inline double ReferenceLineSmootherConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.max_constraint_interval)
  return max_constraint_interval_;
}
inline void ReferenceLineSmootherConfig::set_max_constraint_interval(double value) {
  set_has_max_constraint_interval();
  max_constraint_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.max_constraint_interval)
}

// optional double longitudinal_boundary_bound = 2 [default = 1];
inline bool ReferenceLineSmootherConfig::has_longitudinal_boundary_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_longitudinal_boundary_bound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferenceLineSmootherConfig::clear_has_longitudinal_boundary_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferenceLineSmootherConfig::clear_longitudinal_boundary_bound() {
  longitudinal_boundary_bound_ = 1;
  clear_has_longitudinal_boundary_bound();
}
inline double ReferenceLineSmootherConfig::longitudinal_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
  return longitudinal_boundary_bound_;
}
inline void ReferenceLineSmootherConfig::set_longitudinal_boundary_bound(double value) {
  set_has_longitudinal_boundary_bound();
  longitudinal_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
}

// optional double lateral_boundary_bound = 3 [default = 0.1];
inline bool ReferenceLineSmootherConfig::has_lateral_boundary_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_lateral_boundary_bound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReferenceLineSmootherConfig::clear_has_lateral_boundary_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReferenceLineSmootherConfig::clear_lateral_boundary_bound() {
  lateral_boundary_bound_ = 0.1;
  clear_has_lateral_boundary_bound();
}
inline double ReferenceLineSmootherConfig::lateral_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.lateral_boundary_bound)
  return lateral_boundary_bound_;
}
inline void ReferenceLineSmootherConfig::set_lateral_boundary_bound(double value) {
  set_has_lateral_boundary_bound();
  lateral_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.lateral_boundary_bound)
}

// optional uint32 num_of_total_points = 4 [default = 500];
inline bool ReferenceLineSmootherConfig::has_num_of_total_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_num_of_total_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReferenceLineSmootherConfig::clear_has_num_of_total_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReferenceLineSmootherConfig::clear_num_of_total_points() {
  num_of_total_points_ = 500u;
  clear_has_num_of_total_points();
}
inline ::google::protobuf::uint32 ReferenceLineSmootherConfig::num_of_total_points() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.num_of_total_points)
  return num_of_total_points_;
}
inline void ReferenceLineSmootherConfig::set_num_of_total_points(::google::protobuf::uint32 value) {
  set_has_num_of_total_points();
  num_of_total_points_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.num_of_total_points)
}

// optional double curb_shift = 5 [default = 0.2];
inline bool ReferenceLineSmootherConfig::has_curb_shift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_curb_shift() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReferenceLineSmootherConfig::clear_has_curb_shift() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReferenceLineSmootherConfig::clear_curb_shift() {
  curb_shift_ = 0.2;
  clear_has_curb_shift();
}
inline double ReferenceLineSmootherConfig::curb_shift() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.curb_shift)
  return curb_shift_;
}
inline void ReferenceLineSmootherConfig::set_curb_shift(double value) {
  set_has_curb_shift();
  curb_shift_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.curb_shift)
}

// optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
inline bool ReferenceLineSmootherConfig::has_driving_side() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_driving_side() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReferenceLineSmootherConfig::clear_has_driving_side() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReferenceLineSmootherConfig::clear_driving_side() {
  driving_side_ = 2;
  clear_has_driving_side();
}
inline ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::driving_side() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.driving_side)
  return static_cast< ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide >(driving_side_);
}
inline void ReferenceLineSmootherConfig::set_driving_side(::apollo::planning::ReferenceLineSmootherConfig_DrivingSide value) {
  assert(::apollo::planning::ReferenceLineSmootherConfig_DrivingSide_IsValid(value));
  set_has_driving_side();
  driving_side_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.driving_side)
}

// optional double wide_lane_threshold_factor = 7 [default = 2];
inline bool ReferenceLineSmootherConfig::has_wide_lane_threshold_factor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_wide_lane_threshold_factor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReferenceLineSmootherConfig::clear_has_wide_lane_threshold_factor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReferenceLineSmootherConfig::clear_wide_lane_threshold_factor() {
  wide_lane_threshold_factor_ = 2;
  clear_has_wide_lane_threshold_factor();
}
inline double ReferenceLineSmootherConfig::wide_lane_threshold_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.wide_lane_threshold_factor)
  return wide_lane_threshold_factor_;
}
inline void ReferenceLineSmootherConfig::set_wide_lane_threshold_factor(double value) {
  set_has_wide_lane_threshold_factor();
  wide_lane_threshold_factor_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.wide_lane_threshold_factor)
}

// optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
inline bool ReferenceLineSmootherConfig::has_wide_lane_shift_remain_factor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_wide_lane_shift_remain_factor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReferenceLineSmootherConfig::clear_has_wide_lane_shift_remain_factor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReferenceLineSmootherConfig::clear_wide_lane_shift_remain_factor() {
  wide_lane_shift_remain_factor_ = 0.5;
  clear_has_wide_lane_shift_remain_factor();
}
inline double ReferenceLineSmootherConfig::wide_lane_shift_remain_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.wide_lane_shift_remain_factor)
  return wide_lane_shift_remain_factor_;
}
inline void ReferenceLineSmootherConfig::set_wide_lane_shift_remain_factor(double value) {
  set_has_wide_lane_shift_remain_factor();
  wide_lane_shift_remain_factor_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.wide_lane_shift_remain_factor)
}

// optional double resolution = 9 [default = 0.02];
inline bool ReferenceLineSmootherConfig::has_resolution() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReferenceLineSmootherConfig::set_has_resolution() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReferenceLineSmootherConfig::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReferenceLineSmootherConfig::clear_resolution() {
  resolution_ = 0.02;
  clear_has_resolution();
}
inline double ReferenceLineSmootherConfig::resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.resolution)
  return resolution_;
}
inline void ReferenceLineSmootherConfig::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.resolution)
}

// optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
inline bool ReferenceLineSmootherConfig::has_qp_spline() const {
  return SmootherConfig_case() == kQpSpline;
}
inline void ReferenceLineSmootherConfig::set_has_qp_spline() {
  _oneof_case_[0] = kQpSpline;
}
inline void ReferenceLineSmootherConfig::clear_qp_spline() {
  if (has_qp_spline()) {
    delete SmootherConfig_.qp_spline_;
    clear_has_SmootherConfig();
  }
}
inline  const ::apollo::planning::QpSplineSmootherConfig& ReferenceLineSmootherConfig::qp_spline() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  return has_qp_spline()
      ? *SmootherConfig_.qp_spline_
      : ::apollo::planning::QpSplineSmootherConfig::default_instance();
}
inline ::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::mutable_qp_spline() {
  if (!has_qp_spline()) {
    clear_SmootherConfig();
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = new ::apollo::planning::QpSplineSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  return SmootherConfig_.qp_spline_;
}
inline ::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::release_qp_spline() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  if (has_qp_spline()) {
    clear_has_SmootherConfig();
    ::apollo::planning::QpSplineSmootherConfig* temp = SmootherConfig_.qp_spline_;
    SmootherConfig_.qp_spline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReferenceLineSmootherConfig::set_allocated_qp_spline(::apollo::planning::QpSplineSmootherConfig* qp_spline) {
  clear_SmootherConfig();
  if (qp_spline) {
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
}

// optional .apollo.planning.SpiralSmootherConfig spiral = 21;
inline bool ReferenceLineSmootherConfig::has_spiral() const {
  return SmootherConfig_case() == kSpiral;
}
inline void ReferenceLineSmootherConfig::set_has_spiral() {
  _oneof_case_[0] = kSpiral;
}
inline void ReferenceLineSmootherConfig::clear_spiral() {
  if (has_spiral()) {
    delete SmootherConfig_.spiral_;
    clear_has_SmootherConfig();
  }
}
inline  const ::apollo::planning::SpiralSmootherConfig& ReferenceLineSmootherConfig::spiral() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.spiral)
  return has_spiral()
      ? *SmootherConfig_.spiral_
      : ::apollo::planning::SpiralSmootherConfig::default_instance();
}
inline ::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::mutable_spiral() {
  if (!has_spiral()) {
    clear_SmootherConfig();
    set_has_spiral();
    SmootherConfig_.spiral_ = new ::apollo::planning::SpiralSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.spiral)
  return SmootherConfig_.spiral_;
}
inline ::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::release_spiral() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.spiral)
  if (has_spiral()) {
    clear_has_SmootherConfig();
    ::apollo::planning::SpiralSmootherConfig* temp = SmootherConfig_.spiral_;
    SmootherConfig_.spiral_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReferenceLineSmootherConfig::set_allocated_spiral(::apollo::planning::SpiralSmootherConfig* spiral) {
  clear_SmootherConfig();
  if (spiral) {
    set_has_spiral();
    SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.spiral)
}

// optional .apollo.planning.CosThetaSmootherConfig cos_theta = 22;
inline bool ReferenceLineSmootherConfig::has_cos_theta() const {
  return SmootherConfig_case() == kCosTheta;
}
inline void ReferenceLineSmootherConfig::set_has_cos_theta() {
  _oneof_case_[0] = kCosTheta;
}
inline void ReferenceLineSmootherConfig::clear_cos_theta() {
  if (has_cos_theta()) {
    delete SmootherConfig_.cos_theta_;
    clear_has_SmootherConfig();
  }
}
inline  const ::apollo::planning::CosThetaSmootherConfig& ReferenceLineSmootherConfig::cos_theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
  return has_cos_theta()
      ? *SmootherConfig_.cos_theta_
      : ::apollo::planning::CosThetaSmootherConfig::default_instance();
}
inline ::apollo::planning::CosThetaSmootherConfig* ReferenceLineSmootherConfig::mutable_cos_theta() {
  if (!has_cos_theta()) {
    clear_SmootherConfig();
    set_has_cos_theta();
    SmootherConfig_.cos_theta_ = new ::apollo::planning::CosThetaSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
  return SmootherConfig_.cos_theta_;
}
inline ::apollo::planning::CosThetaSmootherConfig* ReferenceLineSmootherConfig::release_cos_theta() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
  if (has_cos_theta()) {
    clear_has_SmootherConfig();
    ::apollo::planning::CosThetaSmootherConfig* temp = SmootherConfig_.cos_theta_;
    SmootherConfig_.cos_theta_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReferenceLineSmootherConfig::set_allocated_cos_theta(::apollo::planning::CosThetaSmootherConfig* cos_theta) {
  clear_SmootherConfig();
  if (cos_theta) {
    set_has_cos_theta();
    SmootherConfig_.cos_theta_ = cos_theta;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.cos_theta)
}

inline bool ReferenceLineSmootherConfig::has_SmootherConfig() const {
  return SmootherConfig_case() != SMOOTHERCONFIG_NOT_SET;
}
inline void ReferenceLineSmootherConfig::clear_has_SmootherConfig() {
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}
inline ReferenceLineSmootherConfig::SmootherConfigCase ReferenceLineSmootherConfig::SmootherConfig_case() const {
  return ReferenceLineSmootherConfig::SmootherConfigCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide>() {
  return ::apollo::planning::ReferenceLineSmootherConfig_DrivingSide_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2freference_5fline_5fsmoother_5fconfig_2eproto__INCLUDED
