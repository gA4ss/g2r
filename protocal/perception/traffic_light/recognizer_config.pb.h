// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light/recognizer_config.proto

#ifndef PROTOBUF_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto__INCLUDED
#define PROTOBUF_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace traffic_light {
namespace recognizer_config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
void protobuf_AssignDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
void protobuf_ShutdownFile_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();

class ModelConfigs;
class RecognizerConfig;

// ===================================================================

class RecognizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.recognizer_config.RecognizerConfig) */ {
 public:
  RecognizerConfig();
  virtual ~RecognizerConfig();

  RecognizerConfig(const RecognizerConfig& from);

  inline RecognizerConfig& operator=(const RecognizerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizerConfig& default_instance();

  void Swap(RecognizerConfig* other);

  // implements Message ----------------------------------------------

  inline RecognizerConfig* New() const { return New(NULL); }

  RecognizerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecognizerConfig& from);
  void MergeFrom(const RecognizerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecognizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string classify_model = 3;
  bool has_classify_model() const;
  void clear_classify_model();
  static const int kClassifyModelFieldNumber = 3;
  const ::std::string& classify_model() const;
  void set_classify_model(const ::std::string& value);
  void set_classify_model(const char* value);
  void set_classify_model(const char* value, size_t size);
  ::std::string* mutable_classify_model();
  ::std::string* release_classify_model();
  void set_allocated_classify_model(::std::string* classify_model);

  // optional string classify_net = 4;
  bool has_classify_net() const;
  void clear_classify_net();
  static const int kClassifyNetFieldNumber = 4;
  const ::std::string& classify_net() const;
  void set_classify_net(const ::std::string& value);
  void set_classify_net(const char* value);
  void set_classify_net(const char* value, size_t size);
  ::std::string* mutable_classify_net();
  ::std::string* release_classify_net();
  void set_allocated_classify_net(::std::string* classify_net);

  // optional float classify_threshold = 5;
  bool has_classify_threshold() const;
  void clear_classify_threshold();
  static const int kClassifyThresholdFieldNumber = 5;
  float classify_threshold() const;
  void set_classify_threshold(float value);

  // optional int32 classify_resize_width = 6;
  bool has_classify_resize_width() const;
  void clear_classify_resize_width();
  static const int kClassifyResizeWidthFieldNumber = 6;
  ::google::protobuf::int32 classify_resize_width() const;
  void set_classify_resize_width(::google::protobuf::int32 value);

  // optional int32 classify_resize_height = 7;
  bool has_classify_resize_height() const;
  void clear_classify_resize_height();
  static const int kClassifyResizeHeightFieldNumber = 7;
  ::google::protobuf::int32 classify_resize_height() const;
  void set_classify_resize_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_classify_model();
  inline void clear_has_classify_model();
  inline void set_has_classify_net();
  inline void clear_has_classify_net();
  inline void set_has_classify_threshold();
  inline void clear_has_classify_threshold();
  inline void set_has_classify_resize_width();
  inline void clear_has_classify_resize_width();
  inline void set_has_classify_resize_height();
  inline void clear_has_classify_resize_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr classify_model_;
  ::google::protobuf::internal::ArenaStringPtr classify_net_;
  float classify_threshold_;
  ::google::protobuf::int32 classify_resize_width_;
  ::google::protobuf::int32 classify_resize_height_;
  friend void  protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RecognizerConfig* default_instance_;
};
// -------------------------------------------------------------------

class ModelConfigs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.recognizer_config.ModelConfigs) */ {
 public:
  ModelConfigs();
  virtual ~ModelConfigs();

  ModelConfigs(const ModelConfigs& from);

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfigs& default_instance();

  void Swap(ModelConfigs* other);

  // implements Message ----------------------------------------------

  inline ModelConfigs* New() const { return New(NULL); }

  ModelConfigs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelConfigs& from);
  void MergeFrom(const ModelConfigs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
  int recognizer_config_size() const;
  void clear_recognizer_config();
  static const int kRecognizerConfigFieldNumber = 1;
  const ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig& recognizer_config(int index) const;
  ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* mutable_recognizer_config(int index);
  ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* add_recognizer_config();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >*
      mutable_recognizer_config();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >&
      recognizer_config() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig > recognizer_config_;
  friend void  protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ModelConfigs* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizerConfig

// optional string name = 1;
inline bool RecognizerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecognizerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecognizerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecognizerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RecognizerConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}
inline void RecognizerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}
inline void RecognizerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}
inline ::std::string* RecognizerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizerConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}

// optional string version = 2;
inline bool RecognizerConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecognizerConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecognizerConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecognizerConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& RecognizerConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}
inline void RecognizerConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}
inline void RecognizerConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}
inline ::std::string* RecognizerConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizerConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}

// optional string classify_model = 3;
inline bool RecognizerConfig::has_classify_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecognizerConfig::set_has_classify_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecognizerConfig::clear_has_classify_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecognizerConfig::clear_classify_model() {
  classify_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classify_model();
}
inline const ::std::string& RecognizerConfig::classify_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  return classify_model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_classify_model(const ::std::string& value) {
  set_has_classify_model();
  classify_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}
inline void RecognizerConfig::set_classify_model(const char* value) {
  set_has_classify_model();
  classify_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}
inline void RecognizerConfig::set_classify_model(const char* value, size_t size) {
  set_has_classify_model();
  classify_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}
inline ::std::string* RecognizerConfig::mutable_classify_model() {
  set_has_classify_model();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  return classify_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizerConfig::release_classify_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  clear_has_classify_model();
  return classify_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_allocated_classify_model(::std::string* classify_model) {
  if (classify_model != NULL) {
    set_has_classify_model();
  } else {
    clear_has_classify_model();
  }
  classify_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classify_model);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}

// optional string classify_net = 4;
inline bool RecognizerConfig::has_classify_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecognizerConfig::set_has_classify_net() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecognizerConfig::clear_has_classify_net() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecognizerConfig::clear_classify_net() {
  classify_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classify_net();
}
inline const ::std::string& RecognizerConfig::classify_net() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  return classify_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_classify_net(const ::std::string& value) {
  set_has_classify_net();
  classify_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}
inline void RecognizerConfig::set_classify_net(const char* value) {
  set_has_classify_net();
  classify_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}
inline void RecognizerConfig::set_classify_net(const char* value, size_t size) {
  set_has_classify_net();
  classify_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}
inline ::std::string* RecognizerConfig::mutable_classify_net() {
  set_has_classify_net();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  return classify_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizerConfig::release_classify_net() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  clear_has_classify_net();
  return classify_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizerConfig::set_allocated_classify_net(::std::string* classify_net) {
  if (classify_net != NULL) {
    set_has_classify_net();
  } else {
    clear_has_classify_net();
  }
  classify_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classify_net);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}

// optional float classify_threshold = 5;
inline bool RecognizerConfig::has_classify_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecognizerConfig::set_has_classify_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecognizerConfig::clear_has_classify_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecognizerConfig::clear_classify_threshold() {
  classify_threshold_ = 0;
  clear_has_classify_threshold();
}
inline float RecognizerConfig::classify_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_threshold)
  return classify_threshold_;
}
inline void RecognizerConfig::set_classify_threshold(float value) {
  set_has_classify_threshold();
  classify_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_threshold)
}

// optional int32 classify_resize_width = 6;
inline bool RecognizerConfig::has_classify_resize_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecognizerConfig::set_has_classify_resize_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecognizerConfig::clear_has_classify_resize_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecognizerConfig::clear_classify_resize_width() {
  classify_resize_width_ = 0;
  clear_has_classify_resize_width();
}
inline ::google::protobuf::int32 RecognizerConfig::classify_resize_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_width)
  return classify_resize_width_;
}
inline void RecognizerConfig::set_classify_resize_width(::google::protobuf::int32 value) {
  set_has_classify_resize_width();
  classify_resize_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_width)
}

// optional int32 classify_resize_height = 7;
inline bool RecognizerConfig::has_classify_resize_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecognizerConfig::set_has_classify_resize_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecognizerConfig::clear_has_classify_resize_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecognizerConfig::clear_classify_resize_height() {
  classify_resize_height_ = 0;
  clear_has_classify_resize_height();
}
inline ::google::protobuf::int32 RecognizerConfig::classify_resize_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_height)
  return classify_resize_height_;
}
inline void RecognizerConfig::set_classify_resize_height(::google::protobuf::int32 value) {
  set_has_classify_resize_height();
  classify_resize_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_height)
}

// -------------------------------------------------------------------

// ModelConfigs

// repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
inline int ModelConfigs::recognizer_config_size() const {
  return recognizer_config_.size();
}
inline void ModelConfigs::clear_recognizer_config() {
  recognizer_config_.Clear();
}
inline const ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig& ModelConfigs::recognizer_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_.Get(index);
}
inline ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* ModelConfigs::mutable_recognizer_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_.Mutable(index);
}
inline ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* ModelConfigs::add_recognizer_config() {
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >*
ModelConfigs::mutable_recognizer_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return &recognizer_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >&
ModelConfigs::recognizer_config() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace recognizer_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto__INCLUDED
