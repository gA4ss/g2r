// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light/rectifier_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/traffic_light/rectifier_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace traffic_light {
namespace rectifier_config {

namespace {

const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/traffic_light/rectifier_config.proto");
  GOOGLE_CHECK(file != NULL);
  ModelConfigs_descriptor_ = file->message_type(0);
  static const int ModelConfigs_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, crop_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, crop_min_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, detection_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, detection_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, crop_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, detect_method_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto() {
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
}

void protobuf_AddDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/perception/traffic_light/rectifier_con"
    "fig.proto\0220apollo.perception.traffic_lig"
    "ht.rectifier_config\"\264\001\n\014ModelConfigs\022\014\n\004"
    "name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\022\n\ncrop_scal"
    "e\030\003 \001(\002\022\025\n\rcrop_min_size\030\004 \001(\005\022\027\n\017detect"
    "ion_model\030\005 \001(\t\022\025\n\rdetection_net\030\006 \001(\t\022\023"
    "\n\013crop_method\030\007 \001(\005\022\025\n\rdetect_method\030\010 \001"
    "(\005", 282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/traffic_light/rectifier_config.proto", &protobuf_RegisterTypes);
  ModelConfigs::default_instance_ = new ModelConfigs();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kCropScaleFieldNumber;
const int ModelConfigs::kCropMinSizeFieldNumber;
const int ModelConfigs::kDetectionModelFieldNumber;
const int ModelConfigs::kDetectionNetFieldNumber;
const int ModelConfigs::kCropMethodFieldNumber;
const int ModelConfigs::kDetectMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_scale_ = 0;
  crop_min_size_ = 0;
  detection_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_method_ = 0;
  detect_method_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2frectifier_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ModelConfigs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModelConfigs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(crop_scale_, crop_min_size_);
    ZR_(crop_method_, detect_method_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_detection_model()) {
      detection_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_detection_net()) {
      detection_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.rectifier_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.rectifier_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_crop_scale;
        break;
      }

      // optional float crop_scale = 3;
      case 3: {
        if (tag == 29) {
         parse_crop_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crop_scale_)));
          set_has_crop_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crop_min_size;
        break;
      }

      // optional int32 crop_min_size = 4;
      case 4: {
        if (tag == 32) {
         parse_crop_min_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_min_size_)));
          set_has_crop_min_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_detection_model;
        break;
      }

      // optional string detection_model = 5;
      case 5: {
        if (tag == 42) {
         parse_detection_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detection_model().data(), this->detection_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_detection_net;
        break;
      }

      // optional string detection_net = 6;
      case 6: {
        if (tag == 50) {
         parse_detection_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detection_net().data(), this->detection_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_crop_method;
        break;
      }

      // optional int32 crop_method = 7;
      case 7: {
        if (tag == 56) {
         parse_crop_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_method_)));
          set_has_crop_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_detect_method;
        break;
      }

      // optional int32 detect_method = 8;
      case 8: {
        if (tag == 64) {
         parse_detect_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detect_method_)));
          set_has_detect_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional float crop_scale = 3;
  if (has_crop_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->crop_scale(), output);
  }

  // optional int32 crop_min_size = 4;
  if (has_crop_min_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->crop_min_size(), output);
  }

  // optional string detection_model = 5;
  if (has_detection_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detection_model().data(), this->detection_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->detection_model(), output);
  }

  // optional string detection_net = 6;
  if (has_detection_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detection_net().data(), this->detection_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->detection_net(), output);
  }

  // optional int32 crop_method = 7;
  if (has_crop_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->crop_method(), output);
  }

  // optional int32 detect_method = 8;
  if (has_detect_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->detect_method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional float crop_scale = 3;
  if (has_crop_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->crop_scale(), target);
  }

  // optional int32 crop_min_size = 4;
  if (has_crop_min_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->crop_min_size(), target);
  }

  // optional string detection_model = 5;
  if (has_detection_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detection_model().data(), this->detection_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->detection_model(), target);
  }

  // optional string detection_net = 6;
  if (has_detection_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detection_net().data(), this->detection_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->detection_net(), target);
  }

  // optional int32 crop_method = 7;
  if (has_crop_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->crop_method(), target);
  }

  // optional int32 detect_method = 8;
  if (has_detect_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->detect_method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional float crop_scale = 3;
    if (has_crop_scale()) {
      total_size += 1 + 4;
    }

    // optional int32 crop_min_size = 4;
    if (has_crop_min_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crop_min_size());
    }

    // optional string detection_model = 5;
    if (has_detection_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detection_model());
    }

    // optional string detection_net = 6;
    if (has_detection_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detection_net());
    }

    // optional int32 crop_method = 7;
    if (has_crop_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crop_method());
    }

    // optional int32 detect_method = 8;
    if (has_detect_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detect_method());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_crop_scale()) {
      set_crop_scale(from.crop_scale());
    }
    if (from.has_crop_min_size()) {
      set_crop_min_size(from.crop_min_size());
    }
    if (from.has_detection_model()) {
      set_has_detection_model();
      detection_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_model_);
    }
    if (from.has_detection_net()) {
      set_has_detection_net();
      detection_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_net_);
    }
    if (from.has_crop_method()) {
      set_crop_method(from.crop_method());
    }
    if (from.has_detect_method()) {
      set_detect_method(from.detect_method());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.rectifier_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(crop_scale_, other->crop_scale_);
  std::swap(crop_min_size_, other->crop_min_size_);
  detection_model_.Swap(&other->detection_model_);
  detection_net_.Swap(&other->detection_net_);
  std::swap(crop_method_, other->crop_method_);
  std::swap(detect_method_, other->detect_method_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1;
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.rectifier_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.rectifier_config.ModelConfigs.name)
}
 ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.rectifier_config.ModelConfigs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.rectifier_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.rectifier_config.ModelConfigs.name)
}

// optional string version = 2;
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.rectifier_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.rectifier_config.ModelConfigs.version)
}
 ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.rectifier_config.ModelConfigs.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.rectifier_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.rectifier_config.ModelConfigs.version)
}

// optional float crop_scale = 3;
bool ModelConfigs::has_crop_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_crop_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_crop_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_crop_scale() {
  crop_scale_ = 0;
  clear_has_crop_scale();
}
 float ModelConfigs::crop_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.crop_scale)
  return crop_scale_;
}
 void ModelConfigs::set_crop_scale(float value) {
  set_has_crop_scale();
  crop_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.crop_scale)
}

// optional int32 crop_min_size = 4;
bool ModelConfigs::has_crop_min_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_crop_min_size() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_crop_min_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_crop_min_size() {
  crop_min_size_ = 0;
  clear_has_crop_min_size();
}
 ::google::protobuf::int32 ModelConfigs::crop_min_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.crop_min_size)
  return crop_min_size_;
}
 void ModelConfigs::set_crop_min_size(::google::protobuf::int32 value) {
  set_has_crop_min_size();
  crop_min_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.crop_min_size)
}

// optional string detection_model = 5;
bool ModelConfigs::has_detection_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_detection_model() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_detection_model() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_detection_model() {
  detection_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detection_model();
}
 const ::std::string& ModelConfigs::detection_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model)
  return detection_model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_detection_model(const ::std::string& value) {
  set_has_detection_model();
  detection_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model)
}
 void ModelConfigs::set_detection_model(const char* value) {
  set_has_detection_model();
  detection_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model)
}
 void ModelConfigs::set_detection_model(const char* value, size_t size) {
  set_has_detection_model();
  detection_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model)
}
 ::std::string* ModelConfigs::mutable_detection_model() {
  set_has_detection_model();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model)
  return detection_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_detection_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model)
  clear_has_detection_model();
  return detection_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_detection_model(::std::string* detection_model) {
  if (detection_model != NULL) {
    set_has_detection_model();
  } else {
    clear_has_detection_model();
  }
  detection_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_model);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_model)
}

// optional string detection_net = 6;
bool ModelConfigs::has_detection_net() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_detection_net() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelConfigs::clear_has_detection_net() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelConfigs::clear_detection_net() {
  detection_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detection_net();
}
 const ::std::string& ModelConfigs::detection_net() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net)
  return detection_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_detection_net(const ::std::string& value) {
  set_has_detection_net();
  detection_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net)
}
 void ModelConfigs::set_detection_net(const char* value) {
  set_has_detection_net();
  detection_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net)
}
 void ModelConfigs::set_detection_net(const char* value, size_t size) {
  set_has_detection_net();
  detection_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net)
}
 ::std::string* ModelConfigs::mutable_detection_net() {
  set_has_detection_net();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net)
  return detection_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelConfigs::release_detection_net() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net)
  clear_has_detection_net();
  return detection_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelConfigs::set_allocated_detection_net(::std::string* detection_net) {
  if (detection_net != NULL) {
    set_has_detection_net();
  } else {
    clear_has_detection_net();
  }
  detection_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_net);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detection_net)
}

// optional int32 crop_method = 7;
bool ModelConfigs::has_crop_method() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_crop_method() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_crop_method() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_crop_method() {
  crop_method_ = 0;
  clear_has_crop_method();
}
 ::google::protobuf::int32 ModelConfigs::crop_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.crop_method)
  return crop_method_;
}
 void ModelConfigs::set_crop_method(::google::protobuf::int32 value) {
  set_has_crop_method();
  crop_method_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.crop_method)
}

// optional int32 detect_method = 8;
bool ModelConfigs::has_detect_method() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelConfigs::set_has_detect_method() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelConfigs::clear_has_detect_method() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelConfigs::clear_detect_method() {
  detect_method_ = 0;
  clear_has_detect_method();
}
 ::google::protobuf::int32 ModelConfigs::detect_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detect_method)
  return detect_method_;
}
 void ModelConfigs::set_detect_method(::google::protobuf::int32 value) {
  set_has_detect_method();
  detect_method_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.rectifier_config.ModelConfigs.detect_method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rectifier_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
