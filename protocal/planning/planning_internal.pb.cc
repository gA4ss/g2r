// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/planning_internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/planning_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning_internal {

namespace {

const ::google::protobuf::Descriptor* Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* StGraphBoundaryDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StGraphBoundaryDebug_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SLFrameDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLFrameDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* STGraphDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STGraphDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* STGraphDebug_STGraphSpeedConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STGraphDebug_STGraphSpeedConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelCuiseRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STGraphDebug_STGraphKernelCuiseRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelFollowRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STGraphDebug_STGraphKernelFollowRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalLightDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalLightDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalLightDebug_SignalDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalLightDebug_SignalDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecisionTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceLineDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceLineDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleLayerDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleLayerDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* DpPolyGraphDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DpPolyGraphDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanningData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatticeStPixel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatticeStPixel_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatticeStTraining_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatticeStTraining_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostComponents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostComponents_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoTuningTrainingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoTuningTrainingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloudReferenceLineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloudReferenceLineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloudReferenceLineRoutingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloudReferenceLineRoutingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloudReferenceLineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloudReferenceLineResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fplanning_5finternal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fplanning_5finternal_2eproto() {
  protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/planning_internal.proto");
  GOOGLE_CHECK(file != NULL);
  Debug_descriptor_ = file->message_type(0);
  static const int Debug_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, planning_data_),
  };
  Debug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Debug_descriptor_,
      Debug::default_instance_,
      Debug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _has_bits_[0]),
      -1,
      -1,
      sizeof(Debug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _internal_metadata_),
      -1);
  SpeedPlan_descriptor_ = file->message_type(1);
  static const int SpeedPlan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, speed_point_),
  };
  SpeedPlan_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeedPlan_descriptor_,
      SpeedPlan::default_instance_,
      SpeedPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpeedPlan),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, _internal_metadata_),
      -1);
  StGraphBoundaryDebug_descriptor_ = file->message_type(2);
  static const int StGraphBoundaryDebug_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, type_),
  };
  StGraphBoundaryDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StGraphBoundaryDebug_descriptor_,
      StGraphBoundaryDebug::default_instance_,
      StGraphBoundaryDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(StGraphBoundaryDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, _internal_metadata_),
      -1);
  StGraphBoundaryDebug_StBoundaryType_descriptor_ = StGraphBoundaryDebug_descriptor_->enum_type(0);
  SLFrameDebug_descriptor_ = file->message_type(3);
  static const int SLFrameDebug_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, sampled_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, static_obstacle_lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, dynamic_obstacle_lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, static_obstacle_upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, dynamic_obstacle_upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, map_lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, map_upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, sl_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_high_),
  };
  SLFrameDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLFrameDebug_descriptor_,
      SLFrameDebug::default_instance_,
      SLFrameDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(SLFrameDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, _internal_metadata_),
      -1);
  STGraphDebug_descriptor_ = file->message_type(4);
  static const int STGraphDebug_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, kernel_cruise_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, kernel_follow_ref_),
  };
  STGraphDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      STGraphDebug_descriptor_,
      STGraphDebug::default_instance_,
      STGraphDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(STGraphDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, _internal_metadata_),
      -1);
  STGraphDebug_STGraphSpeedConstraint_descriptor_ = STGraphDebug_descriptor_->nested_type(0);
  static const int STGraphDebug_STGraphSpeedConstraint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, upper_bound_),
  };
  STGraphDebug_STGraphSpeedConstraint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      STGraphDebug_STGraphSpeedConstraint_descriptor_,
      STGraphDebug_STGraphSpeedConstraint::default_instance_,
      STGraphDebug_STGraphSpeedConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, _has_bits_[0]),
      -1,
      -1,
      sizeof(STGraphDebug_STGraphSpeedConstraint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, _internal_metadata_),
      -1);
  STGraphDebug_STGraphKernelCuiseRef_descriptor_ = STGraphDebug_descriptor_->nested_type(1);
  static const int STGraphDebug_STGraphKernelCuiseRef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, cruise_line_s_),
  };
  STGraphDebug_STGraphKernelCuiseRef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      STGraphDebug_STGraphKernelCuiseRef_descriptor_,
      STGraphDebug_STGraphKernelCuiseRef::default_instance_,
      STGraphDebug_STGraphKernelCuiseRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, _has_bits_[0]),
      -1,
      -1,
      sizeof(STGraphDebug_STGraphKernelCuiseRef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, _internal_metadata_),
      -1);
  STGraphDebug_STGraphKernelFollowRef_descriptor_ = STGraphDebug_descriptor_->nested_type(2);
  static const int STGraphDebug_STGraphKernelFollowRef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, follow_line_s_),
  };
  STGraphDebug_STGraphKernelFollowRef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      STGraphDebug_STGraphKernelFollowRef_descriptor_,
      STGraphDebug_STGraphKernelFollowRef::default_instance_,
      STGraphDebug_STGraphKernelFollowRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, _has_bits_[0]),
      -1,
      -1,
      sizeof(STGraphDebug_STGraphKernelFollowRef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, _internal_metadata_),
      -1);
  SignalLightDebug_descriptor_ = file->message_type(5);
  static const int SignalLightDebug_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, adc_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, adc_front_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, signal_),
  };
  SignalLightDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignalLightDebug_descriptor_,
      SignalLightDebug::default_instance_,
      SignalLightDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignalLightDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, _internal_metadata_),
      -1);
  SignalLightDebug_SignalDebug_descriptor_ = SignalLightDebug_descriptor_->nested_type(0);
  static const int SignalLightDebug_SignalDebug_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, light_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, light_stop_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, adc_stop_deacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, is_stop_wall_created_),
  };
  SignalLightDebug_SignalDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignalLightDebug_SignalDebug_descriptor_,
      SignalLightDebug_SignalDebug::default_instance_,
      SignalLightDebug_SignalDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignalLightDebug_SignalDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, _internal_metadata_),
      -1);
  DecisionTag_descriptor_ = file->message_type(6);
  static const int DecisionTag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, decider_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, decision_),
  };
  DecisionTag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DecisionTag_descriptor_,
      DecisionTag::default_instance_,
      DecisionTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, _has_bits_[0]),
      -1,
      -1,
      sizeof(DecisionTag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, _internal_metadata_),
      -1);
  ObstacleDebug_descriptor_ = file->message_type(7);
  static const int ObstacleDebug_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, sl_boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, decision_tag_),
  };
  ObstacleDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObstacleDebug_descriptor_,
      ObstacleDebug::default_instance_,
      ObstacleDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObstacleDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, _internal_metadata_),
      -1);
  ReferenceLineDebug_descriptor_ = file->message_type(8);
  static const int ReferenceLineDebug_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_change_lane_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_drivable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_protected_),
  };
  ReferenceLineDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReferenceLineDebug_descriptor_,
      ReferenceLineDebug::default_instance_,
      ReferenceLineDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReferenceLineDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, _internal_metadata_),
      -1);
  SampleLayerDebug_descriptor_ = file->message_type(9);
  static const int SampleLayerDebug_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, sl_point_),
  };
  SampleLayerDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SampleLayerDebug_descriptor_,
      SampleLayerDebug::default_instance_,
      SampleLayerDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(SampleLayerDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, _internal_metadata_),
      -1);
  DpPolyGraphDebug_descriptor_ = file->message_type(10);
  static const int DpPolyGraphDebug_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, sample_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, min_cost_point_),
  };
  DpPolyGraphDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DpPolyGraphDebug_descriptor_,
      DpPolyGraphDebug::default_instance_,
      DpPolyGraphDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(DpPolyGraphDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, _internal_metadata_),
      -1);
  PlanningData_descriptor_ = file->message_type(11);
  static const int PlanningData_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, adc_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, chassis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, routing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, init_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, speed_plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, st_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, sl_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, prediction_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, signal_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, reference_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, dp_poly_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, lattice_st_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, relative_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, auto_tuning_training_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, front_clear_distance_),
  };
  PlanningData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlanningData_descriptor_,
      PlanningData::default_instance_,
      PlanningData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlanningData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _internal_metadata_),
      -1);
  LatticeStPixel_descriptor_ = file->message_type(12);
  static const int LatticeStPixel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, b_),
  };
  LatticeStPixel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LatticeStPixel_descriptor_,
      LatticeStPixel::default_instance_,
      LatticeStPixel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, _has_bits_[0]),
      -1,
      -1,
      sizeof(LatticeStPixel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, _internal_metadata_),
      -1);
  LatticeStTraining_descriptor_ = file->message_type(13);
  static const int LatticeStTraining_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, pixel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, annotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, num_s_grids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, num_t_grids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, s_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, t_resolution_),
  };
  LatticeStTraining_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LatticeStTraining_descriptor_,
      LatticeStTraining::default_instance_,
      LatticeStTraining_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, _has_bits_[0]),
      -1,
      -1,
      sizeof(LatticeStTraining),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, _internal_metadata_),
      -1);
  CostComponents_descriptor_ = file->message_type(14);
  static const int CostComponents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostComponents, cost_component_),
  };
  CostComponents_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CostComponents_descriptor_,
      CostComponents::default_instance_,
      CostComponents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostComponents, _has_bits_[0]),
      -1,
      -1,
      sizeof(CostComponents),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostComponents, _internal_metadata_),
      -1);
  AutoTuningTrainingData_descriptor_ = file->message_type(15);
  static const int AutoTuningTrainingData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, teacher_component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, student_component_),
  };
  AutoTuningTrainingData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutoTuningTrainingData_descriptor_,
      AutoTuningTrainingData::default_instance_,
      AutoTuningTrainingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, _has_bits_[0]),
      -1,
      -1,
      sizeof(AutoTuningTrainingData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, _internal_metadata_),
      -1);
  CloudReferenceLineRequest_descriptor_ = file->message_type(16);
  static const int CloudReferenceLineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRequest, lane_segment_),
  };
  CloudReferenceLineRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloudReferenceLineRequest_descriptor_,
      CloudReferenceLineRequest::default_instance_,
      CloudReferenceLineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CloudReferenceLineRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRequest, _internal_metadata_),
      -1);
  CloudReferenceLineRoutingRequest_descriptor_ = file->message_type(17);
  static const int CloudReferenceLineRoutingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRoutingRequest, routing_),
  };
  CloudReferenceLineRoutingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloudReferenceLineRoutingRequest_descriptor_,
      CloudReferenceLineRoutingRequest::default_instance_,
      CloudReferenceLineRoutingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRoutingRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CloudReferenceLineRoutingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRoutingRequest, _internal_metadata_),
      -1);
  CloudReferenceLineResponse_descriptor_ = file->message_type(18);
  static const int CloudReferenceLineResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineResponse, segment_),
  };
  CloudReferenceLineResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloudReferenceLineResponse_descriptor_,
      CloudReferenceLineResponse::default_instance_,
      CloudReferenceLineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CloudReferenceLineResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineResponse, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fplanning_5finternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Debug_descriptor_, &Debug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeedPlan_descriptor_, &SpeedPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StGraphBoundaryDebug_descriptor_, &StGraphBoundaryDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLFrameDebug_descriptor_, &SLFrameDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      STGraphDebug_descriptor_, &STGraphDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      STGraphDebug_STGraphSpeedConstraint_descriptor_, &STGraphDebug_STGraphSpeedConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      STGraphDebug_STGraphKernelCuiseRef_descriptor_, &STGraphDebug_STGraphKernelCuiseRef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      STGraphDebug_STGraphKernelFollowRef_descriptor_, &STGraphDebug_STGraphKernelFollowRef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignalLightDebug_descriptor_, &SignalLightDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignalLightDebug_SignalDebug_descriptor_, &SignalLightDebug_SignalDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DecisionTag_descriptor_, &DecisionTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObstacleDebug_descriptor_, &ObstacleDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReferenceLineDebug_descriptor_, &ReferenceLineDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SampleLayerDebug_descriptor_, &SampleLayerDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DpPolyGraphDebug_descriptor_, &DpPolyGraphDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlanningData_descriptor_, &PlanningData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LatticeStPixel_descriptor_, &LatticeStPixel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LatticeStTraining_descriptor_, &LatticeStTraining::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CostComponents_descriptor_, &CostComponents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutoTuningTrainingData_descriptor_, &AutoTuningTrainingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloudReferenceLineRequest_descriptor_, &CloudReferenceLineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloudReferenceLineRoutingRequest_descriptor_, &CloudReferenceLineRoutingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloudReferenceLineResponse_descriptor_, &CloudReferenceLineResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fplanning_5finternal_2eproto() {
  delete Debug::default_instance_;
  delete Debug_reflection_;
  delete SpeedPlan::default_instance_;
  delete SpeedPlan_reflection_;
  delete StGraphBoundaryDebug::default_instance_;
  delete StGraphBoundaryDebug_reflection_;
  delete SLFrameDebug::default_instance_;
  delete SLFrameDebug_reflection_;
  delete STGraphDebug::default_instance_;
  delete STGraphDebug_reflection_;
  delete STGraphDebug_STGraphSpeedConstraint::default_instance_;
  delete STGraphDebug_STGraphSpeedConstraint_reflection_;
  delete STGraphDebug_STGraphKernelCuiseRef::default_instance_;
  delete STGraphDebug_STGraphKernelCuiseRef_reflection_;
  delete STGraphDebug_STGraphKernelFollowRef::default_instance_;
  delete STGraphDebug_STGraphKernelFollowRef_reflection_;
  delete SignalLightDebug::default_instance_;
  delete SignalLightDebug_reflection_;
  delete SignalLightDebug_SignalDebug::default_instance_;
  delete SignalLightDebug_SignalDebug_reflection_;
  delete DecisionTag::default_instance_;
  delete DecisionTag_reflection_;
  delete ObstacleDebug::default_instance_;
  delete ObstacleDebug_reflection_;
  delete ReferenceLineDebug::default_instance_;
  delete ReferenceLineDebug_reflection_;
  delete SampleLayerDebug::default_instance_;
  delete SampleLayerDebug_reflection_;
  delete DpPolyGraphDebug::default_instance_;
  delete DpPolyGraphDebug_reflection_;
  delete PlanningData::default_instance_;
  delete PlanningData_reflection_;
  delete LatticeStPixel::default_instance_;
  delete LatticeStPixel_reflection_;
  delete LatticeStTraining::default_instance_;
  delete LatticeStTraining_reflection_;
  delete CostComponents::default_instance_;
  delete CostComponents_reflection_;
  delete AutoTuningTrainingData::default_instance_;
  delete AutoTuningTrainingData_reflection_;
  delete CloudReferenceLineRequest::default_instance_;
  delete CloudReferenceLineRequest_reflection_;
  delete CloudReferenceLineRoutingRequest::default_instance_;
  delete CloudReferenceLineRoutingRequest_reflection_;
  delete CloudReferenceLineResponse::default_instance_;
  delete CloudReferenceLineResponse_reflection_;
}

void protobuf_AddDesc_planning_2fplanning_5finternal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fplanning_5finternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::canbus::protobuf_AddDesc_canbus_2fchassis_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::apollo::localization::protobuf_AddDesc_localization_2flocalization_2eproto();
  ::apollo::relative_map::protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto();
  ::apollo::routing::protobuf_AddDesc_routing_2frouting_2eproto();
  ::apollo::perception::protobuf_AddDesc_perception_2ftraffic_5flight_5fdetection_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fsl_5fboundary_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fdecision_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n planning/planning_internal.proto\022\030apol"
    "lo.planning_internal\032\023common/header.prot"
    "o\032\024canbus/chassis.proto\032\026common/pnc_poin"
    "t.proto\032\037localization/localization.proto"
    "\032!map/relative_map/navigation.proto\032\025rou"
    "ting/routing.proto\032(perception/traffic_l"
    "ight_detection.proto\032\032planning/sl_bounda"
    "ry.proto\032\027planning/decision.proto\"F\n\005Deb"
    "ug\022=\n\rplanning_data\030\002 \001(\0132&.apollo.plann"
    "ing_internal.PlanningData\"I\n\tSpeedPlan\022\014"
    "\n\004name\030\001 \001(\t\022.\n\013speed_point\030\002 \003(\0132\031.apol"
    "lo.common.SpeedPoint\"\340\002\n\024StGraphBoundary"
    "Debug\022\014\n\004name\030\001 \001(\t\022(\n\005point\030\002 \003(\0132\031.apo"
    "llo.common.SpeedPoint\022K\n\004type\030\003 \001(\0162=.ap"
    "ollo.planning_internal.StGraphBoundaryDe"
    "bug.StBoundaryType\"\302\001\n\016StBoundaryType\022\034\n"
    "\030ST_BOUNDARY_TYPE_UNKNOWN\020\001\022\031\n\025ST_BOUNDA"
    "RY_TYPE_STOP\020\002\022\033\n\027ST_BOUNDARY_TYPE_FOLLO"
    "W\020\003\022\032\n\026ST_BOUNDARY_TYPE_YIELD\020\004\022\035\n\031ST_BO"
    "UNDARY_TYPE_OVERTAKE\020\005\022\037\n\033ST_BOUNDARY_TY"
    "PE_KEEP_CLEAR\020\006\"\202\003\n\014SLFrameDebug\022\014\n\004name"
    "\030\001 \001(\t\022\021\n\tsampled_s\030\002 \003(\001\022#\n\033static_obst"
    "acle_lower_bound\030\003 \003(\001\022$\n\034dynamic_obstac"
    "le_lower_bound\030\004 \003(\001\022#\n\033static_obstacle_"
    "upper_bound\030\005 \003(\001\022$\n\034dynamic_obstacle_up"
    "per_bound\030\006 \003(\001\022\027\n\017map_lower_bound\030\007 \003(\001"
    "\022\027\n\017map_upper_bound\030\010 \003(\001\022\'\n\007sl_path\030\t \003"
    "(\0132\026.apollo.common.SLPoint\022\035\n\025aggregated"
    "_boundary_s\030\n \003(\001\022\037\n\027aggregated_boundary"
    "_low\030\013 \003(\001\022 \n\030aggregated_boundary_high\030\014"
    " \003(\001\"\222\005\n\014STGraphDebug\022\014\n\004name\030\001 \001(\t\022@\n\010b"
    "oundary\030\002 \003(\0132..apollo.planning_internal"
    ".StGraphBoundaryDebug\022.\n\013speed_limit\030\003 \003"
    "(\0132\031.apollo.common.SpeedPoint\0220\n\rspeed_p"
    "rofile\030\004 \003(\0132\031.apollo.common.SpeedPoint\022"
    "W\n\020speed_constraint\030\005 \001(\0132=.apollo.plann"
    "ing_internal.STGraphDebug.STGraphSpeedCo"
    "nstraint\022W\n\021kernel_cruise_ref\030\006 \001(\0132<.ap"
    "ollo.planning_internal.STGraphDebug.STGr"
    "aphKernelCuiseRef\022X\n\021kernel_follow_ref\030\007"
    " \001(\0132=.apollo.planning_internal.STGraphD"
    "ebug.STGraphKernelFollowRef\032M\n\026STGraphSp"
    "eedConstraint\022\t\n\001t\030\001 \003(\001\022\023\n\013lower_bound\030"
    "\002 \003(\001\022\023\n\013upper_bound\030\003 \003(\001\0329\n\025STGraphKer"
    "nelCuiseRef\022\t\n\001t\030\001 \003(\001\022\025\n\rcruise_line_s\030"
    "\002 \003(\001\032:\n\026STGraphKernelFollowRef\022\t\n\001t\030\001 \003"
    "(\001\022\025\n\rfollow_line_s\030\002 \003(\001\"\257\002\n\020SignalLigh"
    "tDebug\022\021\n\tadc_speed\030\001 \001(\001\022\023\n\013adc_front_s"
    "\030\002 \001(\001\022F\n\006signal\030\003 \003(\01326.apollo.planning"
    "_internal.SignalLightDebug.SignalDebug\032\252"
    "\001\n\013SignalDebug\022\020\n\010light_id\030\001 \001(\t\0224\n\005colo"
    "r\030\002 \001(\0162%.apollo.perception.TrafficLight"
    ".Color\022\024\n\014light_stop_s\030\003 \001(\001\022\037\n\027adc_stop"
    "_deacceleration\030\004 \001(\001\022\034\n\024is_stop_wall_cr"
    "eated\030\005 \001(\010\"Y\n\013DecisionTag\022\023\n\013decider_ta"
    "g\030\001 \001(\t\0225\n\010decision\030\002 \001(\0132#.apollo.plann"
    "ing.ObjectDecisionType\"\212\001\n\rObstacleDebug"
    "\022\n\n\002id\030\001 \001(\t\0220\n\013sl_boundary\030\002 \001(\0132\033.apol"
    "lo.planning.SLBoundary\022;\n\014decision_tag\030\003"
    " \003(\0132%.apollo.planning_internal.Decision"
    "Tag\"\206\001\n\022ReferenceLineDebug\022\n\n\002id\030\001 \001(\t\022\016"
    "\n\006length\030\002 \001(\001\022\014\n\004cost\030\003 \001(\001\022\033\n\023is_chang"
    "e_lane_path\030\004 \001(\010\022\023\n\013is_drivable\030\005 \001(\010\022\024"
    "\n\014is_protected\030\006 \001(\010\"<\n\020SampleLayerDebug"
    "\022(\n\010sl_point\030\001 \003(\0132\026.apollo.common.SLPoi"
    "nt\"\204\001\n\020DpPolyGraphDebug\022@\n\014sample_layer\030"
    "\001 \003(\0132*.apollo.planning_internal.SampleL"
    "ayerDebug\022.\n\016min_cost_point\030\002 \003(\0132\026.apol"
    "lo.common.SLPoint\"\323\007\n\014PlanningData\022\?\n\014ad"
    "c_position\030\007 \001(\0132).apollo.localization.L"
    "ocalizationEstimate\022\'\n\007chassis\030\010 \001(\0132\026.a"
    "pollo.canbus.Chassis\0220\n\007routing\030\t \001(\0132\037."
    "apollo.routing.RoutingResponse\0222\n\ninit_p"
    "oint\030\n \001(\0132\036.apollo.common.TrajectoryPoi"
    "nt\022!\n\004path\030\006 \003(\0132\023.apollo.common.Path\0227\n"
    "\nspeed_plan\030\r \003(\0132#.apollo.planning_inte"
    "rnal.SpeedPlan\0228\n\010st_graph\030\016 \003(\0132&.apoll"
    "o.planning_internal.STGraphDebug\0228\n\010sl_f"
    "rame\030\017 \003(\0132&.apollo.planning_internal.SL"
    "FrameDebug\0220\n\021prediction_header\030\020 \001(\0132\025."
    "apollo.common.Header\022@\n\014signal_light\030\021 \001"
    "(\0132*.apollo.planning_internal.SignalLigh"
    "tDebug\0229\n\010obstacle\030\022 \003(\0132\'.apollo.planni"
    "ng_internal.ObstacleDebug\022D\n\016reference_l"
    "ine\030\023 \003(\0132,.apollo.planning_internal.Ref"
    "erenceLineDebug\022A\n\rdp_poly_graph\030\024 \001(\0132*"
    ".apollo.planning_internal.DpPolyGraphDeb"
    "ug\022E\n\020lattice_st_image\030\025 \001(\0132+.apollo.pl"
    "anning_internal.LatticeStTraining\0221\n\014rel"
    "ative_map\030\026 \001(\0132\033.apollo.relative_map.Ma"
    "pMsg\022S\n\031auto_tuning_training_data\030\027 \001(\0132"
    "0.apollo.planning_internal.AutoTuningTra"
    "iningData\022\034\n\024front_clear_distance\030\030 \001(\001\""
    "G\n\016LatticeStPixel\022\t\n\001s\030\001 \001(\005\022\t\n\001t\030\002 \001(\005\022"
    "\t\n\001r\030\003 \001(\r\022\t\n\001g\030\004 \001(\r\022\t\n\001b\030\005 \001(\r\"\311\001\n\021Lat"
    "ticeStTraining\0227\n\005pixel\030\001 \003(\0132(.apollo.p"
    "lanning_internal.LatticeStPixel\022\021\n\ttimes"
    "tamp\030\002 \001(\001\022\022\n\nannotation\030\003 \001(\t\022\023\n\013num_s_"
    "grids\030\004 \001(\r\022\023\n\013num_t_grids\030\005 \001(\r\022\024\n\014s_re"
    "solution\030\006 \001(\001\022\024\n\014t_resolution\030\007 \001(\001\"(\n\016"
    "CostComponents\022\026\n\016cost_component\030\001 \003(\001\"\242"
    "\001\n\026AutoTuningTrainingData\022C\n\021teacher_com"
    "ponent\030\001 \001(\0132(.apollo.planning_internal."
    "CostComponents\022C\n\021student_component\030\002 \001("
    "\0132(.apollo.planning_internal.CostCompone"
    "nts\"N\n\031CloudReferenceLineRequest\0221\n\014lane"
    "_segment\030\001 \003(\0132\033.apollo.routing.LaneSegm"
    "ent\"T\n CloudReferenceLineRoutingRequest\022"
    "0\n\007routing\030\001 \001(\0132\037.apollo.routing.Routin"
    "gResponse\"B\n\032CloudReferenceLineResponse\022"
    "$\n\007segment\030\001 \003(\0132\023.apollo.common.Path", 4437);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/planning_internal.proto", &protobuf_RegisterTypes);
  Debug::default_instance_ = new Debug();
  SpeedPlan::default_instance_ = new SpeedPlan();
  StGraphBoundaryDebug::default_instance_ = new StGraphBoundaryDebug();
  SLFrameDebug::default_instance_ = new SLFrameDebug();
  STGraphDebug::default_instance_ = new STGraphDebug();
  STGraphDebug_STGraphSpeedConstraint::default_instance_ = new STGraphDebug_STGraphSpeedConstraint();
  STGraphDebug_STGraphKernelCuiseRef::default_instance_ = new STGraphDebug_STGraphKernelCuiseRef();
  STGraphDebug_STGraphKernelFollowRef::default_instance_ = new STGraphDebug_STGraphKernelFollowRef();
  SignalLightDebug::default_instance_ = new SignalLightDebug();
  SignalLightDebug_SignalDebug::default_instance_ = new SignalLightDebug_SignalDebug();
  DecisionTag::default_instance_ = new DecisionTag();
  ObstacleDebug::default_instance_ = new ObstacleDebug();
  ReferenceLineDebug::default_instance_ = new ReferenceLineDebug();
  SampleLayerDebug::default_instance_ = new SampleLayerDebug();
  DpPolyGraphDebug::default_instance_ = new DpPolyGraphDebug();
  PlanningData::default_instance_ = new PlanningData();
  LatticeStPixel::default_instance_ = new LatticeStPixel();
  LatticeStTraining::default_instance_ = new LatticeStTraining();
  CostComponents::default_instance_ = new CostComponents();
  AutoTuningTrainingData::default_instance_ = new AutoTuningTrainingData();
  CloudReferenceLineRequest::default_instance_ = new CloudReferenceLineRequest();
  CloudReferenceLineRoutingRequest::default_instance_ = new CloudReferenceLineRoutingRequest();
  CloudReferenceLineResponse::default_instance_ = new CloudReferenceLineResponse();
  Debug::default_instance_->InitAsDefaultInstance();
  SpeedPlan::default_instance_->InitAsDefaultInstance();
  StGraphBoundaryDebug::default_instance_->InitAsDefaultInstance();
  SLFrameDebug::default_instance_->InitAsDefaultInstance();
  STGraphDebug::default_instance_->InitAsDefaultInstance();
  STGraphDebug_STGraphSpeedConstraint::default_instance_->InitAsDefaultInstance();
  STGraphDebug_STGraphKernelCuiseRef::default_instance_->InitAsDefaultInstance();
  STGraphDebug_STGraphKernelFollowRef::default_instance_->InitAsDefaultInstance();
  SignalLightDebug::default_instance_->InitAsDefaultInstance();
  SignalLightDebug_SignalDebug::default_instance_->InitAsDefaultInstance();
  DecisionTag::default_instance_->InitAsDefaultInstance();
  ObstacleDebug::default_instance_->InitAsDefaultInstance();
  ReferenceLineDebug::default_instance_->InitAsDefaultInstance();
  SampleLayerDebug::default_instance_->InitAsDefaultInstance();
  DpPolyGraphDebug::default_instance_->InitAsDefaultInstance();
  PlanningData::default_instance_->InitAsDefaultInstance();
  LatticeStPixel::default_instance_->InitAsDefaultInstance();
  LatticeStTraining::default_instance_->InitAsDefaultInstance();
  CostComponents::default_instance_->InitAsDefaultInstance();
  AutoTuningTrainingData::default_instance_->InitAsDefaultInstance();
  CloudReferenceLineRequest::default_instance_->InitAsDefaultInstance();
  CloudReferenceLineRoutingRequest::default_instance_->InitAsDefaultInstance();
  CloudReferenceLineResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fplanning_5finternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fplanning_5finternal_2eproto {
  StaticDescriptorInitializer_planning_2fplanning_5finternal_2eproto() {
    protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  }
} static_descriptor_initializer_planning_2fplanning_5finternal_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kPlanningDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.Debug)
}

void Debug::InitAsDefaultInstance() {
  planning_data_ = const_cast< ::apollo::planning_internal::PlanningData*>(&::apollo::planning_internal::PlanningData::default_instance());
}

Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.Debug)
}

void Debug::SharedCtor() {
  _cached_size_ = 0;
  planning_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != default_instance_) {
    delete planning_data_;
  }
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_descriptor_;
}

const Debug& Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

Debug* Debug::default_instance_ = NULL;

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.Debug)
  if (has_planning_data()) {
    if (planning_data_ != NULL) planning_data_->::apollo::planning_internal::PlanningData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning_internal.PlanningData planning_data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.Debug)
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (has_planning_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planning_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.Debug)
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (has_planning_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planning_data_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.Debug)
  return target;
}

int Debug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.Debug)
  int total_size = 0;

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (has_planning_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planning_data_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Debug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.Debug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_planning_data()) {
      mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from.planning_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {

  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  std::swap(planning_data_, other->planning_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_descriptor_;
  metadata.reflection = Debug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .apollo.planning_internal.PlanningData planning_data = 2;
bool Debug::has_planning_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug::set_has_planning_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug::clear_has_planning_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug::clear_planning_data() {
  if (planning_data_ != NULL) planning_data_->::apollo::planning_internal::PlanningData::Clear();
  clear_has_planning_data();
}
const ::apollo::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.planning_data)
  return planning_data_ != NULL ? *planning_data_ : *default_instance_->planning_data_;
}
::apollo::planning_internal::PlanningData* Debug::mutable_planning_data() {
  set_has_planning_data();
  if (planning_data_ == NULL) {
    planning_data_ = new ::apollo::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.planning_data)
  return planning_data_;
}
::apollo::planning_internal::PlanningData* Debug::release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.planning_data)
  clear_has_planning_data();
  ::apollo::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
void Debug::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    set_has_planning_data();
  } else {
    clear_has_planning_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.planning_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPlan::kNameFieldNumber;
const int SpeedPlan::kSpeedPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPlan::SpeedPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SpeedPlan)
}

void SpeedPlan::InitAsDefaultInstance() {
}

SpeedPlan::SpeedPlan(const SpeedPlan& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SpeedPlan)
}

void SpeedPlan::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedPlan::~SpeedPlan() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SpeedPlan)
  SharedDtor();
}

void SpeedPlan::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SpeedPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPlan_descriptor_;
}

const SpeedPlan& SpeedPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

SpeedPlan* SpeedPlan::default_instance_ = NULL;

SpeedPlan* SpeedPlan::New(::google::protobuf::Arena* arena) const {
  SpeedPlan* n = new SpeedPlan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SpeedPlan)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  speed_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpeedPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SpeedPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.SpeedPlan.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_speed_point;
        break;
      }

      // repeated .apollo.common.SpeedPoint speed_point = 2;
      case 2: {
        if (tag == 18) {
         parse_speed_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_speed_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_speed_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_speed_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SpeedPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SpeedPlan)
  return false;
#undef DO_
}

void SpeedPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SpeedPlan)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SpeedPlan.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  for (unsigned int i = 0, n = this->speed_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speed_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SpeedPlan)
}

::google::protobuf::uint8* SpeedPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SpeedPlan)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SpeedPlan.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  for (unsigned int i = 0, n = this->speed_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->speed_point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SpeedPlan)
  return target;
}

int SpeedPlan::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SpeedPlan)
  int total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  total_size += 1 * this->speed_point_size();
  for (int i = 0; i < this->speed_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speed_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SpeedPlan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeedPlan* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SpeedPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SpeedPlan)
    MergeFrom(*source);
  }
}

void SpeedPlan::MergeFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SpeedPlan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  speed_point_.MergeFrom(from.speed_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpeedPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPlan::CopyFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPlan::IsInitialized() const {

  return true;
}

void SpeedPlan::Swap(SpeedPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPlan::InternalSwap(SpeedPlan* other) {
  name_.Swap(&other->name_);
  speed_point_.UnsafeArenaSwap(&other->speed_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPlan_descriptor_;
  metadata.reflection = SpeedPlan_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPlan

// optional string name = 1;
bool SpeedPlan::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPlan::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPlan::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPlan::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SpeedPlan::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpeedPlan::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SpeedPlan.name)
}
 void SpeedPlan::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SpeedPlan.name)
}
 void SpeedPlan::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SpeedPlan.name)
}
 ::std::string* SpeedPlan::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpeedPlan::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SpeedPlan.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpeedPlan::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SpeedPlan.name)
}

// repeated .apollo.common.SpeedPoint speed_point = 2;
int SpeedPlan::speed_point_size() const {
  return speed_point_.size();
}
void SpeedPlan::clear_speed_point() {
  speed_point_.Clear();
}
const ::apollo::common::SpeedPoint& SpeedPlan::speed_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Get(index);
}
::apollo::common::SpeedPoint* SpeedPlan::mutable_speed_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Mutable(index);
}
::apollo::common::SpeedPoint* SpeedPlan::add_speed_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
SpeedPlan::mutable_speed_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SpeedPlan.speed_point)
  return &speed_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
SpeedPlan::speed_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StGraphBoundaryDebug_StBoundaryType_descriptor_;
}
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_UNKNOWN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_STOP;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_FOLLOW;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_YIELD;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_OVERTAKE;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_KEEP_CLEAR;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MIN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MAX;
const int StGraphBoundaryDebug::StBoundaryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StGraphBoundaryDebug::kNameFieldNumber;
const int StGraphBoundaryDebug::kPointFieldNumber;
const int StGraphBoundaryDebug::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StGraphBoundaryDebug::StGraphBoundaryDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.StGraphBoundaryDebug)
}

void StGraphBoundaryDebug::InitAsDefaultInstance() {
}

StGraphBoundaryDebug::StGraphBoundaryDebug(const StGraphBoundaryDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.StGraphBoundaryDebug)
}

void StGraphBoundaryDebug::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StGraphBoundaryDebug::~StGraphBoundaryDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.StGraphBoundaryDebug)
  SharedDtor();
}

void StGraphBoundaryDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StGraphBoundaryDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StGraphBoundaryDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StGraphBoundaryDebug_descriptor_;
}

const StGraphBoundaryDebug& StGraphBoundaryDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

StGraphBoundaryDebug* StGraphBoundaryDebug::default_instance_ = NULL;

StGraphBoundaryDebug* StGraphBoundaryDebug::New(::google::protobuf::Arena* arena) const {
  StGraphBoundaryDebug* n = new StGraphBoundaryDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StGraphBoundaryDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
  }
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StGraphBoundaryDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.StGraphBoundaryDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.StGraphBoundaryDebug.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // repeated .apollo.common.SpeedPoint point = 2;
      case 2: {
        if (tag == 18) {
         parse_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value)) {
            set_type(static_cast< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.StGraphBoundaryDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.StGraphBoundaryDebug)
  return false;
#undef DO_
}

void StGraphBoundaryDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.StGraphBoundaryDebug)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.StGraphBoundaryDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.SpeedPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(i), output);
  }

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.StGraphBoundaryDebug)
}

::google::protobuf::uint8* StGraphBoundaryDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.StGraphBoundaryDebug)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.StGraphBoundaryDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.SpeedPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->point(i), false, target);
  }

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.StGraphBoundaryDebug)
  return target;
}

int StGraphBoundaryDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.StGraphBoundaryDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .apollo.common.SpeedPoint point = 2;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StGraphBoundaryDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StGraphBoundaryDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StGraphBoundaryDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.StGraphBoundaryDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.StGraphBoundaryDebug)
    MergeFrom(*source);
  }
}

void StGraphBoundaryDebug::MergeFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StGraphBoundaryDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StGraphBoundaryDebug::CopyFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StGraphBoundaryDebug::IsInitialized() const {

  return true;
}

void StGraphBoundaryDebug::Swap(StGraphBoundaryDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StGraphBoundaryDebug::InternalSwap(StGraphBoundaryDebug* other) {
  name_.Swap(&other->name_);
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StGraphBoundaryDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StGraphBoundaryDebug_descriptor_;
  metadata.reflection = StGraphBoundaryDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StGraphBoundaryDebug

// optional string name = 1;
bool StGraphBoundaryDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StGraphBoundaryDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StGraphBoundaryDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StGraphBoundaryDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& StGraphBoundaryDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StGraphBoundaryDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.name)
}
 void StGraphBoundaryDebug::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.StGraphBoundaryDebug.name)
}
 void StGraphBoundaryDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.StGraphBoundaryDebug.name)
}
 ::std::string* StGraphBoundaryDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StGraphBoundaryDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.StGraphBoundaryDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StGraphBoundaryDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.StGraphBoundaryDebug.name)
}

// repeated .apollo.common.SpeedPoint point = 2;
int StGraphBoundaryDebug::point_size() const {
  return point_.size();
}
void StGraphBoundaryDebug::clear_point() {
  point_.Clear();
}
const ::apollo::common::SpeedPoint& StGraphBoundaryDebug::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Get(index);
}
::apollo::common::SpeedPoint* StGraphBoundaryDebug::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Mutable(index);
}
::apollo::common::SpeedPoint* StGraphBoundaryDebug::add_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
StGraphBoundaryDebug::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
StGraphBoundaryDebug::point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_;
}

// optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
bool StGraphBoundaryDebug::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StGraphBoundaryDebug::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void StGraphBoundaryDebug::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void StGraphBoundaryDebug::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.type)
  return static_cast< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType >(type_);
}
 void StGraphBoundaryDebug::set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value) {
  assert(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLFrameDebug::kNameFieldNumber;
const int SLFrameDebug::kSampledSFieldNumber;
const int SLFrameDebug::kStaticObstacleLowerBoundFieldNumber;
const int SLFrameDebug::kDynamicObstacleLowerBoundFieldNumber;
const int SLFrameDebug::kStaticObstacleUpperBoundFieldNumber;
const int SLFrameDebug::kDynamicObstacleUpperBoundFieldNumber;
const int SLFrameDebug::kMapLowerBoundFieldNumber;
const int SLFrameDebug::kMapUpperBoundFieldNumber;
const int SLFrameDebug::kSlPathFieldNumber;
const int SLFrameDebug::kAggregatedBoundarySFieldNumber;
const int SLFrameDebug::kAggregatedBoundaryLowFieldNumber;
const int SLFrameDebug::kAggregatedBoundaryHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLFrameDebug::SLFrameDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SLFrameDebug)
}

void SLFrameDebug::InitAsDefaultInstance() {
}

SLFrameDebug::SLFrameDebug(const SLFrameDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SLFrameDebug)
}

void SLFrameDebug::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLFrameDebug::~SLFrameDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SLFrameDebug)
  SharedDtor();
}

void SLFrameDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SLFrameDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLFrameDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLFrameDebug_descriptor_;
}

const SLFrameDebug& SLFrameDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

SLFrameDebug* SLFrameDebug::default_instance_ = NULL;

SLFrameDebug* SLFrameDebug::New(::google::protobuf::Arena* arena) const {
  SLFrameDebug* n = new SLFrameDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLFrameDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SLFrameDebug)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  sampled_s_.Clear();
  static_obstacle_lower_bound_.Clear();
  dynamic_obstacle_lower_bound_.Clear();
  static_obstacle_upper_bound_.Clear();
  dynamic_obstacle_upper_bound_.Clear();
  map_lower_bound_.Clear();
  map_upper_bound_.Clear();
  sl_path_.Clear();
  aggregated_boundary_s_.Clear();
  aggregated_boundary_low_.Clear();
  aggregated_boundary_high_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SLFrameDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SLFrameDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.SLFrameDebug.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sampled_s;
        break;
      }

      // repeated double sampled_s = 2;
      case 2: {
        if (tag == 17) {
         parse_sampled_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_sampled_s())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sampled_s())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sampled_s;
        if (input->ExpectTag(25)) goto parse_static_obstacle_lower_bound;
        break;
      }

      // repeated double static_obstacle_lower_bound = 3;
      case 3: {
        if (tag == 25) {
         parse_static_obstacle_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_static_obstacle_lower_bound())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_static_obstacle_lower_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_static_obstacle_lower_bound;
        if (input->ExpectTag(33)) goto parse_dynamic_obstacle_lower_bound;
        break;
      }

      // repeated double dynamic_obstacle_lower_bound = 4;
      case 4: {
        if (tag == 33) {
         parse_dynamic_obstacle_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_dynamic_obstacle_lower_bound())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dynamic_obstacle_lower_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_dynamic_obstacle_lower_bound;
        if (input->ExpectTag(41)) goto parse_static_obstacle_upper_bound;
        break;
      }

      // repeated double static_obstacle_upper_bound = 5;
      case 5: {
        if (tag == 41) {
         parse_static_obstacle_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_static_obstacle_upper_bound())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_static_obstacle_upper_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_static_obstacle_upper_bound;
        if (input->ExpectTag(49)) goto parse_dynamic_obstacle_upper_bound;
        break;
      }

      // repeated double dynamic_obstacle_upper_bound = 6;
      case 6: {
        if (tag == 49) {
         parse_dynamic_obstacle_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_dynamic_obstacle_upper_bound())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dynamic_obstacle_upper_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_dynamic_obstacle_upper_bound;
        if (input->ExpectTag(57)) goto parse_map_lower_bound;
        break;
      }

      // repeated double map_lower_bound = 7;
      case 7: {
        if (tag == 57) {
         parse_map_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_map_lower_bound())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_map_lower_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_map_lower_bound;
        if (input->ExpectTag(65)) goto parse_map_upper_bound;
        break;
      }

      // repeated double map_upper_bound = 8;
      case 8: {
        if (tag == 65) {
         parse_map_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_map_upper_bound())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_map_upper_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_map_upper_bound;
        if (input->ExpectTag(74)) goto parse_sl_path;
        break;
      }

      // repeated .apollo.common.SLPoint sl_path = 9;
      case 9: {
        if (tag == 74) {
         parse_sl_path:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sl_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sl_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_sl_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(81)) goto parse_aggregated_boundary_s;
        break;
      }

      // repeated double aggregated_boundary_s = 10;
      case 10: {
        if (tag == 81) {
         parse_aggregated_boundary_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_aggregated_boundary_s())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_s())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_aggregated_boundary_s;
        if (input->ExpectTag(89)) goto parse_aggregated_boundary_low;
        break;
      }

      // repeated double aggregated_boundary_low = 11;
      case 11: {
        if (tag == 89) {
         parse_aggregated_boundary_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_aggregated_boundary_low())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_low())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_aggregated_boundary_low;
        if (input->ExpectTag(97)) goto parse_aggregated_boundary_high;
        break;
      }

      // repeated double aggregated_boundary_high = 12;
      case 12: {
        if (tag == 97) {
         parse_aggregated_boundary_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_aggregated_boundary_high())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_high())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_aggregated_boundary_high;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SLFrameDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SLFrameDebug)
  return false;
#undef DO_
}

void SLFrameDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SLFrameDebug)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SLFrameDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated double sampled_s = 2;
  for (int i = 0; i < this->sampled_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->sampled_s(i), output);
  }

  // repeated double static_obstacle_lower_bound = 3;
  for (int i = 0; i < this->static_obstacle_lower_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->static_obstacle_lower_bound(i), output);
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  for (int i = 0; i < this->dynamic_obstacle_lower_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->dynamic_obstacle_lower_bound(i), output);
  }

  // repeated double static_obstacle_upper_bound = 5;
  for (int i = 0; i < this->static_obstacle_upper_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->static_obstacle_upper_bound(i), output);
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  for (int i = 0; i < this->dynamic_obstacle_upper_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->dynamic_obstacle_upper_bound(i), output);
  }

  // repeated double map_lower_bound = 7;
  for (int i = 0; i < this->map_lower_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->map_lower_bound(i), output);
  }

  // repeated double map_upper_bound = 8;
  for (int i = 0; i < this->map_upper_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->map_upper_bound(i), output);
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  for (unsigned int i = 0, n = this->sl_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sl_path(i), output);
  }

  // repeated double aggregated_boundary_s = 10;
  for (int i = 0; i < this->aggregated_boundary_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->aggregated_boundary_s(i), output);
  }

  // repeated double aggregated_boundary_low = 11;
  for (int i = 0; i < this->aggregated_boundary_low_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->aggregated_boundary_low(i), output);
  }

  // repeated double aggregated_boundary_high = 12;
  for (int i = 0; i < this->aggregated_boundary_high_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->aggregated_boundary_high(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SLFrameDebug)
}

::google::protobuf::uint8* SLFrameDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SLFrameDebug)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SLFrameDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double sampled_s = 2;
  for (int i = 0; i < this->sampled_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->sampled_s(i), target);
  }

  // repeated double static_obstacle_lower_bound = 3;
  for (int i = 0; i < this->static_obstacle_lower_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->static_obstacle_lower_bound(i), target);
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  for (int i = 0; i < this->dynamic_obstacle_lower_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->dynamic_obstacle_lower_bound(i), target);
  }

  // repeated double static_obstacle_upper_bound = 5;
  for (int i = 0; i < this->static_obstacle_upper_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->static_obstacle_upper_bound(i), target);
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  for (int i = 0; i < this->dynamic_obstacle_upper_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->dynamic_obstacle_upper_bound(i), target);
  }

  // repeated double map_lower_bound = 7;
  for (int i = 0; i < this->map_lower_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->map_lower_bound(i), target);
  }

  // repeated double map_upper_bound = 8;
  for (int i = 0; i < this->map_upper_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->map_upper_bound(i), target);
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  for (unsigned int i = 0, n = this->sl_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->sl_path(i), false, target);
  }

  // repeated double aggregated_boundary_s = 10;
  for (int i = 0; i < this->aggregated_boundary_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->aggregated_boundary_s(i), target);
  }

  // repeated double aggregated_boundary_low = 11;
  for (int i = 0; i < this->aggregated_boundary_low_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->aggregated_boundary_low(i), target);
  }

  // repeated double aggregated_boundary_high = 12;
  for (int i = 0; i < this->aggregated_boundary_high_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->aggregated_boundary_high(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SLFrameDebug)
  return target;
}

int SLFrameDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SLFrameDebug)
  int total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated double sampled_s = 2;
  {
    int data_size = 0;
    data_size = 8 * this->sampled_s_size();
    total_size += 1 * this->sampled_s_size() + data_size;
  }

  // repeated double static_obstacle_lower_bound = 3;
  {
    int data_size = 0;
    data_size = 8 * this->static_obstacle_lower_bound_size();
    total_size += 1 * this->static_obstacle_lower_bound_size() + data_size;
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  {
    int data_size = 0;
    data_size = 8 * this->dynamic_obstacle_lower_bound_size();
    total_size += 1 * this->dynamic_obstacle_lower_bound_size() + data_size;
  }

  // repeated double static_obstacle_upper_bound = 5;
  {
    int data_size = 0;
    data_size = 8 * this->static_obstacle_upper_bound_size();
    total_size += 1 * this->static_obstacle_upper_bound_size() + data_size;
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  {
    int data_size = 0;
    data_size = 8 * this->dynamic_obstacle_upper_bound_size();
    total_size += 1 * this->dynamic_obstacle_upper_bound_size() + data_size;
  }

  // repeated double map_lower_bound = 7;
  {
    int data_size = 0;
    data_size = 8 * this->map_lower_bound_size();
    total_size += 1 * this->map_lower_bound_size() + data_size;
  }

  // repeated double map_upper_bound = 8;
  {
    int data_size = 0;
    data_size = 8 * this->map_upper_bound_size();
    total_size += 1 * this->map_upper_bound_size() + data_size;
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  total_size += 1 * this->sl_path_size();
  for (int i = 0; i < this->sl_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sl_path(i));
  }

  // repeated double aggregated_boundary_s = 10;
  {
    int data_size = 0;
    data_size = 8 * this->aggregated_boundary_s_size();
    total_size += 1 * this->aggregated_boundary_s_size() + data_size;
  }

  // repeated double aggregated_boundary_low = 11;
  {
    int data_size = 0;
    data_size = 8 * this->aggregated_boundary_low_size();
    total_size += 1 * this->aggregated_boundary_low_size() + data_size;
  }

  // repeated double aggregated_boundary_high = 12;
  {
    int data_size = 0;
    data_size = 8 * this->aggregated_boundary_high_size();
    total_size += 1 * this->aggregated_boundary_high_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLFrameDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SLFrameDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SLFrameDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLFrameDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SLFrameDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SLFrameDebug)
    MergeFrom(*source);
  }
}

void SLFrameDebug::MergeFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SLFrameDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sampled_s_.MergeFrom(from.sampled_s_);
  static_obstacle_lower_bound_.MergeFrom(from.static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.MergeFrom(from.dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.MergeFrom(from.static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.MergeFrom(from.dynamic_obstacle_upper_bound_);
  map_lower_bound_.MergeFrom(from.map_lower_bound_);
  map_upper_bound_.MergeFrom(from.map_upper_bound_);
  sl_path_.MergeFrom(from.sl_path_);
  aggregated_boundary_s_.MergeFrom(from.aggregated_boundary_s_);
  aggregated_boundary_low_.MergeFrom(from.aggregated_boundary_low_);
  aggregated_boundary_high_.MergeFrom(from.aggregated_boundary_high_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SLFrameDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLFrameDebug::CopyFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLFrameDebug::IsInitialized() const {

  return true;
}

void SLFrameDebug::Swap(SLFrameDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLFrameDebug::InternalSwap(SLFrameDebug* other) {
  name_.Swap(&other->name_);
  sampled_s_.UnsafeArenaSwap(&other->sampled_s_);
  static_obstacle_lower_bound_.UnsafeArenaSwap(&other->static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.UnsafeArenaSwap(&other->dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.UnsafeArenaSwap(&other->static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.UnsafeArenaSwap(&other->dynamic_obstacle_upper_bound_);
  map_lower_bound_.UnsafeArenaSwap(&other->map_lower_bound_);
  map_upper_bound_.UnsafeArenaSwap(&other->map_upper_bound_);
  sl_path_.UnsafeArenaSwap(&other->sl_path_);
  aggregated_boundary_s_.UnsafeArenaSwap(&other->aggregated_boundary_s_);
  aggregated_boundary_low_.UnsafeArenaSwap(&other->aggregated_boundary_low_);
  aggregated_boundary_high_.UnsafeArenaSwap(&other->aggregated_boundary_high_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLFrameDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLFrameDebug_descriptor_;
  metadata.reflection = SLFrameDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLFrameDebug

// optional string name = 1;
bool SLFrameDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLFrameDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SLFrameDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLFrameDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SLFrameDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SLFrameDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.name)
}
 void SLFrameDebug::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SLFrameDebug.name)
}
 void SLFrameDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SLFrameDebug.name)
}
 ::std::string* SLFrameDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SLFrameDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SLFrameDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SLFrameDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SLFrameDebug.name)
}

// repeated double sampled_s = 2;
int SLFrameDebug::sampled_s_size() const {
  return sampled_s_.size();
}
void SLFrameDebug::clear_sampled_s() {
  sampled_s_.Clear();
}
 double SLFrameDebug::sampled_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_.Get(index);
}
 void SLFrameDebug::set_sampled_s(int index, double value) {
  sampled_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.sampled_s)
}
 void SLFrameDebug::add_sampled_s(double value) {
  sampled_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sampled_s)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::sampled_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_sampled_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return &sampled_s_;
}

// repeated double static_obstacle_lower_bound = 3;
int SLFrameDebug::static_obstacle_lower_bound_size() const {
  return static_obstacle_lower_bound_.size();
}
void SLFrameDebug::clear_static_obstacle_lower_bound() {
  static_obstacle_lower_bound_.Clear();
}
 double SLFrameDebug::static_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_.Get(index);
}
 void SLFrameDebug::set_static_obstacle_lower_bound(int index, double value) {
  static_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
 void SLFrameDebug::add_static_obstacle_lower_bound(double value) {
  static_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return &static_obstacle_lower_bound_;
}

// repeated double dynamic_obstacle_lower_bound = 4;
int SLFrameDebug::dynamic_obstacle_lower_bound_size() const {
  return dynamic_obstacle_lower_bound_.size();
}
void SLFrameDebug::clear_dynamic_obstacle_lower_bound() {
  dynamic_obstacle_lower_bound_.Clear();
}
 double SLFrameDebug::dynamic_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_.Get(index);
}
 void SLFrameDebug::set_dynamic_obstacle_lower_bound(int index, double value) {
  dynamic_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
 void SLFrameDebug::add_dynamic_obstacle_lower_bound(double value) {
  dynamic_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return &dynamic_obstacle_lower_bound_;
}

// repeated double static_obstacle_upper_bound = 5;
int SLFrameDebug::static_obstacle_upper_bound_size() const {
  return static_obstacle_upper_bound_.size();
}
void SLFrameDebug::clear_static_obstacle_upper_bound() {
  static_obstacle_upper_bound_.Clear();
}
 double SLFrameDebug::static_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_.Get(index);
}
 void SLFrameDebug::set_static_obstacle_upper_bound(int index, double value) {
  static_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
 void SLFrameDebug::add_static_obstacle_upper_bound(double value) {
  static_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return &static_obstacle_upper_bound_;
}

// repeated double dynamic_obstacle_upper_bound = 6;
int SLFrameDebug::dynamic_obstacle_upper_bound_size() const {
  return dynamic_obstacle_upper_bound_.size();
}
void SLFrameDebug::clear_dynamic_obstacle_upper_bound() {
  dynamic_obstacle_upper_bound_.Clear();
}
 double SLFrameDebug::dynamic_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_.Get(index);
}
 void SLFrameDebug::set_dynamic_obstacle_upper_bound(int index, double value) {
  dynamic_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
 void SLFrameDebug::add_dynamic_obstacle_upper_bound(double value) {
  dynamic_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return &dynamic_obstacle_upper_bound_;
}

// repeated double map_lower_bound = 7;
int SLFrameDebug::map_lower_bound_size() const {
  return map_lower_bound_.size();
}
void SLFrameDebug::clear_map_lower_bound() {
  map_lower_bound_.Clear();
}
 double SLFrameDebug::map_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_.Get(index);
}
 void SLFrameDebug::set_map_lower_bound(int index, double value) {
  map_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
 void SLFrameDebug::add_map_lower_bound(double value) {
  map_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return &map_lower_bound_;
}

// repeated double map_upper_bound = 8;
int SLFrameDebug::map_upper_bound_size() const {
  return map_upper_bound_.size();
}
void SLFrameDebug::clear_map_upper_bound() {
  map_upper_bound_.Clear();
}
 double SLFrameDebug::map_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_.Get(index);
}
 void SLFrameDebug::set_map_upper_bound(int index, double value) {
  map_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
 void SLFrameDebug::add_map_upper_bound(double value) {
  map_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return &map_upper_bound_;
}

// repeated .apollo.common.SLPoint sl_path = 9;
int SLFrameDebug::sl_path_size() const {
  return sl_path_.size();
}
void SLFrameDebug::clear_sl_path() {
  sl_path_.Clear();
}
const ::apollo::common::SLPoint& SLFrameDebug::sl_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Get(index);
}
::apollo::common::SLPoint* SLFrameDebug::mutable_sl_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Mutable(index);
}
::apollo::common::SLPoint* SLFrameDebug::add_sl_path() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
SLFrameDebug::mutable_sl_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return &sl_path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
SLFrameDebug::sl_path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_;
}

// repeated double aggregated_boundary_s = 10;
int SLFrameDebug::aggregated_boundary_s_size() const {
  return aggregated_boundary_s_.size();
}
void SLFrameDebug::clear_aggregated_boundary_s() {
  aggregated_boundary_s_.Clear();
}
 double SLFrameDebug::aggregated_boundary_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_.Get(index);
}
 void SLFrameDebug::set_aggregated_boundary_s(int index, double value) {
  aggregated_boundary_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
 void SLFrameDebug::add_aggregated_boundary_s(double value) {
  aggregated_boundary_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return &aggregated_boundary_s_;
}

// repeated double aggregated_boundary_low = 11;
int SLFrameDebug::aggregated_boundary_low_size() const {
  return aggregated_boundary_low_.size();
}
void SLFrameDebug::clear_aggregated_boundary_low() {
  aggregated_boundary_low_.Clear();
}
 double SLFrameDebug::aggregated_boundary_low(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_.Get(index);
}
 void SLFrameDebug::set_aggregated_boundary_low(int index, double value) {
  aggregated_boundary_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
 void SLFrameDebug::add_aggregated_boundary_low(double value) {
  aggregated_boundary_low_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_low() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_low() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return &aggregated_boundary_low_;
}

// repeated double aggregated_boundary_high = 12;
int SLFrameDebug::aggregated_boundary_high_size() const {
  return aggregated_boundary_high_.size();
}
void SLFrameDebug::clear_aggregated_boundary_high() {
  aggregated_boundary_high_.Clear();
}
 double SLFrameDebug::aggregated_boundary_high(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_.Get(index);
}
 void SLFrameDebug::set_aggregated_boundary_high(int index, double value) {
  aggregated_boundary_high_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
 void SLFrameDebug::add_aggregated_boundary_high(double value) {
  aggregated_boundary_high_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
 const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_high() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_;
}
 ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_high() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return &aggregated_boundary_high_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphSpeedConstraint::kTFieldNumber;
const int STGraphDebug_STGraphSpeedConstraint::kLowerBoundFieldNumber;
const int STGraphDebug_STGraphSpeedConstraint::kUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

void STGraphDebug_STGraphSpeedConstraint::InitAsDefaultInstance() {
}

STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

void STGraphDebug_STGraphSpeedConstraint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STGraphDebug_STGraphSpeedConstraint::~STGraphDebug_STGraphSpeedConstraint() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  SharedDtor();
}

void STGraphDebug_STGraphSpeedConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STGraphDebug_STGraphSpeedConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphSpeedConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STGraphDebug_STGraphSpeedConstraint_descriptor_;
}

const STGraphDebug_STGraphSpeedConstraint& STGraphDebug_STGraphSpeedConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

STGraphDebug_STGraphSpeedConstraint* STGraphDebug_STGraphSpeedConstraint::default_instance_ = NULL;

STGraphDebug_STGraphSpeedConstraint* STGraphDebug_STGraphSpeedConstraint::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphSpeedConstraint* n = new STGraphDebug_STGraphSpeedConstraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphSpeedConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  t_.Clear();
  lower_bound_.Clear();
  upper_bound_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool STGraphDebug_STGraphSpeedConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (tag == 9) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_t())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_t;
        if (input->ExpectTag(17)) goto parse_lower_bound;
        break;
      }

      // repeated double lower_bound = 2;
      case 2: {
        if (tag == 17) {
         parse_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_lower_bound())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_lower_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lower_bound;
        if (input->ExpectTag(25)) goto parse_upper_bound;
        break;
      }

      // repeated double upper_bound = 3;
      case 3: {
        if (tag == 25) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_upper_bound())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_upper_bound())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_upper_bound;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return false;
#undef DO_
}

void STGraphDebug_STGraphSpeedConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  // repeated double t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double lower_bound = 2;
  for (int i = 0; i < this->lower_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->lower_bound(i), output);
  }

  // repeated double upper_bound = 3;
  for (int i = 0; i < this->upper_bound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->upper_bound(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

::google::protobuf::uint8* STGraphDebug_STGraphSpeedConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  // repeated double t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->t(i), target);
  }

  // repeated double lower_bound = 2;
  for (int i = 0; i < this->lower_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->lower_bound(i), target);
  }

  // repeated double upper_bound = 3;
  for (int i = 0; i < this->upper_bound_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->upper_bound(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return target;
}

int STGraphDebug_STGraphSpeedConstraint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  int total_size = 0;

  // repeated double t = 1;
  {
    int data_size = 0;
    data_size = 8 * this->t_size();
    total_size += 1 * this->t_size() + data_size;
  }

  // repeated double lower_bound = 2;
  {
    int data_size = 0;
    data_size = 8 * this->lower_bound_size();
    total_size += 1 * this->lower_bound_size() + data_size;
  }

  // repeated double upper_bound = 3;
  {
    int data_size = 0;
    data_size = 8 * this->upper_bound_size();
    total_size += 1 * this->upper_bound_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const STGraphDebug_STGraphSpeedConstraint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphSpeedConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  t_.MergeFrom(from.t_);
  lower_bound_.MergeFrom(from.lower_bound_);
  upper_bound_.MergeFrom(from.upper_bound_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphSpeedConstraint::IsInitialized() const {

  return true;
}

void STGraphDebug_STGraphSpeedConstraint::Swap(STGraphDebug_STGraphSpeedConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphSpeedConstraint::InternalSwap(STGraphDebug_STGraphSpeedConstraint* other) {
  t_.UnsafeArenaSwap(&other->t_);
  lower_bound_.UnsafeArenaSwap(&other->lower_bound_);
  upper_bound_.UnsafeArenaSwap(&other->upper_bound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphSpeedConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STGraphDebug_STGraphSpeedConstraint_descriptor_;
  metadata.reflection = STGraphDebug_STGraphSpeedConstraint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphKernelCuiseRef::kTFieldNumber;
const int STGraphDebug_STGraphKernelCuiseRef::kCruiseLineSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

void STGraphDebug_STGraphKernelCuiseRef::InitAsDefaultInstance() {
}

STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

void STGraphDebug_STGraphKernelCuiseRef::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STGraphDebug_STGraphKernelCuiseRef::~STGraphDebug_STGraphKernelCuiseRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelCuiseRef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STGraphDebug_STGraphKernelCuiseRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelCuiseRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STGraphDebug_STGraphKernelCuiseRef_descriptor_;
}

const STGraphDebug_STGraphKernelCuiseRef& STGraphDebug_STGraphKernelCuiseRef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

STGraphDebug_STGraphKernelCuiseRef* STGraphDebug_STGraphKernelCuiseRef::default_instance_ = NULL;

STGraphDebug_STGraphKernelCuiseRef* STGraphDebug_STGraphKernelCuiseRef::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphKernelCuiseRef* n = new STGraphDebug_STGraphKernelCuiseRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphKernelCuiseRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  t_.Clear();
  cruise_line_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool STGraphDebug_STGraphKernelCuiseRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (tag == 9) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_t())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_t;
        if (input->ExpectTag(17)) goto parse_cruise_line_s;
        break;
      }

      // repeated double cruise_line_s = 2;
      case 2: {
        if (tag == 17) {
         parse_cruise_line_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_cruise_line_s())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cruise_line_s())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_cruise_line_s;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return false;
#undef DO_
}

void STGraphDebug_STGraphKernelCuiseRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  // repeated double t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double cruise_line_s = 2;
  for (int i = 0; i < this->cruise_line_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->cruise_line_s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

::google::protobuf::uint8* STGraphDebug_STGraphKernelCuiseRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  // repeated double t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->t(i), target);
  }

  // repeated double cruise_line_s = 2;
  for (int i = 0; i < this->cruise_line_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->cruise_line_s(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return target;
}

int STGraphDebug_STGraphKernelCuiseRef::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  int total_size = 0;

  // repeated double t = 1;
  {
    int data_size = 0;
    data_size = 8 * this->t_size();
    total_size += 1 * this->t_size() + data_size;
  }

  // repeated double cruise_line_s = 2;
  {
    int data_size = 0;
    data_size = 8 * this->cruise_line_s_size();
    total_size += 1 * this->cruise_line_s_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const STGraphDebug_STGraphKernelCuiseRef* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphKernelCuiseRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  t_.MergeFrom(from.t_);
  cruise_line_s_.MergeFrom(from.cruise_line_s_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelCuiseRef::IsInitialized() const {

  return true;
}

void STGraphDebug_STGraphKernelCuiseRef::Swap(STGraphDebug_STGraphKernelCuiseRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphKernelCuiseRef::InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other) {
  t_.UnsafeArenaSwap(&other->t_);
  cruise_line_s_.UnsafeArenaSwap(&other->cruise_line_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphKernelCuiseRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STGraphDebug_STGraphKernelCuiseRef_descriptor_;
  metadata.reflection = STGraphDebug_STGraphKernelCuiseRef_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphKernelFollowRef::kTFieldNumber;
const int STGraphDebug_STGraphKernelFollowRef::kFollowLineSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

void STGraphDebug_STGraphKernelFollowRef::InitAsDefaultInstance() {
}

STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

void STGraphDebug_STGraphKernelFollowRef::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STGraphDebug_STGraphKernelFollowRef::~STGraphDebug_STGraphKernelFollowRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelFollowRef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STGraphDebug_STGraphKernelFollowRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelFollowRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STGraphDebug_STGraphKernelFollowRef_descriptor_;
}

const STGraphDebug_STGraphKernelFollowRef& STGraphDebug_STGraphKernelFollowRef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

STGraphDebug_STGraphKernelFollowRef* STGraphDebug_STGraphKernelFollowRef::default_instance_ = NULL;

STGraphDebug_STGraphKernelFollowRef* STGraphDebug_STGraphKernelFollowRef::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphKernelFollowRef* n = new STGraphDebug_STGraphKernelFollowRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphKernelFollowRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  t_.Clear();
  follow_line_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool STGraphDebug_STGraphKernelFollowRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (tag == 9) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_t())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_t;
        if (input->ExpectTag(17)) goto parse_follow_line_s;
        break;
      }

      // repeated double follow_line_s = 2;
      case 2: {
        if (tag == 17) {
         parse_follow_line_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_follow_line_s())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_follow_line_s())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_follow_line_s;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return false;
#undef DO_
}

void STGraphDebug_STGraphKernelFollowRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  // repeated double t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double follow_line_s = 2;
  for (int i = 0; i < this->follow_line_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->follow_line_s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

::google::protobuf::uint8* STGraphDebug_STGraphKernelFollowRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  // repeated double t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->t(i), target);
  }

  // repeated double follow_line_s = 2;
  for (int i = 0; i < this->follow_line_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->follow_line_s(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return target;
}

int STGraphDebug_STGraphKernelFollowRef::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  int total_size = 0;

  // repeated double t = 1;
  {
    int data_size = 0;
    data_size = 8 * this->t_size();
    total_size += 1 * this->t_size() + data_size;
  }

  // repeated double follow_line_s = 2;
  {
    int data_size = 0;
    data_size = 8 * this->follow_line_s_size();
    total_size += 1 * this->follow_line_s_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const STGraphDebug_STGraphKernelFollowRef* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphKernelFollowRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  t_.MergeFrom(from.t_);
  follow_line_s_.MergeFrom(from.follow_line_s_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelFollowRef::IsInitialized() const {

  return true;
}

void STGraphDebug_STGraphKernelFollowRef::Swap(STGraphDebug_STGraphKernelFollowRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphKernelFollowRef::InternalSwap(STGraphDebug_STGraphKernelFollowRef* other) {
  t_.UnsafeArenaSwap(&other->t_);
  follow_line_s_.UnsafeArenaSwap(&other->follow_line_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphKernelFollowRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STGraphDebug_STGraphKernelFollowRef_descriptor_;
  metadata.reflection = STGraphDebug_STGraphKernelFollowRef_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug::kNameFieldNumber;
const int STGraphDebug::kBoundaryFieldNumber;
const int STGraphDebug::kSpeedLimitFieldNumber;
const int STGraphDebug::kSpeedProfileFieldNumber;
const int STGraphDebug::kSpeedConstraintFieldNumber;
const int STGraphDebug::kKernelCruiseRefFieldNumber;
const int STGraphDebug::kKernelFollowRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug::STGraphDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug)
}

void STGraphDebug::InitAsDefaultInstance() {
  speed_constraint_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint*>(&::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::default_instance());
  kernel_cruise_ref_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef*>(&::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::default_instance());
  kernel_follow_ref_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef*>(&::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::default_instance());
}

STGraphDebug::STGraphDebug(const STGraphDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug)
}

void STGraphDebug::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_constraint_ = NULL;
  kernel_cruise_ref_ = NULL;
  kernel_follow_ref_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STGraphDebug::~STGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug)
  SharedDtor();
}

void STGraphDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete speed_constraint_;
    delete kernel_cruise_ref_;
    delete kernel_follow_ref_;
  }
}

void STGraphDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STGraphDebug_descriptor_;
}

const STGraphDebug& STGraphDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

STGraphDebug* STGraphDebug::default_instance_ = NULL;

STGraphDebug* STGraphDebug::New(::google::protobuf::Arena* arena) const {
  STGraphDebug* n = new STGraphDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug)
  if (_has_bits_[0 / 32] & 113u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_speed_constraint()) {
      if (speed_constraint_ != NULL) speed_constraint_->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
    }
    if (has_kernel_cruise_ref()) {
      if (kernel_cruise_ref_ != NULL) kernel_cruise_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
    }
    if (has_kernel_follow_ref()) {
      if (kernel_follow_ref_ != NULL) kernel_follow_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
    }
  }
  boundary_.Clear();
  speed_limit_.Clear();
  speed_profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool STGraphDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.STGraphDebug.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_boundary;
        break;
      }

      // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
      case 2: {
        if (tag == 18) {
         parse_boundary:
          DO_(input->IncrementRecursionDepth());
         parse_loop_boundary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_boundary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_boundary;
        if (input->ExpectTag(26)) goto parse_loop_speed_limit;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.common.SpeedPoint speed_limit = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_speed_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_speed_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_speed_limit;
        if (input->ExpectTag(34)) goto parse_loop_speed_profile;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.common.SpeedPoint speed_profile = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_speed_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_speed_profile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_speed_profile;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_speed_constraint;
        break;
      }

      // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
      case 5: {
        if (tag == 42) {
         parse_speed_constraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_constraint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_kernel_cruise_ref;
        break;
      }

      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
      case 6: {
        if (tag == 50) {
         parse_kernel_cruise_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_cruise_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_kernel_follow_ref;
        break;
      }

      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
      case 7: {
        if (tag == 58) {
         parse_kernel_follow_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_follow_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug)
  return false;
#undef DO_
}

void STGraphDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.STGraphDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned int i = 0, n = this->boundary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundary(i), output);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  for (unsigned int i = 0, n = this->speed_limit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speed_limit(i), output);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  for (unsigned int i = 0, n = this->speed_profile_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speed_profile(i), output);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (has_speed_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->speed_constraint_, output);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (has_kernel_cruise_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->kernel_cruise_ref_, output);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (has_kernel_follow_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->kernel_follow_ref_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug)
}

::google::protobuf::uint8* STGraphDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.STGraphDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned int i = 0, n = this->boundary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->boundary(i), false, target);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  for (unsigned int i = 0, n = this->speed_limit_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->speed_limit(i), false, target);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  for (unsigned int i = 0, n = this->speed_profile_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->speed_profile(i), false, target);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (has_speed_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->speed_constraint_, false, target);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (has_kernel_cruise_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->kernel_cruise_ref_, false, target);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (has_kernel_follow_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->kernel_follow_ref_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug)
  return target;
}

int STGraphDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 113u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
    if (has_speed_constraint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speed_constraint_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
    if (has_kernel_cruise_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kernel_cruise_ref_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
    if (has_kernel_follow_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kernel_follow_ref_);
    }

  }
  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  total_size += 1 * this->boundary_size();
  for (int i = 0; i < this->boundary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boundary(i));
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  total_size += 1 * this->speed_limit_size();
  for (int i = 0; i < this->speed_limit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speed_limit(i));
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  total_size += 1 * this->speed_profile_size();
  for (int i = 0; i < this->speed_profile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speed_profile(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const STGraphDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug)
    MergeFrom(*source);
  }
}

void STGraphDebug::MergeFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  boundary_.MergeFrom(from.boundary_);
  speed_limit_.MergeFrom(from.speed_limit_);
  speed_profile_.MergeFrom(from.speed_profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_speed_constraint()) {
      mutable_speed_constraint()->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::MergeFrom(from.speed_constraint());
    }
    if (from.has_kernel_cruise_ref()) {
      mutable_kernel_cruise_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::MergeFrom(from.kernel_cruise_ref());
    }
    if (from.has_kernel_follow_ref()) {
      mutable_kernel_follow_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::MergeFrom(from.kernel_follow_ref());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void STGraphDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug::CopyFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug::IsInitialized() const {

  return true;
}

void STGraphDebug::Swap(STGraphDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug::InternalSwap(STGraphDebug* other) {
  name_.Swap(&other->name_);
  boundary_.UnsafeArenaSwap(&other->boundary_);
  speed_limit_.UnsafeArenaSwap(&other->speed_limit_);
  speed_profile_.UnsafeArenaSwap(&other->speed_profile_);
  std::swap(speed_constraint_, other->speed_constraint_);
  std::swap(kernel_cruise_ref_, other->kernel_cruise_ref_);
  std::swap(kernel_follow_ref_, other->kernel_follow_ref_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STGraphDebug_descriptor_;
  metadata.reflection = STGraphDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug_STGraphSpeedConstraint

// repeated double t = 1;
int STGraphDebug_STGraphSpeedConstraint::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_t() {
  t_.Clear();
}
 double STGraphDebug_STGraphSpeedConstraint::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_.Get(index);
}
 void STGraphDebug_STGraphSpeedConstraint::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
 void STGraphDebug_STGraphSpeedConstraint::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
 const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_;
}
 ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return &t_;
}

// repeated double lower_bound = 2;
int STGraphDebug_STGraphSpeedConstraint::lower_bound_size() const {
  return lower_bound_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_lower_bound() {
  lower_bound_.Clear();
}
 double STGraphDebug_STGraphSpeedConstraint::lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_.Get(index);
}
 void STGraphDebug_STGraphSpeedConstraint::set_lower_bound(int index, double value) {
  lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
 void STGraphDebug_STGraphSpeedConstraint::add_lower_bound(double value) {
  lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
 const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_;
}
 ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return &lower_bound_;
}

// repeated double upper_bound = 3;
int STGraphDebug_STGraphSpeedConstraint::upper_bound_size() const {
  return upper_bound_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_upper_bound() {
  upper_bound_.Clear();
}
 double STGraphDebug_STGraphSpeedConstraint::upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_.Get(index);
}
 void STGraphDebug_STGraphSpeedConstraint::set_upper_bound(int index, double value) {
  upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
 void STGraphDebug_STGraphSpeedConstraint::add_upper_bound(double value) {
  upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
 const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_;
}
 ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return &upper_bound_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelCuiseRef

// repeated double t = 1;
int STGraphDebug_STGraphKernelCuiseRef::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphKernelCuiseRef::clear_t() {
  t_.Clear();
}
 double STGraphDebug_STGraphKernelCuiseRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_.Get(index);
}
 void STGraphDebug_STGraphKernelCuiseRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
 void STGraphDebug_STGraphKernelCuiseRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
 const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_;
}
 ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return &t_;
}

// repeated double cruise_line_s = 2;
int STGraphDebug_STGraphKernelCuiseRef::cruise_line_s_size() const {
  return cruise_line_s_.size();
}
void STGraphDebug_STGraphKernelCuiseRef::clear_cruise_line_s() {
  cruise_line_s_.Clear();
}
 double STGraphDebug_STGraphKernelCuiseRef::cruise_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_.Get(index);
}
 void STGraphDebug_STGraphKernelCuiseRef::set_cruise_line_s(int index, double value) {
  cruise_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
 void STGraphDebug_STGraphKernelCuiseRef::add_cruise_line_s(double value) {
  cruise_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
 const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::cruise_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_;
}
 ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_cruise_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return &cruise_line_s_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelFollowRef

// repeated double t = 1;
int STGraphDebug_STGraphKernelFollowRef::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphKernelFollowRef::clear_t() {
  t_.Clear();
}
 double STGraphDebug_STGraphKernelFollowRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_.Get(index);
}
 void STGraphDebug_STGraphKernelFollowRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
 void STGraphDebug_STGraphKernelFollowRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
 const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_;
}
 ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return &t_;
}

// repeated double follow_line_s = 2;
int STGraphDebug_STGraphKernelFollowRef::follow_line_s_size() const {
  return follow_line_s_.size();
}
void STGraphDebug_STGraphKernelFollowRef::clear_follow_line_s() {
  follow_line_s_.Clear();
}
 double STGraphDebug_STGraphKernelFollowRef::follow_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_.Get(index);
}
 void STGraphDebug_STGraphKernelFollowRef::set_follow_line_s(int index, double value) {
  follow_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
 void STGraphDebug_STGraphKernelFollowRef::add_follow_line_s(double value) {
  follow_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
 const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::follow_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_;
}
 ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_follow_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return &follow_line_s_;
}

// -------------------------------------------------------------------

// STGraphDebug

// optional string name = 1;
bool STGraphDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void STGraphDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void STGraphDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void STGraphDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& STGraphDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void STGraphDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.name)
}
 void STGraphDebug::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.STGraphDebug.name)
}
 void STGraphDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.STGraphDebug.name)
}
 ::std::string* STGraphDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* STGraphDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void STGraphDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.name)
}

// repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
int STGraphDebug::boundary_size() const {
  return boundary_.size();
}
void STGraphDebug::clear_boundary() {
  boundary_.Clear();
}
const ::apollo::planning_internal::StGraphBoundaryDebug& STGraphDebug::boundary(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Get(index);
}
::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Mutable(index);
}
::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::add_boundary() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >*
STGraphDebug::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.boundary)
  return &boundary_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >&
STGraphDebug::boundary() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_;
}

// repeated .apollo.common.SpeedPoint speed_limit = 3;
int STGraphDebug::speed_limit_size() const {
  return speed_limit_.size();
}
void STGraphDebug::clear_speed_limit() {
  speed_limit_.Clear();
}
const ::apollo::common::SpeedPoint& STGraphDebug::speed_limit(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Get(index);
}
::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_limit(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Mutable(index);
}
::apollo::common::SpeedPoint* STGraphDebug::add_speed_limit() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_limit() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return &speed_limit_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_limit() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_;
}

// repeated .apollo.common.SpeedPoint speed_profile = 4;
int STGraphDebug::speed_profile_size() const {
  return speed_profile_.size();
}
void STGraphDebug::clear_speed_profile() {
  speed_profile_.Clear();
}
const ::apollo::common::SpeedPoint& STGraphDebug::speed_profile(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Get(index);
}
::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_profile(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Mutable(index);
}
::apollo::common::SpeedPoint* STGraphDebug::add_speed_profile() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_profile() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return &speed_profile_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_profile() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_;
}

// optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
bool STGraphDebug::has_speed_constraint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void STGraphDebug::set_has_speed_constraint() {
  _has_bits_[0] |= 0x00000010u;
}
void STGraphDebug::clear_has_speed_constraint() {
  _has_bits_[0] &= ~0x00000010u;
}
void STGraphDebug::clear_speed_constraint() {
  if (speed_constraint_ != NULL) speed_constraint_->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
  clear_has_speed_constraint();
}
const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& STGraphDebug::speed_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_ != NULL ? *speed_constraint_ : *default_instance_->speed_constraint_;
}
::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::mutable_speed_constraint() {
  set_has_speed_constraint();
  if (speed_constraint_ == NULL) {
    speed_constraint_ = new ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_;
}
::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::release_speed_constraint() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.speed_constraint)
  clear_has_speed_constraint();
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* temp = speed_constraint_;
  speed_constraint_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_speed_constraint(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint) {
  delete speed_constraint_;
  speed_constraint_ = speed_constraint;
  if (speed_constraint) {
    set_has_speed_constraint();
  } else {
    clear_has_speed_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.speed_constraint)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
bool STGraphDebug::has_kernel_cruise_ref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void STGraphDebug::set_has_kernel_cruise_ref() {
  _has_bits_[0] |= 0x00000020u;
}
void STGraphDebug::clear_has_kernel_cruise_ref() {
  _has_bits_[0] &= ~0x00000020u;
}
void STGraphDebug::clear_kernel_cruise_ref() {
  if (kernel_cruise_ref_ != NULL) kernel_cruise_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
  clear_has_kernel_cruise_ref();
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& STGraphDebug::kernel_cruise_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_ != NULL ? *kernel_cruise_ref_ : *default_instance_->kernel_cruise_ref_;
}
::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::mutable_kernel_cruise_ref() {
  set_has_kernel_cruise_ref();
  if (kernel_cruise_ref_ == NULL) {
    kernel_cruise_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_;
}
::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::release_kernel_cruise_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  clear_has_kernel_cruise_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* temp = kernel_cruise_ref_;
  kernel_cruise_ref_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_kernel_cruise_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref) {
  delete kernel_cruise_ref_;
  kernel_cruise_ref_ = kernel_cruise_ref;
  if (kernel_cruise_ref) {
    set_has_kernel_cruise_ref();
  } else {
    clear_has_kernel_cruise_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
bool STGraphDebug::has_kernel_follow_ref() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void STGraphDebug::set_has_kernel_follow_ref() {
  _has_bits_[0] |= 0x00000040u;
}
void STGraphDebug::clear_has_kernel_follow_ref() {
  _has_bits_[0] &= ~0x00000040u;
}
void STGraphDebug::clear_kernel_follow_ref() {
  if (kernel_follow_ref_ != NULL) kernel_follow_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
  clear_has_kernel_follow_ref();
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& STGraphDebug::kernel_follow_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_ != NULL ? *kernel_follow_ref_ : *default_instance_->kernel_follow_ref_;
}
::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::mutable_kernel_follow_ref() {
  set_has_kernel_follow_ref();
  if (kernel_follow_ref_ == NULL) {
    kernel_follow_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_;
}
::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::release_kernel_follow_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  clear_has_kernel_follow_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* temp = kernel_follow_ref_;
  kernel_follow_ref_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_kernel_follow_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref) {
  delete kernel_follow_ref_;
  kernel_follow_ref_ = kernel_follow_ref;
  if (kernel_follow_ref) {
    set_has_kernel_follow_ref();
  } else {
    clear_has_kernel_follow_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalLightDebug_SignalDebug::kLightIdFieldNumber;
const int SignalLightDebug_SignalDebug::kColorFieldNumber;
const int SignalLightDebug_SignalDebug::kLightStopSFieldNumber;
const int SignalLightDebug_SignalDebug::kAdcStopDeaccelerationFieldNumber;
const int SignalLightDebug_SignalDebug::kIsStopWallCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}

void SignalLightDebug_SignalDebug::InitAsDefaultInstance() {
}

SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}

void SignalLightDebug_SignalDebug::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = 0;
  light_stop_s_ = 0;
  adc_stop_deacceleration_ = 0;
  is_stop_wall_created_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalLightDebug_SignalDebug::~SignalLightDebug_SignalDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
  SharedDtor();
}

void SignalLightDebug_SignalDebug::SharedDtor() {
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SignalLightDebug_SignalDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLightDebug_SignalDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalLightDebug_SignalDebug_descriptor_;
}

const SignalLightDebug_SignalDebug& SignalLightDebug_SignalDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

SignalLightDebug_SignalDebug* SignalLightDebug_SignalDebug::default_instance_ = NULL;

SignalLightDebug_SignalDebug* SignalLightDebug_SignalDebug::New(::google::protobuf::Arena* arena) const {
  SignalLightDebug_SignalDebug* n = new SignalLightDebug_SignalDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalLightDebug_SignalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SignalLightDebug_SignalDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SignalLightDebug_SignalDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(light_stop_s_, adc_stop_deacceleration_);
    if (has_light_id()) {
      light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignalLightDebug_SignalDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string light_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->light_id().data(), this->light_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional .apollo.perception.TrafficLight.Color color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_light_stop_s;
        break;
      }

      // optional double light_stop_s = 3;
      case 3: {
        if (tag == 25) {
         parse_light_stop_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &light_stop_s_)));
          set_has_light_stop_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_adc_stop_deacceleration;
        break;
      }

      // optional double adc_stop_deacceleration = 4;
      case 4: {
        if (tag == 33) {
         parse_adc_stop_deacceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_stop_deacceleration_)));
          set_has_adc_stop_deacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_stop_wall_created;
        break;
      }

      // optional bool is_stop_wall_created = 5;
      case 5: {
        if (tag == 40) {
         parse_is_stop_wall_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stop_wall_created_)));
          set_has_is_stop_wall_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return false;
#undef DO_
}

void SignalLightDebug_SignalDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  // optional string light_id = 1;
  if (has_light_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), this->light_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->light_id(), output);
  }

  // optional .apollo.perception.TrafficLight.Color color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // optional double light_stop_s = 3;
  if (has_light_stop_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->light_stop_s(), output);
  }

  // optional double adc_stop_deacceleration = 4;
  if (has_adc_stop_deacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->adc_stop_deacceleration(), output);
  }

  // optional bool is_stop_wall_created = 5;
  if (has_is_stop_wall_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_stop_wall_created(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SignalLightDebug.SignalDebug)
}

::google::protobuf::uint8* SignalLightDebug_SignalDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  // optional string light_id = 1;
  if (has_light_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), this->light_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->light_id(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // optional double light_stop_s = 3;
  if (has_light_stop_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->light_stop_s(), target);
  }

  // optional double adc_stop_deacceleration = 4;
  if (has_adc_stop_deacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->adc_stop_deacceleration(), target);
  }

  // optional bool is_stop_wall_created = 5;
  if (has_is_stop_wall_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_stop_wall_created(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return target;
}

int SignalLightDebug_SignalDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string light_id = 1;
    if (has_light_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->light_id());
    }

    // optional .apollo.perception.TrafficLight.Color color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional double light_stop_s = 3;
    if (has_light_stop_s()) {
      total_size += 1 + 8;
    }

    // optional double adc_stop_deacceleration = 4;
    if (has_adc_stop_deacceleration()) {
      total_size += 1 + 8;
    }

    // optional bool is_stop_wall_created = 5;
    if (has_is_stop_wall_created()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLightDebug_SignalDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SignalLightDebug_SignalDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalLightDebug_SignalDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SignalLightDebug.SignalDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SignalLightDebug.SignalDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug_SignalDebug::MergeFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_light_id()) {
      set_has_light_id();
      light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_light_stop_s()) {
      set_light_stop_s(from.light_stop_s());
    }
    if (from.has_adc_stop_deacceleration()) {
      set_adc_stop_deacceleration(from.adc_stop_deacceleration());
    }
    if (from.has_is_stop_wall_created()) {
      set_is_stop_wall_created(from.is_stop_wall_created());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignalLightDebug_SignalDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug_SignalDebug::CopyFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug_SignalDebug::IsInitialized() const {

  return true;
}

void SignalLightDebug_SignalDebug::Swap(SignalLightDebug_SignalDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalLightDebug_SignalDebug::InternalSwap(SignalLightDebug_SignalDebug* other) {
  light_id_.Swap(&other->light_id_);
  std::swap(color_, other->color_);
  std::swap(light_stop_s_, other->light_stop_s_);
  std::swap(adc_stop_deacceleration_, other->adc_stop_deacceleration_);
  std::swap(is_stop_wall_created_, other->is_stop_wall_created_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalLightDebug_SignalDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalLightDebug_SignalDebug_descriptor_;
  metadata.reflection = SignalLightDebug_SignalDebug_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalLightDebug::kAdcSpeedFieldNumber;
const int SignalLightDebug::kAdcFrontSFieldNumber;
const int SignalLightDebug::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalLightDebug::SignalLightDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SignalLightDebug)
}

void SignalLightDebug::InitAsDefaultInstance() {
}

SignalLightDebug::SignalLightDebug(const SignalLightDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug)
}

void SignalLightDebug::SharedCtor() {
  _cached_size_ = 0;
  adc_speed_ = 0;
  adc_front_s_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalLightDebug::~SignalLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug)
  SharedDtor();
}

void SignalLightDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalLightDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLightDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalLightDebug_descriptor_;
}

const SignalLightDebug& SignalLightDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

SignalLightDebug* SignalLightDebug::default_instance_ = NULL;

SignalLightDebug* SignalLightDebug::New(::google::protobuf::Arena* arena) const {
  SignalLightDebug* n = new SignalLightDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SignalLightDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SignalLightDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(adc_speed_, adc_front_s_);

#undef ZR_HELPER_
#undef ZR_

  signal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignalLightDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SignalLightDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double adc_speed = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_speed_)));
          set_has_adc_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_adc_front_s;
        break;
      }

      // optional double adc_front_s = 2;
      case 2: {
        if (tag == 17) {
         parse_adc_front_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_front_s_)));
          set_has_adc_front_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_signal;
        break;
      }

      // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
      case 3: {
        if (tag == 26) {
         parse_signal:
          DO_(input->IncrementRecursionDepth());
         parse_loop_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_signal;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SignalLightDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SignalLightDebug)
  return false;
#undef DO_
}

void SignalLightDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SignalLightDebug)
  // optional double adc_speed = 1;
  if (has_adc_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->adc_speed(), output);
  }

  // optional double adc_front_s = 2;
  if (has_adc_front_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->adc_front_s(), output);
  }

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SignalLightDebug)
}

::google::protobuf::uint8* SignalLightDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug)
  // optional double adc_speed = 1;
  if (has_adc_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->adc_speed(), target);
  }

  // optional double adc_front_s = 2;
  if (has_adc_front_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->adc_front_s(), target);
  }

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->signal(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug)
  return target;
}

int SignalLightDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double adc_speed = 1;
    if (has_adc_speed()) {
      total_size += 1 + 8;
    }

    // optional double adc_front_s = 2;
    if (has_adc_front_s()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  total_size += 1 * this->signal_size();
  for (int i = 0; i < this->signal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signal(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLightDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SignalLightDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SignalLightDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalLightDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SignalLightDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SignalLightDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug::MergeFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  signal_.MergeFrom(from.signal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adc_speed()) {
      set_adc_speed(from.adc_speed());
    }
    if (from.has_adc_front_s()) {
      set_adc_front_s(from.adc_front_s());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignalLightDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug::CopyFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug::IsInitialized() const {

  return true;
}

void SignalLightDebug::Swap(SignalLightDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalLightDebug::InternalSwap(SignalLightDebug* other) {
  std::swap(adc_speed_, other->adc_speed_);
  std::swap(adc_front_s_, other->adc_front_s_);
  signal_.UnsafeArenaSwap(&other->signal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalLightDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalLightDebug_descriptor_;
  metadata.reflection = SignalLightDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalLightDebug_SignalDebug

// optional string light_id = 1;
bool SignalLightDebug_SignalDebug::has_light_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_light_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalLightDebug_SignalDebug::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalLightDebug_SignalDebug::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
 const ::std::string& SignalLightDebug_SignalDebug::light_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignalLightDebug_SignalDebug::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
 void SignalLightDebug_SignalDebug::set_light_id(const char* value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
 void SignalLightDebug_SignalDebug::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
 ::std::string* SignalLightDebug_SignalDebug::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignalLightDebug_SignalDebug::release_light_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignalLightDebug_SignalDebug::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}

// optional .apollo.perception.TrafficLight.Color color = 2;
bool SignalLightDebug_SignalDebug::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalLightDebug_SignalDebug::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalLightDebug_SignalDebug::clear_color() {
  color_ = 0;
  clear_has_color();
}
 ::apollo::perception::TrafficLight_Color SignalLightDebug_SignalDebug::color() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
 void SignalLightDebug_SignalDebug::set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
}

// optional double light_stop_s = 3;
bool SignalLightDebug_SignalDebug::has_light_stop_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_light_stop_s() {
  _has_bits_[0] |= 0x00000004u;
}
void SignalLightDebug_SignalDebug::clear_has_light_stop_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignalLightDebug_SignalDebug::clear_light_stop_s() {
  light_stop_s_ = 0;
  clear_has_light_stop_s();
}
 double SignalLightDebug_SignalDebug::light_stop_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
  return light_stop_s_;
}
 void SignalLightDebug_SignalDebug::set_light_stop_s(double value) {
  set_has_light_stop_s();
  light_stop_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
}

// optional double adc_stop_deacceleration = 4;
bool SignalLightDebug_SignalDebug::has_adc_stop_deacceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_adc_stop_deacceleration() {
  _has_bits_[0] |= 0x00000008u;
}
void SignalLightDebug_SignalDebug::clear_has_adc_stop_deacceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignalLightDebug_SignalDebug::clear_adc_stop_deacceleration() {
  adc_stop_deacceleration_ = 0;
  clear_has_adc_stop_deacceleration();
}
 double SignalLightDebug_SignalDebug::adc_stop_deacceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
  return adc_stop_deacceleration_;
}
 void SignalLightDebug_SignalDebug::set_adc_stop_deacceleration(double value) {
  set_has_adc_stop_deacceleration();
  adc_stop_deacceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
}

// optional bool is_stop_wall_created = 5;
bool SignalLightDebug_SignalDebug::has_is_stop_wall_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_is_stop_wall_created() {
  _has_bits_[0] |= 0x00000010u;
}
void SignalLightDebug_SignalDebug::clear_has_is_stop_wall_created() {
  _has_bits_[0] &= ~0x00000010u;
}
void SignalLightDebug_SignalDebug::clear_is_stop_wall_created() {
  is_stop_wall_created_ = false;
  clear_has_is_stop_wall_created();
}
 bool SignalLightDebug_SignalDebug::is_stop_wall_created() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
  return is_stop_wall_created_;
}
 void SignalLightDebug_SignalDebug::set_is_stop_wall_created(bool value) {
  set_has_is_stop_wall_created();
  is_stop_wall_created_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
}

// -------------------------------------------------------------------

// SignalLightDebug

// optional double adc_speed = 1;
bool SignalLightDebug::has_adc_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalLightDebug::set_has_adc_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalLightDebug::clear_has_adc_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalLightDebug::clear_adc_speed() {
  adc_speed_ = 0;
  clear_has_adc_speed();
}
 double SignalLightDebug::adc_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_speed)
  return adc_speed_;
}
 void SignalLightDebug::set_adc_speed(double value) {
  set_has_adc_speed();
  adc_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_speed)
}

// optional double adc_front_s = 2;
bool SignalLightDebug::has_adc_front_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalLightDebug::set_has_adc_front_s() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalLightDebug::clear_has_adc_front_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalLightDebug::clear_adc_front_s() {
  adc_front_s_ = 0;
  clear_has_adc_front_s();
}
 double SignalLightDebug::adc_front_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_front_s)
  return adc_front_s_;
}
 void SignalLightDebug::set_adc_front_s(double value) {
  set_has_adc_front_s();
  adc_front_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_front_s)
}

// repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
int SignalLightDebug::signal_size() const {
  return signal_.size();
}
void SignalLightDebug::clear_signal() {
  signal_.Clear();
}
const ::apollo::planning_internal::SignalLightDebug_SignalDebug& SignalLightDebug::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Get(index);
}
::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Mutable(index);
}
::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::add_signal() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >*
SignalLightDebug::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SignalLightDebug.signal)
  return &signal_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >&
SignalLightDebug::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SignalLightDebug.signal)
  return signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTag::kDeciderTagFieldNumber;
const int DecisionTag::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTag::DecisionTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.DecisionTag)
}

void DecisionTag::InitAsDefaultInstance() {
  decision_ = const_cast< ::apollo::planning::ObjectDecisionType*>(&::apollo::planning::ObjectDecisionType::default_instance());
}

DecisionTag::DecisionTag(const DecisionTag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DecisionTag)
}

void DecisionTag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  decider_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decision_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecisionTag::~DecisionTag() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DecisionTag)
  SharedDtor();
}

void DecisionTag::SharedDtor() {
  decider_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete decision_;
  }
}

void DecisionTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionTag_descriptor_;
}

const DecisionTag& DecisionTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

DecisionTag* DecisionTag::default_instance_ = NULL;

DecisionTag* DecisionTag::New(::google::protobuf::Arena* arena) const {
  DecisionTag* n = new DecisionTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DecisionTag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_decider_tag()) {
      decider_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_decision()) {
      if (decision_ != NULL) decision_->::apollo::planning::ObjectDecisionType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DecisionTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.DecisionTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string decider_tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decider_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->decider_tag().data(), this->decider_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.DecisionTag.decider_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_decision;
        break;
      }

      // optional .apollo.planning.ObjectDecisionType decision = 2;
      case 2: {
        if (tag == 18) {
         parse_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.DecisionTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.DecisionTag)
  return false;
#undef DO_
}

void DecisionTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.DecisionTag)
  // optional string decider_tag = 1;
  if (has_decider_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->decider_tag().data(), this->decider_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.DecisionTag.decider_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->decider_tag(), output);
  }

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  if (has_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->decision_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.DecisionTag)
}

::google::protobuf::uint8* DecisionTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DecisionTag)
  // optional string decider_tag = 1;
  if (has_decider_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->decider_tag().data(), this->decider_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.DecisionTag.decider_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->decider_tag(), target);
  }

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  if (has_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->decision_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DecisionTag)
  return target;
}

int DecisionTag::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DecisionTag)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string decider_tag = 1;
    if (has_decider_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decider_tag());
    }

    // optional .apollo.planning.ObjectDecisionType decision = 2;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decision_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.DecisionTag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DecisionTag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.DecisionTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.DecisionTag)
    MergeFrom(*source);
  }
}

void DecisionTag::MergeFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DecisionTag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decider_tag()) {
      set_has_decider_tag();
      decider_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decider_tag_);
    }
    if (from.has_decision()) {
      mutable_decision()->::apollo::planning::ObjectDecisionType::MergeFrom(from.decision());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DecisionTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTag::CopyFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTag::IsInitialized() const {

  return true;
}

void DecisionTag::Swap(DecisionTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionTag::InternalSwap(DecisionTag* other) {
  decider_tag_.Swap(&other->decider_tag_);
  std::swap(decision_, other->decision_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionTag_descriptor_;
  metadata.reflection = DecisionTag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionTag

// optional string decider_tag = 1;
bool DecisionTag::has_decider_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DecisionTag::set_has_decider_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void DecisionTag::clear_has_decider_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void DecisionTag::clear_decider_tag() {
  decider_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_decider_tag();
}
 const ::std::string& DecisionTag::decider_tag() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DecisionTag::set_decider_tag(const ::std::string& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.DecisionTag.decider_tag)
}
 void DecisionTag::set_decider_tag(const char* value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.DecisionTag.decider_tag)
}
 void DecisionTag::set_decider_tag(const char* value, size_t size) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.DecisionTag.decider_tag)
}
 ::std::string* DecisionTag::mutable_decider_tag() {
  set_has_decider_tag();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DecisionTag::release_decider_tag() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decider_tag)
  clear_has_decider_tag();
  return decider_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DecisionTag::set_allocated_decider_tag(::std::string* decider_tag) {
  if (decider_tag != NULL) {
    set_has_decider_tag();
  } else {
    clear_has_decider_tag();
  }
  decider_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decider_tag);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decider_tag)
}

// optional .apollo.planning.ObjectDecisionType decision = 2;
bool DecisionTag::has_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DecisionTag::set_has_decision() {
  _has_bits_[0] |= 0x00000002u;
}
void DecisionTag::clear_has_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
void DecisionTag::clear_decision() {
  if (decision_ != NULL) decision_->::apollo::planning::ObjectDecisionType::Clear();
  clear_has_decision();
}
const ::apollo::planning::ObjectDecisionType& DecisionTag::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decision)
  return decision_ != NULL ? *decision_ : *default_instance_->decision_;
}
::apollo::planning::ObjectDecisionType* DecisionTag::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::apollo::planning::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decision)
  return decision_;
}
::apollo::planning::ObjectDecisionType* DecisionTag::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decision)
  clear_has_decision();
  ::apollo::planning::ObjectDecisionType* temp = decision_;
  decision_ = NULL;
  return temp;
}
void DecisionTag::set_allocated_decision(::apollo::planning::ObjectDecisionType* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decision)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleDebug::kIdFieldNumber;
const int ObstacleDebug::kSlBoundaryFieldNumber;
const int ObstacleDebug::kDecisionTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleDebug::ObstacleDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ObstacleDebug)
}

void ObstacleDebug::InitAsDefaultInstance() {
  sl_boundary_ = const_cast< ::apollo::planning::SLBoundary*>(&::apollo::planning::SLBoundary::default_instance());
}

ObstacleDebug::ObstacleDebug(const ObstacleDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ObstacleDebug)
}

void ObstacleDebug::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sl_boundary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleDebug::~ObstacleDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ObstacleDebug)
  SharedDtor();
}

void ObstacleDebug::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete sl_boundary_;
  }
}

void ObstacleDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleDebug_descriptor_;
}

const ObstacleDebug& ObstacleDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

ObstacleDebug* ObstacleDebug::default_instance_ = NULL;

ObstacleDebug* ObstacleDebug::New(::google::protobuf::Arena* arena) const {
  ObstacleDebug* n = new ObstacleDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ObstacleDebug)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sl_boundary()) {
      if (sl_boundary_ != NULL) sl_boundary_->::apollo::planning::SLBoundary::Clear();
    }
  }
  decision_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObstacleDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.ObstacleDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.ObstacleDebug.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sl_boundary;
        break;
      }

      // optional .apollo.planning.SLBoundary sl_boundary = 2;
      case 2: {
        if (tag == 18) {
         parse_sl_boundary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sl_boundary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_decision_tag;
        break;
      }

      // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
      case 3: {
        if (tag == 26) {
         parse_decision_tag:
          DO_(input->IncrementRecursionDepth());
         parse_loop_decision_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_decision_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_decision_tag;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.ObstacleDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.ObstacleDebug)
  return false;
#undef DO_
}

void ObstacleDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.ObstacleDebug)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ObstacleDebug.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  if (has_sl_boundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sl_boundary_, output);
  }

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned int i = 0, n = this->decision_tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decision_tag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.ObstacleDebug)
}

::google::protobuf::uint8* ObstacleDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ObstacleDebug)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ObstacleDebug.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  if (has_sl_boundary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sl_boundary_, false, target);
  }

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned int i = 0, n = this->decision_tag_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->decision_tag(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ObstacleDebug)
  return target;
}

int ObstacleDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ObstacleDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .apollo.planning.SLBoundary sl_boundary = 2;
    if (has_sl_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sl_boundary_);
    }

  }
  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  total_size += 1 * this->decision_tag_size();
  for (int i = 0; i < this->decision_tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decision_tag(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ObstacleDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObstacleDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ObstacleDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ObstacleDebug)
    MergeFrom(*source);
  }
}

void ObstacleDebug::MergeFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ObstacleDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  decision_tag_.MergeFrom(from.decision_tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_sl_boundary()) {
      mutable_sl_boundary()->::apollo::planning::SLBoundary::MergeFrom(from.sl_boundary());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObstacleDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleDebug::CopyFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDebug::IsInitialized() const {

  return true;
}

void ObstacleDebug::Swap(ObstacleDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleDebug::InternalSwap(ObstacleDebug* other) {
  id_.Swap(&other->id_);
  std::swap(sl_boundary_, other->sl_boundary_);
  decision_tag_.UnsafeArenaSwap(&other->decision_tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleDebug_descriptor_;
  metadata.reflection = ObstacleDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleDebug

// optional string id = 1;
bool ObstacleDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& ObstacleDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObstacleDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ObstacleDebug.id)
}
 void ObstacleDebug::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ObstacleDebug.id)
}
 void ObstacleDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ObstacleDebug.id)
}
 ::std::string* ObstacleDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ObstacleDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObstacleDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.id)
}

// optional .apollo.planning.SLBoundary sl_boundary = 2;
bool ObstacleDebug::has_sl_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleDebug::set_has_sl_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleDebug::clear_has_sl_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleDebug::clear_sl_boundary() {
  if (sl_boundary_ != NULL) sl_boundary_->::apollo::planning::SLBoundary::Clear();
  clear_has_sl_boundary();
}
const ::apollo::planning::SLBoundary& ObstacleDebug::sl_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_ != NULL ? *sl_boundary_ : *default_instance_->sl_boundary_;
}
::apollo::planning::SLBoundary* ObstacleDebug::mutable_sl_boundary() {
  set_has_sl_boundary();
  if (sl_boundary_ == NULL) {
    sl_boundary_ = new ::apollo::planning::SLBoundary;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_;
}
::apollo::planning::SLBoundary* ObstacleDebug::release_sl_boundary() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.sl_boundary)
  clear_has_sl_boundary();
  ::apollo::planning::SLBoundary* temp = sl_boundary_;
  sl_boundary_ = NULL;
  return temp;
}
void ObstacleDebug::set_allocated_sl_boundary(::apollo::planning::SLBoundary* sl_boundary) {
  delete sl_boundary_;
  sl_boundary_ = sl_boundary;
  if (sl_boundary) {
    set_has_sl_boundary();
  } else {
    clear_has_sl_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.sl_boundary)
}

// repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
int ObstacleDebug::decision_tag_size() const {
  return decision_tag_.size();
}
void ObstacleDebug::clear_decision_tag() {
  decision_tag_.Clear();
}
const ::apollo::planning_internal::DecisionTag& ObstacleDebug::decision_tag(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Get(index);
}
::apollo::planning_internal::DecisionTag* ObstacleDebug::mutable_decision_tag(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Mutable(index);
}
::apollo::planning_internal::DecisionTag* ObstacleDebug::add_decision_tag() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >*
ObstacleDebug::mutable_decision_tag() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return &decision_tag_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >&
ObstacleDebug::decision_tag() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineDebug::kIdFieldNumber;
const int ReferenceLineDebug::kLengthFieldNumber;
const int ReferenceLineDebug::kCostFieldNumber;
const int ReferenceLineDebug::kIsChangeLanePathFieldNumber;
const int ReferenceLineDebug::kIsDrivableFieldNumber;
const int ReferenceLineDebug::kIsProtectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineDebug::ReferenceLineDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ReferenceLineDebug)
}

void ReferenceLineDebug::InitAsDefaultInstance() {
}

ReferenceLineDebug::ReferenceLineDebug(const ReferenceLineDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ReferenceLineDebug)
}

void ReferenceLineDebug::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  cost_ = 0;
  is_change_lane_path_ = false;
  is_drivable_ = false;
  is_protected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceLineDebug::~ReferenceLineDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ReferenceLineDebug)
  SharedDtor();
}

void ReferenceLineDebug::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReferenceLineDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceLineDebug_descriptor_;
}

const ReferenceLineDebug& ReferenceLineDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

ReferenceLineDebug* ReferenceLineDebug::default_instance_ = NULL;

ReferenceLineDebug* ReferenceLineDebug::New(::google::protobuf::Arena* arena) const {
  ReferenceLineDebug* n = new ReferenceLineDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ReferenceLineDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReferenceLineDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReferenceLineDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(length_, is_protected_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReferenceLineDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.ReferenceLineDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.ReferenceLineDebug.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_length;
        break;
      }

      // optional double length = 2;
      case 2: {
        if (tag == 17) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cost;
        break;
      }

      // optional double cost = 3;
      case 3: {
        if (tag == 25) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_change_lane_path;
        break;
      }

      // optional bool is_change_lane_path = 4;
      case 4: {
        if (tag == 32) {
         parse_is_change_lane_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_change_lane_path_)));
          set_has_is_change_lane_path();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_drivable;
        break;
      }

      // optional bool is_drivable = 5;
      case 5: {
        if (tag == 40) {
         parse_is_drivable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drivable_)));
          set_has_is_drivable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_protected;
        break;
      }

      // optional bool is_protected = 6;
      case 6: {
        if (tag == 48) {
         parse_is_protected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_protected_)));
          set_has_is_protected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.ReferenceLineDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.ReferenceLineDebug)
  return false;
#undef DO_
}

void ReferenceLineDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.ReferenceLineDebug)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ReferenceLineDebug.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional double cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cost(), output);
  }

  // optional bool is_change_lane_path = 4;
  if (has_is_change_lane_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_change_lane_path(), output);
  }

  // optional bool is_drivable = 5;
  if (has_is_drivable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_drivable(), output);
  }

  // optional bool is_protected = 6;
  if (has_is_protected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_protected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.ReferenceLineDebug)
}

::google::protobuf::uint8* ReferenceLineDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ReferenceLineDebug)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ReferenceLineDebug.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional double cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cost(), target);
  }

  // optional bool is_change_lane_path = 4;
  if (has_is_change_lane_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_change_lane_path(), target);
  }

  // optional bool is_drivable = 5;
  if (has_is_drivable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_drivable(), target);
  }

  // optional bool is_protected = 6;
  if (has_is_protected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_protected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ReferenceLineDebug)
  return target;
}

int ReferenceLineDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ReferenceLineDebug)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double cost = 3;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional bool is_change_lane_path = 4;
    if (has_is_change_lane_path()) {
      total_size += 1 + 1;
    }

    // optional bool is_drivable = 5;
    if (has_is_drivable()) {
      total_size += 1 + 1;
    }

    // optional bool is_protected = 6;
    if (has_is_protected()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReferenceLineDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ReferenceLineDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ReferenceLineDebug)
    MergeFrom(*source);
  }
}

void ReferenceLineDebug::MergeFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_is_change_lane_path()) {
      set_is_change_lane_path(from.is_change_lane_path());
    }
    if (from.has_is_drivable()) {
      set_is_drivable(from.is_drivable());
    }
    if (from.has_is_protected()) {
      set_is_protected(from.is_protected());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReferenceLineDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineDebug::CopyFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineDebug::IsInitialized() const {

  return true;
}

void ReferenceLineDebug::Swap(ReferenceLineDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineDebug::InternalSwap(ReferenceLineDebug* other) {
  id_.Swap(&other->id_);
  std::swap(length_, other->length_);
  std::swap(cost_, other->cost_);
  std::swap(is_change_lane_path_, other->is_change_lane_path_);
  std::swap(is_drivable_, other->is_drivable_);
  std::swap(is_protected_, other->is_protected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceLineDebug_descriptor_;
  metadata.reflection = ReferenceLineDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceLineDebug

// optional string id = 1;
bool ReferenceLineDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReferenceLineDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReferenceLineDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReferenceLineDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& ReferenceLineDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReferenceLineDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.id)
}
 void ReferenceLineDebug::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ReferenceLineDebug.id)
}
 void ReferenceLineDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ReferenceLineDebug.id)
}
 ::std::string* ReferenceLineDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ReferenceLineDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReferenceLineDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ReferenceLineDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReferenceLineDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ReferenceLineDebug.id)
}

// optional double length = 2;
bool ReferenceLineDebug::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReferenceLineDebug::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void ReferenceLineDebug::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineDebug::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double ReferenceLineDebug::length() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.length)
  return length_;
}
 void ReferenceLineDebug::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.length)
}

// optional double cost = 3;
bool ReferenceLineDebug::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReferenceLineDebug::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void ReferenceLineDebug::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReferenceLineDebug::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
 double ReferenceLineDebug::cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.cost)
  return cost_;
}
 void ReferenceLineDebug::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.cost)
}

// optional bool is_change_lane_path = 4;
bool ReferenceLineDebug::has_is_change_lane_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReferenceLineDebug::set_has_is_change_lane_path() {
  _has_bits_[0] |= 0x00000008u;
}
void ReferenceLineDebug::clear_has_is_change_lane_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReferenceLineDebug::clear_is_change_lane_path() {
  is_change_lane_path_ = false;
  clear_has_is_change_lane_path();
}
 bool ReferenceLineDebug::is_change_lane_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
  return is_change_lane_path_;
}
 void ReferenceLineDebug::set_is_change_lane_path(bool value) {
  set_has_is_change_lane_path();
  is_change_lane_path_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
}

// optional bool is_drivable = 5;
bool ReferenceLineDebug::has_is_drivable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReferenceLineDebug::set_has_is_drivable() {
  _has_bits_[0] |= 0x00000010u;
}
void ReferenceLineDebug::clear_has_is_drivable() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReferenceLineDebug::clear_is_drivable() {
  is_drivable_ = false;
  clear_has_is_drivable();
}
 bool ReferenceLineDebug::is_drivable() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_drivable)
  return is_drivable_;
}
 void ReferenceLineDebug::set_is_drivable(bool value) {
  set_has_is_drivable();
  is_drivable_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_drivable)
}

// optional bool is_protected = 6;
bool ReferenceLineDebug::has_is_protected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReferenceLineDebug::set_has_is_protected() {
  _has_bits_[0] |= 0x00000020u;
}
void ReferenceLineDebug::clear_has_is_protected() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReferenceLineDebug::clear_is_protected() {
  is_protected_ = false;
  clear_has_is_protected();
}
 bool ReferenceLineDebug::is_protected() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_protected)
  return is_protected_;
}
 void ReferenceLineDebug::set_is_protected(bool value) {
  set_has_is_protected();
  is_protected_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_protected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleLayerDebug::kSlPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleLayerDebug::SampleLayerDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SampleLayerDebug)
}

void SampleLayerDebug::InitAsDefaultInstance() {
}

SampleLayerDebug::SampleLayerDebug(const SampleLayerDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SampleLayerDebug)
}

void SampleLayerDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleLayerDebug::~SampleLayerDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SampleLayerDebug)
  SharedDtor();
}

void SampleLayerDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SampleLayerDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleLayerDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleLayerDebug_descriptor_;
}

const SampleLayerDebug& SampleLayerDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

SampleLayerDebug* SampleLayerDebug::default_instance_ = NULL;

SampleLayerDebug* SampleLayerDebug::New(::google::protobuf::Arena* arena) const {
  SampleLayerDebug* n = new SampleLayerDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleLayerDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SampleLayerDebug)
  sl_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SampleLayerDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SampleLayerDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.SLPoint sl_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sl_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sl_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sl_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SampleLayerDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SampleLayerDebug)
  return false;
#undef DO_
}

void SampleLayerDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SampleLayerDebug)
  // repeated .apollo.common.SLPoint sl_point = 1;
  for (unsigned int i = 0, n = this->sl_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sl_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SampleLayerDebug)
}

::google::protobuf::uint8* SampleLayerDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SampleLayerDebug)
  // repeated .apollo.common.SLPoint sl_point = 1;
  for (unsigned int i = 0, n = this->sl_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sl_point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SampleLayerDebug)
  return target;
}

int SampleLayerDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SampleLayerDebug)
  int total_size = 0;

  // repeated .apollo.common.SLPoint sl_point = 1;
  total_size += 1 * this->sl_point_size();
  for (int i = 0; i < this->sl_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sl_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleLayerDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SampleLayerDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SampleLayerDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleLayerDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SampleLayerDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SampleLayerDebug)
    MergeFrom(*source);
  }
}

void SampleLayerDebug::MergeFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SampleLayerDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sl_point_.MergeFrom(from.sl_point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SampleLayerDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleLayerDebug::CopyFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleLayerDebug::IsInitialized() const {

  return true;
}

void SampleLayerDebug::Swap(SampleLayerDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleLayerDebug::InternalSwap(SampleLayerDebug* other) {
  sl_point_.UnsafeArenaSwap(&other->sl_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleLayerDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleLayerDebug_descriptor_;
  metadata.reflection = SampleLayerDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleLayerDebug

// repeated .apollo.common.SLPoint sl_point = 1;
int SampleLayerDebug::sl_point_size() const {
  return sl_point_.size();
}
void SampleLayerDebug::clear_sl_point() {
  sl_point_.Clear();
}
const ::apollo::common::SLPoint& SampleLayerDebug::sl_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Get(index);
}
::apollo::common::SLPoint* SampleLayerDebug::mutable_sl_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Mutable(index);
}
::apollo::common::SLPoint* SampleLayerDebug::add_sl_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
SampleLayerDebug::mutable_sl_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return &sl_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
SampleLayerDebug::sl_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpPolyGraphDebug::kSampleLayerFieldNumber;
const int DpPolyGraphDebug::kMinCostPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpPolyGraphDebug::DpPolyGraphDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.DpPolyGraphDebug)
}

void DpPolyGraphDebug::InitAsDefaultInstance() {
}

DpPolyGraphDebug::DpPolyGraphDebug(const DpPolyGraphDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DpPolyGraphDebug)
}

void DpPolyGraphDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DpPolyGraphDebug::~DpPolyGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DpPolyGraphDebug)
  SharedDtor();
}

void DpPolyGraphDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DpPolyGraphDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpPolyGraphDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DpPolyGraphDebug_descriptor_;
}

const DpPolyGraphDebug& DpPolyGraphDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

DpPolyGraphDebug* DpPolyGraphDebug::default_instance_ = NULL;

DpPolyGraphDebug* DpPolyGraphDebug::New(::google::protobuf::Arena* arena) const {
  DpPolyGraphDebug* n = new DpPolyGraphDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpPolyGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DpPolyGraphDebug)
  sample_layer_.Clear();
  min_cost_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DpPolyGraphDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.DpPolyGraphDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sample_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sample_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sample_layer;
        if (input->ExpectTag(18)) goto parse_loop_min_cost_point;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.common.SLPoint min_cost_point = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_min_cost_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_min_cost_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_min_cost_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.DpPolyGraphDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.DpPolyGraphDebug)
  return false;
#undef DO_
}

void DpPolyGraphDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.DpPolyGraphDebug)
  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned int i = 0, n = this->sample_layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sample_layer(i), output);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  for (unsigned int i = 0, n = this->min_cost_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->min_cost_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.DpPolyGraphDebug)
}

::google::protobuf::uint8* DpPolyGraphDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DpPolyGraphDebug)
  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned int i = 0, n = this->sample_layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sample_layer(i), false, target);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  for (unsigned int i = 0, n = this->min_cost_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->min_cost_point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DpPolyGraphDebug)
  return target;
}

int DpPolyGraphDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DpPolyGraphDebug)
  int total_size = 0;

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  total_size += 1 * this->sample_layer_size();
  for (int i = 0; i < this->sample_layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sample_layer(i));
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  total_size += 1 * this->min_cost_point_size();
  for (int i = 0; i < this->min_cost_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->min_cost_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpPolyGraphDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DpPolyGraphDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DpPolyGraphDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.DpPolyGraphDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.DpPolyGraphDebug)
    MergeFrom(*source);
  }
}

void DpPolyGraphDebug::MergeFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sample_layer_.MergeFrom(from.sample_layer_);
  min_cost_point_.MergeFrom(from.min_cost_point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DpPolyGraphDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpPolyGraphDebug::CopyFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyGraphDebug::IsInitialized() const {

  return true;
}

void DpPolyGraphDebug::Swap(DpPolyGraphDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpPolyGraphDebug::InternalSwap(DpPolyGraphDebug* other) {
  sample_layer_.UnsafeArenaSwap(&other->sample_layer_);
  min_cost_point_.UnsafeArenaSwap(&other->min_cost_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpPolyGraphDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DpPolyGraphDebug_descriptor_;
  metadata.reflection = DpPolyGraphDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpPolyGraphDebug

// repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
int DpPolyGraphDebug::sample_layer_size() const {
  return sample_layer_.size();
}
void DpPolyGraphDebug::clear_sample_layer() {
  sample_layer_.Clear();
}
const ::apollo::planning_internal::SampleLayerDebug& DpPolyGraphDebug::sample_layer(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Get(index);
}
::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::mutable_sample_layer(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Mutable(index);
}
::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::add_sample_layer() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >*
DpPolyGraphDebug::mutable_sample_layer() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return &sample_layer_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >&
DpPolyGraphDebug::sample_layer() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_;
}

// repeated .apollo.common.SLPoint min_cost_point = 2;
int DpPolyGraphDebug::min_cost_point_size() const {
  return min_cost_point_.size();
}
void DpPolyGraphDebug::clear_min_cost_point() {
  min_cost_point_.Clear();
}
const ::apollo::common::SLPoint& DpPolyGraphDebug::min_cost_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Get(index);
}
::apollo::common::SLPoint* DpPolyGraphDebug::mutable_min_cost_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Mutable(index);
}
::apollo::common::SLPoint* DpPolyGraphDebug::add_min_cost_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
DpPolyGraphDebug::mutable_min_cost_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return &min_cost_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
DpPolyGraphDebug::min_cost_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningData::kAdcPositionFieldNumber;
const int PlanningData::kChassisFieldNumber;
const int PlanningData::kRoutingFieldNumber;
const int PlanningData::kInitPointFieldNumber;
const int PlanningData::kPathFieldNumber;
const int PlanningData::kSpeedPlanFieldNumber;
const int PlanningData::kStGraphFieldNumber;
const int PlanningData::kSlFrameFieldNumber;
const int PlanningData::kPredictionHeaderFieldNumber;
const int PlanningData::kSignalLightFieldNumber;
const int PlanningData::kObstacleFieldNumber;
const int PlanningData::kReferenceLineFieldNumber;
const int PlanningData::kDpPolyGraphFieldNumber;
const int PlanningData::kLatticeStImageFieldNumber;
const int PlanningData::kRelativeMapFieldNumber;
const int PlanningData::kAutoTuningTrainingDataFieldNumber;
const int PlanningData::kFrontClearDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningData::PlanningData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.PlanningData)
}

void PlanningData::InitAsDefaultInstance() {
  adc_position_ = const_cast< ::apollo::localization::LocalizationEstimate*>(&::apollo::localization::LocalizationEstimate::default_instance());
  chassis_ = const_cast< ::apollo::canbus::Chassis*>(&::apollo::canbus::Chassis::default_instance());
  routing_ = const_cast< ::apollo::routing::RoutingResponse*>(&::apollo::routing::RoutingResponse::default_instance());
  init_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(&::apollo::common::TrajectoryPoint::default_instance());
  prediction_header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  signal_light_ = const_cast< ::apollo::planning_internal::SignalLightDebug*>(&::apollo::planning_internal::SignalLightDebug::default_instance());
  dp_poly_graph_ = const_cast< ::apollo::planning_internal::DpPolyGraphDebug*>(&::apollo::planning_internal::DpPolyGraphDebug::default_instance());
  lattice_st_image_ = const_cast< ::apollo::planning_internal::LatticeStTraining*>(&::apollo::planning_internal::LatticeStTraining::default_instance());
  relative_map_ = const_cast< ::apollo::relative_map::MapMsg*>(&::apollo::relative_map::MapMsg::default_instance());
  auto_tuning_training_data_ = const_cast< ::apollo::planning_internal::AutoTuningTrainingData*>(&::apollo::planning_internal::AutoTuningTrainingData::default_instance());
}

PlanningData::PlanningData(const PlanningData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.PlanningData)
}

void PlanningData::SharedCtor() {
  _cached_size_ = 0;
  adc_position_ = NULL;
  chassis_ = NULL;
  routing_ = NULL;
  init_point_ = NULL;
  prediction_header_ = NULL;
  signal_light_ = NULL;
  dp_poly_graph_ = NULL;
  lattice_st_image_ = NULL;
  relative_map_ = NULL;
  auto_tuning_training_data_ = NULL;
  front_clear_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanningData::~PlanningData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.PlanningData)
  SharedDtor();
}

void PlanningData::SharedDtor() {
  if (this != default_instance_) {
    delete adc_position_;
    delete chassis_;
    delete routing_;
    delete init_point_;
    delete prediction_header_;
    delete signal_light_;
    delete dp_poly_graph_;
    delete lattice_st_image_;
    delete relative_map_;
    delete auto_tuning_training_data_;
  }
}

void PlanningData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningData_descriptor_;
}

const PlanningData& PlanningData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

PlanningData* PlanningData::default_instance_ = NULL;

PlanningData* PlanningData::New(::google::protobuf::Arena* arena) const {
  PlanningData* n = new PlanningData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.PlanningData)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_adc_position()) {
      if (adc_position_ != NULL) adc_position_->::apollo::localization::LocalizationEstimate::Clear();
    }
    if (has_chassis()) {
      if (chassis_ != NULL) chassis_->::apollo::canbus::Chassis::Clear();
    }
    if (has_routing()) {
      if (routing_ != NULL) routing_->::apollo::routing::RoutingResponse::Clear();
    }
    if (has_init_point()) {
      if (init_point_ != NULL) init_point_->::apollo::common::TrajectoryPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 62208u) {
    if (has_prediction_header()) {
      if (prediction_header_ != NULL) prediction_header_->::apollo::common::Header::Clear();
    }
    if (has_signal_light()) {
      if (signal_light_ != NULL) signal_light_->::apollo::planning_internal::SignalLightDebug::Clear();
    }
    if (has_dp_poly_graph()) {
      if (dp_poly_graph_ != NULL) dp_poly_graph_->::apollo::planning_internal::DpPolyGraphDebug::Clear();
    }
    if (has_lattice_st_image()) {
      if (lattice_st_image_ != NULL) lattice_st_image_->::apollo::planning_internal::LatticeStTraining::Clear();
    }
    if (has_relative_map()) {
      if (relative_map_ != NULL) relative_map_->::apollo::relative_map::MapMsg::Clear();
    }
    if (has_auto_tuning_training_data()) {
      if (auto_tuning_training_data_ != NULL) auto_tuning_training_data_->::apollo::planning_internal::AutoTuningTrainingData::Clear();
    }
  }
  front_clear_distance_ = 0;
  path_.Clear();
  speed_plan_.Clear();
  st_graph_.Clear();
  sl_frame_.Clear();
  obstacle_.Clear();
  reference_line_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlanningData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.PlanningData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Path path = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_adc_position;
        break;
      }

      // optional .apollo.localization.LocalizationEstimate adc_position = 7;
      case 7: {
        if (tag == 58) {
         parse_adc_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adc_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_chassis;
        break;
      }

      // optional .apollo.canbus.Chassis chassis = 8;
      case 8: {
        if (tag == 66) {
         parse_chassis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_routing;
        break;
      }

      // optional .apollo.routing.RoutingResponse routing = 9;
      case 9: {
        if (tag == 74) {
         parse_routing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_init_point;
        break;
      }

      // optional .apollo.common.TrajectoryPoint init_point = 10;
      case 10: {
        if (tag == 82) {
         parse_init_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_speed_plan;
        break;
      }

      // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
      case 13: {
        if (tag == 106) {
         parse_speed_plan:
          DO_(input->IncrementRecursionDepth());
         parse_loop_speed_plan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_speed_plan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_speed_plan;
        if (input->ExpectTag(114)) goto parse_loop_st_graph;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_st_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_st_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_st_graph;
        if (input->ExpectTag(122)) goto parse_loop_sl_frame;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sl_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sl_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_sl_frame;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(130)) goto parse_prediction_header;
        break;
      }

      // optional .apollo.common.Header prediction_header = 16;
      case 16: {
        if (tag == 130) {
         parse_prediction_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prediction_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_signal_light;
        break;
      }

      // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
      case 17: {
        if (tag == 138) {
         parse_signal_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_obstacle;
        break;
      }

      // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
      case 18: {
        if (tag == 146) {
         parse_obstacle:
          DO_(input->IncrementRecursionDepth());
         parse_loop_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_obstacle;
        if (input->ExpectTag(154)) goto parse_loop_reference_line;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
      case 19: {
        if (tag == 154) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_reference_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reference_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_loop_reference_line;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_dp_poly_graph;
        break;
      }

      // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
      case 20: {
        if (tag == 162) {
         parse_dp_poly_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_poly_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_lattice_st_image;
        break;
      }

      // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
      case 21: {
        if (tag == 170) {
         parse_lattice_st_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lattice_st_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_relative_map;
        break;
      }

      // optional .apollo.relative_map.MapMsg relative_map = 22;
      case 22: {
        if (tag == 178) {
         parse_relative_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_auto_tuning_training_data;
        break;
      }

      // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
      case 23: {
        if (tag == 186) {
         parse_auto_tuning_training_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_tuning_training_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_front_clear_distance;
        break;
      }

      // optional double front_clear_distance = 24;
      case 24: {
        if (tag == 193) {
         parse_front_clear_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_clear_distance_)));
          set_has_front_clear_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.PlanningData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.PlanningData)
  return false;
#undef DO_
}

void PlanningData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.PlanningData)
  // repeated .apollo.common.Path path = 6;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->path(i), output);
  }

  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  if (has_adc_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->adc_position_, output);
  }

  // optional .apollo.canbus.Chassis chassis = 8;
  if (has_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->chassis_, output);
  }

  // optional .apollo.routing.RoutingResponse routing = 9;
  if (has_routing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->routing_, output);
  }

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  if (has_init_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->init_point_, output);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned int i = 0, n = this->speed_plan_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->speed_plan(i), output);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned int i = 0, n = this->st_graph_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->st_graph(i), output);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned int i = 0, n = this->sl_frame_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sl_frame(i), output);
  }

  // optional .apollo.common.Header prediction_header = 16;
  if (has_prediction_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->prediction_header_, output);
  }

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  if (has_signal_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->signal_light_, output);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->obstacle(i), output);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned int i = 0, n = this->reference_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->reference_line(i), output);
  }

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (has_dp_poly_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->dp_poly_graph_, output);
  }

  // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
  if (has_lattice_st_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->lattice_st_image_, output);
  }

  // optional .apollo.relative_map.MapMsg relative_map = 22;
  if (has_relative_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->relative_map_, output);
  }

  // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  if (has_auto_tuning_training_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->auto_tuning_training_data_, output);
  }

  // optional double front_clear_distance = 24;
  if (has_front_clear_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->front_clear_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.PlanningData)
}

::google::protobuf::uint8* PlanningData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.PlanningData)
  // repeated .apollo.common.Path path = 6;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->path(i), false, target);
  }

  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  if (has_adc_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->adc_position_, false, target);
  }

  // optional .apollo.canbus.Chassis chassis = 8;
  if (has_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->chassis_, false, target);
  }

  // optional .apollo.routing.RoutingResponse routing = 9;
  if (has_routing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->routing_, false, target);
  }

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  if (has_init_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->init_point_, false, target);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned int i = 0, n = this->speed_plan_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->speed_plan(i), false, target);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned int i = 0, n = this->st_graph_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->st_graph(i), false, target);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned int i = 0, n = this->sl_frame_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->sl_frame(i), false, target);
  }

  // optional .apollo.common.Header prediction_header = 16;
  if (has_prediction_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->prediction_header_, false, target);
  }

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  if (has_signal_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->signal_light_, false, target);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->obstacle(i), false, target);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned int i = 0, n = this->reference_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->reference_line(i), false, target);
  }

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (has_dp_poly_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->dp_poly_graph_, false, target);
  }

  // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
  if (has_lattice_st_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->lattice_st_image_, false, target);
  }

  // optional .apollo.relative_map.MapMsg relative_map = 22;
  if (has_relative_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->relative_map_, false, target);
  }

  // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  if (has_auto_tuning_training_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->auto_tuning_training_data_, false, target);
  }

  // optional double front_clear_distance = 24;
  if (has_front_clear_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->front_clear_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.PlanningData)
  return target;
}

int PlanningData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.PlanningData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.localization.LocalizationEstimate adc_position = 7;
    if (has_adc_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adc_position_);
    }

    // optional .apollo.canbus.Chassis chassis = 8;
    if (has_chassis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chassis_);
    }

    // optional .apollo.routing.RoutingResponse routing = 9;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_);
    }

    // optional .apollo.common.TrajectoryPoint init_point = 10;
    if (has_init_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->init_point_);
    }

  }
  if (_has_bits_[8 / 32] & 62208u) {
    // optional .apollo.common.Header prediction_header = 16;
    if (has_prediction_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prediction_header_);
    }

    // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
    if (has_signal_light()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_light_);
    }

    // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
    if (has_dp_poly_graph()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dp_poly_graph_);
    }

    // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
    if (has_lattice_st_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lattice_st_image_);
    }

    // optional .apollo.relative_map.MapMsg relative_map = 22;
    if (has_relative_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relative_map_);
    }

    // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
    if (has_auto_tuning_training_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_tuning_training_data_);
    }

  }
  // optional double front_clear_distance = 24;
  if (has_front_clear_distance()) {
    total_size += 2 + 8;
  }

  // repeated .apollo.common.Path path = 6;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  total_size += 1 * this->speed_plan_size();
  for (int i = 0; i < this->speed_plan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speed_plan(i));
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  total_size += 1 * this->st_graph_size();
  for (int i = 0; i < this->st_graph_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->st_graph(i));
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  total_size += 1 * this->sl_frame_size();
  for (int i = 0; i < this->sl_frame_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sl_frame(i));
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  total_size += 2 * this->obstacle_size();
  for (int i = 0; i < this->obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacle(i));
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  total_size += 2 * this->reference_line_size();
  for (int i = 0; i < this->reference_line_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reference_line(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.PlanningData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlanningData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.PlanningData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.PlanningData)
    MergeFrom(*source);
  }
}

void PlanningData::MergeFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.PlanningData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  path_.MergeFrom(from.path_);
  speed_plan_.MergeFrom(from.speed_plan_);
  st_graph_.MergeFrom(from.st_graph_);
  sl_frame_.MergeFrom(from.sl_frame_);
  obstacle_.MergeFrom(from.obstacle_);
  reference_line_.MergeFrom(from.reference_line_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adc_position()) {
      mutable_adc_position()->::apollo::localization::LocalizationEstimate::MergeFrom(from.adc_position());
    }
    if (from.has_chassis()) {
      mutable_chassis()->::apollo::canbus::Chassis::MergeFrom(from.chassis());
    }
    if (from.has_routing()) {
      mutable_routing()->::apollo::routing::RoutingResponse::MergeFrom(from.routing());
    }
    if (from.has_init_point()) {
      mutable_init_point()->::apollo::common::TrajectoryPoint::MergeFrom(from.init_point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prediction_header()) {
      mutable_prediction_header()->::apollo::common::Header::MergeFrom(from.prediction_header());
    }
    if (from.has_signal_light()) {
      mutable_signal_light()->::apollo::planning_internal::SignalLightDebug::MergeFrom(from.signal_light());
    }
    if (from.has_dp_poly_graph()) {
      mutable_dp_poly_graph()->::apollo::planning_internal::DpPolyGraphDebug::MergeFrom(from.dp_poly_graph());
    }
    if (from.has_lattice_st_image()) {
      mutable_lattice_st_image()->::apollo::planning_internal::LatticeStTraining::MergeFrom(from.lattice_st_image());
    }
    if (from.has_relative_map()) {
      mutable_relative_map()->::apollo::relative_map::MapMsg::MergeFrom(from.relative_map());
    }
    if (from.has_auto_tuning_training_data()) {
      mutable_auto_tuning_training_data()->::apollo::planning_internal::AutoTuningTrainingData::MergeFrom(from.auto_tuning_training_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_front_clear_distance()) {
      set_front_clear_distance(from.front_clear_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlanningData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningData::CopyFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningData::IsInitialized() const {

  return true;
}

void PlanningData::Swap(PlanningData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningData::InternalSwap(PlanningData* other) {
  std::swap(adc_position_, other->adc_position_);
  std::swap(chassis_, other->chassis_);
  std::swap(routing_, other->routing_);
  std::swap(init_point_, other->init_point_);
  path_.UnsafeArenaSwap(&other->path_);
  speed_plan_.UnsafeArenaSwap(&other->speed_plan_);
  st_graph_.UnsafeArenaSwap(&other->st_graph_);
  sl_frame_.UnsafeArenaSwap(&other->sl_frame_);
  std::swap(prediction_header_, other->prediction_header_);
  std::swap(signal_light_, other->signal_light_);
  obstacle_.UnsafeArenaSwap(&other->obstacle_);
  reference_line_.UnsafeArenaSwap(&other->reference_line_);
  std::swap(dp_poly_graph_, other->dp_poly_graph_);
  std::swap(lattice_st_image_, other->lattice_st_image_);
  std::swap(relative_map_, other->relative_map_);
  std::swap(auto_tuning_training_data_, other->auto_tuning_training_data_);
  std::swap(front_clear_distance_, other->front_clear_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningData_descriptor_;
  metadata.reflection = PlanningData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningData

// optional .apollo.localization.LocalizationEstimate adc_position = 7;
bool PlanningData::has_adc_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningData::set_has_adc_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningData::clear_has_adc_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningData::clear_adc_position() {
  if (adc_position_ != NULL) adc_position_->::apollo::localization::LocalizationEstimate::Clear();
  clear_has_adc_position();
}
const ::apollo::localization::LocalizationEstimate& PlanningData::adc_position() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.adc_position)
  return adc_position_ != NULL ? *adc_position_ : *default_instance_->adc_position_;
}
::apollo::localization::LocalizationEstimate* PlanningData::mutable_adc_position() {
  set_has_adc_position();
  if (adc_position_ == NULL) {
    adc_position_ = new ::apollo::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.adc_position)
  return adc_position_;
}
::apollo::localization::LocalizationEstimate* PlanningData::release_adc_position() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.adc_position)
  clear_has_adc_position();
  ::apollo::localization::LocalizationEstimate* temp = adc_position_;
  adc_position_ = NULL;
  return temp;
}
void PlanningData::set_allocated_adc_position(::apollo::localization::LocalizationEstimate* adc_position) {
  delete adc_position_;
  adc_position_ = adc_position;
  if (adc_position) {
    set_has_adc_position();
  } else {
    clear_has_adc_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.adc_position)
}

// optional .apollo.canbus.Chassis chassis = 8;
bool PlanningData::has_chassis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningData::set_has_chassis() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningData::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningData::clear_chassis() {
  if (chassis_ != NULL) chassis_->::apollo::canbus::Chassis::Clear();
  clear_has_chassis();
}
const ::apollo::canbus::Chassis& PlanningData::chassis() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.chassis)
  return chassis_ != NULL ? *chassis_ : *default_instance_->chassis_;
}
::apollo::canbus::Chassis* PlanningData::mutable_chassis() {
  set_has_chassis();
  if (chassis_ == NULL) {
    chassis_ = new ::apollo::canbus::Chassis;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.chassis)
  return chassis_;
}
::apollo::canbus::Chassis* PlanningData::release_chassis() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.chassis)
  clear_has_chassis();
  ::apollo::canbus::Chassis* temp = chassis_;
  chassis_ = NULL;
  return temp;
}
void PlanningData::set_allocated_chassis(::apollo::canbus::Chassis* chassis) {
  delete chassis_;
  chassis_ = chassis;
  if (chassis) {
    set_has_chassis();
  } else {
    clear_has_chassis();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.chassis)
}

// optional .apollo.routing.RoutingResponse routing = 9;
bool PlanningData::has_routing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanningData::set_has_routing() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanningData::clear_has_routing() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningData::clear_routing() {
  if (routing_ != NULL) routing_->::apollo::routing::RoutingResponse::Clear();
  clear_has_routing();
}
const ::apollo::routing::RoutingResponse& PlanningData::routing() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.routing)
  return routing_ != NULL ? *routing_ : *default_instance_->routing_;
}
::apollo::routing::RoutingResponse* PlanningData::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::apollo::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.routing)
  return routing_;
}
::apollo::routing::RoutingResponse* PlanningData::release_routing() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.routing)
  clear_has_routing();
  ::apollo::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
void PlanningData::set_allocated_routing(::apollo::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.routing)
}

// optional .apollo.common.TrajectoryPoint init_point = 10;
bool PlanningData::has_init_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlanningData::set_has_init_point() {
  _has_bits_[0] |= 0x00000008u;
}
void PlanningData::clear_has_init_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlanningData::clear_init_point() {
  if (init_point_ != NULL) init_point_->::apollo::common::TrajectoryPoint::Clear();
  clear_has_init_point();
}
const ::apollo::common::TrajectoryPoint& PlanningData::init_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.init_point)
  return init_point_ != NULL ? *init_point_ : *default_instance_->init_point_;
}
::apollo::common::TrajectoryPoint* PlanningData::mutable_init_point() {
  set_has_init_point();
  if (init_point_ == NULL) {
    init_point_ = new ::apollo::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.init_point)
  return init_point_;
}
::apollo::common::TrajectoryPoint* PlanningData::release_init_point() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.init_point)
  clear_has_init_point();
  ::apollo::common::TrajectoryPoint* temp = init_point_;
  init_point_ = NULL;
  return temp;
}
void PlanningData::set_allocated_init_point(::apollo::common::TrajectoryPoint* init_point) {
  delete init_point_;
  init_point_ = init_point;
  if (init_point) {
    set_has_init_point();
  } else {
    clear_has_init_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.init_point)
}

// repeated .apollo.common.Path path = 6;
int PlanningData::path_size() const {
  return path_.size();
}
void PlanningData::clear_path() {
  path_.Clear();
}
const ::apollo::common::Path& PlanningData::path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.path)
  return path_.Get(index);
}
::apollo::common::Path* PlanningData::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.path)
  return path_.Mutable(index);
}
::apollo::common::Path* PlanningData::add_path() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.path)
  return path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Path >*
PlanningData::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.path)
  return &path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >&
PlanningData::path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.path)
  return path_;
}

// repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
int PlanningData::speed_plan_size() const {
  return speed_plan_.size();
}
void PlanningData::clear_speed_plan() {
  speed_plan_.Clear();
}
const ::apollo::planning_internal::SpeedPlan& PlanningData::speed_plan(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Get(index);
}
::apollo::planning_internal::SpeedPlan* PlanningData::mutable_speed_plan(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Mutable(index);
}
::apollo::planning_internal::SpeedPlan* PlanningData::add_speed_plan() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >*
PlanningData::mutable_speed_plan() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.speed_plan)
  return &speed_plan_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >&
PlanningData::speed_plan() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_;
}

// repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
int PlanningData::st_graph_size() const {
  return st_graph_.size();
}
void PlanningData::clear_st_graph() {
  st_graph_.Clear();
}
const ::apollo::planning_internal::STGraphDebug& PlanningData::st_graph(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Get(index);
}
::apollo::planning_internal::STGraphDebug* PlanningData::mutable_st_graph(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Mutable(index);
}
::apollo::planning_internal::STGraphDebug* PlanningData::add_st_graph() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >*
PlanningData::mutable_st_graph() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.st_graph)
  return &st_graph_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >&
PlanningData::st_graph() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_;
}

// repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
int PlanningData::sl_frame_size() const {
  return sl_frame_.size();
}
void PlanningData::clear_sl_frame() {
  sl_frame_.Clear();
}
const ::apollo::planning_internal::SLFrameDebug& PlanningData::sl_frame(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Get(index);
}
::apollo::planning_internal::SLFrameDebug* PlanningData::mutable_sl_frame(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Mutable(index);
}
::apollo::planning_internal::SLFrameDebug* PlanningData::add_sl_frame() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >*
PlanningData::mutable_sl_frame() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.sl_frame)
  return &sl_frame_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >&
PlanningData::sl_frame() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_;
}

// optional .apollo.common.Header prediction_header = 16;
bool PlanningData::has_prediction_header() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlanningData::set_has_prediction_header() {
  _has_bits_[0] |= 0x00000100u;
}
void PlanningData::clear_has_prediction_header() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlanningData::clear_prediction_header() {
  if (prediction_header_ != NULL) prediction_header_->::apollo::common::Header::Clear();
  clear_has_prediction_header();
}
const ::apollo::common::Header& PlanningData::prediction_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.prediction_header)
  return prediction_header_ != NULL ? *prediction_header_ : *default_instance_->prediction_header_;
}
::apollo::common::Header* PlanningData::mutable_prediction_header() {
  set_has_prediction_header();
  if (prediction_header_ == NULL) {
    prediction_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.prediction_header)
  return prediction_header_;
}
::apollo::common::Header* PlanningData::release_prediction_header() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.prediction_header)
  clear_has_prediction_header();
  ::apollo::common::Header* temp = prediction_header_;
  prediction_header_ = NULL;
  return temp;
}
void PlanningData::set_allocated_prediction_header(::apollo::common::Header* prediction_header) {
  delete prediction_header_;
  prediction_header_ = prediction_header;
  if (prediction_header) {
    set_has_prediction_header();
  } else {
    clear_has_prediction_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.prediction_header)
}

// optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
bool PlanningData::has_signal_light() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PlanningData::set_has_signal_light() {
  _has_bits_[0] |= 0x00000200u;
}
void PlanningData::clear_has_signal_light() {
  _has_bits_[0] &= ~0x00000200u;
}
void PlanningData::clear_signal_light() {
  if (signal_light_ != NULL) signal_light_->::apollo::planning_internal::SignalLightDebug::Clear();
  clear_has_signal_light();
}
const ::apollo::planning_internal::SignalLightDebug& PlanningData::signal_light() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.signal_light)
  return signal_light_ != NULL ? *signal_light_ : *default_instance_->signal_light_;
}
::apollo::planning_internal::SignalLightDebug* PlanningData::mutable_signal_light() {
  set_has_signal_light();
  if (signal_light_ == NULL) {
    signal_light_ = new ::apollo::planning_internal::SignalLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.signal_light)
  return signal_light_;
}
::apollo::planning_internal::SignalLightDebug* PlanningData::release_signal_light() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.signal_light)
  clear_has_signal_light();
  ::apollo::planning_internal::SignalLightDebug* temp = signal_light_;
  signal_light_ = NULL;
  return temp;
}
void PlanningData::set_allocated_signal_light(::apollo::planning_internal::SignalLightDebug* signal_light) {
  delete signal_light_;
  signal_light_ = signal_light;
  if (signal_light) {
    set_has_signal_light();
  } else {
    clear_has_signal_light();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.signal_light)
}

// repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
int PlanningData::obstacle_size() const {
  return obstacle_.size();
}
void PlanningData::clear_obstacle() {
  obstacle_.Clear();
}
const ::apollo::planning_internal::ObstacleDebug& PlanningData::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Get(index);
}
::apollo::planning_internal::ObstacleDebug* PlanningData::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Mutable(index);
}
::apollo::planning_internal::ObstacleDebug* PlanningData::add_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >*
PlanningData::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.obstacle)
  return &obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >&
PlanningData::obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_;
}

// repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
int PlanningData::reference_line_size() const {
  return reference_line_.size();
}
void PlanningData::clear_reference_line() {
  reference_line_.Clear();
}
const ::apollo::planning_internal::ReferenceLineDebug& PlanningData::reference_line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Get(index);
}
::apollo::planning_internal::ReferenceLineDebug* PlanningData::mutable_reference_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Mutable(index);
}
::apollo::planning_internal::ReferenceLineDebug* PlanningData::add_reference_line() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >*
PlanningData::mutable_reference_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.reference_line)
  return &reference_line_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >&
PlanningData::reference_line() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_;
}

// optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
bool PlanningData::has_dp_poly_graph() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PlanningData::set_has_dp_poly_graph() {
  _has_bits_[0] |= 0x00001000u;
}
void PlanningData::clear_has_dp_poly_graph() {
  _has_bits_[0] &= ~0x00001000u;
}
void PlanningData::clear_dp_poly_graph() {
  if (dp_poly_graph_ != NULL) dp_poly_graph_->::apollo::planning_internal::DpPolyGraphDebug::Clear();
  clear_has_dp_poly_graph();
}
const ::apollo::planning_internal::DpPolyGraphDebug& PlanningData::dp_poly_graph() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_ != NULL ? *dp_poly_graph_ : *default_instance_->dp_poly_graph_;
}
::apollo::planning_internal::DpPolyGraphDebug* PlanningData::mutable_dp_poly_graph() {
  set_has_dp_poly_graph();
  if (dp_poly_graph_ == NULL) {
    dp_poly_graph_ = new ::apollo::planning_internal::DpPolyGraphDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_;
}
::apollo::planning_internal::DpPolyGraphDebug* PlanningData::release_dp_poly_graph() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.dp_poly_graph)
  clear_has_dp_poly_graph();
  ::apollo::planning_internal::DpPolyGraphDebug* temp = dp_poly_graph_;
  dp_poly_graph_ = NULL;
  return temp;
}
void PlanningData::set_allocated_dp_poly_graph(::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph) {
  delete dp_poly_graph_;
  dp_poly_graph_ = dp_poly_graph;
  if (dp_poly_graph) {
    set_has_dp_poly_graph();
  } else {
    clear_has_dp_poly_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.dp_poly_graph)
}

// optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
bool PlanningData::has_lattice_st_image() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PlanningData::set_has_lattice_st_image() {
  _has_bits_[0] |= 0x00002000u;
}
void PlanningData::clear_has_lattice_st_image() {
  _has_bits_[0] &= ~0x00002000u;
}
void PlanningData::clear_lattice_st_image() {
  if (lattice_st_image_ != NULL) lattice_st_image_->::apollo::planning_internal::LatticeStTraining::Clear();
  clear_has_lattice_st_image();
}
const ::apollo::planning_internal::LatticeStTraining& PlanningData::lattice_st_image() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.lattice_st_image)
  return lattice_st_image_ != NULL ? *lattice_st_image_ : *default_instance_->lattice_st_image_;
}
::apollo::planning_internal::LatticeStTraining* PlanningData::mutable_lattice_st_image() {
  set_has_lattice_st_image();
  if (lattice_st_image_ == NULL) {
    lattice_st_image_ = new ::apollo::planning_internal::LatticeStTraining;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.lattice_st_image)
  return lattice_st_image_;
}
::apollo::planning_internal::LatticeStTraining* PlanningData::release_lattice_st_image() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.lattice_st_image)
  clear_has_lattice_st_image();
  ::apollo::planning_internal::LatticeStTraining* temp = lattice_st_image_;
  lattice_st_image_ = NULL;
  return temp;
}
void PlanningData::set_allocated_lattice_st_image(::apollo::planning_internal::LatticeStTraining* lattice_st_image) {
  delete lattice_st_image_;
  lattice_st_image_ = lattice_st_image;
  if (lattice_st_image) {
    set_has_lattice_st_image();
  } else {
    clear_has_lattice_st_image();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.lattice_st_image)
}

// optional .apollo.relative_map.MapMsg relative_map = 22;
bool PlanningData::has_relative_map() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PlanningData::set_has_relative_map() {
  _has_bits_[0] |= 0x00004000u;
}
void PlanningData::clear_has_relative_map() {
  _has_bits_[0] &= ~0x00004000u;
}
void PlanningData::clear_relative_map() {
  if (relative_map_ != NULL) relative_map_->::apollo::relative_map::MapMsg::Clear();
  clear_has_relative_map();
}
const ::apollo::relative_map::MapMsg& PlanningData::relative_map() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.relative_map)
  return relative_map_ != NULL ? *relative_map_ : *default_instance_->relative_map_;
}
::apollo::relative_map::MapMsg* PlanningData::mutable_relative_map() {
  set_has_relative_map();
  if (relative_map_ == NULL) {
    relative_map_ = new ::apollo::relative_map::MapMsg;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.relative_map)
  return relative_map_;
}
::apollo::relative_map::MapMsg* PlanningData::release_relative_map() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.relative_map)
  clear_has_relative_map();
  ::apollo::relative_map::MapMsg* temp = relative_map_;
  relative_map_ = NULL;
  return temp;
}
void PlanningData::set_allocated_relative_map(::apollo::relative_map::MapMsg* relative_map) {
  delete relative_map_;
  relative_map_ = relative_map;
  if (relative_map) {
    set_has_relative_map();
  } else {
    clear_has_relative_map();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.relative_map)
}

// optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
bool PlanningData::has_auto_tuning_training_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PlanningData::set_has_auto_tuning_training_data() {
  _has_bits_[0] |= 0x00008000u;
}
void PlanningData::clear_has_auto_tuning_training_data() {
  _has_bits_[0] &= ~0x00008000u;
}
void PlanningData::clear_auto_tuning_training_data() {
  if (auto_tuning_training_data_ != NULL) auto_tuning_training_data_->::apollo::planning_internal::AutoTuningTrainingData::Clear();
  clear_has_auto_tuning_training_data();
}
const ::apollo::planning_internal::AutoTuningTrainingData& PlanningData::auto_tuning_training_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.auto_tuning_training_data)
  return auto_tuning_training_data_ != NULL ? *auto_tuning_training_data_ : *default_instance_->auto_tuning_training_data_;
}
::apollo::planning_internal::AutoTuningTrainingData* PlanningData::mutable_auto_tuning_training_data() {
  set_has_auto_tuning_training_data();
  if (auto_tuning_training_data_ == NULL) {
    auto_tuning_training_data_ = new ::apollo::planning_internal::AutoTuningTrainingData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.auto_tuning_training_data)
  return auto_tuning_training_data_;
}
::apollo::planning_internal::AutoTuningTrainingData* PlanningData::release_auto_tuning_training_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.auto_tuning_training_data)
  clear_has_auto_tuning_training_data();
  ::apollo::planning_internal::AutoTuningTrainingData* temp = auto_tuning_training_data_;
  auto_tuning_training_data_ = NULL;
  return temp;
}
void PlanningData::set_allocated_auto_tuning_training_data(::apollo::planning_internal::AutoTuningTrainingData* auto_tuning_training_data) {
  delete auto_tuning_training_data_;
  auto_tuning_training_data_ = auto_tuning_training_data;
  if (auto_tuning_training_data) {
    set_has_auto_tuning_training_data();
  } else {
    clear_has_auto_tuning_training_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.auto_tuning_training_data)
}

// optional double front_clear_distance = 24;
bool PlanningData::has_front_clear_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PlanningData::set_has_front_clear_distance() {
  _has_bits_[0] |= 0x00010000u;
}
void PlanningData::clear_has_front_clear_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
void PlanningData::clear_front_clear_distance() {
  front_clear_distance_ = 0;
  clear_has_front_clear_distance();
}
 double PlanningData::front_clear_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.front_clear_distance)
  return front_clear_distance_;
}
 void PlanningData::set_front_clear_distance(double value) {
  set_has_front_clear_distance();
  front_clear_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.PlanningData.front_clear_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatticeStPixel::kSFieldNumber;
const int LatticeStPixel::kTFieldNumber;
const int LatticeStPixel::kRFieldNumber;
const int LatticeStPixel::kGFieldNumber;
const int LatticeStPixel::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatticeStPixel::LatticeStPixel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.LatticeStPixel)
}

void LatticeStPixel::InitAsDefaultInstance() {
}

LatticeStPixel::LatticeStPixel(const LatticeStPixel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.LatticeStPixel)
}

void LatticeStPixel::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  t_ = 0;
  r_ = 0u;
  g_ = 0u;
  b_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatticeStPixel::~LatticeStPixel() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.LatticeStPixel)
  SharedDtor();
}

void LatticeStPixel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatticeStPixel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatticeStPixel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatticeStPixel_descriptor_;
}

const LatticeStPixel& LatticeStPixel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

LatticeStPixel* LatticeStPixel::default_instance_ = NULL;

LatticeStPixel* LatticeStPixel::New(::google::protobuf::Arena* arena) const {
  LatticeStPixel* n = new LatticeStPixel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatticeStPixel::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.LatticeStPixel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LatticeStPixel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LatticeStPixel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(s_, b_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LatticeStPixel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.LatticeStPixel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_t;
        break;
      }

      // optional int32 t = 2;
      case 2: {
        if (tag == 16) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_r;
        break;
      }

      // optional uint32 r = 3;
      case 3: {
        if (tag == 24) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_g;
        break;
      }

      // optional uint32 g = 4;
      case 4: {
        if (tag == 32) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_b;
        break;
      }

      // optional uint32 b = 5;
      case 5: {
        if (tag == 40) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.LatticeStPixel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.LatticeStPixel)
  return false;
#undef DO_
}

void LatticeStPixel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.LatticeStPixel)
  // optional int32 s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s(), output);
  }

  // optional int32 t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->t(), output);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }

  // optional uint32 g = 4;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->g(), output);
  }

  // optional uint32 b = 5;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.LatticeStPixel)
}

::google::protobuf::uint8* LatticeStPixel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.LatticeStPixel)
  // optional int32 s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s(), target);
  }

  // optional int32 t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->t(), target);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }

  // optional uint32 g = 4;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->g(), target);
  }

  // optional uint32 b = 5;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.LatticeStPixel)
  return target;
}

int LatticeStPixel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.LatticeStPixel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 s = 1;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s());
    }

    // optional int32 t = 2;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }

    // optional uint32 r = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 g = 4;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // optional uint32 b = 5;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatticeStPixel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.LatticeStPixel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LatticeStPixel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LatticeStPixel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.LatticeStPixel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.LatticeStPixel)
    MergeFrom(*source);
  }
}

void LatticeStPixel::MergeFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.LatticeStPixel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LatticeStPixel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.LatticeStPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeStPixel::CopyFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.LatticeStPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStPixel::IsInitialized() const {

  return true;
}

void LatticeStPixel::Swap(LatticeStPixel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatticeStPixel::InternalSwap(LatticeStPixel* other) {
  std::swap(s_, other->s_);
  std::swap(t_, other->t_);
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatticeStPixel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatticeStPixel_descriptor_;
  metadata.reflection = LatticeStPixel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatticeStPixel

// optional int32 s = 1;
bool LatticeStPixel::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatticeStPixel::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void LatticeStPixel::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatticeStPixel::clear_s() {
  s_ = 0;
  clear_has_s();
}
 ::google::protobuf::int32 LatticeStPixel::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.s)
  return s_;
}
 void LatticeStPixel::set_s(::google::protobuf::int32 value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.s)
}

// optional int32 t = 2;
bool LatticeStPixel::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatticeStPixel::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void LatticeStPixel::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatticeStPixel::clear_t() {
  t_ = 0;
  clear_has_t();
}
 ::google::protobuf::int32 LatticeStPixel::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.t)
  return t_;
}
 void LatticeStPixel::set_t(::google::protobuf::int32 value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.t)
}

// optional uint32 r = 3;
bool LatticeStPixel::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatticeStPixel::set_has_r() {
  _has_bits_[0] |= 0x00000004u;
}
void LatticeStPixel::clear_has_r() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatticeStPixel::clear_r() {
  r_ = 0u;
  clear_has_r();
}
 ::google::protobuf::uint32 LatticeStPixel::r() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.r)
  return r_;
}
 void LatticeStPixel::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.r)
}

// optional uint32 g = 4;
bool LatticeStPixel::has_g() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LatticeStPixel::set_has_g() {
  _has_bits_[0] |= 0x00000008u;
}
void LatticeStPixel::clear_has_g() {
  _has_bits_[0] &= ~0x00000008u;
}
void LatticeStPixel::clear_g() {
  g_ = 0u;
  clear_has_g();
}
 ::google::protobuf::uint32 LatticeStPixel::g() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.g)
  return g_;
}
 void LatticeStPixel::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.g)
}

// optional uint32 b = 5;
bool LatticeStPixel::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LatticeStPixel::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
void LatticeStPixel::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
void LatticeStPixel::clear_b() {
  b_ = 0u;
  clear_has_b();
}
 ::google::protobuf::uint32 LatticeStPixel::b() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.b)
  return b_;
}
 void LatticeStPixel::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatticeStTraining::kPixelFieldNumber;
const int LatticeStTraining::kTimestampFieldNumber;
const int LatticeStTraining::kAnnotationFieldNumber;
const int LatticeStTraining::kNumSGridsFieldNumber;
const int LatticeStTraining::kNumTGridsFieldNumber;
const int LatticeStTraining::kSResolutionFieldNumber;
const int LatticeStTraining::kTResolutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatticeStTraining::LatticeStTraining()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.LatticeStTraining)
}

void LatticeStTraining::InitAsDefaultInstance() {
}

LatticeStTraining::LatticeStTraining(const LatticeStTraining& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.LatticeStTraining)
}

void LatticeStTraining::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0;
  annotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_s_grids_ = 0u;
  num_t_grids_ = 0u;
  s_resolution_ = 0;
  t_resolution_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatticeStTraining::~LatticeStTraining() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.LatticeStTraining)
  SharedDtor();
}

void LatticeStTraining::SharedDtor() {
  annotation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LatticeStTraining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatticeStTraining::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatticeStTraining_descriptor_;
}

const LatticeStTraining& LatticeStTraining::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

LatticeStTraining* LatticeStTraining::default_instance_ = NULL;

LatticeStTraining* LatticeStTraining::New(::google::protobuf::Arena* arena) const {
  LatticeStTraining* n = new LatticeStTraining;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatticeStTraining::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.LatticeStTraining)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LatticeStTraining, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LatticeStTraining*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 126u) {
    ZR_(num_s_grids_, t_resolution_);
    timestamp_ = 0;
    if (has_annotation()) {
      annotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  pixel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LatticeStTraining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.LatticeStTraining)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pixel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pixel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pixel;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_annotation;
        break;
      }

      // optional string annotation = 3;
      case 3: {
        if (tag == 26) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->annotation().data(), this->annotation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.LatticeStTraining.annotation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_s_grids;
        break;
      }

      // optional uint32 num_s_grids = 4;
      case 4: {
        if (tag == 32) {
         parse_num_s_grids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_s_grids_)));
          set_has_num_s_grids();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_t_grids;
        break;
      }

      // optional uint32 num_t_grids = 5;
      case 5: {
        if (tag == 40) {
         parse_num_t_grids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_t_grids_)));
          set_has_num_t_grids();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_s_resolution;
        break;
      }

      // optional double s_resolution = 6;
      case 6: {
        if (tag == 49) {
         parse_s_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_resolution_)));
          set_has_s_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_t_resolution;
        break;
      }

      // optional double t_resolution = 7;
      case 7: {
        if (tag == 57) {
         parse_t_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_resolution_)));
          set_has_t_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.LatticeStTraining)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.LatticeStTraining)
  return false;
#undef DO_
}

void LatticeStTraining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.LatticeStTraining)
  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  for (unsigned int i = 0, n = this->pixel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pixel(i), output);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional string annotation = 3;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->annotation().data(), this->annotation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.LatticeStTraining.annotation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->annotation(), output);
  }

  // optional uint32 num_s_grids = 4;
  if (has_num_s_grids()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_s_grids(), output);
  }

  // optional uint32 num_t_grids = 5;
  if (has_num_t_grids()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_t_grids(), output);
  }

  // optional double s_resolution = 6;
  if (has_s_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s_resolution(), output);
  }

  // optional double t_resolution = 7;
  if (has_t_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->t_resolution(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.LatticeStTraining)
}

::google::protobuf::uint8* LatticeStTraining::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.LatticeStTraining)
  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  for (unsigned int i = 0, n = this->pixel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pixel(i), false, target);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional string annotation = 3;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->annotation().data(), this->annotation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.LatticeStTraining.annotation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->annotation(), target);
  }

  // optional uint32 num_s_grids = 4;
  if (has_num_s_grids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_s_grids(), target);
  }

  // optional uint32 num_t_grids = 5;
  if (has_num_t_grids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_t_grids(), target);
  }

  // optional double s_resolution = 6;
  if (has_s_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s_resolution(), target);
  }

  // optional double t_resolution = 7;
  if (has_t_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->t_resolution(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.LatticeStTraining)
  return target;
}

int LatticeStTraining::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.LatticeStTraining)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 126u) {
    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional string annotation = 3;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->annotation());
    }

    // optional uint32 num_s_grids = 4;
    if (has_num_s_grids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_s_grids());
    }

    // optional uint32 num_t_grids = 5;
    if (has_num_t_grids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_t_grids());
    }

    // optional double s_resolution = 6;
    if (has_s_resolution()) {
      total_size += 1 + 8;
    }

    // optional double t_resolution = 7;
    if (has_t_resolution()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  total_size += 1 * this->pixel_size();
  for (int i = 0; i < this->pixel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pixel(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatticeStTraining::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.LatticeStTraining)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LatticeStTraining* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LatticeStTraining>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.LatticeStTraining)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.LatticeStTraining)
    MergeFrom(*source);
  }
}

void LatticeStTraining::MergeFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.LatticeStTraining)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pixel_.MergeFrom(from.pixel_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_annotation()) {
      set_has_annotation();
      annotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_);
    }
    if (from.has_num_s_grids()) {
      set_num_s_grids(from.num_s_grids());
    }
    if (from.has_num_t_grids()) {
      set_num_t_grids(from.num_t_grids());
    }
    if (from.has_s_resolution()) {
      set_s_resolution(from.s_resolution());
    }
    if (from.has_t_resolution()) {
      set_t_resolution(from.t_resolution());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LatticeStTraining::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.LatticeStTraining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeStTraining::CopyFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.LatticeStTraining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStTraining::IsInitialized() const {

  return true;
}

void LatticeStTraining::Swap(LatticeStTraining* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatticeStTraining::InternalSwap(LatticeStTraining* other) {
  pixel_.UnsafeArenaSwap(&other->pixel_);
  std::swap(timestamp_, other->timestamp_);
  annotation_.Swap(&other->annotation_);
  std::swap(num_s_grids_, other->num_s_grids_);
  std::swap(num_t_grids_, other->num_t_grids_);
  std::swap(s_resolution_, other->s_resolution_);
  std::swap(t_resolution_, other->t_resolution_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatticeStTraining::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatticeStTraining_descriptor_;
  metadata.reflection = LatticeStTraining_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatticeStTraining

// repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
int LatticeStTraining::pixel_size() const {
  return pixel_.size();
}
void LatticeStTraining::clear_pixel() {
  pixel_.Clear();
}
const ::apollo::planning_internal::LatticeStPixel& LatticeStTraining::pixel(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.pixel)
  return pixel_.Get(index);
}
::apollo::planning_internal::LatticeStPixel* LatticeStTraining::mutable_pixel(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.LatticeStTraining.pixel)
  return pixel_.Mutable(index);
}
::apollo::planning_internal::LatticeStPixel* LatticeStTraining::add_pixel() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.LatticeStTraining.pixel)
  return pixel_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::LatticeStPixel >*
LatticeStTraining::mutable_pixel() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.LatticeStTraining.pixel)
  return &pixel_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::LatticeStPixel >&
LatticeStTraining::pixel() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.LatticeStTraining.pixel)
  return pixel_;
}

// optional double timestamp = 2;
bool LatticeStTraining::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatticeStTraining::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void LatticeStTraining::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatticeStTraining::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double LatticeStTraining::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.timestamp)
  return timestamp_;
}
 void LatticeStTraining::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.timestamp)
}

// optional string annotation = 3;
bool LatticeStTraining::has_annotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatticeStTraining::set_has_annotation() {
  _has_bits_[0] |= 0x00000004u;
}
void LatticeStTraining::clear_has_annotation() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatticeStTraining::clear_annotation() {
  annotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_annotation();
}
 const ::std::string& LatticeStTraining::annotation() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.annotation)
  return annotation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LatticeStTraining::set_annotation(const ::std::string& value) {
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.annotation)
}
 void LatticeStTraining::set_annotation(const char* value) {
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.LatticeStTraining.annotation)
}
 void LatticeStTraining::set_annotation(const char* value, size_t size) {
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.LatticeStTraining.annotation)
}
 ::std::string* LatticeStTraining::mutable_annotation() {
  set_has_annotation();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.LatticeStTraining.annotation)
  return annotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LatticeStTraining::release_annotation() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.LatticeStTraining.annotation)
  clear_has_annotation();
  return annotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LatticeStTraining::set_allocated_annotation(::std::string* annotation) {
  if (annotation != NULL) {
    set_has_annotation();
  } else {
    clear_has_annotation();
  }
  annotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.LatticeStTraining.annotation)
}

// optional uint32 num_s_grids = 4;
bool LatticeStTraining::has_num_s_grids() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LatticeStTraining::set_has_num_s_grids() {
  _has_bits_[0] |= 0x00000008u;
}
void LatticeStTraining::clear_has_num_s_grids() {
  _has_bits_[0] &= ~0x00000008u;
}
void LatticeStTraining::clear_num_s_grids() {
  num_s_grids_ = 0u;
  clear_has_num_s_grids();
}
 ::google::protobuf::uint32 LatticeStTraining::num_s_grids() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.num_s_grids)
  return num_s_grids_;
}
 void LatticeStTraining::set_num_s_grids(::google::protobuf::uint32 value) {
  set_has_num_s_grids();
  num_s_grids_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.num_s_grids)
}

// optional uint32 num_t_grids = 5;
bool LatticeStTraining::has_num_t_grids() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LatticeStTraining::set_has_num_t_grids() {
  _has_bits_[0] |= 0x00000010u;
}
void LatticeStTraining::clear_has_num_t_grids() {
  _has_bits_[0] &= ~0x00000010u;
}
void LatticeStTraining::clear_num_t_grids() {
  num_t_grids_ = 0u;
  clear_has_num_t_grids();
}
 ::google::protobuf::uint32 LatticeStTraining::num_t_grids() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.num_t_grids)
  return num_t_grids_;
}
 void LatticeStTraining::set_num_t_grids(::google::protobuf::uint32 value) {
  set_has_num_t_grids();
  num_t_grids_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.num_t_grids)
}

// optional double s_resolution = 6;
bool LatticeStTraining::has_s_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LatticeStTraining::set_has_s_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
void LatticeStTraining::clear_has_s_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
void LatticeStTraining::clear_s_resolution() {
  s_resolution_ = 0;
  clear_has_s_resolution();
}
 double LatticeStTraining::s_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.s_resolution)
  return s_resolution_;
}
 void LatticeStTraining::set_s_resolution(double value) {
  set_has_s_resolution();
  s_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.s_resolution)
}

// optional double t_resolution = 7;
bool LatticeStTraining::has_t_resolution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LatticeStTraining::set_has_t_resolution() {
  _has_bits_[0] |= 0x00000040u;
}
void LatticeStTraining::clear_has_t_resolution() {
  _has_bits_[0] &= ~0x00000040u;
}
void LatticeStTraining::clear_t_resolution() {
  t_resolution_ = 0;
  clear_has_t_resolution();
}
 double LatticeStTraining::t_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.t_resolution)
  return t_resolution_;
}
 void LatticeStTraining::set_t_resolution(double value) {
  set_has_t_resolution();
  t_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.t_resolution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostComponents::kCostComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostComponents::CostComponents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CostComponents)
}

void CostComponents::InitAsDefaultInstance() {
}

CostComponents::CostComponents(const CostComponents& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CostComponents)
}

void CostComponents::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostComponents::~CostComponents() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CostComponents)
  SharedDtor();
}

void CostComponents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CostComponents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostComponents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostComponents_descriptor_;
}

const CostComponents& CostComponents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

CostComponents* CostComponents::default_instance_ = NULL;

CostComponents* CostComponents::New(::google::protobuf::Arena* arena) const {
  CostComponents* n = new CostComponents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CostComponents::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CostComponents)
  cost_component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CostComponents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.CostComponents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double cost_component = 1;
      case 1: {
        if (tag == 9) {
         parse_cost_component:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_cost_component())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cost_component())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_cost_component;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.CostComponents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.CostComponents)
  return false;
#undef DO_
}

void CostComponents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.CostComponents)
  // repeated double cost_component = 1;
  for (int i = 0; i < this->cost_component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->cost_component(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.CostComponents)
}

::google::protobuf::uint8* CostComponents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CostComponents)
  // repeated double cost_component = 1;
  for (int i = 0; i < this->cost_component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->cost_component(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CostComponents)
  return target;
}

int CostComponents::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CostComponents)
  int total_size = 0;

  // repeated double cost_component = 1;
  {
    int data_size = 0;
    data_size = 8 * this->cost_component_size();
    total_size += 1 * this->cost_component_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostComponents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CostComponents)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CostComponents* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CostComponents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CostComponents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CostComponents)
    MergeFrom(*source);
  }
}

void CostComponents::MergeFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CostComponents)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cost_component_.MergeFrom(from.cost_component_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CostComponents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CostComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostComponents::CopyFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CostComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostComponents::IsInitialized() const {

  return true;
}

void CostComponents::Swap(CostComponents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CostComponents::InternalSwap(CostComponents* other) {
  cost_component_.UnsafeArenaSwap(&other->cost_component_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CostComponents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostComponents_descriptor_;
  metadata.reflection = CostComponents_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CostComponents

// repeated double cost_component = 1;
int CostComponents::cost_component_size() const {
  return cost_component_.size();
}
void CostComponents::clear_cost_component() {
  cost_component_.Clear();
}
 double CostComponents::cost_component(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CostComponents.cost_component)
  return cost_component_.Get(index);
}
 void CostComponents::set_cost_component(int index, double value) {
  cost_component_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.CostComponents.cost_component)
}
 void CostComponents::add_cost_component(double value) {
  cost_component_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.CostComponents.cost_component)
}
 const ::google::protobuf::RepeatedField< double >&
CostComponents::cost_component() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.CostComponents.cost_component)
  return cost_component_;
}
 ::google::protobuf::RepeatedField< double >*
CostComponents::mutable_cost_component() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.CostComponents.cost_component)
  return &cost_component_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoTuningTrainingData::kTeacherComponentFieldNumber;
const int AutoTuningTrainingData::kStudentComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoTuningTrainingData::AutoTuningTrainingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.AutoTuningTrainingData)
}

void AutoTuningTrainingData::InitAsDefaultInstance() {
  teacher_component_ = const_cast< ::apollo::planning_internal::CostComponents*>(&::apollo::planning_internal::CostComponents::default_instance());
  student_component_ = const_cast< ::apollo::planning_internal::CostComponents*>(&::apollo::planning_internal::CostComponents::default_instance());
}

AutoTuningTrainingData::AutoTuningTrainingData(const AutoTuningTrainingData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.AutoTuningTrainingData)
}

void AutoTuningTrainingData::SharedCtor() {
  _cached_size_ = 0;
  teacher_component_ = NULL;
  student_component_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoTuningTrainingData::~AutoTuningTrainingData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.AutoTuningTrainingData)
  SharedDtor();
}

void AutoTuningTrainingData::SharedDtor() {
  if (this != default_instance_) {
    delete teacher_component_;
    delete student_component_;
  }
}

void AutoTuningTrainingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoTuningTrainingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoTuningTrainingData_descriptor_;
}

const AutoTuningTrainingData& AutoTuningTrainingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

AutoTuningTrainingData* AutoTuningTrainingData::default_instance_ = NULL;

AutoTuningTrainingData* AutoTuningTrainingData::New(::google::protobuf::Arena* arena) const {
  AutoTuningTrainingData* n = new AutoTuningTrainingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoTuningTrainingData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.AutoTuningTrainingData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_teacher_component()) {
      if (teacher_component_ != NULL) teacher_component_->::apollo::planning_internal::CostComponents::Clear();
    }
    if (has_student_component()) {
      if (student_component_ != NULL) student_component_->::apollo::planning_internal::CostComponents::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AutoTuningTrainingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.AutoTuningTrainingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning_internal.CostComponents teacher_component = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teacher_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_student_component;
        break;
      }

      // optional .apollo.planning_internal.CostComponents student_component = 2;
      case 2: {
        if (tag == 18) {
         parse_student_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_student_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.AutoTuningTrainingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.AutoTuningTrainingData)
  return false;
#undef DO_
}

void AutoTuningTrainingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.AutoTuningTrainingData)
  // optional .apollo.planning_internal.CostComponents teacher_component = 1;
  if (has_teacher_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->teacher_component_, output);
  }

  // optional .apollo.planning_internal.CostComponents student_component = 2;
  if (has_student_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->student_component_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.AutoTuningTrainingData)
}

::google::protobuf::uint8* AutoTuningTrainingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.AutoTuningTrainingData)
  // optional .apollo.planning_internal.CostComponents teacher_component = 1;
  if (has_teacher_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->teacher_component_, false, target);
  }

  // optional .apollo.planning_internal.CostComponents student_component = 2;
  if (has_student_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->student_component_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.AutoTuningTrainingData)
  return target;
}

int AutoTuningTrainingData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.AutoTuningTrainingData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning_internal.CostComponents teacher_component = 1;
    if (has_teacher_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->teacher_component_);
    }

    // optional .apollo.planning_internal.CostComponents student_component = 2;
    if (has_student_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->student_component_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoTuningTrainingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.AutoTuningTrainingData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutoTuningTrainingData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoTuningTrainingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.AutoTuningTrainingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.AutoTuningTrainingData)
    MergeFrom(*source);
  }
}

void AutoTuningTrainingData::MergeFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.AutoTuningTrainingData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teacher_component()) {
      mutable_teacher_component()->::apollo::planning_internal::CostComponents::MergeFrom(from.teacher_component());
    }
    if (from.has_student_component()) {
      mutable_student_component()->::apollo::planning_internal::CostComponents::MergeFrom(from.student_component());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AutoTuningTrainingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.AutoTuningTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoTuningTrainingData::CopyFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.AutoTuningTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoTuningTrainingData::IsInitialized() const {

  return true;
}

void AutoTuningTrainingData::Swap(AutoTuningTrainingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoTuningTrainingData::InternalSwap(AutoTuningTrainingData* other) {
  std::swap(teacher_component_, other->teacher_component_);
  std::swap(student_component_, other->student_component_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoTuningTrainingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoTuningTrainingData_descriptor_;
  metadata.reflection = AutoTuningTrainingData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoTuningTrainingData

// optional .apollo.planning_internal.CostComponents teacher_component = 1;
bool AutoTuningTrainingData::has_teacher_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoTuningTrainingData::set_has_teacher_component() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoTuningTrainingData::clear_has_teacher_component() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoTuningTrainingData::clear_teacher_component() {
  if (teacher_component_ != NULL) teacher_component_->::apollo::planning_internal::CostComponents::Clear();
  clear_has_teacher_component();
}
const ::apollo::planning_internal::CostComponents& AutoTuningTrainingData::teacher_component() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
  return teacher_component_ != NULL ? *teacher_component_ : *default_instance_->teacher_component_;
}
::apollo::planning_internal::CostComponents* AutoTuningTrainingData::mutable_teacher_component() {
  set_has_teacher_component();
  if (teacher_component_ == NULL) {
    teacher_component_ = new ::apollo::planning_internal::CostComponents;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
  return teacher_component_;
}
::apollo::planning_internal::CostComponents* AutoTuningTrainingData::release_teacher_component() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
  clear_has_teacher_component();
  ::apollo::planning_internal::CostComponents* temp = teacher_component_;
  teacher_component_ = NULL;
  return temp;
}
void AutoTuningTrainingData::set_allocated_teacher_component(::apollo::planning_internal::CostComponents* teacher_component) {
  delete teacher_component_;
  teacher_component_ = teacher_component;
  if (teacher_component) {
    set_has_teacher_component();
  } else {
    clear_has_teacher_component();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
}

// optional .apollo.planning_internal.CostComponents student_component = 2;
bool AutoTuningTrainingData::has_student_component() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoTuningTrainingData::set_has_student_component() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoTuningTrainingData::clear_has_student_component() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoTuningTrainingData::clear_student_component() {
  if (student_component_ != NULL) student_component_->::apollo::planning_internal::CostComponents::Clear();
  clear_has_student_component();
}
const ::apollo::planning_internal::CostComponents& AutoTuningTrainingData::student_component() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.AutoTuningTrainingData.student_component)
  return student_component_ != NULL ? *student_component_ : *default_instance_->student_component_;
}
::apollo::planning_internal::CostComponents* AutoTuningTrainingData::mutable_student_component() {
  set_has_student_component();
  if (student_component_ == NULL) {
    student_component_ = new ::apollo::planning_internal::CostComponents;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.AutoTuningTrainingData.student_component)
  return student_component_;
}
::apollo::planning_internal::CostComponents* AutoTuningTrainingData::release_student_component() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.AutoTuningTrainingData.student_component)
  clear_has_student_component();
  ::apollo::planning_internal::CostComponents* temp = student_component_;
  student_component_ = NULL;
  return temp;
}
void AutoTuningTrainingData::set_allocated_student_component(::apollo::planning_internal::CostComponents* student_component) {
  delete student_component_;
  student_component_ = student_component;
  if (student_component) {
    set_has_student_component();
  } else {
    clear_has_student_component();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.AutoTuningTrainingData.student_component)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudReferenceLineRequest::kLaneSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudReferenceLineRequest::CloudReferenceLineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CloudReferenceLineRequest)
}

void CloudReferenceLineRequest::InitAsDefaultInstance() {
}

CloudReferenceLineRequest::CloudReferenceLineRequest(const CloudReferenceLineRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineRequest)
}

void CloudReferenceLineRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloudReferenceLineRequest::~CloudReferenceLineRequest() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineRequest)
  SharedDtor();
}

void CloudReferenceLineRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloudReferenceLineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudReferenceLineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloudReferenceLineRequest_descriptor_;
}

const CloudReferenceLineRequest& CloudReferenceLineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

CloudReferenceLineRequest* CloudReferenceLineRequest::default_instance_ = NULL;

CloudReferenceLineRequest* CloudReferenceLineRequest::New(::google::protobuf::Arena* arena) const {
  CloudReferenceLineRequest* n = new CloudReferenceLineRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudReferenceLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineRequest)
  lane_segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CloudReferenceLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.CloudReferenceLineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.routing.LaneSegment lane_segment = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_lane_segment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.CloudReferenceLineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.CloudReferenceLineRequest)
  return false;
#undef DO_
}

void CloudReferenceLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.CloudReferenceLineRequest)
  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_segment(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.CloudReferenceLineRequest)
}

::google::protobuf::uint8* CloudReferenceLineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineRequest)
  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lane_segment(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineRequest)
  return target;
}

int CloudReferenceLineRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineRequest)
  int total_size = 0;

  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  total_size += 1 * this->lane_segment_size();
  for (int i = 0; i < this->lane_segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_segment(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudReferenceLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloudReferenceLineRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudReferenceLineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CloudReferenceLineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CloudReferenceLineRequest)
    MergeFrom(*source);
  }
}

void CloudReferenceLineRequest::MergeFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lane_segment_.MergeFrom(from.lane_segment_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CloudReferenceLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineRequest::CopyFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRequest::IsInitialized() const {

  return true;
}

void CloudReferenceLineRequest::Swap(CloudReferenceLineRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudReferenceLineRequest::InternalSwap(CloudReferenceLineRequest* other) {
  lane_segment_.UnsafeArenaSwap(&other->lane_segment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudReferenceLineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloudReferenceLineRequest_descriptor_;
  metadata.reflection = CloudReferenceLineRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudReferenceLineRequest

// repeated .apollo.routing.LaneSegment lane_segment = 1;
int CloudReferenceLineRequest::lane_segment_size() const {
  return lane_segment_.size();
}
void CloudReferenceLineRequest::clear_lane_segment() {
  lane_segment_.Clear();
}
const ::apollo::routing::LaneSegment& CloudReferenceLineRequest::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Get(index);
}
::apollo::routing::LaneSegment* CloudReferenceLineRequest::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Mutable(index);
}
::apollo::routing::LaneSegment* CloudReferenceLineRequest::add_lane_segment() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >*
CloudReferenceLineRequest::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return &lane_segment_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >&
CloudReferenceLineRequest::lane_segment() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudReferenceLineRoutingRequest::kRoutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
}

void CloudReferenceLineRoutingRequest::InitAsDefaultInstance() {
  routing_ = const_cast< ::apollo::routing::RoutingResponse*>(&::apollo::routing::RoutingResponse::default_instance());
}

CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest(const CloudReferenceLineRoutingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
}

void CloudReferenceLineRoutingRequest::SharedCtor() {
  _cached_size_ = 0;
  routing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloudReferenceLineRoutingRequest::~CloudReferenceLineRoutingRequest() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  SharedDtor();
}

void CloudReferenceLineRoutingRequest::SharedDtor() {
  if (this != default_instance_) {
    delete routing_;
  }
}

void CloudReferenceLineRoutingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudReferenceLineRoutingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloudReferenceLineRoutingRequest_descriptor_;
}

const CloudReferenceLineRoutingRequest& CloudReferenceLineRoutingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

CloudReferenceLineRoutingRequest* CloudReferenceLineRoutingRequest::default_instance_ = NULL;

CloudReferenceLineRoutingRequest* CloudReferenceLineRoutingRequest::New(::google::protobuf::Arena* arena) const {
  CloudReferenceLineRoutingRequest* n = new CloudReferenceLineRoutingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudReferenceLineRoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (has_routing()) {
    if (routing_ != NULL) routing_->::apollo::routing::RoutingResponse::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CloudReferenceLineRoutingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.routing.RoutingResponse routing = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  return false;
#undef DO_
}

void CloudReferenceLineRoutingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  // optional .apollo.routing.RoutingResponse routing = 1;
  if (has_routing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->routing_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.CloudReferenceLineRoutingRequest)
}

::google::protobuf::uint8* CloudReferenceLineRoutingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  // optional .apollo.routing.RoutingResponse routing = 1;
  if (has_routing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->routing_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  return target;
}

int CloudReferenceLineRoutingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  int total_size = 0;

  // optional .apollo.routing.RoutingResponse routing = 1;
  if (has_routing()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->routing_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudReferenceLineRoutingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloudReferenceLineRoutingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudReferenceLineRoutingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CloudReferenceLineRoutingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CloudReferenceLineRoutingRequest)
    MergeFrom(*source);
  }
}

void CloudReferenceLineRoutingRequest::MergeFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routing()) {
      mutable_routing()->::apollo::routing::RoutingResponse::MergeFrom(from.routing());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CloudReferenceLineRoutingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineRoutingRequest::CopyFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRoutingRequest::IsInitialized() const {

  return true;
}

void CloudReferenceLineRoutingRequest::Swap(CloudReferenceLineRoutingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudReferenceLineRoutingRequest::InternalSwap(CloudReferenceLineRoutingRequest* other) {
  std::swap(routing_, other->routing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudReferenceLineRoutingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloudReferenceLineRoutingRequest_descriptor_;
  metadata.reflection = CloudReferenceLineRoutingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudReferenceLineRoutingRequest

// optional .apollo.routing.RoutingResponse routing = 1;
bool CloudReferenceLineRoutingRequest::has_routing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CloudReferenceLineRoutingRequest::set_has_routing() {
  _has_bits_[0] |= 0x00000001u;
}
void CloudReferenceLineRoutingRequest::clear_has_routing() {
  _has_bits_[0] &= ~0x00000001u;
}
void CloudReferenceLineRoutingRequest::clear_routing() {
  if (routing_ != NULL) routing_->::apollo::routing::RoutingResponse::Clear();
  clear_has_routing();
}
const ::apollo::routing::RoutingResponse& CloudReferenceLineRoutingRequest::routing() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return routing_ != NULL ? *routing_ : *default_instance_->routing_;
}
::apollo::routing::RoutingResponse* CloudReferenceLineRoutingRequest::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::apollo::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return routing_;
}
::apollo::routing::RoutingResponse* CloudReferenceLineRoutingRequest::release_routing() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
  clear_has_routing();
  ::apollo::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
void CloudReferenceLineRoutingRequest::set_allocated_routing(::apollo::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudReferenceLineResponse::kSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudReferenceLineResponse::CloudReferenceLineResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CloudReferenceLineResponse)
}

void CloudReferenceLineResponse::InitAsDefaultInstance() {
}

CloudReferenceLineResponse::CloudReferenceLineResponse(const CloudReferenceLineResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineResponse)
}

void CloudReferenceLineResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloudReferenceLineResponse::~CloudReferenceLineResponse() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineResponse)
  SharedDtor();
}

void CloudReferenceLineResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloudReferenceLineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudReferenceLineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloudReferenceLineResponse_descriptor_;
}

const CloudReferenceLineResponse& CloudReferenceLineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  return *default_instance_;
}

CloudReferenceLineResponse* CloudReferenceLineResponse::default_instance_ = NULL;

CloudReferenceLineResponse* CloudReferenceLineResponse::New(::google::protobuf::Arena* arena) const {
  CloudReferenceLineResponse* n = new CloudReferenceLineResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudReferenceLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineResponse)
  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CloudReferenceLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.CloudReferenceLineResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Path segment = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_segment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.CloudReferenceLineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.CloudReferenceLineResponse)
  return false;
#undef DO_
}

void CloudReferenceLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.CloudReferenceLineResponse)
  // repeated .apollo.common.Path segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.CloudReferenceLineResponse)
}

::google::protobuf::uint8* CloudReferenceLineResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineResponse)
  // repeated .apollo.common.Path segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segment(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineResponse)
  return target;
}

int CloudReferenceLineResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineResponse)
  int total_size = 0;

  // repeated .apollo.common.Path segment = 1;
  total_size += 1 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudReferenceLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloudReferenceLineResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudReferenceLineResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CloudReferenceLineResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CloudReferenceLineResponse)
    MergeFrom(*source);
  }
}

void CloudReferenceLineResponse::MergeFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  segment_.MergeFrom(from.segment_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CloudReferenceLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineResponse::CopyFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineResponse::IsInitialized() const {

  return true;
}

void CloudReferenceLineResponse::Swap(CloudReferenceLineResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudReferenceLineResponse::InternalSwap(CloudReferenceLineResponse* other) {
  segment_.UnsafeArenaSwap(&other->segment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudReferenceLineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloudReferenceLineResponse_descriptor_;
  metadata.reflection = CloudReferenceLineResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudReferenceLineResponse

// repeated .apollo.common.Path segment = 1;
int CloudReferenceLineResponse::segment_size() const {
  return segment_.size();
}
void CloudReferenceLineResponse::clear_segment() {
  segment_.Clear();
}
const ::apollo::common::Path& CloudReferenceLineResponse::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Get(index);
}
::apollo::common::Path* CloudReferenceLineResponse::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Mutable(index);
}
::apollo::common::Path* CloudReferenceLineResponse::add_segment() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Path >*
CloudReferenceLineResponse::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return &segment_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >&
CloudReferenceLineResponse::segment() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return segment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning_internal
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
