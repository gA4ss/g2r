// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/dp_poly_path_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/dp_poly_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* DpPolyPathConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DpPolyPathConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/dp_poly_path_config.proto");
  GOOGLE_CHECK(file != NULL);
  DpPolyPathConfig_descriptor_ = file->message_type(0);
  static const int DpPolyPathConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, waypoint_sampler_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, eval_time_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_ignore_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_collision_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_risk_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_collision_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_dl_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_ddl_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_param_l0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_param_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_param_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_out_lane_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_end_l_cost_),
  };
  DpPolyPathConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DpPolyPathConfig_descriptor_,
      DpPolyPathConfig::default_instance_,
      DpPolyPathConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(DpPolyPathConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DpPolyPathConfig_descriptor_, &DpPolyPathConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto() {
  delete DpPolyPathConfig::default_instance_;
  delete DpPolyPathConfig_reflection_;
}

void protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::planning::protobuf_AddDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"planning/dp_poly_path_config.proto\022\017ap"
    "ollo.planning\032&planning/waypoint_sampler"
    "_config.proto\"\203\004\n\020DpPolyPathConfig\022G\n\027wa"
    "ypoint_sampler_config\030\001 \001(\0132&.apollo.pla"
    "nning.WaypointSamplerConfig\022\037\n\022eval_time"
    "_interval\030\002 \001(\001:\0030.1\022\034\n\017path_resolution\030"
    "\003 \001(\001:\0030.1\022$\n\030obstacle_ignore_distance\030\004"
    " \001(\001:\00220\022(\n\033obstacle_collision_distance\030"
    "\005 \001(\001:\0030.2\022!\n\026obstacle_risk_distance\030\006 \001"
    "(\001:\0012\022%\n\027obstacle_collision_cost\030\007 \001(\001:\004"
    "1000\022\023\n\013path_l_cost\030\010 \001(\001\022\024\n\014path_dl_cos"
    "t\030\t \001(\001\022\025\n\rpath_ddl_cost\030\n \001(\001\022\034\n\024path_l"
    "_cost_param_l0\030\013 \001(\001\022\033\n\023path_l_cost_para"
    "m_b\030\014 \001(\001\022\033\n\023path_l_cost_param_k\030\r \001(\001\022\032"
    "\n\022path_out_lane_cost\030\016 \001(\001\022\027\n\017path_end_l"
    "_cost\030\017 \001(\001", 611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/dp_poly_path_config.proto", &protobuf_RegisterTypes);
  DpPolyPathConfig::default_instance_ = new DpPolyPathConfig();
  DpPolyPathConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpPolyPathConfig::kWaypointSamplerConfigFieldNumber;
const int DpPolyPathConfig::kEvalTimeIntervalFieldNumber;
const int DpPolyPathConfig::kPathResolutionFieldNumber;
const int DpPolyPathConfig::kObstacleIgnoreDistanceFieldNumber;
const int DpPolyPathConfig::kObstacleCollisionDistanceFieldNumber;
const int DpPolyPathConfig::kObstacleRiskDistanceFieldNumber;
const int DpPolyPathConfig::kObstacleCollisionCostFieldNumber;
const int DpPolyPathConfig::kPathLCostFieldNumber;
const int DpPolyPathConfig::kPathDlCostFieldNumber;
const int DpPolyPathConfig::kPathDdlCostFieldNumber;
const int DpPolyPathConfig::kPathLCostParamL0FieldNumber;
const int DpPolyPathConfig::kPathLCostParamBFieldNumber;
const int DpPolyPathConfig::kPathLCostParamKFieldNumber;
const int DpPolyPathConfig::kPathOutLaneCostFieldNumber;
const int DpPolyPathConfig::kPathEndLCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpPolyPathConfig::DpPolyPathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DpPolyPathConfig)
}

void DpPolyPathConfig::InitAsDefaultInstance() {
  waypoint_sampler_config_ = const_cast< ::apollo::planning::WaypointSamplerConfig*>(&::apollo::planning::WaypointSamplerConfig::default_instance());
}

DpPolyPathConfig::DpPolyPathConfig(const DpPolyPathConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpPolyPathConfig)
}

void DpPolyPathConfig::SharedCtor() {
  _cached_size_ = 0;
  waypoint_sampler_config_ = NULL;
  eval_time_interval_ = 0.1;
  path_resolution_ = 0.1;
  obstacle_ignore_distance_ = 20;
  obstacle_collision_distance_ = 0.2;
  obstacle_risk_distance_ = 2;
  obstacle_collision_cost_ = 1000;
  path_l_cost_ = 0;
  path_dl_cost_ = 0;
  path_ddl_cost_ = 0;
  path_l_cost_param_l0_ = 0;
  path_l_cost_param_b_ = 0;
  path_l_cost_param_k_ = 0;
  path_out_lane_cost_ = 0;
  path_end_l_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DpPolyPathConfig::~DpPolyPathConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpPolyPathConfig)
  SharedDtor();
}

void DpPolyPathConfig::SharedDtor() {
  if (this != default_instance_) {
    delete waypoint_sampler_config_;
  }
}

void DpPolyPathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpPolyPathConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DpPolyPathConfig_descriptor_;
}

const DpPolyPathConfig& DpPolyPathConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdp_5fpoly_5fpath_5fconfig_2eproto();
  return *default_instance_;
}

DpPolyPathConfig* DpPolyPathConfig::default_instance_ = NULL;

DpPolyPathConfig* DpPolyPathConfig::New(::google::protobuf::Arena* arena) const {
  DpPolyPathConfig* n = new DpPolyPathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpPolyPathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpPolyPathConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DpPolyPathConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DpPolyPathConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_waypoint_sampler_config()) {
      if (waypoint_sampler_config_ != NULL) waypoint_sampler_config_->::apollo::planning::WaypointSamplerConfig::Clear();
    }
    eval_time_interval_ = 0.1;
    path_resolution_ = 0.1;
    obstacle_ignore_distance_ = 20;
    obstacle_collision_distance_ = 0.2;
    obstacle_risk_distance_ = 2;
    obstacle_collision_cost_ = 1000;
    path_l_cost_ = 0;
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(path_dl_cost_, path_end_l_cost_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DpPolyPathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DpPolyPathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.WaypointSamplerConfig waypoint_sampler_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waypoint_sampler_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_eval_time_interval;
        break;
      }

      // optional double eval_time_interval = 2 [default = 0.1];
      case 2: {
        if (tag == 17) {
         parse_eval_time_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eval_time_interval_)));
          set_has_eval_time_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_path_resolution;
        break;
      }

      // optional double path_resolution = 3 [default = 0.1];
      case 3: {
        if (tag == 25) {
         parse_path_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_resolution_)));
          set_has_path_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_obstacle_ignore_distance;
        break;
      }

      // optional double obstacle_ignore_distance = 4 [default = 20];
      case 4: {
        if (tag == 33) {
         parse_obstacle_ignore_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_ignore_distance_)));
          set_has_obstacle_ignore_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_obstacle_collision_distance;
        break;
      }

      // optional double obstacle_collision_distance = 5 [default = 0.2];
      case 5: {
        if (tag == 41) {
         parse_obstacle_collision_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_collision_distance_)));
          set_has_obstacle_collision_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_obstacle_risk_distance;
        break;
      }

      // optional double obstacle_risk_distance = 6 [default = 2];
      case 6: {
        if (tag == 49) {
         parse_obstacle_risk_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_risk_distance_)));
          set_has_obstacle_risk_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_obstacle_collision_cost;
        break;
      }

      // optional double obstacle_collision_cost = 7 [default = 1000];
      case 7: {
        if (tag == 57) {
         parse_obstacle_collision_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_collision_cost_)));
          set_has_obstacle_collision_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_path_l_cost;
        break;
      }

      // optional double path_l_cost = 8;
      case 8: {
        if (tag == 65) {
         parse_path_l_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_)));
          set_has_path_l_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_path_dl_cost;
        break;
      }

      // optional double path_dl_cost = 9;
      case 9: {
        if (tag == 73) {
         parse_path_dl_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_dl_cost_)));
          set_has_path_dl_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_path_ddl_cost;
        break;
      }

      // optional double path_ddl_cost = 10;
      case 10: {
        if (tag == 81) {
         parse_path_ddl_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_ddl_cost_)));
          set_has_path_ddl_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_path_l_cost_param_l0;
        break;
      }

      // optional double path_l_cost_param_l0 = 11;
      case 11: {
        if (tag == 89) {
         parse_path_l_cost_param_l0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_l0_)));
          set_has_path_l_cost_param_l0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_path_l_cost_param_b;
        break;
      }

      // optional double path_l_cost_param_b = 12;
      case 12: {
        if (tag == 97) {
         parse_path_l_cost_param_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_b_)));
          set_has_path_l_cost_param_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_path_l_cost_param_k;
        break;
      }

      // optional double path_l_cost_param_k = 13;
      case 13: {
        if (tag == 105) {
         parse_path_l_cost_param_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_k_)));
          set_has_path_l_cost_param_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_path_out_lane_cost;
        break;
      }

      // optional double path_out_lane_cost = 14;
      case 14: {
        if (tag == 113) {
         parse_path_out_lane_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_out_lane_cost_)));
          set_has_path_out_lane_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_path_end_l_cost;
        break;
      }

      // optional double path_end_l_cost = 15;
      case 15: {
        if (tag == 121) {
         parse_path_end_l_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_end_l_cost_)));
          set_has_path_end_l_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DpPolyPathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DpPolyPathConfig)
  return false;
#undef DO_
}

void DpPolyPathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DpPolyPathConfig)
  // optional .apollo.planning.WaypointSamplerConfig waypoint_sampler_config = 1;
  if (has_waypoint_sampler_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->waypoint_sampler_config_, output);
  }

  // optional double eval_time_interval = 2 [default = 0.1];
  if (has_eval_time_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->eval_time_interval(), output);
  }

  // optional double path_resolution = 3 [default = 0.1];
  if (has_path_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->path_resolution(), output);
  }

  // optional double obstacle_ignore_distance = 4 [default = 20];
  if (has_obstacle_ignore_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->obstacle_ignore_distance(), output);
  }

  // optional double obstacle_collision_distance = 5 [default = 0.2];
  if (has_obstacle_collision_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->obstacle_collision_distance(), output);
  }

  // optional double obstacle_risk_distance = 6 [default = 2];
  if (has_obstacle_risk_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->obstacle_risk_distance(), output);
  }

  // optional double obstacle_collision_cost = 7 [default = 1000];
  if (has_obstacle_collision_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->obstacle_collision_cost(), output);
  }

  // optional double path_l_cost = 8;
  if (has_path_l_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->path_l_cost(), output);
  }

  // optional double path_dl_cost = 9;
  if (has_path_dl_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->path_dl_cost(), output);
  }

  // optional double path_ddl_cost = 10;
  if (has_path_ddl_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->path_ddl_cost(), output);
  }

  // optional double path_l_cost_param_l0 = 11;
  if (has_path_l_cost_param_l0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->path_l_cost_param_l0(), output);
  }

  // optional double path_l_cost_param_b = 12;
  if (has_path_l_cost_param_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->path_l_cost_param_b(), output);
  }

  // optional double path_l_cost_param_k = 13;
  if (has_path_l_cost_param_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->path_l_cost_param_k(), output);
  }

  // optional double path_out_lane_cost = 14;
  if (has_path_out_lane_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->path_out_lane_cost(), output);
  }

  // optional double path_end_l_cost = 15;
  if (has_path_end_l_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->path_end_l_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DpPolyPathConfig)
}

::google::protobuf::uint8* DpPolyPathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpPolyPathConfig)
  // optional .apollo.planning.WaypointSamplerConfig waypoint_sampler_config = 1;
  if (has_waypoint_sampler_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->waypoint_sampler_config_, false, target);
  }

  // optional double eval_time_interval = 2 [default = 0.1];
  if (has_eval_time_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->eval_time_interval(), target);
  }

  // optional double path_resolution = 3 [default = 0.1];
  if (has_path_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->path_resolution(), target);
  }

  // optional double obstacle_ignore_distance = 4 [default = 20];
  if (has_obstacle_ignore_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->obstacle_ignore_distance(), target);
  }

  // optional double obstacle_collision_distance = 5 [default = 0.2];
  if (has_obstacle_collision_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->obstacle_collision_distance(), target);
  }

  // optional double obstacle_risk_distance = 6 [default = 2];
  if (has_obstacle_risk_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->obstacle_risk_distance(), target);
  }

  // optional double obstacle_collision_cost = 7 [default = 1000];
  if (has_obstacle_collision_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->obstacle_collision_cost(), target);
  }

  // optional double path_l_cost = 8;
  if (has_path_l_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->path_l_cost(), target);
  }

  // optional double path_dl_cost = 9;
  if (has_path_dl_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->path_dl_cost(), target);
  }

  // optional double path_ddl_cost = 10;
  if (has_path_ddl_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->path_ddl_cost(), target);
  }

  // optional double path_l_cost_param_l0 = 11;
  if (has_path_l_cost_param_l0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->path_l_cost_param_l0(), target);
  }

  // optional double path_l_cost_param_b = 12;
  if (has_path_l_cost_param_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->path_l_cost_param_b(), target);
  }

  // optional double path_l_cost_param_k = 13;
  if (has_path_l_cost_param_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->path_l_cost_param_k(), target);
  }

  // optional double path_out_lane_cost = 14;
  if (has_path_out_lane_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->path_out_lane_cost(), target);
  }

  // optional double path_end_l_cost = 15;
  if (has_path_end_l_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->path_end_l_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpPolyPathConfig)
  return target;
}

int DpPolyPathConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpPolyPathConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.WaypointSamplerConfig waypoint_sampler_config = 1;
    if (has_waypoint_sampler_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->waypoint_sampler_config_);
    }

    // optional double eval_time_interval = 2 [default = 0.1];
    if (has_eval_time_interval()) {
      total_size += 1 + 8;
    }

    // optional double path_resolution = 3 [default = 0.1];
    if (has_path_resolution()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_ignore_distance = 4 [default = 20];
    if (has_obstacle_ignore_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_collision_distance = 5 [default = 0.2];
    if (has_obstacle_collision_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_risk_distance = 6 [default = 2];
    if (has_obstacle_risk_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_collision_cost = 7 [default = 1000];
    if (has_obstacle_collision_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost = 8;
    if (has_path_l_cost()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double path_dl_cost = 9;
    if (has_path_dl_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_ddl_cost = 10;
    if (has_path_ddl_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_l0 = 11;
    if (has_path_l_cost_param_l0()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_b = 12;
    if (has_path_l_cost_param_b()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_k = 13;
    if (has_path_l_cost_param_k()) {
      total_size += 1 + 8;
    }

    // optional double path_out_lane_cost = 14;
    if (has_path_out_lane_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_end_l_cost = 15;
    if (has_path_end_l_cost()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpPolyPathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DpPolyPathConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DpPolyPathConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DpPolyPathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DpPolyPathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DpPolyPathConfig)
    MergeFrom(*source);
  }
}

void DpPolyPathConfig::MergeFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpPolyPathConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_waypoint_sampler_config()) {
      mutable_waypoint_sampler_config()->::apollo::planning::WaypointSamplerConfig::MergeFrom(from.waypoint_sampler_config());
    }
    if (from.has_eval_time_interval()) {
      set_eval_time_interval(from.eval_time_interval());
    }
    if (from.has_path_resolution()) {
      set_path_resolution(from.path_resolution());
    }
    if (from.has_obstacle_ignore_distance()) {
      set_obstacle_ignore_distance(from.obstacle_ignore_distance());
    }
    if (from.has_obstacle_collision_distance()) {
      set_obstacle_collision_distance(from.obstacle_collision_distance());
    }
    if (from.has_obstacle_risk_distance()) {
      set_obstacle_risk_distance(from.obstacle_risk_distance());
    }
    if (from.has_obstacle_collision_cost()) {
      set_obstacle_collision_cost(from.obstacle_collision_cost());
    }
    if (from.has_path_l_cost()) {
      set_path_l_cost(from.path_l_cost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_path_dl_cost()) {
      set_path_dl_cost(from.path_dl_cost());
    }
    if (from.has_path_ddl_cost()) {
      set_path_ddl_cost(from.path_ddl_cost());
    }
    if (from.has_path_l_cost_param_l0()) {
      set_path_l_cost_param_l0(from.path_l_cost_param_l0());
    }
    if (from.has_path_l_cost_param_b()) {
      set_path_l_cost_param_b(from.path_l_cost_param_b());
    }
    if (from.has_path_l_cost_param_k()) {
      set_path_l_cost_param_k(from.path_l_cost_param_k());
    }
    if (from.has_path_out_lane_cost()) {
      set_path_out_lane_cost(from.path_out_lane_cost());
    }
    if (from.has_path_end_l_cost()) {
      set_path_end_l_cost(from.path_end_l_cost());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DpPolyPathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DpPolyPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpPolyPathConfig::CopyFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpPolyPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyPathConfig::IsInitialized() const {

  return true;
}

void DpPolyPathConfig::Swap(DpPolyPathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpPolyPathConfig::InternalSwap(DpPolyPathConfig* other) {
  std::swap(waypoint_sampler_config_, other->waypoint_sampler_config_);
  std::swap(eval_time_interval_, other->eval_time_interval_);
  std::swap(path_resolution_, other->path_resolution_);
  std::swap(obstacle_ignore_distance_, other->obstacle_ignore_distance_);
  std::swap(obstacle_collision_distance_, other->obstacle_collision_distance_);
  std::swap(obstacle_risk_distance_, other->obstacle_risk_distance_);
  std::swap(obstacle_collision_cost_, other->obstacle_collision_cost_);
  std::swap(path_l_cost_, other->path_l_cost_);
  std::swap(path_dl_cost_, other->path_dl_cost_);
  std::swap(path_ddl_cost_, other->path_ddl_cost_);
  std::swap(path_l_cost_param_l0_, other->path_l_cost_param_l0_);
  std::swap(path_l_cost_param_b_, other->path_l_cost_param_b_);
  std::swap(path_l_cost_param_k_, other->path_l_cost_param_k_);
  std::swap(path_out_lane_cost_, other->path_out_lane_cost_);
  std::swap(path_end_l_cost_, other->path_end_l_cost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpPolyPathConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DpPolyPathConfig_descriptor_;
  metadata.reflection = DpPolyPathConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpPolyPathConfig

// optional .apollo.planning.WaypointSamplerConfig waypoint_sampler_config = 1;
bool DpPolyPathConfig::has_waypoint_sampler_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DpPolyPathConfig::set_has_waypoint_sampler_config() {
  _has_bits_[0] |= 0x00000001u;
}
void DpPolyPathConfig::clear_has_waypoint_sampler_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void DpPolyPathConfig::clear_waypoint_sampler_config() {
  if (waypoint_sampler_config_ != NULL) waypoint_sampler_config_->::apollo::planning::WaypointSamplerConfig::Clear();
  clear_has_waypoint_sampler_config();
}
const ::apollo::planning::WaypointSamplerConfig& DpPolyPathConfig::waypoint_sampler_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
  return waypoint_sampler_config_ != NULL ? *waypoint_sampler_config_ : *default_instance_->waypoint_sampler_config_;
}
::apollo::planning::WaypointSamplerConfig* DpPolyPathConfig::mutable_waypoint_sampler_config() {
  set_has_waypoint_sampler_config();
  if (waypoint_sampler_config_ == NULL) {
    waypoint_sampler_config_ = new ::apollo::planning::WaypointSamplerConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
  return waypoint_sampler_config_;
}
::apollo::planning::WaypointSamplerConfig* DpPolyPathConfig::release_waypoint_sampler_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
  clear_has_waypoint_sampler_config();
  ::apollo::planning::WaypointSamplerConfig* temp = waypoint_sampler_config_;
  waypoint_sampler_config_ = NULL;
  return temp;
}
void DpPolyPathConfig::set_allocated_waypoint_sampler_config(::apollo::planning::WaypointSamplerConfig* waypoint_sampler_config) {
  delete waypoint_sampler_config_;
  waypoint_sampler_config_ = waypoint_sampler_config;
  if (waypoint_sampler_config) {
    set_has_waypoint_sampler_config();
  } else {
    clear_has_waypoint_sampler_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DpPolyPathConfig.waypoint_sampler_config)
}

// optional double eval_time_interval = 2 [default = 0.1];
bool DpPolyPathConfig::has_eval_time_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DpPolyPathConfig::set_has_eval_time_interval() {
  _has_bits_[0] |= 0x00000002u;
}
void DpPolyPathConfig::clear_has_eval_time_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
void DpPolyPathConfig::clear_eval_time_interval() {
  eval_time_interval_ = 0.1;
  clear_has_eval_time_interval();
}
 double DpPolyPathConfig::eval_time_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.eval_time_interval)
  return eval_time_interval_;
}
 void DpPolyPathConfig::set_eval_time_interval(double value) {
  set_has_eval_time_interval();
  eval_time_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.eval_time_interval)
}

// optional double path_resolution = 3 [default = 0.1];
bool DpPolyPathConfig::has_path_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DpPolyPathConfig::set_has_path_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
void DpPolyPathConfig::clear_has_path_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
void DpPolyPathConfig::clear_path_resolution() {
  path_resolution_ = 0.1;
  clear_has_path_resolution();
}
 double DpPolyPathConfig::path_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_resolution)
  return path_resolution_;
}
 void DpPolyPathConfig::set_path_resolution(double value) {
  set_has_path_resolution();
  path_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_resolution)
}

// optional double obstacle_ignore_distance = 4 [default = 20];
bool DpPolyPathConfig::has_obstacle_ignore_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_ignore_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void DpPolyPathConfig::clear_has_obstacle_ignore_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void DpPolyPathConfig::clear_obstacle_ignore_distance() {
  obstacle_ignore_distance_ = 20;
  clear_has_obstacle_ignore_distance();
}
 double DpPolyPathConfig::obstacle_ignore_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
  return obstacle_ignore_distance_;
}
 void DpPolyPathConfig::set_obstacle_ignore_distance(double value) {
  set_has_obstacle_ignore_distance();
  obstacle_ignore_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
}

// optional double obstacle_collision_distance = 5 [default = 0.2];
bool DpPolyPathConfig::has_obstacle_collision_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_collision_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void DpPolyPathConfig::clear_has_obstacle_collision_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void DpPolyPathConfig::clear_obstacle_collision_distance() {
  obstacle_collision_distance_ = 0.2;
  clear_has_obstacle_collision_distance();
}
 double DpPolyPathConfig::obstacle_collision_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
  return obstacle_collision_distance_;
}
 void DpPolyPathConfig::set_obstacle_collision_distance(double value) {
  set_has_obstacle_collision_distance();
  obstacle_collision_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
}

// optional double obstacle_risk_distance = 6 [default = 2];
bool DpPolyPathConfig::has_obstacle_risk_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_risk_distance() {
  _has_bits_[0] |= 0x00000020u;
}
void DpPolyPathConfig::clear_has_obstacle_risk_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
void DpPolyPathConfig::clear_obstacle_risk_distance() {
  obstacle_risk_distance_ = 2;
  clear_has_obstacle_risk_distance();
}
 double DpPolyPathConfig::obstacle_risk_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
  return obstacle_risk_distance_;
}
 void DpPolyPathConfig::set_obstacle_risk_distance(double value) {
  set_has_obstacle_risk_distance();
  obstacle_risk_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
}

// optional double obstacle_collision_cost = 7 [default = 1000];
bool DpPolyPathConfig::has_obstacle_collision_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_collision_cost() {
  _has_bits_[0] |= 0x00000040u;
}
void DpPolyPathConfig::clear_has_obstacle_collision_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
void DpPolyPathConfig::clear_obstacle_collision_cost() {
  obstacle_collision_cost_ = 1000;
  clear_has_obstacle_collision_cost();
}
 double DpPolyPathConfig::obstacle_collision_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
  return obstacle_collision_cost_;
}
 void DpPolyPathConfig::set_obstacle_collision_cost(double value) {
  set_has_obstacle_collision_cost();
  obstacle_collision_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
}

// optional double path_l_cost = 8;
bool DpPolyPathConfig::has_path_l_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost() {
  _has_bits_[0] |= 0x00000080u;
}
void DpPolyPathConfig::clear_has_path_l_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
void DpPolyPathConfig::clear_path_l_cost() {
  path_l_cost_ = 0;
  clear_has_path_l_cost();
}
 double DpPolyPathConfig::path_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost)
  return path_l_cost_;
}
 void DpPolyPathConfig::set_path_l_cost(double value) {
  set_has_path_l_cost();
  path_l_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost)
}

// optional double path_dl_cost = 9;
bool DpPolyPathConfig::has_path_dl_cost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DpPolyPathConfig::set_has_path_dl_cost() {
  _has_bits_[0] |= 0x00000100u;
}
void DpPolyPathConfig::clear_has_path_dl_cost() {
  _has_bits_[0] &= ~0x00000100u;
}
void DpPolyPathConfig::clear_path_dl_cost() {
  path_dl_cost_ = 0;
  clear_has_path_dl_cost();
}
 double DpPolyPathConfig::path_dl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_dl_cost)
  return path_dl_cost_;
}
 void DpPolyPathConfig::set_path_dl_cost(double value) {
  set_has_path_dl_cost();
  path_dl_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_dl_cost)
}

// optional double path_ddl_cost = 10;
bool DpPolyPathConfig::has_path_ddl_cost() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DpPolyPathConfig::set_has_path_ddl_cost() {
  _has_bits_[0] |= 0x00000200u;
}
void DpPolyPathConfig::clear_has_path_ddl_cost() {
  _has_bits_[0] &= ~0x00000200u;
}
void DpPolyPathConfig::clear_path_ddl_cost() {
  path_ddl_cost_ = 0;
  clear_has_path_ddl_cost();
}
 double DpPolyPathConfig::path_ddl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_ddl_cost)
  return path_ddl_cost_;
}
 void DpPolyPathConfig::set_path_ddl_cost(double value) {
  set_has_path_ddl_cost();
  path_ddl_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_ddl_cost)
}

// optional double path_l_cost_param_l0 = 11;
bool DpPolyPathConfig::has_path_l_cost_param_l0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost_param_l0() {
  _has_bits_[0] |= 0x00000400u;
}
void DpPolyPathConfig::clear_has_path_l_cost_param_l0() {
  _has_bits_[0] &= ~0x00000400u;
}
void DpPolyPathConfig::clear_path_l_cost_param_l0() {
  path_l_cost_param_l0_ = 0;
  clear_has_path_l_cost_param_l0();
}
 double DpPolyPathConfig::path_l_cost_param_l0() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
  return path_l_cost_param_l0_;
}
 void DpPolyPathConfig::set_path_l_cost_param_l0(double value) {
  set_has_path_l_cost_param_l0();
  path_l_cost_param_l0_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
}

// optional double path_l_cost_param_b = 12;
bool DpPolyPathConfig::has_path_l_cost_param_b() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost_param_b() {
  _has_bits_[0] |= 0x00000800u;
}
void DpPolyPathConfig::clear_has_path_l_cost_param_b() {
  _has_bits_[0] &= ~0x00000800u;
}
void DpPolyPathConfig::clear_path_l_cost_param_b() {
  path_l_cost_param_b_ = 0;
  clear_has_path_l_cost_param_b();
}
 double DpPolyPathConfig::path_l_cost_param_b() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
  return path_l_cost_param_b_;
}
 void DpPolyPathConfig::set_path_l_cost_param_b(double value) {
  set_has_path_l_cost_param_b();
  path_l_cost_param_b_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
}

// optional double path_l_cost_param_k = 13;
bool DpPolyPathConfig::has_path_l_cost_param_k() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost_param_k() {
  _has_bits_[0] |= 0x00001000u;
}
void DpPolyPathConfig::clear_has_path_l_cost_param_k() {
  _has_bits_[0] &= ~0x00001000u;
}
void DpPolyPathConfig::clear_path_l_cost_param_k() {
  path_l_cost_param_k_ = 0;
  clear_has_path_l_cost_param_k();
}
 double DpPolyPathConfig::path_l_cost_param_k() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
  return path_l_cost_param_k_;
}
 void DpPolyPathConfig::set_path_l_cost_param_k(double value) {
  set_has_path_l_cost_param_k();
  path_l_cost_param_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
}

// optional double path_out_lane_cost = 14;
bool DpPolyPathConfig::has_path_out_lane_cost() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DpPolyPathConfig::set_has_path_out_lane_cost() {
  _has_bits_[0] |= 0x00002000u;
}
void DpPolyPathConfig::clear_has_path_out_lane_cost() {
  _has_bits_[0] &= ~0x00002000u;
}
void DpPolyPathConfig::clear_path_out_lane_cost() {
  path_out_lane_cost_ = 0;
  clear_has_path_out_lane_cost();
}
 double DpPolyPathConfig::path_out_lane_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
  return path_out_lane_cost_;
}
 void DpPolyPathConfig::set_path_out_lane_cost(double value) {
  set_has_path_out_lane_cost();
  path_out_lane_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
}

// optional double path_end_l_cost = 15;
bool DpPolyPathConfig::has_path_end_l_cost() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DpPolyPathConfig::set_has_path_end_l_cost() {
  _has_bits_[0] |= 0x00004000u;
}
void DpPolyPathConfig::clear_has_path_end_l_cost() {
  _has_bits_[0] &= ~0x00004000u;
}
void DpPolyPathConfig::clear_path_end_l_cost() {
  path_end_l_cost_ = 0;
  clear_has_path_end_l_cost();
}
 double DpPolyPathConfig::path_end_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_end_l_cost)
  return path_end_l_cost_;
}
 void DpPolyPathConfig::set_path_end_l_cost(double value) {
  set_has_path_end_l_cost();
  path_end_l_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_end_l_cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
