// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map/map_signal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map/map_signal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace hdmap {

namespace {

const ::google::protobuf::Descriptor* Subsignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subsignal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Subsignal_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2fmap_5fsignal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_map_2fmap_5fsignal_2eproto() {
  protobuf_AddDesc_map_2fmap_5fsignal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map/map_signal.proto");
  GOOGLE_CHECK(file != NULL);
  Subsignal_descriptor_ = file->message_type(0);
  static const int Subsignal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, location_),
  };
  Subsignal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Subsignal_descriptor_,
      Subsignal::default_instance_,
      Subsignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, _has_bits_[0]),
      -1,
      -1,
      sizeof(Subsignal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, _internal_metadata_),
      -1);
  Subsignal_Type_descriptor_ = Subsignal_descriptor_->enum_type(0);
  Signal_descriptor_ = file->message_type(1);
  static const int Signal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, subsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, overlap_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, stop_line_),
  };
  Signal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_[0]),
      -1,
      -1,
      sizeof(Signal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _internal_metadata_),
      -1);
  Signal_Type_descriptor_ = Signal_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2fmap_5fsignal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Subsignal_descriptor_, &Subsignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Signal_descriptor_, &Signal::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2fmap_5fsignal_2eproto() {
  delete Subsignal::default_instance_;
  delete Subsignal_reflection_;
  delete Signal::default_instance_;
  delete Signal_reflection_;
}

void protobuf_AddDesc_map_2fmap_5fsignal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_map_2fmap_5fsignal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::apollo::hdmap::protobuf_AddDesc_map_2fmap_5fgeometry_2eproto();
  ::apollo::hdmap::protobuf_AddDesc_map_2fmap_5fid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024map/map_signal.proto\022\014apollo.hdmap\032\025co"
    "mmon/geometry.proto\032\026map/map_geometry.pr"
    "oto\032\020map/map_id.proto\"\241\002\n\tSubsignal\022\034\n\002i"
    "d\030\001 \001(\0132\020.apollo.hdmap.Id\022*\n\004type\030\002 \001(\0162"
    "\034.apollo.hdmap.Subsignal.Type\022)\n\010locatio"
    "n\030\003 \001(\0132\027.apollo.common.PointENU\"\236\001\n\004Typ"
    "e\022\013\n\007UNKNOWN\020\001\022\n\n\006CIRCLE\020\002\022\016\n\nARROW_LEFT"
    "\020\003\022\021\n\rARROW_FORWARD\020\004\022\017\n\013ARROW_RIGHT\020\005\022\032"
    "\n\026ARROW_LEFT_AND_FORWARD\020\006\022\033\n\027ARROW_RIGH"
    "T_AND_FORWARD\020\007\022\020\n\014ARROW_U_TURN\020\010\"\347\002\n\006Si"
    "gnal\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\022\'\n\010bo"
    "undary\030\002 \001(\0132\025.apollo.hdmap.Polygon\022*\n\ts"
    "ubsignal\030\003 \003(\0132\027.apollo.hdmap.Subsignal\022"
    "$\n\noverlap_id\030\004 \003(\0132\020.apollo.hdmap.Id\022\'\n"
    "\004type\030\005 \001(\0162\031.apollo.hdmap.Signal.Type\022&"
    "\n\tstop_line\030\006 \003(\0132\023.apollo.hdmap.Curve\"s"
    "\n\004Type\022\013\n\007UNKNOWN\020\001\022\024\n\020MIX_2_HORIZONTAL\020"
    "\002\022\022\n\016MIX_2_VERTICAL\020\003\022\024\n\020MIX_3_HORIZONTA"
    "L\020\004\022\022\n\016MIX_3_VERTICAL\020\005\022\n\n\006SINGLE\020\006", 755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map/map_signal.proto", &protobuf_RegisterTypes);
  Subsignal::default_instance_ = new Subsignal();
  Signal::default_instance_ = new Signal();
  Subsignal::default_instance_->InitAsDefaultInstance();
  Signal::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2fmap_5fsignal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2fmap_5fsignal_2eproto {
  StaticDescriptorInitializer_map_2fmap_5fsignal_2eproto() {
    protobuf_AddDesc_map_2fmap_5fsignal_2eproto();
  }
} static_descriptor_initializer_map_2fmap_5fsignal_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Subsignal_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subsignal_Type_descriptor_;
}
bool Subsignal_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Subsignal_Type Subsignal::UNKNOWN;
const Subsignal_Type Subsignal::CIRCLE;
const Subsignal_Type Subsignal::ARROW_LEFT;
const Subsignal_Type Subsignal::ARROW_FORWARD;
const Subsignal_Type Subsignal::ARROW_RIGHT;
const Subsignal_Type Subsignal::ARROW_LEFT_AND_FORWARD;
const Subsignal_Type Subsignal::ARROW_RIGHT_AND_FORWARD;
const Subsignal_Type Subsignal::ARROW_U_TURN;
const Subsignal_Type Subsignal::Type_MIN;
const Subsignal_Type Subsignal::Type_MAX;
const int Subsignal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subsignal::kIdFieldNumber;
const int Subsignal::kTypeFieldNumber;
const int Subsignal::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subsignal::Subsignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Subsignal)
}

void Subsignal::InitAsDefaultInstance() {
  id_ = const_cast< ::apollo::hdmap::Id*>(&::apollo::hdmap::Id::default_instance());
  location_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

Subsignal::Subsignal(const Subsignal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Subsignal)
}

void Subsignal::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  type_ = 1;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subsignal::~Subsignal() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Subsignal)
  SharedDtor();
}

void Subsignal::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete location_;
  }
}

void Subsignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subsignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subsignal_descriptor_;
}

const Subsignal& Subsignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5fsignal_2eproto();
  return *default_instance_;
}

Subsignal* Subsignal::default_instance_ = NULL;

Subsignal* Subsignal::New(::google::protobuf::Arena* arena) const {
  Subsignal* n = new Subsignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subsignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Subsignal)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
    }
    type_ = 1;
    if (has_location()) {
      if (location_ != NULL) location_->::apollo::common::PointENU::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Subsignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Subsignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .apollo.hdmap.Subsignal.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Subsignal_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::hdmap::Subsignal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .apollo.common.PointENU location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Subsignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Subsignal)
  return false;
#undef DO_
}

void Subsignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Subsignal)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .apollo.hdmap.Subsignal.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .apollo.common.PointENU location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Subsignal)
}

::google::protobuf::uint8* Subsignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Subsignal)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .apollo.hdmap.Subsignal.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .apollo.common.PointENU location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Subsignal)
  return target;
}

int Subsignal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Subsignal)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .apollo.hdmap.Subsignal.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .apollo.common.PointENU location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subsignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Subsignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Subsignal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Subsignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Subsignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Subsignal)
    MergeFrom(*source);
  }
}

void Subsignal::MergeFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Subsignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_location()) {
      mutable_location()->::apollo::common::PointENU::MergeFrom(from.location());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Subsignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subsignal::CopyFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subsignal::IsInitialized() const {

  return true;
}

void Subsignal::Swap(Subsignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subsignal::InternalSwap(Subsignal* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(location_, other->location_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subsignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subsignal_descriptor_;
  metadata.reflection = Subsignal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subsignal

// optional .apollo.hdmap.Id id = 1;
bool Subsignal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Subsignal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Subsignal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Subsignal::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& Subsignal::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Subsignal.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::apollo::hdmap::Id* Subsignal::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Subsignal.id)
  return id_;
}
::apollo::hdmap::Id* Subsignal::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Subsignal.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Subsignal::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Subsignal.id)
}

// optional .apollo.hdmap.Subsignal.Type type = 2;
bool Subsignal::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Subsignal::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Subsignal::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Subsignal::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::hdmap::Subsignal_Type Subsignal::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Subsignal.type)
  return static_cast< ::apollo::hdmap::Subsignal_Type >(type_);
}
 void Subsignal::set_type(::apollo::hdmap::Subsignal_Type value) {
  assert(::apollo::hdmap::Subsignal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.Subsignal.type)
}

// optional .apollo.common.PointENU location = 3;
bool Subsignal::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Subsignal::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
void Subsignal::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
void Subsignal::clear_location() {
  if (location_ != NULL) location_->::apollo::common::PointENU::Clear();
  clear_has_location();
}
const ::apollo::common::PointENU& Subsignal::location() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Subsignal.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::apollo::common::PointENU* Subsignal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Subsignal.location)
  return location_;
}
::apollo::common::PointENU* Subsignal::release_location() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Subsignal.location)
  clear_has_location();
  ::apollo::common::PointENU* temp = location_;
  location_ = NULL;
  return temp;
}
void Subsignal::set_allocated_location(::apollo::common::PointENU* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Subsignal.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_Type_descriptor_;
}
bool Signal_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::UNKNOWN;
const Signal_Type Signal::MIX_2_HORIZONTAL;
const Signal_Type Signal::MIX_2_VERTICAL;
const Signal_Type Signal::MIX_3_HORIZONTAL;
const Signal_Type Signal::MIX_3_VERTICAL;
const Signal_Type Signal::SINGLE;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kIdFieldNumber;
const int Signal::kBoundaryFieldNumber;
const int Signal::kSubsignalFieldNumber;
const int Signal::kOverlapIdFieldNumber;
const int Signal::kTypeFieldNumber;
const int Signal::kStopLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Signal)
}

void Signal::InitAsDefaultInstance() {
  id_ = const_cast< ::apollo::hdmap::Id*>(&::apollo::hdmap::Id::default_instance());
  boundary_ = const_cast< ::apollo::hdmap::Polygon*>(&::apollo::hdmap::Polygon::default_instance());
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Signal)
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  boundary_ = NULL;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete boundary_;
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2fmap_5fsignal_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New(::google::protobuf::Arena* arena) const {
  Signal* n = new Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Signal)
  if (_has_bits_[0 / 32] & 19u) {
    if (has_id()) {
      if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
    }
    if (has_boundary()) {
      if (boundary_ != NULL) boundary_->::apollo::hdmap::Polygon::Clear();
    }
    type_ = 1;
  }
  subsignal_.Clear();
  overlap_id_.Clear();
  stop_line_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_boundary;
        break;
      }

      // optional .apollo.hdmap.Polygon boundary = 2;
      case 2: {
        if (tag == 18) {
         parse_boundary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subsignal;
        break;
      }

      // repeated .apollo.hdmap.Subsignal subsignal = 3;
      case 3: {
        if (tag == 26) {
         parse_subsignal:
          DO_(input->IncrementRecursionDepth());
         parse_loop_subsignal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subsignal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_subsignal;
        if (input->ExpectTag(34)) goto parse_loop_overlap_id;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.hdmap.Id overlap_id = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_overlap_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_overlap_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .apollo.hdmap.Signal.Type type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Signal_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::hdmap::Signal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stop_line;
        break;
      }

      // repeated .apollo.hdmap.Curve stop_line = 6;
      case 6: {
        if (tag == 50) {
         parse_stop_line:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_stop_line;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Signal)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .apollo.hdmap.Polygon boundary = 2;
  if (has_boundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->boundary_, output);
  }

  // repeated .apollo.hdmap.Subsignal subsignal = 3;
  for (unsigned int i = 0, n = this->subsignal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subsignal(i), output);
  }

  // repeated .apollo.hdmap.Id overlap_id = 4;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->overlap_id(i), output);
  }

  // optional .apollo.hdmap.Signal.Type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .apollo.hdmap.Curve stop_line = 6;
  for (unsigned int i = 0, n = this->stop_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stop_line(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Signal)
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .apollo.hdmap.Polygon boundary = 2;
  if (has_boundary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->boundary_, false, target);
  }

  // repeated .apollo.hdmap.Subsignal subsignal = 3;
  for (unsigned int i = 0, n = this->subsignal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->subsignal(i), false, target);
  }

  // repeated .apollo.hdmap.Id overlap_id = 4;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->overlap_id(i), false, target);
  }

  // optional .apollo.hdmap.Signal.Type type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .apollo.hdmap.Curve stop_line = 6;
  for (unsigned int i = 0, n = this->stop_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->stop_line(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Signal)
  return target;
}

int Signal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Signal)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 19u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .apollo.hdmap.Polygon boundary = 2;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

    // optional .apollo.hdmap.Signal.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .apollo.hdmap.Subsignal subsignal = 3;
  total_size += 1 * this->subsignal_size();
  for (int i = 0; i < this->subsignal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subsignal(i));
  }

  // repeated .apollo.hdmap.Id overlap_id = 4;
  total_size += 1 * this->overlap_id_size();
  for (int i = 0; i < this->overlap_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->overlap_id(i));
  }

  // repeated .apollo.hdmap.Curve stop_line = 6;
  total_size += 1 * this->stop_line_size();
  for (int i = 0; i < this->stop_line_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_line(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Signal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Signal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Signal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  subsignal_.MergeFrom(from.subsignal_);
  overlap_id_.MergeFrom(from.overlap_id_);
  stop_line_.MergeFrom(from.stop_line_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (from.has_boundary()) {
      mutable_boundary()->::apollo::hdmap::Polygon::MergeFrom(from.boundary());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {

  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  std::swap(id_, other->id_);
  std::swap(boundary_, other->boundary_);
  subsignal_.UnsafeArenaSwap(&other->subsignal_);
  overlap_id_.UnsafeArenaSwap(&other->overlap_id_);
  std::swap(type_, other->type_);
  stop_line_.UnsafeArenaSwap(&other->stop_line_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// optional .apollo.hdmap.Id id = 1;
bool Signal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Signal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signal::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& Signal::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::apollo::hdmap::Id* Signal::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.id)
  return id_;
}
::apollo::hdmap::Id* Signal::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Signal.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Signal::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Signal.id)
}

// optional .apollo.hdmap.Polygon boundary = 2;
bool Signal::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signal::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void Signal::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signal::clear_boundary() {
  if (boundary_ != NULL) boundary_->::apollo::hdmap::Polygon::Clear();
  clear_has_boundary();
}
const ::apollo::hdmap::Polygon& Signal::boundary() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.boundary)
  return boundary_ != NULL ? *boundary_ : *default_instance_->boundary_;
}
::apollo::hdmap::Polygon* Signal::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::apollo::hdmap::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.boundary)
  return boundary_;
}
::apollo::hdmap::Polygon* Signal::release_boundary() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Signal.boundary)
  clear_has_boundary();
  ::apollo::hdmap::Polygon* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void Signal::set_allocated_boundary(::apollo::hdmap::Polygon* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Signal.boundary)
}

// repeated .apollo.hdmap.Subsignal subsignal = 3;
int Signal::subsignal_size() const {
  return subsignal_.size();
}
void Signal::clear_subsignal() {
  subsignal_.Clear();
}
const ::apollo::hdmap::Subsignal& Signal::subsignal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.subsignal)
  return subsignal_.Get(index);
}
::apollo::hdmap::Subsignal* Signal::mutable_subsignal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.subsignal)
  return subsignal_.Mutable(index);
}
::apollo::hdmap::Subsignal* Signal::add_subsignal() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Signal.subsignal)
  return subsignal_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Subsignal >*
Signal::mutable_subsignal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Signal.subsignal)
  return &subsignal_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Subsignal >&
Signal::subsignal() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Signal.subsignal)
  return subsignal_;
}

// repeated .apollo.hdmap.Id overlap_id = 4;
int Signal::overlap_id_size() const {
  return overlap_id_.size();
}
void Signal::clear_overlap_id() {
  overlap_id_.Clear();
}
const ::apollo::hdmap::Id& Signal::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.overlap_id)
  return overlap_id_.Get(index);
}
::apollo::hdmap::Id* Signal::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.overlap_id)
  return overlap_id_.Mutable(index);
}
::apollo::hdmap::Id* Signal::add_overlap_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Signal.overlap_id)
  return overlap_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
Signal::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Signal.overlap_id)
  return &overlap_id_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
Signal::overlap_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Signal.overlap_id)
  return overlap_id_;
}

// optional .apollo.hdmap.Signal.Type type = 5;
bool Signal::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Signal::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Signal::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Signal::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::hdmap::Signal_Type Signal::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.type)
  return static_cast< ::apollo::hdmap::Signal_Type >(type_);
}
 void Signal::set_type(::apollo::hdmap::Signal_Type value) {
  assert(::apollo::hdmap::Signal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.Signal.type)
}

// repeated .apollo.hdmap.Curve stop_line = 6;
int Signal::stop_line_size() const {
  return stop_line_.size();
}
void Signal::clear_stop_line() {
  stop_line_.Clear();
}
const ::apollo::hdmap::Curve& Signal::stop_line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.stop_line)
  return stop_line_.Get(index);
}
::apollo::hdmap::Curve* Signal::mutable_stop_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.stop_line)
  return stop_line_.Mutable(index);
}
::apollo::hdmap::Curve* Signal::add_stop_line() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Signal.stop_line)
  return stop_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Curve >*
Signal::mutable_stop_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Signal.stop_line)
  return &stop_line_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Curve >&
Signal::stop_line() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Signal.stop_line)
  return stop_line_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
