// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/calibration_table.proto

#ifndef PROTOBUF_control_2fcalibration_5ftable_2eproto__INCLUDED
#define PROTOBUF_control_2fcalibration_5ftable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {
namespace calibrationtable {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_control_2fcalibration_5ftable_2eproto();
void protobuf_AssignDesc_control_2fcalibration_5ftable_2eproto();
void protobuf_ShutdownFile_control_2fcalibration_5ftable_2eproto();

class ControlCalibrationInfo;
class ControlCalibrationTable;

// ===================================================================

class ControlCalibrationTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.calibrationtable.ControlCalibrationTable) */ {
 public:
  ControlCalibrationTable();
  virtual ~ControlCalibrationTable();

  ControlCalibrationTable(const ControlCalibrationTable& from);

  inline ControlCalibrationTable& operator=(const ControlCalibrationTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCalibrationTable& default_instance();

  void Swap(ControlCalibrationTable* other);

  // implements Message ----------------------------------------------

  inline ControlCalibrationTable* New() const { return New(NULL); }

  ControlCalibrationTable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlCalibrationTable& from);
  void MergeFrom(const ControlCalibrationTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlCalibrationTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.control.calibrationtable.ControlCalibrationInfo calibration = 1;
  int calibration_size() const;
  void clear_calibration();
  static const int kCalibrationFieldNumber = 1;
  const ::apollo::control::calibrationtable::ControlCalibrationInfo& calibration(int index) const;
  ::apollo::control::calibrationtable::ControlCalibrationInfo* mutable_calibration(int index);
  ::apollo::control::calibrationtable::ControlCalibrationInfo* add_calibration();
  ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >*
      mutable_calibration();
  const ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >&
      calibration() const;

  // @@protoc_insertion_point(class_scope:apollo.control.calibrationtable.ControlCalibrationTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo > calibration_;
  friend void  protobuf_AddDesc_control_2fcalibration_5ftable_2eproto();
  friend void protobuf_AssignDesc_control_2fcalibration_5ftable_2eproto();
  friend void protobuf_ShutdownFile_control_2fcalibration_5ftable_2eproto();

  void InitAsDefaultInstance();
  static ControlCalibrationTable* default_instance_;
};
// -------------------------------------------------------------------

class ControlCalibrationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.calibrationtable.ControlCalibrationInfo) */ {
 public:
  ControlCalibrationInfo();
  virtual ~ControlCalibrationInfo();

  ControlCalibrationInfo(const ControlCalibrationInfo& from);

  inline ControlCalibrationInfo& operator=(const ControlCalibrationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCalibrationInfo& default_instance();

  void Swap(ControlCalibrationInfo* other);

  // implements Message ----------------------------------------------

  inline ControlCalibrationInfo* New() const { return New(NULL); }

  ControlCalibrationInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlCalibrationInfo& from);
  void MergeFrom(const ControlCalibrationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlCalibrationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double speed = 1;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  double speed() const;
  void set_speed(double value);

  // optional double acceleration = 2;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 2;
  double acceleration() const;
  void set_acceleration(double value);

  // optional double command = 3;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  double command() const;
  void set_command(double value);

  // @@protoc_insertion_point(class_scope:apollo.control.calibrationtable.ControlCalibrationInfo)
 private:
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double speed_;
  double acceleration_;
  double command_;
  friend void  protobuf_AddDesc_control_2fcalibration_5ftable_2eproto();
  friend void protobuf_AssignDesc_control_2fcalibration_5ftable_2eproto();
  friend void protobuf_ShutdownFile_control_2fcalibration_5ftable_2eproto();

  void InitAsDefaultInstance();
  static ControlCalibrationInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlCalibrationTable

// repeated .apollo.control.calibrationtable.ControlCalibrationInfo calibration = 1;
inline int ControlCalibrationTable::calibration_size() const {
  return calibration_.size();
}
inline void ControlCalibrationTable::clear_calibration() {
  calibration_.Clear();
}
inline const ::apollo::control::calibrationtable::ControlCalibrationInfo& ControlCalibrationTable::calibration(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_.Get(index);
}
inline ::apollo::control::calibrationtable::ControlCalibrationInfo* ControlCalibrationTable::mutable_calibration(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_.Mutable(index);
}
inline ::apollo::control::calibrationtable::ControlCalibrationInfo* ControlCalibrationTable::add_calibration() {
  // @@protoc_insertion_point(field_add:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >*
ControlCalibrationTable::mutable_calibration() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return &calibration_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >&
ControlCalibrationTable::calibration() const {
  // @@protoc_insertion_point(field_list:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return calibration_;
}

// -------------------------------------------------------------------

// ControlCalibrationInfo

// optional double speed = 1;
inline bool ControlCalibrationInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlCalibrationInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlCalibrationInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlCalibrationInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double ControlCalibrationInfo::speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.speed)
  return speed_;
}
inline void ControlCalibrationInfo::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.speed)
}

// optional double acceleration = 2;
inline bool ControlCalibrationInfo::has_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlCalibrationInfo::set_has_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlCalibrationInfo::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlCalibrationInfo::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
inline double ControlCalibrationInfo::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.acceleration)
  return acceleration_;
}
inline void ControlCalibrationInfo::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.acceleration)
}

// optional double command = 3;
inline bool ControlCalibrationInfo::has_command() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlCalibrationInfo::set_has_command() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlCalibrationInfo::clear_has_command() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlCalibrationInfo::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline double ControlCalibrationInfo::command() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.command)
  return command_;
}
inline void ControlCalibrationInfo::set_command(double value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.command)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calibrationtable
}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_control_2fcalibration_5ftable_2eproto__INCLUDED
