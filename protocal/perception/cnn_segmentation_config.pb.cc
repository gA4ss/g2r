// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/cnn_segmentation_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/cnn_segmentation_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace cnn_segmentation_config {

namespace {

const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/cnn_segmentation_config.proto");
  GOOGLE_CHECK(file != NULL);
  ModelConfigs_descriptor_ = file->message_type(0);
  static const int ModelConfigs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, config_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, proto_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, weight_file_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2fcnn_5fsegmentation_5fconfig_2eproto() {
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
  delete ModelConfigs::_default_name_;
  delete ModelConfigs::_default_version_;
  delete ModelConfigs::_default_config_file_;
  delete ModelConfigs::_default_proto_file_;
  delete ModelConfigs::_default_weight_file_;
}

void protobuf_AddDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(perception/cnn_segmentation_config.pro"
    "to\022)apollo.perception.cnn_segmentation_c"
    "onfig\"\232\002\n\014ModelConfigs\022\035\n\004name\030\001 \001(\t:\017CN"
    "NSegmentation\022\026\n\007version\030\002 \001(\t:\0051.0.0\022B\n"
    "\013config_file\030\003 \001(\t:-perception/model/cnn"
    "_segmentation/cnnseg.conf\022E\n\nproto_file\030"
    "\004 \001(\t:1perception/model/cnn_segmentation"
    "/deploy.prototxt\022H\n\013weight_file\030\005 \001(\t:3p"
    "erception/model/cnn_segmentation/deploy."
    "caffemodel", 370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/cnn_segmentation_config.proto", &protobuf_RegisterTypes);
  ModelConfigs::_default_name_ =
      new ::std::string("CNNSegmentation", 15);
  ModelConfigs::_default_version_ =
      new ::std::string("1.0.0", 5);
  ModelConfigs::_default_config_file_ =
      new ::std::string("perception/model/cnn_segmentation/cnnseg.conf", 45);
  ModelConfigs::_default_proto_file_ =
      new ::std::string("perception/model/cnn_segmentation/deploy.prototxt", 49);
  ModelConfigs::_default_weight_file_ =
      new ::std::string("perception/model/cnn_segmentation/deploy.caffemodel", 51);
  ModelConfigs::default_instance_ = new ModelConfigs();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2fcnn_5fsegmentation_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2fcnn_5fsegmentation_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2fcnn_5fsegmentation_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2fcnn_5fsegmentation_5fconfig_2eproto_;

// ===================================================================

::std::string* ModelConfigs::_default_name_ = NULL;
::std::string* ModelConfigs::_default_version_ = NULL;
::std::string* ModelConfigs::_default_config_file_ = NULL;
::std::string* ModelConfigs::_default_proto_file_ = NULL;
::std::string* ModelConfigs::_default_weight_file_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kConfigFileFieldNumber;
const int ModelConfigs::kProtoFileFieldNumber;
const int ModelConfigs::kWeightFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.cnn_segmentation_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.cnn_segmentation_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  version_.UnsafeSetDefault(_default_version_);
  config_file_.UnsafeSetDefault(_default_config_file_);
  proto_file_.UnsafeSetDefault(_default_proto_file_);
  weight_file_.UnsafeSetDefault(_default_weight_file_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.cnn_segmentation_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  version_.DestroyNoArena(_default_version_);
  config_file_.DestroyNoArena(_default_config_file_);
  proto_file_.DestroyNoArena(_default_proto_file_);
  weight_file_.DestroyNoArena(_default_weight_file_);
  if (this != default_instance_) {
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2fcnn_5fsegmentation_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    if (has_version()) {
      version_.ClearToDefaultNoArena(_default_version_);
    }
    if (has_config_file()) {
      config_file_.ClearToDefaultNoArena(_default_config_file_);
    }
    if (has_proto_file()) {
      proto_file_.ClearToDefaultNoArena(_default_proto_file_);
    }
    if (has_weight_file()) {
      weight_file_.ClearToDefaultNoArena(_default_weight_file_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "CNNSegmentation"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnn_segmentation_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnn_segmentation_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_config_file;
        break;
      }

      // optional string config_file = 3 [default = "perception/model/cnn_segmentation/cnnseg.conf"];
      case 3: {
        if (tag == 26) {
         parse_config_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file().data(), this->config_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnn_segmentation_config.ModelConfigs.config_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_proto_file;
        break;
      }

      // optional string proto_file = 4 [default = "perception/model/cnn_segmentation/deploy.prototxt"];
      case 4: {
        if (tag == 34) {
         parse_proto_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_file().data(), this->proto_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weight_file;
        break;
      }

      // optional string weight_file = 5 [default = "perception/model/cnn_segmentation/deploy.caffemodel"];
      case 5: {
        if (tag == 42) {
         parse_weight_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight_file().data(), this->weight_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.cnn_segmentation_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.cnn_segmentation_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  // optional string name = 1 [default = "CNNSegmentation"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string config_file = 3 [default = "perception/model/cnn_segmentation/cnnseg.conf"];
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.config_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->config_file(), output);
  }

  // optional string proto_file = 4 [default = "perception/model/cnn_segmentation/deploy.prototxt"];
  if (has_proto_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->proto_file(), output);
  }

  // optional string weight_file = 5 [default = "perception/model/cnn_segmentation/deploy.caffemodel"];
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->weight_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.cnn_segmentation_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  // optional string name = 1 [default = "CNNSegmentation"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string config_file = 3 [default = "perception/model/cnn_segmentation/cnnseg.conf"];
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.config_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->config_file(), target);
  }

  // optional string proto_file = 4 [default = "perception/model/cnn_segmentation/deploy.prototxt"];
  if (has_proto_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->proto_file(), target);
  }

  // optional string weight_file = 5 [default = "perception/model/cnn_segmentation/deploy.caffemodel"];
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weight_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.cnn_segmentation_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1 [default = "CNNSegmentation"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string config_file = 3 [default = "perception/model/cnn_segmentation/cnnseg.conf"];
    if (has_config_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file());
    }

    // optional string proto_file = 4 [default = "perception/model/cnn_segmentation/deploy.prototxt"];
    if (has_proto_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_file());
    }

    // optional string weight_file = 5 [default = "perception/model/cnn_segmentation/deploy.caffemodel"];
    if (has_weight_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight_file());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.cnn_segmentation_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.cnn_segmentation_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(_default_version_, from.version_);
    }
    if (from.has_config_file()) {
      set_has_config_file();
      config_file_.AssignWithDefault(_default_config_file_, from.config_file_);
    }
    if (from.has_proto_file()) {
      set_has_proto_file();
      proto_file_.AssignWithDefault(_default_proto_file_, from.proto_file_);
    }
    if (from.has_weight_file()) {
      set_has_weight_file();
      weight_file_.AssignWithDefault(_default_weight_file_, from.weight_file_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.cnn_segmentation_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  config_file_.Swap(&other->config_file_);
  proto_file_.Swap(&other->proto_file_);
  weight_file_.Swap(&other->weight_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "CNNSegmentation"];
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnn_segmentation_config.ModelConfigs.name)
  return name_.GetNoArena(_default_name_);
}
 void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnn_segmentation_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnn_segmentation_config.ModelConfigs.name)
}
 void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnn_segmentation_config.ModelConfigs.name)
}
 ::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnn_segmentation_config.ModelConfigs.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnn_segmentation_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnn_segmentation_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
 const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnn_segmentation_config.ModelConfigs.version)
  return version_.GetNoArena(_default_version_);
}
 void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnn_segmentation_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnn_segmentation_config.ModelConfigs.version)
}
 void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnn_segmentation_config.ModelConfigs.version)
}
 ::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnn_segmentation_config.ModelConfigs.version)
  return version_.MutableNoArena(_default_version_);
}
 ::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnn_segmentation_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
 void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnn_segmentation_config.ModelConfigs.version)
}

// optional string config_file = 3 [default = "perception/model/cnn_segmentation/cnnseg.conf"];
bool ModelConfigs::has_config_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_config_file() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_config_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_config_file() {
  config_file_.ClearToDefaultNoArena(_default_config_file_);
  clear_has_config_file();
}
 const ::std::string& ModelConfigs::config_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnn_segmentation_config.ModelConfigs.config_file)
  return config_file_.GetNoArena(_default_config_file_);
}
 void ModelConfigs::set_config_file(const ::std::string& value) {
  set_has_config_file();
  config_file_.SetNoArena(_default_config_file_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnn_segmentation_config.ModelConfigs.config_file)
}
 void ModelConfigs::set_config_file(const char* value) {
  set_has_config_file();
  config_file_.SetNoArena(_default_config_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnn_segmentation_config.ModelConfigs.config_file)
}
 void ModelConfigs::set_config_file(const char* value, size_t size) {
  set_has_config_file();
  config_file_.SetNoArena(_default_config_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnn_segmentation_config.ModelConfigs.config_file)
}
 ::std::string* ModelConfigs::mutable_config_file() {
  set_has_config_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnn_segmentation_config.ModelConfigs.config_file)
  return config_file_.MutableNoArena(_default_config_file_);
}
 ::std::string* ModelConfigs::release_config_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnn_segmentation_config.ModelConfigs.config_file)
  clear_has_config_file();
  return config_file_.ReleaseNoArena(_default_config_file_);
}
 void ModelConfigs::set_allocated_config_file(::std::string* config_file) {
  if (config_file != NULL) {
    set_has_config_file();
  } else {
    clear_has_config_file();
  }
  config_file_.SetAllocatedNoArena(_default_config_file_, config_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnn_segmentation_config.ModelConfigs.config_file)
}

// optional string proto_file = 4 [default = "perception/model/cnn_segmentation/deploy.prototxt"];
bool ModelConfigs::has_proto_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_proto_file() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_proto_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_proto_file() {
  proto_file_.ClearToDefaultNoArena(_default_proto_file_);
  clear_has_proto_file();
}
 const ::std::string& ModelConfigs::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file)
  return proto_file_.GetNoArena(_default_proto_file_);
}
 void ModelConfigs::set_proto_file(const ::std::string& value) {
  set_has_proto_file();
  proto_file_.SetNoArena(_default_proto_file_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file)
}
 void ModelConfigs::set_proto_file(const char* value) {
  set_has_proto_file();
  proto_file_.SetNoArena(_default_proto_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file)
}
 void ModelConfigs::set_proto_file(const char* value, size_t size) {
  set_has_proto_file();
  proto_file_.SetNoArena(_default_proto_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file)
}
 ::std::string* ModelConfigs::mutable_proto_file() {
  set_has_proto_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file)
  return proto_file_.MutableNoArena(_default_proto_file_);
}
 ::std::string* ModelConfigs::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file)
  clear_has_proto_file();
  return proto_file_.ReleaseNoArena(_default_proto_file_);
}
 void ModelConfigs::set_allocated_proto_file(::std::string* proto_file) {
  if (proto_file != NULL) {
    set_has_proto_file();
  } else {
    clear_has_proto_file();
  }
  proto_file_.SetAllocatedNoArena(_default_proto_file_, proto_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnn_segmentation_config.ModelConfigs.proto_file)
}

// optional string weight_file = 5 [default = "perception/model/cnn_segmentation/deploy.caffemodel"];
bool ModelConfigs::has_weight_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_weight_file() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_weight_file() {
  weight_file_.ClearToDefaultNoArena(_default_weight_file_);
  clear_has_weight_file();
}
 const ::std::string& ModelConfigs::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file)
  return weight_file_.GetNoArena(_default_weight_file_);
}
 void ModelConfigs::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(_default_weight_file_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file)
}
 void ModelConfigs::set_weight_file(const char* value) {
  set_has_weight_file();
  weight_file_.SetNoArena(_default_weight_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file)
}
 void ModelConfigs::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  weight_file_.SetNoArena(_default_weight_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file)
}
 ::std::string* ModelConfigs::mutable_weight_file() {
  set_has_weight_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file)
  return weight_file_.MutableNoArena(_default_weight_file_);
}
 ::std::string* ModelConfigs::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file)
  clear_has_weight_file();
  return weight_file_.ReleaseNoArena(_default_weight_file_);
}
 void ModelConfigs::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file != NULL) {
    set_has_weight_file();
  } else {
    clear_has_weight_file();
  }
  weight_file_.SetAllocatedNoArena(_default_weight_file_, weight_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnn_segmentation_config.ModelConfigs.weight_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cnn_segmentation_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
