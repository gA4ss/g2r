// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/drive_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common/drive_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

namespace {

const ::google::protobuf::Descriptor* DriveEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DriveEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DriveEvent_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fdrive_5fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2fdrive_5fevent_2eproto() {
  protobuf_AddDesc_common_2fdrive_5fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/drive_event.proto");
  GOOGLE_CHECK(file != NULL);
  DriveEvent_descriptor_ = file->message_type(0);
  static const int DriveEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, type_),
  };
  DriveEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DriveEvent_descriptor_,
      DriveEvent::default_instance_,
      DriveEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(DriveEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, _internal_metadata_),
      -1);
  DriveEvent_Type_descriptor_ = DriveEvent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fdrive_5fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DriveEvent_descriptor_, &DriveEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fdrive_5fevent_2eproto() {
  delete DriveEvent::default_instance_;
  delete DriveEvent_reflection_;
}

void protobuf_AddDesc_common_2fdrive_5fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2fdrive_5fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::localization::protobuf_AddDesc_localization_2fpose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030common/drive_event.proto\022\rapollo.commo"
    "n\032\023common/header.proto\032\027localization/pos"
    "e.proto\"\337\001\n\nDriveEvent\022%\n\006header\030\001 \001(\0132\025"
    ".apollo.common.Header\022\r\n\005event\030\002 \001(\t\022+\n\010"
    "location\030\003 \001(\0132\031.apollo.localization.Pos"
    "e\022,\n\004type\030\004 \003(\0162\036.apollo.common.DriveEve"
    "nt.Type\"@\n\004Type\022\014\n\010CRITICAL\020\000\022\013\n\007PROBLEM"
    "\020\001\022\013\n\007DESIRED\020\002\022\020\n\014OUT_OF_SCOPE\020\003", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/drive_event.proto", &protobuf_RegisterTypes);
  DriveEvent::default_instance_ = new DriveEvent();
  DriveEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fdrive_5fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fdrive_5fevent_2eproto {
  StaticDescriptorInitializer_common_2fdrive_5fevent_2eproto() {
    protobuf_AddDesc_common_2fdrive_5fevent_2eproto();
  }
} static_descriptor_initializer_common_2fdrive_5fevent_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DriveEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriveEvent_Type_descriptor_;
}
bool DriveEvent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveEvent_Type DriveEvent::CRITICAL;
const DriveEvent_Type DriveEvent::PROBLEM;
const DriveEvent_Type DriveEvent::DESIRED;
const DriveEvent_Type DriveEvent::OUT_OF_SCOPE;
const DriveEvent_Type DriveEvent::Type_MIN;
const DriveEvent_Type DriveEvent::Type_MAX;
const int DriveEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveEvent::kHeaderFieldNumber;
const int DriveEvent::kEventFieldNumber;
const int DriveEvent::kLocationFieldNumber;
const int DriveEvent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveEvent::DriveEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.DriveEvent)
}

void DriveEvent::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  location_ = const_cast< ::apollo::localization::Pose*>(&::apollo::localization::Pose::default_instance());
}

DriveEvent::DriveEvent(const DriveEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.DriveEvent)
}

void DriveEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DriveEvent::~DriveEvent() {
  // @@protoc_insertion_point(destructor:apollo.common.DriveEvent)
  SharedDtor();
}

void DriveEvent::SharedDtor() {
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
    delete location_;
  }
}

void DriveEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriveEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriveEvent_descriptor_;
}

const DriveEvent& DriveEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fdrive_5fevent_2eproto();
  return *default_instance_;
}

DriveEvent* DriveEvent::default_instance_ = NULL;

DriveEvent* DriveEvent::New(::google::protobuf::Arena* arena) const {
  DriveEvent* n = new DriveEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.DriveEvent)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_event()) {
      event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_location()) {
      if (location_ != NULL) location_->::apollo::localization::Pose::Clear();
    }
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DriveEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.DriveEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event;
        break;
      }

      // optional string event = 2;
      case 2: {
        if (tag == 18) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event().data(), this->event().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.DriveEvent.event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .apollo.localization.Pose location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // repeated .apollo.common.DriveEvent.Type type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::DriveEvent_Type_IsValid(value)) {
            add_type(static_cast< ::apollo::common::DriveEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::apollo::common::DriveEvent_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.DriveEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.DriveEvent)
  return false;
#undef DO_
}

void DriveEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.DriveEvent)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.DriveEvent.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event(), output);
  }

  // optional .apollo.localization.Pose location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // repeated .apollo.common.DriveEvent.Type type = 4;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.DriveEvent)
}

::google::protobuf::uint8* DriveEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.DriveEvent)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional string event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.DriveEvent.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event(), target);
  }

  // optional .apollo.localization.Pose location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, false, target);
  }

  // repeated .apollo.common.DriveEvent.Type type = 4;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.DriveEvent)
  return target;
}

int DriveEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.DriveEvent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional string event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event());
    }

    // optional .apollo.localization.Pose location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

  }
  // repeated .apollo.common.DriveEvent.Type type = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.DriveEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DriveEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DriveEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.DriveEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.DriveEvent)
    MergeFrom(*source);
  }
}

void DriveEvent::MergeFrom(const DriveEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.DriveEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  type_.MergeFrom(from.type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_event()) {
      set_has_event();
      event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
    }
    if (from.has_location()) {
      mutable_location()->::apollo::localization::Pose::MergeFrom(from.location());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DriveEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.DriveEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriveEvent::CopyFrom(const DriveEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.DriveEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveEvent::IsInitialized() const {

  return true;
}

void DriveEvent::Swap(DriveEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveEvent::InternalSwap(DriveEvent* other) {
  std::swap(header_, other->header_);
  event_.Swap(&other->event_);
  std::swap(location_, other->location_);
  type_.UnsafeArenaSwap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriveEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DriveEvent_descriptor_;
  metadata.reflection = DriveEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveEvent

// optional .apollo.common.Header header = 1;
bool DriveEvent::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DriveEvent::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void DriveEvent::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void DriveEvent::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& DriveEvent::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* DriveEvent::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.header)
  return header_;
}
::apollo::common::Header* DriveEvent::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void DriveEvent::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.header)
}

// optional string event = 2;
bool DriveEvent::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DriveEvent::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
void DriveEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
void DriveEvent::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event();
}
 const ::std::string& DriveEvent::event() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.event)
  return event_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DriveEvent::set_event(const ::std::string& value) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.event)
}
 void DriveEvent::set_event(const char* value) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.DriveEvent.event)
}
 void DriveEvent::set_event(const char* value, size_t size) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.DriveEvent.event)
}
 ::std::string* DriveEvent::mutable_event() {
  set_has_event();
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DriveEvent::release_event() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.event)
  clear_has_event();
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DriveEvent::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.event)
}

// optional .apollo.localization.Pose location = 3;
bool DriveEvent::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DriveEvent::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
void DriveEvent::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
void DriveEvent::clear_location() {
  if (location_ != NULL) location_->::apollo::localization::Pose::Clear();
  clear_has_location();
}
const ::apollo::localization::Pose& DriveEvent::location() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::apollo::localization::Pose* DriveEvent::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.location)
  return location_;
}
::apollo::localization::Pose* DriveEvent::release_location() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.location)
  clear_has_location();
  ::apollo::localization::Pose* temp = location_;
  location_ = NULL;
  return temp;
}
void DriveEvent::set_allocated_location(::apollo::localization::Pose* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.location)
}

// repeated .apollo.common.DriveEvent.Type type = 4;
int DriveEvent::type_size() const {
  return type_.size();
}
void DriveEvent::clear_type() {
  type_.Clear();
}
 ::apollo::common::DriveEvent_Type DriveEvent::type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.type)
  return static_cast< ::apollo::common::DriveEvent_Type >(type_.Get(index));
}
 void DriveEvent::set_type(int index, ::apollo::common::DriveEvent_Type value) {
  assert(::apollo::common::DriveEvent_Type_IsValid(value));
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.type)
}
 void DriveEvent::add_type(::apollo::common::DriveEvent_Type value) {
  assert(::apollo::common::DriveEvent_Type_IsValid(value));
  type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.common.DriveEvent.type)
}
 const ::google::protobuf::RepeatedField<int>&
DriveEvent::type() const {
  // @@protoc_insertion_point(field_list:apollo.common.DriveEvent.type)
  return type_;
}
 ::google::protobuf::RepeatedField<int>*
DriveEvent::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.DriveEvent.type)
  return &type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
