// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/pointcloud.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/pointcloud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {

namespace {

const ::google::protobuf::Descriptor* PointXYZIT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointXYZIT_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloud_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fpointcloud_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fpointcloud_2eproto() {
  protobuf_AddDesc_drivers_2fpointcloud_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/pointcloud.proto");
  GOOGLE_CHECK(file != NULL);
  PointXYZIT_descriptor_ = file->message_type(0);
  static const int PointXYZIT_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZIT, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZIT, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZIT, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZIT, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZIT, timestamp_),
  };
  PointXYZIT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointXYZIT_descriptor_,
      PointXYZIT::default_instance_,
      PointXYZIT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZIT, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointXYZIT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZIT, _internal_metadata_),
      -1);
  PointCloud_descriptor_ = file->message_type(1);
  static const int PointCloud_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, is_dense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, measurement_time_),
  };
  PointCloud_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointCloud_descriptor_,
      PointCloud::default_instance_,
      PointCloud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointCloud),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fpointcloud_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointXYZIT_descriptor_, &PointXYZIT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointCloud_descriptor_, &PointCloud::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fpointcloud_2eproto() {
  delete PointXYZIT::default_instance_;
  delete PointXYZIT_reflection_;
  delete PointCloud::default_instance_;
  delete PointCloud_reflection_;
}

void protobuf_AddDesc_drivers_2fpointcloud_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fpointcloud_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030drivers/pointcloud.proto\022\016apollo.drive"
    "rs\032\023common/header.proto\"h\n\nPointXYZIT\022\016\n"
    "\001x\030\001 \002(\002:\003nan\022\016\n\001y\030\002 \002(\002:\003nan\022\016\n\001z\030\003 \002(\002"
    ":\003nan\022\024\n\tintensity\030\004 \002(\r:\0010\022\024\n\ttimestamp"
    "\030\005 \002(\004:\0010\"\234\001\n\nPointCloud\022%\n\006header\030\001 \001(\013"
    "2\025.apollo.common.Header\022\020\n\010frame_id\030\002 \001("
    "\t\022\020\n\010is_dense\030\003 \001(\010\022)\n\005point\030\004 \003(\0132\032.apo"
    "llo.drivers.PointXYZIT\022\030\n\020measurement_ti"
    "me\030\005 \001(\001", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/pointcloud.proto", &protobuf_RegisterTypes);
  PointXYZIT::default_instance_ = new PointXYZIT();
  PointCloud::default_instance_ = new PointCloud();
  PointXYZIT::default_instance_->InitAsDefaultInstance();
  PointCloud::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fpointcloud_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fpointcloud_2eproto {
  StaticDescriptorInitializer_drivers_2fpointcloud_2eproto() {
    protobuf_AddDesc_drivers_2fpointcloud_2eproto();
  }
} static_descriptor_initializer_drivers_2fpointcloud_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointXYZIT::kXFieldNumber;
const int PointXYZIT::kYFieldNumber;
const int PointXYZIT::kZFieldNumber;
const int PointXYZIT::kIntensityFieldNumber;
const int PointXYZIT::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointXYZIT::PointXYZIT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.PointXYZIT)
}

void PointXYZIT::InitAsDefaultInstance() {
}

PointXYZIT::PointXYZIT(const PointXYZIT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.PointXYZIT)
}

void PointXYZIT::SharedCtor() {
  _cached_size_ = 0;
  x_ = static_cast<float>(::google::protobuf::internal::NaN());
  y_ = static_cast<float>(::google::protobuf::internal::NaN());
  z_ = static_cast<float>(::google::protobuf::internal::NaN());
  intensity_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointXYZIT::~PointXYZIT() {
  // @@protoc_insertion_point(destructor:apollo.drivers.PointXYZIT)
  SharedDtor();
}

void PointXYZIT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointXYZIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointXYZIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointXYZIT_descriptor_;
}

const PointXYZIT& PointXYZIT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fpointcloud_2eproto();
  return *default_instance_;
}

PointXYZIT* PointXYZIT::default_instance_ = NULL;

PointXYZIT* PointXYZIT::New(::google::protobuf::Arena* arena) const {
  PointXYZIT* n = new PointXYZIT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointXYZIT::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.PointXYZIT)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointXYZIT, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointXYZIT*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(intensity_, timestamp_);
    x_ = static_cast<float>(::google::protobuf::internal::NaN());
    y_ = static_cast<float>(::google::protobuf::internal::NaN());
    z_ = static_cast<float>(::google::protobuf::internal::NaN());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointXYZIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.PointXYZIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1 [default = nan];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2 [default = nan];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3 [default = nan];
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_intensity;
        break;
      }

      // required uint32 intensity = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.PointXYZIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.PointXYZIT)
  return false;
#undef DO_
}

void PointXYZIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.PointXYZIT)
  // required float x = 1 [default = nan];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2 [default = nan];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3 [default = nan];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required uint32 intensity = 4 [default = 0];
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->intensity(), output);
  }

  // required uint64 timestamp = 5 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.PointXYZIT)
}

::google::protobuf::uint8* PointXYZIT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.PointXYZIT)
  // required float x = 1 [default = nan];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2 [default = nan];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3 [default = nan];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required uint32 intensity = 4 [default = 0];
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->intensity(), target);
  }

  // required uint64 timestamp = 5 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.PointXYZIT)
  return target;
}

int PointXYZIT::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.drivers.PointXYZIT)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1 [default = nan];
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2 [default = nan];
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3 [default = nan];
    total_size += 1 + 4;
  }

  if (has_intensity()) {
    // required uint32 intensity = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intensity());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  return total_size;
}
int PointXYZIT::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.PointXYZIT)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float x = 1 [default = nan];
    total_size += 1 + 4;

    // required float y = 2 [default = nan];
    total_size += 1 + 4;

    // required float z = 3 [default = nan];
    total_size += 1 + 4;

    // required uint32 intensity = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intensity());

    // required uint64 timestamp = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointXYZIT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.PointXYZIT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointXYZIT* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointXYZIT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.PointXYZIT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.PointXYZIT)
    MergeFrom(*source);
  }
}

void PointXYZIT::MergeFrom(const PointXYZIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.PointXYZIT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointXYZIT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.PointXYZIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointXYZIT::CopyFrom(const PointXYZIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.PointXYZIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointXYZIT::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PointXYZIT::Swap(PointXYZIT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointXYZIT::InternalSwap(PointXYZIT* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(intensity_, other->intensity_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointXYZIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointXYZIT_descriptor_;
  metadata.reflection = PointXYZIT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointXYZIT

// required float x = 1 [default = nan];
bool PointXYZIT::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointXYZIT::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PointXYZIT::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointXYZIT::clear_x() {
  x_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_x();
}
 float PointXYZIT::x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.x)
  return x_;
}
 void PointXYZIT::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.x)
}

// required float y = 2 [default = nan];
bool PointXYZIT::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointXYZIT::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PointXYZIT::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointXYZIT::clear_y() {
  y_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_y();
}
 float PointXYZIT::y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.y)
  return y_;
}
 void PointXYZIT::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.y)
}

// required float z = 3 [default = nan];
bool PointXYZIT::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointXYZIT::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void PointXYZIT::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointXYZIT::clear_z() {
  z_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_z();
}
 float PointXYZIT::z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.z)
  return z_;
}
 void PointXYZIT::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.z)
}

// required uint32 intensity = 4 [default = 0];
bool PointXYZIT::has_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PointXYZIT::set_has_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
void PointXYZIT::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
void PointXYZIT::clear_intensity() {
  intensity_ = 0u;
  clear_has_intensity();
}
 ::google::protobuf::uint32 PointXYZIT::intensity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.intensity)
  return intensity_;
}
 void PointXYZIT::set_intensity(::google::protobuf::uint32 value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.intensity)
}

// required uint64 timestamp = 5 [default = 0];
bool PointXYZIT::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PointXYZIT::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void PointXYZIT::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void PointXYZIT::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::uint64 PointXYZIT::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.timestamp)
  return timestamp_;
}
 void PointXYZIT::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kHeaderFieldNumber;
const int PointCloud::kFrameIdFieldNumber;
const int PointCloud::kIsDenseFieldNumber;
const int PointCloud::kPointFieldNumber;
const int PointCloud::kMeasurementTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.PointCloud)
}

void PointCloud::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.PointCloud)
}

void PointCloud::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_dense_ = false;
  measurement_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:apollo.drivers.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloud_descriptor_;
}

const PointCloud& PointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fpointcloud_2eproto();
  return *default_instance_;
}

PointCloud* PointCloud::default_instance_ = NULL;

PointCloud* PointCloud::New(::google::protobuf::Arena* arena) const {
  PointCloud* n = new PointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.PointCloud)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointCloud, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointCloud*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(measurement_time_, is_dense_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_frame_id()) {
      frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.PointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frame_id;
        break;
      }

      // optional string frame_id = 2;
      case 2: {
        if (tag == 18) {
         parse_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.PointCloud.frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_dense;
        break;
      }

      // optional bool is_dense = 3;
      case 3: {
        if (tag == 24) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
          set_has_is_dense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_point;
        break;
      }

      // repeated .apollo.drivers.PointXYZIT point = 4;
      case 4: {
        if (tag == 34) {
         parse_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(41)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 5;
      case 5: {
        if (tag == 41) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.PointCloud)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.PointCloud.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame_id(), output);
  }

  // optional bool is_dense = 3;
  if (has_is_dense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dense(), output);
  }

  // repeated .apollo.drivers.PointXYZIT point = 4;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->point(i), output);
  }

  // optional double measurement_time = 5;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->measurement_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.PointCloud)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional string frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.PointCloud.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_id(), target);
  }

  // optional bool is_dense = 3;
  if (has_is_dense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dense(), target);
  }

  // repeated .apollo.drivers.PointXYZIT point = 4;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->point(i), false, target);
  }

  // optional double measurement_time = 5;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->measurement_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.PointCloud)
  return target;
}

int PointCloud::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.PointCloud)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional string frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional bool is_dense = 3;
    if (has_is_dense()) {
      total_size += 1 + 1;
    }

    // optional double measurement_time = 5;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.drivers.PointXYZIT point = 4;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.PointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointCloud* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.PointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_frame_id()) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (from.has_is_dense()) {
      set_is_dense(from.is_dense());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  std::swap(header_, other->header_);
  frame_id_.Swap(&other->frame_id_);
  std::swap(is_dense_, other->is_dense_);
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloud_descriptor_;
  metadata.reflection = PointCloud_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloud

// optional .apollo.common.Header header = 1;
bool PointCloud::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointCloud::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void PointCloud::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointCloud::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& PointCloud::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* PointCloud::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.header)
  return header_;
}
::apollo::common::Header* PointCloud::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.PointCloud.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PointCloud::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.PointCloud.header)
}

// optional string frame_id = 2;
bool PointCloud::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointCloud::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PointCloud::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointCloud::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
 const ::std::string& PointCloud::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.frame_id)
  return frame_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PointCloud::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.frame_id)
}
 void PointCloud::set_frame_id(const char* value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.PointCloud.frame_id)
}
 void PointCloud::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.PointCloud.frame_id)
}
 ::std::string* PointCloud::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PointCloud::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.PointCloud.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PointCloud::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.PointCloud.frame_id)
}

// optional bool is_dense = 3;
bool PointCloud::has_is_dense() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointCloud::set_has_is_dense() {
  _has_bits_[0] |= 0x00000004u;
}
void PointCloud::clear_has_is_dense() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointCloud::clear_is_dense() {
  is_dense_ = false;
  clear_has_is_dense();
}
 bool PointCloud::is_dense() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.is_dense)
  return is_dense_;
}
 void PointCloud::set_is_dense(bool value) {
  set_has_is_dense();
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.is_dense)
}

// repeated .apollo.drivers.PointXYZIT point = 4;
int PointCloud::point_size() const {
  return point_.size();
}
void PointCloud::clear_point() {
  point_.Clear();
}
const ::apollo::drivers::PointXYZIT& PointCloud::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.point)
  return point_.Get(index);
}
::apollo::drivers::PointXYZIT* PointCloud::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.point)
  return point_.Mutable(index);
}
::apollo::drivers::PointXYZIT* PointCloud::add_point() {
  // @@protoc_insertion_point(field_add:apollo.drivers.PointCloud.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::PointXYZIT >*
PointCloud::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.PointCloud.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::PointXYZIT >&
PointCloud::point() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.PointCloud.point)
  return point_;
}

// optional double measurement_time = 5;
bool PointCloud::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PointCloud::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000010u;
}
void PointCloud::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void PointCloud::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double PointCloud::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.measurement_time)
  return measurement_time_;
}
 void PointCloud::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.measurement_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
