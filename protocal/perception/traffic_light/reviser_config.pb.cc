// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light/reviser_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/traffic_light/reviser_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace traffic_light {
namespace reviser_config {

namespace {

const ::google::protobuf::Descriptor* HMMReviserConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HMMReviserConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorReviserConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorReviserConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/traffic_light/reviser_config.proto");
  GOOGLE_CHECK(file != NULL);
  HMMReviserConfig_descriptor_ = file->message_type(0);
  static const int HMMReviserConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, param_file_),
  };
  HMMReviserConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HMMReviserConfig_descriptor_,
      HMMReviserConfig::default_instance_,
      HMMReviserConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(HMMReviserConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, _internal_metadata_),
      -1);
  ColorReviserConfig_descriptor_ = file->message_type(1);
  static const int ColorReviserConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, blink_time_),
  };
  ColorReviserConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColorReviserConfig_descriptor_,
      ColorReviserConfig::default_instance_,
      ColorReviserConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ColorReviserConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, _internal_metadata_),
      -1);
  ModelConfigs_descriptor_ = file->message_type(2);
  static const int ModelConfigs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, hmm_reviser_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, color_reviser_config_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HMMReviserConfig_descriptor_, &HMMReviserConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColorReviserConfig_descriptor_, &ColorReviserConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto() {
  delete HMMReviserConfig::default_instance_;
  delete HMMReviserConfig_reflection_;
  delete ColorReviserConfig::default_instance_;
  delete ColorReviserConfig_reflection_;
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
}

void protobuf_AddDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-perception/traffic_light/reviser_confi"
    "g.proto\022.apollo.perception.traffic_light"
    ".reviser_config\"E\n\020HMMReviserConfig\022\014\n\004n"
    "ame\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\022\n\nparam_file"
    "\030\003 \001(\t\"W\n\022ColorReviserConfig\022\014\n\004name\030\001 \001"
    "(\t\022\017\n\007version\030\002 \001(\t\022\016\n\006enable\030\003 \001(\005\022\022\n\nb"
    "link_time\030\004 \001(\002\"\316\001\n\014ModelConfigs\022\\\n\022hmm_"
    "reviser_config\030\001 \001(\0132@.apollo.perception"
    ".traffic_light.reviser_config.HMMReviser"
    "Config\022`\n\024color_reviser_config\030\002 \001(\0132B.a"
    "pollo.perception.traffic_light.reviser_c"
    "onfig.ColorReviserConfig", 464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/traffic_light/reviser_config.proto", &protobuf_RegisterTypes);
  HMMReviserConfig::default_instance_ = new HMMReviserConfig();
  ColorReviserConfig::default_instance_ = new ColorReviserConfig();
  ModelConfigs::default_instance_ = new ModelConfigs();
  HMMReviserConfig::default_instance_->InitAsDefaultInstance();
  ColorReviserConfig::default_instance_->InitAsDefaultInstance();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HMMReviserConfig::kNameFieldNumber;
const int HMMReviserConfig::kVersionFieldNumber;
const int HMMReviserConfig::kParamFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HMMReviserConfig::HMMReviserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
}

void HMMReviserConfig::InitAsDefaultInstance() {
}

HMMReviserConfig::HMMReviserConfig(const HMMReviserConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
}

void HMMReviserConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HMMReviserConfig::~HMMReviserConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  SharedDtor();
}

void HMMReviserConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HMMReviserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HMMReviserConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HMMReviserConfig_descriptor_;
}

const HMMReviserConfig& HMMReviserConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto();
  return *default_instance_;
}

HMMReviserConfig* HMMReviserConfig::default_instance_ = NULL;

HMMReviserConfig* HMMReviserConfig::New(::google::protobuf::Arena* arena) const {
  HMMReviserConfig* n = new HMMReviserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HMMReviserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_param_file()) {
      param_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HMMReviserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param_file;
        break;
      }

      // optional string param_file = 3;
      case 3: {
        if (tag == 26) {
         parse_param_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_file().data(), this->param_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  return false;
#undef DO_
}

void HMMReviserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string param_file = 3;
  if (has_param_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_file().data(), this->param_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
}

::google::protobuf::uint8* HMMReviserConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string param_file = 3;
  if (has_param_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_file().data(), this->param_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  return target;
}

int HMMReviserConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string param_file = 3;
    if (has_param_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_file());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HMMReviserConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HMMReviserConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HMMReviserConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
    MergeFrom(*source);
  }
}

void HMMReviserConfig::MergeFrom(const HMMReviserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_param_file()) {
      set_has_param_file();
      param_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_file_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HMMReviserConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMMReviserConfig::CopyFrom(const HMMReviserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMMReviserConfig::IsInitialized() const {

  return true;
}

void HMMReviserConfig::Swap(HMMReviserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HMMReviserConfig::InternalSwap(HMMReviserConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  param_file_.Swap(&other->param_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HMMReviserConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HMMReviserConfig_descriptor_;
  metadata.reflection = HMMReviserConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HMMReviserConfig

// optional string name = 1;
bool HMMReviserConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HMMReviserConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HMMReviserConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HMMReviserConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& HMMReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMMReviserConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
 void HMMReviserConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
 void HMMReviserConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
 ::std::string* HMMReviserConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HMMReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMMReviserConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}

// optional string version = 2;
bool HMMReviserConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HMMReviserConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void HMMReviserConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void HMMReviserConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& HMMReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMMReviserConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
 void HMMReviserConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
 void HMMReviserConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
 ::std::string* HMMReviserConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HMMReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMMReviserConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}

// optional string param_file = 3;
bool HMMReviserConfig::has_param_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HMMReviserConfig::set_has_param_file() {
  _has_bits_[0] |= 0x00000004u;
}
void HMMReviserConfig::clear_has_param_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void HMMReviserConfig::clear_param_file() {
  param_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_file();
}
 const ::std::string& HMMReviserConfig::param_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return param_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMMReviserConfig::set_param_file(const ::std::string& value) {
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
 void HMMReviserConfig::set_param_file(const char* value) {
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
 void HMMReviserConfig::set_param_file(const char* value, size_t size) {
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
 ::std::string* HMMReviserConfig::mutable_param_file() {
  set_has_param_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return param_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HMMReviserConfig::release_param_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  clear_has_param_file();
  return param_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMMReviserConfig::set_allocated_param_file(::std::string* param_file) {
  if (param_file != NULL) {
    set_has_param_file();
  } else {
    clear_has_param_file();
  }
  param_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColorReviserConfig::kNameFieldNumber;
const int ColorReviserConfig::kVersionFieldNumber;
const int ColorReviserConfig::kEnableFieldNumber;
const int ColorReviserConfig::kBlinkTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColorReviserConfig::ColorReviserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
}

void ColorReviserConfig::InitAsDefaultInstance() {
}

ColorReviserConfig::ColorReviserConfig(const ColorReviserConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
}

void ColorReviserConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_ = 0;
  blink_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorReviserConfig::~ColorReviserConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  SharedDtor();
}

void ColorReviserConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ColorReviserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorReviserConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorReviserConfig_descriptor_;
}

const ColorReviserConfig& ColorReviserConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto();
  return *default_instance_;
}

ColorReviserConfig* ColorReviserConfig::default_instance_ = NULL;

ColorReviserConfig* ColorReviserConfig::New(::google::protobuf::Arena* arena) const {
  ColorReviserConfig* n = new ColorReviserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColorReviserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ColorReviserConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ColorReviserConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(enable_, blink_time_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ColorReviserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable;
        break;
      }

      // optional int32 enable = 3;
      case 3: {
        if (tag == 24) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_blink_time;
        break;
      }

      // optional float blink_time = 4;
      case 4: {
        if (tag == 37) {
         parse_blink_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blink_time_)));
          set_has_blink_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  return false;
#undef DO_
}

void ColorReviserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 enable = 3;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enable(), output);
  }

  // optional float blink_time = 4;
  if (has_blink_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->blink_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
}

::google::protobuf::uint8* ColorReviserConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 enable = 3;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enable(), target);
  }

  // optional float blink_time = 4;
  if (has_blink_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->blink_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  return target;
}

int ColorReviserConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 enable = 3;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable());
    }

    // optional float blink_time = 4;
    if (has_blink_time()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorReviserConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ColorReviserConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColorReviserConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
    MergeFrom(*source);
  }
}

void ColorReviserConfig::MergeFrom(const ColorReviserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_blink_time()) {
      set_blink_time(from.blink_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ColorReviserConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorReviserConfig::CopyFrom(const ColorReviserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorReviserConfig::IsInitialized() const {

  return true;
}

void ColorReviserConfig::Swap(ColorReviserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorReviserConfig::InternalSwap(ColorReviserConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(enable_, other->enable_);
  std::swap(blink_time_, other->blink_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColorReviserConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorReviserConfig_descriptor_;
  metadata.reflection = ColorReviserConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorReviserConfig

// optional string name = 1;
bool ColorReviserConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ColorReviserConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ColorReviserConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ColorReviserConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ColorReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ColorReviserConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
 void ColorReviserConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
 void ColorReviserConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
 ::std::string* ColorReviserConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ColorReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ColorReviserConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}

// optional string version = 2;
bool ColorReviserConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ColorReviserConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ColorReviserConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ColorReviserConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& ColorReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ColorReviserConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
 void ColorReviserConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
 void ColorReviserConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
 ::std::string* ColorReviserConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ColorReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ColorReviserConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}

// optional int32 enable = 3;
bool ColorReviserConfig::has_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ColorReviserConfig::set_has_enable() {
  _has_bits_[0] |= 0x00000004u;
}
void ColorReviserConfig::clear_has_enable() {
  _has_bits_[0] &= ~0x00000004u;
}
void ColorReviserConfig::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
 ::google::protobuf::int32 ColorReviserConfig::enable() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
  return enable_;
}
 void ColorReviserConfig::set_enable(::google::protobuf::int32 value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
}

// optional float blink_time = 4;
bool ColorReviserConfig::has_blink_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ColorReviserConfig::set_has_blink_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ColorReviserConfig::clear_has_blink_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ColorReviserConfig::clear_blink_time() {
  blink_time_ = 0;
  clear_has_blink_time();
}
 float ColorReviserConfig::blink_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
  return blink_time_;
}
 void ColorReviserConfig::set_blink_time(float value) {
  set_has_blink_time();
  blink_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kHmmReviserConfigFieldNumber;
const int ModelConfigs::kColorReviserConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.reviser_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
  hmm_reviser_config_ = const_cast< ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig*>(&::apollo::perception::traffic_light::reviser_config::HMMReviserConfig::default_instance());
  color_reviser_config_ = const_cast< ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig*>(&::apollo::perception::traffic_light::reviser_config::ColorReviserConfig::default_instance());
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.reviser_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  hmm_reviser_config_ = NULL;
  color_reviser_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  if (this != default_instance_) {
    delete hmm_reviser_config_;
    delete color_reviser_config_;
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2freviser_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hmm_reviser_config()) {
      if (hmm_reviser_config_ != NULL) hmm_reviser_config_->::apollo::perception::traffic_light::reviser_config::HMMReviserConfig::Clear();
    }
    if (has_color_reviser_config()) {
      if (color_reviser_config_ != NULL) color_reviser_config_->::apollo::perception::traffic_light::reviser_config::ColorReviserConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hmm_reviser_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_color_reviser_config;
        break;
      }

      // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
      case 2: {
        if (tag == 18) {
         parse_color_reviser_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color_reviser_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
  if (has_hmm_reviser_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hmm_reviser_config_, output);
  }

  // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
  if (has_color_reviser_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_reviser_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.reviser_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
  if (has_hmm_reviser_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hmm_reviser_config_, false, target);
  }

  // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
  if (has_color_reviser_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->color_reviser_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
    if (has_hmm_reviser_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hmm_reviser_config_);
    }

    // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
    if (has_color_reviser_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->color_reviser_config_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.reviser_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.reviser_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hmm_reviser_config()) {
      mutable_hmm_reviser_config()->::apollo::perception::traffic_light::reviser_config::HMMReviserConfig::MergeFrom(from.hmm_reviser_config());
    }
    if (from.has_color_reviser_config()) {
      mutable_color_reviser_config()->::apollo::perception::traffic_light::reviser_config::ColorReviserConfig::MergeFrom(from.color_reviser_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  std::swap(hmm_reviser_config_, other->hmm_reviser_config_);
  std::swap(color_reviser_config_, other->color_reviser_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
bool ModelConfigs::has_hmm_reviser_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_hmm_reviser_config() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_hmm_reviser_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_hmm_reviser_config() {
  if (hmm_reviser_config_ != NULL) hmm_reviser_config_->::apollo::perception::traffic_light::reviser_config::HMMReviserConfig::Clear();
  clear_has_hmm_reviser_config();
}
const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig& ModelConfigs::hmm_reviser_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return hmm_reviser_config_ != NULL ? *hmm_reviser_config_ : *default_instance_->hmm_reviser_config_;
}
::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::mutable_hmm_reviser_config() {
  set_has_hmm_reviser_config();
  if (hmm_reviser_config_ == NULL) {
    hmm_reviser_config_ = new ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return hmm_reviser_config_;
}
::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::release_hmm_reviser_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  clear_has_hmm_reviser_config();
  ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* temp = hmm_reviser_config_;
  hmm_reviser_config_ = NULL;
  return temp;
}
void ModelConfigs::set_allocated_hmm_reviser_config(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config) {
  delete hmm_reviser_config_;
  hmm_reviser_config_ = hmm_reviser_config;
  if (hmm_reviser_config) {
    set_has_hmm_reviser_config();
  } else {
    clear_has_hmm_reviser_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
}

// optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
bool ModelConfigs::has_color_reviser_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_color_reviser_config() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_color_reviser_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_color_reviser_config() {
  if (color_reviser_config_ != NULL) color_reviser_config_->::apollo::perception::traffic_light::reviser_config::ColorReviserConfig::Clear();
  clear_has_color_reviser_config();
}
const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig& ModelConfigs::color_reviser_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return color_reviser_config_ != NULL ? *color_reviser_config_ : *default_instance_->color_reviser_config_;
}
::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::mutable_color_reviser_config() {
  set_has_color_reviser_config();
  if (color_reviser_config_ == NULL) {
    color_reviser_config_ = new ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return color_reviser_config_;
}
::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::release_color_reviser_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  clear_has_color_reviser_config();
  ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* temp = color_reviser_config_;
  color_reviser_config_ = NULL;
  return temp;
}
void ModelConfigs::set_allocated_color_reviser_config(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config) {
  delete color_reviser_config_;
  color_reviser_config_ = color_reviser_config;
  if (color_reviser_config) {
    set_has_color_reviser_config();
  } else {
    clear_has_color_reviser_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
