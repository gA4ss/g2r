// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/scenario.proto

#ifndef PROTOBUF_common_2fscenario_2eproto__INCLUDED
#define PROTOBUF_common_2fscenario_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2fscenario_2eproto();
void protobuf_AssignDesc_common_2fscenario_2eproto();
void protobuf_ShutdownFile_common_2fscenario_2eproto();

class Scenario;

enum Scenario_Type {
  Scenario_Type_UNKNOWN = 0,
  Scenario_Type_CRUISE_UNKNOWN = 1000,
  Scenario_Type_CRUISE_URBAN = 1001,
  Scenario_Type_CRUISE_HIGHWAY = 1002,
  Scenario_Type_JUNCTION_UNKNOWN = 2000,
  Scenario_Type_JUNCTION_TRAFFIC_LIGHT = 2001,
  Scenario_Type_JUNCTION_STOP_SIGN = 2002
};
bool Scenario_Type_IsValid(int value);
const Scenario_Type Scenario_Type_Type_MIN = Scenario_Type_UNKNOWN;
const Scenario_Type Scenario_Type_Type_MAX = Scenario_Type_JUNCTION_STOP_SIGN;
const int Scenario_Type_Type_ARRAYSIZE = Scenario_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scenario_Type_descriptor();
inline const ::std::string& Scenario_Type_Name(Scenario_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scenario_Type_descriptor(), value);
}
inline bool Scenario_Type_Parse(
    const ::std::string& name, Scenario_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scenario_Type>(
    Scenario_Type_descriptor(), name, value);
}
// ===================================================================

class Scenario : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.Scenario) */ {
 public:
  Scenario();
  virtual ~Scenario();

  Scenario(const Scenario& from);

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scenario& default_instance();

  void Swap(Scenario* other);

  // implements Message ----------------------------------------------

  inline Scenario* New() const { return New(NULL); }

  Scenario* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scenario& from);
  void MergeFrom(const Scenario& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Scenario* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Scenario_Type Type;
  static const Type UNKNOWN =
    Scenario_Type_UNKNOWN;
  static const Type CRUISE_UNKNOWN =
    Scenario_Type_CRUISE_UNKNOWN;
  static const Type CRUISE_URBAN =
    Scenario_Type_CRUISE_URBAN;
  static const Type CRUISE_HIGHWAY =
    Scenario_Type_CRUISE_HIGHWAY;
  static const Type JUNCTION_UNKNOWN =
    Scenario_Type_JUNCTION_UNKNOWN;
  static const Type JUNCTION_TRAFFIC_LIGHT =
    Scenario_Type_JUNCTION_TRAFFIC_LIGHT;
  static const Type JUNCTION_STOP_SIGN =
    Scenario_Type_JUNCTION_STOP_SIGN;
  static inline bool Type_IsValid(int value) {
    return Scenario_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Scenario_Type_Type_MIN;
  static const Type Type_MAX =
    Scenario_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Scenario_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Scenario_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Scenario_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Scenario_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Scenario.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::common::Scenario_Type type() const;
  void set_type(::apollo::common::Scenario_Type value);

  // @@protoc_insertion_point(class_scope:apollo.common.Scenario)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_common_2fscenario_2eproto();
  friend void protobuf_AssignDesc_common_2fscenario_2eproto();
  friend void protobuf_ShutdownFile_common_2fscenario_2eproto();

  void InitAsDefaultInstance();
  static Scenario* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Scenario

// optional .apollo.common.Scenario.Type type = 1 [default = UNKNOWN];
inline bool Scenario::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scenario::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scenario::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scenario::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::common::Scenario_Type Scenario::type() const {
  // @@protoc_insertion_point(field_get:apollo.common.Scenario.type)
  return static_cast< ::apollo::common::Scenario_Type >(type_);
}
inline void Scenario::set_type(::apollo::common::Scenario_Type value) {
  assert(::apollo::common::Scenario_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Scenario.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::common::Scenario_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::Scenario_Type>() {
  return ::apollo::common::Scenario_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fscenario_2eproto__INCLUDED
