// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/gnss_raw_observation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/gnss/gnss_raw_observation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss {
class BandObservationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BandObservation> {
} _BandObservation_default_instance_;
class SatelliteObservationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SatelliteObservation> {
} _SatelliteObservation_default_instance_;
class EpochObservationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EpochObservation> {
} _EpochObservation_default_instance_;
class KepplerOrbitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KepplerOrbit> {
} _KepplerOrbit_default_instance_;
class GlonassOrbitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GlonassOrbit> {
} _GlonassOrbit_default_instance_;
class GnssEphemerisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GnssEphemeris> {
} _GnssEphemeris_default_instance_;

namespace protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, band_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, frequency_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, pseudo_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, pseudo_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, carrier_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, loss_lock_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, doppler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, snr_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, sat_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, sat_sys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, band_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, band_obs_),
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, receiver_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, health_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, sat_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, sat_obs_),
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, sat_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, week_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, iode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, deltan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, m0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, roota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, toe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, toc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, crs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cuc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omega0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, i0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omegadot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, idot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, codesonl2channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, l2pdataflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, .ouracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, tgd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, iodc_),
  36,
  0,
  37,
  1,
  2,
  3,
  4,
  5,
  6,
  19,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  20,
  32,
  33,
  34,
  35,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, slot_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, toe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, frequency_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, week_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, week_second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, tk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, clock_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, clock_drift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, .oelerate_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, .oelerate_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, .oelerate_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, infor_age_),
  25,
  0,
  26,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  24,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, keppler_orbit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, glonass_orbit_),
  2,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(BandObservation)},
  { 21, 30, sizeof(SatelliteObservation)},
  { 34, 49, sizeof(EpochObservation)},
  { 59, 102, sizeof(KepplerOrbit)},
  { 140, 172, sizeof(GlonassOrbit)},
  { 199, 207, sizeof(GnssEphemeris)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BandObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SatelliteObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EpochObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KepplerOrbit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GlonassOrbit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GnssEphemeris_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "drivers/gnss/gnss_raw_observation.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _BandObservation_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SatelliteObservation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EpochObservation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _KepplerOrbit_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GlonassOrbit_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GnssEphemeris_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BandObservation_default_instance_.DefaultConstruct();
  _SatelliteObservation_default_instance_.DefaultConstruct();
  _EpochObservation_default_instance_.DefaultConstruct();
  _KepplerOrbit_default_instance_.DefaultConstruct();
  _GlonassOrbit_default_instance_.DefaultConstruct();
  _GnssEphemeris_default_instance_.DefaultConstruct();
  _GnssEphemeris_default_instance_.get_mutable()->keppler_orbit_ = const_cast< ::apollo::drivers::gnss::KepplerOrbit*>(
      ::apollo::drivers::gnss::KepplerOrbit::internal_default_instance());
  _GnssEphemeris_default_instance_.get_mutable()->glonass_orbit_ = const_cast< ::apollo::drivers::gnss::GlonassOrbit*>(
      ::apollo::drivers::gnss::GlonassOrbit::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'drivers/gnss/gnss_raw_observation.prot"
      "o\022\023apollo.drivers.gnss\"\222\002\n\017BandObservati"
      "on\022>\n\007band_id\030\001 \001(\0162\037.apollo.drivers.gns"
      "s.GnssBandID:\014BAND_UNKNOWN\022\027\n\017frequency_"
      "value\030\002 \001(\001\022B\n\013pseudo_type\030\003 \001(\0162\037.apoll"
      "o.drivers.gnss.PseudoType:\014CODE_UNKNOWN\022"
      "\024\n\014pseudo_range\030\004 \001(\001\022\025\n\rcarrier_phase\030\005"
      " \001(\001\022\027\n\017loss_lock_index\030\006 \001(\r\022\017\n\007doppler"
      "\030\007 \001(\001\022\013\n\003snr\030\010 \001(\002\"\256\001\n\024SatelliteObserva"
      "tion\022\017\n\007sat_prn\030\001 \001(\r\0227\n\007sat_sys\030\002 \001(\0162\035"
      ".apollo.drivers.gnss.GnssType:\007GPS_SYS\022\024"
      "\n\014band_obs_num\030\003 \001(\r\0226\n\010band_obs\030\004 \003(\0132$"
      ".apollo.drivers.gnss.BandObservation\"\273\002\n"
      "\020EpochObservation\022\023\n\013receiver_id\030\001 \001(\r\022C"
      "\n\016gnss_time_type\030\002 \001(\0162!.apollo.drivers."
      "gnss.GnssTimeType:\010GPS_TIME\022\021\n\tgnss_week"
      "\030\003 \001(\r\022\025\n\rgnss_second_s\030\004 \001(\001\022\022\n\npositio"
      "n_x\030\005 \001(\001\022\022\n\nposition_y\030\006 \001(\001\022\022\n\npositio"
      "n_z\030\007 \001(\001\022\026\n\013health_flag\030\010 \001(\r:\0010\022\023\n\013sat"
      "_obs_num\030\t \001(\r\022:\n\007sat_obs\030\n \003(\0132).apollo"
      ".drivers.gnss.SatelliteObservation\"\247\005\n\014K"
      "epplerOrbit\0229\n\tgnss_type\030\001 \001(\0162\035.apollo."
      "drivers.gnss.GnssType:\007GPS_SYS\022\017\n\007sat_pr"
      "n\030\002 \001(\r\022C\n\016gnss_time_type\030\003 \001(\0162!.apollo"
      ".drivers.gnss.GnssTimeType:\010GPS_TIME\022\014\n\004"
      "year\030\004 \001(\r\022\r\n\005month\030\005 \001(\r\022\013\n\003day\030\006 \001(\r\022\014"
      "\n\004hour\030\007 \001(\r\022\016\n\006minute\030\010 \001(\r\022\020\n\010second_s"
      "\030\t \001(\001\022\020\n\010week_num\030\n \001(\r\022\020\n\010reserved\030\013 \001"
      "(\001\022\013\n\003af0\030\014 \001(\001\022\013\n\003af1\030\r \001(\001\022\013\n\003af2\030\016 \001("
      "\001\022\014\n\004iode\030\017 \001(\001\022\016\n\006deltan\030\020 \001(\001\022\n\n\002m0\030\021 "
      "\001(\001\022\t\n\001e\030\022 \001(\001\022\r\n\005roota\030\023 \001(\001\022\013\n\003toe\030\024 \001"
      "(\001\022\013\n\003toc\030\025 \001(\001\022\013\n\003cic\030\026 \001(\001\022\013\n\003crc\030\027 \001("
      "\001\022\013\n\003cis\030\030 \001(\001\022\013\n\003crs\030\031 \001(\001\022\013\n\003cuc\030\032 \001(\001"
      "\022\013\n\003cus\030\033 \001(\001\022\016\n\006omega0\030\034 \001(\001\022\r\n\005omega\030\035"
      " \001(\001\022\n\n\002i0\030\036 \001(\001\022\020\n\010omegadot\030\037 \001(\001\022\014\n\004id"
      "ot\030  \001(\001\022\030\n\020codesonL2channel\030! \001(\001\022\023\n\013L2"
      "Pdataflag\030\" \001(\r\022\020\n\010.ouracy\030# \001(\r\022\016\n\006hea"
      "lth\030$ \001(\r\022\013\n\003tgd\030% \001(\001\022\014\n\004iodc\030& \001(\001\"\332\004\n"
      "\014GlonassOrbit\0229\n\tgnss_type\030\001 \001(\0162\035.apoll"
      "o.drivers.gnss.GnssType:\007GLO_SYS\022\020\n\010slot"
      "_prn\030\002 \001(\r\022C\n\016gnss_time_type\030\003 \001(\0162!.apo"
      "llo.drivers.gnss.GnssTimeType:\010GLO_TIME\022"
      "\013\n\003toe\030\004 \001(\001\022\014\n\004year\030\005 \001(\r\022\r\n\005month\030\006 \001("
      "\r\022\013\n\003day\030\007 \001(\r\022\014\n\004hour\030\010 \001(\r\022\016\n\006minute\030\t"
      " \001(\r\022\020\n\010second_s\030\n \001(\001\022\024\n\014frequency_no\030\013"
      " \001(\005\022\020\n\010week_num\030\014 \001(\r\022\025\n\rweek_second_s\030"
      "\r \001(\001\022\n\n\002tk\030\016 \001(\001\022\024\n\014clock_offset\030\017 \001(\001\022"
      "\023\n\013clock_drift\030\020 \001(\001\022\016\n\006health\030\021 \001(\r\022\022\n\n"
      "position_x\030\022 \001(\001\022\022\n\nposition_y\030\023 \001(\001\022\022\n\n"
      "position_z\030\024 \001(\001\022\022\n\nvelocity_x\030\025 \001(\001\022\022\n\n"
      "velocity_y\030\026 \001(\001\022\022\n\nvelocity_z\030\027 \001(\001\022\024\n\014"
      ".oelerate_x\030\030 \001(\001\022\024\n\014.oelerate_y\030\031 \001(\001"
      "\022\024\n\014.oelerate_z\030\032 \001(\001\022\021\n\tinfor_age\030\033 \001("
      "\001\"\276\001\n\rGnssEphemeris\0229\n\tgnss_type\030\001 \001(\0162\035"
      ".apollo.drivers.gnss.GnssType:\007GLO_SYS\0228"
      "\n\rkeppler_orbit\030\002 \001(\0132!.apollo.drivers.g"
      "nss.KepplerOrbit\0228\n\rglonass_orbit\030\003 \001(\0132"
      "!.apollo.drivers.gnss.GlonassOrbit*\212\001\n\nG"
      "nssBandID\022\020\n\014BAND_UNKNOWN\020\000\022\n\n\006GPS_L1\020\001\022"
      "\n\n\006GPS_L2\020\002\022\n\n\006GPS_L5\020\003\022\n\n\006BDS_B1\020\004\022\n\n\006B"
      "DS_B2\020\005\022\n\n\006BDS_B3\020\006\022\n\n\006GLO_G1\020\007\022\n\n\006GLO_G"
      "2\020\010\022\n\n\006GLO_G3\020\t*X\n\014GnssTimeType\022\020\n\014TIME_"
      "UNKNOWN\020\000\022\014\n\010GPS_TIME\020\001\022\014\n\010BDS_TIME\020\002\022\014\n"
      "\010GLO_TIME\020\003\022\014\n\010GAL_TIME\020\004*O\n\010GnssType\022\017\n"
      "\013SYS_UNKNOWN\020\000\022\013\n\007GPS_SYS\020\001\022\013\n\007BDS_SYS\020\002"
      "\022\013\n\007GLO_SYS\020\003\022\013\n\007GAL_SYS\020\004*B\n\nPseudoType"
      "\022\020\n\014CODE_UNKNOWN\020\000\022\016\n\nCORSE_CODE\020\001\022\022\n\016PR"
      "ECISION_CODE\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/gnss/gnss_raw_observation.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto

const ::google::protobuf::EnumDescriptor* GnssBandID_descriptor() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[0];
}
bool GnssBandID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssTimeType_descriptor() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[1];
}
bool GnssTimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssType_descriptor() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[2];
}
bool GnssType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PseudoType_descriptor() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[3];
}
bool PseudoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BandObservation::kBandIdFieldNumber;
const int BandObservation::kFrequencyValueFieldNumber;
const int BandObservation::kPseudoTypeFieldNumber;
const int BandObservation::kPseudoRangeFieldNumber;
const int BandObservation::kCarrierPhaseFieldNumber;
const int BandObservation::kLossLockIndexFieldNumber;
const int BandObservation::kDopplerFieldNumber;
const int BandObservation::kSnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BandObservation::BandObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.BandObservation)
}
BandObservation::BandObservation(const BandObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_value_, &from.frequency_value_,
    reinterpret_cast<char*>(&snr_) -
    reinterpret_cast<char*>(&frequency_value_) + sizeof(snr_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.BandObservation)
}

void BandObservation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&frequency_value_, 0, reinterpret_cast<char*>(&snr_) -
    reinterpret_cast<char*>(&frequency_value_) + sizeof(snr_));
}

BandObservation::~BandObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.BandObservation)
  SharedDtor();
}

void BandObservation::SharedDtor() {
}

void BandObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BandObservation::descriptor() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BandObservation& BandObservation::default_instance() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

BandObservation* BandObservation::New(::google::protobuf::Arena* arena) const {
  BandObservation* n = new BandObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BandObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.BandObservation)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&frequency_value_, 0, reinterpret_cast<char*>(&snr_) -
      reinterpret_cast<char*>(&frequency_value_) + sizeof(snr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BandObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.BandObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssBandID_IsValid(value)) {
            set_band_id(static_cast< ::apollo::drivers::gnss::GnssBandID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double frequency_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_frequency_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::PseudoType_IsValid(value)) {
            set_pseudo_type(static_cast< ::apollo::drivers::gnss::PseudoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pseudo_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_pseudo_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudo_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double carrier_phase = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_carrier_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrier_phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loss_lock_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_loss_lock_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_lock_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double doppler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_doppler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doppler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float snr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_snr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.gnss.BandObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.BandObservation)
  return false;
#undef DO_
}

void BandObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.BandObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->band_id(), output);
  }

  // optional double frequency_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frequency_value(), output);
  }

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pseudo_type(), output);
  }

  // optional double pseudo_range = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pseudo_range(), output);
  }

  // optional double carrier_phase = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->carrier_phase(), output);
  }

  // optional uint32 loss_lock_index = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->loss_lock_index(), output);
  }

  // optional double doppler = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->doppler(), output);
  }

  // optional float snr = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->snr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.BandObservation)
}

::google::protobuf::uint8* BandObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.BandObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->band_id(), target);
  }

  // optional double frequency_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frequency_value(), target);
  }

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pseudo_type(), target);
  }

  // optional double pseudo_range = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pseudo_range(), target);
  }

  // optional double carrier_phase = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->carrier_phase(), target);
  }

  // optional uint32 loss_lock_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->loss_lock_index(), target);
  }

  // optional double doppler = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->doppler(), target);
  }

  // optional float snr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->snr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.BandObservation)
  return target;
}

size_t BandObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.BandObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double frequency_value = 2;
    if (has_frequency_value()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
    if (has_band_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->band_id());
    }

    // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
    if (has_pseudo_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pseudo_type());
    }

    // optional double pseudo_range = 4;
    if (has_pseudo_range()) {
      total_size += 1 + 8;
    }

    // optional double carrier_phase = 5;
    if (has_carrier_phase()) {
      total_size += 1 + 8;
    }

    // optional double doppler = 7;
    if (has_doppler()) {
      total_size += 1 + 8;
    }

    // optional uint32 loss_lock_index = 6;
    if (has_loss_lock_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss_lock_index());
    }

    // optional float snr = 8;
    if (has_snr()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BandObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.BandObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const BandObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BandObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.BandObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.gnss.BandObservation)
    MergeFrom(*source);
  }
}

void BandObservation::MergeFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.BandObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      frequency_value_ = from.frequency_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      band_id_ = from.band_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      pseudo_type_ = from.pseudo_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      pseudo_range_ = from.pseudo_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      carrier_phase_ = from.carrier_phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      doppler_ = from.doppler_;
    }
    if (cached_has_bits & 0x00000040u) {
      loss_lock_index_ = from.loss_lock_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      snr_ = from.snr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BandObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BandObservation::CopyFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BandObservation::IsInitialized() const {
  return true;
}

void BandObservation::Swap(BandObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BandObservation::InternalSwap(BandObservation* other) {
  std::swap(frequency_value_, other->frequency_value_);
  std::swap(band_id_, other->band_id_);
  std::swap(pseudo_type_, other->pseudo_type_);
  std::swap(pseudo_range_, other->pseudo_range_);
  std::swap(carrier_phase_, other->carrier_phase_);
  std::swap(doppler_, other->doppler_);
  std::swap(loss_lock_index_, other->loss_lock_index_);
  std::swap(snr_, other->snr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BandObservation::GetMetadata() const {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BandObservation

// optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
bool BandObservation::has_band_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BandObservation::set_has_band_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BandObservation::clear_has_band_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BandObservation::clear_band_id() {
  band_id_ = 0;
  clear_has_band_id();
}
::apollo::drivers::gnss::GnssBandID BandObservation::band_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.band_id)
  return static_cast< ::apollo::drivers::gnss::GnssBandID >(band_id_);
}
void BandObservation::set_band_id(::apollo::drivers::gnss::GnssBandID value) {
  assert(::apollo::drivers::gnss::GnssBandID_IsValid(value));
  set_has_band_id();
  band_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.band_id)
}

// optional double frequency_value = 2;
bool BandObservation::has_frequency_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BandObservation::set_has_frequency_value() {
  _has_bits_[0] |= 0x00000001u;
}
void BandObservation::clear_has_frequency_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void BandObservation::clear_frequency_value() {
  frequency_value_ = 0;
  clear_has_frequency_value();
}
double BandObservation::frequency_value() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.frequency_value)
  return frequency_value_;
}
void BandObservation::set_frequency_value(double value) {
  set_has_frequency_value();
  frequency_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.frequency_value)
}

// optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
bool BandObservation::has_pseudo_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BandObservation::set_has_pseudo_type() {
  _has_bits_[0] |= 0x00000004u;
}
void BandObservation::clear_has_pseudo_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void BandObservation::clear_pseudo_type() {
  pseudo_type_ = 0;
  clear_has_pseudo_type();
}
::apollo::drivers::gnss::PseudoType BandObservation::pseudo_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.pseudo_type)
  return static_cast< ::apollo::drivers::gnss::PseudoType >(pseudo_type_);
}
void BandObservation::set_pseudo_type(::apollo::drivers::gnss::PseudoType value) {
  assert(::apollo::drivers::gnss::PseudoType_IsValid(value));
  set_has_pseudo_type();
  pseudo_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.pseudo_type)
}

// optional double pseudo_range = 4;
bool BandObservation::has_pseudo_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BandObservation::set_has_pseudo_range() {
  _has_bits_[0] |= 0x00000008u;
}
void BandObservation::clear_has_pseudo_range() {
  _has_bits_[0] &= ~0x00000008u;
}
void BandObservation::clear_pseudo_range() {
  pseudo_range_ = 0;
  clear_has_pseudo_range();
}
double BandObservation::pseudo_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.pseudo_range)
  return pseudo_range_;
}
void BandObservation::set_pseudo_range(double value) {
  set_has_pseudo_range();
  pseudo_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.pseudo_range)
}

// optional double carrier_phase = 5;
bool BandObservation::has_carrier_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BandObservation::set_has_carrier_phase() {
  _has_bits_[0] |= 0x00000010u;
}
void BandObservation::clear_has_carrier_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
void BandObservation::clear_carrier_phase() {
  carrier_phase_ = 0;
  clear_has_carrier_phase();
}
double BandObservation::carrier_phase() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.carrier_phase)
  return carrier_phase_;
}
void BandObservation::set_carrier_phase(double value) {
  set_has_carrier_phase();
  carrier_phase_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.carrier_phase)
}

// optional uint32 loss_lock_index = 6;
bool BandObservation::has_loss_lock_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BandObservation::set_has_loss_lock_index() {
  _has_bits_[0] |= 0x00000040u;
}
void BandObservation::clear_has_loss_lock_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void BandObservation::clear_loss_lock_index() {
  loss_lock_index_ = 0u;
  clear_has_loss_lock_index();
}
::google::protobuf::uint32 BandObservation::loss_lock_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.loss_lock_index)
  return loss_lock_index_;
}
void BandObservation::set_loss_lock_index(::google::protobuf::uint32 value) {
  set_has_loss_lock_index();
  loss_lock_index_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.loss_lock_index)
}

// optional double doppler = 7;
bool BandObservation::has_doppler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BandObservation::set_has_doppler() {
  _has_bits_[0] |= 0x00000020u;
}
void BandObservation::clear_has_doppler() {
  _has_bits_[0] &= ~0x00000020u;
}
void BandObservation::clear_doppler() {
  doppler_ = 0;
  clear_has_doppler();
}
double BandObservation::doppler() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.doppler)
  return doppler_;
}
void BandObservation::set_doppler(double value) {
  set_has_doppler();
  doppler_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.doppler)
}

// optional float snr = 8;
bool BandObservation::has_snr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BandObservation::set_has_snr() {
  _has_bits_[0] |= 0x00000080u;
}
void BandObservation::clear_has_snr() {
  _has_bits_[0] &= ~0x00000080u;
}
void BandObservation::clear_snr() {
  snr_ = 0;
  clear_has_snr();
}
float BandObservation::snr() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.snr)
  return snr_;
}
void BandObservation::set_snr(float value) {
  set_has_snr();
  snr_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.snr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SatelliteObservation::kSatPrnFieldNumber;
const int SatelliteObservation::kSatSysFieldNumber;
const int SatelliteObservation::kBandObsNumFieldNumber;
const int SatelliteObservation::kBandObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SatelliteObservation::SatelliteObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.SatelliteObservation)
}
SatelliteObservation::SatelliteObservation(const SatelliteObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      band_obs_(from.band_obs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sat_prn_, &from.sat_prn_,
    reinterpret_cast<char*>(&sat_sys_) -
    reinterpret_cast<char*>(&sat_prn_) + sizeof(sat_sys_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.SatelliteObservation)
}

void SatelliteObservation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sat_prn_, 0, reinterpret_cast<char*>(&band_obs_num_) -
    reinterpret_cast<char*>(&sat_prn_) + sizeof(band_obs_num_));
  sat_sys_ = 1;
}

SatelliteObservation::~SatelliteObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.SatelliteObservation)
  SharedDtor();
}

void SatelliteObservation::SharedDtor() {
}

void SatelliteObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatelliteObservation::descriptor() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SatelliteObservation& SatelliteObservation::default_instance() {
  protobuf_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

SatelliteObservation* SatelliteObservation::New(::google::protobuf::Arena* arena) const {
  SatelliteObservation* n = new SatelliteObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SatelliteObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.SatelliteObservation)
  band_obs_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&sat_prn_, 0, reinterpret_cast<char*>(&band_obs_num_) -
      reinterpret_cast<char*>(&sat_prn_) + sizeof(band_obs_num_));
    sat_sys_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SatelliteObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.SatelliteObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sat_prn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sat_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_sat_sys(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 band_obs_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_band_obs_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &band_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_band_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.gnss.SatelliteObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.SatelliteObservation)
  return false;
#undef DO_
}

void SatelliteObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.SatelliteObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sat_prn(), output);
  }

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sat_sys(), output);
  }

  // optional uint32 band_obs_num = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->band_obs_num(), output);
  }

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0, n = this->band_obs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->band_obs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.SatelliteObservation)
}

::google::protobuf::uint8* SatelliteObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.SatelliteObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sat_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sat_sys(), target);
  }

  // optional uint32 band_obs_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->band_obs_num(), target);
  }

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0, n = this->band_obs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->band_obs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.SatelliteObservation)
  return target;
}

size_t SatelliteObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.SatelliteObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  {
    unsigned int count = this->band_obs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->band_obs(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 sat_prn = 1;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional uint32 band_obs_num = 3;
    if (has_band_obs_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->band_obs_num());
    }

    // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
    if (has_sat_sys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sat_sys());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatelliteObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.SatelliteObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const SatelliteObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SatelliteObservation>(
          &from);
