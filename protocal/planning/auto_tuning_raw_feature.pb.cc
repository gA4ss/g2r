// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/auto_tuning_raw_feature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/auto_tuning_raw_feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
namespace autotuning {

namespace {

const ::google::protobuf::Descriptor* PathPointRawFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPointRawFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedPointRawFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPointRawFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedPointRawFeature_ObjectDecisionFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPointRawFeature_ObjectDecisionFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleSTRawData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleSTRawData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleSTRawData_STPointPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleSTRawData_STPointPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleSTRawData_ObstacleSTData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleSTRawData_ObstacleSTData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryPointRawFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryPointRawFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryRawFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryRawFeature_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/auto_tuning_raw_feature.proto");
  GOOGLE_CHECK(file != NULL);
  PathPointRawFeature_descriptor_ = file->message_type(0);
  static const int PathPointRawFeature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, cartesian_coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, frenet_coord_),
  };
  PathPointRawFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPointRawFeature_descriptor_,
      PathPointRawFeature::default_instance_,
      PathPointRawFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathPointRawFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, _internal_metadata_),
      -1);
  SpeedPointRawFeature_descriptor_ = file->message_type(1);
  static const int SpeedPointRawFeature_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, speed_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, overtake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, virtual_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, collision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, nudge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, sidepass_front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, sidepass_rear_),
  };
  SpeedPointRawFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeedPointRawFeature_descriptor_,
      SpeedPointRawFeature::default_instance_,
      SpeedPointRawFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpeedPointRawFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, _internal_metadata_),
      -1);
  SpeedPointRawFeature_ObjectDecisionFeature_descriptor_ = SpeedPointRawFeature_descriptor_->nested_type(0);
  static const int SpeedPointRawFeature_ObjectDecisionFeature_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, relative_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, relative_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, relative_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, speed_),
  };
  SpeedPointRawFeature_ObjectDecisionFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeedPointRawFeature_ObjectDecisionFeature_descriptor_,
      SpeedPointRawFeature_ObjectDecisionFeature::default_instance_,
      SpeedPointRawFeature_ObjectDecisionFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpeedPointRawFeature_ObjectDecisionFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, _internal_metadata_),
      -1);
  ObstacleSTRawData_descriptor_ = file->message_type(2);
  static const int ObstacleSTRawData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, obstacle_st_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, obstacle_st_nudge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, obstacle_st_sidepass_),
  };
  ObstacleSTRawData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObstacleSTRawData_descriptor_,
      ObstacleSTRawData::default_instance_,
      ObstacleSTRawData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObstacleSTRawData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, _internal_metadata_),
      -1);
  ObstacleSTRawData_STPointPair_descriptor_ = ObstacleSTRawData_descriptor_->nested_type(0);
  static const int ObstacleSTRawData_STPointPair_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, s_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, s_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, l_),
  };
  ObstacleSTRawData_STPointPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObstacleSTRawData_STPointPair_descriptor_,
      ObstacleSTRawData_STPointPair::default_instance_,
      ObstacleSTRawData_STPointPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObstacleSTRawData_STPointPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, _internal_metadata_),
      -1);
  ObstacleSTRawData_ObstacleSTData_descriptor_ = ObstacleSTRawData_descriptor_->nested_type(1);
  static const int ObstacleSTRawData_ObstacleSTData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, is_virtual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, distribution_),
  };
  ObstacleSTRawData_ObstacleSTData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObstacleSTRawData_ObstacleSTData_descriptor_,
      ObstacleSTRawData_ObstacleSTData::default_instance_,
      ObstacleSTRawData_ObstacleSTData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObstacleSTRawData_ObstacleSTData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, _internal_metadata_),
      -1);
  TrajectoryPointRawFeature_descriptor_ = file->message_type(3);
  static const int TrajectoryPointRawFeature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, path_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, speed_feature_),
  };
  TrajectoryPointRawFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryPointRawFeature_descriptor_,
      TrajectoryPointRawFeature::default_instance_,
      TrajectoryPointRawFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrajectoryPointRawFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, _internal_metadata_),
      -1);
  TrajectoryRawFeature_descriptor_ = file->message_type(4);
  static const int TrajectoryRawFeature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, point_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, st_raw_data_),
  };
  TrajectoryRawFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryRawFeature_descriptor_,
      TrajectoryRawFeature::default_instance_,
      TrajectoryRawFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrajectoryRawFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPointRawFeature_descriptor_, &PathPointRawFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeedPointRawFeature_descriptor_, &SpeedPointRawFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeedPointRawFeature_ObjectDecisionFeature_descriptor_, &SpeedPointRawFeature_ObjectDecisionFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObstacleSTRawData_descriptor_, &ObstacleSTRawData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObstacleSTRawData_STPointPair_descriptor_, &ObstacleSTRawData_STPointPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObstacleSTRawData_ObstacleSTData_descriptor_, &ObstacleSTRawData_ObstacleSTData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryPointRawFeature_descriptor_, &TrajectoryPointRawFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryRawFeature_descriptor_, &TrajectoryRawFeature::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  delete PathPointRawFeature::default_instance_;
  delete PathPointRawFeature_reflection_;
  delete SpeedPointRawFeature::default_instance_;
  delete SpeedPointRawFeature_reflection_;
  delete SpeedPointRawFeature_ObjectDecisionFeature::default_instance_;
  delete SpeedPointRawFeature_ObjectDecisionFeature_reflection_;
  delete ObstacleSTRawData::default_instance_;
  delete ObstacleSTRawData_reflection_;
  delete ObstacleSTRawData_STPointPair::default_instance_;
  delete ObstacleSTRawData_STPointPair_reflection_;
  delete ObstacleSTRawData_ObstacleSTData::default_instance_;
  delete ObstacleSTRawData_ObstacleSTData_reflection_;
  delete TrajectoryPointRawFeature::default_instance_;
  delete TrajectoryPointRawFeature_reflection_;
  delete TrajectoryRawFeature::default_instance_;
  delete TrajectoryRawFeature_reflection_;
}

void protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&planning/auto_tuning_raw_feature.proto"
    "\022\032apollo.planning.autotuning\032\026common/pnc"
    "_point.proto\"\177\n\023PathPointRawFeature\0221\n\017c"
    "artesian_coord\030\001 \001(\0132\030.apollo.common.Pat"
    "hPoint\0225\n\014frenet_coord\030\002 \001(\0132\037.apollo.co"
    "mmon.FrenetFramePoint\"\255\007\n\024SpeedPointRawF"
    "eature\022\t\n\001s\030\001 \001(\001\022\t\n\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022"
    "\t\n\001a\030\004 \001(\001\022\t\n\001j\030\005 \001(\001\022\023\n\013speed_limit\030\006 \001"
    "(\001\022V\n\006follow\030\n \003(\0132F.apollo.planning.aut"
    "otuning.SpeedPointRawFeature.ObjectDecis"
    "ionFeature\022X\n\010overtake\030\013 \003(\0132F.apollo.pl"
    "anning.autotuning.SpeedPointRawFeature.O"
    "bjectDecisionFeature\022`\n\020virtual_decision"
    "\030\r \003(\0132F.apollo.planning.autotuning.Spee"
    "dPointRawFeature.ObjectDecisionFeature\022T"
    "\n\004stop\030\016 \003(\0132F.apollo.planning.autotunin"
    "g.SpeedPointRawFeature.ObjectDecisionFea"
    "ture\022Y\n\tcollision\030\017 \003(\0132F.apollo.plannin"
    "g.autotuning.SpeedPointRawFeature.Object"
    "DecisionFeature\022U\n\005nudge\030\014 \003(\0132F.apollo."
    "planning.autotuning.SpeedPointRawFeature"
    ".ObjectDecisionFeature\022^\n\016sidepass_front"
    "\030\020 \003(\0132F.apollo.planning.autotuning.Spee"
    "dPointRawFeature.ObjectDecisionFeature\022]"
    "\n\rsidepass_rear\030\021 \003(\0132F.apollo.planning."
    "autotuning.SpeedPointRawFeature.ObjectDe"
    "cisionFeature\032n\n\025ObjectDecisionFeature\022\n"
    "\n\002id\030\001 \001(\005\022\022\n\nrelative_s\030\002 \001(\001\022\022\n\nrelati"
    "ve_l\030\003 \001(\001\022\022\n\nrelative_v\030\004 \001(\001\022\r\n\005speed\030"
    "\005 \001(\001\"\337\004\n\021ObstacleSTRawData\022V\n\020obstacle_"
    "st_data\030\001 \003(\0132<.apollo.planning.autotuni"
    "ng.ObstacleSTRawData.ObstacleSTData\022W\n\021o"
    "bstacle_st_nudge\030\002 \003(\0132<.apollo.planning"
    ".autotuning.ObstacleSTRawData.ObstacleST"
    "Data\022Z\n\024obstacle_st_sidepass\030\003 \003(\0132<.apo"
    "llo.planning.autotuning.ObstacleSTRawDat"
    "a.ObstacleSTData\032I\n\013STPointPair\022\017\n\007s_low"
    "er\030\001 \001(\001\022\017\n\007s_upper\030\002 \001(\001\022\t\n\001t\030\003 \001(\001\022\r\n\001"
    "l\030\004 \001(\001:\00210\032\361\001\n\016ObstacleSTData\022\n\n\002id\030\001 \001"
    "(\005\022\r\n\005speed\030\002 \001(\001\022\022\n\nis_virtual\030\003 \001(\010\022\023\n"
    "\013probability\030\004 \001(\001\022J\n\007polygon\030\010 \003(\01329.ap"
    "ollo.planning.autotuning.ObstacleSTRawDa"
    "ta.STPointPair\022O\n\014distribution\030\t \003(\01329.a"
    "pollo.planning.autotuning.ObstacleSTRawD"
    "ata.STPointPair\"\253\001\n\031TrajectoryPointRawFe"
    "ature\022E\n\014path_feature\030\001 \001(\0132/.apollo.pla"
    "nning.autotuning.PathPointRawFeature\022G\n\r"
    "speed_feature\030\002 \001(\01320.apollo.planning.au"
    "totuning.SpeedPointRawFeature\"\250\001\n\024Trajec"
    "toryRawFeature\022L\n\rpoint_feature\030\001 \003(\01325."
    "apollo.planning.autotuning.TrajectoryPoi"
    "ntRawFeature\022B\n\013st_raw_data\030\002 \001(\0132-.apol"
    "lo.planning.autotuning.ObstacleSTRawData", 2120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/auto_tuning_raw_feature.proto", &protobuf_RegisterTypes);
  PathPointRawFeature::default_instance_ = new PathPointRawFeature();
  SpeedPointRawFeature::default_instance_ = new SpeedPointRawFeature();
  SpeedPointRawFeature_ObjectDecisionFeature::default_instance_ = new SpeedPointRawFeature_ObjectDecisionFeature();
  ObstacleSTRawData::default_instance_ = new ObstacleSTRawData();
  ObstacleSTRawData_STPointPair::default_instance_ = new ObstacleSTRawData_STPointPair();
  ObstacleSTRawData_ObstacleSTData::default_instance_ = new ObstacleSTRawData_ObstacleSTData();
  TrajectoryPointRawFeature::default_instance_ = new TrajectoryPointRawFeature();
  TrajectoryRawFeature::default_instance_ = new TrajectoryRawFeature();
  PathPointRawFeature::default_instance_->InitAsDefaultInstance();
  SpeedPointRawFeature::default_instance_->InitAsDefaultInstance();
  SpeedPointRawFeature_ObjectDecisionFeature::default_instance_->InitAsDefaultInstance();
  ObstacleSTRawData::default_instance_->InitAsDefaultInstance();
  ObstacleSTRawData_STPointPair::default_instance_->InitAsDefaultInstance();
  ObstacleSTRawData_ObstacleSTData::default_instance_->InitAsDefaultInstance();
  TrajectoryPointRawFeature::default_instance_->InitAsDefaultInstance();
  TrajectoryRawFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto {
  StaticDescriptorInitializer_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
    protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  }
} static_descriptor_initializer_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointRawFeature::kCartesianCoordFieldNumber;
const int PathPointRawFeature::kFrenetCoordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointRawFeature::PathPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointRawFeature)
}

void PathPointRawFeature::InitAsDefaultInstance() {
  cartesian_coord_ = const_cast< ::apollo::common::PathPoint*>(&::apollo::common::PathPoint::default_instance());
  frenet_coord_ = const_cast< ::apollo::common::FrenetFramePoint*>(&::apollo::common::FrenetFramePoint::default_instance());
}

PathPointRawFeature::PathPointRawFeature(const PathPointRawFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointRawFeature)
}

void PathPointRawFeature::SharedCtor() {
  _cached_size_ = 0;
  cartesian_coord_ = NULL;
  frenet_coord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPointRawFeature::~PathPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointRawFeature)
  SharedDtor();
}

void PathPointRawFeature::SharedDtor() {
  if (this != default_instance_) {
    delete cartesian_coord_;
    delete frenet_coord_;
  }
}

void PathPointRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointRawFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPointRawFeature_descriptor_;
}

const PathPointRawFeature& PathPointRawFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

PathPointRawFeature* PathPointRawFeature::default_instance_ = NULL;

PathPointRawFeature* PathPointRawFeature::New(::google::protobuf::Arena* arena) const {
  PathPointRawFeature* n = new PathPointRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointRawFeature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cartesian_coord()) {
      if (cartesian_coord_ != NULL) cartesian_coord_->::apollo::common::PathPoint::Clear();
    }
    if (has_frenet_coord()) {
      if (frenet_coord_ != NULL) frenet_coord_->::apollo::common::FrenetFramePoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PathPoint cartesian_coord = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cartesian_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frenet_coord;
        break;
      }

      // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
      case 2: {
        if (tag == 18) {
         parse_frenet_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frenet_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointRawFeature)
  return false;
#undef DO_
}

void PathPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointRawFeature)
  // optional .apollo.common.PathPoint cartesian_coord = 1;
  if (has_cartesian_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cartesian_coord_, output);
  }

  // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
  if (has_frenet_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->frenet_coord_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointRawFeature)
}

::google::protobuf::uint8* PathPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointRawFeature)
  // optional .apollo.common.PathPoint cartesian_coord = 1;
  if (has_cartesian_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cartesian_coord_, false, target);
  }

  // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
  if (has_frenet_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->frenet_coord_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointRawFeature)
  return target;
}

int PathPointRawFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointRawFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.PathPoint cartesian_coord = 1;
    if (has_cartesian_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cartesian_coord_);
    }

    // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
    if (has_frenet_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frenet_coord_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPointRawFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointRawFeature)
    MergeFrom(*source);
  }
}

void PathPointRawFeature::MergeFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cartesian_coord()) {
      mutable_cartesian_coord()->::apollo::common::PathPoint::MergeFrom(from.cartesian_coord());
    }
    if (from.has_frenet_coord()) {
      mutable_frenet_coord()->::apollo::common::FrenetFramePoint::MergeFrom(from.frenet_coord());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointRawFeature::CopyFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointRawFeature::IsInitialized() const {

  return true;
}

void PathPointRawFeature::Swap(PathPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointRawFeature::InternalSwap(PathPointRawFeature* other) {
  std::swap(cartesian_coord_, other->cartesian_coord_);
  std::swap(frenet_coord_, other->frenet_coord_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointRawFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPointRawFeature_descriptor_;
  metadata.reflection = PathPointRawFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPointRawFeature

// optional .apollo.common.PathPoint cartesian_coord = 1;
bool PathPointRawFeature::has_cartesian_coord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPointRawFeature::set_has_cartesian_coord() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPointRawFeature::clear_has_cartesian_coord() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPointRawFeature::clear_cartesian_coord() {
  if (cartesian_coord_ != NULL) cartesian_coord_->::apollo::common::PathPoint::Clear();
  clear_has_cartesian_coord();
}
const ::apollo::common::PathPoint& PathPointRawFeature::cartesian_coord() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
  return cartesian_coord_ != NULL ? *cartesian_coord_ : *default_instance_->cartesian_coord_;
}
::apollo::common::PathPoint* PathPointRawFeature::mutable_cartesian_coord() {
  set_has_cartesian_coord();
  if (cartesian_coord_ == NULL) {
    cartesian_coord_ = new ::apollo::common::PathPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
  return cartesian_coord_;
}
::apollo::common::PathPoint* PathPointRawFeature::release_cartesian_coord() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
  clear_has_cartesian_coord();
  ::apollo::common::PathPoint* temp = cartesian_coord_;
  cartesian_coord_ = NULL;
  return temp;
}
void PathPointRawFeature::set_allocated_cartesian_coord(::apollo::common::PathPoint* cartesian_coord) {
  delete cartesian_coord_;
  cartesian_coord_ = cartesian_coord;
  if (cartesian_coord) {
    set_has_cartesian_coord();
  } else {
    clear_has_cartesian_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
}

// optional .apollo.common.FrenetFramePoint frenet_coord = 2;
bool PathPointRawFeature::has_frenet_coord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathPointRawFeature::set_has_frenet_coord() {
  _has_bits_[0] |= 0x00000002u;
}
void PathPointRawFeature::clear_has_frenet_coord() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathPointRawFeature::clear_frenet_coord() {
  if (frenet_coord_ != NULL) frenet_coord_->::apollo::common::FrenetFramePoint::Clear();
  clear_has_frenet_coord();
}
const ::apollo::common::FrenetFramePoint& PathPointRawFeature::frenet_coord() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
  return frenet_coord_ != NULL ? *frenet_coord_ : *default_instance_->frenet_coord_;
}
::apollo::common::FrenetFramePoint* PathPointRawFeature::mutable_frenet_coord() {
  set_has_frenet_coord();
  if (frenet_coord_ == NULL) {
    frenet_coord_ = new ::apollo::common::FrenetFramePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
  return frenet_coord_;
}
::apollo::common::FrenetFramePoint* PathPointRawFeature::release_frenet_coord() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
  clear_has_frenet_coord();
  ::apollo::common::FrenetFramePoint* temp = frenet_coord_;
  frenet_coord_ = NULL;
  return temp;
}
void PathPointRawFeature::set_allocated_frenet_coord(::apollo::common::FrenetFramePoint* frenet_coord) {
  delete frenet_coord_;
  frenet_coord_ = frenet_coord;
  if (frenet_coord) {
    set_has_frenet_coord();
  } else {
    clear_has_frenet_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointRawFeature_ObjectDecisionFeature::kIdFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeSFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeLFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeVFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

void SpeedPointRawFeature_ObjectDecisionFeature::InitAsDefaultInstance() {
}

SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature(const SpeedPointRawFeature_ObjectDecisionFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  relative_s_ = 0;
  relative_l_ = 0;
  relative_v_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedPointRawFeature_ObjectDecisionFeature::~SpeedPointRawFeature_ObjectDecisionFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  SharedDtor();
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPointRawFeature_ObjectDecisionFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPointRawFeature_ObjectDecisionFeature_descriptor_;
}

const SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature_ObjectDecisionFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature_ObjectDecisionFeature::default_instance_ = NULL;

SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature_ObjectDecisionFeature::New(::google::protobuf::Arena* arena) const {
  SpeedPointRawFeature_ObjectDecisionFeature* n = new SpeedPointRawFeature_ObjectDecisionFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPointRawFeature_ObjectDecisionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpeedPointRawFeature_ObjectDecisionFeature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpeedPointRawFeature_ObjectDecisionFeature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(relative_s_, id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpeedPointRawFeature_ObjectDecisionFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_relative_s;
        break;
      }

      // optional double relative_s = 2;
      case 2: {
        if (tag == 17) {
         parse_relative_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_s_)));
          set_has_relative_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_relative_l;
        break;
      }

      // optional double relative_l = 3;
      case 3: {
        if (tag == 25) {
         parse_relative_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_l_)));
          set_has_relative_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_relative_v;
        break;
      }

      // optional double relative_v = 4;
      case 4: {
        if (tag == 33) {
         parse_relative_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_v_)));
          set_has_relative_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_speed;
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (tag == 41) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return false;
#undef DO_
}

void SpeedPointRawFeature_ObjectDecisionFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double relative_s = 2;
  if (has_relative_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->relative_s(), output);
  }

  // optional double relative_l = 3;
  if (has_relative_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->relative_l(), output);
  }

  // optional double relative_v = 4;
  if (has_relative_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_v(), output);
  }

  // optional double speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

::google::protobuf::uint8* SpeedPointRawFeature_ObjectDecisionFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double relative_s = 2;
  if (has_relative_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->relative_s(), target);
  }

  // optional double relative_l = 3;
  if (has_relative_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->relative_l(), target);
  }

  // optional double relative_v = 4;
  if (has_relative_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_v(), target);
  }

  // optional double speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return target;
}

int SpeedPointRawFeature_ObjectDecisionFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional double relative_s = 2;
    if (has_relative_s()) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 3;
    if (has_relative_l()) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 4;
    if (has_relative_v()) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeedPointRawFeature_ObjectDecisionFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointRawFeature_ObjectDecisionFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_relative_s()) {
      set_relative_s(from.relative_s());
    }
    if (from.has_relative_l()) {
      set_relative_l(from.relative_l());
    }
    if (from.has_relative_v()) {
      set_relative_v(from.relative_v());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature_ObjectDecisionFeature::IsInitialized() const {

  return true;
}

void SpeedPointRawFeature_ObjectDecisionFeature::Swap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointRawFeature_ObjectDecisionFeature::InternalSwap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  std::swap(id_, other->id_);
  std::swap(relative_s_, other->relative_s_);
  std::swap(relative_l_, other->relative_l_);
  std::swap(relative_v_, other->relative_v_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPointRawFeature_ObjectDecisionFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPointRawFeature_ObjectDecisionFeature_descriptor_;
  metadata.reflection = SpeedPointRawFeature_ObjectDecisionFeature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointRawFeature::kSFieldNumber;
const int SpeedPointRawFeature::kTFieldNumber;
const int SpeedPointRawFeature::kVFieldNumber;
const int SpeedPointRawFeature::kAFieldNumber;
const int SpeedPointRawFeature::kJFieldNumber;
const int SpeedPointRawFeature::kSpeedLimitFieldNumber;
const int SpeedPointRawFeature::kFollowFieldNumber;
const int SpeedPointRawFeature::kOvertakeFieldNumber;
const int SpeedPointRawFeature::kVirtualDecisionFieldNumber;
const int SpeedPointRawFeature::kStopFieldNumber;
const int SpeedPointRawFeature::kCollisionFieldNumber;
const int SpeedPointRawFeature::kNudgeFieldNumber;
const int SpeedPointRawFeature::kSidepassFrontFieldNumber;
const int SpeedPointRawFeature::kSidepassRearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointRawFeature::SpeedPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}

void SpeedPointRawFeature::InitAsDefaultInstance() {
}

SpeedPointRawFeature::SpeedPointRawFeature(const SpeedPointRawFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}

void SpeedPointRawFeature::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  t_ = 0;
  v_ = 0;
  a_ = 0;
  j_ = 0;
  speed_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedPointRawFeature::~SpeedPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature)
  SharedDtor();
}

void SpeedPointRawFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedPointRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPointRawFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPointRawFeature_descriptor_;
}

const SpeedPointRawFeature& SpeedPointRawFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

SpeedPointRawFeature* SpeedPointRawFeature::default_instance_ = NULL;

SpeedPointRawFeature* SpeedPointRawFeature::New(::google::protobuf::Arena* arena) const {
  SpeedPointRawFeature* n = new SpeedPointRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpeedPointRawFeature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpeedPointRawFeature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(s_, speed_limit_);
  }

#undef ZR_HELPER_
#undef ZR_

  follow_.Clear();
  overtake_.Clear();
  virtual_decision_.Clear();
  stop_.Clear();
  collision_.Clear();
  nudge_.Clear();
  sidepass_front_.Clear();
  sidepass_rear_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpeedPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t;
        break;
      }

      // optional double t = 2;
      case 2: {
        if (tag == 17) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_v;
        break;
      }

      // optional double v = 3;
      case 3: {
        if (tag == 25) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_a;
        break;
      }

      // optional double a = 4;
      case 4: {
        if (tag == 33) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_j;
        break;
      }

      // optional double j = 5;
      case 5: {
        if (tag == 41) {
         parse_j:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j_)));
          set_has_j();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_speed_limit;
        break;
      }

      // optional double speed_limit = 6;
      case 6: {
        if (tag == 49) {
         parse_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
          set_has_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_follow;
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
      case 10: {
        if (tag == 82) {
         parse_follow:
          DO_(input->IncrementRecursionDepth());
         parse_loop_follow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_follow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_follow;
        if (input->ExpectTag(90)) goto parse_loop_overtake;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_overtake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_overtake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_overtake;
        if (input->ExpectTag(98)) goto parse_loop_nudge;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nudge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nudge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_nudge;
        if (input->ExpectTag(106)) goto parse_loop_virtual_decision;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
      case 13: {
        if (tag == 106) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_virtual_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_virtual_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_virtual_decision;
        if (input->ExpectTag(114)) goto parse_loop_stop;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_stop;
        if (input->ExpectTag(122)) goto parse_loop_collision;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_collision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_collision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_collision;
        if (input->ExpectTag(130)) goto parse_loop_sidepass_front;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sidepass_front:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sidepass_front()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_sidepass_front;
        if (input->ExpectTag(138)) goto parse_loop_sidepass_rear;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
      case 17: {
        if (tag == 138) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sidepass_rear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sidepass_rear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_sidepass_rear;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointRawFeature)
  return false;
#undef DO_
}

void SpeedPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointRawFeature)
  // optional double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional double j = 5;
  if (has_j()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->j(), output);
  }

  // optional double speed_limit = 6;
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_limit(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned int i = 0, n = this->follow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->follow(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned int i = 0, n = this->overtake_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->overtake(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned int i = 0, n = this->nudge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->nudge(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned int i = 0, n = this->virtual_decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->virtual_decision(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned int i = 0, n = this->stop_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->stop(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->collision(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned int i = 0, n = this->sidepass_front_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sidepass_front(i), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned int i = 0, n = this->sidepass_rear_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->sidepass_rear(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointRawFeature)
}

::google::protobuf::uint8* SpeedPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature)
  // optional double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional double j = 5;
  if (has_j()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->j(), target);
  }

  // optional double speed_limit = 6;
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_limit(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned int i = 0, n = this->follow_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->follow(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned int i = 0, n = this->overtake_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->overtake(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned int i = 0, n = this->nudge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->nudge(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned int i = 0, n = this->virtual_decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->virtual_decision(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned int i = 0, n = this->stop_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->stop(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->collision(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned int i = 0, n = this->sidepass_front_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->sidepass_front(i), false, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned int i = 0, n = this->sidepass_rear_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->sidepass_rear(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature)
  return target;
}

int SpeedPointRawFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double j = 5;
    if (has_j()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  total_size += 1 * this->follow_size();
  for (int i = 0; i < this->follow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->follow(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  total_size += 1 * this->overtake_size();
  for (int i = 0; i < this->overtake_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->overtake(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  total_size += 1 * this->virtual_decision_size();
  for (int i = 0; i < this->virtual_decision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtual_decision(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  total_size += 1 * this->stop_size();
  for (int i = 0; i < this->stop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  total_size += 1 * this->collision_size();
  for (int i = 0; i < this->collision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collision(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  total_size += 1 * this->nudge_size();
  for (int i = 0; i < this->nudge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nudge(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  total_size += 2 * this->sidepass_front_size();
  for (int i = 0; i < this->sidepass_front_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidepass_front(i));
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  total_size += 2 * this->sidepass_rear_size();
  for (int i = 0; i < this->sidepass_rear_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidepass_rear(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeedPointRawFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointRawFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature::MergeFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  follow_.MergeFrom(from.follow_);
  overtake_.MergeFrom(from.overtake_);
  virtual_decision_.MergeFrom(from.virtual_decision_);
  stop_.MergeFrom(from.stop_);
  collision_.MergeFrom(from.collision_);
  nudge_.MergeFrom(from.nudge_);
  sidepass_front_.MergeFrom(from.sidepass_front_);
  sidepass_rear_.MergeFrom(from.sidepass_rear_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_j()) {
      set_j(from.j());
    }
    if (from.has_speed_limit()) {
      set_speed_limit(from.speed_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpeedPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature::CopyFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature::IsInitialized() const {

  return true;
}

void SpeedPointRawFeature::Swap(SpeedPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointRawFeature::InternalSwap(SpeedPointRawFeature* other) {
  std::swap(s_, other->s_);
  std::swap(t_, other->t_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(j_, other->j_);
  std::swap(speed_limit_, other->speed_limit_);
  follow_.UnsafeArenaSwap(&other->follow_);
  overtake_.UnsafeArenaSwap(&other->overtake_);
  virtual_decision_.UnsafeArenaSwap(&other->virtual_decision_);
  stop_.UnsafeArenaSwap(&other->stop_);
  collision_.UnsafeArenaSwap(&other->collision_);
  nudge_.UnsafeArenaSwap(&other->nudge_);
  sidepass_front_.UnsafeArenaSwap(&other->sidepass_front_);
  sidepass_rear_.UnsafeArenaSwap(&other->sidepass_rear_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPointRawFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPointRawFeature_descriptor_;
  metadata.reflection = SpeedPointRawFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPointRawFeature_ObjectDecisionFeature

// optional int32 id = 1;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 SpeedPointRawFeature_ObjectDecisionFeature::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.id)
  return id_;
}
 void SpeedPointRawFeature_ObjectDecisionFeature::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.id)
}

// optional double relative_s = 2;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_s() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_s() {
  relative_s_ = 0;
  clear_has_relative_s();
}
 double SpeedPointRawFeature_ObjectDecisionFeature::relative_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_s)
  return relative_s_;
}
 void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_s(double value) {
  set_has_relative_s();
  relative_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_s)
}

// optional double relative_l = 3;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_l() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_l() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_l() {
  relative_l_ = 0;
  clear_has_relative_l();
}
 double SpeedPointRawFeature_ObjectDecisionFeature::relative_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_l)
  return relative_l_;
}
 void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_l(double value) {
  set_has_relative_l();
  relative_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_l)
}

// optional double relative_v = 4;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_v() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_v() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_v() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_v() {
  relative_v_ = 0;
  clear_has_relative_v();
}
 double SpeedPointRawFeature_ObjectDecisionFeature::relative_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_v)
  return relative_v_;
}
 void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_v(double value) {
  set_has_relative_v();
  relative_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_v)
}

// optional double speed = 5;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 double SpeedPointRawFeature_ObjectDecisionFeature::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.speed)
  return speed_;
}
 void SpeedPointRawFeature_ObjectDecisionFeature::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.speed)
}

// -------------------------------------------------------------------

// SpeedPointRawFeature

// optional double s = 1;
bool SpeedPointRawFeature::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPointRawFeature::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPointRawFeature::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPointRawFeature::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double SpeedPointRawFeature::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.s)
  return s_;
}
 void SpeedPointRawFeature::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.s)
}

// optional double t = 2;
bool SpeedPointRawFeature::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPointRawFeature::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPointRawFeature::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPointRawFeature::clear_t() {
  t_ = 0;
  clear_has_t();
}
 double SpeedPointRawFeature::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.t)
  return t_;
}
 void SpeedPointRawFeature::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.t)
}

// optional double v = 3;
bool SpeedPointRawFeature::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPointRawFeature::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPointRawFeature::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPointRawFeature::clear_v() {
  v_ = 0;
  clear_has_v();
}
 double SpeedPointRawFeature::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.v)
  return v_;
}
 void SpeedPointRawFeature::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.v)
}

// optional double a = 4;
bool SpeedPointRawFeature::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPointRawFeature::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPointRawFeature::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPointRawFeature::clear_a() {
  a_ = 0;
  clear_has_a();
}
 double SpeedPointRawFeature::a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.a)
  return a_;
}
 void SpeedPointRawFeature::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.a)
}

// optional double j = 5;
bool SpeedPointRawFeature::has_j() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPointRawFeature::set_has_j() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPointRawFeature::clear_has_j() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPointRawFeature::clear_j() {
  j_ = 0;
  clear_has_j();
}
 double SpeedPointRawFeature::j() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.j)
  return j_;
}
 void SpeedPointRawFeature::set_j(double value) {
  set_has_j();
  j_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.j)
}

// optional double speed_limit = 6;
bool SpeedPointRawFeature::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpeedPointRawFeature::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void SpeedPointRawFeature::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpeedPointRawFeature::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
 double SpeedPointRawFeature::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.speed_limit)
  return speed_limit_;
}
 void SpeedPointRawFeature::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.speed_limit)
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
int SpeedPointRawFeature::follow_size() const {
  return follow_.size();
}
void SpeedPointRawFeature::clear_follow() {
  follow_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::follow(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_follow(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_follow() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_follow() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return &follow_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::follow() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
int SpeedPointRawFeature::overtake_size() const {
  return overtake_.size();
}
void SpeedPointRawFeature::clear_overtake() {
  overtake_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::overtake(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_overtake(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_overtake() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_overtake() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return &overtake_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::overtake() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
int SpeedPointRawFeature::virtual_decision_size() const {
  return virtual_decision_.size();
}
void SpeedPointRawFeature::clear_virtual_decision() {
  virtual_decision_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::virtual_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_virtual_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_virtual_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_virtual_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return &virtual_decision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::virtual_decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
int SpeedPointRawFeature::stop_size() const {
  return stop_.size();
}
void SpeedPointRawFeature::clear_stop() {
  stop_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::stop(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_stop(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_stop() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return &stop_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::stop() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
int SpeedPointRawFeature::collision_size() const {
  return collision_.size();
}
void SpeedPointRawFeature::clear_collision() {
  collision_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::collision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_collision() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return &collision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::collision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
int SpeedPointRawFeature::nudge_size() const {
  return nudge_.size();
}
void SpeedPointRawFeature::clear_nudge() {
  nudge_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::nudge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_nudge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_nudge() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_nudge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return &nudge_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::nudge() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
int SpeedPointRawFeature::sidepass_front_size() const {
  return sidepass_front_.size();
}
void SpeedPointRawFeature::clear_sidepass_front() {
  sidepass_front_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::sidepass_front(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_sidepass_front(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_sidepass_front() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_sidepass_front() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return &sidepass_front_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::sidepass_front() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
int SpeedPointRawFeature::sidepass_rear_size() const {
  return sidepass_rear_.size();
}
void SpeedPointRawFeature::clear_sidepass_rear() {
  sidepass_rear_.Clear();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::sidepass_rear(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Get(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_sidepass_rear(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Mutable(index);
}
::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_sidepass_rear() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_sidepass_rear() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return &sidepass_rear_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::sidepass_rear() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData_STPointPair::kSLowerFieldNumber;
const int ObstacleSTRawData_STPointPair::kSUpperFieldNumber;
const int ObstacleSTRawData_STPointPair::kTFieldNumber;
const int ObstacleSTRawData_STPointPair::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}

void ObstacleSTRawData_STPointPair::InitAsDefaultInstance() {
}

ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair(const ObstacleSTRawData_STPointPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}

void ObstacleSTRawData_STPointPair::SharedCtor() {
  _cached_size_ = 0;
  s_lower_ = 0;
  s_upper_ = 0;
  t_ = 0;
  l_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleSTRawData_STPointPair::~ObstacleSTRawData_STPointPair() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  SharedDtor();
}

void ObstacleSTRawData_STPointPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleSTRawData_STPointPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleSTRawData_STPointPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleSTRawData_STPointPair_descriptor_;
}

const ObstacleSTRawData_STPointPair& ObstacleSTRawData_STPointPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

ObstacleSTRawData_STPointPair* ObstacleSTRawData_STPointPair::default_instance_ = NULL;

ObstacleSTRawData_STPointPair* ObstacleSTRawData_STPointPair::New(::google::protobuf::Arena* arena) const {
  ObstacleSTRawData_STPointPair* n = new ObstacleSTRawData_STPointPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleSTRawData_STPointPair::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ObstacleSTRawData_STPointPair, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObstacleSTRawData_STPointPair*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(s_lower_, t_);
    l_ = 10;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObstacleSTRawData_STPointPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s_lower = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_lower_)));
          set_has_s_lower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_s_upper;
        break;
      }

      // optional double s_upper = 2;
      case 2: {
        if (tag == 17) {
         parse_s_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_upper_)));
          set_has_s_upper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_t;
        break;
      }

      // optional double t = 3;
      case 3: {
        if (tag == 25) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_l;
        break;
      }

      // optional double l = 4 [default = 10];
      case 4: {
        if (tag == 33) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return false;
#undef DO_
}

void ObstacleSTRawData_STPointPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  // optional double s_lower = 1;
  if (has_s_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s_lower(), output);
  }

  // optional double s_upper = 2;
  if (has_s_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s_upper(), output);
  }

  // optional double t = 3;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->t(), output);
  }

  // optional double l = 4 [default = 10];
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}

::google::protobuf::uint8* ObstacleSTRawData_STPointPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  // optional double s_lower = 1;
  if (has_s_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s_lower(), target);
  }

  // optional double s_upper = 2;
  if (has_s_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s_upper(), target);
  }

  // optional double t = 3;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->t(), target);
  }

  // optional double l = 4 [default = 10];
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return target;
}

int ObstacleSTRawData_STPointPair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double s_lower = 1;
    if (has_s_lower()) {
      total_size += 1 + 8;
    }

    // optional double s_upper = 2;
    if (has_s_upper()) {
      total_size += 1 + 8;
    }

    // optional double t = 3;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double l = 4 [default = 10];
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObstacleSTRawData_STPointPair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData_STPointPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s_lower()) {
      set_s_lower(from.s_lower());
    }
    if (from.has_s_upper()) {
      set_s_upper(from.s_upper());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_STPointPair::IsInitialized() const {

  return true;
}

void ObstacleSTRawData_STPointPair::Swap(ObstacleSTRawData_STPointPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData_STPointPair::InternalSwap(ObstacleSTRawData_STPointPair* other) {
  std::swap(s_lower_, other->s_lower_);
  std::swap(s_upper_, other->s_upper_);
  std::swap(t_, other->t_);
  std::swap(l_, other->l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleSTRawData_STPointPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleSTRawData_STPointPair_descriptor_;
  metadata.reflection = ObstacleSTRawData_STPointPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData_ObstacleSTData::kIdFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kSpeedFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kIsVirtualFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kProbabilityFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kPolygonFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kDistributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

void ObstacleSTRawData_ObstacleSTData::InitAsDefaultInstance() {
}

ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData(const ObstacleSTRawData_ObstacleSTData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

void ObstacleSTRawData_ObstacleSTData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  speed_ = 0;
  is_virtual_ = false;
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleSTRawData_ObstacleSTData::~ObstacleSTRawData_ObstacleSTData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  SharedDtor();
}

void ObstacleSTRawData_ObstacleSTData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleSTRawData_ObstacleSTData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleSTRawData_ObstacleSTData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleSTRawData_ObstacleSTData_descriptor_;
}

const ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData_ObstacleSTData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData_ObstacleSTData::default_instance_ = NULL;

ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData_ObstacleSTData::New(::google::protobuf::Arena* arena) const {
  ObstacleSTRawData_ObstacleSTData* n = new ObstacleSTRawData_ObstacleSTData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleSTRawData_ObstacleSTData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ObstacleSTRawData_ObstacleSTData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObstacleSTRawData_ObstacleSTData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(speed_, probability_);

#undef ZR_HELPER_
#undef ZR_

  polygon_.Clear();
  distribution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObstacleSTRawData_ObstacleSTData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_speed;
        break;
      }

      // optional double speed = 2;
      case 2: {
        if (tag == 17) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_virtual;
        break;
      }

      // optional bool is_virtual = 3;
      case 3: {
        if (tag == 24) {
         parse_is_virtual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_virtual_)));
          set_has_is_virtual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_probability;
        break;
      }

      // optional double probability = 4;
      case 4: {
        if (tag == 33) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_polygon;
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
      case 8: {
        if (tag == 66) {
         parse_polygon:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_polygon;
        if (input->ExpectTag(74)) goto parse_loop_distribution;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_distribution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_distribution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_distribution;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return false;
#undef DO_
}

void ObstacleSTRawData_ObstacleSTData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  // optional bool is_virtual = 3;
  if (has_is_virtual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_virtual(), output);
  }

  // optional double probability = 4;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->probability(), output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned int i = 0, n = this->polygon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon(i), output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned int i = 0, n = this->distribution_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->distribution(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

::google::protobuf::uint8* ObstacleSTRawData_ObstacleSTData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  // optional bool is_virtual = 3;
  if (has_is_virtual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_virtual(), target);
  }

  // optional double probability = 4;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->probability(), target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned int i = 0, n = this->polygon_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polygon(i), false, target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned int i = 0, n = this->distribution_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->distribution(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return target;
}

int ObstacleSTRawData_ObstacleSTData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional double speed = 2;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional bool is_virtual = 3;
    if (has_is_virtual()) {
      total_size += 1 + 1;
    }

    // optional double probability = 4;
    if (has_probability()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  total_size += 1 * this->polygon_size();
  for (int i = 0; i < this->polygon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon(i));
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  total_size += 1 * this->distribution_size();
  for (int i = 0; i < this->distribution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->distribution(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObstacleSTRawData_ObstacleSTData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData_ObstacleSTData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygon_.MergeFrom(from.polygon_);
  distribution_.MergeFrom(from.distribution_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_is_virtual()) {
      set_is_virtual(from.is_virtual());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_ObstacleSTData::IsInitialized() const {

  return true;
}

void ObstacleSTRawData_ObstacleSTData::Swap(ObstacleSTRawData_ObstacleSTData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData_ObstacleSTData::InternalSwap(ObstacleSTRawData_ObstacleSTData* other) {
  std::swap(id_, other->id_);
  std::swap(speed_, other->speed_);
  std::swap(is_virtual_, other->is_virtual_);
  std::swap(probability_, other->probability_);
  polygon_.UnsafeArenaSwap(&other->polygon_);
  distribution_.UnsafeArenaSwap(&other->distribution_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleSTRawData_ObstacleSTData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleSTRawData_ObstacleSTData_descriptor_;
  metadata.reflection = ObstacleSTRawData_ObstacleSTData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData::kObstacleStDataFieldNumber;
const int ObstacleSTRawData::kObstacleStNudgeFieldNumber;
const int ObstacleSTRawData::kObstacleStSidepassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData::ObstacleSTRawData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData)
}

void ObstacleSTRawData::InitAsDefaultInstance() {
}

ObstacleSTRawData::ObstacleSTRawData(const ObstacleSTRawData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData)
}

void ObstacleSTRawData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleSTRawData::~ObstacleSTRawData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData)
  SharedDtor();
}

void ObstacleSTRawData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleSTRawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleSTRawData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleSTRawData_descriptor_;
}

const ObstacleSTRawData& ObstacleSTRawData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

ObstacleSTRawData* ObstacleSTRawData::default_instance_ = NULL;

ObstacleSTRawData* ObstacleSTRawData::New(::google::protobuf::Arena* arena) const {
  ObstacleSTRawData* n = new ObstacleSTRawData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleSTRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData)
  obstacle_st_data_.Clear();
  obstacle_st_nudge_.Clear();
  obstacle_st_sidepass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObstacleSTRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.ObstacleSTRawData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_obstacle_st_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_obstacle_st_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_obstacle_st_data;
        if (input->ExpectTag(18)) goto parse_loop_obstacle_st_nudge;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_obstacle_st_nudge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_obstacle_st_nudge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_obstacle_st_nudge;
        if (input->ExpectTag(26)) goto parse_loop_obstacle_st_sidepass;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_obstacle_st_sidepass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_obstacle_st_sidepass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_obstacle_st_sidepass;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.ObstacleSTRawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.ObstacleSTRawData)
  return false;
#undef DO_
}

void ObstacleSTRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.ObstacleSTRawData)
  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned int i = 0, n = this->obstacle_st_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obstacle_st_data(i), output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned int i = 0, n = this->obstacle_st_nudge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obstacle_st_nudge(i), output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned int i = 0, n = this->obstacle_st_sidepass_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacle_st_sidepass(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.ObstacleSTRawData)
}

::google::protobuf::uint8* ObstacleSTRawData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData)
  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned int i = 0, n = this->obstacle_st_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->obstacle_st_data(i), false, target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned int i = 0, n = this->obstacle_st_nudge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->obstacle_st_nudge(i), false, target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned int i = 0, n = this->obstacle_st_sidepass_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->obstacle_st_sidepass(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData)
  return target;
}

int ObstacleSTRawData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData)
  int total_size = 0;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  total_size += 1 * this->obstacle_st_data_size();
  for (int i = 0; i < this->obstacle_st_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacle_st_data(i));
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  total_size += 1 * this->obstacle_st_nudge_size();
  for (int i = 0; i < this->obstacle_st_nudge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacle_st_nudge(i));
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  total_size += 1 * this->obstacle_st_sidepass_size();
  for (int i = 0; i < this->obstacle_st_sidepass_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacle_st_sidepass(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleSTRawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObstacleSTRawData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData::MergeFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  obstacle_st_data_.MergeFrom(from.obstacle_st_data_);
  obstacle_st_nudge_.MergeFrom(from.obstacle_st_nudge_);
  obstacle_st_sidepass_.MergeFrom(from.obstacle_st_sidepass_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObstacleSTRawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData::CopyFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData::IsInitialized() const {

  return true;
}

void ObstacleSTRawData::Swap(ObstacleSTRawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData::InternalSwap(ObstacleSTRawData* other) {
  obstacle_st_data_.UnsafeArenaSwap(&other->obstacle_st_data_);
  obstacle_st_nudge_.UnsafeArenaSwap(&other->obstacle_st_nudge_);
  obstacle_st_sidepass_.UnsafeArenaSwap(&other->obstacle_st_sidepass_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleSTRawData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleSTRawData_descriptor_;
  metadata.reflection = ObstacleSTRawData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleSTRawData_STPointPair

// optional double s_lower = 1;
bool ObstacleSTRawData_STPointPair::has_s_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_s_lower() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleSTRawData_STPointPair::clear_has_s_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleSTRawData_STPointPair::clear_s_lower() {
  s_lower_ = 0;
  clear_has_s_lower();
}
 double ObstacleSTRawData_STPointPair::s_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_lower)
  return s_lower_;
}
 void ObstacleSTRawData_STPointPair::set_s_lower(double value) {
  set_has_s_lower();
  s_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_lower)
}

// optional double s_upper = 2;
bool ObstacleSTRawData_STPointPair::has_s_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_s_upper() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleSTRawData_STPointPair::clear_has_s_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleSTRawData_STPointPair::clear_s_upper() {
  s_upper_ = 0;
  clear_has_s_upper();
}
 double ObstacleSTRawData_STPointPair::s_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_upper)
  return s_upper_;
}
 void ObstacleSTRawData_STPointPair::set_s_upper(double value) {
  set_has_s_upper();
  s_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_upper)
}

// optional double t = 3;
bool ObstacleSTRawData_STPointPair::has_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_t() {
  _has_bits_[0] |= 0x00000004u;
}
void ObstacleSTRawData_STPointPair::clear_has_t() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObstacleSTRawData_STPointPair::clear_t() {
  t_ = 0;
  clear_has_t();
}
 double ObstacleSTRawData_STPointPair::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.t)
  return t_;
}
 void ObstacleSTRawData_STPointPair::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.t)
}

// optional double l = 4 [default = 10];
bool ObstacleSTRawData_STPointPair::has_l() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_l() {
  _has_bits_[0] |= 0x00000008u;
}
void ObstacleSTRawData_STPointPair::clear_has_l() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObstacleSTRawData_STPointPair::clear_l() {
  l_ = 10;
  clear_has_l();
}
 double ObstacleSTRawData_STPointPair::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.l)
  return l_;
}
 void ObstacleSTRawData_STPointPair::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.l)
}

// -------------------------------------------------------------------

// ObstacleSTRawData_ObstacleSTData

// optional int32 id = 1;
bool ObstacleSTRawData_ObstacleSTData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleSTRawData_ObstacleSTData::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ObstacleSTRawData_ObstacleSTData::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.id)
  return id_;
}
 void ObstacleSTRawData_ObstacleSTData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.id)
}

// optional double speed = 2;
bool ObstacleSTRawData_ObstacleSTData::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleSTRawData_ObstacleSTData::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 double ObstacleSTRawData_ObstacleSTData::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.speed)
  return speed_;
}
 void ObstacleSTRawData_ObstacleSTData::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.speed)
}

// optional bool is_virtual = 3;
bool ObstacleSTRawData_ObstacleSTData::has_is_virtual() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_is_virtual() {
  _has_bits_[0] |= 0x00000004u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_is_virtual() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObstacleSTRawData_ObstacleSTData::clear_is_virtual() {
  is_virtual_ = false;
  clear_has_is_virtual();
}
 bool ObstacleSTRawData_ObstacleSTData::is_virtual() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.is_virtual)
  return is_virtual_;
}
 void ObstacleSTRawData_ObstacleSTData::set_is_virtual(bool value) {
  set_has_is_virtual();
  is_virtual_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.is_virtual)
}

// optional double probability = 4;
bool ObstacleSTRawData_ObstacleSTData::has_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_probability() {
  _has_bits_[0] |= 0x00000008u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObstacleSTRawData_ObstacleSTData::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double ObstacleSTRawData_ObstacleSTData::probability() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.probability)
  return probability_;
}
 void ObstacleSTRawData_ObstacleSTData::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.probability)
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
int ObstacleSTRawData_ObstacleSTData::polygon_size() const {
  return polygon_.size();
}
void ObstacleSTRawData_ObstacleSTData::clear_polygon() {
  polygon_.Clear();
}
const ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair& ObstacleSTRawData_ObstacleSTData::polygon(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Get(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Mutable(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::add_polygon() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >*
ObstacleSTRawData_ObstacleSTData::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return &polygon_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >&
ObstacleSTRawData_ObstacleSTData::polygon() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_;
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
int ObstacleSTRawData_ObstacleSTData::distribution_size() const {
  return distribution_.size();
}
void ObstacleSTRawData_ObstacleSTData::clear_distribution() {
  distribution_.Clear();
}
const ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair& ObstacleSTRawData_ObstacleSTData::distribution(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Get(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::mutable_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Mutable(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::add_distribution() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >*
ObstacleSTRawData_ObstacleSTData::mutable_distribution() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return &distribution_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >&
ObstacleSTRawData_ObstacleSTData::distribution() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_;
}

// -------------------------------------------------------------------

// ObstacleSTRawData

// repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
int ObstacleSTRawData::obstacle_st_data_size() const {
  return obstacle_st_data_.size();
}
void ObstacleSTRawData::clear_obstacle_st_data() {
  obstacle_st_data_.Clear();
}
const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Get(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_data(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Mutable(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_data() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return &obstacle_st_data_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_data() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_;
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
int ObstacleSTRawData::obstacle_st_nudge_size() const {
  return obstacle_st_nudge_.size();
}
void ObstacleSTRawData::clear_obstacle_st_nudge() {
  obstacle_st_nudge_.Clear();
}
const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_nudge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Get(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_nudge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Mutable(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_nudge() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_nudge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return &obstacle_st_nudge_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_nudge() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_;
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
int ObstacleSTRawData::obstacle_st_sidepass_size() const {
  return obstacle_st_sidepass_.size();
}
void ObstacleSTRawData::clear_obstacle_st_sidepass() {
  obstacle_st_sidepass_.Clear();
}
const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_sidepass(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Get(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_sidepass(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Mutable(index);
}
::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_sidepass() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_sidepass() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return &obstacle_st_sidepass_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_sidepass() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPointRawFeature::kPathFeatureFieldNumber;
const int TrajectoryPointRawFeature::kSpeedFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPointRawFeature::TrajectoryPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}

void TrajectoryPointRawFeature::InitAsDefaultInstance() {
  path_feature_ = const_cast< ::apollo::planning::autotuning::PathPointRawFeature*>(&::apollo::planning::autotuning::PathPointRawFeature::default_instance());
  speed_feature_ = const_cast< ::apollo::planning::autotuning::SpeedPointRawFeature*>(&::apollo::planning::autotuning::SpeedPointRawFeature::default_instance());
}

TrajectoryPointRawFeature::TrajectoryPointRawFeature(const TrajectoryPointRawFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}

void TrajectoryPointRawFeature::SharedCtor() {
  _cached_size_ = 0;
  path_feature_ = NULL;
  speed_feature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryPointRawFeature::~TrajectoryPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
  SharedDtor();
}

void TrajectoryPointRawFeature::SharedDtor() {
  if (this != default_instance_) {
    delete path_feature_;
    delete speed_feature_;
  }
}

void TrajectoryPointRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPointRawFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryPointRawFeature_descriptor_;
}

const TrajectoryPointRawFeature& TrajectoryPointRawFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

TrajectoryPointRawFeature* TrajectoryPointRawFeature::default_instance_ = NULL;

TrajectoryPointRawFeature* TrajectoryPointRawFeature::New(::google::protobuf::Arena* arena) const {
  TrajectoryPointRawFeature* n = new TrajectoryPointRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path_feature()) {
      if (path_feature_ != NULL) path_feature_->::apollo::planning::autotuning::PathPointRawFeature::Clear();
    }
    if (has_speed_feature()) {
      if (speed_feature_ != NULL) speed_feature_->::apollo::planning::autotuning::SpeedPointRawFeature::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrajectoryPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_speed_feature;
        break;
      }

      // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
      case 2: {
        if (tag == 18) {
         parse_speed_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return false;
#undef DO_
}

void TrajectoryPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (has_path_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_feature_, output);
  }

  // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (has_speed_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->speed_feature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryPointRawFeature)
}

::google::protobuf::uint8* TrajectoryPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (has_path_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_feature_, false, target);
  }

  // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (has_speed_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->speed_feature_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return target;
}

int TrajectoryPointRawFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
    if (has_path_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
    if (has_speed_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speed_feature_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryPointRawFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryPointRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointRawFeature::MergeFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_feature()) {
      mutable_path_feature()->::apollo::planning::autotuning::PathPointRawFeature::MergeFrom(from.path_feature());
    }
    if (from.has_speed_feature()) {
      mutable_speed_feature()->::apollo::planning::autotuning::SpeedPointRawFeature::MergeFrom(from.speed_feature());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrajectoryPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointRawFeature::CopyFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointRawFeature::IsInitialized() const {

  return true;
}

void TrajectoryPointRawFeature::Swap(TrajectoryPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPointRawFeature::InternalSwap(TrajectoryPointRawFeature* other) {
  std::swap(path_feature_, other->path_feature_);
  std::swap(speed_feature_, other->speed_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPointRawFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryPointRawFeature_descriptor_;
  metadata.reflection = TrajectoryPointRawFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPointRawFeature

// optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
bool TrajectoryPointRawFeature::has_path_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPointRawFeature::set_has_path_feature() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPointRawFeature::clear_has_path_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPointRawFeature::clear_path_feature() {
  if (path_feature_ != NULL) path_feature_->::apollo::planning::autotuning::PathPointRawFeature::Clear();
  clear_has_path_feature();
}
const ::apollo::planning::autotuning::PathPointRawFeature& TrajectoryPointRawFeature::path_feature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  return path_feature_ != NULL ? *path_feature_ : *default_instance_->path_feature_;
}
::apollo::planning::autotuning::PathPointRawFeature* TrajectoryPointRawFeature::mutable_path_feature() {
  set_has_path_feature();
  if (path_feature_ == NULL) {
    path_feature_ = new ::apollo::planning::autotuning::PathPointRawFeature;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  return path_feature_;
}
::apollo::planning::autotuning::PathPointRawFeature* TrajectoryPointRawFeature::release_path_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  clear_has_path_feature();
  ::apollo::planning::autotuning::PathPointRawFeature* temp = path_feature_;
  path_feature_ = NULL;
  return temp;
}
void TrajectoryPointRawFeature::set_allocated_path_feature(::apollo::planning::autotuning::PathPointRawFeature* path_feature) {
  delete path_feature_;
  path_feature_ = path_feature;
  if (path_feature) {
    set_has_path_feature();
  } else {
    clear_has_path_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
}

// optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
bool TrajectoryPointRawFeature::has_speed_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPointRawFeature::set_has_speed_feature() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPointRawFeature::clear_has_speed_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPointRawFeature::clear_speed_feature() {
  if (speed_feature_ != NULL) speed_feature_->::apollo::planning::autotuning::SpeedPointRawFeature::Clear();
  clear_has_speed_feature();
}
const ::apollo::planning::autotuning::SpeedPointRawFeature& TrajectoryPointRawFeature::speed_feature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  return speed_feature_ != NULL ? *speed_feature_ : *default_instance_->speed_feature_;
}
::apollo::planning::autotuning::SpeedPointRawFeature* TrajectoryPointRawFeature::mutable_speed_feature() {
  set_has_speed_feature();
  if (speed_feature_ == NULL) {
    speed_feature_ = new ::apollo::planning::autotuning::SpeedPointRawFeature;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  return speed_feature_;
}
::apollo::planning::autotuning::SpeedPointRawFeature* TrajectoryPointRawFeature::release_speed_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  clear_has_speed_feature();
  ::apollo::planning::autotuning::SpeedPointRawFeature* temp = speed_feature_;
  speed_feature_ = NULL;
  return temp;
}
void TrajectoryPointRawFeature::set_allocated_speed_feature(::apollo::planning::autotuning::SpeedPointRawFeature* speed_feature) {
  delete speed_feature_;
  speed_feature_ = speed_feature;
  if (speed_feature) {
    set_has_speed_feature();
  } else {
    clear_has_speed_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryRawFeature::kPointFeatureFieldNumber;
const int TrajectoryRawFeature::kStRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryRawFeature::TrajectoryRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}

void TrajectoryRawFeature::InitAsDefaultInstance() {
  st_raw_data_ = const_cast< ::apollo::planning::autotuning::ObstacleSTRawData*>(&::apollo::planning::autotuning::ObstacleSTRawData::default_instance());
}

TrajectoryRawFeature::TrajectoryRawFeature(const TrajectoryRawFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}

void TrajectoryRawFeature::SharedCtor() {
  _cached_size_ = 0;
  st_raw_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryRawFeature::~TrajectoryRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryRawFeature)
  SharedDtor();
}

void TrajectoryRawFeature::SharedDtor() {
  if (this != default_instance_) {
    delete st_raw_data_;
  }
}

void TrajectoryRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryRawFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryRawFeature_descriptor_;
}

const TrajectoryRawFeature& TrajectoryRawFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fauto_5ftuning_5fraw_5ffeature_2eproto();
  return *default_instance_;
}

TrajectoryRawFeature* TrajectoryRawFeature::default_instance_ = NULL;

TrajectoryRawFeature* TrajectoryRawFeature::New(::google::protobuf::Arena* arena) const {
  TrajectoryRawFeature* n = new TrajectoryRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (has_st_raw_data()) {
    if (st_raw_data_ != NULL) st_raw_data_->::apollo::planning::autotuning::ObstacleSTRawData::Clear();
  }
  point_feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrajectoryRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_st_raw_data;
        break;
      }

      // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
      case 2: {
        if (tag == 18) {
         parse_st_raw_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st_raw_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryRawFeature)
  return false;
#undef DO_
}

void TrajectoryRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryRawFeature)
  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned int i = 0, n = this->point_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point_feature(i), output);
  }

  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (has_st_raw_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->st_raw_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryRawFeature)
}

::google::protobuf::uint8* TrajectoryRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryRawFeature)
  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned int i = 0, n = this->point_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point_feature(i), false, target);
  }

  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (has_st_raw_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->st_raw_data_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryRawFeature)
  return target;
}

int TrajectoryRawFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryRawFeature)
  int total_size = 0;

  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (has_st_raw_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->st_raw_data_);
  }

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  total_size += 1 * this->point_feature_size();
  for (int i = 0; i < this->point_feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_feature(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryRawFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryRawFeature::MergeFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_feature_.MergeFrom(from.point_feature_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_st_raw_data()) {
      mutable_st_raw_data()->::apollo::planning::autotuning::ObstacleSTRawData::MergeFrom(from.st_raw_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrajectoryRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRawFeature::CopyFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRawFeature::IsInitialized() const {

  return true;
}

void TrajectoryRawFeature::Swap(TrajectoryRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryRawFeature::InternalSwap(TrajectoryRawFeature* other) {
  point_feature_.UnsafeArenaSwap(&other->point_feature_);
  std::swap(st_raw_data_, other->st_raw_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryRawFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryRawFeature_descriptor_;
  metadata.reflection = TrajectoryRawFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryRawFeature

// repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
int TrajectoryRawFeature::point_feature_size() const {
  return point_feature_.size();
}
void TrajectoryRawFeature::clear_point_feature() {
  point_feature_.Clear();
}
const ::apollo::planning::autotuning::TrajectoryPointRawFeature& TrajectoryRawFeature::point_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Get(index);
}
::apollo::planning::autotuning::TrajectoryPointRawFeature* TrajectoryRawFeature::mutable_point_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Mutable(index);
}
::apollo::planning::autotuning::TrajectoryPointRawFeature* TrajectoryRawFeature::add_point_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointRawFeature >*
TrajectoryRawFeature::mutable_point_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return &point_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointRawFeature >&
TrajectoryRawFeature::point_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_;
}

// optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
bool TrajectoryRawFeature::has_st_raw_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryRawFeature::set_has_st_raw_data() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryRawFeature::clear_has_st_raw_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryRawFeature::clear_st_raw_data() {
  if (st_raw_data_ != NULL) st_raw_data_->::apollo::planning::autotuning::ObstacleSTRawData::Clear();
  clear_has_st_raw_data();
}
const ::apollo::planning::autotuning::ObstacleSTRawData& TrajectoryRawFeature::st_raw_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  return st_raw_data_ != NULL ? *st_raw_data_ : *default_instance_->st_raw_data_;
}
::apollo::planning::autotuning::ObstacleSTRawData* TrajectoryRawFeature::mutable_st_raw_data() {
  set_has_st_raw_data();
  if (st_raw_data_ == NULL) {
    st_raw_data_ = new ::apollo::planning::autotuning::ObstacleSTRawData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  return st_raw_data_;
}
::apollo::planning::autotuning::ObstacleSTRawData* TrajectoryRawFeature::release_st_raw_data() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  clear_has_st_raw_data();
  ::apollo::planning::autotuning::ObstacleSTRawData* temp = st_raw_data_;
  st_raw_data_ = NULL;
  return temp;
}
void TrajectoryRawFeature::set_allocated_st_raw_data(::apollo::planning::autotuning::ObstacleSTRawData* st_raw_data) {
  delete st_raw_data_;
  st_raw_data_ = st_raw_data;
  if (st_raw_data) {
    set_has_st_raw_data();
  } else {
    clear_has_st_raw_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace autotuning
}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
