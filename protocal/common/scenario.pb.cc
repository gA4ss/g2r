// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/scenario.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common/scenario.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Scenario_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scenario_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Scenario_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fscenario_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2fscenario_2eproto() {
  protobuf_AddDesc_common_2fscenario_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/scenario.proto");
  GOOGLE_CHECK(file != NULL);
  Scenario_descriptor_ = file->message_type(0);
  static const int Scenario_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, type_),
  };
  Scenario_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scenario_descriptor_,
      Scenario::default_instance_,
      Scenario_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, _has_bits_[0]),
      -1,
      -1,
      sizeof(Scenario),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, _internal_metadata_),
      -1);
  Scenario_Type_descriptor_ = Scenario_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fscenario_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scenario_descriptor_, &Scenario::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fscenario_2eproto() {
  delete Scenario::default_instance_;
  delete Scenario_reflection_;
}

void protobuf_AddDesc_common_2fscenario_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2fscenario_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025common/scenario.proto\022\rapollo.common\"\337"
    "\001\n\010Scenario\0223\n\004type\030\001 \001(\0162\034.apollo.commo"
    "n.Scenario.Type:\007UNKNOWN\"\235\001\n\004Type\022\013\n\007UNK"
    "NOWN\020\000\022\023\n\016CRUISE_UNKNOWN\020\350\007\022\021\n\014CRUISE_UR"
    "BAN\020\351\007\022\023\n\016CRUISE_HIGHWAY\020\352\007\022\025\n\020JUNCTION_"
    "UNKNOWN\020\320\017\022\033\n\026JUNCTION_TRAFFIC_LIGHT\020\321\017\022"
    "\027\n\022JUNCTION_STOP_SIGN\020\322\017", 264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/scenario.proto", &protobuf_RegisterTypes);
  Scenario::default_instance_ = new Scenario();
  Scenario::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fscenario_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fscenario_2eproto {
  StaticDescriptorInitializer_common_2fscenario_2eproto() {
    protobuf_AddDesc_common_2fscenario_2eproto();
  }
} static_descriptor_initializer_common_2fscenario_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Scenario_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scenario_Type_descriptor_;
}
bool Scenario_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
    case 2000:
    case 2001:
    case 2002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scenario_Type Scenario::UNKNOWN;
const Scenario_Type Scenario::CRUISE_UNKNOWN;
const Scenario_Type Scenario::CRUISE_URBAN;
const Scenario_Type Scenario::CRUISE_HIGHWAY;
const Scenario_Type Scenario::JUNCTION_UNKNOWN;
const Scenario_Type Scenario::JUNCTION_TRAFFIC_LIGHT;
const Scenario_Type Scenario::JUNCTION_STOP_SIGN;
const Scenario_Type Scenario::Type_MIN;
const Scenario_Type Scenario::Type_MAX;
const int Scenario::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario::Scenario()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Scenario)
}

void Scenario::InitAsDefaultInstance() {
}

Scenario::Scenario(const Scenario& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Scenario)
}

void Scenario::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scenario::~Scenario() {
  // @@protoc_insertion_point(destructor:apollo.common.Scenario)
  SharedDtor();
}

void Scenario::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scenario::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scenario::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scenario_descriptor_;
}

const Scenario& Scenario::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fscenario_2eproto();
  return *default_instance_;
}

Scenario* Scenario::default_instance_ = NULL;

Scenario* Scenario::New(::google::protobuf::Arena* arena) const {
  Scenario* n = new Scenario;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scenario::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Scenario)
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Scenario::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Scenario)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Scenario.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::Scenario_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::common::Scenario_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Scenario)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Scenario)
  return false;
#undef DO_
}

void Scenario::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Scenario)
  // optional .apollo.common.Scenario.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Scenario)
}

::google::protobuf::uint8* Scenario::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Scenario)
  // optional .apollo.common.Scenario.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Scenario)
  return target;
}

int Scenario::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Scenario)
  int total_size = 0;

  // optional .apollo.common.Scenario.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scenario::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Scenario)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Scenario* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Scenario)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Scenario)
    MergeFrom(*source);
  }
}

void Scenario::MergeFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Scenario)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Scenario::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario::CopyFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario::IsInitialized() const {

  return true;
}

void Scenario::Swap(Scenario* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario::InternalSwap(Scenario* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scenario::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scenario_descriptor_;
  metadata.reflection = Scenario_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scenario

// optional .apollo.common.Scenario.Type type = 1 [default = UNKNOWN];
bool Scenario::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scenario::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Scenario::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scenario::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::common::Scenario_Type Scenario::type() const {
  // @@protoc_insertion_point(field_get:apollo.common.Scenario.type)
  return static_cast< ::apollo::common::Scenario_Type >(type_);
}
 void Scenario::set_type(::apollo::common::Scenario_Type value) {
  assert(::apollo::common::Scenario_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.Scenario.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
