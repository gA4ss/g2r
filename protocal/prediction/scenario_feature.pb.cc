// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/scenario_feature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prediction/scenario_feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace prediction {

namespace {

const ::google::protobuf::Descriptor* ScenarioFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenarioFeature_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prediction_2fscenario_5ffeature_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prediction_2fscenario_5ffeature_2eproto() {
  protobuf_AddDesc_prediction_2fscenario_5ffeature_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prediction/scenario_feature.proto");
  GOOGLE_CHECK(file != NULL);
  ScenarioFeature_descriptor_ = file->message_type(0);
  static const int ScenarioFeature_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, curr_lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, curr_lane_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, left_neighbor_lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, left_neighbor_lane_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, right_neighbor_lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, right_neighbor_lane_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, junction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, dist_to_junction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, obstacle_id_),
  };
  ScenarioFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScenarioFeature_descriptor_,
      ScenarioFeature::default_instance_,
      ScenarioFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScenarioFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioFeature, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prediction_2fscenario_5ffeature_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScenarioFeature_descriptor_, &ScenarioFeature::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prediction_2fscenario_5ffeature_2eproto() {
  delete ScenarioFeature::default_instance_;
  delete ScenarioFeature_reflection_;
}

void protobuf_AddDesc_prediction_2fscenario_5ffeature_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prediction_2fscenario_5ffeature_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!prediction/scenario_feature.proto\022\021apo"
    "llo.prediction\"\273\002\n\017ScenarioFeature\022\r\n\005sp"
    "eed\030\001 \001(\001\022\024\n\014acceleration\030\002 \001(\001\022\017\n\007headi"
    "ng\030\003 \001(\001\022\025\n\014curr_lane_id\030\351\007 \001(\t\022\024\n\013curr_"
    "lane_s\030\352\007 \001(\001\022\036\n\025left_neighbor_lane_id\030\353"
    "\007 \001(\t\022\035\n\024left_neighbor_lane_s\030\354\007 \001(\001\022\037\n\026"
    "right_neighbor_lane_id\030\355\007 \001(\t\022\036\n\025right_n"
    "eighbor_lane_s\030\356\007 \001(\001\022\024\n\013junction_id\030\321\017 "
    "\001(\t\022\031\n\020dist_to_junction\030\322\017 \001(\001\022\024\n\013obstac"
    "le_id\030\271\027 \003(\005", 372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction/scenario_feature.proto", &protobuf_RegisterTypes);
  ScenarioFeature::default_instance_ = new ScenarioFeature();
  ScenarioFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prediction_2fscenario_5ffeature_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prediction_2fscenario_5ffeature_2eproto {
  StaticDescriptorInitializer_prediction_2fscenario_5ffeature_2eproto() {
    protobuf_AddDesc_prediction_2fscenario_5ffeature_2eproto();
  }
} static_descriptor_initializer_prediction_2fscenario_5ffeature_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioFeature::kSpeedFieldNumber;
const int ScenarioFeature::kAccelerationFieldNumber;
const int ScenarioFeature::kHeadingFieldNumber;
const int ScenarioFeature::kCurrLaneIdFieldNumber;
const int ScenarioFeature::kCurrLaneSFieldNumber;
const int ScenarioFeature::kLeftNeighborLaneIdFieldNumber;
const int ScenarioFeature::kLeftNeighborLaneSFieldNumber;
const int ScenarioFeature::kRightNeighborLaneIdFieldNumber;
const int ScenarioFeature::kRightNeighborLaneSFieldNumber;
const int ScenarioFeature::kJunctionIdFieldNumber;
const int ScenarioFeature::kDistToJunctionFieldNumber;
const int ScenarioFeature::kObstacleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioFeature::ScenarioFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ScenarioFeature)
}

void ScenarioFeature::InitAsDefaultInstance() {
}

ScenarioFeature::ScenarioFeature(const ScenarioFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ScenarioFeature)
}

void ScenarioFeature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  speed_ = 0;
  acceleration_ = 0;
  heading_ = 0;
  curr_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curr_lane_s_ = 0;
  left_neighbor_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_neighbor_lane_s_ = 0;
  right_neighbor_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_neighbor_lane_s_ = 0;
  junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dist_to_junction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenarioFeature::~ScenarioFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ScenarioFeature)
  SharedDtor();
}

void ScenarioFeature::SharedDtor() {
  curr_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_neighbor_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_neighbor_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  junction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScenarioFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenarioFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenarioFeature_descriptor_;
}

const ScenarioFeature& ScenarioFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fscenario_5ffeature_2eproto();
  return *default_instance_;
}

ScenarioFeature* ScenarioFeature::default_instance_ = NULL;

ScenarioFeature* ScenarioFeature::New(::google::protobuf::Arena* arena) const {
  ScenarioFeature* n = new ScenarioFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenarioFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ScenarioFeature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScenarioFeature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScenarioFeature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(speed_, heading_);
    if (has_curr_lane_id()) {
      curr_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    curr_lane_s_ = 0;
    if (has_left_neighbor_lane_id()) {
      left_neighbor_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    left_neighbor_lane_s_ = 0;
    if (has_right_neighbor_lane_id()) {
      right_neighbor_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    right_neighbor_lane_s_ = 0;
    if (has_junction_id()) {
      junction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dist_to_junction_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  obstacle_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScenarioFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.ScenarioFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(24008);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double speed = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_acceleration;
        break;
      }

      // optional double acceleration = 2;
      case 2: {
        if (tag == 17) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (tag == 25) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_curr_lane_id;
        break;
      }

      // optional string curr_lane_id = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_curr_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curr_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curr_lane_id().data(), this->curr_lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.ScenarioFeature.curr_lane_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8017)) goto parse_curr_lane_s;
        break;
      }

      // optional double curr_lane_s = 1002;
      case 1002: {
        if (tag == 8017) {
         parse_curr_lane_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curr_lane_s_)));
          set_has_curr_lane_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8026)) goto parse_left_neighbor_lane_id;
        break;
      }

      // optional string left_neighbor_lane_id = 1003;
      case 1003: {
        if (tag == 8026) {
         parse_left_neighbor_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left_neighbor_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->left_neighbor_lane_id().data(), this->left_neighbor_lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.ScenarioFeature.left_neighbor_lane_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8033)) goto parse_left_neighbor_lane_s;
        break;
      }

      // optional double left_neighbor_lane_s = 1004;
      case 1004: {
        if (tag == 8033) {
         parse_left_neighbor_lane_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_neighbor_lane_s_)));
          set_has_left_neighbor_lane_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8042)) goto parse_right_neighbor_lane_id;
        break;
      }

      // optional string right_neighbor_lane_id = 1005;
      case 1005: {
        if (tag == 8042) {
         parse_right_neighbor_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_neighbor_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right_neighbor_lane_id().data(), this->right_neighbor_lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.ScenarioFeature.right_neighbor_lane_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8049)) goto parse_right_neighbor_lane_s;
        break;
      }

      // optional double right_neighbor_lane_s = 1006;
      case 1006: {
        if (tag == 8049) {
         parse_right_neighbor_lane_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_neighbor_lane_s_)));
          set_has_right_neighbor_lane_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16010)) goto parse_junction_id;
        break;
      }

      // optional string junction_id = 2001;
      case 2001: {
        if (tag == 16010) {
         parse_junction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_junction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->junction_id().data(), this->junction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.ScenarioFeature.junction_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16017)) goto parse_dist_to_junction;
        break;
      }

      // optional double dist_to_junction = 2002;
      case 2002: {
        if (tag == 16017) {
         parse_dist_to_junction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_junction_)));
          set_has_dist_to_junction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24008)) goto parse_obstacle_id;
        break;
      }

      // repeated int32 obstacle_id = 3001;
      case 3001: {
        if (tag == 24008) {
         parse_obstacle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 3, 24008, input, this->mutable_obstacle_id())));
        } else if (tag == 24010) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_obstacle_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24008)) goto parse_obstacle_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.ScenarioFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.ScenarioFeature)
  return false;
#undef DO_
}

void ScenarioFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.ScenarioFeature)
  // optional double speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  // optional double acceleration = 2;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acceleration(), output);
  }

  // optional double heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional string curr_lane_id = 1001;
  if (has_curr_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curr_lane_id().data(), this->curr_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.curr_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1001, this->curr_lane_id(), output);
  }

  // optional double curr_lane_s = 1002;
  if (has_curr_lane_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1002, this->curr_lane_s(), output);
  }

  // optional string left_neighbor_lane_id = 1003;
  if (has_left_neighbor_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_neighbor_lane_id().data(), this->left_neighbor_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.left_neighbor_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1003, this->left_neighbor_lane_id(), output);
  }

  // optional double left_neighbor_lane_s = 1004;
  if (has_left_neighbor_lane_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1004, this->left_neighbor_lane_s(), output);
  }

  // optional string right_neighbor_lane_id = 1005;
  if (has_right_neighbor_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_neighbor_lane_id().data(), this->right_neighbor_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.right_neighbor_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1005, this->right_neighbor_lane_id(), output);
  }

  // optional double right_neighbor_lane_s = 1006;
  if (has_right_neighbor_lane_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1006, this->right_neighbor_lane_s(), output);
  }

  // optional string junction_id = 2001;
  if (has_junction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction_id().data(), this->junction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.junction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2001, this->junction_id(), output);
  }

  // optional double dist_to_junction = 2002;
  if (has_dist_to_junction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2002, this->dist_to_junction(), output);
  }

  // repeated int32 obstacle_id = 3001;
  for (int i = 0; i < this->obstacle_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3001, this->obstacle_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.ScenarioFeature)
}

::google::protobuf::uint8* ScenarioFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ScenarioFeature)
  // optional double speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  // optional double acceleration = 2;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acceleration(), target);
  }

  // optional double heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional string curr_lane_id = 1001;
  if (has_curr_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curr_lane_id().data(), this->curr_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.curr_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1001, this->curr_lane_id(), target);
  }

  // optional double curr_lane_s = 1002;
  if (has_curr_lane_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1002, this->curr_lane_s(), target);
  }

  // optional string left_neighbor_lane_id = 1003;
  if (has_left_neighbor_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_neighbor_lane_id().data(), this->left_neighbor_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.left_neighbor_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1003, this->left_neighbor_lane_id(), target);
  }

  // optional double left_neighbor_lane_s = 1004;
  if (has_left_neighbor_lane_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1004, this->left_neighbor_lane_s(), target);
  }

  // optional string right_neighbor_lane_id = 1005;
  if (has_right_neighbor_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_neighbor_lane_id().data(), this->right_neighbor_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.right_neighbor_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1005, this->right_neighbor_lane_id(), target);
  }

  // optional double right_neighbor_lane_s = 1006;
  if (has_right_neighbor_lane_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1006, this->right_neighbor_lane_s(), target);
  }

  // optional string junction_id = 2001;
  if (has_junction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction_id().data(), this->junction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ScenarioFeature.junction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2001, this->junction_id(), target);
  }

  // optional double dist_to_junction = 2002;
  if (has_dist_to_junction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2002, this->dist_to_junction(), target);
  }

  // repeated int32 obstacle_id = 3001;
  for (int i = 0; i < this->obstacle_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3001, this->obstacle_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ScenarioFeature)
  return target;
}

int ScenarioFeature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ScenarioFeature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double speed = 1;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 2;
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional string curr_lane_id = 1001;
    if (has_curr_lane_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curr_lane_id());
    }

    // optional double curr_lane_s = 1002;
    if (has_curr_lane_s()) {
      total_size += 2 + 8;
    }

    // optional string left_neighbor_lane_id = 1003;
    if (has_left_neighbor_lane_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->left_neighbor_lane_id());
    }

    // optional double left_neighbor_lane_s = 1004;
    if (has_left_neighbor_lane_s()) {
      total_size += 2 + 8;
    }

    // optional string right_neighbor_lane_id = 1005;
    if (has_right_neighbor_lane_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right_neighbor_lane_id());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double right_neighbor_lane_s = 1006;
    if (has_right_neighbor_lane_s()) {
      total_size += 2 + 8;
    }

    // optional string junction_id = 2001;
    if (has_junction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->junction_id());
    }

    // optional double dist_to_junction = 2002;
    if (has_dist_to_junction()) {
      total_size += 2 + 8;
    }

  }
  // repeated int32 obstacle_id = 3001;
  {
    int data_size = 0;
    for (int i = 0; i < this->obstacle_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->obstacle_id(i));
    }
    total_size += 3 * this->obstacle_id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenarioFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ScenarioFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScenarioFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ScenarioFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ScenarioFeature)
    MergeFrom(*source);
  }
}

void ScenarioFeature::MergeFrom(const ScenarioFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ScenarioFeature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  obstacle_id_.MergeFrom(from.obstacle_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_curr_lane_id()) {
      set_has_curr_lane_id();
      curr_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curr_lane_id_);
    }
    if (from.has_curr_lane_s()) {
      set_curr_lane_s(from.curr_lane_s());
    }
    if (from.has_left_neighbor_lane_id()) {
      set_has_left_neighbor_lane_id();
      left_neighbor_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_neighbor_lane_id_);
    }
    if (from.has_left_neighbor_lane_s()) {
      set_left_neighbor_lane_s(from.left_neighbor_lane_s());
    }
    if (from.has_right_neighbor_lane_id()) {
      set_has_right_neighbor_lane_id();
      right_neighbor_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_neighbor_lane_id_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_right_neighbor_lane_s()) {
      set_right_neighbor_lane_s(from.right_neighbor_lane_s());
    }
    if (from.has_junction_id()) {
      set_has_junction_id();
      junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.junction_id_);
    }
    if (from.has_dist_to_junction()) {
      set_dist_to_junction(from.dist_to_junction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScenarioFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ScenarioFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioFeature::CopyFrom(const ScenarioFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ScenarioFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioFeature::IsInitialized() const {

  return true;
}

void ScenarioFeature::Swap(ScenarioFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioFeature::InternalSwap(ScenarioFeature* other) {
  std::swap(speed_, other->speed_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(heading_, other->heading_);
  curr_lane_id_.Swap(&other->curr_lane_id_);
  std::swap(curr_lane_s_, other->curr_lane_s_);
  left_neighbor_lane_id_.Swap(&other->left_neighbor_lane_id_);
  std::swap(left_neighbor_lane_s_, other->left_neighbor_lane_s_);
  right_neighbor_lane_id_.Swap(&other->right_neighbor_lane_id_);
  std::swap(right_neighbor_lane_s_, other->right_neighbor_lane_s_);
  junction_id_.Swap(&other->junction_id_);
  std::swap(dist_to_junction_, other->dist_to_junction_);
  obstacle_id_.UnsafeArenaSwap(&other->obstacle_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenarioFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenarioFeature_descriptor_;
  metadata.reflection = ScenarioFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenarioFeature

// optional double speed = 1;
bool ScenarioFeature::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScenarioFeature::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void ScenarioFeature::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScenarioFeature::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 double ScenarioFeature::speed() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.speed)
  return speed_;
}
 void ScenarioFeature::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.speed)
}

// optional double acceleration = 2;
bool ScenarioFeature::has_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScenarioFeature::set_has_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void ScenarioFeature::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScenarioFeature::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
 double ScenarioFeature::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.acceleration)
  return acceleration_;
}
 void ScenarioFeature::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.acceleration)
}

// optional double heading = 3;
bool ScenarioFeature::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScenarioFeature::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ScenarioFeature::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScenarioFeature::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double ScenarioFeature::heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.heading)
  return heading_;
}
 void ScenarioFeature::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.heading)
}

// optional string curr_lane_id = 1001;
bool ScenarioFeature::has_curr_lane_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScenarioFeature::set_has_curr_lane_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ScenarioFeature::clear_has_curr_lane_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScenarioFeature::clear_curr_lane_id() {
  curr_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curr_lane_id();
}
 const ::std::string& ScenarioFeature::curr_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.curr_lane_id)
  return curr_lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_curr_lane_id(const ::std::string& value) {
  set_has_curr_lane_id();
  curr_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.curr_lane_id)
}
 void ScenarioFeature::set_curr_lane_id(const char* value) {
  set_has_curr_lane_id();
  curr_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.ScenarioFeature.curr_lane_id)
}
 void ScenarioFeature::set_curr_lane_id(const char* value, size_t size) {
  set_has_curr_lane_id();
  curr_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.ScenarioFeature.curr_lane_id)
}
 ::std::string* ScenarioFeature::mutable_curr_lane_id() {
  set_has_curr_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.ScenarioFeature.curr_lane_id)
  return curr_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScenarioFeature::release_curr_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.ScenarioFeature.curr_lane_id)
  clear_has_curr_lane_id();
  return curr_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_allocated_curr_lane_id(::std::string* curr_lane_id) {
  if (curr_lane_id != NULL) {
    set_has_curr_lane_id();
  } else {
    clear_has_curr_lane_id();
  }
  curr_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curr_lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.ScenarioFeature.curr_lane_id)
}

// optional double curr_lane_s = 1002;
bool ScenarioFeature::has_curr_lane_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScenarioFeature::set_has_curr_lane_s() {
  _has_bits_[0] |= 0x00000010u;
}
void ScenarioFeature::clear_has_curr_lane_s() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScenarioFeature::clear_curr_lane_s() {
  curr_lane_s_ = 0;
  clear_has_curr_lane_s();
}
 double ScenarioFeature::curr_lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.curr_lane_s)
  return curr_lane_s_;
}
 void ScenarioFeature::set_curr_lane_s(double value) {
  set_has_curr_lane_s();
  curr_lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.curr_lane_s)
}

// optional string left_neighbor_lane_id = 1003;
bool ScenarioFeature::has_left_neighbor_lane_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ScenarioFeature::set_has_left_neighbor_lane_id() {
  _has_bits_[0] |= 0x00000020u;
}
void ScenarioFeature::clear_has_left_neighbor_lane_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void ScenarioFeature::clear_left_neighbor_lane_id() {
  left_neighbor_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_neighbor_lane_id();
}
 const ::std::string& ScenarioFeature::left_neighbor_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.left_neighbor_lane_id)
  return left_neighbor_lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_left_neighbor_lane_id(const ::std::string& value) {
  set_has_left_neighbor_lane_id();
  left_neighbor_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.left_neighbor_lane_id)
}
 void ScenarioFeature::set_left_neighbor_lane_id(const char* value) {
  set_has_left_neighbor_lane_id();
  left_neighbor_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.ScenarioFeature.left_neighbor_lane_id)
}
 void ScenarioFeature::set_left_neighbor_lane_id(const char* value, size_t size) {
  set_has_left_neighbor_lane_id();
  left_neighbor_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.ScenarioFeature.left_neighbor_lane_id)
}
 ::std::string* ScenarioFeature::mutable_left_neighbor_lane_id() {
  set_has_left_neighbor_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.ScenarioFeature.left_neighbor_lane_id)
  return left_neighbor_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScenarioFeature::release_left_neighbor_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.ScenarioFeature.left_neighbor_lane_id)
  clear_has_left_neighbor_lane_id();
  return left_neighbor_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_allocated_left_neighbor_lane_id(::std::string* left_neighbor_lane_id) {
  if (left_neighbor_lane_id != NULL) {
    set_has_left_neighbor_lane_id();
  } else {
    clear_has_left_neighbor_lane_id();
  }
  left_neighbor_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_neighbor_lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.ScenarioFeature.left_neighbor_lane_id)
}

// optional double left_neighbor_lane_s = 1004;
bool ScenarioFeature::has_left_neighbor_lane_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ScenarioFeature::set_has_left_neighbor_lane_s() {
  _has_bits_[0] |= 0x00000040u;
}
void ScenarioFeature::clear_has_left_neighbor_lane_s() {
  _has_bits_[0] &= ~0x00000040u;
}
void ScenarioFeature::clear_left_neighbor_lane_s() {
  left_neighbor_lane_s_ = 0;
  clear_has_left_neighbor_lane_s();
}
 double ScenarioFeature::left_neighbor_lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.left_neighbor_lane_s)
  return left_neighbor_lane_s_;
}
 void ScenarioFeature::set_left_neighbor_lane_s(double value) {
  set_has_left_neighbor_lane_s();
  left_neighbor_lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.left_neighbor_lane_s)
}

// optional string right_neighbor_lane_id = 1005;
bool ScenarioFeature::has_right_neighbor_lane_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ScenarioFeature::set_has_right_neighbor_lane_id() {
  _has_bits_[0] |= 0x00000080u;
}
void ScenarioFeature::clear_has_right_neighbor_lane_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void ScenarioFeature::clear_right_neighbor_lane_id() {
  right_neighbor_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_neighbor_lane_id();
}
 const ::std::string& ScenarioFeature::right_neighbor_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.right_neighbor_lane_id)
  return right_neighbor_lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_right_neighbor_lane_id(const ::std::string& value) {
  set_has_right_neighbor_lane_id();
  right_neighbor_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.right_neighbor_lane_id)
}
 void ScenarioFeature::set_right_neighbor_lane_id(const char* value) {
  set_has_right_neighbor_lane_id();
  right_neighbor_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.ScenarioFeature.right_neighbor_lane_id)
}
 void ScenarioFeature::set_right_neighbor_lane_id(const char* value, size_t size) {
  set_has_right_neighbor_lane_id();
  right_neighbor_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.ScenarioFeature.right_neighbor_lane_id)
}
 ::std::string* ScenarioFeature::mutable_right_neighbor_lane_id() {
  set_has_right_neighbor_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.ScenarioFeature.right_neighbor_lane_id)
  return right_neighbor_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScenarioFeature::release_right_neighbor_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.ScenarioFeature.right_neighbor_lane_id)
  clear_has_right_neighbor_lane_id();
  return right_neighbor_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_allocated_right_neighbor_lane_id(::std::string* right_neighbor_lane_id) {
  if (right_neighbor_lane_id != NULL) {
    set_has_right_neighbor_lane_id();
  } else {
    clear_has_right_neighbor_lane_id();
  }
  right_neighbor_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_neighbor_lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.ScenarioFeature.right_neighbor_lane_id)
}

// optional double right_neighbor_lane_s = 1006;
bool ScenarioFeature::has_right_neighbor_lane_s() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ScenarioFeature::set_has_right_neighbor_lane_s() {
  _has_bits_[0] |= 0x00000100u;
}
void ScenarioFeature::clear_has_right_neighbor_lane_s() {
  _has_bits_[0] &= ~0x00000100u;
}
void ScenarioFeature::clear_right_neighbor_lane_s() {
  right_neighbor_lane_s_ = 0;
  clear_has_right_neighbor_lane_s();
}
 double ScenarioFeature::right_neighbor_lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.right_neighbor_lane_s)
  return right_neighbor_lane_s_;
}
 void ScenarioFeature::set_right_neighbor_lane_s(double value) {
  set_has_right_neighbor_lane_s();
  right_neighbor_lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.right_neighbor_lane_s)
}

// optional string junction_id = 2001;
bool ScenarioFeature::has_junction_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ScenarioFeature::set_has_junction_id() {
  _has_bits_[0] |= 0x00000200u;
}
void ScenarioFeature::clear_has_junction_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void ScenarioFeature::clear_junction_id() {
  junction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_junction_id();
}
 const ::std::string& ScenarioFeature::junction_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.junction_id)
  return junction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_junction_id(const ::std::string& value) {
  set_has_junction_id();
  junction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.junction_id)
}
 void ScenarioFeature::set_junction_id(const char* value) {
  set_has_junction_id();
  junction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.ScenarioFeature.junction_id)
}
 void ScenarioFeature::set_junction_id(const char* value, size_t size) {
  set_has_junction_id();
  junction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.ScenarioFeature.junction_id)
}
 ::std::string* ScenarioFeature::mutable_junction_id() {
  set_has_junction_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.ScenarioFeature.junction_id)
  return junction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScenarioFeature::release_junction_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.ScenarioFeature.junction_id)
  clear_has_junction_id();
  return junction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScenarioFeature::set_allocated_junction_id(::std::string* junction_id) {
  if (junction_id != NULL) {
    set_has_junction_id();
  } else {
    clear_has_junction_id();
  }
  junction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), junction_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.ScenarioFeature.junction_id)
}

// optional double dist_to_junction = 2002;
bool ScenarioFeature::has_dist_to_junction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ScenarioFeature::set_has_dist_to_junction() {
  _has_bits_[0] |= 0x00000400u;
}
void ScenarioFeature::clear_has_dist_to_junction() {
  _has_bits_[0] &= ~0x00000400u;
}
void ScenarioFeature::clear_dist_to_junction() {
  dist_to_junction_ = 0;
  clear_has_dist_to_junction();
}
 double ScenarioFeature::dist_to_junction() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.dist_to_junction)
  return dist_to_junction_;
}
 void ScenarioFeature::set_dist_to_junction(double value) {
  set_has_dist_to_junction();
  dist_to_junction_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.dist_to_junction)
}

// repeated int32 obstacle_id = 3001;
int ScenarioFeature::obstacle_id_size() const {
  return obstacle_id_.size();
}
void ScenarioFeature::clear_obstacle_id() {
  obstacle_id_.Clear();
}
 ::google::protobuf::int32 ScenarioFeature::obstacle_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ScenarioFeature.obstacle_id)
  return obstacle_id_.Get(index);
}
 void ScenarioFeature::set_obstacle_id(int index, ::google::protobuf::int32 value) {
  obstacle_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ScenarioFeature.obstacle_id)
}
 void ScenarioFeature::add_obstacle_id(::google::protobuf::int32 value) {
  obstacle_id_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.ScenarioFeature.obstacle_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScenarioFeature::obstacle_id() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.ScenarioFeature.obstacle_id)
  return obstacle_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScenarioFeature::mutable_obstacle_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.ScenarioFeature.obstacle_id)
  return &obstacle_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
