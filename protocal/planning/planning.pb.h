// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/planning.proto

#ifndef PROTOBUF_planning_2fplanning_2eproto__INCLUDED
#define PROTOBUF_planning_2fplanning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "canbus/chassis.pb.h"
#include "common/drive_state.pb.h"
#include "common/geometry.pb.h"
#include "common/header.pb.h"
#include "common/pnc_point.pb.h"
#include "common/vehicle_signal.pb.h"
#include "map/map_id.pb.h"
#include "planning/decision.pb.h"
#include "planning/planning_internal.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fplanning_2eproto();
void protobuf_AssignDesc_planning_2fplanning_2eproto();
void protobuf_ShutdownFile_planning_2fplanning_2eproto();

class ADCPathPoint;
class ADCSignals;
class ADCTrajectory;
class ADCTrajectoryPoint;
class ADCTrajectory_CriticalRegion;
class EStop;
class LatencyStats;
class TaskStats;

enum ADCSignals_SignalType {
  ADCSignals_SignalType_LEFT_TURN = 1,
  ADCSignals_SignalType_RIGHT_TURN = 2,
  ADCSignals_SignalType_LOW_BEAM_LIGHT = 3,
  ADCSignals_SignalType_HIGH_BEAM_LIGHT = 4,
  ADCSignals_SignalType_FOG_LIGHT = 5,
  ADCSignals_SignalType_EMERGENCY_LIGHT = 6
};
bool ADCSignals_SignalType_IsValid(int value);
const ADCSignals_SignalType ADCSignals_SignalType_SignalType_MIN = ADCSignals_SignalType_LEFT_TURN;
const ADCSignals_SignalType ADCSignals_SignalType_SignalType_MAX = ADCSignals_SignalType_EMERGENCY_LIGHT;
const int ADCSignals_SignalType_SignalType_ARRAYSIZE = ADCSignals_SignalType_SignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor();
inline const ::std::string& ADCSignals_SignalType_Name(ADCSignals_SignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCSignals_SignalType_descriptor(), value);
}
inline bool ADCSignals_SignalType_Parse(
    const ::std::string& name, ADCSignals_SignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCSignals_SignalType>(
    ADCSignals_SignalType_descriptor(), name, value);
}
enum ADCTrajectory_RightOfWayStatus {
  ADCTrajectory_RightOfWayStatus_UNPROTECTED = 0,
  ADCTrajectory_RightOfWayStatus_PROTECTED = 1
};
bool ADCTrajectory_RightOfWayStatus_IsValid(int value);
const ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN = ADCTrajectory_RightOfWayStatus_UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX = ADCTrajectory_RightOfWayStatus_PROTECTED;
const int ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor();
inline const ::std::string& ADCTrajectory_RightOfWayStatus_Name(ADCTrajectory_RightOfWayStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCTrajectory_RightOfWayStatus_descriptor(), value);
}
inline bool ADCTrajectory_RightOfWayStatus_Parse(
    const ::std::string& name, ADCTrajectory_RightOfWayStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_RightOfWayStatus>(
    ADCTrajectory_RightOfWayStatus_descriptor(), name, value);
}
enum ADCTrajectory_TrajectoryType {
  ADCTrajectory_TrajectoryType_UNKNOWN = 0,
  ADCTrajectory_TrajectoryType_NORMAL = 1,
  ADCTrajectory_TrajectoryType_PATH_FALLBACK = 2,
  ADCTrajectory_TrajectoryType_SPEED_FALLBACK = 3
};
bool ADCTrajectory_TrajectoryType_IsValid(int value);
const ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MIN = ADCTrajectory_TrajectoryType_UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MAX = ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
const int ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE = ADCTrajectory_TrajectoryType_TrajectoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor();
inline const ::std::string& ADCTrajectory_TrajectoryType_Name(ADCTrajectory_TrajectoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCTrajectory_TrajectoryType_descriptor(), value);
}
inline bool ADCTrajectory_TrajectoryType_Parse(
    const ::std::string& name, ADCTrajectory_TrajectoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_TrajectoryType>(
    ADCTrajectory_TrajectoryType_descriptor(), name, value);
}
// ===================================================================

class ADCTrajectoryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectoryPoint) */ {
 public:
  ADCTrajectoryPoint();
  virtual ~ADCTrajectoryPoint();

  ADCTrajectoryPoint(const ADCTrajectoryPoint& from);

  inline ADCTrajectoryPoint& operator=(const ADCTrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCTrajectoryPoint& default_instance();

  void Swap(ADCTrajectoryPoint* other);

  // implements Message ----------------------------------------------

  inline ADCTrajectoryPoint* New() const { return New(NULL); }

  ADCTrajectoryPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCTrajectoryPoint& from);
  void MergeFrom(const ADCTrajectoryPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCTrajectoryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double speed = 6;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  double speed() const;
  void set_speed(double value);

  // optional double acceleration_s = 7;
  bool has_acceleration_s() const;
  void clear_acceleration_s();
  static const int kAccelerationSFieldNumber = 7;
  double acceleration_s() const;
  void set_acceleration_s(double value);

  // optional double curvature = 8;
  bool has_curvature() const;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 8;
  double curvature() const;
  void set_curvature(double value);

  // optional double curvature_change_rate = 9;
  bool has_curvature_change_rate() const;
  void clear_curvature_change_rate();
  static const int kCurvatureChangeRateFieldNumber = 9;
  double curvature_change_rate() const;
  void set_curvature_change_rate(double value);

  // optional double relative_time = 10;
  bool has_relative_time() const;
  void clear_relative_time();
  static const int kRelativeTimeFieldNumber = 10;
  double relative_time() const;
  void set_relative_time(double value);

  // optional double theta = 11;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 11;
  double theta() const;
  void set_theta(double value);

  // optional double accumulated_s = 12;
  bool has_accumulated_s() const;
  void clear_accumulated_s();
  static const int kAccumulatedSFieldNumber = 12;
  double accumulated_s() const;
  void set_accumulated_s(double value);

  // optional double s = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_s() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_s();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kSFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double s() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_s(double value);

  // optional double l = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_l() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_l();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double l() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_l(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectoryPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_acceleration_s();
  inline void clear_has_acceleration_s();
  inline void set_has_curvature();
  inline void clear_has_curvature();
  inline void set_has_curvature_change_rate();
  inline void clear_has_curvature_change_rate();
  inline void set_has_relative_time();
  inline void clear_has_relative_time();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_accumulated_s();
  inline void clear_has_accumulated_s();
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_l();
  inline void clear_has_l();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double speed_;
  double acceleration_s_;
  double curvature_;
  double curvature_change_rate_;
  double relative_time_;
  double theta_;
  double accumulated_s_;
  double s_;
  double l_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCTrajectoryPoint* default_instance_;
};
// -------------------------------------------------------------------

class ADCPathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCPathPoint) */ {
 public:
  ADCPathPoint();
  virtual ~ADCPathPoint();

  ADCPathPoint(const ADCPathPoint& from);

  inline ADCPathPoint& operator=(const ADCPathPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCPathPoint& default_instance();

  void Swap(ADCPathPoint* other);

  // implements Message ----------------------------------------------

  inline ADCPathPoint* New() const { return New(NULL); }

  ADCPathPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCPathPoint& from);
  void MergeFrom(const ADCPathPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCPathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double curvature = 4;
  bool has_curvature() const;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 4;
  double curvature() const;
  void set_curvature(double value);

  // optional double heading = 5;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCPathPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_curvature();
  inline void clear_has_curvature();
  inline void set_has_heading();
  inline void clear_has_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double curvature_;
  double heading_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCPathPoint* default_instance_;
};
// -------------------------------------------------------------------

class ADCSignals : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCSignals) */ {
 public:
  ADCSignals();
  virtual ~ADCSignals();

  ADCSignals(const ADCSignals& from);

  inline ADCSignals& operator=(const ADCSignals& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCSignals& default_instance();

  void Swap(ADCSignals* other);

  // implements Message ----------------------------------------------

  inline ADCSignals* New() const { return New(NULL); }

  ADCSignals* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCSignals& from);
  void MergeFrom(const ADCSignals& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCSignals* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ADCSignals_SignalType SignalType;
  static const SignalType LEFT_TURN =
    ADCSignals_SignalType_LEFT_TURN;
  static const SignalType RIGHT_TURN =
    ADCSignals_SignalType_RIGHT_TURN;
  static const SignalType LOW_BEAM_LIGHT =
    ADCSignals_SignalType_LOW_BEAM_LIGHT;
  static const SignalType HIGH_BEAM_LIGHT =
    ADCSignals_SignalType_HIGH_BEAM_LIGHT;
  static const SignalType FOG_LIGHT =
    ADCSignals_SignalType_FOG_LIGHT;
  static const SignalType EMERGENCY_LIGHT =
    ADCSignals_SignalType_EMERGENCY_LIGHT;
  static inline bool SignalType_IsValid(int value) {
    return ADCSignals_SignalType_IsValid(value);
  }
  static const SignalType SignalType_MIN =
    ADCSignals_SignalType_SignalType_MIN;
  static const SignalType SignalType_MAX =
    ADCSignals_SignalType_SignalType_MAX;
  static const int SignalType_ARRAYSIZE =
    ADCSignals_SignalType_SignalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalType_descriptor() {
    return ADCSignals_SignalType_descriptor();
  }
  static inline const ::std::string& SignalType_Name(SignalType value) {
    return ADCSignals_SignalType_Name(value);
  }
  static inline bool SignalType_Parse(const ::std::string& name,
      SignalType* value) {
    return ADCSignals_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  int signal_size() const;
  void clear_signal();
  static const int kSignalFieldNumber = 1;
  ::apollo::planning::ADCSignals_SignalType signal(int index) const;
  void set_signal(int index, ::apollo::planning::ADCSignals_SignalType value);
  void add_signal(::apollo::planning::ADCSignals_SignalType value);
  const ::google::protobuf::RepeatedField<int>& signal() const;
  ::google::protobuf::RepeatedField<int>* mutable_signal();

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCSignals)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> signal_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCSignals* default_instance_;
};
// -------------------------------------------------------------------

class EStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EStop) */ {
 public:
  EStop();
  virtual ~EStop();

  EStop(const EStop& from);

  inline EStop& operator=(const EStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EStop& default_instance();

  void Swap(EStop* other);

  // implements Message ----------------------------------------------

  inline EStop* New() const { return New(NULL); }

  EStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EStop& from);
  void MergeFrom(const EStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_estop = 1;
  bool has_is_estop() const;
  void clear_is_estop();
  static const int kIsEstopFieldNumber = 1;
  bool is_estop() const;
  void set_is_estop(bool value);

  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:apollo.planning.EStop)
 private:
  inline void set_has_is_estop();
  inline void clear_has_is_estop();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  bool is_estop_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static EStop* default_instance_;
};
// -------------------------------------------------------------------

class TaskStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TaskStats) */ {
 public:
  TaskStats();
  virtual ~TaskStats();

  TaskStats(const TaskStats& from);

  inline TaskStats& operator=(const TaskStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskStats& default_instance();

  void Swap(TaskStats* other);

  // implements Message ----------------------------------------------

  inline TaskStats* New() const { return New(NULL); }

  TaskStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskStats& from);
  void MergeFrom(const TaskStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double time_ms = 2;
  bool has_time_ms() const;
  void clear_time_ms();
  static const int kTimeMsFieldNumber = 2;
  double time_ms() const;
  void set_time_ms(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.TaskStats)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time_ms();
  inline void clear_has_time_ms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double time_ms_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static TaskStats* default_instance_;
};
// -------------------------------------------------------------------

class LatencyStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LatencyStats) */ {
 public:
  LatencyStats();
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyStats& default_instance();

  void Swap(LatencyStats* other);

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const { return New(NULL); }

  LatencyStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LatencyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  void clear_total_time_ms();
  static const int kTotalTimeMsFieldNumber = 1;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  // repeated .apollo.planning.TaskStats task_stats = 2;
  int task_stats_size() const;
  void clear_task_stats();
  static const int kTaskStatsFieldNumber = 2;
  const ::apollo::planning::TaskStats& task_stats(int index) const;
  ::apollo::planning::TaskStats* mutable_task_stats(int index);
  ::apollo::planning::TaskStats* add_task_stats();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >*
      mutable_task_stats();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >&
      task_stats() const;

  // optional double init_frame_time_ms = 3;
  bool has_init_frame_time_ms() const;
  void clear_init_frame_time_ms();
  static const int kInitFrameTimeMsFieldNumber = 3;
  double init_frame_time_ms() const;
  void set_init_frame_time_ms(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.LatencyStats)
 private:
  inline void set_has_total_time_ms();
  inline void clear_has_total_time_ms();
  inline void set_has_init_frame_time_ms();
  inline void clear_has_init_frame_time_ms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double total_time_ms_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats > task_stats_;
  double init_frame_time_ms_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static LatencyStats* default_instance_;
};
// -------------------------------------------------------------------

class ADCTrajectory_CriticalRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectory.CriticalRegion) */ {
 public:
  ADCTrajectory_CriticalRegion();
  virtual ~ADCTrajectory_CriticalRegion();

  ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from);

  inline ADCTrajectory_CriticalRegion& operator=(const ADCTrajectory_CriticalRegion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCTrajectory_CriticalRegion& default_instance();

  void Swap(ADCTrajectory_CriticalRegion* other);

  // implements Message ----------------------------------------------

  inline ADCTrajectory_CriticalRegion* New() const { return New(NULL); }

  ADCTrajectory_CriticalRegion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCTrajectory_CriticalRegion& from);
  void MergeFrom(const ADCTrajectory_CriticalRegion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCTrajectory_CriticalRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.Polygon region = 1;
  int region_size() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::apollo::common::Polygon& region(int index) const;
  ::apollo::common::Polygon* mutable_region(int index);
  ::apollo::common::Polygon* add_region();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Polygon >*
      mutable_region();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Polygon >&
      region() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectory.CriticalRegion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Polygon > region_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCTrajectory_CriticalRegion* default_instance_;
};
// -------------------------------------------------------------------

class ADCTrajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectory) */ {
 public:
  ADCTrajectory();
  virtual ~ADCTrajectory();

  ADCTrajectory(const ADCTrajectory& from);

  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCTrajectory& default_instance();

  void Swap(ADCTrajectory* other);

  // implements Message ----------------------------------------------

  inline ADCTrajectory* New() const { return New(NULL); }

  ADCTrajectory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCTrajectory& from);
  void MergeFrom(const ADCTrajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADCTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ADCTrajectory_CriticalRegion CriticalRegion;

  typedef ADCTrajectory_RightOfWayStatus RightOfWayStatus;
  static const RightOfWayStatus UNPROTECTED =
    ADCTrajectory_RightOfWayStatus_UNPROTECTED;
  static const RightOfWayStatus PROTECTED =
    ADCTrajectory_RightOfWayStatus_PROTECTED;
  static inline bool RightOfWayStatus_IsValid(int value) {
    return ADCTrajectory_RightOfWayStatus_IsValid(value);
  }
  static const RightOfWayStatus RightOfWayStatus_MIN =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN;
  static const RightOfWayStatus RightOfWayStatus_MAX =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX;
  static const int RightOfWayStatus_ARRAYSIZE =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RightOfWayStatus_descriptor() {
    return ADCTrajectory_RightOfWayStatus_descriptor();
  }
  static inline const ::std::string& RightOfWayStatus_Name(RightOfWayStatus value) {
    return ADCTrajectory_RightOfWayStatus_Name(value);
  }
  static inline bool RightOfWayStatus_Parse(const ::std::string& name,
      RightOfWayStatus* value) {
    return ADCTrajectory_RightOfWayStatus_Parse(name, value);
  }

  typedef ADCTrajectory_TrajectoryType TrajectoryType;
  static const TrajectoryType UNKNOWN =
    ADCTrajectory_TrajectoryType_UNKNOWN;
  static const TrajectoryType NORMAL =
    ADCTrajectory_TrajectoryType_NORMAL;
  static const TrajectoryType PATH_FALLBACK =
    ADCTrajectory_TrajectoryType_PATH_FALLBACK;
  static const TrajectoryType SPEED_FALLBACK =
    ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
  static inline bool TrajectoryType_IsValid(int value) {
    return ADCTrajectory_TrajectoryType_IsValid(value);
  }
  static const TrajectoryType TrajectoryType_MIN =
    ADCTrajectory_TrajectoryType_TrajectoryType_MIN;
  static const TrajectoryType TrajectoryType_MAX =
    ADCTrajectory_TrajectoryType_TrajectoryType_MAX;
  static const int TrajectoryType_ARRAYSIZE =
    ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrajectoryType_descriptor() {
    return ADCTrajectory_TrajectoryType_descriptor();
  }
  static inline const ::std::string& TrajectoryType_Name(TrajectoryType value) {
    return ADCTrajectory_TrajectoryType_Name(value);
  }
  static inline bool TrajectoryType_Parse(const ::std::string& name,
      TrajectoryType* value) {
    return ADCTrajectory_TrajectoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional double total_path_length = 2;
  bool has_total_path_length() const;
  void clear_total_path_length();
  static const int kTotalPathLengthFieldNumber = 2;
  double total_path_length() const;
  void set_total_path_length(double value);

  // optional double total_path_time = 3;
  bool has_total_path_time() const;
  void clear_total_path_time();
  static const int kTotalPathTimeFieldNumber = 3;
  double total_path_time() const;
  void set_total_path_time(double value);

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 12;
  const ::apollo::common::TrajectoryPoint& trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::apollo::common::TrajectoryPoint* add_trajectory_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      trajectory_point() const;

  // optional .apollo.planning.EStop estop = 6;
  bool has_estop() const;
  void clear_estop();
  static const int kEstopFieldNumber = 6;
  const ::apollo::planning::EStop& estop() const;
  ::apollo::planning::EStop* mutable_estop();
  ::apollo::planning::EStop* release_estop();
  void set_allocated_estop(::apollo::planning::EStop* estop);

  // repeated .apollo.common.PathPoint path_point = 13;
  int path_point_size() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 13;
  const ::apollo::common::PathPoint& path_point(int index) const;
  ::apollo::common::PathPoint* mutable_path_point(int index);
  ::apollo::common::PathPoint* add_path_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
      mutable_path_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
      path_point() const;

  // optional bool is_replan = 9 [default = false];
  bool has_is_replan() const;
  void clear_is_replan();
  static const int kIsReplanFieldNumber = 9;
  bool is_replan() const;
  void set_is_replan(bool value);

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  bool has_gear() const;
  void clear_gear();
  static const int kGearFieldNumber = 10;
  ::apollo::canbus::Chassis_GearPosition gear() const;
  void set_gear(::apollo::canbus::Chassis_GearPosition value);

  // optional .apollo.planning.DecisionResult decision = 14;
  bool has_decision() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 14;
  const ::apollo::planning::DecisionResult& decision() const;
  ::apollo::planning::DecisionResult* mutable_decision();
  ::apollo::planning::DecisionResult* release_decision();
  void set_allocated_decision(::apollo::planning::DecisionResult* decision);

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  bool has_latency_stats() const;
  void clear_latency_stats();
  static const int kLatencyStatsFieldNumber = 15;
  const ::apollo::planning::LatencyStats& latency_stats() const;
  ::apollo::planning::LatencyStats* mutable_latency_stats();
  ::apollo::planning::LatencyStats* release_latency_stats();
  void set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats);

  // optional .apollo.common.Header routing_header = 16;
  bool has_routing_header() const;
  void clear_routing_header();
  static const int kRoutingHeaderFieldNumber = 16;
  const ::apollo::common::Header& routing_header() const;
  ::apollo::common::Header* mutable_routing_header();
  ::apollo::common::Header* release_routing_header();
  void set_allocated_routing_header(::apollo::common::Header* routing_header);

  // optional .apollo.planning_internal.Debug debug = 8;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 8;
  const ::apollo::planning_internal::Debug& debug() const;
  ::apollo::planning_internal::Debug* mutable_debug();
  ::apollo::planning_internal::Debug* release_debug();
  void set_allocated_debug(::apollo::planning_internal::Debug* debug);

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int adc_path_point_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_adc_path_point();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAdcPathPointFieldNumber = 7;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::planning::ADCPathPoint& adc_path_point(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::ADCPathPoint* mutable_adc_path_point(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::ADCPathPoint* add_adc_path_point();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
      mutable_adc_path_point();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
      adc_path_point() const;

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int adc_trajectory_point_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_adc_trajectory_point();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAdcTrajectoryPointFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::planning::ADCTrajectoryPoint& adc_trajectory_point(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::ADCTrajectoryPoint* mutable_adc_trajectory_point(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::planning::ADCTrajectoryPoint* add_adc_trajectory_point();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
      mutable_adc_trajectory_point();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
      adc_trajectory_point() const;

  // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kSignalFieldNumber = 11;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::common::VehicleSignal& signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::VehicleSignal* mutable_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::VehicleSignal* release_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_signal(::apollo::common::VehicleSignal* signal);

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  bool has_right_of_way_status() const;
  void clear_right_of_way_status();
  static const int kRightOfWayStatusFieldNumber = 17;
  ::apollo::planning::ADCTrajectory_RightOfWayStatus right_of_way_status() const;
  void set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value);

  // repeated .apollo.hdmap.Id lane_id = 18;
  int lane_id_size() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 18;
  const ::apollo::hdmap::Id& lane_id(int index) const;
  ::apollo::hdmap::Id* mutable_lane_id(int index);
  ::apollo::hdmap::Id* add_lane_id();
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
      lane_id() const;

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  bool has_engage_advice() const;
  void clear_engage_advice();
  static const int kEngageAdviceFieldNumber = 19;
  const ::apollo::common::EngageAdvice& engage_advice() const;
  ::apollo::common::EngageAdvice* mutable_engage_advice();
  ::apollo::common::EngageAdvice* release_engage_advice();
  void set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice);

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  bool has_critical_region() const;
  void clear_critical_region();
  static const int kCriticalRegionFieldNumber = 20;
  const ::apollo::planning::ADCTrajectory_CriticalRegion& critical_region() const;
  ::apollo::planning::ADCTrajectory_CriticalRegion* mutable_critical_region();
  ::apollo::planning::ADCTrajectory_CriticalRegion* release_critical_region();
  void set_allocated_critical_region(::apollo::planning::ADCTrajectory_CriticalRegion* critical_region);

  // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  bool has_trajectory_type() const;
  void clear_trajectory_type();
  static const int kTrajectoryTypeFieldNumber = 21;
  ::apollo::planning::ADCTrajectory_TrajectoryType trajectory_type() const;
  void set_trajectory_type(::apollo::planning::ADCTrajectory_TrajectoryType value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectory)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_total_path_length();
  inline void clear_has_total_path_length();
  inline void set_has_total_path_time();
  inline void clear_has_total_path_time();
  inline void set_has_estop();
  inline void clear_has_estop();
  inline void set_has_is_replan();
  inline void clear_has_is_replan();
  inline void set_has_gear();
  inline void clear_has_gear();
  inline void set_has_decision();
  inline void clear_has_decision();
  inline void set_has_latency_stats();
  inline void clear_has_latency_stats();
  inline void set_has_routing_header();
  inline void clear_has_routing_header();
  inline void set_has_debug();
  inline void clear_has_debug();
  inline void set_has_signal();
  inline void clear_has_signal();
  inline void set_has_right_of_way_status();
  inline void clear_has_right_of_way_status();
  inline void set_has_engage_advice();
  inline void clear_has_engage_advice();
  inline void set_has_critical_region();
  inline void clear_has_critical_region();
  inline void set_has_trajectory_type();
  inline void clear_has_trajectory_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  double total_path_length_;
  double total_path_time_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint > trajectory_point_;
  ::apollo::planning::EStop* estop_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint > path_point_;
  bool is_replan_;
  int gear_;
  ::apollo::planning::DecisionResult* decision_;
  ::apollo::planning::LatencyStats* latency_stats_;
  ::apollo::common::Header* routing_header_;
  ::apollo::planning_internal::Debug* debug_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint > adc_path_point_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint > adc_trajectory_point_;
  ::apollo::common::VehicleSignal* signal_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id > lane_id_;
  ::apollo::common::EngageAdvice* engage_advice_;
  int right_of_way_status_;
  int trajectory_type_;
  ::apollo::planning::ADCTrajectory_CriticalRegion* critical_region_;
  friend void  protobuf_AddDesc_planning_2fplanning_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_2eproto();

  void InitAsDefaultInstance();
  static ADCTrajectory* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectoryPoint

// optional double x = 1;
inline bool ADCTrajectoryPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADCTrajectoryPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADCTrajectoryPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADCTrajectoryPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double ADCTrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.x)
  return x_;
}
inline void ADCTrajectoryPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.x)
}

// optional double y = 2;
inline bool ADCTrajectoryPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADCTrajectoryPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADCTrajectoryPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADCTrajectoryPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double ADCTrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.y)
  return y_;
}
inline void ADCTrajectoryPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.y)
}

// optional double z = 3;
inline bool ADCTrajectoryPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADCTrajectoryPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADCTrajectoryPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADCTrajectoryPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double ADCTrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.z)
  return z_;
}
inline void ADCTrajectoryPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.z)
}

// optional double speed = 6;
inline bool ADCTrajectoryPoint::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADCTrajectoryPoint::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ADCTrajectoryPoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ADCTrajectoryPoint::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double ADCTrajectoryPoint::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.speed)
  return speed_;
}
inline void ADCTrajectoryPoint::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.speed)
}

// optional double acceleration_s = 7;
inline bool ADCTrajectoryPoint::has_acceleration_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ADCTrajectoryPoint::set_has_acceleration_s() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ADCTrajectoryPoint::clear_has_acceleration_s() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ADCTrajectoryPoint::clear_acceleration_s() {
  acceleration_s_ = 0;
  clear_has_acceleration_s();
}
inline double ADCTrajectoryPoint::acceleration_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.acceleration_s)
  return acceleration_s_;
}
inline void ADCTrajectoryPoint::set_acceleration_s(double value) {
  set_has_acceleration_s();
  acceleration_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.acceleration_s)
}

// optional double curvature = 8;
inline bool ADCTrajectoryPoint::has_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ADCTrajectoryPoint::set_has_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ADCTrajectoryPoint::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ADCTrajectoryPoint::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
inline double ADCTrajectoryPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature)
  return curvature_;
}
inline void ADCTrajectoryPoint::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature)
}

// optional double curvature_change_rate = 9;
inline bool ADCTrajectoryPoint::has_curvature_change_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ADCTrajectoryPoint::set_has_curvature_change_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ADCTrajectoryPoint::clear_has_curvature_change_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ADCTrajectoryPoint::clear_curvature_change_rate() {
  curvature_change_rate_ = 0;
  clear_has_curvature_change_rate();
}
inline double ADCTrajectoryPoint::curvature_change_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
  return curvature_change_rate_;
}
inline void ADCTrajectoryPoint::set_curvature_change_rate(double value) {
  set_has_curvature_change_rate();
  curvature_change_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
}

// optional double relative_time = 10;
inline bool ADCTrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ADCTrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ADCTrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ADCTrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
inline double ADCTrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.relative_time)
  return relative_time_;
}
inline void ADCTrajectoryPoint::set_relative_time(double value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.relative_time)
}

// optional double theta = 11;
inline bool ADCTrajectoryPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ADCTrajectoryPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ADCTrajectoryPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ADCTrajectoryPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double ADCTrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.theta)
  return theta_;
}
inline void ADCTrajectoryPoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.theta)
}

// optional double accumulated_s = 12;
inline bool ADCTrajectoryPoint::has_accumulated_s() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ADCTrajectoryPoint::set_has_accumulated_s() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ADCTrajectoryPoint::clear_has_accumulated_s() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ADCTrajectoryPoint::clear_accumulated_s() {
  accumulated_s_ = 0;
  clear_has_accumulated_s();
}
inline double ADCTrajectoryPoint::accumulated_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.accumulated_s)
  return accumulated_s_;
}
inline void ADCTrajectoryPoint::set_accumulated_s(double value) {
  set_has_accumulated_s();
  accumulated_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.accumulated_s)
}

// optional double s = 4 [deprecated = true];
inline bool ADCTrajectoryPoint::has_s() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ADCTrajectoryPoint::set_has_s() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ADCTrajectoryPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ADCTrajectoryPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double ADCTrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.s)
  return s_;
}
inline void ADCTrajectoryPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.s)
}

// optional double l = 5 [deprecated = true];
inline bool ADCTrajectoryPoint::has_l() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ADCTrajectoryPoint::set_has_l() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ADCTrajectoryPoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ADCTrajectoryPoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double ADCTrajectoryPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.l)
  return l_;
}
inline void ADCTrajectoryPoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.l)
}

// -------------------------------------------------------------------

// ADCPathPoint

// optional double x = 1;
inline bool ADCPathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADCPathPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADCPathPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADCPathPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double ADCPathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.x)
  return x_;
}
inline void ADCPathPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.x)
}

// optional double y = 2;
inline bool ADCPathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADCPathPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADCPathPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADCPathPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double ADCPathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.y)
  return y_;
}
inline void ADCPathPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.y)
}

// optional double z = 3;
inline bool ADCPathPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADCPathPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADCPathPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADCPathPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double ADCPathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.z)
  return z_;
}
inline void ADCPathPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.z)
}

// optional double curvature = 4;
inline bool ADCPathPoint::has_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADCPathPoint::set_has_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ADCPathPoint::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ADCPathPoint::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
inline double ADCPathPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.curvature)
  return curvature_;
}
inline void ADCPathPoint::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.curvature)
}

// optional double heading = 5;
inline bool ADCPathPoint::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ADCPathPoint::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ADCPathPoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ADCPathPoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double ADCPathPoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.heading)
  return heading_;
}
inline void ADCPathPoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.heading)
}

// -------------------------------------------------------------------

// ADCSignals

// repeated .apollo.planning.ADCSignals.SignalType signal = 1;
inline int ADCSignals::signal_size() const {
  return signal_.size();
}
inline void ADCSignals::clear_signal() {
  signal_.Clear();
}
inline ::apollo::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCSignals.signal)
  return static_cast< ::apollo::planning::ADCSignals_SignalType >(signal_.Get(index));
}
inline void ADCSignals::set_signal(int index, ::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCSignals.signal)
}
inline void ADCSignals::add_signal(::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ADCSignals.signal)
}
inline const ::google::protobuf::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCSignals.signal)
  return signal_;
}
inline ::google::protobuf::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCSignals.signal)
  return &signal_;
}

// -------------------------------------------------------------------

// EStop

// optional bool is_estop = 1;
inline bool EStop::has_is_estop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EStop::set_has_is_estop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EStop::clear_has_is_estop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EStop::clear_is_estop() {
  is_estop_ = false;
  clear_has_is_estop();
}
inline bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.is_estop)
  return is_estop_;
}
inline void EStop::set_is_estop(bool value) {
  set_has_is_estop();
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.is_estop)
}

// optional string reason = 2;
inline bool EStop::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EStop::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.reason)
}
inline void EStop::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.EStop.reason)
}
inline void EStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.EStop.reason)
}
inline ::std::string* EStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.EStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EStop.reason)
}

// -------------------------------------------------------------------

// TaskStats

// optional string name = 1;
inline bool TaskStats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskStats::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.name)
}
inline void TaskStats::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.TaskStats.name)
}
inline void TaskStats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.TaskStats.name)
}
inline ::std::string* TaskStats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskStats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskStats.name)
}

// optional double time_ms = 2;
inline bool TaskStats::has_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskStats::set_has_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskStats::clear_has_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskStats::clear_time_ms() {
  time_ms_ = 0;
  clear_has_time_ms();
}
inline double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.time_ms)
  return time_ms_;
}
inline void TaskStats::set_time_ms(double value) {
  set_has_time_ms();
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.time_ms)
}

// -------------------------------------------------------------------

// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyStats::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyStats::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.total_time_ms)
  return total_time_ms_;
}
inline void LatencyStats::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.total_time_ms)
}

// repeated .apollo.planning.TaskStats task_stats = 2;
inline int LatencyStats::task_stats_size() const {
  return task_stats_.size();
}
inline void LatencyStats::clear_task_stats() {
  task_stats_.Clear();
}
inline const ::apollo::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Get(index);
}
inline ::apollo::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Mutable(index);
}
inline ::apollo::planning::TaskStats* LatencyStats::add_task_stats() {
  // @@protoc_insertion_point(field_add:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.LatencyStats.task_stats)
  return &task_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:apollo.planning.LatencyStats.task_stats)
  return task_stats_;
}

// optional double init_frame_time_ms = 3;
inline bool LatencyStats::has_init_frame_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatencyStats::set_has_init_frame_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatencyStats::clear_has_init_frame_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatencyStats::clear_init_frame_time_ms() {
  init_frame_time_ms_ = 0;
  clear_has_init_frame_time_ms();
}
inline double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.init_frame_time_ms)
  return init_frame_time_ms_;
}
inline void LatencyStats::set_init_frame_time_ms(double value) {
  set_has_init_frame_time_ms();
  init_frame_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.init_frame_time_ms)
}

// -------------------------------------------------------------------

// ADCTrajectory_CriticalRegion

// repeated .apollo.common.Polygon region = 1;
inline int ADCTrajectory_CriticalRegion::region_size() const {
  return region_.size();
}
inline void ADCTrajectory_CriticalRegion::clear_region() {
  region_.Clear();
}
inline const ::apollo::common::Polygon& ADCTrajectory_CriticalRegion::region(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Get(index);
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Mutable(index);
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::add_region() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Polygon >*
ADCTrajectory_CriticalRegion::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return &region_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Polygon >&
ADCTrajectory_CriticalRegion::region() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_;
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .apollo.common.Header header = 1;
inline bool ADCTrajectory::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADCTrajectory::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADCTrajectory::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADCTrajectory::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* ADCTrajectory::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.header)
  return header_;
}
inline ::apollo::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
inline bool ADCTrajectory::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADCTrajectory::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADCTrajectory::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
  clear_has_total_path_length();
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
inline void ADCTrajectory::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
inline bool ADCTrajectory::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADCTrajectory::set_has_total_path_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADCTrajectory::clear_has_total_path_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
  clear_has_total_path_time();
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
inline void ADCTrajectory::set_total_path_time(double value) {
  set_has_total_path_time();
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_time)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
inline int ADCTrajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
inline const ::apollo::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// optional .apollo.planning.EStop estop = 6;
inline bool ADCTrajectory::has_estop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ADCTrajectory::set_has_estop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ADCTrajectory::clear_has_estop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ADCTrajectory::clear_estop() {
  if (estop_ != NULL) estop_->::apollo::planning::EStop::Clear();
  clear_has_estop();
}
inline const ::apollo::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.estop)
  return estop_ != NULL ? *estop_ : *default_instance_->estop_;
}
inline ::apollo::planning::EStop* ADCTrajectory::mutable_estop() {
  set_has_estop();
  if (estop_ == NULL) {
    estop_ = new ::apollo::planning::EStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.estop)
  return estop_;
}
inline ::apollo::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.estop)
  clear_has_estop();
  ::apollo::planning::EStop* temp = estop_;
  estop_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_estop(::apollo::planning::EStop* estop) {
  delete estop_;
  estop_ = estop;
  if (estop) {
    set_has_estop();
  } else {
    clear_has_estop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.estop)
}

// repeated .apollo.common.PathPoint path_point = 13;
inline int ADCTrajectory::path_point_size() const {
  return path_point_.size();
}
inline void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
inline const ::apollo::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Get(index);
}
inline ::apollo::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
inline ::apollo::common::PathPoint* ADCTrajectory::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.path_point)
  return &path_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.path_point)
  return path_point_;
}

// optional bool is_replan = 9 [default = false];
inline bool ADCTrajectory::has_is_replan() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ADCTrajectory::set_has_is_replan() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ADCTrajectory::clear_has_is_replan() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
  clear_has_is_replan();
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.is_replan)
  return is_replan_;
}
inline void ADCTrajectory::set_is_replan(bool value) {
  set_has_is_replan();
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.is_replan)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 10;
inline bool ADCTrajectory::has_gear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ADCTrajectory::set_has_gear() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ADCTrajectory::clear_has_gear() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ADCTrajectory::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::apollo::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.gear)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
inline void ADCTrajectory::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.gear)
}

// optional .apollo.planning.DecisionResult decision = 14;
inline bool ADCTrajectory::has_decision() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ADCTrajectory::set_has_decision() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ADCTrajectory::clear_has_decision() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ADCTrajectory::clear_decision() {
  if (decision_ != NULL) decision_->::apollo::planning::DecisionResult::Clear();
  clear_has_decision();
}
inline const ::apollo::planning::DecisionResult& ADCTrajectory::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.decision)
  return decision_ != NULL ? *decision_ : *default_instance_->decision_;
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::apollo::planning::DecisionResult;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.decision)
  return decision_;
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.decision)
  clear_has_decision();
  ::apollo::planning::DecisionResult* temp = decision_;
  decision_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_decision(::apollo::planning::DecisionResult* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.decision)
}

// optional .apollo.planning.LatencyStats latency_stats = 15;
inline bool ADCTrajectory::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ADCTrajectory::set_has_latency_stats() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ADCTrajectory::clear_has_latency_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ADCTrajectory::clear_latency_stats() {
  if (latency_stats_ != NULL) latency_stats_->::apollo::planning::LatencyStats::Clear();
  clear_has_latency_stats();
}
inline const ::apollo::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_ : *default_instance_->latency_stats_;
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  set_has_latency_stats();
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::planning::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.latency_stats)
  return latency_stats_;
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.latency_stats)
  clear_has_latency_stats();
  ::apollo::planning::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    set_has_latency_stats();
  } else {
    clear_has_latency_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.latency_stats)
}

// optional .apollo.common.Header routing_header = 16;
inline bool ADCTrajectory::has_routing_header() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ADCTrajectory::set_has_routing_header() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ADCTrajectory::clear_has_routing_header() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ADCTrajectory::clear_routing_header() {
  if (routing_header_ != NULL) routing_header_->::apollo::common::Header::Clear();
  clear_has_routing_header();
}
inline const ::apollo::common::Header& ADCTrajectory::routing_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.routing_header)
  return routing_header_ != NULL ? *routing_header_ : *default_instance_->routing_header_;
}
inline ::apollo::common::Header* ADCTrajectory::mutable_routing_header() {
  set_has_routing_header();
  if (routing_header_ == NULL) {
    routing_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.routing_header)
  return routing_header_;
}
inline ::apollo::common::Header* ADCTrajectory::release_routing_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.routing_header)
  clear_has_routing_header();
  ::apollo::common::Header* temp = routing_header_;
  routing_header_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_routing_header(::apollo::common::Header* routing_header) {
  delete routing_header_;
  routing_header_ = routing_header;
  if (routing_header) {
    set_has_routing_header();
  } else {
    clear_has_routing_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.routing_header)
}

// optional .apollo.planning_internal.Debug debug = 8;
inline bool ADCTrajectory::has_debug() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ADCTrajectory::set_has_debug() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ADCTrajectory::clear_has_debug() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ADCTrajectory::clear_debug() {
  if (debug_ != NULL) debug_->::apollo::planning_internal::Debug::Clear();
  clear_has_debug();
}
inline const ::apollo::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  set_has_debug();
  if (debug_ == NULL) {
    debug_ = new ::apollo::planning_internal::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.debug)
  return debug_;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.debug)
  clear_has_debug();
  ::apollo::planning_internal::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_debug(::apollo::planning_internal::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.debug)
}

// repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
inline int ADCTrajectory::adc_path_point_size() const {
  return adc_path_point_.size();
}
inline void ADCTrajectory::clear_adc_path_point() {
  adc_path_point_.Clear();
}
inline const ::apollo::planning::ADCPathPoint& ADCTrajectory::adc_path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Get(index);
}
inline ::apollo::planning::ADCPathPoint* ADCTrajectory::mutable_adc_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Mutable(index);
}
inline ::apollo::planning::ADCPathPoint* ADCTrajectory::add_adc_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
ADCTrajectory::mutable_adc_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_path_point)
  return &adc_path_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
ADCTrajectory::adc_path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_;
}

// repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
inline int ADCTrajectory::adc_trajectory_point_size() const {
  return adc_trajectory_point_.size();
}
inline void ADCTrajectory::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
inline const ::apollo::planning::ADCTrajectoryPoint& ADCTrajectory::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Get(index);
}
inline ::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Mutable(index);
}
inline ::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::add_adc_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
ADCTrajectory::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return &adc_trajectory_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
ADCTrajectory::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_;
}

// optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
inline bool ADCTrajectory::has_signal() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ADCTrajectory::set_has_signal() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ADCTrajectory::clear_has_signal() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ADCTrajectory::clear_signal() {
  if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_signal();
}
inline const ::apollo::common::VehicleSignal& ADCTrajectory::signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
inline ::apollo::common::VehicleSignal* ADCTrajectory::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signal)
  return signal_;
}
inline ::apollo::common::VehicleSignal* ADCTrajectory::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signal)
  clear_has_signal();
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signal)
}

// optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
inline bool ADCTrajectory::has_right_of_way_status() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ADCTrajectory::set_has_right_of_way_status() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ADCTrajectory::clear_has_right_of_way_status() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
  clear_has_right_of_way_status();
}
inline ::apollo::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.right_of_way_status)
  return static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
inline void ADCTrajectory::set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  set_has_right_of_way_status();
  right_of_way_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.right_of_way_status)
}

// repeated .apollo.hdmap.Id lane_id = 18;
inline int ADCTrajectory::lane_id_size() const {
  return lane_id_.size();
}
inline void ADCTrajectory::clear_lane_id() {
  lane_id_.Clear();
}
inline const ::apollo::hdmap::Id& ADCTrajectory::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Get(index);
}
inline ::apollo::hdmap::Id* ADCTrajectory::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Mutable(index);
}
inline ::apollo::hdmap::Id* ADCTrajectory::add_lane_id() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
ADCTrajectory::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.lane_id)
  return &lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
ADCTrajectory::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_;
}

// optional .apollo.common.EngageAdvice engage_advice = 19;
inline bool ADCTrajectory::has_engage_advice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ADCTrajectory::set_has_engage_advice() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ADCTrajectory::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ADCTrajectory::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
inline const ::apollo::common::EngageAdvice& ADCTrajectory::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_ : *default_instance_->engage_advice_;
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::apollo::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.engage_advice)
  return engage_advice_;
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.engage_advice)
  clear_has_engage_advice();
  ::apollo::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.engage_advice)
}

// optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
inline bool ADCTrajectory::has_critical_region() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ADCTrajectory::set_has_critical_region() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ADCTrajectory::clear_has_critical_region() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ADCTrajectory::clear_critical_region() {
  if (critical_region_ != NULL) critical_region_->::apollo::planning::ADCTrajectory_CriticalRegion::Clear();
  clear_has_critical_region();
}
inline const ::apollo::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::critical_region() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.critical_region)
  return critical_region_ != NULL ? *critical_region_ : *default_instance_->critical_region_;
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::mutable_critical_region() {
  set_has_critical_region();
  if (critical_region_ == NULL) {
    critical_region_ = new ::apollo::planning::ADCTrajectory_CriticalRegion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.critical_region)
  return critical_region_;
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::release_critical_region() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.critical_region)
  clear_has_critical_region();
  ::apollo::planning::ADCTrajectory_CriticalRegion* temp = critical_region_;
  critical_region_ = NULL;
  return temp;
}
inline void ADCTrajectory::set_allocated_critical_region(::apollo::planning::ADCTrajectory_CriticalRegion* critical_region) {
  delete critical_region_;
  critical_region_ = critical_region;
  if (critical_region) {
    set_has_critical_region();
  } else {
    clear_has_critical_region();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.critical_region)
}

// optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
inline bool ADCTrajectory::has_trajectory_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ADCTrajectory::set_has_trajectory_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ADCTrajectory::clear_has_trajectory_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ADCTrajectory::clear_trajectory_type() {
  trajectory_type_ = 0;
  clear_has_trajectory_type();
}
inline ::apollo::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_type)
  return static_cast< ::apollo::planning::ADCTrajectory_TrajectoryType >(trajectory_type_);
}
inline void ADCTrajectory::set_trajectory_type(::apollo::planning::ADCTrajectory_TrajectoryType value) {
  assert(::apollo::planning::ADCTrajectory_TrajectoryType_IsValid(value));
  set_has_trajectory_type();
  trajectory_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.trajectory_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::ADCSignals_SignalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCSignals_SignalType>() {
  return ::apollo::planning::ADCSignals_SignalType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ADCTrajectory_RightOfWayStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCTrajectory_RightOfWayStatus>() {
  return ::apollo::planning::ADCTrajectory_RightOfWayStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ADCTrajectory_TrajectoryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCTrajectory_TrajectoryType>() {
  return ::apollo::planning::ADCTrajectory_TrajectoryType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fplanning_2eproto__INCLUDED
