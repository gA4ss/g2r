// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: canbus/chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "canbus/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace canbus {

namespace {

const ::google::protobuf::Descriptor* Chassis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chassis_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChassisGPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChassisGPS_reflection_ = NULL;
const ::google::protobuf::Descriptor* WheelSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WheelSpeed_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Sonar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sonar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Surround_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Surround_reflection_ = NULL;
const ::google::protobuf::Descriptor* License_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  License_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GpsQuality_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_canbus_2fchassis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_canbus_2fchassis_2eproto() {
  protobuf_AddDesc_canbus_2fchassis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "canbus/chassis.proto");
  GOOGLE_CHECK(file != NULL);
  Chassis_descriptor_ = file->message_type(0);
  static const int Chassis_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engine_started_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engine_rpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, speed_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, odometer_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, fuel_range_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, throttle_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, brake_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_torque_nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, parking_brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, high_beam_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, low_beam_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, left_turn_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, right_turn_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, horn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, wiper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, disengage_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, driving_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, gear_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, chassis_error_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, chassis_gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engage_advice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, wheel_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, surround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, license_),
  };
  Chassis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Chassis_descriptor_,
      Chassis::default_instance_,
      Chassis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, _has_bits_[0]),
      -1,
      -1,
      sizeof(Chassis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, _internal_metadata_),
      -1);
  Chassis_DrivingMode_descriptor_ = Chassis_descriptor_->enum_type(0);
  Chassis_ErrorCode_descriptor_ = Chassis_descriptor_->enum_type(1);
  Chassis_GearPosition_descriptor_ = Chassis_descriptor_->enum_type(2);
  ChassisGPS_descriptor_ = file->message_type(1);
  static const int ChassisGPS_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, gps_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, compass_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, pdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, is_gps_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, is_inferred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, hdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, vdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, num_satellites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, gps_speed_),
  };
  ChassisGPS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChassisGPS_descriptor_,
      ChassisGPS::default_instance_,
      ChassisGPS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChassisGPS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, _internal_metadata_),
      -1);
  WheelSpeed_descriptor_ = file->message_type(2);
  static const int WheelSpeed_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_rr_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_rl_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_fr_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_fl_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_fl_),
  };
  WheelSpeed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WheelSpeed_descriptor_,
      WheelSpeed::default_instance_,
      WheelSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, _has_bits_[0]),
      -1,
      -1,
      sizeof(WheelSpeed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, _internal_metadata_),
      -1);
  WheelSpeed_WheelSpeedType_descriptor_ = WheelSpeed_descriptor_->enum_type(0);
  Sonar_descriptor_ = file->message_type(3);
  static const int Sonar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, rotation_),
  };
  Sonar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sonar_descriptor_,
      Sonar::default_instance_,
      Sonar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, _has_bits_[0]),
      -1,
      -1,
      sizeof(Sonar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, _internal_metadata_),
      -1);
  Surround_descriptor_ = file->message_type(4);
  static const int Surround_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_left_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_left_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_left_alert_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_right_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_right_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_right_alert_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar00_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar04_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar05_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar06_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar07_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar08_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar09_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_),
  };
  Surround_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Surround_descriptor_,
      Surround::default_instance_,
      Surround_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, _has_bits_[0]),
      -1,
      -1,
      sizeof(Surround),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, _internal_metadata_),
      -1);
  License_descriptor_ = file->message_type(5);
  static const int License_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, vin_),
  };
  License_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      License_descriptor_,
      License::default_instance_,
      License_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _has_bits_[0]),
      -1,
      -1,
      sizeof(License),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _internal_metadata_),
      -1);
  GpsQuality_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_canbus_2fchassis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Chassis_descriptor_, &Chassis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChassisGPS_descriptor_, &ChassisGPS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WheelSpeed_descriptor_, &WheelSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sonar_descriptor_, &Sonar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Surround_descriptor_, &Surround::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      License_descriptor_, &License::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_canbus_2fchassis_2eproto() {
  delete Chassis::default_instance_;
  delete Chassis_reflection_;
  delete ChassisGPS::default_instance_;
  delete ChassisGPS_reflection_;
  delete WheelSpeed::default_instance_;
  delete WheelSpeed_reflection_;
  delete Sonar::default_instance_;
  delete Sonar_reflection_;
  delete Surround::default_instance_;
  delete Surround_reflection_;
  delete License::default_instance_;
  delete License_reflection_;
}

void protobuf_AddDesc_canbus_2fchassis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_canbus_2fchassis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fvehicle_5fsignal_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fdrive_5fstate_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024canbus/chassis.proto\022\rapollo.canbus\032\023c"
    "ommon/header.proto\032\033common/vehicle_signa"
    "l.proto\032\030common/drive_state.proto\032\025commo"
    "n/geometry.proto\"\244\013\n\007Chassis\022\026\n\016engine_s"
    "tarted\030\003 \001(\010\022\027\n\nengine_rpm\030\004 \001(\002:\003nan\022\026\n"
    "\tspeed_mps\030\005 \001(\002:\003nan\022\027\n\nodometer_m\030\006 \001("
    "\002:\003nan\022\024\n\014fuel_range_m\030\007 \001(\005\022 \n\023throttle"
    "_percentage\030\010 \001(\002:\003nan\022\035\n\020brake_percenta"
    "ge\030\t \001(\002:\003nan\022 \n\023steering_percentage\030\013 \001"
    "(\002:\003nan\022\037\n\022steering_torque_nm\030\014 \001(\002:\003nan"
    "\022\025\n\rparking_brake\030\r \001(\010\022\034\n\020high_beam_sig"
    "nal\030\016 \001(\010B\002\030\001\022\033\n\017low_beam_signal\030\017 \001(\010B\002"
    "\030\001\022\034\n\020left_turn_signal\030\020 \001(\010B\002\030\001\022\035\n\021righ"
    "t_turn_signal\030\021 \001(\010B\002\030\001\022\020\n\004horn\030\022 \001(\010B\002\030"
    "\001\022\r\n\005wiper\030\023 \001(\010\022\034\n\020disengage_status\030\024 \001"
    "(\010B\002\030\001\022I\n\014driving_mode\030\025 \001(\0162\".apollo.ca"
    "nbus.Chassis.DrivingMode:\017COMPLETE_MANUA"
    "L\022>\n\nerror_code\030\026 \001(\0162 .apollo.canbus.Ch"
    "assis.ErrorCode:\010NO_ERROR\022:\n\rgear_locati"
    "on\030\027 \001(\0162#.apollo.canbus.Chassis.GearPos"
    "ition\022\032\n\022steering_timestamp\030\030 \001(\001\022%\n\006hea"
    "der\030\031 \001(\0132\025.apollo.common.Header\022\035\n\022chas"
    "sis_error_mask\030\032 \001(\005:\0010\022,\n\006signal\030\033 \001(\0132"
    "\034.apollo.common.VehicleSignal\022.\n\013chassis"
    "_gps\030\034 \001(\0132\031.apollo.canbus.ChassisGPS\0222\n"
    "\rengage_advice\030\035 \001(\0132\033.apollo.common.Eng"
    "ageAdvice\022.\n\013wheel_speed\030\036 \001(\0132\031.apollo."
    "canbus.WheelSpeed\022)\n\010surround\030\037 \001(\0132\027.ap"
    "ollo.canbus.Surround\022\'\n\007license\030  \001(\0132\026."
    "apollo.canbus.License\"y\n\013DrivingMode\022\023\n\017"
    "COMPLETE_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_DRIVE"
    "\020\001\022\023\n\017AUTO_STEER_ONLY\020\002\022\023\n\017AUTO_SPEED_ON"
    "LY\020\003\022\022\n\016EMERGENCY_MODE\020\004\"\216\001\n\tErrorCode\022\014"
    "\n\010NO_ERROR\020\000\022\025\n\021CMD_NOT_IN_PERIOD\020\001\022\021\n\rC"
    "HASSIS_ERROR\020\002\022\027\n\023MANUAL_INTERVENTION\020\003\022"
    "\035\n\031CHASSIS_CAN_NOT_IN_PERIOD\020\004\022\021\n\rUNKNOW"
    "N_ERROR\020\005\"\203\001\n\014GearPosition\022\020\n\014GEAR_NEUTR"
    "AL\020\000\022\016\n\nGEAR_DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020"
    "\n\014GEAR_PARKING\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_I"
    "NVALID\020\005\022\r\n\tGEAR_NONE\020\006\"\211\003\n\nChassisGPS\022\020"
    "\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\021\n\tg"
    "ps_valid\030\003 \001(\010\022\014\n\004year\030\004 \001(\005\022\r\n\005month\030\005 "
    "\001(\005\022\013\n\003day\030\006 \001(\005\022\r\n\005hours\030\007 \001(\005\022\017\n\007minut"
    "es\030\010 \001(\005\022\017\n\007seconds\030\t \001(\005\022\031\n\021compass_dir"
    "ection\030\n \001(\001\022\014\n\004pdop\030\013 \001(\001\022\024\n\014is_gps_fau"
    "lt\030\014 \001(\010\022\023\n\013is_inferred\030\r \001(\010\022\020\n\010altitud"
    "e\030\016 \001(\001\022\017\n\007heading\030\017 \001(\001\022\014\n\004hdop\030\020 \001(\001\022\014"
    "\n\004vdop\030\021 \001(\001\022*\n\007quality\030\022 \001(\0162\031.apollo.c"
    "anbus.GpsQuality\022\026\n\016num_satellites\030\023 \001(\005"
    "\022\021\n\tgps_speed\030\024 \001(\001\"\216\005\n\nWheelSpeed\022$\n\025is"
    "_wheel_spd_rr_valid\030\001 \001(\010:\005false\022M\n\022whee"
    "l_direction_rr\030\002 \001(\0162(.apollo.canbus.Whe"
    "elSpeed.WheelSpeedType:\007INVALID\022\027\n\014wheel"
    "_spd_rr\030\003 \001(\001:\0010\022$\n\025is_wheel_spd_rl_vali"
    "d\030\004 \001(\010:\005false\022M\n\022wheel_direction_rl\030\005 \001"
    "(\0162(.apollo.canbus.WheelSpeed.WheelSpeed"
    "Type:\007INVALID\022\027\n\014wheel_spd_rl\030\006 \001(\001:\0010\022$"
    "\n\025is_wheel_spd_fr_valid\030\007 \001(\010:\005false\022M\n\022"
    "wheel_direction_fr\030\010 \001(\0162(.apollo.canbus"
    ".WheelSpeed.WheelSpeedType:\007INVALID\022\027\n\014w"
    "heel_spd_fr\030\t \001(\001:\0010\022$\n\025is_wheel_spd_fl_"
    "valid\030\n \001(\010:\005false\022M\n\022wheel_direction_fl"
    "\030\013 \001(\0162(.apollo.canbus.WheelSpeed.WheelS"
    "peedType:\007INVALID\022\027\n\014wheel_spd_fl\030\014 \001(\001:"
    "\0010\"H\n\016WheelSpeedType\022\013\n\007FORWARD\020\000\022\014\n\010BAC"
    "KWARD\020\001\022\016\n\nSTANDSTILL\020\002\022\013\n\007INVALID\020\003\"p\n\005"
    "Sonar\022\r\n\005range\030\001 \001(\001\022+\n\013translation\030\002 \001("
    "\0132\026.apollo.common.Point3D\022+\n\010rotation\030\003 "
    "\001(\0132\031.apollo.common.Quaternion\"\344\004\n\010Surro"
    "und\022 \n\030cross_traffic_alert_left\030\001 \001(\010\022(\n"
    " cross_traffic_alert_left_enabled\030\002 \001(\010\022"
    "\035\n\025blind_spot_left_alert\030\003 \001(\010\022%\n\035blind_"
    "spot_left_alert_enabled\030\004 \001(\010\022!\n\031cross_t"
    "raffic_alert_right\030\005 \001(\010\022)\n!cross_traffi"
    "c_alert_right_enabled\030\006 \001(\010\022\036\n\026blind_spo"
    "t_right_alert\030\007 \001(\010\022&\n\036blind_spot_right_"
    "alert_enabled\030\010 \001(\010\022\017\n\007sonar00\030\t \001(\001\022\017\n\007"
    "sonar01\030\n \001(\001\022\017\n\007sonar02\030\013 \001(\001\022\017\n\007sonar0"
    "3\030\014 \001(\001\022\017\n\007sonar04\030\r \001(\001\022\017\n\007sonar05\030\016 \001("
    "\001\022\017\n\007sonar06\030\017 \001(\001\022\017\n\007sonar07\030\020 \001(\001\022\017\n\007s"
    "onar08\030\021 \001(\001\022\017\n\007sonar09\030\022 \001(\001\022\017\n\007sonar10"
    "\030\023 \001(\001\022\017\n\007sonar11\030\024 \001(\001\022\025\n\rsonar_enabled"
    "\030\025 \001(\010\022\023\n\013sonar_fault\030\026 \001(\010\022\023\n\013sonar_ran"
    "ge\030\027 \003(\001\022#\n\005sonar\030\030 \003(\0132\024.apollo.canbus."
    "Sonar\"\026\n\007License\022\013\n\003vin\030\001 \001(\t*A\n\nGpsQual"
    "ity\022\n\n\006FIX_NO\020\000\022\n\n\006FIX_2D\020\001\022\n\n\006FIX_3D\020\002\022"
    "\017\n\013FIX_INVALID\020\003", 3456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "canbus/chassis.proto", &protobuf_RegisterTypes);
  Chassis::default_instance_ = new Chassis();
  ChassisGPS::default_instance_ = new ChassisGPS();
  WheelSpeed::default_instance_ = new WheelSpeed();
  Sonar::default_instance_ = new Sonar();
  Surround::default_instance_ = new Surround();
  License::default_instance_ = new License();
  Chassis::default_instance_->InitAsDefaultInstance();
  ChassisGPS::default_instance_->InitAsDefaultInstance();
  WheelSpeed::default_instance_->InitAsDefaultInstance();
  Sonar::default_instance_->InitAsDefaultInstance();
  Surround::default_instance_->InitAsDefaultInstance();
  License::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_canbus_2fchassis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_canbus_2fchassis_2eproto {
  StaticDescriptorInitializer_canbus_2fchassis_2eproto() {
    protobuf_AddDesc_canbus_2fchassis_2eproto();
  }
} static_descriptor_initializer_canbus_2fchassis_2eproto_;
const ::google::protobuf::EnumDescriptor* GpsQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsQuality_descriptor_;
}
bool GpsQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_DrivingMode_descriptor_;
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
const Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
const Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
const Chassis_DrivingMode Chassis::EMERGENCY_MODE;
const Chassis_DrivingMode Chassis::DrivingMode_MIN;
const Chassis_DrivingMode Chassis::DrivingMode_MAX;
const int Chassis::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_ErrorCode_descriptor_;
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_ErrorCode Chassis::NO_ERROR;
const Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR;
const Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
const Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
const Chassis_ErrorCode Chassis::ErrorCode_MIN;
const Chassis_ErrorCode Chassis::ErrorCode_MAX;
const int Chassis::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_GearPosition_descriptor_;
}
bool Chassis_GearPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_GearPosition Chassis::GEAR_NEUTRAL;
const Chassis_GearPosition Chassis::GEAR_DRIVE;
const Chassis_GearPosition Chassis::GEAR_REVERSE;
const Chassis_GearPosition Chassis::GEAR_PARKING;
const Chassis_GearPosition Chassis::GEAR_LOW;
const Chassis_GearPosition Chassis::GEAR_INVALID;
const Chassis_GearPosition Chassis::GEAR_NONE;
const Chassis_GearPosition Chassis::GearPosition_MIN;
const Chassis_GearPosition Chassis::GearPosition_MAX;
const int Chassis::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kEngineStartedFieldNumber;
const int Chassis::kEngineRpmFieldNumber;
const int Chassis::kSpeedMpsFieldNumber;
const int Chassis::kOdometerMFieldNumber;
const int Chassis::kFuelRangeMFieldNumber;
const int Chassis::kThrottlePercentageFieldNumber;
const int Chassis::kBrakePercentageFieldNumber;
const int Chassis::kSteeringPercentageFieldNumber;
const int Chassis::kSteeringTorqueNmFieldNumber;
const int Chassis::kParkingBrakeFieldNumber;
const int Chassis::kHighBeamSignalFieldNumber;
const int Chassis::kLowBeamSignalFieldNumber;
const int Chassis::kLeftTurnSignalFieldNumber;
const int Chassis::kRightTurnSignalFieldNumber;
const int Chassis::kHornFieldNumber;
const int Chassis::kWiperFieldNumber;
const int Chassis::kDisengageStatusFieldNumber;
const int Chassis::kDrivingModeFieldNumber;
const int Chassis::kErrorCodeFieldNumber;
const int Chassis::kGearLocationFieldNumber;
const int Chassis::kSteeringTimestampFieldNumber;
const int Chassis::kHeaderFieldNumber;
const int Chassis::kChassisErrorMaskFieldNumber;
const int Chassis::kSignalFieldNumber;
const int Chassis::kChassisGpsFieldNumber;
const int Chassis::kEngageAdviceFieldNumber;
const int Chassis::kWheelSpeedFieldNumber;
const int Chassis::kSurroundFieldNumber;
const int Chassis::kLicenseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Chassis)
}

void Chassis::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  signal_ = const_cast< ::apollo::common::VehicleSignal*>(&::apollo::common::VehicleSignal::default_instance());
  chassis_gps_ = const_cast< ::apollo::canbus::ChassisGPS*>(&::apollo::canbus::ChassisGPS::default_instance());
  engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(&::apollo::common::EngageAdvice::default_instance());
  wheel_speed_ = const_cast< ::apollo::canbus::WheelSpeed*>(&::apollo::canbus::WheelSpeed::default_instance());
  surround_ = const_cast< ::apollo::canbus::Surround*>(&::apollo::canbus::Surround::default_instance());
  license_ = const_cast< ::apollo::canbus::License*>(&::apollo::canbus::License::default_instance());
}

Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Chassis)
}

void Chassis::SharedCtor() {
  _cached_size_ = 0;
  engine_started_ = false;
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  fuel_range_m_ = 0;
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  parking_brake_ = false;
  high_beam_signal_ = false;
  low_beam_signal_ = false;
  left_turn_signal_ = false;
  right_turn_signal_ = false;
  horn_ = false;
  wiper_ = false;
  disengage_status_ = false;
  driving_mode_ = 0;
  error_code_ = 0;
  gear_location_ = 0;
  steering_timestamp_ = 0;
  header_ = NULL;
  chassis_error_mask_ = 0;
  signal_ = NULL;
  chassis_gps_ = NULL;
  engage_advice_ = NULL;
  wheel_speed_ = NULL;
  surround_ = NULL;
  license_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete signal_;
    delete chassis_gps_;
    delete engage_advice_;
    delete wheel_speed_;
    delete surround_;
    delete license_;
  }
}

void Chassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chassis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chassis_descriptor_;
}

const Chassis& Chassis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_canbus_2fchassis_2eproto();
  return *default_instance_;
}

Chassis* Chassis::default_instance_ = NULL;

Chassis* Chassis::New(::google::protobuf::Arena* arena) const {
  Chassis* n = new Chassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Chassis)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Chassis, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Chassis*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    engine_started_ = false;
    engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
    speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
    odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
    fuel_range_m_ = 0;
    throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(parking_brake_, low_beam_signal_);
    ZR_(left_turn_signal_, wiper_);
    steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(disengage_status_, steering_timestamp_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    chassis_error_mask_ = 0;
    if (has_signal()) {
      if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 520093696u) {
    if (has_chassis_gps()) {
      if (chassis_gps_ != NULL) chassis_gps_->::apollo::canbus::ChassisGPS::Clear();
    }
    if (has_engage_advice()) {
      if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
    }
    if (has_wheel_speed()) {
      if (wheel_speed_ != NULL) wheel_speed_->::apollo::canbus::WheelSpeed::Clear();
    }
    if (has_surround()) {
      if (surround_ != NULL) surround_->::apollo::canbus::Surround::Clear();
    }
    if (has_license()) {
      if (license_ != NULL) license_->::apollo::canbus::License::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Chassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool engine_started = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
          set_has_engine_started();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_engine_rpm;
        break;
      }

      // optional float engine_rpm = 4 [default = nan];
      case 4: {
        if (tag == 37) {
         parse_engine_rpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));
          set_has_engine_rpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speed_mps;
        break;
      }

      // optional float speed_mps = 5 [default = nan];
      case 5: {
        if (tag == 45) {
         parse_speed_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
          set_has_speed_mps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_odometer_m;
        break;
      }

      // optional float odometer_m = 6 [default = nan];
      case 6: {
        if (tag == 53) {
         parse_odometer_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &odometer_m_)));
          set_has_odometer_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fuel_range_m;
        break;
      }

      // optional int32 fuel_range_m = 7;
      case 7: {
        if (tag == 56) {
         parse_fuel_range_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_range_m_)));
          set_has_fuel_range_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_throttle_percentage;
        break;
      }

      // optional float throttle_percentage = 8 [default = nan];
      case 8: {
        if (tag == 69) {
         parse_throttle_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
          set_has_throttle_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_brake_percentage;
        break;
      }

      // optional float brake_percentage = 9 [default = nan];
      case 9: {
        if (tag == 77) {
         parse_brake_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
          set_has_brake_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_steering_percentage;
        break;
      }

      // optional float steering_percentage = 11 [default = nan];
      case 11: {
        if (tag == 93) {
         parse_steering_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
          set_has_steering_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_steering_torque_nm;
        break;
      }

      // optional float steering_torque_nm = 12 [default = nan];
      case 12: {
        if (tag == 101) {
         parse_steering_torque_nm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));
          set_has_steering_torque_nm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_parking_brake;
        break;
      }

      // optional bool parking_brake = 13;
      case 13: {
        if (tag == 104) {
         parse_parking_brake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
          set_has_parking_brake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_high_beam_signal;
        break;
      }

      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14: {
        if (tag == 112) {
         parse_high_beam_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_signal_)));
          set_has_high_beam_signal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_low_beam_signal;
        break;
      }

      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15: {
        if (tag == 120) {
         parse_low_beam_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_signal_)));
          set_has_low_beam_signal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_left_turn_signal;
        break;
      }

      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16: {
        if (tag == 128) {
         parse_left_turn_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_signal_)));
          set_has_left_turn_signal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_right_turn_signal;
        break;
      }

      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17: {
        if (tag == 136) {
         parse_right_turn_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_signal_)));
          set_has_right_turn_signal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_horn;
        break;
      }

      // optional bool horn = 18 [deprecated = true];
      case 18: {
        if (tag == 144) {
         parse_horn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
          set_has_horn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_wiper;
        break;
      }

      // optional bool wiper = 19;
      case 19: {
        if (tag == 152) {
         parse_wiper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));
          set_has_wiper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_disengage_status;
        break;
      }

      // optional bool disengage_status = 20 [deprecated = true];
      case 20: {
        if (tag == 160) {
         parse_disengage_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disengage_status_)));
          set_has_disengage_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_driving_mode;
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21: {
        if (tag == 168) {
         parse_driving_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_error_code;
        break;
      }

      // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22: {
        if (tag == 176) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::canbus::Chassis_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gear_location;
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (tag == 184) {
         parse_gear_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_steering_timestamp;
        break;
      }

      // optional double steering_timestamp = 24;
      case 24: {
        if (tag == 193) {
         parse_steering_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_timestamp_)));
          set_has_steering_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 25;
      case 25: {
        if (tag == 202) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_chassis_error_mask;
        break;
      }

      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_chassis_error_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_error_mask_)));
          set_has_chassis_error_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_signal;
        break;
      }

      // optional .apollo.common.VehicleSignal signal = 27;
      case 27: {
        if (tag == 218) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_chassis_gps;
        break;
      }

      // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
      case 28: {
        if (tag == 226) {
         parse_chassis_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis_gps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_engage_advice;
        break;
      }

      // optional .apollo.common.EngageAdvice engage_advice = 29;
      case 29: {
        if (tag == 234) {
         parse_engage_advice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_wheel_speed;
        break;
      }

      // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
      case 30: {
        if (tag == 242) {
         parse_wheel_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wheel_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_surround;
        break;
      }

      // optional .apollo.canbus.Surround surround = 31;
      case 31: {
        if (tag == 250) {
         parse_surround:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surround()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_license;
        break;
      }

      // optional .apollo.canbus.License license = 32;
      case 32: {
        if (tag == 258) {
         parse_license:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_license()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Chassis)
  // optional bool engine_started = 3;
  if (has_engine_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->engine_started(), output);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (has_engine_rpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->engine_rpm(), output);
  }

  // optional float speed_mps = 5 [default = nan];
  if (has_speed_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_mps(), output);
  }

  // optional float odometer_m = 6 [default = nan];
  if (has_odometer_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->odometer_m(), output);
  }

  // optional int32 fuel_range_m = 7;
  if (has_fuel_range_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fuel_range_m(), output);
  }

  // optional float throttle_percentage = 8 [default = nan];
  if (has_throttle_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (has_brake_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (has_steering_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->steering_percentage(), output);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (has_steering_torque_nm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_torque_nm(), output);
  }

  // optional bool parking_brake = 13;
  if (has_parking_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->parking_brake(), output);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (has_high_beam_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->high_beam_signal(), output);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (has_low_beam_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->low_beam_signal(), output);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (has_left_turn_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->left_turn_signal(), output);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (has_right_turn_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->right_turn_signal(), output);
  }

  // optional bool horn = 18 [deprecated = true];
  if (has_horn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->horn(), output);
  }

  // optional bool wiper = 19;
  if (has_wiper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->wiper(), output);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (has_disengage_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->disengage_status(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (has_driving_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->driving_mode(), output);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (has_gear_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->gear_location(), output);
  }

  // optional double steering_timestamp = 24;
  if (has_steering_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->steering_timestamp(), output);
  }

  // optional .apollo.common.Header header = 25;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->header_, output);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (has_chassis_error_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->chassis_error_mask(), output);
  }

  // optional .apollo.common.VehicleSignal signal = 27;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->signal_, output);
  }

  // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
  if (has_chassis_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->chassis_gps_, output);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  if (has_engage_advice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->engage_advice_, output);
  }

  // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
  if (has_wheel_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->wheel_speed_, output);
  }

  // optional .apollo.canbus.Surround surround = 31;
  if (has_surround()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->surround_, output);
  }

  // optional .apollo.canbus.License license = 32;
  if (has_license()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->license_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Chassis)
}

::google::protobuf::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Chassis)
  // optional bool engine_started = 3;
  if (has_engine_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->engine_started(), target);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (has_engine_rpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->engine_rpm(), target);
  }

  // optional float speed_mps = 5 [default = nan];
  if (has_speed_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_mps(), target);
  }

  // optional float odometer_m = 6 [default = nan];
  if (has_odometer_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->odometer_m(), target);
  }

  // optional int32 fuel_range_m = 7;
  if (has_fuel_range_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fuel_range_m(), target);
  }

  // optional float throttle_percentage = 8 [default = nan];
  if (has_throttle_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (has_brake_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (has_steering_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (has_steering_torque_nm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_torque_nm(), target);
  }

  // optional bool parking_brake = 13;
  if (has_parking_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->parking_brake(), target);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (has_high_beam_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (has_low_beam_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (has_left_turn_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (has_right_turn_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->right_turn_signal(), target);
  }

  // optional bool horn = 18 [deprecated = true];
  if (has_horn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->horn(), target);
  }

  // optional bool wiper = 19;
  if (has_wiper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->wiper(), target);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (has_disengage_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->disengage_status(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (has_driving_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->error_code(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (has_gear_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (has_steering_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->steering_timestamp(), target);
  }

  // optional .apollo.common.Header header = 25;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->header_, false, target);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (has_chassis_error_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->chassis_error_mask(), target);
  }

  // optional .apollo.common.VehicleSignal signal = 27;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->signal_, false, target);
  }

  // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
  if (has_chassis_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->chassis_gps_, false, target);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  if (has_engage_advice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->engage_advice_, false, target);
  }

  // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
  if (has_wheel_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->wheel_speed_, false, target);
  }

  // optional .apollo.canbus.Surround surround = 31;
  if (has_surround()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->surround_, false, target);
  }

  // optional .apollo.canbus.License license = 32;
  if (has_license()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->license_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Chassis)
  return target;
}

int Chassis::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Chassis)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool engine_started = 3;
    if (has_engine_started()) {
      total_size += 1 + 1;
    }

    // optional float engine_rpm = 4 [default = nan];
    if (has_engine_rpm()) {
      total_size += 1 + 4;
    }

    // optional float speed_mps = 5 [default = nan];
    if (has_speed_mps()) {
      total_size += 1 + 4;
    }

    // optional float odometer_m = 6 [default = nan];
    if (has_odometer_m()) {
      total_size += 1 + 4;
    }

    // optional int32 fuel_range_m = 7;
    if (has_fuel_range_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel_range_m());
    }

    // optional float throttle_percentage = 8 [default = nan];
    if (has_throttle_percentage()) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 9 [default = nan];
    if (has_brake_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = nan];
    if (has_steering_percentage()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float steering_torque_nm = 12 [default = nan];
    if (has_steering_torque_nm()) {
      total_size += 1 + 4;
    }

    // optional bool parking_brake = 13;
    if (has_parking_brake()) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (has_high_beam_signal()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam_signal = 15 [deprecated = true];
    if (has_low_beam_signal()) {
      total_size += 1 + 1;
    }

    // optional bool left_turn_signal = 16 [deprecated = true];
    if (has_left_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool right_turn_signal = 17 [deprecated = true];
    if (has_right_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (has_horn()) {
      total_size += 2 + 1;
    }

    // optional bool wiper = 19;
    if (has_wiper()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool disengage_status = 20 [deprecated = true];
    if (has_disengage_status()) {
      total_size += 2 + 1;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (has_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (has_error_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
    if (has_gear_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional double steering_timestamp = 24;
    if (has_steering_timestamp()) {
      total_size += 2 + 8;
    }

    // optional .apollo.common.Header header = 25;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional int32 chassis_error_mask = 26 [default = 0];
    if (has_chassis_error_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chassis_error_mask());
    }

    // optional .apollo.common.VehicleSignal signal = 27;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

  }
  if (_has_bits_[24 / 32] & 520093696u) {
    // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
    if (has_chassis_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chassis_gps_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 29;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engage_advice_);
    }

    // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
    if (has_wheel_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wheel_speed_);
    }

    // optional .apollo.canbus.Surround surround = 31;
    if (has_surround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->surround_);
    }

    // optional .apollo.canbus.License license = 32;
    if (has_license()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->license_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Chassis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Chassis* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Chassis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Chassis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine_started()) {
      set_engine_started(from.engine_started());
    }
    if (from.has_engine_rpm()) {
      set_engine_rpm(from.engine_rpm());
    }
    if (from.has_speed_mps()) {
      set_speed_mps(from.speed_mps());
    }
    if (from.has_odometer_m()) {
      set_odometer_m(from.odometer_m());
    }
    if (from.has_fuel_range_m()) {
      set_fuel_range_m(from.fuel_range_m());
    }
    if (from.has_throttle_percentage()) {
      set_throttle_percentage(from.throttle_percentage());
    }
    if (from.has_brake_percentage()) {
      set_brake_percentage(from.brake_percentage());
    }
    if (from.has_steering_percentage()) {
      set_steering_percentage(from.steering_percentage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_steering_torque_nm()) {
      set_steering_torque_nm(from.steering_torque_nm());
    }
    if (from.has_parking_brake()) {
      set_parking_brake(from.parking_brake());
    }
    if (from.has_high_beam_signal()) {
      set_high_beam_signal(from.high_beam_signal());
    }
    if (from.has_low_beam_signal()) {
      set_low_beam_signal(from.low_beam_signal());
    }
    if (from.has_left_turn_signal()) {
      set_left_turn_signal(from.left_turn_signal());
    }
    if (from.has_right_turn_signal()) {
      set_right_turn_signal(from.right_turn_signal());
    }
    if (from.has_horn()) {
      set_horn(from.horn());
    }
    if (from.has_wiper()) {
      set_wiper(from.wiper());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_disengage_status()) {
      set_disengage_status(from.disengage_status());
    }
    if (from.has_driving_mode()) {
      set_driving_mode(from.driving_mode());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_gear_location()) {
      set_gear_location(from.gear_location());
    }
    if (from.has_steering_timestamp()) {
      set_steering_timestamp(from.steering_timestamp());
    }
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_chassis_error_mask()) {
      set_chassis_error_mask(from.chassis_error_mask());
    }
    if (from.has_signal()) {
      mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from.signal());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_chassis_gps()) {
      mutable_chassis_gps()->::apollo::canbus::ChassisGPS::MergeFrom(from.chassis_gps());
    }
    if (from.has_engage_advice()) {
      mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (from.has_wheel_speed()) {
      mutable_wheel_speed()->::apollo::canbus::WheelSpeed::MergeFrom(from.wheel_speed());
    }
    if (from.has_surround()) {
      mutable_surround()->::apollo::canbus::Surround::MergeFrom(from.surround());
    }
    if (from.has_license()) {
      mutable_license()->::apollo::canbus::License::MergeFrom(from.license());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {

  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  std::swap(engine_started_, other->engine_started_);
  std::swap(engine_rpm_, other->engine_rpm_);
  std::swap(speed_mps_, other->speed_mps_);
  std::swap(odometer_m_, other->odometer_m_);
  std::swap(fuel_range_m_, other->fuel_range_m_);
  std::swap(throttle_percentage_, other->throttle_percentage_);
  std::swap(brake_percentage_, other->brake_percentage_);
  std::swap(steering_percentage_, other->steering_percentage_);
  std::swap(steering_torque_nm_, other->steering_torque_nm_);
  std::swap(parking_brake_, other->parking_brake_);
  std::swap(high_beam_signal_, other->high_beam_signal_);
  std::swap(low_beam_signal_, other->low_beam_signal_);
  std::swap(left_turn_signal_, other->left_turn_signal_);
  std::swap(right_turn_signal_, other->right_turn_signal_);
  std::swap(horn_, other->horn_);
  std::swap(wiper_, other->wiper_);
  std::swap(disengage_status_, other->disengage_status_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(error_code_, other->error_code_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(steering_timestamp_, other->steering_timestamp_);
  std::swap(header_, other->header_);
  std::swap(chassis_error_mask_, other->chassis_error_mask_);
  std::swap(signal_, other->signal_);
  std::swap(chassis_gps_, other->chassis_gps_);
  std::swap(engage_advice_, other->engage_advice_);
  std::swap(wheel_speed_, other->wheel_speed_);
  std::swap(surround_, other->surround_);
  std::swap(license_, other->license_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chassis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chassis_descriptor_;
  metadata.reflection = Chassis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chassis

// optional bool engine_started = 3;
bool Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chassis::set_has_engine_started() {
  _has_bits_[0] |= 0x00000001u;
}
void Chassis::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chassis::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
 bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_started)
  return engine_started_;
}
 void Chassis::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4 [default = nan];
bool Chassis::has_engine_rpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chassis::set_has_engine_rpm() {
  _has_bits_[0] |= 0x00000002u;
}
void Chassis::clear_has_engine_rpm() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chassis::clear_engine_rpm() {
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_engine_rpm();
}
 float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
 void Chassis::set_engine_rpm(float value) {
  set_has_engine_rpm();
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5 [default = nan];
bool Chassis::has_speed_mps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chassis::set_has_speed_mps() {
  _has_bits_[0] |= 0x00000004u;
}
void Chassis::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chassis::clear_speed_mps() {
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_speed_mps();
}
 float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.speed_mps)
  return speed_mps_;
}
 void Chassis::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6 [default = nan];
bool Chassis::has_odometer_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Chassis::set_has_odometer_m() {
  _has_bits_[0] |= 0x00000008u;
}
void Chassis::clear_has_odometer_m() {
  _has_bits_[0] &= ~0x00000008u;
}
void Chassis::clear_odometer_m() {
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_odometer_m();
}
 float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.odometer_m)
  return odometer_m_;
}
 void Chassis::set_odometer_m(float value) {
  set_has_odometer_m();
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
bool Chassis::has_fuel_range_m() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Chassis::set_has_fuel_range_m() {
  _has_bits_[0] |= 0x00000010u;
}
void Chassis::clear_has_fuel_range_m() {
  _has_bits_[0] &= ~0x00000010u;
}
void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
  clear_has_fuel_range_m();
}
 ::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
 void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  set_has_fuel_range_m();
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8 [default = nan];
bool Chassis::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Chassis::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00000020u;
}
void Chassis::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00000020u;
}
void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_throttle_percentage();
}
 float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
 void Chassis::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9 [default = nan];
bool Chassis::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Chassis::set_has_brake_percentage() {
  _has_bits_[0] |= 0x00000040u;
}
void Chassis::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x00000040u;
}
void Chassis::clear_brake_percentage() {
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_brake_percentage();
}
 float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
 void Chassis::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11 [default = nan];
bool Chassis::has_steering_percentage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Chassis::set_has_steering_percentage() {
  _has_bits_[0] |= 0x00000080u;
}
void Chassis::clear_has_steering_percentage() {
  _has_bits_[0] &= ~0x00000080u;
}
void Chassis::clear_steering_percentage() {
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_percentage();
}
 float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
 void Chassis::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12 [default = nan];
bool Chassis::has_steering_torque_nm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Chassis::set_has_steering_torque_nm() {
  _has_bits_[0] |= 0x00000100u;
}
void Chassis::clear_has_steering_torque_nm() {
  _has_bits_[0] &= ~0x00000100u;
}
void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_torque_nm();
}
 float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
 void Chassis::set_steering_torque_nm(float value) {
  set_has_steering_torque_nm();
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
bool Chassis::has_parking_brake() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Chassis::set_has_parking_brake() {
  _has_bits_[0] |= 0x00000200u;
}
void Chassis::clear_has_parking_brake() {
  _has_bits_[0] &= ~0x00000200u;
}
void Chassis::clear_parking_brake() {
  parking_brake_ = false;
  clear_has_parking_brake();
}
 bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.parking_brake)
  return parking_brake_;
}
 void Chassis::set_parking_brake(bool value) {
  set_has_parking_brake();
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.parking_brake)
}

// optional bool high_beam_signal = 14 [deprecated = true];
bool Chassis::has_high_beam_signal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Chassis::set_has_high_beam_signal() {
  _has_bits_[0] |= 0x00000400u;
}
void Chassis::clear_has_high_beam_signal() {
  _has_bits_[0] &= ~0x00000400u;
}
void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
  clear_has_high_beam_signal();
}
 bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
 void Chassis::set_high_beam_signal(bool value) {
  set_has_high_beam_signal();
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15 [deprecated = true];
bool Chassis::has_low_beam_signal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Chassis::set_has_low_beam_signal() {
  _has_bits_[0] |= 0x00000800u;
}
void Chassis::clear_has_low_beam_signal() {
  _has_bits_[0] &= ~0x00000800u;
}
void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
  clear_has_low_beam_signal();
}
 bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
 void Chassis::set_low_beam_signal(bool value) {
  set_has_low_beam_signal();
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16 [deprecated = true];
bool Chassis::has_left_turn_signal() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Chassis::set_has_left_turn_signal() {
  _has_bits_[0] |= 0x00001000u;
}
void Chassis::clear_has_left_turn_signal() {
  _has_bits_[0] &= ~0x00001000u;
}
void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
  clear_has_left_turn_signal();
}
 bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
 void Chassis::set_left_turn_signal(bool value) {
  set_has_left_turn_signal();
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17 [deprecated = true];
bool Chassis::has_right_turn_signal() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Chassis::set_has_right_turn_signal() {
  _has_bits_[0] |= 0x00002000u;
}
void Chassis::clear_has_right_turn_signal() {
  _has_bits_[0] &= ~0x00002000u;
}
void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
  clear_has_right_turn_signal();
}
 bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
 void Chassis::set_right_turn_signal(bool value) {
  set_has_right_turn_signal();
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18 [deprecated = true];
bool Chassis::has_horn() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Chassis::set_has_horn() {
  _has_bits_[0] |= 0x00004000u;
}
void Chassis::clear_has_horn() {
  _has_bits_[0] &= ~0x00004000u;
}
void Chassis::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
 bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.horn)
  return horn_;
}
 void Chassis::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.horn)
}

// optional bool wiper = 19;
bool Chassis::has_wiper() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Chassis::set_has_wiper() {
  _has_bits_[0] |= 0x00008000u;
}
void Chassis::clear_has_wiper() {
  _has_bits_[0] &= ~0x00008000u;
}
void Chassis::clear_wiper() {
  wiper_ = false;
  clear_has_wiper();
}
 bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.wiper)
  return wiper_;
}
 void Chassis::set_wiper(bool value) {
  set_has_wiper();
  wiper_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20 [deprecated = true];
bool Chassis::has_disengage_status() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Chassis::set_has_disengage_status() {
  _has_bits_[0] |= 0x00010000u;
}
void Chassis::clear_has_disengage_status() {
  _has_bits_[0] &= ~0x00010000u;
}
void Chassis::clear_disengage_status() {
  disengage_status_ = false;
  clear_has_disengage_status();
}
 bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.disengage_status)
  return disengage_status_;
}
 void Chassis::set_disengage_status(bool value) {
  set_has_disengage_status();
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.disengage_status)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Chassis::set_has_driving_mode() {
  _has_bits_[0] |= 0x00020000u;
}
void Chassis::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00020000u;
}
void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
 ::apollo::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
 void Chassis::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.driving_mode)
}

// optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
bool Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Chassis::set_has_error_code() {
  _has_bits_[0] |= 0x00040000u;
}
void Chassis::clear_has_error_code() {
  _has_bits_[0] &= ~0x00040000u;
}
void Chassis::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::apollo::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.error_code)
  return static_cast< ::apollo::canbus::Chassis_ErrorCode >(error_code_);
}
 void Chassis::set_error_code(::apollo::canbus::Chassis_ErrorCode value) {
  assert(::apollo::canbus::Chassis_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.error_code)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
bool Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Chassis::set_has_gear_location() {
  _has_bits_[0] |= 0x00080000u;
}
void Chassis::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00080000u;
}
void Chassis::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
 ::apollo::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
 void Chassis::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
bool Chassis::has_steering_timestamp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Chassis::set_has_steering_timestamp() {
  _has_bits_[0] |= 0x00100000u;
}
void Chassis::clear_has_steering_timestamp() {
  _has_bits_[0] &= ~0x00100000u;
}
void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
  clear_has_steering_timestamp();
}
 double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
 void Chassis::set_steering_timestamp(double value) {
  set_has_steering_timestamp();
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_timestamp)
}

// optional .apollo.common.Header header = 25;
bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Chassis::set_has_header() {
  _has_bits_[0] |= 0x00200000u;
}
void Chassis::clear_has_header() {
  _has_bits_[0] &= ~0x00200000u;
}
void Chassis::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* Chassis::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.header)
  return header_;
}
::apollo::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Chassis::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
bool Chassis::has_chassis_error_mask() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Chassis::set_has_chassis_error_mask() {
  _has_bits_[0] |= 0x00400000u;
}
void Chassis::clear_has_chassis_error_mask() {
  _has_bits_[0] &= ~0x00400000u;
}
void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
  clear_has_chassis_error_mask();
}
 ::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
 void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  set_has_chassis_error_mask();
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.chassis_error_mask)
}

// optional .apollo.common.VehicleSignal signal = 27;
bool Chassis::has_signal() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Chassis::set_has_signal() {
  _has_bits_[0] |= 0x00800000u;
}
void Chassis::clear_has_signal() {
  _has_bits_[0] &= ~0x00800000u;
}
void Chassis::clear_signal() {
  if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_signal();
}
const ::apollo::common::VehicleSignal& Chassis::signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
::apollo::common::VehicleSignal* Chassis::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.signal)
  return signal_;
}
::apollo::common::VehicleSignal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.signal)
  clear_has_signal();
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void Chassis::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.signal)
}

// optional .apollo.canbus.ChassisGPS chassis_gps = 28;
bool Chassis::has_chassis_gps() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Chassis::set_has_chassis_gps() {
  _has_bits_[0] |= 0x01000000u;
}
void Chassis::clear_has_chassis_gps() {
  _has_bits_[0] &= ~0x01000000u;
}
void Chassis::clear_chassis_gps() {
  if (chassis_gps_ != NULL) chassis_gps_->::apollo::canbus::ChassisGPS::Clear();
  clear_has_chassis_gps();
}
const ::apollo::canbus::ChassisGPS& Chassis::chassis_gps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.chassis_gps)
  return chassis_gps_ != NULL ? *chassis_gps_ : *default_instance_->chassis_gps_;
}
::apollo::canbus::ChassisGPS* Chassis::mutable_chassis_gps() {
  set_has_chassis_gps();
  if (chassis_gps_ == NULL) {
    chassis_gps_ = new ::apollo::canbus::ChassisGPS;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.chassis_gps)
  return chassis_gps_;
}
::apollo::canbus::ChassisGPS* Chassis::release_chassis_gps() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.chassis_gps)
  clear_has_chassis_gps();
  ::apollo::canbus::ChassisGPS* temp = chassis_gps_;
  chassis_gps_ = NULL;
  return temp;
}
void Chassis::set_allocated_chassis_gps(::apollo::canbus::ChassisGPS* chassis_gps) {
  delete chassis_gps_;
  chassis_gps_ = chassis_gps;
  if (chassis_gps) {
    set_has_chassis_gps();
  } else {
    clear_has_chassis_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.chassis_gps)
}

// optional .apollo.common.EngageAdvice engage_advice = 29;
bool Chassis::has_engage_advice() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Chassis::set_has_engage_advice() {
  _has_bits_[0] |= 0x02000000u;
}
void Chassis::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x02000000u;
}
void Chassis::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
const ::apollo::common::EngageAdvice& Chassis::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_ : *default_instance_->engage_advice_;
}
::apollo::common::EngageAdvice* Chassis::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::apollo::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.engage_advice)
  return engage_advice_;
}
::apollo::common::EngageAdvice* Chassis::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.engage_advice)
  clear_has_engage_advice();
  ::apollo::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
void Chassis::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.engage_advice)
}

// optional .apollo.canbus.WheelSpeed wheel_speed = 30;
bool Chassis::has_wheel_speed() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Chassis::set_has_wheel_speed() {
  _has_bits_[0] |= 0x04000000u;
}
void Chassis::clear_has_wheel_speed() {
  _has_bits_[0] &= ~0x04000000u;
}
void Chassis::clear_wheel_speed() {
  if (wheel_speed_ != NULL) wheel_speed_->::apollo::canbus::WheelSpeed::Clear();
  clear_has_wheel_speed();
}
const ::apollo::canbus::WheelSpeed& Chassis::wheel_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.wheel_speed)
  return wheel_speed_ != NULL ? *wheel_speed_ : *default_instance_->wheel_speed_;
}
::apollo::canbus::WheelSpeed* Chassis::mutable_wheel_speed() {
  set_has_wheel_speed();
  if (wheel_speed_ == NULL) {
    wheel_speed_ = new ::apollo::canbus::WheelSpeed;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.wheel_speed)
  return wheel_speed_;
}
::apollo::canbus::WheelSpeed* Chassis::release_wheel_speed() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.wheel_speed)
  clear_has_wheel_speed();
  ::apollo::canbus::WheelSpeed* temp = wheel_speed_;
  wheel_speed_ = NULL;
  return temp;
}
void Chassis::set_allocated_wheel_speed(::apollo::canbus::WheelSpeed* wheel_speed) {
  delete wheel_speed_;
  wheel_speed_ = wheel_speed;
  if (wheel_speed) {
    set_has_wheel_speed();
  } else {
    clear_has_wheel_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.wheel_speed)
}

// optional .apollo.canbus.Surround surround = 31;
bool Chassis::has_surround() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Chassis::set_has_surround() {
  _has_bits_[0] |= 0x08000000u;
}
void Chassis::clear_has_surround() {
  _has_bits_[0] &= ~0x08000000u;
}
void Chassis::clear_surround() {
  if (surround_ != NULL) surround_->::apollo::canbus::Surround::Clear();
  clear_has_surround();
}
const ::apollo::canbus::Surround& Chassis::surround() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.surround)
  return surround_ != NULL ? *surround_ : *default_instance_->surround_;
}
::apollo::canbus::Surround* Chassis::mutable_surround() {
  set_has_surround();
  if (surround_ == NULL) {
    surround_ = new ::apollo::canbus::Surround;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.surround)
  return surround_;
}
::apollo::canbus::Surround* Chassis::release_surround() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.surround)
  clear_has_surround();
  ::apollo::canbus::Surround* temp = surround_;
  surround_ = NULL;
  return temp;
}
void Chassis::set_allocated_surround(::apollo::canbus::Surround* surround) {
  delete surround_;
  surround_ = surround;
  if (surround) {
    set_has_surround();
  } else {
    clear_has_surround();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.surround)
}

// optional .apollo.canbus.License license = 32;
bool Chassis::has_license() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Chassis::set_has_license() {
  _has_bits_[0] |= 0x10000000u;
}
void Chassis::clear_has_license() {
  _has_bits_[0] &= ~0x10000000u;
}
void Chassis::clear_license() {
  if (license_ != NULL) license_->::apollo::canbus::License::Clear();
  clear_has_license();
}
const ::apollo::canbus::License& Chassis::license() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.license)
  return license_ != NULL ? *license_ : *default_instance_->license_;
}
::apollo::canbus::License* Chassis::mutable_license() {
  set_has_license();
  if (license_ == NULL) {
    license_ = new ::apollo::canbus::License;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.license)
  return license_;
}
::apollo::canbus::License* Chassis::release_license() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.license)
  clear_has_license();
  ::apollo::canbus::License* temp = license_;
  license_ = NULL;
  return temp;
}
void Chassis::set_allocated_license(::apollo::canbus::License* license) {
  delete license_;
  license_ = license;
  if (license) {
    set_has_license();
  } else {
    clear_has_license();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.license)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisGPS::kLatitudeFieldNumber;
const int ChassisGPS::kLongitudeFieldNumber;
const int ChassisGPS::kGpsValidFieldNumber;
const int ChassisGPS::kYearFieldNumber;
const int ChassisGPS::kMonthFieldNumber;
const int ChassisGPS::kDayFieldNumber;
const int ChassisGPS::kHoursFieldNumber;
const int ChassisGPS::kMinutesFieldNumber;
const int ChassisGPS::kSecondsFieldNumber;
const int ChassisGPS::kCompassDirectionFieldNumber;
const int ChassisGPS::kPdopFieldNumber;
const int ChassisGPS::kIsGpsFaultFieldNumber;
const int ChassisGPS::kIsInferredFieldNumber;
const int ChassisGPS::kAltitudeFieldNumber;
const int ChassisGPS::kHeadingFieldNumber;
const int ChassisGPS::kHdopFieldNumber;
const int ChassisGPS::kVdopFieldNumber;
const int ChassisGPS::kQualityFieldNumber;
const int ChassisGPS::kNumSatellitesFieldNumber;
const int ChassisGPS::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisGPS::ChassisGPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisGPS)
}

void ChassisGPS::InitAsDefaultInstance() {
}

ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisGPS)
}

void ChassisGPS::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  gps_valid_ = false;
  year_ = 0;
  month_ = 0;
  day_ = 0;
  hours_ = 0;
  minutes_ = 0;
  seconds_ = 0;
  compass_direction_ = 0;
  pdop_ = 0;
  is_gps_fault_ = false;
  is_inferred_ = false;
  altitude_ = 0;
  heading_ = 0;
  hdop_ = 0;
  vdop_ = 0;
  quality_ = 0;
  num_satellites_ = 0;
  gps_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisGPS)
  SharedDtor();
}

void ChassisGPS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChassisGPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisGPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChassisGPS_descriptor_;
}

const ChassisGPS& ChassisGPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_canbus_2fchassis_2eproto();
  return *default_instance_;
}

ChassisGPS* ChassisGPS::default_instance_ = NULL;

ChassisGPS* ChassisGPS::New(::google::protobuf::Arena* arena) const {
  ChassisGPS* n = new ChassisGPS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisGPS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChassisGPS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChassisGPS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(latitude_, minutes_);
    gps_valid_ = false;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(seconds_, pdop_);
    ZR_(is_gps_fault_, is_inferred_);
    ZR_(altitude_, hdop_);
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ZR_(vdop_, num_satellites_);
    quality_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChassisGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.ChassisGPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gps_valid;
        break;
      }

      // optional bool gps_valid = 3;
      case 3: {
        if (tag == 24) {
         parse_gps_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
          set_has_gps_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_year;
        break;
      }

      // optional int32 year = 4;
      case 4: {
        if (tag == 32) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_month;
        break;
      }

      // optional int32 month = 5;
      case 5: {
        if (tag == 40) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_day;
        break;
      }

      // optional int32 day = 6;
      case 6: {
        if (tag == 48) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hours;
        break;
      }

      // optional int32 hours = 7;
      case 7: {
        if (tag == 56) {
         parse_hours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
          set_has_hours();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_minutes;
        break;
      }

      // optional int32 minutes = 8;
      case 8: {
        if (tag == 64) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
          set_has_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_seconds;
        break;
      }

      // optional int32 seconds = 9;
      case 9: {
        if (tag == 72) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_compass_direction;
        break;
      }

      // optional double compass_direction = 10;
      case 10: {
        if (tag == 81) {
         parse_compass_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
          set_has_compass_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_pdop;
        break;
      }

      // optional double pdop = 11;
      case 11: {
        if (tag == 89) {
         parse_pdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
          set_has_pdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_gps_fault;
        break;
      }

      // optional bool is_gps_fault = 12;
      case 12: {
        if (tag == 96) {
         parse_is_gps_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
          set_has_is_gps_fault();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_inferred;
        break;
      }

      // optional bool is_inferred = 13;
      case 13: {
        if (tag == 104) {
         parse_is_inferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
          set_has_is_inferred();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_altitude;
        break;
      }

      // optional double altitude = 14;
      case 14: {
        if (tag == 113) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_heading;
        break;
      }

      // optional double heading = 15;
      case 15: {
        if (tag == 121) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_hdop;
        break;
      }

      // optional double hdop = 16;
      case 16: {
        if (tag == 129) {
         parse_hdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
          set_has_hdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_vdop;
        break;
      }

      // optional double vdop = 17;
      case 17: {
        if (tag == 137) {
         parse_vdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
          set_has_vdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_quality;
        break;
      }

      // optional .apollo.canbus.GpsQuality quality = 18;
      case 18: {
        if (tag == 144) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::GpsQuality_IsValid(value)) {
            set_quality(static_cast< ::apollo::canbus::GpsQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_num_satellites;
        break;
      }

      // optional int32 num_satellites = 19;
      case 19: {
        if (tag == 152) {
         parse_num_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
          set_has_num_satellites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_gps_speed;
        break;
      }

      // optional double gps_speed = 20;
      case 20: {
        if (tag == 161) {
         parse_gps_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
          set_has_gps_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.ChassisGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.ChassisGPS)
  return false;
#undef DO_
}

void ChassisGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.ChassisGPS)
  // optional double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional bool gps_valid = 3;
  if (has_gps_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gps_valid(), output);
  }

  // optional int32 year = 4;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year(), output);
  }

  // optional int32 month = 5;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->month(), output);
  }

  // optional int32 day = 6;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->day(), output);
  }

  // optional int32 hours = 7;
  if (has_hours()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hours(), output);
  }

  // optional int32 minutes = 8;
  if (has_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->minutes(), output);
  }

  // optional int32 seconds = 9;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seconds(), output);
  }

  // optional double compass_direction = 10;
  if (has_compass_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->compass_direction(), output);
  }

  // optional double pdop = 11;
  if (has_pdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->pdop(), output);
  }

  // optional bool is_gps_fault = 12;
  if (has_is_gps_fault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 13;
  if (has_is_inferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_inferred(), output);
  }

  // optional double altitude = 14;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->altitude(), output);
  }

  // optional double heading = 15;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->heading(), output);
  }

  // optional double hdop = 16;
  if (has_hdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->hdop(), output);
  }

  // optional double vdop = 17;
  if (has_vdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->vdop(), output);
  }

  // optional .apollo.canbus.GpsQuality quality = 18;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->quality(), output);
  }

  // optional int32 num_satellites = 19;
  if (has_num_satellites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_satellites(), output);
  }

  // optional double gps_speed = 20;
  if (has_gps_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->gps_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.ChassisGPS)
}

::google::protobuf::uint8* ChassisGPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisGPS)
  // optional double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional bool gps_valid = 3;
  if (has_gps_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->gps_valid(), target);
  }

  // optional int32 year = 4;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->year(), target);
  }

  // optional int32 month = 5;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->month(), target);
  }

  // optional int32 day = 6;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->day(), target);
  }

  // optional int32 hours = 7;
  if (has_hours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hours(), target);
  }

  // optional int32 minutes = 8;
  if (has_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->minutes(), target);
  }

  // optional int32 seconds = 9;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seconds(), target);
  }

  // optional double compass_direction = 10;
  if (has_compass_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->compass_direction(), target);
  }

  // optional double pdop = 11;
  if (has_pdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->pdop(), target);
  }

  // optional bool is_gps_fault = 12;
  if (has_is_gps_fault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_gps_fault(), target);
  }

  // optional bool is_inferred = 13;
  if (has_is_inferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_inferred(), target);
  }

  // optional double altitude = 14;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->altitude(), target);
  }

  // optional double heading = 15;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->heading(), target);
  }

  // optional double hdop = 16;
  if (has_hdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->hdop(), target);
  }

  // optional double vdop = 17;
  if (has_vdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 18;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->quality(), target);
  }

  // optional int32 num_satellites = 19;
  if (has_num_satellites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->num_satellites(), target);
  }

  // optional double gps_speed = 20;
  if (has_gps_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->gps_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisGPS)
  return target;
}

int ChassisGPS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisGPS)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional bool gps_valid = 3;
    if (has_gps_valid()) {
      total_size += 1 + 1;
    }

    // optional int32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hours = 7;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 8;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 seconds = 9;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional double compass_direction = 10;
    if (has_compass_direction()) {
      total_size += 1 + 8;
    }

    // optional double pdop = 11;
    if (has_pdop()) {
      total_size += 1 + 8;
    }

    // optional bool is_gps_fault = 12;
    if (has_is_gps_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_inferred = 13;
    if (has_is_inferred()) {
      total_size += 1 + 1;
    }

    // optional double altitude = 14;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double heading = 15;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double hdop = 16;
    if (has_hdop()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double vdop = 17;
    if (has_vdop()) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.GpsQuality quality = 18;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional int32 num_satellites = 19;
    if (has_num_satellites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_satellites());
    }

    // optional double gps_speed = 20;
    if (has_gps_speed()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisGPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisGPS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChassisGPS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisGPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisGPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisGPS)
    MergeFrom(*source);
  }
}

void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisGPS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_gps_valid()) {
      set_gps_valid(from.gps_valid());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hours()) {
      set_hours(from.hours());
    }
    if (from.has_minutes()) {
      set_minutes(from.minutes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_compass_direction()) {
      set_compass_direction(from.compass_direction());
    }
    if (from.has_pdop()) {
      set_pdop(from.pdop());
    }
    if (from.has_is_gps_fault()) {
      set_is_gps_fault(from.is_gps_fault());
    }
    if (from.has_is_inferred()) {
      set_is_inferred(from.is_inferred());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_hdop()) {
      set_hdop(from.hdop());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vdop()) {
      set_vdop(from.vdop());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_num_satellites()) {
      set_num_satellites(from.num_satellites());
    }
    if (from.has_gps_speed()) {
      set_gps_speed(from.gps_speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChassisGPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {

  return true;
}

void ChassisGPS::Swap(ChassisGPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisGPS::InternalSwap(ChassisGPS* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(gps_valid_, other->gps_valid_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hours_, other->hours_);
  std::swap(minutes_, other->minutes_);
  std::swap(seconds_, other->seconds_);
  std::swap(compass_direction_, other->compass_direction_);
  std::swap(pdop_, other->pdop_);
  std::swap(is_gps_fault_, other->is_gps_fault_);
  std::swap(is_inferred_, other->is_inferred_);
  std::swap(altitude_, other->altitude_);
  std::swap(heading_, other->heading_);
  std::swap(hdop_, other->hdop_);
  std::swap(vdop_, other->vdop_);
  std::swap(quality_, other->quality_);
  std::swap(num_satellites_, other->num_satellites_);
  std::swap(gps_speed_, other->gps_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisGPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChassisGPS_descriptor_;
  metadata.reflection = ChassisGPS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisGPS

// optional double latitude = 1;
bool ChassisGPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChassisGPS::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void ChassisGPS::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChassisGPS::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double ChassisGPS::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.latitude)
  return latitude_;
}
 void ChassisGPS::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.latitude)
}

// optional double longitude = 2;
bool ChassisGPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChassisGPS::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void ChassisGPS::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChassisGPS::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double ChassisGPS::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.longitude)
  return longitude_;
}
 void ChassisGPS::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.longitude)
}

// optional bool gps_valid = 3;
bool ChassisGPS::has_gps_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChassisGPS::set_has_gps_valid() {
  _has_bits_[0] |= 0x00000004u;
}
void ChassisGPS::clear_has_gps_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChassisGPS::clear_gps_valid() {
  gps_valid_ = false;
  clear_has_gps_valid();
}
 bool ChassisGPS::gps_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.gps_valid)
  return gps_valid_;
}
 void ChassisGPS::set_gps_valid(bool value) {
  set_has_gps_valid();
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.gps_valid)
}

// optional int32 year = 4;
bool ChassisGPS::has_year() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChassisGPS::set_has_year() {
  _has_bits_[0] |= 0x00000008u;
}
void ChassisGPS::clear_has_year() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChassisGPS::clear_year() {
  year_ = 0;
  clear_has_year();
}
 ::google::protobuf::int32 ChassisGPS::year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.year)
  return year_;
}
 void ChassisGPS::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.year)
}

// optional int32 month = 5;
bool ChassisGPS::has_month() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChassisGPS::set_has_month() {
  _has_bits_[0] |= 0x00000010u;
}
void ChassisGPS::clear_has_month() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChassisGPS::clear_month() {
  month_ = 0;
  clear_has_month();
}
 ::google::protobuf::int32 ChassisGPS::month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.month)
  return month_;
}
 void ChassisGPS::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.month)
}

// optional int32 day = 6;
bool ChassisGPS::has_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChassisGPS::set_has_day() {
  _has_bits_[0] |= 0x00000020u;
}
void ChassisGPS::clear_has_day() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChassisGPS::clear_day() {
  day_ = 0;
  clear_has_day();
}
 ::google::protobuf::int32 ChassisGPS::day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.day)
  return day_;
}
 void ChassisGPS::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.day)
}

// optional int32 hours = 7;
bool ChassisGPS::has_hours() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChassisGPS::set_has_hours() {
  _has_bits_[0] |= 0x00000040u;
}
void ChassisGPS::clear_has_hours() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChassisGPS::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
 ::google::protobuf::int32 ChassisGPS::hours() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.hours)
  return hours_;
}
 void ChassisGPS::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.hours)
}

// optional int32 minutes = 8;
bool ChassisGPS::has_minutes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChassisGPS::set_has_minutes() {
  _has_bits_[0] |= 0x00000080u;
}
void ChassisGPS::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChassisGPS::clear_minutes() {
  minutes_ = 0;
  clear_has_minutes();
}
 ::google::protobuf::int32 ChassisGPS::minutes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.minutes)
  return minutes_;
}
 void ChassisGPS::set_minutes(::google::protobuf::int32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.minutes)
}

// optional int32 seconds = 9;
bool ChassisGPS::has_seconds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChassisGPS::set_has_seconds() {
  _has_bits_[0] |= 0x00000100u;
}
void ChassisGPS::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChassisGPS::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
 ::google::protobuf::int32 ChassisGPS::seconds() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.seconds)
  return seconds_;
}
 void ChassisGPS::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.seconds)
}

// optional double compass_direction = 10;
bool ChassisGPS::has_compass_direction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChassisGPS::set_has_compass_direction() {
  _has_bits_[0] |= 0x00000200u;
}
void ChassisGPS::clear_has_compass_direction() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChassisGPS::clear_compass_direction() {
  compass_direction_ = 0;
  clear_has_compass_direction();
}
 double ChassisGPS::compass_direction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.compass_direction)
  return compass_direction_;
}
 void ChassisGPS::set_compass_direction(double value) {
  set_has_compass_direction();
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.compass_direction)
}

// optional double pdop = 11;
bool ChassisGPS::has_pdop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChassisGPS::set_has_pdop() {
  _has_bits_[0] |= 0x00000400u;
}
void ChassisGPS::clear_has_pdop() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChassisGPS::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
 double ChassisGPS::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.pdop)
  return pdop_;
}
 void ChassisGPS::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.pdop)
}

// optional bool is_gps_fault = 12;
bool ChassisGPS::has_is_gps_fault() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChassisGPS::set_has_is_gps_fault() {
  _has_bits_[0] |= 0x00000800u;
}
void ChassisGPS::clear_has_is_gps_fault() {
  _has_bits_[0] &= ~0x00000800u;
}
void ChassisGPS::clear_is_gps_fault() {
  is_gps_fault_ = false;
  clear_has_is_gps_fault();
}
 bool ChassisGPS::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.is_gps_fault)
  return is_gps_fault_;
}
 void ChassisGPS::set_is_gps_fault(bool value) {
  set_has_is_gps_fault();
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.is_gps_fault)
}

// optional bool is_inferred = 13;
bool ChassisGPS::has_is_inferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ChassisGPS::set_has_is_inferred() {
  _has_bits_[0] |= 0x00001000u;
}
void ChassisGPS::clear_has_is_inferred() {
  _has_bits_[0] &= ~0x00001000u;
}
void ChassisGPS::clear_is_inferred() {
  is_inferred_ = false;
  clear_has_is_inferred();
}
 bool ChassisGPS::is_inferred() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.is_inferred)
  return is_inferred_;
}
 void ChassisGPS::set_is_inferred(bool value) {
  set_has_is_inferred();
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.is_inferred)
}

// optional double altitude = 14;
bool ChassisGPS::has_altitude() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ChassisGPS::set_has_altitude() {
  _has_bits_[0] |= 0x00002000u;
}
void ChassisGPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00002000u;
}
void ChassisGPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
 double ChassisGPS::altitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.altitude)
  return altitude_;
}
 void ChassisGPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.altitude)
}

// optional double heading = 15;
bool ChassisGPS::has_heading() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ChassisGPS::set_has_heading() {
  _has_bits_[0] |= 0x00004000u;
}
void ChassisGPS::clear_has_heading() {
  _has_bits_[0] &= ~0x00004000u;
}
void ChassisGPS::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double ChassisGPS::heading() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.heading)
  return heading_;
}
 void ChassisGPS::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.heading)
}

// optional double hdop = 16;
bool ChassisGPS::has_hdop() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ChassisGPS::set_has_hdop() {
  _has_bits_[0] |= 0x00008000u;
}
void ChassisGPS::clear_has_hdop() {
  _has_bits_[0] &= ~0x00008000u;
}
void ChassisGPS::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
 double ChassisGPS::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.hdop)
  return hdop_;
}
 void ChassisGPS::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.hdop)
}

// optional double vdop = 17;
bool ChassisGPS::has_vdop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ChassisGPS::set_has_vdop() {
  _has_bits_[0] |= 0x00010000u;
}
void ChassisGPS::clear_has_vdop() {
  _has_bits_[0] &= ~0x00010000u;
}
void ChassisGPS::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
 double ChassisGPS::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.vdop)
  return vdop_;
}
 void ChassisGPS::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.vdop)
}

// optional .apollo.canbus.GpsQuality quality = 18;
bool ChassisGPS::has_quality() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ChassisGPS::set_has_quality() {
  _has_bits_[0] |= 0x00020000u;
}
void ChassisGPS::clear_has_quality() {
  _has_bits_[0] &= ~0x00020000u;
}
void ChassisGPS::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
 ::apollo::canbus::GpsQuality ChassisGPS::quality() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.quality)
  return static_cast< ::apollo::canbus::GpsQuality >(quality_);
}
 void ChassisGPS::set_quality(::apollo::canbus::GpsQuality value) {
  assert(::apollo::canbus::GpsQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.quality)
}

// optional int32 num_satellites = 19;
bool ChassisGPS::has_num_satellites() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ChassisGPS::set_has_num_satellites() {
  _has_bits_[0] |= 0x00040000u;
}
void ChassisGPS::clear_has_num_satellites() {
  _has_bits_[0] &= ~0x00040000u;
}
void ChassisGPS::clear_num_satellites() {
  num_satellites_ = 0;
  clear_has_num_satellites();
}
 ::google::protobuf::int32 ChassisGPS::num_satellites() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.num_satellites)
  return num_satellites_;
}
 void ChassisGPS::set_num_satellites(::google::protobuf::int32 value) {
  set_has_num_satellites();
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.num_satellites)
}

// optional double gps_speed = 20;
bool ChassisGPS::has_gps_speed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ChassisGPS::set_has_gps_speed() {
  _has_bits_[0] |= 0x00080000u;
}
void ChassisGPS::clear_has_gps_speed() {
  _has_bits_[0] &= ~0x00080000u;
}
void ChassisGPS::clear_gps_speed() {
  gps_speed_ = 0;
  clear_has_gps_speed();
}
 double ChassisGPS::gps_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.gps_speed)
  return gps_speed_;
}
 void ChassisGPS::set_gps_speed(double value) {
  set_has_gps_speed();
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.gps_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WheelSpeed_WheelSpeedType_descriptor_;
}
bool WheelSpeed_WheelSpeedType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WheelSpeed_WheelSpeedType WheelSpeed::FORWARD;
const WheelSpeed_WheelSpeedType WheelSpeed::BACKWARD;
const WheelSpeed_WheelSpeedType WheelSpeed::STANDSTILL;
const WheelSpeed_WheelSpeedType WheelSpeed::INVALID;
const WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MIN;
const WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MAX;
const int WheelSpeed::WheelSpeedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WheelSpeed::kIsWheelSpdRrValidFieldNumber;
const int WheelSpeed::kWheelDirectionRrFieldNumber;
const int WheelSpeed::kWheelSpdRrFieldNumber;
const int WheelSpeed::kIsWheelSpdRlValidFieldNumber;
const int WheelSpeed::kWheelDirectionRlFieldNumber;
const int WheelSpeed::kWheelSpdRlFieldNumber;
const int WheelSpeed::kIsWheelSpdFrValidFieldNumber;
const int WheelSpeed::kWheelDirectionFrFieldNumber;
const int WheelSpeed::kWheelSpdFrFieldNumber;
const int WheelSpeed::kIsWheelSpdFlValidFieldNumber;
const int WheelSpeed::kWheelDirectionFlFieldNumber;
const int WheelSpeed::kWheelSpdFlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WheelSpeed::WheelSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.WheelSpeed)
}

void WheelSpeed::InitAsDefaultInstance() {
}

WheelSpeed::WheelSpeed(const WheelSpeed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.WheelSpeed)
}

void WheelSpeed::SharedCtor() {
  _cached_size_ = 0;
  is_wheel_spd_rr_valid_ = false;
  wheel_direction_rr_ = 3;
  wheel_spd_rr_ = 0;
  is_wheel_spd_rl_valid_ = false;
  wheel_direction_rl_ = 3;
  wheel_spd_rl_ = 0;
  is_wheel_spd_fr_valid_ = false;
  wheel_direction_fr_ = 3;
  wheel_spd_fr_ = 0;
  is_wheel_spd_fl_valid_ = false;
  wheel_direction_fl_ = 3;
  wheel_spd_fl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WheelSpeed::~WheelSpeed() {
  // @@protoc_insertion_point(destructor:apollo.canbus.WheelSpeed)
  SharedDtor();
}

void WheelSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WheelSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WheelSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WheelSpeed_descriptor_;
}

const WheelSpeed& WheelSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_canbus_2fchassis_2eproto();
  return *default_instance_;
}

WheelSpeed* WheelSpeed::default_instance_ = NULL;

WheelSpeed* WheelSpeed::New(::google::protobuf::Arena* arena) const {
  WheelSpeed* n = new WheelSpeed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WheelSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.WheelSpeed)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WheelSpeed, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WheelSpeed*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(wheel_spd_rl_, is_wheel_spd_fr_valid_);
    wheel_direction_rr_ = 3;
    wheel_spd_rr_ = 0;
    wheel_direction_rl_ = 3;
    wheel_direction_fr_ = 3;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(wheel_spd_fr_, wheel_spd_fl_);
    is_wheel_spd_fl_valid_ = false;
    wheel_direction_fl_ = 3;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WheelSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.WheelSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_wheel_spd_rr_valid = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rr_valid_)));
          set_has_is_wheel_spd_rr_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wheel_direction_rr;
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
      case 2: {
        if (tag == 16) {
         parse_wheel_direction_rr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rr(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_wheel_spd_rr;
        break;
      }

      // optional double wheel_spd_rr = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_wheel_spd_rr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rr_)));
          set_has_wheel_spd_rr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_wheel_spd_rl_valid;
        break;
      }

      // optional bool is_wheel_spd_rl_valid = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_wheel_spd_rl_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rl_valid_)));
          set_has_is_wheel_spd_rl_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wheel_direction_rl;
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
      case 5: {
        if (tag == 40) {
         parse_wheel_direction_rl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rl(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_wheel_spd_rl;
        break;
      }

      // optional double wheel_spd_rl = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_wheel_spd_rl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rl_)));
          set_has_wheel_spd_rl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_wheel_spd_fr_valid;
        break;
      }

      // optional bool is_wheel_spd_fr_valid = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_is_wheel_spd_fr_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fr_valid_)));
          set_has_is_wheel_spd_fr_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wheel_direction_fr;
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
      case 8: {
        if (tag == 64) {
         parse_wheel_direction_fr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fr(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_wheel_spd_fr;
        break;
      }

      // optional double wheel_spd_fr = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_wheel_spd_fr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fr_)));
          set_has_wheel_spd_fr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_wheel_spd_fl_valid;
        break;
      }

      // optional bool is_wheel_spd_fl_valid = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_is_wheel_spd_fl_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fl_valid_)));
          set_has_is_wheel_spd_fl_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wheel_direction_fl;
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
      case 11: {
        if (tag == 88) {
         parse_wheel_direction_fl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fl(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_wheel_spd_fl;
        break;
      }

      // optional double wheel_spd_fl = 12 [default = 0];
      case 12: {
        if (tag == 97) {
         parse_wheel_spd_fl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fl_)));
          set_has_wheel_spd_fl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.WheelSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.WheelSpeed)
  return false;
#undef DO_
}

void WheelSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.WheelSpeed)
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (has_is_wheel_spd_rr_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_wheel_spd_rr_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (has_wheel_direction_rr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->wheel_direction_rr(), output);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (has_wheel_spd_rr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->wheel_spd_rr(), output);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (has_is_wheel_spd_rl_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_wheel_spd_rl_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (has_wheel_direction_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wheel_direction_rl(), output);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (has_wheel_spd_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_spd_rl(), output);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (has_is_wheel_spd_fr_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wheel_spd_fr_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (has_wheel_direction_fr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wheel_direction_fr(), output);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (has_wheel_spd_fr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wheel_spd_fr(), output);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (has_is_wheel_spd_fl_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_wheel_spd_fl_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (has_wheel_direction_fl()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->wheel_direction_fl(), output);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (has_wheel_spd_fl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_spd_fl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.WheelSpeed)
}

::google::protobuf::uint8* WheelSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.WheelSpeed)
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (has_is_wheel_spd_rr_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (has_wheel_direction_rr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (has_wheel_spd_rr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (has_is_wheel_spd_rl_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (has_wheel_direction_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (has_wheel_spd_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (has_is_wheel_spd_fr_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (has_wheel_direction_fr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (has_wheel_spd_fr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (has_is_wheel_spd_fl_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (has_wheel_direction_fl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (has_wheel_spd_fl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_spd_fl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.WheelSpeed)
  return target;
}

int WheelSpeed::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.WheelSpeed)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool is_wheel_spd_rr_valid = 1 [default = false];
    if (has_is_wheel_spd_rr_valid()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
    if (has_wheel_direction_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rr());
    }

    // optional double wheel_spd_rr = 3 [default = 0];
    if (has_wheel_spd_rr()) {
      total_size += 1 + 8;
    }

    // optional bool is_wheel_spd_rl_valid = 4 [default = false];
    if (has_is_wheel_spd_rl_valid()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
    if (has_wheel_direction_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rl());
    }

    // optional double wheel_spd_rl = 6 [default = 0];
    if (has_wheel_spd_rl()) {
      total_size += 1 + 8;
    }

    // optional bool is_wheel_spd_fr_valid = 7 [default = false];
    if (has_is_wheel_spd_fr_valid()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
    if (has_wheel_direction_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fr());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double wheel_spd_fr = 9 [default = 0];
    if (has_wheel_spd_fr()) {
      total_size += 1 + 8;
    }

    // optional bool is_wheel_spd_fl_valid = 10 [default = false];
    if (has_is_wheel_spd_fl_valid()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
    if (has_wheel_direction_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fl());
    }

    // optional double wheel_spd_fl = 12 [default = 0];
    if (has_wheel_spd_fl()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WheelSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.WheelSpeed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WheelSpeed* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WheelSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.WheelSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.WheelSpeed)
    MergeFrom(*source);
  }
}

void WheelSpeed::MergeFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.WheelSpeed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_wheel_spd_rr_valid()) {
      set_is_wheel_spd_rr_valid(from.is_wheel_spd_rr_valid());
    }
    if (from.has_wheel_direction_rr()) {
      set_wheel_direction_rr(from.wheel_direction_rr());
    }
    if (from.has_wheel_spd_rr()) {
      set_wheel_spd_rr(from.wheel_spd_rr());
    }
    if (from.has_is_wheel_spd_rl_valid()) {
      set_is_wheel_spd_rl_valid(from.is_wheel_spd_rl_valid());
    }
    if (from.has_wheel_direction_rl()) {
      set_wheel_direction_rl(from.wheel_direction_rl());
    }
    if (from.has_wheel_spd_rl()) {
      set_wheel_spd_rl(from.wheel_spd_rl());
    }
    if (from.has_is_wheel_spd_fr_valid()) {
      set_is_wheel_spd_fr_valid(from.is_wheel_spd_fr_valid());
    }
    if (from.has_wheel_direction_fr()) {
      set_wheel_direction_fr(from.wheel_direction_fr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wheel_spd_fr()) {
      set_wheel_spd_fr(from.wheel_spd_fr());
    }
    if (from.has_is_wheel_spd_fl_valid()) {
      set_is_wheel_spd_fl_valid(from.is_wheel_spd_fl_valid());
    }
    if (from.has_wheel_direction_fl()) {
      set_wheel_direction_fl(from.wheel_direction_fl());
    }
    if (from.has_wheel_spd_fl()) {
      set_wheel_spd_fl(from.wheel_spd_fl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WheelSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelSpeed::CopyFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelSpeed::IsInitialized() const {

  return true;
}

void WheelSpeed::Swap(WheelSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WheelSpeed::InternalSwap(WheelSpeed* other) {
  std::swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  std::swap(wheel_direction_rr_, other->wheel_direction_rr_);
  std::swap(wheel_spd_rr_, other->wheel_spd_rr_);
  std::swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  std::swap(wheel_direction_rl_, other->wheel_direction_rl_);
  std::swap(wheel_spd_rl_, other->wheel_spd_rl_);
  std::swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  std::swap(wheel_direction_fr_, other->wheel_direction_fr_);
  std::swap(wheel_spd_fr_, other->wheel_spd_fr_);
  std::swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  std::swap(wheel_direction_fl_, other->wheel_direction_fl_);
  std::swap(wheel_spd_fl_, other->wheel_spd_fl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WheelSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WheelSpeed_descriptor_;
  metadata.reflection = WheelSpeed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WheelSpeed

// optional bool is_wheel_spd_rr_valid = 1 [default = false];
bool WheelSpeed::has_is_wheel_spd_rr_valid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] |= 0x00000001u;
}
void WheelSpeed::clear_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] &= ~0x00000001u;
}
void WheelSpeed::clear_is_wheel_spd_rr_valid() {
  is_wheel_spd_rr_valid_ = false;
  clear_has_is_wheel_spd_rr_valid();
}
 bool WheelSpeed::is_wheel_spd_rr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.is_wheel_spd_rr_valid)
  return is_wheel_spd_rr_valid_;
}
 void WheelSpeed::set_is_wheel_spd_rr_valid(bool value) {
  set_has_is_wheel_spd_rr_valid();
  is_wheel_spd_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.is_wheel_spd_rr_valid)
}

// optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
bool WheelSpeed::has_wheel_direction_rr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WheelSpeed::set_has_wheel_direction_rr() {
  _has_bits_[0] |= 0x00000002u;
}
void WheelSpeed::clear_has_wheel_direction_rr() {
  _has_bits_[0] &= ~0x00000002u;
}
void WheelSpeed::clear_wheel_direction_rr() {
  wheel_direction_rr_ = 3;
  clear_has_wheel_direction_rr();
}
 ::apollo::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_direction_rr)
  return static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_rr_);
}
 void WheelSpeed::set_wheel_direction_rr(::apollo::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_rr();
  wheel_direction_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_direction_rr)
}

// optional double wheel_spd_rr = 3 [default = 0];
bool WheelSpeed::has_wheel_spd_rr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WheelSpeed::set_has_wheel_spd_rr() {
  _has_bits_[0] |= 0x00000004u;
}
void WheelSpeed::clear_has_wheel_spd_rr() {
  _has_bits_[0] &= ~0x00000004u;
}
void WheelSpeed::clear_wheel_spd_rr() {
  wheel_spd_rr_ = 0;
  clear_has_wheel_spd_rr();
}
 double WheelSpeed::wheel_spd_rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_spd_rr)
  return wheel_spd_rr_;
}
 void WheelSpeed::set_wheel_spd_rr(double value) {
  set_has_wheel_spd_rr();
  wheel_spd_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_spd_rr)
}

// optional bool is_wheel_spd_rl_valid = 4 [default = false];
bool WheelSpeed::has_is_wheel_spd_rl_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] |= 0x00000008u;
}
void WheelSpeed::clear_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
void WheelSpeed::clear_is_wheel_spd_rl_valid() {
  is_wheel_spd_rl_valid_ = false;
  clear_has_is_wheel_spd_rl_valid();
}
 bool WheelSpeed::is_wheel_spd_rl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.is_wheel_spd_rl_valid)
  return is_wheel_spd_rl_valid_;
}
 void WheelSpeed::set_is_wheel_spd_rl_valid(bool value) {
  set_has_is_wheel_spd_rl_valid();
  is_wheel_spd_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.is_wheel_spd_rl_valid)
}

// optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
bool WheelSpeed::has_wheel_direction_rl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WheelSpeed::set_has_wheel_direction_rl() {
  _has_bits_[0] |= 0x00000010u;
}
void WheelSpeed::clear_has_wheel_direction_rl() {
  _has_bits_[0] &= ~0x00000010u;
}
void WheelSpeed::clear_wheel_direction_rl() {
  wheel_direction_rl_ = 3;
  clear_has_wheel_direction_rl();
}
 ::apollo::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_direction_rl)
  return static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_rl_);
}
 void WheelSpeed::set_wheel_direction_rl(::apollo::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_rl();
  wheel_direction_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_direction_rl)
}

// optional double wheel_spd_rl = 6 [default = 0];
bool WheelSpeed::has_wheel_spd_rl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WheelSpeed::set_has_wheel_spd_rl() {
  _has_bits_[0] |= 0x00000020u;
}
void WheelSpeed::clear_has_wheel_spd_rl() {
  _has_bits_[0] &= ~0x00000020u;
}
void WheelSpeed::clear_wheel_spd_rl() {
  wheel_spd_rl_ = 0;
  clear_has_wheel_spd_rl();
}
 double WheelSpeed::wheel_spd_rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_spd_rl)
  return wheel_spd_rl_;
}
 void WheelSpeed::set_wheel_spd_rl(double value) {
  set_has_wheel_spd_rl();
  wheel_spd_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_spd_rl)
}

// optional bool is_wheel_spd_fr_valid = 7 [default = false];
bool WheelSpeed::has_is_wheel_spd_fr_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] |= 0x00000040u;
}
void WheelSpeed::clear_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
void WheelSpeed::clear_is_wheel_spd_fr_valid() {
  is_wheel_spd_fr_valid_ = false;
  clear_has_is_wheel_spd_fr_valid();
}
 bool WheelSpeed::is_wheel_spd_fr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.is_wheel_spd_fr_valid)
  return is_wheel_spd_fr_valid_;
}
 void WheelSpeed::set_is_wheel_spd_fr_valid(bool value) {
  set_has_is_wheel_spd_fr_valid();
  is_wheel_spd_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.is_wheel_spd_fr_valid)
}

// optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
bool WheelSpeed::has_wheel_direction_fr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WheelSpeed::set_has_wheel_direction_fr() {
  _has_bits_[0] |= 0x00000080u;
}
void WheelSpeed::clear_has_wheel_direction_fr() {
  _has_bits_[0] &= ~0x00000080u;
}
void WheelSpeed::clear_wheel_direction_fr() {
  wheel_direction_fr_ = 3;
  clear_has_wheel_direction_fr();
}
 ::apollo::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_direction_fr)
  return static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_fr_);
}
 void WheelSpeed::set_wheel_direction_fr(::apollo::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_fr();
  wheel_direction_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_direction_fr)
}

// optional double wheel_spd_fr = 9 [default = 0];
bool WheelSpeed::has_wheel_spd_fr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WheelSpeed::set_has_wheel_spd_fr() {
  _has_bits_[0] |= 0x00000100u;
}
void WheelSpeed::clear_has_wheel_spd_fr() {
  _has_bits_[0] &= ~0x00000100u;
}
void WheelSpeed::clear_wheel_spd_fr() {
  wheel_spd_fr_ = 0;
  clear_has_wheel_spd_fr();
}
 double WheelSpeed::wheel_spd_fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_spd_fr)
  return wheel_spd_fr_;
}
 void WheelSpeed::set_wheel_spd_fr(double value) {
  set_has_wheel_spd_fr();
  wheel_spd_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_spd_fr)
}

// optional bool is_wheel_spd_fl_valid = 10 [default = false];
bool WheelSpeed::has_is_wheel_spd_fl_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] |= 0x00000200u;
}
void WheelSpeed::clear_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
void WheelSpeed::clear_is_wheel_spd_fl_valid() {
  is_wheel_spd_fl_valid_ = false;
  clear_has_is_wheel_spd_fl_valid();
}
 bool WheelSpeed::is_wheel_spd_fl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.is_wheel_spd_fl_valid)
  return is_wheel_spd_fl_valid_;
}
 void WheelSpeed::set_is_wheel_spd_fl_valid(bool value) {
  set_has_is_wheel_spd_fl_valid();
  is_wheel_spd_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.is_wheel_spd_fl_valid)
}

// optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
bool WheelSpeed::has_wheel_direction_fl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WheelSpeed::set_has_wheel_direction_fl() {
  _has_bits_[0] |= 0x00000400u;
}
void WheelSpeed::clear_has_wheel_direction_fl() {
  _has_bits_[0] &= ~0x00000400u;
}
void WheelSpeed::clear_wheel_direction_fl() {
  wheel_direction_fl_ = 3;
  clear_has_wheel_direction_fl();
}
 ::apollo::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_direction_fl)
  return static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_fl_);
}
 void WheelSpeed::set_wheel_direction_fl(::apollo::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_fl();
  wheel_direction_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_direction_fl)
}

// optional double wheel_spd_fl = 12 [default = 0];
bool WheelSpeed::has_wheel_spd_fl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WheelSpeed::set_has_wheel_spd_fl() {
  _has_bits_[0] |= 0x00000800u;
}
void WheelSpeed::clear_has_wheel_spd_fl() {
  _has_bits_[0] &= ~0x00000800u;
}
void WheelSpeed::clear_wheel_spd_fl() {
  wheel_spd_fl_ = 0;
  clear_has_wheel_spd_fl();
}
 double WheelSpeed::wheel_spd_fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.WheelSpeed.wheel_spd_fl)
  return wheel_spd_fl_;
}
 void WheelSpeed::set_wheel_spd_fl(double value) {
  set_has_wheel_spd_fl();
  wheel_spd_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.WheelSpeed.wheel_spd_fl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sonar::kRangeFieldNumber;
const int Sonar::kTranslationFieldNumber;
const int Sonar::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sonar::Sonar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Sonar)
}

void Sonar::InitAsDefaultInstance() {
  translation_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  rotation_ = const_cast< ::apollo::common::Quaternion*>(&::apollo::common::Quaternion::default_instance());
}

Sonar::Sonar(const Sonar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Sonar)
}

void Sonar::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
  translation_ = NULL;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Sonar)
  SharedDtor();
}

void Sonar::SharedDtor() {
  if (this != default_instance_) {
    delete translation_;
    delete rotation_;
  }
}

void Sonar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sonar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sonar_descriptor_;
}

const Sonar& Sonar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_canbus_2fchassis_2eproto();
  return *default_instance_;
}

Sonar* Sonar::default_instance_ = NULL;

Sonar* Sonar::New(::google::protobuf::Arena* arena) const {
  Sonar* n = new Sonar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Sonar)
  if (_has_bits_[0 / 32] & 7u) {
    range_ = 0;
    if (has_translation()) {
      if (translation_ != NULL) translation_->::apollo::common::Point3D::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::apollo::common::Quaternion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Sonar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Sonar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double range = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_translation;
        break;
      }

      // optional .apollo.common.Point3D translation = 2;
      case 2: {
        if (tag == 18) {
         parse_translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rotation;
        break;
      }

      // optional .apollo.common.Quaternion rotation = 3;
      case 3: {
        if (tag == 26) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Sonar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Sonar)
  return false;
#undef DO_
}

void Sonar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Sonar)
  // optional double range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->range(), output);
  }

  // optional .apollo.common.Point3D translation = 2;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->translation_, output);
  }

  // optional .apollo.common.Quaternion rotation = 3;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Sonar)
}

::google::protobuf::uint8* Sonar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Sonar)
  // optional double range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->range(), target);
  }

  // optional .apollo.common.Point3D translation = 2;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->translation_, false, target);
  }

  // optional .apollo.common.Quaternion rotation = 3;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rotation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Sonar)
  return target;
}

int Sonar::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Sonar)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double range = 1;
    if (has_range()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.Point3D translation = 2;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->translation_);
    }

    // optional .apollo.common.Quaternion rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sonar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Sonar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Sonar* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Sonar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Sonar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Sonar)
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Sonar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_translation()) {
      mutable_translation()->::apollo::common::Point3D::MergeFrom(from.translation());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::apollo::common::Quaternion::MergeFrom(from.rotation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Sonar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {

  return true;
}

void Sonar::Swap(Sonar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sonar::InternalSwap(Sonar* other) {
  std::swap(range_, other->range_);
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sonar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sonar_descriptor_;
  metadata.reflection = Sonar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sonar

// optional double range = 1;
bool Sonar::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sonar::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
void Sonar::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sonar::clear_range() {
  range_ = 0;
  clear_has_range();
}
 double Sonar::range() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Sonar.range)
  return range_;
}
 void Sonar::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Sonar.range)
}

// optional .apollo.common.Point3D translation = 2;
bool Sonar::has_translation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sonar::set_has_translation() {
  _has_bits_[0] |= 0x00000002u;
}
void Sonar::clear_has_translation() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sonar::clear_translation() {
  if (translation_ != NULL) translation_->::apollo::common::Point3D::Clear();
  clear_has_translation();
}
const ::apollo::common::Point3D& Sonar::translation() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Sonar.translation)
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
::apollo::common::Point3D* Sonar::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Sonar.translation)
  return translation_;
}
::apollo::common::Point3D* Sonar::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Sonar.translation)
  clear_has_translation();
  ::apollo::common::Point3D* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Sonar::set_allocated_translation(::apollo::common::Point3D* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Sonar.translation)
}

// optional .apollo.common.Quaternion rotation = 3;
bool Sonar::has_rotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sonar::set_has_rotation() {
  _has_bits_[0] |= 0x00000004u;
}
void Sonar::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sonar::clear_rotation() {
  if (rotation_ != NULL) rotation_->::apollo::common::Quaternion::Clear();
  clear_has_rotation();
}
const ::apollo::common::Quaternion& Sonar::rotation() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Sonar.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
::apollo::common::Quaternion* Sonar::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::apollo::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Sonar.rotation)
  return rotation_;
}
::apollo::common::Quaternion* Sonar::release_rotation() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Sonar.rotation)
  clear_has_rotation();
  ::apollo::common::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Sonar::set_allocated_rotation(::apollo::common::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Sonar.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Surround::kCrossTrafficAlertLeftFieldNumber;
const int Surround::kCrossTrafficAlertLeftEnabledFieldNumber;
const int Surround::kBlindSpotLeftAlertFieldNumber;
const int Surround::kBlindSpotLeftAlertEnabledFieldNumber;
const int Surround::kCrossTrafficAlertRightFieldNumber;
const int Surround::kCrossTrafficAlertRightEnabledFieldNumber;
const int Surround::kBlindSpotRightAlertFieldNumber;
const int Surround::kBlindSpotRightAlertEnabledFieldNumber;
const int Surround::kSonar00FieldNumber;
const int Surround::kSonar01FieldNumber;
const int Surround::kSonar02FieldNumber;
const int Surround::kSonar03FieldNumber;
const int Surround::kSonar04FieldNumber;
const int Surround::kSonar05FieldNumber;
const int Surround::kSonar06FieldNumber;
const int Surround::kSonar07FieldNumber;
const int Surround::kSonar08FieldNumber;
const int Surround::kSonar09FieldNumber;
const int Surround::kSonar10FieldNumber;
const int Surround::kSonar11FieldNumber;
const int Surround::kSonarEnabledFieldNumber;
const int Surround::kSonarFaultFieldNumber;
const int Surround::kSonarRangeFieldNumber;
const int Surround::kSonarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Surround::Surround()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Surround)
}

void Surround::InitAsDefaultInstance() {
}

Surround::Surround(const Surround& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Surround)
}

void Surround::SharedCtor() {
  _cached_size_ = 0;
  cross_traffic_alert_left_ = false;
  cross_traffic_alert_left_enabled_ = false;
  blind_spot_left_alert_ = false;
  blind_spot_left_alert_enabled_ = false;
  cross_traffic_alert_right_ = false;
  cross_traffic_alert_right_enabled_ = false;
  blind_spot_right_alert_ = false;
  blind_spot_right_alert_enabled_ = false;
  sonar00_ = 0;
  sonar01_ = 0;
  sonar02_ = 0;
  sonar03_ = 0;
  sonar04_ = 0;
  sonar05_ = 0;
  sonar06_ = 0;
  sonar07_ = 0;
  sonar08_ = 0;
  sonar09_ = 0;
  sonar10_ = 0;
  sonar11_ = 0;
  sonar_enabled_ = false;
  sonar_fault_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Surround::~Surround() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Surround)
  SharedDtor();
}

void Surround::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Surround::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Surround::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Surround_descriptor_;
}

const Surround& Surround::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_canbus_2fchassis_2eproto();
  return *default_instance_;
}

Surround* Surround::default_instance_ = NULL;

Surround* Surround::New(::google::protobuf::Arena* arena) const {
  Surround* n = new Surround;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Surround::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Surround)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Surround, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Surround*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(cross_traffic_alert_left_, blind_spot_right_alert_enabled_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(sonar00_, sonar07_);
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(sonar08_, sonar11_);
    ZR_(sonar_enabled_, sonar_fault_);
  }

#undef ZR_HELPER_
#undef ZR_

  sonar_range_.Clear();
  sonar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Surround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Surround)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cross_traffic_alert_left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_left_)));
          set_has_cross_traffic_alert_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cross_traffic_alert_left_enabled;
        break;
      }

      // optional bool cross_traffic_alert_left_enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_cross_traffic_alert_left_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_left_enabled_)));
          set_has_cross_traffic_alert_left_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blind_spot_left_alert;
        break;
      }

      // optional bool blind_spot_left_alert = 3;
      case 3: {
        if (tag == 24) {
         parse_blind_spot_left_alert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_left_alert_)));
          set_has_blind_spot_left_alert();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blind_spot_left_alert_enabled;
        break;
      }

      // optional bool blind_spot_left_alert_enabled = 4;
      case 4: {
        if (tag == 32) {
         parse_blind_spot_left_alert_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_left_alert_enabled_)));
          set_has_blind_spot_left_alert_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cross_traffic_alert_right;
        break;
      }

      // optional bool cross_traffic_alert_right = 5;
      case 5: {
        if (tag == 40) {
         parse_cross_traffic_alert_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_right_)));
          set_has_cross_traffic_alert_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cross_traffic_alert_right_enabled;
        break;
      }

      // optional bool cross_traffic_alert_right_enabled = 6;
      case 6: {
        if (tag == 48) {
         parse_cross_traffic_alert_right_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_right_enabled_)));
          set_has_cross_traffic_alert_right_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_blind_spot_right_alert;
        break;
      }

      // optional bool blind_spot_right_alert = 7;
      case 7: {
        if (tag == 56) {
         parse_blind_spot_right_alert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_right_alert_)));
          set_has_blind_spot_right_alert();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_blind_spot_right_alert_enabled;
        break;
      }

      // optional bool blind_spot_right_alert_enabled = 8;
      case 8: {
        if (tag == 64) {
         parse_blind_spot_right_alert_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_right_alert_enabled_)));
          set_has_blind_spot_right_alert_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_sonar00;
        break;
      }

      // optional double sonar00 = 9;
      case 9: {
        if (tag == 73) {
         parse_sonar00:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar00_)));
          set_has_sonar00();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_sonar01;
        break;
      }

      // optional double sonar01 = 10;
      case 10: {
        if (tag == 81) {
         parse_sonar01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar01_)));
          set_has_sonar01();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_sonar02;
        break;
      }

      // optional double sonar02 = 11;
      case 11: {
        if (tag == 89) {
         parse_sonar02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar02_)));
          set_has_sonar02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_sonar03;
        break;
      }

      // optional double sonar03 = 12;
      case 12: {
        if (tag == 97) {
         parse_sonar03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar03_)));
          set_has_sonar03();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_sonar04;
        break;
      }

      // optional double sonar04 = 13;
      case 13: {
        if (tag == 105) {
         parse_sonar04:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar04_)));
          set_has_sonar04();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_sonar05;
        break;
      }

      // optional double sonar05 = 14;
      case 14: {
        if (tag == 113) {
         parse_sonar05:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar05_)));
          set_has_sonar05();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_sonar06;
        break;
      }

      // optional double sonar06 = 15;
      case 15: {
        if (tag == 121) {
         parse_sonar06:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar06_)));
          set_has_sonar06();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_sonar07;
        break;
      }

      // optional double sonar07 = 16;
      case 16: {
        if (tag == 129) {
         parse_sonar07:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar07_)));
          set_has_sonar07();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_sonar08;
        break;
      }

      // optional double sonar08 = 17;
      case 17: {
        if (tag == 137) {
         parse_sonar08:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar08_)));
          set_has_sonar08();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_sonar09;
        break;
      }

      // optional double sonar09 = 18;
      case 18: {
        if (tag == 145) {
         parse_sonar09:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar09_)));
          set_has_sonar09();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_sonar10;
        break;
      }

      // optional double sonar10 = 19;
      case 19: {
        if (tag == 153) {
         parse_sonar10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar10_)));
          set_has_sonar10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_sonar11;
        break;
      }

      // optional double sonar11 = 20;
      case 20: {
        if (tag == 161) {
         parse_sonar11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar11_)));
          set_has_sonar11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_sonar_enabled;
        break;
      }

      // optional bool sonar_enabled = 21;
      case 21: {
        if (tag == 168) {
         parse_sonar_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sonar_enabled_)));
          set_has_sonar_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_sonar_fault;
        break;
      }

      // optional bool sonar_fault = 22;
      case 22: {
        if (tag == 176) {
         parse_sonar_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sonar_fault_)));
          set_has_sonar_fault();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_sonar_range;
        break;
      }

      // repeated double sonar_range = 23;
      case 23: {
        if (tag == 185) {
         parse_sonar_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 185, input, this->mutable_sonar_range())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sonar_range())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_sonar_range;
        if (input->ExpectTag(194)) goto parse_sonar;
        break;
      }

      // repeated .apollo.canbus.Sonar sonar = 24;
      case 24: {
        if (tag == 194) {
         parse_sonar:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sonar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sonar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_loop_sonar;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Surround)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Surround)
  return false;
#undef DO_
}

void Surround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Surround)
  // optional bool cross_traffic_alert_left = 1;
  if (has_cross_traffic_alert_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cross_traffic_alert_left(), output);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (has_cross_traffic_alert_left_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cross_traffic_alert_left_enabled(), output);
  }

  // optional bool blind_spot_left_alert = 3;
  if (has_blind_spot_left_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blind_spot_left_alert(), output);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (has_blind_spot_left_alert_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blind_spot_left_alert_enabled(), output);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (has_cross_traffic_alert_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cross_traffic_alert_right(), output);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (has_cross_traffic_alert_right_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cross_traffic_alert_right_enabled(), output);
  }

  // optional bool blind_spot_right_alert = 7;
  if (has_blind_spot_right_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->blind_spot_right_alert(), output);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (has_blind_spot_right_alert_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->blind_spot_right_alert_enabled(), output);
  }

  // optional double sonar00 = 9;
  if (has_sonar00()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->sonar00(), output);
  }

  // optional double sonar01 = 10;
  if (has_sonar01()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sonar01(), output);
  }

  // optional double sonar02 = 11;
  if (has_sonar02()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->sonar02(), output);
  }

  // optional double sonar03 = 12;
  if (has_sonar03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->sonar03(), output);
  }

  // optional double sonar04 = 13;
  if (has_sonar04()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->sonar04(), output);
  }

  // optional double sonar05 = 14;
  if (has_sonar05()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->sonar05(), output);
  }

  // optional double sonar06 = 15;
  if (has_sonar06()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->sonar06(), output);
  }

  // optional double sonar07 = 16;
  if (has_sonar07()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sonar07(), output);
  }

  // optional double sonar08 = 17;
  if (has_sonar08()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->sonar08(), output);
  }

  // optional double sonar09 = 18;
  if (has_sonar09()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->sonar09(), output);
  }

  // optional double sonar10 = 19;
  if (has_sonar10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->sonar10(), output);
  }

  // optional double sonar11 = 20;
  if (has_sonar11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->sonar11(), output);
  }

  // optional bool sonar_enabled = 21;
  if (has_sonar_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->sonar_enabled(), output);
  }

  // optional bool sonar_fault = 22;
  if (has_sonar_fault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->sonar_fault(), output);
  }

  // repeated double sonar_range = 23;
  for (int i = 0; i < this->sonar_range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      23, this->sonar_range(i), output);
  }

  // repeated .apollo.canbus.Sonar sonar = 24;
  for (unsigned int i = 0, n = this->sonar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->sonar(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Surround)
}

::google::protobuf::uint8* Surround::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Surround)
  // optional bool cross_traffic_alert_left = 1;
  if (has_cross_traffic_alert_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cross_traffic_alert_left(), target);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (has_cross_traffic_alert_left_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cross_traffic_alert_left_enabled(), target);
  }

  // optional bool blind_spot_left_alert = 3;
  if (has_blind_spot_left_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->blind_spot_left_alert(), target);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (has_blind_spot_left_alert_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blind_spot_left_alert_enabled(), target);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (has_cross_traffic_alert_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cross_traffic_alert_right(), target);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (has_cross_traffic_alert_right_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cross_traffic_alert_right_enabled(), target);
  }

  // optional bool blind_spot_right_alert = 7;
  if (has_blind_spot_right_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->blind_spot_right_alert(), target);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (has_blind_spot_right_alert_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->blind_spot_right_alert_enabled(), target);
  }

  // optional double sonar00 = 9;
  if (has_sonar00()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->sonar00(), target);
  }

  // optional double sonar01 = 10;
  if (has_sonar01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sonar01(), target);
  }

  // optional double sonar02 = 11;
  if (has_sonar02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->sonar02(), target);
  }

  // optional double sonar03 = 12;
  if (has_sonar03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->sonar03(), target);
  }

  // optional double sonar04 = 13;
  if (has_sonar04()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->sonar04(), target);
  }

  // optional double sonar05 = 14;
  if (has_sonar05()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->sonar05(), target);
  }

  // optional double sonar06 = 15;
  if (has_sonar06()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->sonar06(), target);
  }

  // optional double sonar07 = 16;
  if (has_sonar07()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sonar07(), target);
  }

  // optional double sonar08 = 17;
  if (has_sonar08()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->sonar08(), target);
  }

  // optional double sonar09 = 18;
  if (has_sonar09()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->sonar09(), target);
  }

  // optional double sonar10 = 19;
  if (has_sonar10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->sonar10(), target);
  }

  // optional double sonar11 = 20;
  if (has_sonar11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->sonar11(), target);
  }

  // optional bool sonar_enabled = 21;
  if (has_sonar_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->sonar_enabled(), target);
  }

  // optional bool sonar_fault = 22;
  if (has_sonar_fault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->sonar_fault(), target);
  }

  // repeated double sonar_range = 23;
  for (int i = 0; i < this->sonar_range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(23, this->sonar_range(i), target);
  }

  // repeated .apollo.canbus.Sonar sonar = 24;
  for (unsigned int i = 0, n = this->sonar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->sonar(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Surround)
  return target;
}

int Surround::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Surround)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool cross_traffic_alert_left = 1;
    if (has_cross_traffic_alert_left()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_left_enabled = 2;
    if (has_cross_traffic_alert_left_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert = 3;
    if (has_blind_spot_left_alert()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert_enabled = 4;
    if (has_blind_spot_left_alert_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right = 5;
    if (has_cross_traffic_alert_right()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right_enabled = 6;
    if (has_cross_traffic_alert_right_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert = 7;
    if (has_blind_spot_right_alert()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert_enabled = 8;
    if (has_blind_spot_right_alert_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double sonar00 = 9;
    if (has_sonar00()) {
      total_size += 1 + 8;
    }

    // optional double sonar01 = 10;
    if (has_sonar01()) {
      total_size += 1 + 8;
    }

    // optional double sonar02 = 11;
    if (has_sonar02()) {
      total_size += 1 + 8;
    }

    // optional double sonar03 = 12;
    if (has_sonar03()) {
      total_size += 1 + 8;
    }

    // optional double sonar04 = 13;
    if (has_sonar04()) {
      total_size += 1 + 8;
    }

    // optional double sonar05 = 14;
    if (has_sonar05()) {
      total_size += 1 + 8;
    }

    // optional double sonar06 = 15;
    if (has_sonar06()) {
      total_size += 1 + 8;
    }

    // optional double sonar07 = 16;
    if (has_sonar07()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional double sonar08 = 17;
    if (has_sonar08()) {
      total_size += 2 + 8;
    }

    // optional double sonar09 = 18;
    if (has_sonar09()) {
      total_size += 2 + 8;
    }

    // optional double sonar10 = 19;
    if (has_sonar10()) {
      total_size += 2 + 8;
    }

    // optional double sonar11 = 20;
    if (has_sonar11()) {
      total_size += 2 + 8;
    }

    // optional bool sonar_enabled = 21;
    if (has_sonar_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool sonar_fault = 22;
    if (has_sonar_fault()) {
      total_size += 2 + 1;
    }

  }
  // repeated double sonar_range = 23;
  {
    int data_size = 0;
    data_size = 8 * this->sonar_range_size();
    total_size += 2 * this->sonar_range_size() + data_size;
  }

  // repeated .apollo.canbus.Sonar sonar = 24;
  total_size += 2 * this->sonar_size();
  for (int i = 0; i < this->sonar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sonar(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Surround::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Surround)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Surround* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Surround>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Surround)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Surround)
    MergeFrom(*source);
  }
}

void Surround::MergeFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Surround)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sonar_range_.MergeFrom(from.sonar_range_);
  sonar_.MergeFrom(from.sonar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cross_traffic_alert_left()) {
      set_cross_traffic_alert_left(from.cross_traffic_alert_left());
    }
    if (from.has_cross_traffic_alert_left_enabled()) {
      set_cross_traffic_alert_left_enabled(from.cross_traffic_alert_left_enabled());
    }
    if (from.has_blind_spot_left_alert()) {
      set_blind_spot_left_alert(from.blind_spot_left_alert());
    }
    if (from.has_blind_spot_left_alert_enabled()) {
      set_blind_spot_left_alert_enabled(from.blind_spot_left_alert_enabled());
    }
    if (from.has_cross_traffic_alert_right()) {
      set_cross_traffic_alert_right(from.cross_traffic_alert_right());
    }
    if (from.has_cross_traffic_alert_right_enabled()) {
      set_cross_traffic_alert_right_enabled(from.cross_traffic_alert_right_enabled());
    }
    if (from.has_blind_spot_right_alert()) {
      set_blind_spot_right_alert(from.blind_spot_right_alert());
    }
    if (from.has_blind_spot_right_alert_enabled()) {
      set_blind_spot_right_alert_enabled(from.blind_spot_right_alert_enabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sonar00()) {
      set_sonar00(from.sonar00());
    }
    if (from.has_sonar01()) {
      set_sonar01(from.sonar01());
    }
    if (from.has_sonar02()) {
      set_sonar02(from.sonar02());
    }
    if (from.has_sonar03()) {
      set_sonar03(from.sonar03());
    }
    if (from.has_sonar04()) {
      set_sonar04(from.sonar04());
    }
    if (from.has_sonar05()) {
      set_sonar05(from.sonar05());
    }
    if (from.has_sonar06()) {
      set_sonar06(from.sonar06());
    }
    if (from.has_sonar07()) {
      set_sonar07(from.sonar07());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sonar08()) {
      set_sonar08(from.sonar08());
    }
    if (from.has_sonar09()) {
      set_sonar09(from.sonar09());
    }
    if (from.has_sonar10()) {
      set_sonar10(from.sonar10());
    }
    if (from.has_sonar11()) {
      set_sonar11(from.sonar11());
    }
    if (from.has_sonar_enabled()) {
      set_sonar_enabled(from.sonar_enabled());
    }
    if (from.has_sonar_fault()) {
      set_sonar_fault(from.sonar_fault());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Surround::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surround::CopyFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surround::IsInitialized() const {

  return true;
}

void Surround::Swap(Surround* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Surround::InternalSwap(Surround* other) {
  std::swap(cross_traffic_alert_left_, other->cross_traffic_alert_left_);
  std::swap(cross_traffic_alert_left_enabled_, other->cross_traffic_alert_left_enabled_);
  std::swap(blind_spot_left_alert_, other->blind_spot_left_alert_);
  std::swap(blind_spot_left_alert_enabled_, other->blind_spot_left_alert_enabled_);
  std::swap(cross_traffic_alert_right_, other->cross_traffic_alert_right_);
  std::swap(cross_traffic_alert_right_enabled_, other->cross_traffic_alert_right_enabled_);
  std::swap(blind_spot_right_alert_, other->blind_spot_right_alert_);
  std::swap(blind_spot_right_alert_enabled_, other->blind_spot_right_alert_enabled_);
  std::swap(sonar00_, other->sonar00_);
  std::swap(sonar01_, other->sonar01_);
  std::swap(sonar02_, other->sonar02_);
  std::swap(sonar03_, other->sonar03_);
  std::swap(sonar04_, other->sonar04_);
  std::swap(sonar05_, other->sonar05_);
  std::swap(sonar06_, other->sonar06_);
  std::swap(sonar07_, other->sonar07_);
  std::swap(sonar08_, other->sonar08_);
  std::swap(sonar09_, other->sonar09_);
  std::swap(sonar10_, other->sonar10_);
  std::swap(sonar11_, other->sonar11_);
  std::swap(sonar_enabled_, other->sonar_enabled_);
  std::swap(sonar_fault_, other->sonar_fault_);
  sonar_range_.UnsafeArenaSwap(&other->sonar_range_);
  sonar_.UnsafeArenaSwap(&other->sonar_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Surround::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Surround_descriptor_;
  metadata.reflection = Surround_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Surround

// optional bool cross_traffic_alert_left = 1;
bool Surround::has_cross_traffic_alert_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Surround::set_has_cross_traffic_alert_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Surround::clear_has_cross_traffic_alert_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Surround::clear_cross_traffic_alert_left() {
  cross_traffic_alert_left_ = false;
  clear_has_cross_traffic_alert_left();
}
 bool Surround::cross_traffic_alert_left() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.cross_traffic_alert_left)
  return cross_traffic_alert_left_;
}
 void Surround::set_cross_traffic_alert_left(bool value) {
  set_has_cross_traffic_alert_left();
  cross_traffic_alert_left_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.cross_traffic_alert_left)
}

// optional bool cross_traffic_alert_left_enabled = 2;
bool Surround::has_cross_traffic_alert_left_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Surround::set_has_cross_traffic_alert_left_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void Surround::clear_has_cross_traffic_alert_left_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void Surround::clear_cross_traffic_alert_left_enabled() {
  cross_traffic_alert_left_enabled_ = false;
  clear_has_cross_traffic_alert_left_enabled();
}
 bool Surround::cross_traffic_alert_left_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.cross_traffic_alert_left_enabled)
  return cross_traffic_alert_left_enabled_;
}
 void Surround::set_cross_traffic_alert_left_enabled(bool value) {
  set_has_cross_traffic_alert_left_enabled();
  cross_traffic_alert_left_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.cross_traffic_alert_left_enabled)
}

// optional bool blind_spot_left_alert = 3;
bool Surround::has_blind_spot_left_alert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Surround::set_has_blind_spot_left_alert() {
  _has_bits_[0] |= 0x00000004u;
}
void Surround::clear_has_blind_spot_left_alert() {
  _has_bits_[0] &= ~0x00000004u;
}
void Surround::clear_blind_spot_left_alert() {
  blind_spot_left_alert_ = false;
  clear_has_blind_spot_left_alert();
}
 bool Surround::blind_spot_left_alert() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.blind_spot_left_alert)
  return blind_spot_left_alert_;
}
 void Surround::set_blind_spot_left_alert(bool value) {
  set_has_blind_spot_left_alert();
  blind_spot_left_alert_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.blind_spot_left_alert)
}

// optional bool blind_spot_left_alert_enabled = 4;
bool Surround::has_blind_spot_left_alert_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Surround::set_has_blind_spot_left_alert_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
void Surround::clear_has_blind_spot_left_alert_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
void Surround::clear_blind_spot_left_alert_enabled() {
  blind_spot_left_alert_enabled_ = false;
  clear_has_blind_spot_left_alert_enabled();
}
 bool Surround::blind_spot_left_alert_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.blind_spot_left_alert_enabled)
  return blind_spot_left_alert_enabled_;
}
 void Surround::set_blind_spot_left_alert_enabled(bool value) {
  set_has_blind_spot_left_alert_enabled();
  blind_spot_left_alert_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.blind_spot_left_alert_enabled)
}

// optional bool cross_traffic_alert_right = 5;
bool Surround::has_cross_traffic_alert_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Surround::set_has_cross_traffic_alert_right() {
  _has_bits_[0] |= 0x00000010u;
}
void Surround::clear_has_cross_traffic_alert_right() {
  _has_bits_[0] &= ~0x00000010u;
}
void Surround::clear_cross_traffic_alert_right() {
  cross_traffic_alert_right_ = false;
  clear_has_cross_traffic_alert_right();
}
 bool Surround::cross_traffic_alert_right() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.cross_traffic_alert_right)
  return cross_traffic_alert_right_;
}
 void Surround::set_cross_traffic_alert_right(bool value) {
  set_has_cross_traffic_alert_right();
  cross_traffic_alert_right_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.cross_traffic_alert_right)
}

// optional bool cross_traffic_alert_right_enabled = 6;
bool Surround::has_cross_traffic_alert_right_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Surround::set_has_cross_traffic_alert_right_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
void Surround::clear_has_cross_traffic_alert_right_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
void Surround::clear_cross_traffic_alert_right_enabled() {
  cross_traffic_alert_right_enabled_ = false;
  clear_has_cross_traffic_alert_right_enabled();
}
 bool Surround::cross_traffic_alert_right_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.cross_traffic_alert_right_enabled)
  return cross_traffic_alert_right_enabled_;
}
 void Surround::set_cross_traffic_alert_right_enabled(bool value) {
  set_has_cross_traffic_alert_right_enabled();
  cross_traffic_alert_right_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.cross_traffic_alert_right_enabled)
}

// optional bool blind_spot_right_alert = 7;
bool Surround::has_blind_spot_right_alert() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Surround::set_has_blind_spot_right_alert() {
  _has_bits_[0] |= 0x00000040u;
}
void Surround::clear_has_blind_spot_right_alert() {
  _has_bits_[0] &= ~0x00000040u;
}
void Surround::clear_blind_spot_right_alert() {
  blind_spot_right_alert_ = false;
  clear_has_blind_spot_right_alert();
}
 bool Surround::blind_spot_right_alert() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.blind_spot_right_alert)
  return blind_spot_right_alert_;
}
 void Surround::set_blind_spot_right_alert(bool value) {
  set_has_blind_spot_right_alert();
  blind_spot_right_alert_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.blind_spot_right_alert)
}

// optional bool blind_spot_right_alert_enabled = 8;
bool Surround::has_blind_spot_right_alert_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Surround::set_has_blind_spot_right_alert_enabled() {
  _has_bits_[0] |= 0x00000080u;
}
void Surround::clear_has_blind_spot_right_alert_enabled() {
  _has_bits_[0] &= ~0x00000080u;
}
void Surround::clear_blind_spot_right_alert_enabled() {
  blind_spot_right_alert_enabled_ = false;
  clear_has_blind_spot_right_alert_enabled();
}
 bool Surround::blind_spot_right_alert_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.blind_spot_right_alert_enabled)
  return blind_spot_right_alert_enabled_;
}
 void Surround::set_blind_spot_right_alert_enabled(bool value) {
  set_has_blind_spot_right_alert_enabled();
  blind_spot_right_alert_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.blind_spot_right_alert_enabled)
}

// optional double sonar00 = 9;
bool Surround::has_sonar00() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Surround::set_has_sonar00() {
  _has_bits_[0] |= 0x00000100u;
}
void Surround::clear_has_sonar00() {
  _has_bits_[0] &= ~0x00000100u;
}
void Surround::clear_sonar00() {
  sonar00_ = 0;
  clear_has_sonar00();
}
 double Surround::sonar00() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar00)
  return sonar00_;
}
 void Surround::set_sonar00(double value) {
  set_has_sonar00();
  sonar00_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar00)
}

// optional double sonar01 = 10;
bool Surround::has_sonar01() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Surround::set_has_sonar01() {
  _has_bits_[0] |= 0x00000200u;
}
void Surround::clear_has_sonar01() {
  _has_bits_[0] &= ~0x00000200u;
}
void Surround::clear_sonar01() {
  sonar01_ = 0;
  clear_has_sonar01();
}
 double Surround::sonar01() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar01)
  return sonar01_;
}
 void Surround::set_sonar01(double value) {
  set_has_sonar01();
  sonar01_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar01)
}

// optional double sonar02 = 11;
bool Surround::has_sonar02() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Surround::set_has_sonar02() {
  _has_bits_[0] |= 0x00000400u;
}
void Surround::clear_has_sonar02() {
  _has_bits_[0] &= ~0x00000400u;
}
void Surround::clear_sonar02() {
  sonar02_ = 0;
  clear_has_sonar02();
}
 double Surround::sonar02() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar02)
  return sonar02_;
}
 void Surround::set_sonar02(double value) {
  set_has_sonar02();
  sonar02_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar02)
}

// optional double sonar03 = 12;
bool Surround::has_sonar03() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Surround::set_has_sonar03() {
  _has_bits_[0] |= 0x00000800u;
}
void Surround::clear_has_sonar03() {
  _has_bits_[0] &= ~0x00000800u;
}
void Surround::clear_sonar03() {
  sonar03_ = 0;
  clear_has_sonar03();
}
 double Surround::sonar03() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar03)
  return sonar03_;
}
 void Surround::set_sonar03(double value) {
  set_has_sonar03();
  sonar03_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar03)
}

// optional double sonar04 = 13;
bool Surround::has_sonar04() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Surround::set_has_sonar04() {
  _has_bits_[0] |= 0x00001000u;
}
void Surround::clear_has_sonar04() {
  _has_bits_[0] &= ~0x00001000u;
}
void Surround::clear_sonar04() {
  sonar04_ = 0;
  clear_has_sonar04();
}
 double Surround::sonar04() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar04)
  return sonar04_;
}
 void Surround::set_sonar04(double value) {
  set_has_sonar04();
  sonar04_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar04)
}

// optional double sonar05 = 14;
bool Surround::has_sonar05() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Surround::set_has_sonar05() {
  _has_bits_[0] |= 0x00002000u;
}
void Surround::clear_has_sonar05() {
  _has_bits_[0] &= ~0x00002000u;
}
void Surround::clear_sonar05() {
  sonar05_ = 0;
  clear_has_sonar05();
}
 double Surround::sonar05() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar05)
  return sonar05_;
}
 void Surround::set_sonar05(double value) {
  set_has_sonar05();
  sonar05_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar05)
}

// optional double sonar06 = 15;
bool Surround::has_sonar06() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Surround::set_has_sonar06() {
  _has_bits_[0] |= 0x00004000u;
}
void Surround::clear_has_sonar06() {
  _has_bits_[0] &= ~0x00004000u;
}
void Surround::clear_sonar06() {
  sonar06_ = 0;
  clear_has_sonar06();
}
 double Surround::sonar06() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar06)
  return sonar06_;
}
 void Surround::set_sonar06(double value) {
  set_has_sonar06();
  sonar06_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar06)
}

// optional double sonar07 = 16;
bool Surround::has_sonar07() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Surround::set_has_sonar07() {
  _has_bits_[0] |= 0x00008000u;
}
void Surround::clear_has_sonar07() {
  _has_bits_[0] &= ~0x00008000u;
}
void Surround::clear_sonar07() {
  sonar07_ = 0;
  clear_has_sonar07();
}
 double Surround::sonar07() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar07)
  return sonar07_;
}
 void Surround::set_sonar07(double value) {
  set_has_sonar07();
  sonar07_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar07)
}

// optional double sonar08 = 17;
bool Surround::has_sonar08() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Surround::set_has_sonar08() {
  _has_bits_[0] |= 0x00010000u;
}
void Surround::clear_has_sonar08() {
  _has_bits_[0] &= ~0x00010000u;
}
void Surround::clear_sonar08() {
  sonar08_ = 0;
  clear_has_sonar08();
}
 double Surround::sonar08() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar08)
  return sonar08_;
}
 void Surround::set_sonar08(double value) {
  set_has_sonar08();
  sonar08_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar08)
}

// optional double sonar09 = 18;
bool Surround::has_sonar09() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Surround::set_has_sonar09() {
  _has_bits_[0] |= 0x00020000u;
}
void Surround::clear_has_sonar09() {
  _has_bits_[0] &= ~0x00020000u;
}
void Surround::clear_sonar09() {
  sonar09_ = 0;
  clear_has_sonar09();
}
 double Surround::sonar09() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar09)
  return sonar09_;
}
 void Surround::set_sonar09(double value) {
  set_has_sonar09();
  sonar09_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar09)
}

// optional double sonar10 = 19;
bool Surround::has_sonar10() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Surround::set_has_sonar10() {
  _has_bits_[0] |= 0x00040000u;
}
void Surround::clear_has_sonar10() {
  _has_bits_[0] &= ~0x00040000u;
}
void Surround::clear_sonar10() {
  sonar10_ = 0;
  clear_has_sonar10();
}
 double Surround::sonar10() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar10)
  return sonar10_;
}
 void Surround::set_sonar10(double value) {
  set_has_sonar10();
  sonar10_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar10)
}

// optional double sonar11 = 20;
bool Surround::has_sonar11() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Surround::set_has_sonar11() {
  _has_bits_[0] |= 0x00080000u;
}
void Surround::clear_has_sonar11() {
  _has_bits_[0] &= ~0x00080000u;
}
void Surround::clear_sonar11() {
  sonar11_ = 0;
  clear_has_sonar11();
}
 double Surround::sonar11() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar11)
  return sonar11_;
}
 void Surround::set_sonar11(double value) {
  set_has_sonar11();
  sonar11_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar11)
}

// optional bool sonar_enabled = 21;
bool Surround::has_sonar_enabled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Surround::set_has_sonar_enabled() {
  _has_bits_[0] |= 0x00100000u;
}
void Surround::clear_has_sonar_enabled() {
  _has_bits_[0] &= ~0x00100000u;
}
void Surround::clear_sonar_enabled() {
  sonar_enabled_ = false;
  clear_has_sonar_enabled();
}
 bool Surround::sonar_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar_enabled)
  return sonar_enabled_;
}
 void Surround::set_sonar_enabled(bool value) {
  set_has_sonar_enabled();
  sonar_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar_enabled)
}

// optional bool sonar_fault = 22;
bool Surround::has_sonar_fault() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Surround::set_has_sonar_fault() {
  _has_bits_[0] |= 0x00200000u;
}
void Surround::clear_has_sonar_fault() {
  _has_bits_[0] &= ~0x00200000u;
}
void Surround::clear_sonar_fault() {
  sonar_fault_ = false;
  clear_has_sonar_fault();
}
 bool Surround::sonar_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar_fault)
  return sonar_fault_;
}
 void Surround::set_sonar_fault(bool value) {
  set_has_sonar_fault();
  sonar_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar_fault)
}

// repeated double sonar_range = 23;
int Surround::sonar_range_size() const {
  return sonar_range_.size();
}
void Surround::clear_sonar_range() {
  sonar_range_.Clear();
}
 double Surround::sonar_range(int index) const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar_range)
  return sonar_range_.Get(index);
}
 void Surround::set_sonar_range(int index, double value) {
  sonar_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Surround.sonar_range)
}
 void Surround::add_sonar_range(double value) {
  sonar_range_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.canbus.Surround.sonar_range)
}
 const ::google::protobuf::RepeatedField< double >&
Surround::sonar_range() const {
  // @@protoc_insertion_point(field_list:apollo.canbus.Surround.sonar_range)
  return sonar_range_;
}
 ::google::protobuf::RepeatedField< double >*
Surround::mutable_sonar_range() {
  // @@protoc_insertion_point(field_mutable_list:apollo.canbus.Surround.sonar_range)
  return &sonar_range_;
}

// repeated .apollo.canbus.Sonar sonar = 24;
int Surround::sonar_size() const {
  return sonar_.size();
}
void Surround::clear_sonar() {
  sonar_.Clear();
}
const ::apollo::canbus::Sonar& Surround::sonar(int index) const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Surround.sonar)
  return sonar_.Get(index);
}
::apollo::canbus::Sonar* Surround::mutable_sonar(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Surround.sonar)
  return sonar_.Mutable(index);
}
::apollo::canbus::Sonar* Surround::add_sonar() {
  // @@protoc_insertion_point(field_add:apollo.canbus.Surround.sonar)
  return sonar_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::canbus::Sonar >*
Surround::mutable_sonar() {
  // @@protoc_insertion_point(field_mutable_list:apollo.canbus.Surround.sonar)
  return &sonar_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::canbus::Sonar >&
Surround::sonar() const {
  // @@protoc_insertion_point(field_list:apollo.canbus.Surround.sonar)
  return sonar_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int License::kVinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

License::License()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.License)
}

void License::InitAsDefaultInstance() {
}

License::License(const License& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.License)
}

void License::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

License::~License() {
  // @@protoc_insertion_point(destructor:apollo.canbus.License)
  SharedDtor();
}

void License::SharedDtor() {
  vin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* License::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return License_descriptor_;
}

const License& License::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_canbus_2fchassis_2eproto();
  return *default_instance_;
}

License* License::default_instance_ = NULL;

License* License::New(::google::protobuf::Arena* arena) const {
  License* n = new License;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void License::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.License)
  if (has_vin()) {
    vin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.License)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), this->vin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.canbus.License.vin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.License)
  return false;
#undef DO_
}

void License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.License)
  // optional string vin = 1;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.License)
}

::google::protobuf::uint8* License::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.License)
  // optional string vin = 1;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.License)
  return target;
}

int License::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.License)
  int total_size = 0;

  // optional string vin = 1;
  if (has_vin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vin());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void License::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.License)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const License* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const License>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.License)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.License)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vin()) {
      set_has_vin();
      vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void License::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {

  return true;
}

void License::Swap(License* other) {
  if (other == this) return;
  InternalSwap(other);
}
void License::InternalSwap(License* other) {
  vin_.Swap(&other->vin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata License::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = License_descriptor_;
  metadata.reflection = License_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// License

// optional string vin = 1;
bool License::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void License::set_has_vin() {
  _has_bits_[0] |= 0x00000001u;
}
void License::clear_has_vin() {
  _has_bits_[0] &= ~0x00000001u;
}
void License::clear_vin() {
  vin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vin();
}
 const ::std::string& License::vin() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.License.vin)
  return vin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void License::set_vin(const ::std::string& value) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.canbus.License.vin)
}
 void License::set_vin(const char* value) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.canbus.License.vin)
}
 void License::set_vin(const char* value, size_t size) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.canbus.License.vin)
}
 ::std::string* License::mutable_vin() {
  set_has_vin();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.License.vin)
  return vin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* License::release_vin() {
  // @@protoc_insertion_point(field_release:apollo.canbus.License.vin)
  clear_has_vin();
  return vin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void License::set_allocated_vin(::std::string* vin) {
  if (vin != NULL) {
    set_has_vin();
  } else {
    clear_has_vin();
  }
  vin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.License.vin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
