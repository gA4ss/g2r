// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/gnss_raw_observation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/gnss/gnss_raw_observation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss {

namespace {

const ::google::protobuf::Descriptor* BandObservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BandObservation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SatelliteObservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SatelliteObservation_reflection_ = NULL;
const ::google::protobuf::Descriptor* EpochObservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EpochObservation_reflection_ = NULL;
const ::google::protobuf::Descriptor* KepplerOrbit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KepplerOrbit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlonassOrbit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlonassOrbit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GnssEphemeris_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GnssEphemeris_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GnssBandID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GnssTimeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GnssType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PseudoType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto() {
  protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/gnss/gnss_raw_observation.proto");
  GOOGLE_CHECK(file != NULL);
  BandObservation_descriptor_ = file->message_type(0);
  static const int BandObservation_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, band_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, frequency_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, pseudo_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, pseudo_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, carrier_phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, loss_lock_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, doppler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, snr_),
  };
  BandObservation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BandObservation_descriptor_,
      BandObservation::default_instance_,
      BandObservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, _has_bits_[0]),
      -1,
      -1,
      sizeof(BandObservation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, _internal_metadata_),
      -1);
  SatelliteObservation_descriptor_ = file->message_type(1);
  static const int SatelliteObservation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, sat_prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, sat_sys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, band_obs_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, band_obs_),
  };
  SatelliteObservation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SatelliteObservation_descriptor_,
      SatelliteObservation::default_instance_,
      SatelliteObservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, _has_bits_[0]),
      -1,
      -1,
      sizeof(SatelliteObservation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, _internal_metadata_),
      -1);
  EpochObservation_descriptor_ = file->message_type(2);
  static const int EpochObservation_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_second_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, health_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, sat_obs_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, sat_obs_),
  };
  EpochObservation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EpochObservation_descriptor_,
      EpochObservation::default_instance_,
      EpochObservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, _has_bits_[0]),
      -1,
      -1,
      sizeof(EpochObservation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, _internal_metadata_),
      -1);
  KepplerOrbit_descriptor_ = file->message_type(3);
  static const int KepplerOrbit_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, gnss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, sat_prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, gnss_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, second_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, week_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, iode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, deltan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, m0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, roota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, toe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, toc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, crs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cuc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omega0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, i0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omegadot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, idot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, codesonl2channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, l2pdataflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, tgd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, iodc_),
  };
  KepplerOrbit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KepplerOrbit_descriptor_,
      KepplerOrbit::default_instance_,
      KepplerOrbit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, _has_bits_[0]),
      -1,
      -1,
      sizeof(KepplerOrbit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, _internal_metadata_),
      -1);
  GlonassOrbit_descriptor_ = file->message_type(4);
  static const int GlonassOrbit_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, gnss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, slot_prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, gnss_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, toe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, second_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, frequency_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, week_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, week_second_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, tk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, clock_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, clock_drift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, accelerate_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, accelerate_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, accelerate_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, infor_age_),
  };
  GlonassOrbit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GlonassOrbit_descriptor_,
      GlonassOrbit::default_instance_,
      GlonassOrbit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, _has_bits_[0]),
      -1,
      -1,
      sizeof(GlonassOrbit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, _internal_metadata_),
      -1);
  GnssEphemeris_descriptor_ = file->message_type(5);
  static const int GnssEphemeris_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, gnss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, keppler_orbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, glonass_orbit_),
  };
  GnssEphemeris_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GnssEphemeris_descriptor_,
      GnssEphemeris::default_instance_,
      GnssEphemeris_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, _has_bits_[0]),
      -1,
      -1,
      sizeof(GnssEphemeris),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, _internal_metadata_),
      -1);
  GnssBandID_descriptor_ = file->enum_type(0);
  GnssTimeType_descriptor_ = file->enum_type(1);
  GnssType_descriptor_ = file->enum_type(2);
  PseudoType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BandObservation_descriptor_, &BandObservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SatelliteObservation_descriptor_, &SatelliteObservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EpochObservation_descriptor_, &EpochObservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KepplerOrbit_descriptor_, &KepplerOrbit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GlonassOrbit_descriptor_, &GlonassOrbit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GnssEphemeris_descriptor_, &GnssEphemeris::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto() {
  delete BandObservation::default_instance_;
  delete BandObservation_reflection_;
  delete SatelliteObservation::default_instance_;
  delete SatelliteObservation_reflection_;
  delete EpochObservation::default_instance_;
  delete EpochObservation_reflection_;
  delete KepplerOrbit::default_instance_;
  delete KepplerOrbit_reflection_;
  delete GlonassOrbit::default_instance_;
  delete GlonassOrbit_reflection_;
  delete GnssEphemeris::default_instance_;
  delete GnssEphemeris_reflection_;
}

void protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'drivers/gnss/gnss_raw_observation.prot"
    "o\022\023apollo.drivers.gnss\"\222\002\n\017BandObservati"
    "on\022>\n\007band_id\030\001 \001(\0162\037.apollo.drivers.gns"
    "s.GnssBandID:\014BAND_UNKNOWN\022\027\n\017frequency_"
    "value\030\002 \001(\001\022B\n\013pseudo_type\030\003 \001(\0162\037.apoll"
    "o.drivers.gnss.PseudoType:\014CODE_UNKNOWN\022"
    "\024\n\014pseudo_range\030\004 \001(\001\022\025\n\rcarrier_phase\030\005"
    " \001(\001\022\027\n\017loss_lock_index\030\006 \001(\r\022\017\n\007doppler"
    "\030\007 \001(\001\022\013\n\003snr\030\010 \001(\002\"\256\001\n\024SatelliteObserva"
    "tion\022\017\n\007sat_prn\030\001 \001(\r\0227\n\007sat_sys\030\002 \001(\0162\035"
    ".apollo.drivers.gnss.GnssType:\007GPS_SYS\022\024"
    "\n\014band_obs_num\030\003 \001(\r\0226\n\010band_obs\030\004 \003(\0132$"
    ".apollo.drivers.gnss.BandObservation\"\273\002\n"
    "\020EpochObservation\022\023\n\013receiver_id\030\001 \001(\r\022C"
    "\n\016gnss_time_type\030\002 \001(\0162!.apollo.drivers."
    "gnss.GnssTimeType:\010GPS_TIME\022\021\n\tgnss_week"
    "\030\003 \001(\r\022\025\n\rgnss_second_s\030\004 \001(\001\022\022\n\npositio"
    "n_x\030\005 \001(\001\022\022\n\nposition_y\030\006 \001(\001\022\022\n\npositio"
    "n_z\030\007 \001(\001\022\026\n\013health_flag\030\010 \001(\r:\0010\022\023\n\013sat"
    "_obs_num\030\t \001(\r\022:\n\007sat_obs\030\n \003(\0132).apollo"
    ".drivers.gnss.SatelliteObservation\"\247\005\n\014K"
    "epplerOrbit\0229\n\tgnss_type\030\001 \001(\0162\035.apollo."
    "drivers.gnss.GnssType:\007GPS_SYS\022\017\n\007sat_pr"
    "n\030\002 \001(\r\022C\n\016gnss_time_type\030\003 \001(\0162!.apollo"
    ".drivers.gnss.GnssTimeType:\010GPS_TIME\022\014\n\004"
    "year\030\004 \001(\r\022\r\n\005month\030\005 \001(\r\022\013\n\003day\030\006 \001(\r\022\014"
    "\n\004hour\030\007 \001(\r\022\016\n\006minute\030\010 \001(\r\022\020\n\010second_s"
    "\030\t \001(\001\022\020\n\010week_num\030\n \001(\r\022\020\n\010reserved\030\013 \001"
    "(\001\022\013\n\003af0\030\014 \001(\001\022\013\n\003af1\030\r \001(\001\022\013\n\003af2\030\016 \001("
    "\001\022\014\n\004iode\030\017 \001(\001\022\016\n\006deltan\030\020 \001(\001\022\n\n\002m0\030\021 "
    "\001(\001\022\t\n\001e\030\022 \001(\001\022\r\n\005roota\030\023 \001(\001\022\013\n\003toe\030\024 \001"
    "(\001\022\013\n\003toc\030\025 \001(\001\022\013\n\003cic\030\026 \001(\001\022\013\n\003crc\030\027 \001("
    "\001\022\013\n\003cis\030\030 \001(\001\022\013\n\003crs\030\031 \001(\001\022\013\n\003cuc\030\032 \001(\001"
    "\022\013\n\003cus\030\033 \001(\001\022\016\n\006omega0\030\034 \001(\001\022\r\n\005omega\030\035"
    " \001(\001\022\n\n\002i0\030\036 \001(\001\022\020\n\010omegadot\030\037 \001(\001\022\014\n\004id"
    "ot\030  \001(\001\022\030\n\020codesonL2channel\030! \001(\001\022\023\n\013L2"
    "Pdataflag\030\" \001(\r\022\020\n\010accuracy\030# \001(\r\022\016\n\006hea"
    "lth\030$ \001(\r\022\013\n\003tgd\030% \001(\001\022\014\n\004iodc\030& \001(\001\"\332\004\n"
    "\014GlonassOrbit\0229\n\tgnss_type\030\001 \001(\0162\035.apoll"
    "o.drivers.gnss.GnssType:\007GLO_SYS\022\020\n\010slot"
    "_prn\030\002 \001(\r\022C\n\016gnss_time_type\030\003 \001(\0162!.apo"
    "llo.drivers.gnss.GnssTimeType:\010GLO_TIME\022"
    "\013\n\003toe\030\004 \001(\001\022\014\n\004year\030\005 \001(\r\022\r\n\005month\030\006 \001("
    "\r\022\013\n\003day\030\007 \001(\r\022\014\n\004hour\030\010 \001(\r\022\016\n\006minute\030\t"
    " \001(\r\022\020\n\010second_s\030\n \001(\001\022\024\n\014frequency_no\030\013"
    " \001(\005\022\020\n\010week_num\030\014 \001(\r\022\025\n\rweek_second_s\030"
    "\r \001(\001\022\n\n\002tk\030\016 \001(\001\022\024\n\014clock_offset\030\017 \001(\001\022"
    "\023\n\013clock_drift\030\020 \001(\001\022\016\n\006health\030\021 \001(\r\022\022\n\n"
    "position_x\030\022 \001(\001\022\022\n\nposition_y\030\023 \001(\001\022\022\n\n"
    "position_z\030\024 \001(\001\022\022\n\nvelocity_x\030\025 \001(\001\022\022\n\n"
    "velocity_y\030\026 \001(\001\022\022\n\nvelocity_z\030\027 \001(\001\022\024\n\014"
    "accelerate_x\030\030 \001(\001\022\024\n\014accelerate_y\030\031 \001(\001"
    "\022\024\n\014accelerate_z\030\032 \001(\001\022\021\n\tinfor_age\030\033 \001("
    "\001\"\276\001\n\rGnssEphemeris\0229\n\tgnss_type\030\001 \001(\0162\035"
    ".apollo.drivers.gnss.GnssType:\007GLO_SYS\0228"
    "\n\rkeppler_orbit\030\002 \001(\0132!.apollo.drivers.g"
    "nss.KepplerOrbit\0228\n\rglonass_orbit\030\003 \001(\0132"
    "!.apollo.drivers.gnss.GlonassOrbit*\212\001\n\nG"
    "nssBandID\022\020\n\014BAND_UNKNOWN\020\000\022\n\n\006GPS_L1\020\001\022"
    "\n\n\006GPS_L2\020\002\022\n\n\006GPS_L5\020\003\022\n\n\006BDS_B1\020\004\022\n\n\006B"
    "DS_B2\020\005\022\n\n\006BDS_B3\020\006\022\n\n\006GLO_G1\020\007\022\n\n\006GLO_G"
    "2\020\010\022\n\n\006GLO_G3\020\t*X\n\014GnssTimeType\022\020\n\014TIME_"
    "UNKNOWN\020\000\022\014\n\010GPS_TIME\020\001\022\014\n\010BDS_TIME\020\002\022\014\n"
    "\010GLO_TIME\020\003\022\014\n\010GAL_TIME\020\004*O\n\010GnssType\022\017\n"
    "\013SYS_UNKNOWN\020\000\022\013\n\007GPS_SYS\020\001\022\013\n\007BDS_SYS\020\002"
    "\022\013\n\007GLO_SYS\020\003\022\013\n\007GAL_SYS\020\004*B\n\nPseudoType"
    "\022\020\n\014CODE_UNKNOWN\020\000\022\016\n\nCORSE_CODE\020\001\022\022\n\016PR"
    "ECISION_CODE\020\002", 2694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/gnss/gnss_raw_observation.proto", &protobuf_RegisterTypes);
  BandObservation::default_instance_ = new BandObservation();
  SatelliteObservation::default_instance_ = new SatelliteObservation();
  EpochObservation::default_instance_ = new EpochObservation();
  KepplerOrbit::default_instance_ = new KepplerOrbit();
  GlonassOrbit::default_instance_ = new GlonassOrbit();
  GnssEphemeris::default_instance_ = new GnssEphemeris();
  BandObservation::default_instance_->InitAsDefaultInstance();
  SatelliteObservation::default_instance_->InitAsDefaultInstance();
  EpochObservation::default_instance_->InitAsDefaultInstance();
  KepplerOrbit::default_instance_->InitAsDefaultInstance();
  GlonassOrbit::default_instance_->InitAsDefaultInstance();
  GnssEphemeris::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto {
  StaticDescriptorInitializer_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto() {
    protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  }
} static_descriptor_initializer_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto_;
const ::google::protobuf::EnumDescriptor* GnssBandID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssBandID_descriptor_;
}
bool GnssBandID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssTimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssTimeType_descriptor_;
}
bool GnssTimeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssType_descriptor_;
}
bool GnssType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PseudoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PseudoType_descriptor_;
}
bool PseudoType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BandObservation::kBandIdFieldNumber;
const int BandObservation::kFrequencyValueFieldNumber;
const int BandObservation::kPseudoTypeFieldNumber;
const int BandObservation::kPseudoRangeFieldNumber;
const int BandObservation::kCarrierPhaseFieldNumber;
const int BandObservation::kLossLockIndexFieldNumber;
const int BandObservation::kDopplerFieldNumber;
const int BandObservation::kSnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BandObservation::BandObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.BandObservation)
}

void BandObservation::InitAsDefaultInstance() {
}

BandObservation::BandObservation(const BandObservation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.BandObservation)
}

void BandObservation::SharedCtor() {
  _cached_size_ = 0;
  band_id_ = 0;
  frequency_value_ = 0;
  pseudo_type_ = 0;
  pseudo_range_ = 0;
  carrier_phase_ = 0;
  loss_lock_index_ = 0u;
  doppler_ = 0;
  snr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BandObservation::~BandObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.BandObservation)
  SharedDtor();
}

void BandObservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BandObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BandObservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BandObservation_descriptor_;
}

const BandObservation& BandObservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  return *default_instance_;
}

BandObservation* BandObservation::default_instance_ = NULL;

BandObservation* BandObservation::New(::google::protobuf::Arena* arena) const {
  BandObservation* n = new BandObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BandObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.BandObservation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BandObservation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BandObservation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(frequency_value_, snr_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BandObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.BandObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssBandID_IsValid(value)) {
            set_band_id(static_cast< ::apollo::drivers::gnss::GnssBandID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_frequency_value;
        break;
      }

      // optional double frequency_value = 2;
      case 2: {
        if (tag == 17) {
         parse_frequency_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_value_)));
          set_has_frequency_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pseudo_type;
        break;
      }

      // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
      case 3: {
        if (tag == 24) {
         parse_pseudo_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::PseudoType_IsValid(value)) {
            set_pseudo_type(static_cast< ::apollo::drivers::gnss::PseudoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pseudo_range;
        break;
      }

      // optional double pseudo_range = 4;
      case 4: {
        if (tag == 33) {
         parse_pseudo_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudo_range_)));
          set_has_pseudo_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_carrier_phase;
        break;
      }

      // optional double carrier_phase = 5;
      case 5: {
        if (tag == 41) {
         parse_carrier_phase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrier_phase_)));
          set_has_carrier_phase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_loss_lock_index;
        break;
      }

      // optional uint32 loss_lock_index = 6;
      case 6: {
        if (tag == 48) {
         parse_loss_lock_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_lock_index_)));
          set_has_loss_lock_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_doppler;
        break;
      }

      // optional double doppler = 7;
      case 7: {
        if (tag == 57) {
         parse_doppler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doppler_)));
          set_has_doppler();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_snr;
        break;
      }

      // optional float snr = 8;
      case 8: {
        if (tag == 69) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
          set_has_snr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.BandObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.BandObservation)
  return false;
#undef DO_
}

void BandObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.BandObservation)
  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (has_band_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->band_id(), output);
  }

  // optional double frequency_value = 2;
  if (has_frequency_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frequency_value(), output);
  }

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (has_pseudo_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pseudo_type(), output);
  }

  // optional double pseudo_range = 4;
  if (has_pseudo_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pseudo_range(), output);
  }

  // optional double carrier_phase = 5;
  if (has_carrier_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->carrier_phase(), output);
  }

  // optional uint32 loss_lock_index = 6;
  if (has_loss_lock_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->loss_lock_index(), output);
  }

  // optional double doppler = 7;
  if (has_doppler()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->doppler(), output);
  }

  // optional float snr = 8;
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->snr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.BandObservation)
}

::google::protobuf::uint8* BandObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.BandObservation)
  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (has_band_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->band_id(), target);
  }

  // optional double frequency_value = 2;
  if (has_frequency_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frequency_value(), target);
  }

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (has_pseudo_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pseudo_type(), target);
  }

  // optional double pseudo_range = 4;
  if (has_pseudo_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pseudo_range(), target);
  }

  // optional double carrier_phase = 5;
  if (has_carrier_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->carrier_phase(), target);
  }

  // optional uint32 loss_lock_index = 6;
  if (has_loss_lock_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->loss_lock_index(), target);
  }

  // optional double doppler = 7;
  if (has_doppler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->doppler(), target);
  }

  // optional float snr = 8;
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->snr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.BandObservation)
  return target;
}

int BandObservation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.BandObservation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
    if (has_band_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->band_id());
    }

    // optional double frequency_value = 2;
    if (has_frequency_value()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
    if (has_pseudo_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pseudo_type());
    }

    // optional double pseudo_range = 4;
    if (has_pseudo_range()) {
      total_size += 1 + 8;
    }

    // optional double carrier_phase = 5;
    if (has_carrier_phase()) {
      total_size += 1 + 8;
    }

    // optional uint32 loss_lock_index = 6;
    if (has_loss_lock_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss_lock_index());
    }

    // optional double doppler = 7;
    if (has_doppler()) {
      total_size += 1 + 8;
    }

    // optional float snr = 8;
    if (has_snr()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BandObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.BandObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BandObservation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BandObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.BandObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.BandObservation)
    MergeFrom(*source);
  }
}

void BandObservation::MergeFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.BandObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_band_id()) {
      set_band_id(from.band_id());
    }
    if (from.has_frequency_value()) {
      set_frequency_value(from.frequency_value());
    }
    if (from.has_pseudo_type()) {
      set_pseudo_type(from.pseudo_type());
    }
    if (from.has_pseudo_range()) {
      set_pseudo_range(from.pseudo_range());
    }
    if (from.has_carrier_phase()) {
      set_carrier_phase(from.carrier_phase());
    }
    if (from.has_loss_lock_index()) {
      set_loss_lock_index(from.loss_lock_index());
    }
    if (from.has_doppler()) {
      set_doppler(from.doppler());
    }
    if (from.has_snr()) {
      set_snr(from.snr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BandObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BandObservation::CopyFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BandObservation::IsInitialized() const {

  return true;
}

void BandObservation::Swap(BandObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BandObservation::InternalSwap(BandObservation* other) {
  std::swap(band_id_, other->band_id_);
  std::swap(frequency_value_, other->frequency_value_);
  std::swap(pseudo_type_, other->pseudo_type_);
  std::swap(pseudo_range_, other->pseudo_range_);
  std::swap(carrier_phase_, other->carrier_phase_);
  std::swap(loss_lock_index_, other->loss_lock_index_);
  std::swap(doppler_, other->doppler_);
  std::swap(snr_, other->snr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BandObservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BandObservation_descriptor_;
  metadata.reflection = BandObservation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BandObservation

// optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
bool BandObservation::has_band_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BandObservation::set_has_band_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BandObservation::clear_has_band_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BandObservation::clear_band_id() {
  band_id_ = 0;
  clear_has_band_id();
}
 ::apollo::drivers::gnss::GnssBandID BandObservation::band_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.band_id)
  return static_cast< ::apollo::drivers::gnss::GnssBandID >(band_id_);
}
 void BandObservation::set_band_id(::apollo::drivers::gnss::GnssBandID value) {
  assert(::apollo::drivers::gnss::GnssBandID_IsValid(value));
  set_has_band_id();
  band_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.band_id)
}

// optional double frequency_value = 2;
bool BandObservation::has_frequency_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BandObservation::set_has_frequency_value() {
  _has_bits_[0] |= 0x00000002u;
}
void BandObservation::clear_has_frequency_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void BandObservation::clear_frequency_value() {
  frequency_value_ = 0;
  clear_has_frequency_value();
}
 double BandObservation::frequency_value() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.frequency_value)
  return frequency_value_;
}
 void BandObservation::set_frequency_value(double value) {
  set_has_frequency_value();
  frequency_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.frequency_value)
}

// optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
bool BandObservation::has_pseudo_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BandObservation::set_has_pseudo_type() {
  _has_bits_[0] |= 0x00000004u;
}
void BandObservation::clear_has_pseudo_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void BandObservation::clear_pseudo_type() {
  pseudo_type_ = 0;
  clear_has_pseudo_type();
}
 ::apollo::drivers::gnss::PseudoType BandObservation::pseudo_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.pseudo_type)
  return static_cast< ::apollo::drivers::gnss::PseudoType >(pseudo_type_);
}
 void BandObservation::set_pseudo_type(::apollo::drivers::gnss::PseudoType value) {
  assert(::apollo::drivers::gnss::PseudoType_IsValid(value));
  set_has_pseudo_type();
  pseudo_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.pseudo_type)
}

// optional double pseudo_range = 4;
bool BandObservation::has_pseudo_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BandObservation::set_has_pseudo_range() {
  _has_bits_[0] |= 0x00000008u;
}
void BandObservation::clear_has_pseudo_range() {
  _has_bits_[0] &= ~0x00000008u;
}
void BandObservation::clear_pseudo_range() {
  pseudo_range_ = 0;
  clear_has_pseudo_range();
}
 double BandObservation::pseudo_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.pseudo_range)
  return pseudo_range_;
}
 void BandObservation::set_pseudo_range(double value) {
  set_has_pseudo_range();
  pseudo_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.pseudo_range)
}

// optional double carrier_phase = 5;
bool BandObservation::has_carrier_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BandObservation::set_has_carrier_phase() {
  _has_bits_[0] |= 0x00000010u;
}
void BandObservation::clear_has_carrier_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
void BandObservation::clear_carrier_phase() {
  carrier_phase_ = 0;
  clear_has_carrier_phase();
}
 double BandObservation::carrier_phase() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.carrier_phase)
  return carrier_phase_;
}
 void BandObservation::set_carrier_phase(double value) {
  set_has_carrier_phase();
  carrier_phase_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.carrier_phase)
}

// optional uint32 loss_lock_index = 6;
bool BandObservation::has_loss_lock_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BandObservation::set_has_loss_lock_index() {
  _has_bits_[0] |= 0x00000020u;
}
void BandObservation::clear_has_loss_lock_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void BandObservation::clear_loss_lock_index() {
  loss_lock_index_ = 0u;
  clear_has_loss_lock_index();
}
 ::google::protobuf::uint32 BandObservation::loss_lock_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.loss_lock_index)
  return loss_lock_index_;
}
 void BandObservation::set_loss_lock_index(::google::protobuf::uint32 value) {
  set_has_loss_lock_index();
  loss_lock_index_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.loss_lock_index)
}

// optional double doppler = 7;
bool BandObservation::has_doppler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BandObservation::set_has_doppler() {
  _has_bits_[0] |= 0x00000040u;
}
void BandObservation::clear_has_doppler() {
  _has_bits_[0] &= ~0x00000040u;
}
void BandObservation::clear_doppler() {
  doppler_ = 0;
  clear_has_doppler();
}
 double BandObservation::doppler() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.doppler)
  return doppler_;
}
 void BandObservation::set_doppler(double value) {
  set_has_doppler();
  doppler_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.doppler)
}

// optional float snr = 8;
bool BandObservation::has_snr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BandObservation::set_has_snr() {
  _has_bits_[0] |= 0x00000080u;
}
void BandObservation::clear_has_snr() {
  _has_bits_[0] &= ~0x00000080u;
}
void BandObservation::clear_snr() {
  snr_ = 0;
  clear_has_snr();
}
 float BandObservation::snr() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.snr)
  return snr_;
}
 void BandObservation::set_snr(float value) {
  set_has_snr();
  snr_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.snr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SatelliteObservation::kSatPrnFieldNumber;
const int SatelliteObservation::kSatSysFieldNumber;
const int SatelliteObservation::kBandObsNumFieldNumber;
const int SatelliteObservation::kBandObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SatelliteObservation::SatelliteObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.SatelliteObservation)
}

void SatelliteObservation::InitAsDefaultInstance() {
}

SatelliteObservation::SatelliteObservation(const SatelliteObservation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.SatelliteObservation)
}

void SatelliteObservation::SharedCtor() {
  _cached_size_ = 0;
  sat_prn_ = 0u;
  sat_sys_ = 1;
  band_obs_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SatelliteObservation::~SatelliteObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.SatelliteObservation)
  SharedDtor();
}

void SatelliteObservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SatelliteObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatelliteObservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatelliteObservation_descriptor_;
}

const SatelliteObservation& SatelliteObservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  return *default_instance_;
}

SatelliteObservation* SatelliteObservation::default_instance_ = NULL;

SatelliteObservation* SatelliteObservation::New(::google::protobuf::Arena* arena) const {
  SatelliteObservation* n = new SatelliteObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SatelliteObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.SatelliteObservation)
  if (_has_bits_[0 / 32] & 7u) {
    sat_prn_ = 0u;
    sat_sys_ = 1;
    band_obs_num_ = 0u;
  }
  band_obs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SatelliteObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.SatelliteObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sat_prn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
          set_has_sat_prn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sat_sys;
        break;
      }

      // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
      case 2: {
        if (tag == 16) {
         parse_sat_sys:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_sat_sys(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_band_obs_num;
        break;
      }

      // optional uint32 band_obs_num = 3;
      case 3: {
        if (tag == 24) {
         parse_band_obs_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &band_obs_num_)));
          set_has_band_obs_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_band_obs;
        break;
      }

      // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
      case 4: {
        if (tag == 34) {
         parse_band_obs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_band_obs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_band_obs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_band_obs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.SatelliteObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.SatelliteObservation)
  return false;
#undef DO_
}

void SatelliteObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.SatelliteObservation)
  // optional uint32 sat_prn = 1;
  if (has_sat_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sat_prn(), output);
  }

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (has_sat_sys()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sat_sys(), output);
  }

  // optional uint32 band_obs_num = 3;
  if (has_band_obs_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->band_obs_num(), output);
  }

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0, n = this->band_obs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->band_obs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.SatelliteObservation)
}

::google::protobuf::uint8* SatelliteObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.SatelliteObservation)
  // optional uint32 sat_prn = 1;
  if (has_sat_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sat_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (has_sat_sys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sat_sys(), target);
  }

  // optional uint32 band_obs_num = 3;
  if (has_band_obs_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->band_obs_num(), target);
  }

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0, n = this->band_obs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->band_obs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.SatelliteObservation)
  return target;
}

int SatelliteObservation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.SatelliteObservation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 sat_prn = 1;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
    if (has_sat_sys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sat_sys());
    }

    // optional uint32 band_obs_num = 3;
    if (has_band_obs_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->band_obs_num());
    }

  }
  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  total_size += 1 * this->band_obs_size();
  for (int i = 0; i < this->band_obs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->band_obs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatelliteObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.SatelliteObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SatelliteObservation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SatelliteObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.SatelliteObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.SatelliteObservation)
    MergeFrom(*source);
  }
}

void SatelliteObservation::MergeFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.SatelliteObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  band_obs_.MergeFrom(from.band_obs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sat_prn()) {
      set_sat_prn(from.sat_prn());
    }
    if (from.has_sat_sys()) {
      set_sat_sys(from.sat_sys());
    }
    if (from.has_band_obs_num()) {
      set_band_obs_num(from.band_obs_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SatelliteObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.SatelliteObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatelliteObservation::CopyFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.SatelliteObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatelliteObservation::IsInitialized() const {

  return true;
}

void SatelliteObservation::Swap(SatelliteObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SatelliteObservation::InternalSwap(SatelliteObservation* other) {
  std::swap(sat_prn_, other->sat_prn_);
  std::swap(sat_sys_, other->sat_sys_);
  std::swap(band_obs_num_, other->band_obs_num_);
  band_obs_.UnsafeArenaSwap(&other->band_obs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SatelliteObservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SatelliteObservation_descriptor_;
  metadata.reflection = SatelliteObservation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SatelliteObservation

// optional uint32 sat_prn = 1;
bool SatelliteObservation::has_sat_prn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SatelliteObservation::set_has_sat_prn() {
  _has_bits_[0] |= 0x00000001u;
}
void SatelliteObservation::clear_has_sat_prn() {
  _has_bits_[0] &= ~0x00000001u;
}
void SatelliteObservation::clear_sat_prn() {
  sat_prn_ = 0u;
  clear_has_sat_prn();
}
 ::google::protobuf::uint32 SatelliteObservation::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.sat_prn)
  return sat_prn_;
}
 void SatelliteObservation::set_sat_prn(::google::protobuf::uint32 value) {
  set_has_sat_prn();
  sat_prn_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.SatelliteObservation.sat_prn)
}

// optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
bool SatelliteObservation::has_sat_sys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SatelliteObservation::set_has_sat_sys() {
  _has_bits_[0] |= 0x00000002u;
}
void SatelliteObservation::clear_has_sat_sys() {
  _has_bits_[0] &= ~0x00000002u;
}
void SatelliteObservation::clear_sat_sys() {
  sat_sys_ = 1;
  clear_has_sat_sys();
}
 ::apollo::drivers::gnss::GnssType SatelliteObservation::sat_sys() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.sat_sys)
  return static_cast< ::apollo::drivers::gnss::GnssType >(sat_sys_);
}
 void SatelliteObservation::set_sat_sys(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  set_has_sat_sys();
  sat_sys_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.SatelliteObservation.sat_sys)
}

// optional uint32 band_obs_num = 3;
bool SatelliteObservation::has_band_obs_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SatelliteObservation::set_has_band_obs_num() {
  _has_bits_[0] |= 0x00000004u;
}
void SatelliteObservation::clear_has_band_obs_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void SatelliteObservation::clear_band_obs_num() {
  band_obs_num_ = 0u;
  clear_has_band_obs_num();
}
 ::google::protobuf::uint32 SatelliteObservation::band_obs_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.band_obs_num)
  return band_obs_num_;
}
 void SatelliteObservation::set_band_obs_num(::google::protobuf::uint32 value) {
  set_has_band_obs_num();
  band_obs_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.SatelliteObservation.band_obs_num)
}

// repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
int SatelliteObservation::band_obs_size() const {
  return band_obs_.size();
}
void SatelliteObservation::clear_band_obs() {
  band_obs_.Clear();
}
const ::apollo::drivers::gnss::BandObservation& SatelliteObservation::band_obs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_.Get(index);
}
::apollo::drivers::gnss::BandObservation* SatelliteObservation::mutable_band_obs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_.Mutable(index);
}
::apollo::drivers::gnss::BandObservation* SatelliteObservation::add_band_obs() {
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::gnss::BandObservation >*
SatelliteObservation::mutable_band_obs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return &band_obs_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::gnss::BandObservation >&
SatelliteObservation::band_obs() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpochObservation::kReceiverIdFieldNumber;
const int EpochObservation::kGnssTimeTypeFieldNumber;
const int EpochObservation::kGnssWeekFieldNumber;
const int EpochObservation::kGnssSecondSFieldNumber;
const int EpochObservation::kPositionXFieldNumber;
const int EpochObservation::kPositionYFieldNumber;
const int EpochObservation::kPositionZFieldNumber;
const int EpochObservation::kHealthFlagFieldNumber;
const int EpochObservation::kSatObsNumFieldNumber;
const int EpochObservation::kSatObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpochObservation::EpochObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.EpochObservation)
}

void EpochObservation::InitAsDefaultInstance() {
}

EpochObservation::EpochObservation(const EpochObservation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.EpochObservation)
}

void EpochObservation::SharedCtor() {
  _cached_size_ = 0;
  receiver_id_ = 0u;
  gnss_time_type_ = 1;
  gnss_week_ = 0u;
  gnss_second_s_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  position_z_ = 0;
  health_flag_ = 0u;
  sat_obs_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EpochObservation::~EpochObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.EpochObservation)
  SharedDtor();
}

void EpochObservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EpochObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpochObservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EpochObservation_descriptor_;
}

const EpochObservation& EpochObservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  return *default_instance_;
}

EpochObservation* EpochObservation::default_instance_ = NULL;

EpochObservation* EpochObservation::New(::google::protobuf::Arena* arena) const {
  EpochObservation* n = new EpochObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EpochObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.EpochObservation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EpochObservation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EpochObservation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(gnss_second_s_, position_z_);
    receiver_id_ = 0u;
    gnss_time_type_ = 1;
  }
  sat_obs_num_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  sat_obs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EpochObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.EpochObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 receiver_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gnss_time_type;
        break;
      }

      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
      case 2: {
        if (tag == 16) {
         parse_gnss_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::apollo::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gnss_week;
        break;
      }

      // optional uint32 gnss_week = 3;
      case 3: {
        if (tag == 24) {
         parse_gnss_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnss_week_)));
          set_has_gnss_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_gnss_second_s;
        break;
      }

      // optional double gnss_second_s = 4;
      case 4: {
        if (tag == 33) {
         parse_gnss_second_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gnss_second_s_)));
          set_has_gnss_second_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_position_x;
        break;
      }

      // optional double position_x = 5;
      case 5: {
        if (tag == 41) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_position_y;
        break;
      }

      // optional double position_y = 6;
      case 6: {
        if (tag == 49) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_position_z;
        break;
      }

      // optional double position_z = 7;
      case 7: {
        if (tag == 57) {
         parse_position_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
          set_has_position_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_health_flag;
        break;
      }

      // optional uint32 health_flag = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_health_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_flag_)));
          set_has_health_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sat_obs_num;
        break;
      }

      // optional uint32 sat_obs_num = 9;
      case 9: {
        if (tag == 72) {
         parse_sat_obs_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_obs_num_)));
          set_has_sat_obs_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_sat_obs;
        break;
      }

      // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
      case 10: {
        if (tag == 82) {
         parse_sat_obs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sat_obs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sat_obs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_sat_obs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.EpochObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.EpochObservation)
  return false;
#undef DO_
}

void EpochObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.EpochObservation)
  // optional uint32 receiver_id = 1;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->receiver_id(), output);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (has_gnss_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gnss_time_type(), output);
  }

  // optional uint32 gnss_week = 3;
  if (has_gnss_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gnss_week(), output);
  }

  // optional double gnss_second_s = 4;
  if (has_gnss_second_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gnss_second_s(), output);
  }

  // optional double position_x = 5;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->position_x(), output);
  }

  // optional double position_y = 6;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_y(), output);
  }

  // optional double position_z = 7;
  if (has_position_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_z(), output);
  }

  // optional uint32 health_flag = 8 [default = 0];
  if (has_health_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->health_flag(), output);
  }

  // optional uint32 sat_obs_num = 9;
  if (has_sat_obs_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sat_obs_num(), output);
  }

  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  for (unsigned int i = 0, n = this->sat_obs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sat_obs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.EpochObservation)
}

::google::protobuf::uint8* EpochObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.EpochObservation)
  // optional uint32 receiver_id = 1;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->receiver_id(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (has_gnss_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gnss_time_type(), target);
  }

  // optional uint32 gnss_week = 3;
  if (has_gnss_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gnss_week(), target);
  }

  // optional double gnss_second_s = 4;
  if (has_gnss_second_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gnss_second_s(), target);
  }

  // optional double position_x = 5;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->position_x(), target);
  }

  // optional double position_y = 6;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_y(), target);
  }

  // optional double position_z = 7;
  if (has_position_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_z(), target);
  }

  // optional uint32 health_flag = 8 [default = 0];
  if (has_health_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->health_flag(), target);
  }

  // optional uint32 sat_obs_num = 9;
  if (has_sat_obs_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sat_obs_num(), target);
  }

  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  for (unsigned int i = 0, n = this->sat_obs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->sat_obs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.EpochObservation)
  return target;
}

int EpochObservation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.EpochObservation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 receiver_id = 1;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_id());
    }

    // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
    if (has_gnss_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
    }

    // optional uint32 gnss_week = 3;
    if (has_gnss_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gnss_week());
    }

    // optional double gnss_second_s = 4;
    if (has_gnss_second_s()) {
      total_size += 1 + 8;
    }

    // optional double position_x = 5;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional double position_y = 6;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional double position_z = 7;
    if (has_position_z()) {
      total_size += 1 + 8;
    }

    // optional uint32 health_flag = 8 [default = 0];
    if (has_health_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_flag());
    }

  }
  // optional uint32 sat_obs_num = 9;
  if (has_sat_obs_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sat_obs_num());
  }

  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  total_size += 1 * this->sat_obs_size();
  for (int i = 0; i < this->sat_obs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sat_obs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpochObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.EpochObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EpochObservation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EpochObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.EpochObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.EpochObservation)
    MergeFrom(*source);
  }
}

void EpochObservation::MergeFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.EpochObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sat_obs_.MergeFrom(from.sat_obs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
    if (from.has_gnss_time_type()) {
      set_gnss_time_type(from.gnss_time_type());
    }
    if (from.has_gnss_week()) {
      set_gnss_week(from.gnss_week());
    }
    if (from.has_gnss_second_s()) {
      set_gnss_second_s(from.gnss_second_s());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_position_z()) {
      set_position_z(from.position_z());
    }
    if (from.has_health_flag()) {
      set_health_flag(from.health_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sat_obs_num()) {
      set_sat_obs_num(from.sat_obs_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EpochObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.EpochObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochObservation::CopyFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.EpochObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochObservation::IsInitialized() const {

  return true;
}

void EpochObservation::Swap(EpochObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpochObservation::InternalSwap(EpochObservation* other) {
  std::swap(receiver_id_, other->receiver_id_);
  std::swap(gnss_time_type_, other->gnss_time_type_);
  std::swap(gnss_week_, other->gnss_week_);
  std::swap(gnss_second_s_, other->gnss_second_s_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(position_z_, other->position_z_);
  std::swap(health_flag_, other->health_flag_);
  std::swap(sat_obs_num_, other->sat_obs_num_);
  sat_obs_.UnsafeArenaSwap(&other->sat_obs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpochObservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EpochObservation_descriptor_;
  metadata.reflection = EpochObservation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpochObservation

// optional uint32 receiver_id = 1;
bool EpochObservation::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EpochObservation::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EpochObservation::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EpochObservation::clear_receiver_id() {
  receiver_id_ = 0u;
  clear_has_receiver_id();
}
 ::google::protobuf::uint32 EpochObservation::receiver_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.receiver_id)
  return receiver_id_;
}
 void EpochObservation::set_receiver_id(::google::protobuf::uint32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.receiver_id)
}

// optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
bool EpochObservation::has_gnss_time_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EpochObservation::set_has_gnss_time_type() {
  _has_bits_[0] |= 0x00000002u;
}
void EpochObservation::clear_has_gnss_time_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void EpochObservation::clear_gnss_time_type() {
  gnss_time_type_ = 1;
  clear_has_gnss_time_type();
}
 ::apollo::drivers::gnss::GnssTimeType EpochObservation::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.gnss_time_type)
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
 void EpochObservation::set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_gnss_time_type();
  gnss_time_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.gnss_time_type)
}

// optional uint32 gnss_week = 3;
bool EpochObservation::has_gnss_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EpochObservation::set_has_gnss_week() {
  _has_bits_[0] |= 0x00000004u;
}
void EpochObservation::clear_has_gnss_week() {
  _has_bits_[0] &= ~0x00000004u;
}
void EpochObservation::clear_gnss_week() {
  gnss_week_ = 0u;
  clear_has_gnss_week();
}
 ::google::protobuf::uint32 EpochObservation::gnss_week() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.gnss_week)
  return gnss_week_;
}
 void EpochObservation::set_gnss_week(::google::protobuf::uint32 value) {
  set_has_gnss_week();
  gnss_week_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.gnss_week)
}

// optional double gnss_second_s = 4;
bool EpochObservation::has_gnss_second_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EpochObservation::set_has_gnss_second_s() {
  _has_bits_[0] |= 0x00000008u;
}
void EpochObservation::clear_has_gnss_second_s() {
  _has_bits_[0] &= ~0x00000008u;
}
void EpochObservation::clear_gnss_second_s() {
  gnss_second_s_ = 0;
  clear_has_gnss_second_s();
}
 double EpochObservation::gnss_second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.gnss_second_s)
  return gnss_second_s_;
}
 void EpochObservation::set_gnss_second_s(double value) {
  set_has_gnss_second_s();
  gnss_second_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.gnss_second_s)
}

// optional double position_x = 5;
bool EpochObservation::has_position_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EpochObservation::set_has_position_x() {
  _has_bits_[0] |= 0x00000010u;
}
void EpochObservation::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void EpochObservation::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
 double EpochObservation::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.position_x)
  return position_x_;
}
 void EpochObservation::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.position_x)
}

// optional double position_y = 6;
bool EpochObservation::has_position_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EpochObservation::set_has_position_y() {
  _has_bits_[0] |= 0x00000020u;
}
void EpochObservation::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void EpochObservation::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
 double EpochObservation::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.position_y)
  return position_y_;
}
 void EpochObservation::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.position_y)
}

// optional double position_z = 7;
bool EpochObservation::has_position_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EpochObservation::set_has_position_z() {
  _has_bits_[0] |= 0x00000040u;
}
void EpochObservation::clear_has_position_z() {
  _has_bits_[0] &= ~0x00000040u;
}
void EpochObservation::clear_position_z() {
  position_z_ = 0;
  clear_has_position_z();
}
 double EpochObservation::position_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.position_z)
  return position_z_;
}
 void EpochObservation::set_position_z(double value) {
  set_has_position_z();
  position_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.position_z)
}

// optional uint32 health_flag = 8 [default = 0];
bool EpochObservation::has_health_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EpochObservation::set_has_health_flag() {
  _has_bits_[0] |= 0x00000080u;
}
void EpochObservation::clear_has_health_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
void EpochObservation::clear_health_flag() {
  health_flag_ = 0u;
  clear_has_health_flag();
}
 ::google::protobuf::uint32 EpochObservation::health_flag() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.health_flag)
  return health_flag_;
}
 void EpochObservation::set_health_flag(::google::protobuf::uint32 value) {
  set_has_health_flag();
  health_flag_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.health_flag)
}

// optional uint32 sat_obs_num = 9;
bool EpochObservation::has_sat_obs_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EpochObservation::set_has_sat_obs_num() {
  _has_bits_[0] |= 0x00000100u;
}
void EpochObservation::clear_has_sat_obs_num() {
  _has_bits_[0] &= ~0x00000100u;
}
void EpochObservation::clear_sat_obs_num() {
  sat_obs_num_ = 0u;
  clear_has_sat_obs_num();
}
 ::google::protobuf::uint32 EpochObservation::sat_obs_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.sat_obs_num)
  return sat_obs_num_;
}
 void EpochObservation::set_sat_obs_num(::google::protobuf::uint32 value) {
  set_has_sat_obs_num();
  sat_obs_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.sat_obs_num)
}

// repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
int EpochObservation::sat_obs_size() const {
  return sat_obs_.size();
}
void EpochObservation::clear_sat_obs() {
  sat_obs_.Clear();
}
const ::apollo::drivers::gnss::SatelliteObservation& EpochObservation::sat_obs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_.Get(index);
}
::apollo::drivers::gnss::SatelliteObservation* EpochObservation::mutable_sat_obs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_.Mutable(index);
}
::apollo::drivers::gnss::SatelliteObservation* EpochObservation::add_sat_obs() {
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::gnss::SatelliteObservation >*
EpochObservation::mutable_sat_obs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.EpochObservation.sat_obs)
  return &sat_obs_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::gnss::SatelliteObservation >&
EpochObservation::sat_obs() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KepplerOrbit::kGnssTypeFieldNumber;
const int KepplerOrbit::kSatPrnFieldNumber;
const int KepplerOrbit::kGnssTimeTypeFieldNumber;
const int KepplerOrbit::kYearFieldNumber;
const int KepplerOrbit::kMonthFieldNumber;
const int KepplerOrbit::kDayFieldNumber;
const int KepplerOrbit::kHourFieldNumber;
const int KepplerOrbit::kMinuteFieldNumber;
const int KepplerOrbit::kSecondSFieldNumber;
const int KepplerOrbit::kWeekNumFieldNumber;
const int KepplerOrbit::kReservedFieldNumber;
const int KepplerOrbit::kAf0FieldNumber;
const int KepplerOrbit::kAf1FieldNumber;
const int KepplerOrbit::kAf2FieldNumber;
const int KepplerOrbit::kIodeFieldNumber;
const int KepplerOrbit::kDeltanFieldNumber;
const int KepplerOrbit::kM0FieldNumber;
const int KepplerOrbit::kEFieldNumber;
const int KepplerOrbit::kRootaFieldNumber;
const int KepplerOrbit::kToeFieldNumber;
const int KepplerOrbit::kTocFieldNumber;
const int KepplerOrbit::kCicFieldNumber;
const int KepplerOrbit::kCrcFieldNumber;
const int KepplerOrbit::kCisFieldNumber;
const int KepplerOrbit::kCrsFieldNumber;
const int KepplerOrbit::kCucFieldNumber;
const int KepplerOrbit::kCusFieldNumber;
const int KepplerOrbit::kOmega0FieldNumber;
const int KepplerOrbit::kOmegaFieldNumber;
const int KepplerOrbit::kI0FieldNumber;
const int KepplerOrbit::kOmegadotFieldNumber;
const int KepplerOrbit::kIdotFieldNumber;
const int KepplerOrbit::kCodesonL2ChannelFieldNumber;
const int KepplerOrbit::kL2PdataflagFieldNumber;
const int KepplerOrbit::kAccuracyFieldNumber;
const int KepplerOrbit::kHealthFieldNumber;
const int KepplerOrbit::kTgdFieldNumber;
const int KepplerOrbit::kIodcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KepplerOrbit::KepplerOrbit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.KepplerOrbit)
}

void KepplerOrbit::InitAsDefaultInstance() {
}

KepplerOrbit::KepplerOrbit(const KepplerOrbit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.KepplerOrbit)
}

void KepplerOrbit::SharedCtor() {
  _cached_size_ = 0;
  gnss_type_ = 1;
  sat_prn_ = 0u;
  gnss_time_type_ = 1;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  hour_ = 0u;
  minute_ = 0u;
  second_s_ = 0;
  week_num_ = 0u;
  reserved_ = 0;
  af0_ = 0;
  af1_ = 0;
  af2_ = 0;
  iode_ = 0;
  deltan_ = 0;
  m0_ = 0;
  e_ = 0;
  roota_ = 0;
  toe_ = 0;
  toc_ = 0;
  cic_ = 0;
  crc_ = 0;
  cis_ = 0;
  crs_ = 0;
  cuc_ = 0;
  cus_ = 0;
  omega0_ = 0;
  omega_ = 0;
  i0_ = 0;
  omegadot_ = 0;
  idot_ = 0;
  codesonl2channel_ = 0;
  l2pdataflag_ = 0u;
  accuracy_ = 0u;
  health_ = 0u;
  tgd_ = 0;
  iodc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KepplerOrbit::~KepplerOrbit() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.KepplerOrbit)
  SharedDtor();
}

void KepplerOrbit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KepplerOrbit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KepplerOrbit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KepplerOrbit_descriptor_;
}

const KepplerOrbit& KepplerOrbit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  return *default_instance_;
}

KepplerOrbit* KepplerOrbit::default_instance_ = NULL;

KepplerOrbit* KepplerOrbit::New(::google::protobuf::Arena* arena) const {
  KepplerOrbit* n = new KepplerOrbit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KepplerOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.KepplerOrbit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KepplerOrbit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KepplerOrbit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(year_, minute_);
    gnss_type_ = 1;
    sat_prn_ = 0u;
    gnss_time_type_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(second_s_, deltan_);
    week_num_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(m0_, cic_);
    ZR_(crc_, cis_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(crs_, idot_);
  }
  if (_has_bits_[32 / 32] & 63u) {
    ZR_(codesonl2channel_, iodc_);
    l2pdataflag_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KepplerOrbit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.KepplerOrbit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sat_prn;
        break;
      }

      // optional uint32 sat_prn = 2;
      case 2: {
        if (tag == 16) {
         parse_sat_prn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
          set_has_sat_prn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gnss_time_type;
        break;
      }

      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
      case 3: {
        if (tag == 24) {
         parse_gnss_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::apollo::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_year;
        break;
      }

      // optional uint32 year = 4;
      case 4: {
        if (tag == 32) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_month;
        break;
      }

      // optional uint32 month = 5;
      case 5: {
        if (tag == 40) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_day;
        break;
      }

      // optional uint32 day = 6;
      case 6: {
        if (tag == 48) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hour;
        break;
      }

      // optional uint32 hour = 7;
      case 7: {
        if (tag == 56) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_minute;
        break;
      }

      // optional uint32 minute = 8;
      case 8: {
        if (tag == 64) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_second_s;
        break;
      }

      // optional double second_s = 9;
      case 9: {
        if (tag == 73) {
         parse_second_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_s_)));
          set_has_second_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_week_num;
        break;
      }

      // optional uint32 week_num = 10;
      case 10: {
        if (tag == 80) {
         parse_week_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_num_)));
          set_has_week_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_reserved;
        break;
      }

      // optional double reserved = 11;
      case 11: {
        if (tag == 89) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_af0;
        break;
      }

      // optional double af0 = 12;
      case 12: {
        if (tag == 97) {
         parse_af0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af0_)));
          set_has_af0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_af1;
        break;
      }

      // optional double af1 = 13;
      case 13: {
        if (tag == 105) {
         parse_af1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af1_)));
          set_has_af1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_af2;
        break;
      }

      // optional double af2 = 14;
      case 14: {
        if (tag == 113) {
         parse_af2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af2_)));
          set_has_af2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_iode;
        break;
      }

      // optional double iode = 15;
      case 15: {
        if (tag == 121) {
         parse_iode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iode_)));
          set_has_iode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_deltan;
        break;
      }

      // optional double deltan = 16;
      case 16: {
        if (tag == 129) {
         parse_deltan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltan_)));
          set_has_deltan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_m0;
        break;
      }

      // optional double m0 = 17;
      case 17: {
        if (tag == 137) {
         parse_m0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m0_)));
          set_has_m0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_e;
        break;
      }

      // optional double e = 18;
      case 18: {
        if (tag == 145) {
         parse_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_)));
          set_has_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_roota;
        break;
      }

      // optional double roota = 19;
      case 19: {
        if (tag == 153) {
         parse_roota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roota_)));
          set_has_roota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_toe;
        break;
      }

      // optional double toe = 20;
      case 20: {
        if (tag == 161) {
         parse_toe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toe_)));
          set_has_toe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_toc;
        break;
      }

      // optional double toc = 21;
      case 21: {
        if (tag == 169) {
         parse_toc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toc_)));
          set_has_toc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_cic;
        break;
      }

      // optional double cic = 22;
      case 22: {
        if (tag == 177) {
         parse_cic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cic_)));
          set_has_cic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_crc;
        break;
      }

      // optional double crc = 23;
      case 23: {
        if (tag == 185) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_cis;
        break;
      }

      // optional double cis = 24;
      case 24: {
        if (tag == 193) {
         parse_cis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cis_)));
          set_has_cis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_crs;
        break;
      }

      // optional double crs = 25;
      case 25: {
        if (tag == 201) {
         parse_crs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crs_)));
          set_has_crs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_cuc;
        break;
      }

      // optional double cuc = 26;
      case 26: {
        if (tag == 209) {
         parse_cuc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cuc_)));
          set_has_cuc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_cus;
        break;
      }

      // optional double cus = 27;
      case 27: {
        if (tag == 217) {
         parse_cus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cus_)));
          set_has_cus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_omega0;
        break;
      }

      // optional double omega0 = 28;
      case 28: {
        if (tag == 225) {
         parse_omega0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega0_)));
          set_has_omega0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_omega;
        break;
      }

      // optional double omega = 29;
      case 29: {
        if (tag == 233) {
         parse_omega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));
          set_has_omega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_i0;
        break;
      }

      // optional double i0 = 30;
      case 30: {
        if (tag == 241) {
         parse_i0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i0_)));
          set_has_i0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_omegadot;
        break;
      }

      // optional double omegadot = 31;
      case 31: {
        if (tag == 249) {
         parse_omegadot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omegadot_)));
          set_has_omegadot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_idot;
        break;
      }

      // optional double idot = 32;
      case 32: {
        if (tag == 257) {
         parse_idot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idot_)));
          set_has_idot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_codesonL2channel;
        break;
      }

      // optional double codesonL2channel = 33;
      case 33: {
        if (tag == 265) {
         parse_codesonL2channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &codesonl2channel_)));
          set_has_codesonl2channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_L2Pdataflag;
        break;
      }

      // optional uint32 L2Pdataflag = 34;
      case 34: {
        if (tag == 272) {
         parse_L2Pdataflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &l2pdataflag_)));
          set_has_l2pdataflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_accuracy;
        break;
      }

      // optional uint32 accuracy = 35;
      case 35: {
        if (tag == 280) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_health;
        break;
      }

      // optional uint32 health = 36;
      case 36: {
        if (tag == 288) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_tgd;
        break;
      }

      // optional double tgd = 37;
      case 37: {
        if (tag == 297) {
         parse_tgd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tgd_)));
          set_has_tgd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_iodc;
        break;
      }

      // optional double iodc = 38;
      case 38: {
        if (tag == 305) {
         parse_iodc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iodc_)));
          set_has_iodc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.KepplerOrbit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.KepplerOrbit)
  return false;
#undef DO_
}

void KepplerOrbit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.KepplerOrbit)
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  if (has_gnss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  // optional uint32 sat_prn = 2;
  if (has_sat_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sat_prn(), output);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  if (has_gnss_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_time_type(), output);
  }

  // optional uint32 year = 4;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->year(), output);
  }

  // optional uint32 month = 5;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->month(), output);
  }

  // optional uint32 day = 6;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->day(), output);
  }

  // optional uint32 hour = 7;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hour(), output);
  }

  // optional uint32 minute = 8;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->minute(), output);
  }

  // optional double second_s = 9;
  if (has_second_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->second_s(), output);
  }

  // optional uint32 week_num = 10;
  if (has_week_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week_num(), output);
  }

  // optional double reserved = 11;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->reserved(), output);
  }

  // optional double af0 = 12;
  if (has_af0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->af0(), output);
  }

  // optional double af1 = 13;
  if (has_af1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->af1(), output);
  }

  // optional double af2 = 14;
  if (has_af2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->af2(), output);
  }

  // optional double iode = 15;
  if (has_iode()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->iode(), output);
  }

  // optional double deltan = 16;
  if (has_deltan()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->deltan(), output);
  }

  // optional double m0 = 17;
  if (has_m0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->m0(), output);
  }

  // optional double e = 18;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->e(), output);
  }

  // optional double roota = 19;
  if (has_roota()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->roota(), output);
  }

  // optional double toe = 20;
  if (has_toe()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->toe(), output);
  }

  // optional double toc = 21;
  if (has_toc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->toc(), output);
  }

  // optional double cic = 22;
  if (has_cic()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->cic(), output);
  }

  // optional double crc = 23;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->crc(), output);
  }

  // optional double cis = 24;
  if (has_cis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->cis(), output);
  }

  // optional double crs = 25;
  if (has_crs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->crs(), output);
  }

  // optional double cuc = 26;
  if (has_cuc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->cuc(), output);
  }

  // optional double cus = 27;
  if (has_cus()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->cus(), output);
  }

  // optional double omega0 = 28;
  if (has_omega0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->omega0(), output);
  }

  // optional double omega = 29;
  if (has_omega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->omega(), output);
  }

  // optional double i0 = 30;
  if (has_i0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->i0(), output);
  }

  // optional double omegadot = 31;
  if (has_omegadot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->omegadot(), output);
  }

  // optional double idot = 32;
  if (has_idot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->idot(), output);
  }

  // optional double codesonL2channel = 33;
  if (has_codesonl2channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->codesonl2channel(), output);
  }

  // optional uint32 L2Pdataflag = 34;
  if (has_l2pdataflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->l2pdataflag(), output);
  }

  // optional uint32 accuracy = 35;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->accuracy(), output);
  }

  // optional uint32 health = 36;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->health(), output);
  }

  // optional double tgd = 37;
  if (has_tgd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->tgd(), output);
  }

  // optional double iodc = 38;
  if (has_iodc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->iodc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.KepplerOrbit)
}

::google::protobuf::uint8* KepplerOrbit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.KepplerOrbit)
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  if (has_gnss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  // optional uint32 sat_prn = 2;
  if (has_sat_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sat_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  if (has_gnss_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_time_type(), target);
  }

  // optional uint32 year = 4;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->year(), target);
  }

  // optional uint32 month = 5;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->month(), target);
  }

  // optional uint32 day = 6;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->day(), target);
  }

  // optional uint32 hour = 7;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hour(), target);
  }

  // optional uint32 minute = 8;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->minute(), target);
  }

  // optional double second_s = 9;
  if (has_second_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->second_s(), target);
  }

  // optional uint32 week_num = 10;
  if (has_week_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week_num(), target);
  }

  // optional double reserved = 11;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->reserved(), target);
  }

  // optional double af0 = 12;
  if (has_af0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->af0(), target);
  }

  // optional double af1 = 13;
  if (has_af1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->af1(), target);
  }

  // optional double af2 = 14;
  if (has_af2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->af2(), target);
  }

  // optional double iode = 15;
  if (has_iode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->iode(), target);
  }

  // optional double deltan = 16;
  if (has_deltan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->deltan(), target);
  }

  // optional double m0 = 17;
  if (has_m0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->m0(), target);
  }

  // optional double e = 18;
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->e(), target);
  }

  // optional double roota = 19;
  if (has_roota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->roota(), target);
  }

  // optional double toe = 20;
  if (has_toe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->toe(), target);
  }

  // optional double toc = 21;
  if (has_toc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->toc(), target);
  }

  // optional double cic = 22;
  if (has_cic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->cic(), target);
  }

  // optional double crc = 23;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->crc(), target);
  }

  // optional double cis = 24;
  if (has_cis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->cis(), target);
  }

  // optional double crs = 25;
  if (has_crs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->crs(), target);
  }

  // optional double cuc = 26;
  if (has_cuc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->cuc(), target);
  }

  // optional double cus = 27;
  if (has_cus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->cus(), target);
  }

  // optional double omega0 = 28;
  if (has_omega0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->omega0(), target);
  }

  // optional double omega = 29;
  if (has_omega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->omega(), target);
  }

  // optional double i0 = 30;
  if (has_i0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->i0(), target);
  }

  // optional double omegadot = 31;
  if (has_omegadot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->omegadot(), target);
  }

  // optional double idot = 32;
  if (has_idot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->idot(), target);
  }

  // optional double codesonL2channel = 33;
  if (has_codesonl2channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->codesonl2channel(), target);
  }

  // optional uint32 L2Pdataflag = 34;
  if (has_l2pdataflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->l2pdataflag(), target);
  }

  // optional uint32 accuracy = 35;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->accuracy(), target);
  }

  // optional uint32 health = 36;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->health(), target);
  }

  // optional double tgd = 37;
  if (has_tgd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->tgd(), target);
  }

  // optional double iodc = 38;
  if (has_iodc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->iodc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.KepplerOrbit)
  return target;
}

int KepplerOrbit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.KepplerOrbit)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

    // optional uint32 sat_prn = 2;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
    if (has_gnss_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
    }

    // optional uint32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 7;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 8;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double second_s = 9;
    if (has_second_s()) {
      total_size += 1 + 8;
    }

    // optional uint32 week_num = 10;
    if (has_week_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_num());
    }

    // optional double reserved = 11;
    if (has_reserved()) {
      total_size += 1 + 8;
    }

    // optional double af0 = 12;
    if (has_af0()) {
      total_size += 1 + 8;
    }

    // optional double af1 = 13;
    if (has_af1()) {
      total_size += 1 + 8;
    }

    // optional double af2 = 14;
    if (has_af2()) {
      total_size += 1 + 8;
    }

    // optional double iode = 15;
    if (has_iode()) {
      total_size += 1 + 8;
    }

    // optional double deltan = 16;
    if (has_deltan()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double m0 = 17;
    if (has_m0()) {
      total_size += 2 + 8;
    }

    // optional double e = 18;
    if (has_e()) {
      total_size += 2 + 8;
    }

    // optional double roota = 19;
    if (has_roota()) {
      total_size += 2 + 8;
    }

    // optional double toe = 20;
    if (has_toe()) {
      total_size += 2 + 8;
    }

    // optional double toc = 21;
    if (has_toc()) {
      total_size += 2 + 8;
    }

    // optional double cic = 22;
    if (has_cic()) {
      total_size += 2 + 8;
    }

    // optional double crc = 23;
    if (has_crc()) {
      total_size += 2 + 8;
    }

    // optional double cis = 24;
    if (has_cis()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double crs = 25;
    if (has_crs()) {
      total_size += 2 + 8;
    }

    // optional double cuc = 26;
    if (has_cuc()) {
      total_size += 2 + 8;
    }

    // optional double cus = 27;
    if (has_cus()) {
      total_size += 2 + 8;
    }

    // optional double omega0 = 28;
    if (has_omega0()) {
      total_size += 2 + 8;
    }

    // optional double omega = 29;
    if (has_omega()) {
      total_size += 2 + 8;
    }

    // optional double i0 = 30;
    if (has_i0()) {
      total_size += 2 + 8;
    }

    // optional double omegadot = 31;
    if (has_omegadot()) {
      total_size += 2 + 8;
    }

    // optional double idot = 32;
    if (has_idot()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional double codesonL2channel = 33;
    if (has_codesonl2channel()) {
      total_size += 2 + 8;
    }

    // optional uint32 L2Pdataflag = 34;
    if (has_l2pdataflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->l2pdataflag());
    }

    // optional uint32 accuracy = 35;
    if (has_accuracy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accuracy());
    }

    // optional uint32 health = 36;
    if (has_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional double tgd = 37;
    if (has_tgd()) {
      total_size += 2 + 8;
    }

    // optional double iodc = 38;
    if (has_iodc()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KepplerOrbit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.KepplerOrbit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KepplerOrbit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KepplerOrbit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.KepplerOrbit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.KepplerOrbit)
    MergeFrom(*source);
  }
}

void KepplerOrbit::MergeFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.KepplerOrbit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gnss_type()) {
      set_gnss_type(from.gnss_type());
    }
    if (from.has_sat_prn()) {
      set_sat_prn(from.sat_prn());
    }
    if (from.has_gnss_time_type()) {
      set_gnss_time_type(from.gnss_time_type());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_second_s()) {
      set_second_s(from.second_s());
    }
    if (from.has_week_num()) {
      set_week_num(from.week_num());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_af0()) {
      set_af0(from.af0());
    }
    if (from.has_af1()) {
      set_af1(from.af1());
    }
    if (from.has_af2()) {
      set_af2(from.af2());
    }
    if (from.has_iode()) {
      set_iode(from.iode());
    }
    if (from.has_deltan()) {
      set_deltan(from.deltan());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m0()) {
      set_m0(from.m0());
    }
    if (from.has_e()) {
      set_e(from.e());
    }
    if (from.has_roota()) {
      set_roota(from.roota());
    }
    if (from.has_toe()) {
      set_toe(from.toe());
    }
    if (from.has_toc()) {
      set_toc(from.toc());
    }
    if (from.has_cic()) {
      set_cic(from.cic());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_cis()) {
      set_cis(from.cis());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_crs()) {
      set_crs(from.crs());
    }
    if (from.has_cuc()) {
      set_cuc(from.cuc());
    }
    if (from.has_cus()) {
      set_cus(from.cus());
    }
    if (from.has_omega0()) {
      set_omega0(from.omega0());
    }
    if (from.has_omega()) {
      set_omega(from.omega());
    }
    if (from.has_i0()) {
      set_i0(from.i0());
    }
    if (from.has_omegadot()) {
      set_omegadot(from.omegadot());
    }
    if (from.has_idot()) {
      set_idot(from.idot());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_codesonl2channel()) {
      set_codesonl2channel(from.codesonl2channel());
    }
    if (from.has_l2pdataflag()) {
      set_l2pdataflag(from.l2pdataflag());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_tgd()) {
      set_tgd(from.tgd());
    }
    if (from.has_iodc()) {
      set_iodc(from.iodc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KepplerOrbit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.KepplerOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KepplerOrbit::CopyFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.KepplerOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KepplerOrbit::IsInitialized() const {

  return true;
}

void KepplerOrbit::Swap(KepplerOrbit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KepplerOrbit::InternalSwap(KepplerOrbit* other) {
  std::swap(gnss_type_, other->gnss_type_);
  std::swap(sat_prn_, other->sat_prn_);
  std::swap(gnss_time_type_, other->gnss_time_type_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_s_, other->second_s_);
  std::swap(week_num_, other->week_num_);
  std::swap(reserved_, other->reserved_);
  std::swap(af0_, other->af0_);
  std::swap(af1_, other->af1_);
  std::swap(af2_, other->af2_);
  std::swap(iode_, other->iode_);
  std::swap(deltan_, other->deltan_);
  std::swap(m0_, other->m0_);
  std::swap(e_, other->e_);
  std::swap(roota_, other->roota_);
  std::swap(toe_, other->toe_);
  std::swap(toc_, other->toc_);
  std::swap(cic_, other->cic_);
  std::swap(crc_, other->crc_);
  std::swap(cis_, other->cis_);
  std::swap(crs_, other->crs_);
  std::swap(cuc_, other->cuc_);
  std::swap(cus_, other->cus_);
  std::swap(omega0_, other->omega0_);
  std::swap(omega_, other->omega_);
  std::swap(i0_, other->i0_);
  std::swap(omegadot_, other->omegadot_);
  std::swap(idot_, other->idot_);
  std::swap(codesonl2channel_, other->codesonl2channel_);
  std::swap(l2pdataflag_, other->l2pdataflag_);
  std::swap(accuracy_, other->accuracy_);
  std::swap(health_, other->health_);
  std::swap(tgd_, other->tgd_);
  std::swap(iodc_, other->iodc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KepplerOrbit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KepplerOrbit_descriptor_;
  metadata.reflection = KepplerOrbit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KepplerOrbit

// optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
bool KepplerOrbit::has_gnss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KepplerOrbit::set_has_gnss_type() {
  _has_bits_[0] |= 0x00000001u;
}
void KepplerOrbit::clear_has_gnss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void KepplerOrbit::clear_gnss_type() {
  gnss_type_ = 1;
  clear_has_gnss_type();
}
 ::apollo::drivers::gnss::GnssType KepplerOrbit::gnss_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.gnss_type)
  return static_cast< ::apollo::drivers::gnss::GnssType >(gnss_type_);
}
 void KepplerOrbit::set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  set_has_gnss_type();
  gnss_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.gnss_type)
}

// optional uint32 sat_prn = 2;
bool KepplerOrbit::has_sat_prn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KepplerOrbit::set_has_sat_prn() {
  _has_bits_[0] |= 0x00000002u;
}
void KepplerOrbit::clear_has_sat_prn() {
  _has_bits_[0] &= ~0x00000002u;
}
void KepplerOrbit::clear_sat_prn() {
  sat_prn_ = 0u;
  clear_has_sat_prn();
}
 ::google::protobuf::uint32 KepplerOrbit::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.sat_prn)
  return sat_prn_;
}
 void KepplerOrbit::set_sat_prn(::google::protobuf::uint32 value) {
  set_has_sat_prn();
  sat_prn_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.sat_prn)
}

// optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
bool KepplerOrbit::has_gnss_time_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KepplerOrbit::set_has_gnss_time_type() {
  _has_bits_[0] |= 0x00000004u;
}
void KepplerOrbit::clear_has_gnss_time_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void KepplerOrbit::clear_gnss_time_type() {
  gnss_time_type_ = 1;
  clear_has_gnss_time_type();
}
 ::apollo::drivers::gnss::GnssTimeType KepplerOrbit::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.gnss_time_type)
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
 void KepplerOrbit::set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_gnss_time_type();
  gnss_time_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.gnss_time_type)
}

// optional uint32 year = 4;
bool KepplerOrbit::has_year() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KepplerOrbit::set_has_year() {
  _has_bits_[0] |= 0x00000008u;
}
void KepplerOrbit::clear_has_year() {
  _has_bits_[0] &= ~0x00000008u;
}
void KepplerOrbit::clear_year() {
  year_ = 0u;
  clear_has_year();
}
 ::google::protobuf::uint32 KepplerOrbit::year() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.year)
  return year_;
}
 void KepplerOrbit::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.year)
}

// optional uint32 month = 5;
bool KepplerOrbit::has_month() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KepplerOrbit::set_has_month() {
  _has_bits_[0] |= 0x00000010u;
}
void KepplerOrbit::clear_has_month() {
  _has_bits_[0] &= ~0x00000010u;
}
void KepplerOrbit::clear_month() {
  month_ = 0u;
  clear_has_month();
}
 ::google::protobuf::uint32 KepplerOrbit::month() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.month)
  return month_;
}
 void KepplerOrbit::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.month)
}

// optional uint32 day = 6;
bool KepplerOrbit::has_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KepplerOrbit::set_has_day() {
  _has_bits_[0] |= 0x00000020u;
}
void KepplerOrbit::clear_has_day() {
  _has_bits_[0] &= ~0x00000020u;
}
void KepplerOrbit::clear_day() {
  day_ = 0u;
  clear_has_day();
}
 ::google::protobuf::uint32 KepplerOrbit::day() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.day)
  return day_;
}
 void KepplerOrbit::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.day)
}

// optional uint32 hour = 7;
bool KepplerOrbit::has_hour() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KepplerOrbit::set_has_hour() {
  _has_bits_[0] |= 0x00000040u;
}
void KepplerOrbit::clear_has_hour() {
  _has_bits_[0] &= ~0x00000040u;
}
void KepplerOrbit::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
 ::google::protobuf::uint32 KepplerOrbit::hour() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.hour)
  return hour_;
}
 void KepplerOrbit::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.hour)
}

// optional uint32 minute = 8;
bool KepplerOrbit::has_minute() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KepplerOrbit::set_has_minute() {
  _has_bits_[0] |= 0x00000080u;
}
void KepplerOrbit::clear_has_minute() {
  _has_bits_[0] &= ~0x00000080u;
}
void KepplerOrbit::clear_minute() {
  minute_ = 0u;
  clear_has_minute();
}
 ::google::protobuf::uint32 KepplerOrbit::minute() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.minute)
  return minute_;
}
 void KepplerOrbit::set_minute(::google::protobuf::uint32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.minute)
}

// optional double second_s = 9;
bool KepplerOrbit::has_second_s() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KepplerOrbit::set_has_second_s() {
  _has_bits_[0] |= 0x00000100u;
}
void KepplerOrbit::clear_has_second_s() {
  _has_bits_[0] &= ~0x00000100u;
}
void KepplerOrbit::clear_second_s() {
  second_s_ = 0;
  clear_has_second_s();
}
 double KepplerOrbit::second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.second_s)
  return second_s_;
}
 void KepplerOrbit::set_second_s(double value) {
  set_has_second_s();
  second_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.second_s)
}

// optional uint32 week_num = 10;
bool KepplerOrbit::has_week_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void KepplerOrbit::set_has_week_num() {
  _has_bits_[0] |= 0x00000200u;
}
void KepplerOrbit::clear_has_week_num() {
  _has_bits_[0] &= ~0x00000200u;
}
void KepplerOrbit::clear_week_num() {
  week_num_ = 0u;
  clear_has_week_num();
}
 ::google::protobuf::uint32 KepplerOrbit::week_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.week_num)
  return week_num_;
}
 void KepplerOrbit::set_week_num(::google::protobuf::uint32 value) {
  set_has_week_num();
  week_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.week_num)
}

// optional double reserved = 11;
bool KepplerOrbit::has_reserved() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void KepplerOrbit::set_has_reserved() {
  _has_bits_[0] |= 0x00000400u;
}
void KepplerOrbit::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000400u;
}
void KepplerOrbit::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
 double KepplerOrbit::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.reserved)
  return reserved_;
}
 void KepplerOrbit::set_reserved(double value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.reserved)
}

// optional double af0 = 12;
bool KepplerOrbit::has_af0() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void KepplerOrbit::set_has_af0() {
  _has_bits_[0] |= 0x00000800u;
}
void KepplerOrbit::clear_has_af0() {
  _has_bits_[0] &= ~0x00000800u;
}
void KepplerOrbit::clear_af0() {
  af0_ = 0;
  clear_has_af0();
}
 double KepplerOrbit::af0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.af0)
  return af0_;
}
 void KepplerOrbit::set_af0(double value) {
  set_has_af0();
  af0_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.af0)
}

// optional double af1 = 13;
bool KepplerOrbit::has_af1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void KepplerOrbit::set_has_af1() {
  _has_bits_[0] |= 0x00001000u;
}
void KepplerOrbit::clear_has_af1() {
  _has_bits_[0] &= ~0x00001000u;
}
void KepplerOrbit::clear_af1() {
  af1_ = 0;
  clear_has_af1();
}
 double KepplerOrbit::af1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.af1)
  return af1_;
}
 void KepplerOrbit::set_af1(double value) {
  set_has_af1();
  af1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.af1)
}

// optional double af2 = 14;
bool KepplerOrbit::has_af2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void KepplerOrbit::set_has_af2() {
  _has_bits_[0] |= 0x00002000u;
}
void KepplerOrbit::clear_has_af2() {
  _has_bits_[0] &= ~0x00002000u;
}
void KepplerOrbit::clear_af2() {
  af2_ = 0;
  clear_has_af2();
}
 double KepplerOrbit::af2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.af2)
  return af2_;
}
 void KepplerOrbit::set_af2(double value) {
  set_has_af2();
  af2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.af2)
}

// optional double iode = 15;
bool KepplerOrbit::has_iode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void KepplerOrbit::set_has_iode() {
  _has_bits_[0] |= 0x00004000u;
}
void KepplerOrbit::clear_has_iode() {
  _has_bits_[0] &= ~0x00004000u;
}
void KepplerOrbit::clear_iode() {
  iode_ = 0;
  clear_has_iode();
}
 double KepplerOrbit::iode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.iode)
  return iode_;
}
 void KepplerOrbit::set_iode(double value) {
  set_has_iode();
  iode_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.iode)
}

// optional double deltan = 16;
bool KepplerOrbit::has_deltan() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void KepplerOrbit::set_has_deltan() {
  _has_bits_[0] |= 0x00008000u;
}
void KepplerOrbit::clear_has_deltan() {
  _has_bits_[0] &= ~0x00008000u;
}
void KepplerOrbit::clear_deltan() {
  deltan_ = 0;
  clear_has_deltan();
}
 double KepplerOrbit::deltan() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.deltan)
  return deltan_;
}
 void KepplerOrbit::set_deltan(double value) {
  set_has_deltan();
  deltan_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.deltan)
}

// optional double m0 = 17;
bool KepplerOrbit::has_m0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void KepplerOrbit::set_has_m0() {
  _has_bits_[0] |= 0x00010000u;
}
void KepplerOrbit::clear_has_m0() {
  _has_bits_[0] &= ~0x00010000u;
}
void KepplerOrbit::clear_m0() {
  m0_ = 0;
  clear_has_m0();
}
 double KepplerOrbit::m0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.m0)
  return m0_;
}
 void KepplerOrbit::set_m0(double value) {
  set_has_m0();
  m0_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.m0)
}

// optional double e = 18;
bool KepplerOrbit::has_e() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void KepplerOrbit::set_has_e() {
  _has_bits_[0] |= 0x00020000u;
}
void KepplerOrbit::clear_has_e() {
  _has_bits_[0] &= ~0x00020000u;
}
void KepplerOrbit::clear_e() {
  e_ = 0;
  clear_has_e();
}
 double KepplerOrbit::e() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.e)
  return e_;
}
 void KepplerOrbit::set_e(double value) {
  set_has_e();
  e_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.e)
}

// optional double roota = 19;
bool KepplerOrbit::has_roota() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void KepplerOrbit::set_has_roota() {
  _has_bits_[0] |= 0x00040000u;
}
void KepplerOrbit::clear_has_roota() {
  _has_bits_[0] &= ~0x00040000u;
}
void KepplerOrbit::clear_roota() {
  roota_ = 0;
  clear_has_roota();
}
 double KepplerOrbit::roota() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.roota)
  return roota_;
}
 void KepplerOrbit::set_roota(double value) {
  set_has_roota();
  roota_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.roota)
}

// optional double toe = 20;
bool KepplerOrbit::has_toe() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void KepplerOrbit::set_has_toe() {
  _has_bits_[0] |= 0x00080000u;
}
void KepplerOrbit::clear_has_toe() {
  _has_bits_[0] &= ~0x00080000u;
}
void KepplerOrbit::clear_toe() {
  toe_ = 0;
  clear_has_toe();
}
 double KepplerOrbit::toe() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.toe)
  return toe_;
}
 void KepplerOrbit::set_toe(double value) {
  set_has_toe();
  toe_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.toe)
}

// optional double toc = 21;
bool KepplerOrbit::has_toc() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void KepplerOrbit::set_has_toc() {
  _has_bits_[0] |= 0x00100000u;
}
void KepplerOrbit::clear_has_toc() {
  _has_bits_[0] &= ~0x00100000u;
}
void KepplerOrbit::clear_toc() {
  toc_ = 0;
  clear_has_toc();
}
 double KepplerOrbit::toc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.toc)
  return toc_;
}
 void KepplerOrbit::set_toc(double value) {
  set_has_toc();
  toc_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.toc)
}

// optional double cic = 22;
bool KepplerOrbit::has_cic() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void KepplerOrbit::set_has_cic() {
  _has_bits_[0] |= 0x00200000u;
}
void KepplerOrbit::clear_has_cic() {
  _has_bits_[0] &= ~0x00200000u;
}
void KepplerOrbit::clear_cic() {
  cic_ = 0;
  clear_has_cic();
}
 double KepplerOrbit::cic() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cic)
  return cic_;
}
 void KepplerOrbit::set_cic(double value) {
  set_has_cic();
  cic_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cic)
}

// optional double crc = 23;
bool KepplerOrbit::has_crc() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void KepplerOrbit::set_has_crc() {
  _has_bits_[0] |= 0x00400000u;
}
void KepplerOrbit::clear_has_crc() {
  _has_bits_[0] &= ~0x00400000u;
}
void KepplerOrbit::clear_crc() {
  crc_ = 0;
  clear_has_crc();
}
 double KepplerOrbit::crc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.crc)
  return crc_;
}
 void KepplerOrbit::set_crc(double value) {
  set_has_crc();
  crc_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.crc)
}

// optional double cis = 24;
bool KepplerOrbit::has_cis() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void KepplerOrbit::set_has_cis() {
  _has_bits_[0] |= 0x00800000u;
}
void KepplerOrbit::clear_has_cis() {
  _has_bits_[0] &= ~0x00800000u;
}
void KepplerOrbit::clear_cis() {
  cis_ = 0;
  clear_has_cis();
}
 double KepplerOrbit::cis() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cis)
  return cis_;
}
 void KepplerOrbit::set_cis(double value) {
  set_has_cis();
  cis_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cis)
}

// optional double crs = 25;
bool KepplerOrbit::has_crs() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void KepplerOrbit::set_has_crs() {
  _has_bits_[0] |= 0x01000000u;
}
void KepplerOrbit::clear_has_crs() {
  _has_bits_[0] &= ~0x01000000u;
}
void KepplerOrbit::clear_crs() {
  crs_ = 0;
  clear_has_crs();
}
 double KepplerOrbit::crs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.crs)
  return crs_;
}
 void KepplerOrbit::set_crs(double value) {
  set_has_crs();
  crs_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.crs)
}

// optional double cuc = 26;
bool KepplerOrbit::has_cuc() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void KepplerOrbit::set_has_cuc() {
  _has_bits_[0] |= 0x02000000u;
}
void KepplerOrbit::clear_has_cuc() {
  _has_bits_[0] &= ~0x02000000u;
}
void KepplerOrbit::clear_cuc() {
  cuc_ = 0;
  clear_has_cuc();
}
 double KepplerOrbit::cuc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cuc)
  return cuc_;
}
 void KepplerOrbit::set_cuc(double value) {
  set_has_cuc();
  cuc_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cuc)
}

// optional double cus = 27;
bool KepplerOrbit::has_cus() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void KepplerOrbit::set_has_cus() {
  _has_bits_[0] |= 0x04000000u;
}
void KepplerOrbit::clear_has_cus() {
  _has_bits_[0] &= ~0x04000000u;
}
void KepplerOrbit::clear_cus() {
  cus_ = 0;
  clear_has_cus();
}
 double KepplerOrbit::cus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cus)
  return cus_;
}
 void KepplerOrbit::set_cus(double value) {
  set_has_cus();
  cus_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cus)
}

// optional double omega0 = 28;
bool KepplerOrbit::has_omega0() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void KepplerOrbit::set_has_omega0() {
  _has_bits_[0] |= 0x08000000u;
}
void KepplerOrbit::clear_has_omega0() {
  _has_bits_[0] &= ~0x08000000u;
}
void KepplerOrbit::clear_omega0() {
  omega0_ = 0;
  clear_has_omega0();
}
 double KepplerOrbit::omega0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.omega0)
  return omega0_;
}
 void KepplerOrbit::set_omega0(double value) {
  set_has_omega0();
  omega0_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.omega0)
}

// optional double omega = 29;
bool KepplerOrbit::has_omega() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void KepplerOrbit::set_has_omega() {
  _has_bits_[0] |= 0x10000000u;
}
void KepplerOrbit::clear_has_omega() {
  _has_bits_[0] &= ~0x10000000u;
}
void KepplerOrbit::clear_omega() {
  omega_ = 0;
  clear_has_omega();
}
 double KepplerOrbit::omega() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.omega)
  return omega_;
}
 void KepplerOrbit::set_omega(double value) {
  set_has_omega();
  omega_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.omega)
}

// optional double i0 = 30;
bool KepplerOrbit::has_i0() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void KepplerOrbit::set_has_i0() {
  _has_bits_[0] |= 0x20000000u;
}
void KepplerOrbit::clear_has_i0() {
  _has_bits_[0] &= ~0x20000000u;
}
void KepplerOrbit::clear_i0() {
  i0_ = 0;
  clear_has_i0();
}
 double KepplerOrbit::i0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.i0)
  return i0_;
}
 void KepplerOrbit::set_i0(double value) {
  set_has_i0();
  i0_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.i0)
}

// optional double omegadot = 31;
bool KepplerOrbit::has_omegadot() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void KepplerOrbit::set_has_omegadot() {
  _has_bits_[0] |= 0x40000000u;
}
void KepplerOrbit::clear_has_omegadot() {
  _has_bits_[0] &= ~0x40000000u;
}
void KepplerOrbit::clear_omegadot() {
  omegadot_ = 0;
  clear_has_omegadot();
}
 double KepplerOrbit::omegadot() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.omegadot)
  return omegadot_;
}
 void KepplerOrbit::set_omegadot(double value) {
  set_has_omegadot();
  omegadot_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.omegadot)
}

// optional double idot = 32;
bool KepplerOrbit::has_idot() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void KepplerOrbit::set_has_idot() {
  _has_bits_[0] |= 0x80000000u;
}
void KepplerOrbit::clear_has_idot() {
  _has_bits_[0] &= ~0x80000000u;
}
void KepplerOrbit::clear_idot() {
  idot_ = 0;
  clear_has_idot();
}
 double KepplerOrbit::idot() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.idot)
  return idot_;
}
 void KepplerOrbit::set_idot(double value) {
  set_has_idot();
  idot_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.idot)
}

// optional double codesonL2channel = 33;
bool KepplerOrbit::has_codesonl2channel() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void KepplerOrbit::set_has_codesonl2channel() {
  _has_bits_[1] |= 0x00000001u;
}
void KepplerOrbit::clear_has_codesonl2channel() {
  _has_bits_[1] &= ~0x00000001u;
}
void KepplerOrbit::clear_codesonl2channel() {
  codesonl2channel_ = 0;
  clear_has_codesonl2channel();
}
 double KepplerOrbit::codesonl2channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.codesonL2channel)
  return codesonl2channel_;
}
 void KepplerOrbit::set_codesonl2channel(double value) {
  set_has_codesonl2channel();
  codesonl2channel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.codesonL2channel)
}

// optional uint32 L2Pdataflag = 34;
bool KepplerOrbit::has_l2pdataflag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void KepplerOrbit::set_has_l2pdataflag() {
  _has_bits_[1] |= 0x00000002u;
}
void KepplerOrbit::clear_has_l2pdataflag() {
  _has_bits_[1] &= ~0x00000002u;
}
void KepplerOrbit::clear_l2pdataflag() {
  l2pdataflag_ = 0u;
  clear_has_l2pdataflag();
}
 ::google::protobuf::uint32 KepplerOrbit::l2pdataflag() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.L2Pdataflag)
  return l2pdataflag_;
}
 void KepplerOrbit::set_l2pdataflag(::google::protobuf::uint32 value) {
  set_has_l2pdataflag();
  l2pdataflag_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.L2Pdataflag)
}

// optional uint32 accuracy = 35;
bool KepplerOrbit::has_accuracy() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void KepplerOrbit::set_has_accuracy() {
  _has_bits_[1] |= 0x00000004u;
}
void KepplerOrbit::clear_has_accuracy() {
  _has_bits_[1] &= ~0x00000004u;
}
void KepplerOrbit::clear_accuracy() {
  accuracy_ = 0u;
  clear_has_accuracy();
}
 ::google::protobuf::uint32 KepplerOrbit::accuracy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.accuracy)
  return accuracy_;
}
 void KepplerOrbit::set_accuracy(::google::protobuf::uint32 value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.accuracy)
}

// optional uint32 health = 36;
bool KepplerOrbit::has_health() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void KepplerOrbit::set_has_health() {
  _has_bits_[1] |= 0x00000008u;
}
void KepplerOrbit::clear_has_health() {
  _has_bits_[1] &= ~0x00000008u;
}
void KepplerOrbit::clear_health() {
  health_ = 0u;
  clear_has_health();
}
 ::google::protobuf::uint32 KepplerOrbit::health() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.health)
  return health_;
}
 void KepplerOrbit::set_health(::google::protobuf::uint32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.health)
}

// optional double tgd = 37;
bool KepplerOrbit::has_tgd() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void KepplerOrbit::set_has_tgd() {
  _has_bits_[1] |= 0x00000010u;
}
void KepplerOrbit::clear_has_tgd() {
  _has_bits_[1] &= ~0x00000010u;
}
void KepplerOrbit::clear_tgd() {
  tgd_ = 0;
  clear_has_tgd();
}
 double KepplerOrbit::tgd() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.tgd)
  return tgd_;
}
 void KepplerOrbit::set_tgd(double value) {
  set_has_tgd();
  tgd_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.tgd)
}

// optional double iodc = 38;
bool KepplerOrbit::has_iodc() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void KepplerOrbit::set_has_iodc() {
  _has_bits_[1] |= 0x00000020u;
}
void KepplerOrbit::clear_has_iodc() {
  _has_bits_[1] &= ~0x00000020u;
}
void KepplerOrbit::clear_iodc() {
  iodc_ = 0;
  clear_has_iodc();
}
 double KepplerOrbit::iodc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.iodc)
  return iodc_;
}
 void KepplerOrbit::set_iodc(double value) {
  set_has_iodc();
  iodc_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.iodc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlonassOrbit::kGnssTypeFieldNumber;
const int GlonassOrbit::kSlotPrnFieldNumber;
const int GlonassOrbit::kGnssTimeTypeFieldNumber;
const int GlonassOrbit::kToeFieldNumber;
const int GlonassOrbit::kYearFieldNumber;
const int GlonassOrbit::kMonthFieldNumber;
const int GlonassOrbit::kDayFieldNumber;
const int GlonassOrbit::kHourFieldNumber;
const int GlonassOrbit::kMinuteFieldNumber;
const int GlonassOrbit::kSecondSFieldNumber;
const int GlonassOrbit::kFrequencyNoFieldNumber;
const int GlonassOrbit::kWeekNumFieldNumber;
const int GlonassOrbit::kWeekSecondSFieldNumber;
const int GlonassOrbit::kTkFieldNumber;
const int GlonassOrbit::kClockOffsetFieldNumber;
const int GlonassOrbit::kClockDriftFieldNumber;
const int GlonassOrbit::kHealthFieldNumber;
const int GlonassOrbit::kPositionXFieldNumber;
const int GlonassOrbit::kPositionYFieldNumber;
const int GlonassOrbit::kPositionZFieldNumber;
const int GlonassOrbit::kVelocityXFieldNumber;
const int GlonassOrbit::kVelocityYFieldNumber;
const int GlonassOrbit::kVelocityZFieldNumber;
const int GlonassOrbit::kAccelerateXFieldNumber;
const int GlonassOrbit::kAccelerateYFieldNumber;
const int GlonassOrbit::kAccelerateZFieldNumber;
const int GlonassOrbit::kInforAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlonassOrbit::GlonassOrbit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GlonassOrbit)
}

void GlonassOrbit::InitAsDefaultInstance() {
}

GlonassOrbit::GlonassOrbit(const GlonassOrbit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GlonassOrbit)
}

void GlonassOrbit::SharedCtor() {
  _cached_size_ = 0;
  gnss_type_ = 3;
  slot_prn_ = 0u;
  gnss_time_type_ = 3;
  toe_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  hour_ = 0u;
  minute_ = 0u;
  second_s_ = 0;
  frequency_no_ = 0;
  week_num_ = 0u;
  week_second_s_ = 0;
  tk_ = 0;
  clock_offset_ = 0;
  clock_drift_ = 0;
  health_ = 0u;
  position_x_ = 0;
  position_y_ = 0;
  position_z_ = 0;
  velocity_x_ = 0;
  velocity_y_ = 0;
  velocity_z_ = 0;
  accelerate_x_ = 0;
  accelerate_y_ = 0;
  accelerate_z_ = 0;
  infor_age_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlonassOrbit::~GlonassOrbit() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GlonassOrbit)
  SharedDtor();
}

void GlonassOrbit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlonassOrbit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlonassOrbit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlonassOrbit_descriptor_;
}

const GlonassOrbit& GlonassOrbit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  return *default_instance_;
}

GlonassOrbit* GlonassOrbit::default_instance_ = NULL;

GlonassOrbit* GlonassOrbit::New(::google::protobuf::Arena* arena) const {
  GlonassOrbit* n = new GlonassOrbit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlonassOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GlonassOrbit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GlonassOrbit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GlonassOrbit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(slot_prn_, toe_);
    ZR_(year_, hour_);
    gnss_type_ = 3;
    gnss_time_type_ = 3;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(minute_, clock_drift_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(position_x_, accelerate_x_);
    health_ = 0u;
  }
  ZR_(accelerate_y_, infor_age_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GlonassOrbit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.GlonassOrbit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_prn;
        break;
      }

      // optional uint32 slot_prn = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_prn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_prn_)));
          set_has_slot_prn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gnss_time_type;
        break;
      }

      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
      case 3: {
        if (tag == 24) {
         parse_gnss_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::apollo::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_toe;
        break;
      }

      // optional double toe = 4;
      case 4: {
        if (tag == 33) {
         parse_toe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toe_)));
          set_has_toe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_year;
        break;
      }

      // optional uint32 year = 5;
      case 5: {
        if (tag == 40) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_month;
        break;
      }

      // optional uint32 month = 6;
      case 6: {
        if (tag == 48) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_day;
        break;
      }

      // optional uint32 day = 7;
      case 7: {
        if (tag == 56) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hour;
        break;
      }

      // optional uint32 hour = 8;
      case 8: {
        if (tag == 64) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_minute;
        break;
      }

      // optional uint32 minute = 9;
      case 9: {
        if (tag == 72) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_second_s;
        break;
      }

      // optional double second_s = 10;
      case 10: {
        if (tag == 81) {
         parse_second_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_s_)));
          set_has_second_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_frequency_no;
        break;
      }

      // optional int32 frequency_no = 11;
      case 11: {
        if (tag == 88) {
         parse_frequency_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_no_)));
          set_has_frequency_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_week_num;
        break;
      }

      // optional uint32 week_num = 12;
      case 12: {
        if (tag == 96) {
         parse_week_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_num_)));
          set_has_week_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_week_second_s;
        break;
      }

      // optional double week_second_s = 13;
      case 13: {
        if (tag == 105) {
         parse_week_second_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &week_second_s_)));
          set_has_week_second_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_tk;
        break;
      }

      // optional double tk = 14;
      case 14: {
        if (tag == 113) {
         parse_tk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tk_)));
          set_has_tk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_clock_offset;
        break;
      }

      // optional double clock_offset = 15;
      case 15: {
        if (tag == 121) {
         parse_clock_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clock_offset_)));
          set_has_clock_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_clock_drift;
        break;
      }

      // optional double clock_drift = 16;
      case 16: {
        if (tag == 129) {
         parse_clock_drift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clock_drift_)));
          set_has_clock_drift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_health;
        break;
      }

      // optional uint32 health = 17;
      case 17: {
        if (tag == 136) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_position_x;
        break;
      }

      // optional double position_x = 18;
      case 18: {
        if (tag == 145) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_position_y;
        break;
      }

      // optional double position_y = 19;
      case 19: {
        if (tag == 153) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_position_z;
        break;
      }

      // optional double position_z = 20;
      case 20: {
        if (tag == 161) {
         parse_position_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
          set_has_position_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_velocity_x;
        break;
      }

      // optional double velocity_x = 21;
      case 21: {
        if (tag == 169) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_velocity_y;
        break;
      }

      // optional double velocity_y = 22;
      case 22: {
        if (tag == 177) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_velocity_z;
        break;
      }

      // optional double velocity_z = 23;
      case 23: {
        if (tag == 185) {
         parse_velocity_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_z_)));
          set_has_velocity_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_accelerate_x;
        break;
      }

      // optional double accelerate_x = 24;
      case 24: {
        if (tag == 193) {
         parse_accelerate_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_x_)));
          set_has_accelerate_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_accelerate_y;
        break;
      }

      // optional double accelerate_y = 25;
      case 25: {
        if (tag == 201) {
         parse_accelerate_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_y_)));
          set_has_accelerate_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_accelerate_z;
        break;
      }

      // optional double accelerate_z = 26;
      case 26: {
        if (tag == 209) {
         parse_accelerate_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_z_)));
          set_has_accelerate_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_infor_age;
        break;
      }

      // optional double infor_age = 27;
      case 27: {
        if (tag == 217) {
         parse_infor_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &infor_age_)));
          set_has_infor_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.GlonassOrbit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.GlonassOrbit)
  return false;
#undef DO_
}

void GlonassOrbit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.GlonassOrbit)
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (has_gnss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  // optional uint32 slot_prn = 2;
  if (has_slot_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_prn(), output);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  if (has_gnss_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_time_type(), output);
  }

  // optional double toe = 4;
  if (has_toe()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->toe(), output);
  }

  // optional uint32 year = 5;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->year(), output);
  }

  // optional uint32 month = 6;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->month(), output);
  }

  // optional uint32 day = 7;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->day(), output);
  }

  // optional uint32 hour = 8;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hour(), output);
  }

  // optional uint32 minute = 9;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->minute(), output);
  }

  // optional double second_s = 10;
  if (has_second_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->second_s(), output);
  }

  // optional int32 frequency_no = 11;
  if (has_frequency_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->frequency_no(), output);
  }

  // optional uint32 week_num = 12;
  if (has_week_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->week_num(), output);
  }

  // optional double week_second_s = 13;
  if (has_week_second_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->week_second_s(), output);
  }

  // optional double tk = 14;
  if (has_tk()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->tk(), output);
  }

  // optional double clock_offset = 15;
  if (has_clock_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->clock_offset(), output);
  }

  // optional double clock_drift = 16;
  if (has_clock_drift()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->clock_drift(), output);
  }

  // optional uint32 health = 17;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->health(), output);
  }

  // optional double position_x = 18;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->position_x(), output);
  }

  // optional double position_y = 19;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->position_y(), output);
  }

  // optional double position_z = 20;
  if (has_position_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->position_z(), output);
  }

  // optional double velocity_x = 21;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->velocity_x(), output);
  }

  // optional double velocity_y = 22;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->velocity_y(), output);
  }

  // optional double velocity_z = 23;
  if (has_velocity_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->velocity_z(), output);
  }

  // optional double accelerate_x = 24;
  if (has_accelerate_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->accelerate_x(), output);
  }

  // optional double accelerate_y = 25;
  if (has_accelerate_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->accelerate_y(), output);
  }

  // optional double accelerate_z = 26;
  if (has_accelerate_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->accelerate_z(), output);
  }

  // optional double infor_age = 27;
  if (has_infor_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->infor_age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.GlonassOrbit)
}

::google::protobuf::uint8* GlonassOrbit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GlonassOrbit)
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (has_gnss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  // optional uint32 slot_prn = 2;
  if (has_slot_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  if (has_gnss_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_time_type(), target);
  }

  // optional double toe = 4;
  if (has_toe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->toe(), target);
  }

  // optional uint32 year = 5;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->year(), target);
  }

  // optional uint32 month = 6;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->month(), target);
  }

  // optional uint32 day = 7;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->day(), target);
  }

  // optional uint32 hour = 8;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hour(), target);
  }

  // optional uint32 minute = 9;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->minute(), target);
  }

  // optional double second_s = 10;
  if (has_second_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->second_s(), target);
  }

  // optional int32 frequency_no = 11;
  if (has_frequency_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->frequency_no(), target);
  }

  // optional uint32 week_num = 12;
  if (has_week_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->week_num(), target);
  }

  // optional double week_second_s = 13;
  if (has_week_second_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->week_second_s(), target);
  }

  // optional double tk = 14;
  if (has_tk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->tk(), target);
  }

  // optional double clock_offset = 15;
  if (has_clock_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->clock_offset(), target);
  }

  // optional double clock_drift = 16;
  if (has_clock_drift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->clock_drift(), target);
  }

  // optional uint32 health = 17;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->health(), target);
  }

  // optional double position_x = 18;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->position_x(), target);
  }

  // optional double position_y = 19;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->position_y(), target);
  }

  // optional double position_z = 20;
  if (has_position_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->position_z(), target);
  }

  // optional double velocity_x = 21;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->velocity_x(), target);
  }

  // optional double velocity_y = 22;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->velocity_y(), target);
  }

  // optional double velocity_z = 23;
  if (has_velocity_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->velocity_z(), target);
  }

  // optional double accelerate_x = 24;
  if (has_accelerate_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->accelerate_x(), target);
  }

  // optional double accelerate_y = 25;
  if (has_accelerate_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->accelerate_y(), target);
  }

  // optional double accelerate_z = 26;
  if (has_accelerate_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->accelerate_z(), target);
  }

  // optional double infor_age = 27;
  if (has_infor_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->infor_age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GlonassOrbit)
  return target;
}

int GlonassOrbit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GlonassOrbit)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

    // optional uint32 slot_prn = 2;
    if (has_slot_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_prn());
    }

    // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
    if (has_gnss_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
    }

    // optional double toe = 4;
    if (has_toe()) {
      total_size += 1 + 8;
    }

    // optional uint32 year = 5;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 6;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 7;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 8;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 minute = 9;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // optional double second_s = 10;
    if (has_second_s()) {
      total_size += 1 + 8;
    }

    // optional int32 frequency_no = 11;
    if (has_frequency_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frequency_no());
    }

    // optional uint32 week_num = 12;
    if (has_week_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_num());
    }

    // optional double week_second_s = 13;
    if (has_week_second_s()) {
      total_size += 1 + 8;
    }

    // optional double tk = 14;
    if (has_tk()) {
      total_size += 1 + 8;
    }

    // optional double clock_offset = 15;
    if (has_clock_offset()) {
      total_size += 1 + 8;
    }

    // optional double clock_drift = 16;
    if (has_clock_drift()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 health = 17;
    if (has_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional double position_x = 18;
    if (has_position_x()) {
      total_size += 2 + 8;
    }

    // optional double position_y = 19;
    if (has_position_y()) {
      total_size += 2 + 8;
    }

    // optional double position_z = 20;
    if (has_position_z()) {
      total_size += 2 + 8;
    }

    // optional double velocity_x = 21;
    if (has_velocity_x()) {
      total_size += 2 + 8;
    }

    // optional double velocity_y = 22;
    if (has_velocity_y()) {
      total_size += 2 + 8;
    }

    // optional double velocity_z = 23;
    if (has_velocity_z()) {
      total_size += 2 + 8;
    }

    // optional double accelerate_x = 24;
    if (has_accelerate_x()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional double accelerate_y = 25;
    if (has_accelerate_y()) {
      total_size += 2 + 8;
    }

    // optional double accelerate_z = 26;
    if (has_accelerate_z()) {
      total_size += 2 + 8;
    }

    // optional double infor_age = 27;
    if (has_infor_age()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlonassOrbit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GlonassOrbit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GlonassOrbit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GlonassOrbit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GlonassOrbit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GlonassOrbit)
    MergeFrom(*source);
  }
}

void GlonassOrbit::MergeFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GlonassOrbit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gnss_type()) {
      set_gnss_type(from.gnss_type());
    }
    if (from.has_slot_prn()) {
      set_slot_prn(from.slot_prn());
    }
    if (from.has_gnss_time_type()) {
      set_gnss_time_type(from.gnss_time_type());
    }
    if (from.has_toe()) {
      set_toe(from.toe());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_second_s()) {
      set_second_s(from.second_s());
    }
    if (from.has_frequency_no()) {
      set_frequency_no(from.frequency_no());
    }
    if (from.has_week_num()) {
      set_week_num(from.week_num());
    }
    if (from.has_week_second_s()) {
      set_week_second_s(from.week_second_s());
    }
    if (from.has_tk()) {
      set_tk(from.tk());
    }
    if (from.has_clock_offset()) {
      set_clock_offset(from.clock_offset());
    }
    if (from.has_clock_drift()) {
      set_clock_drift(from.clock_drift());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_position_z()) {
      set_position_z(from.position_z());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
    if (from.has_velocity_z()) {
      set_velocity_z(from.velocity_z());
    }
    if (from.has_accelerate_x()) {
      set_accelerate_x(from.accelerate_x());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_accelerate_y()) {
      set_accelerate_y(from.accelerate_y());
    }
    if (from.has_accelerate_z()) {
      set_accelerate_z(from.accelerate_z());
    }
    if (from.has_infor_age()) {
      set_infor_age(from.infor_age());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GlonassOrbit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GlonassOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlonassOrbit::CopyFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GlonassOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlonassOrbit::IsInitialized() const {

  return true;
}

void GlonassOrbit::Swap(GlonassOrbit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlonassOrbit::InternalSwap(GlonassOrbit* other) {
  std::swap(gnss_type_, other->gnss_type_);
  std::swap(slot_prn_, other->slot_prn_);
  std::swap(gnss_time_type_, other->gnss_time_type_);
  std::swap(toe_, other->toe_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_s_, other->second_s_);
  std::swap(frequency_no_, other->frequency_no_);
  std::swap(week_num_, other->week_num_);
  std::swap(week_second_s_, other->week_second_s_);
  std::swap(tk_, other->tk_);
  std::swap(clock_offset_, other->clock_offset_);
  std::swap(clock_drift_, other->clock_drift_);
  std::swap(health_, other->health_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(position_z_, other->position_z_);
  std::swap(velocity_x_, other->velocity_x_);
  std::swap(velocity_y_, other->velocity_y_);
  std::swap(velocity_z_, other->velocity_z_);
  std::swap(accelerate_x_, other->accelerate_x_);
  std::swap(accelerate_y_, other->accelerate_y_);
  std::swap(accelerate_z_, other->accelerate_z_);
  std::swap(infor_age_, other->infor_age_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlonassOrbit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlonassOrbit_descriptor_;
  metadata.reflection = GlonassOrbit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlonassOrbit

// optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
bool GlonassOrbit::has_gnss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GlonassOrbit::set_has_gnss_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GlonassOrbit::clear_has_gnss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GlonassOrbit::clear_gnss_type() {
  gnss_type_ = 3;
  clear_has_gnss_type();
}
 ::apollo::drivers::gnss::GnssType GlonassOrbit::gnss_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.gnss_type)
  return static_cast< ::apollo::drivers::gnss::GnssType >(gnss_type_);
}
 void GlonassOrbit::set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  set_has_gnss_type();
  gnss_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.gnss_type)
}

// optional uint32 slot_prn = 2;
bool GlonassOrbit::has_slot_prn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GlonassOrbit::set_has_slot_prn() {
  _has_bits_[0] |= 0x00000002u;
}
void GlonassOrbit::clear_has_slot_prn() {
  _has_bits_[0] &= ~0x00000002u;
}
void GlonassOrbit::clear_slot_prn() {
  slot_prn_ = 0u;
  clear_has_slot_prn();
}
 ::google::protobuf::uint32 GlonassOrbit::slot_prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.slot_prn)
  return slot_prn_;
}
 void GlonassOrbit::set_slot_prn(::google::protobuf::uint32 value) {
  set_has_slot_prn();
  slot_prn_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.slot_prn)
}

// optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
bool GlonassOrbit::has_gnss_time_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GlonassOrbit::set_has_gnss_time_type() {
  _has_bits_[0] |= 0x00000004u;
}
void GlonassOrbit::clear_has_gnss_time_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void GlonassOrbit::clear_gnss_time_type() {
  gnss_time_type_ = 3;
  clear_has_gnss_time_type();
}
 ::apollo::drivers::gnss::GnssTimeType GlonassOrbit::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.gnss_time_type)
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
 void GlonassOrbit::set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_gnss_time_type();
  gnss_time_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.gnss_time_type)
}

// optional double toe = 4;
bool GlonassOrbit::has_toe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GlonassOrbit::set_has_toe() {
  _has_bits_[0] |= 0x00000008u;
}
void GlonassOrbit::clear_has_toe() {
  _has_bits_[0] &= ~0x00000008u;
}
void GlonassOrbit::clear_toe() {
  toe_ = 0;
  clear_has_toe();
}
 double GlonassOrbit::toe() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.toe)
  return toe_;
}
 void GlonassOrbit::set_toe(double value) {
  set_has_toe();
  toe_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.toe)
}

// optional uint32 year = 5;
bool GlonassOrbit::has_year() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GlonassOrbit::set_has_year() {
  _has_bits_[0] |= 0x00000010u;
}
void GlonassOrbit::clear_has_year() {
  _has_bits_[0] &= ~0x00000010u;
}
void GlonassOrbit::clear_year() {
  year_ = 0u;
  clear_has_year();
}
 ::google::protobuf::uint32 GlonassOrbit::year() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.year)
  return year_;
}
 void GlonassOrbit::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.year)
}

// optional uint32 month = 6;
bool GlonassOrbit::has_month() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GlonassOrbit::set_has_month() {
  _has_bits_[0] |= 0x00000020u;
}
void GlonassOrbit::clear_has_month() {
  _has_bits_[0] &= ~0x00000020u;
}
void GlonassOrbit::clear_month() {
  month_ = 0u;
  clear_has_month();
}
 ::google::protobuf::uint32 GlonassOrbit::month() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.month)
  return month_;
}
 void GlonassOrbit::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.month)
}

// optional uint32 day = 7;
bool GlonassOrbit::has_day() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GlonassOrbit::set_has_day() {
  _has_bits_[0] |= 0x00000040u;
}
void GlonassOrbit::clear_has_day() {
  _has_bits_[0] &= ~0x00000040u;
}
void GlonassOrbit::clear_day() {
  day_ = 0u;
  clear_has_day();
}
 ::google::protobuf::uint32 GlonassOrbit::day() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.day)
  return day_;
}
 void GlonassOrbit::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.day)
}

// optional uint32 hour = 8;
bool GlonassOrbit::has_hour() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GlonassOrbit::set_has_hour() {
  _has_bits_[0] |= 0x00000080u;
}
void GlonassOrbit::clear_has_hour() {
  _has_bits_[0] &= ~0x00000080u;
}
void GlonassOrbit::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
 ::google::protobuf::uint32 GlonassOrbit::hour() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.hour)
  return hour_;
}
 void GlonassOrbit::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.hour)
}

// optional uint32 minute = 9;
bool GlonassOrbit::has_minute() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GlonassOrbit::set_has_minute() {
  _has_bits_[0] |= 0x00000100u;
}
void GlonassOrbit::clear_has_minute() {
  _has_bits_[0] &= ~0x00000100u;
}
void GlonassOrbit::clear_minute() {
  minute_ = 0u;
  clear_has_minute();
}
 ::google::protobuf::uint32 GlonassOrbit::minute() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.minute)
  return minute_;
}
 void GlonassOrbit::set_minute(::google::protobuf::uint32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.minute)
}

// optional double second_s = 10;
bool GlonassOrbit::has_second_s() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GlonassOrbit::set_has_second_s() {
  _has_bits_[0] |= 0x00000200u;
}
void GlonassOrbit::clear_has_second_s() {
  _has_bits_[0] &= ~0x00000200u;
}
void GlonassOrbit::clear_second_s() {
  second_s_ = 0;
  clear_has_second_s();
}
 double GlonassOrbit::second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.second_s)
  return second_s_;
}
 void GlonassOrbit::set_second_s(double value) {
  set_has_second_s();
  second_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.second_s)
}

// optional int32 frequency_no = 11;
bool GlonassOrbit::has_frequency_no() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GlonassOrbit::set_has_frequency_no() {
  _has_bits_[0] |= 0x00000400u;
}
void GlonassOrbit::clear_has_frequency_no() {
  _has_bits_[0] &= ~0x00000400u;
}
void GlonassOrbit::clear_frequency_no() {
  frequency_no_ = 0;
  clear_has_frequency_no();
}
 ::google::protobuf::int32 GlonassOrbit::frequency_no() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.frequency_no)
  return frequency_no_;
}
 void GlonassOrbit::set_frequency_no(::google::protobuf::int32 value) {
  set_has_frequency_no();
  frequency_no_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.frequency_no)
}

// optional uint32 week_num = 12;
bool GlonassOrbit::has_week_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GlonassOrbit::set_has_week_num() {
  _has_bits_[0] |= 0x00000800u;
}
void GlonassOrbit::clear_has_week_num() {
  _has_bits_[0] &= ~0x00000800u;
}
void GlonassOrbit::clear_week_num() {
  week_num_ = 0u;
  clear_has_week_num();
}
 ::google::protobuf::uint32 GlonassOrbit::week_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.week_num)
  return week_num_;
}
 void GlonassOrbit::set_week_num(::google::protobuf::uint32 value) {
  set_has_week_num();
  week_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.week_num)
}

// optional double week_second_s = 13;
bool GlonassOrbit::has_week_second_s() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GlonassOrbit::set_has_week_second_s() {
  _has_bits_[0] |= 0x00001000u;
}
void GlonassOrbit::clear_has_week_second_s() {
  _has_bits_[0] &= ~0x00001000u;
}
void GlonassOrbit::clear_week_second_s() {
  week_second_s_ = 0;
  clear_has_week_second_s();
}
 double GlonassOrbit::week_second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.week_second_s)
  return week_second_s_;
}
 void GlonassOrbit::set_week_second_s(double value) {
  set_has_week_second_s();
  week_second_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.week_second_s)
}

// optional double tk = 14;
bool GlonassOrbit::has_tk() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GlonassOrbit::set_has_tk() {
  _has_bits_[0] |= 0x00002000u;
}
void GlonassOrbit::clear_has_tk() {
  _has_bits_[0] &= ~0x00002000u;
}
void GlonassOrbit::clear_tk() {
  tk_ = 0;
  clear_has_tk();
}
 double GlonassOrbit::tk() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.tk)
  return tk_;
}
 void GlonassOrbit::set_tk(double value) {
  set_has_tk();
  tk_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.tk)
}

// optional double clock_offset = 15;
bool GlonassOrbit::has_clock_offset() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GlonassOrbit::set_has_clock_offset() {
  _has_bits_[0] |= 0x00004000u;
}
void GlonassOrbit::clear_has_clock_offset() {
  _has_bits_[0] &= ~0x00004000u;
}
void GlonassOrbit::clear_clock_offset() {
  clock_offset_ = 0;
  clear_has_clock_offset();
}
 double GlonassOrbit::clock_offset() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.clock_offset)
  return clock_offset_;
}
 void GlonassOrbit::set_clock_offset(double value) {
  set_has_clock_offset();
  clock_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.clock_offset)
}

// optional double clock_drift = 16;
bool GlonassOrbit::has_clock_drift() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GlonassOrbit::set_has_clock_drift() {
  _has_bits_[0] |= 0x00008000u;
}
void GlonassOrbit::clear_has_clock_drift() {
  _has_bits_[0] &= ~0x00008000u;
}
void GlonassOrbit::clear_clock_drift() {
  clock_drift_ = 0;
  clear_has_clock_drift();
}
 double GlonassOrbit::clock_drift() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.clock_drift)
  return clock_drift_;
}
 void GlonassOrbit::set_clock_drift(double value) {
  set_has_clock_drift();
  clock_drift_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.clock_drift)
}

// optional uint32 health = 17;
bool GlonassOrbit::has_health() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void GlonassOrbit::set_has_health() {
  _has_bits_[0] |= 0x00010000u;
}
void GlonassOrbit::clear_has_health() {
  _has_bits_[0] &= ~0x00010000u;
}
void GlonassOrbit::clear_health() {
  health_ = 0u;
  clear_has_health();
}
 ::google::protobuf::uint32 GlonassOrbit::health() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.health)
  return health_;
}
 void GlonassOrbit::set_health(::google::protobuf::uint32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.health)
}

// optional double position_x = 18;
bool GlonassOrbit::has_position_x() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void GlonassOrbit::set_has_position_x() {
  _has_bits_[0] |= 0x00020000u;
}
void GlonassOrbit::clear_has_position_x() {
  _has_bits_[0] &= ~0x00020000u;
}
void GlonassOrbit::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
 double GlonassOrbit::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.position_x)
  return position_x_;
}
 void GlonassOrbit::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.position_x)
}

// optional double position_y = 19;
bool GlonassOrbit::has_position_y() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void GlonassOrbit::set_has_position_y() {
  _has_bits_[0] |= 0x00040000u;
}
void GlonassOrbit::clear_has_position_y() {
  _has_bits_[0] &= ~0x00040000u;
}
void GlonassOrbit::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
 double GlonassOrbit::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.position_y)
  return position_y_;
}
 void GlonassOrbit::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.position_y)
}

// optional double position_z = 20;
bool GlonassOrbit::has_position_z() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void GlonassOrbit::set_has_position_z() {
  _has_bits_[0] |= 0x00080000u;
}
void GlonassOrbit::clear_has_position_z() {
  _has_bits_[0] &= ~0x00080000u;
}
void GlonassOrbit::clear_position_z() {
  position_z_ = 0;
  clear_has_position_z();
}
 double GlonassOrbit::position_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.position_z)
  return position_z_;
}
 void GlonassOrbit::set_position_z(double value) {
  set_has_position_z();
  position_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.position_z)
}

// optional double velocity_x = 21;
bool GlonassOrbit::has_velocity_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void GlonassOrbit::set_has_velocity_x() {
  _has_bits_[0] |= 0x00100000u;
}
void GlonassOrbit::clear_has_velocity_x() {
  _has_bits_[0] &= ~0x00100000u;
}
void GlonassOrbit::clear_velocity_x() {
  velocity_x_ = 0;
  clear_has_velocity_x();
}
 double GlonassOrbit::velocity_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.velocity_x)
  return velocity_x_;
}
 void GlonassOrbit::set_velocity_x(double value) {
  set_has_velocity_x();
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.velocity_x)
}

// optional double velocity_y = 22;
bool GlonassOrbit::has_velocity_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void GlonassOrbit::set_has_velocity_y() {
  _has_bits_[0] |= 0x00200000u;
}
void GlonassOrbit::clear_has_velocity_y() {
  _has_bits_[0] &= ~0x00200000u;
}
void GlonassOrbit::clear_velocity_y() {
  velocity_y_ = 0;
  clear_has_velocity_y();
}
 double GlonassOrbit::velocity_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.velocity_y)
  return velocity_y_;
}
 void GlonassOrbit::set_velocity_y(double value) {
  set_has_velocity_y();
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.velocity_y)
}

// optional double velocity_z = 23;
bool GlonassOrbit::has_velocity_z() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void GlonassOrbit::set_has_velocity_z() {
  _has_bits_[0] |= 0x00400000u;
}
void GlonassOrbit::clear_has_velocity_z() {
  _has_bits_[0] &= ~0x00400000u;
}
void GlonassOrbit::clear_velocity_z() {
  velocity_z_ = 0;
  clear_has_velocity_z();
}
 double GlonassOrbit::velocity_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.velocity_z)
  return velocity_z_;
}
 void GlonassOrbit::set_velocity_z(double value) {
  set_has_velocity_z();
  velocity_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.velocity_z)
}

// optional double accelerate_x = 24;
bool GlonassOrbit::has_accelerate_x() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void GlonassOrbit::set_has_accelerate_x() {
  _has_bits_[0] |= 0x00800000u;
}
void GlonassOrbit::clear_has_accelerate_x() {
  _has_bits_[0] &= ~0x00800000u;
}
void GlonassOrbit::clear_accelerate_x() {
  accelerate_x_ = 0;
  clear_has_accelerate_x();
}
 double GlonassOrbit::accelerate_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.accelerate_x)
  return accelerate_x_;
}
 void GlonassOrbit::set_accelerate_x(double value) {
  set_has_accelerate_x();
  accelerate_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.accelerate_x)
}

// optional double accelerate_y = 25;
bool GlonassOrbit::has_accelerate_y() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void GlonassOrbit::set_has_accelerate_y() {
  _has_bits_[0] |= 0x01000000u;
}
void GlonassOrbit::clear_has_accelerate_y() {
  _has_bits_[0] &= ~0x01000000u;
}
void GlonassOrbit::clear_accelerate_y() {
  accelerate_y_ = 0;
  clear_has_accelerate_y();
}
 double GlonassOrbit::accelerate_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.accelerate_y)
  return accelerate_y_;
}
 void GlonassOrbit::set_accelerate_y(double value) {
  set_has_accelerate_y();
  accelerate_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.accelerate_y)
}

// optional double accelerate_z = 26;
bool GlonassOrbit::has_accelerate_z() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void GlonassOrbit::set_has_accelerate_z() {
  _has_bits_[0] |= 0x02000000u;
}
void GlonassOrbit::clear_has_accelerate_z() {
  _has_bits_[0] &= ~0x02000000u;
}
void GlonassOrbit::clear_accelerate_z() {
  accelerate_z_ = 0;
  clear_has_accelerate_z();
}
 double GlonassOrbit::accelerate_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.accelerate_z)
  return accelerate_z_;
}
 void GlonassOrbit::set_accelerate_z(double value) {
  set_has_accelerate_z();
  accelerate_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.accelerate_z)
}

// optional double infor_age = 27;
bool GlonassOrbit::has_infor_age() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void GlonassOrbit::set_has_infor_age() {
  _has_bits_[0] |= 0x04000000u;
}
void GlonassOrbit::clear_has_infor_age() {
  _has_bits_[0] &= ~0x04000000u;
}
void GlonassOrbit::clear_infor_age() {
  infor_age_ = 0;
  clear_has_infor_age();
}
 double GlonassOrbit::infor_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.infor_age)
  return infor_age_;
}
 void GlonassOrbit::set_infor_age(double value) {
  set_has_infor_age();
  infor_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.infor_age)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssEphemeris::kGnssTypeFieldNumber;
const int GnssEphemeris::kKepplerOrbitFieldNumber;
const int GnssEphemeris::kGlonassOrbitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssEphemeris::GnssEphemeris()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssEphemeris)
}

void GnssEphemeris::InitAsDefaultInstance() {
  keppler_orbit_ = const_cast< ::apollo::drivers::gnss::KepplerOrbit*>(&::apollo::drivers::gnss::KepplerOrbit::default_instance());
  glonass_orbit_ = const_cast< ::apollo::drivers::gnss::GlonassOrbit*>(&::apollo::drivers::gnss::GlonassOrbit::default_instance());
}

GnssEphemeris::GnssEphemeris(const GnssEphemeris& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssEphemeris)
}

void GnssEphemeris::SharedCtor() {
  _cached_size_ = 0;
  gnss_type_ = 3;
  keppler_orbit_ = NULL;
  glonass_orbit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GnssEphemeris::~GnssEphemeris() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssEphemeris)
  SharedDtor();
}

void GnssEphemeris::SharedDtor() {
  if (this != default_instance_) {
    delete keppler_orbit_;
    delete glonass_orbit_;
  }
}

void GnssEphemeris::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssEphemeris::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssEphemeris_descriptor_;
}

const GnssEphemeris& GnssEphemeris::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fraw_5fobservation_2eproto();
  return *default_instance_;
}

GnssEphemeris* GnssEphemeris::default_instance_ = NULL;

GnssEphemeris* GnssEphemeris::New(::google::protobuf::Arena* arena) const {
  GnssEphemeris* n = new GnssEphemeris;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssEphemeris::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssEphemeris)
  if (_has_bits_[0 / 32] & 7u) {
    gnss_type_ = 3;
    if (has_keppler_orbit()) {
      if (keppler_orbit_ != NULL) keppler_orbit_->::apollo::drivers::gnss::KepplerOrbit::Clear();
    }
    if (has_glonass_orbit()) {
      if (glonass_orbit_ != NULL) glonass_orbit_->::apollo::drivers::gnss::GlonassOrbit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GnssEphemeris::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.GnssEphemeris)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keppler_orbit;
        break;
      }

      // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
      case 2: {
        if (tag == 18) {
         parse_keppler_orbit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keppler_orbit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_glonass_orbit;
        break;
      }

      // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
      case 3: {
        if (tag == 26) {
         parse_glonass_orbit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glonass_orbit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.GnssEphemeris)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.GnssEphemeris)
  return false;
#undef DO_
}

void GnssEphemeris::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.GnssEphemeris)
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (has_gnss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  if (has_keppler_orbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->keppler_orbit_, output);
  }

  // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  if (has_glonass_orbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->glonass_orbit_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.GnssEphemeris)
}

::google::protobuf::uint8* GnssEphemeris::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssEphemeris)
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (has_gnss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  if (has_keppler_orbit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->keppler_orbit_, false, target);
  }

  // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  if (has_glonass_orbit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->glonass_orbit_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssEphemeris)
  return target;
}

int GnssEphemeris::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssEphemeris)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

    // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
    if (has_keppler_orbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keppler_orbit_);
    }

    // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
    if (has_glonass_orbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->glonass_orbit_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssEphemeris::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssEphemeris)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GnssEphemeris* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssEphemeris>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssEphemeris)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssEphemeris)
    MergeFrom(*source);
  }
}

void GnssEphemeris::MergeFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssEphemeris)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gnss_type()) {
      set_gnss_type(from.gnss_type());
    }
    if (from.has_keppler_orbit()) {
      mutable_keppler_orbit()->::apollo::drivers::gnss::KepplerOrbit::MergeFrom(from.keppler_orbit());
    }
    if (from.has_glonass_orbit()) {
      mutable_glonass_orbit()->::apollo::drivers::gnss::GlonassOrbit::MergeFrom(from.glonass_orbit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GnssEphemeris::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssEphemeris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssEphemeris::CopyFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssEphemeris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssEphemeris::IsInitialized() const {

  return true;
}

void GnssEphemeris::Swap(GnssEphemeris* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssEphemeris::InternalSwap(GnssEphemeris* other) {
  std::swap(gnss_type_, other->gnss_type_);
  std::swap(keppler_orbit_, other->keppler_orbit_);
  std::swap(glonass_orbit_, other->glonass_orbit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssEphemeris::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GnssEphemeris_descriptor_;
  metadata.reflection = GnssEphemeris_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssEphemeris

// optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
bool GnssEphemeris::has_gnss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GnssEphemeris::set_has_gnss_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GnssEphemeris::clear_has_gnss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GnssEphemeris::clear_gnss_type() {
  gnss_type_ = 3;
  clear_has_gnss_type();
}
 ::apollo::drivers::gnss::GnssType GnssEphemeris::gnss_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssEphemeris.gnss_type)
  return static_cast< ::apollo::drivers::gnss::GnssType >(gnss_type_);
}
 void GnssEphemeris::set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  set_has_gnss_type();
  gnss_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssEphemeris.gnss_type)
}

// optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
bool GnssEphemeris::has_keppler_orbit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GnssEphemeris::set_has_keppler_orbit() {
  _has_bits_[0] |= 0x00000002u;
}
void GnssEphemeris::clear_has_keppler_orbit() {
  _has_bits_[0] &= ~0x00000002u;
}
void GnssEphemeris::clear_keppler_orbit() {
  if (keppler_orbit_ != NULL) keppler_orbit_->::apollo::drivers::gnss::KepplerOrbit::Clear();
  clear_has_keppler_orbit();
}
const ::apollo::drivers::gnss::KepplerOrbit& GnssEphemeris::keppler_orbit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
  return keppler_orbit_ != NULL ? *keppler_orbit_ : *default_instance_->keppler_orbit_;
}
::apollo::drivers::gnss::KepplerOrbit* GnssEphemeris::mutable_keppler_orbit() {
  set_has_keppler_orbit();
  if (keppler_orbit_ == NULL) {
    keppler_orbit_ = new ::apollo::drivers::gnss::KepplerOrbit;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
  return keppler_orbit_;
}
::apollo::drivers::gnss::KepplerOrbit* GnssEphemeris::release_keppler_orbit() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
  clear_has_keppler_orbit();
  ::apollo::drivers::gnss::KepplerOrbit* temp = keppler_orbit_;
  keppler_orbit_ = NULL;
  return temp;
}
void GnssEphemeris::set_allocated_keppler_orbit(::apollo::drivers::gnss::KepplerOrbit* keppler_orbit) {
  delete keppler_orbit_;
  keppler_orbit_ = keppler_orbit;
  if (keppler_orbit) {
    set_has_keppler_orbit();
  } else {
    clear_has_keppler_orbit();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
}

// optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
bool GnssEphemeris::has_glonass_orbit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GnssEphemeris::set_has_glonass_orbit() {
  _has_bits_[0] |= 0x00000004u;
}
void GnssEphemeris::clear_has_glonass_orbit() {
  _has_bits_[0] &= ~0x00000004u;
}
void GnssEphemeris::clear_glonass_orbit() {
  if (glonass_orbit_ != NULL) glonass_orbit_->::apollo::drivers::gnss::GlonassOrbit::Clear();
  clear_has_glonass_orbit();
}
const ::apollo::drivers::gnss::GlonassOrbit& GnssEphemeris::glonass_orbit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
  return glonass_orbit_ != NULL ? *glonass_orbit_ : *default_instance_->glonass_orbit_;
}
::apollo::drivers::gnss::GlonassOrbit* GnssEphemeris::mutable_glonass_orbit() {
  set_has_glonass_orbit();
  if (glonass_orbit_ == NULL) {
    glonass_orbit_ = new ::apollo::drivers::gnss::GlonassOrbit;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
  return glonass_orbit_;
}
::apollo::drivers::gnss::GlonassOrbit* GnssEphemeris::release_glonass_orbit() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
  clear_has_glonass_orbit();
  ::apollo::drivers::gnss::GlonassOrbit* temp = glonass_orbit_;
  glonass_orbit_ = NULL;
  return temp;
}
void GnssEphemeris::set_allocated_glonass_orbit(::apollo::drivers::gnss::GlonassOrbit* glonass_orbit) {
  delete glonass_orbit_;
  glonass_orbit_ = glonass_orbit;
  if (glonass_orbit) {
    set_has_glonass_orbit();
  } else {
    clear_has_glonass_orbit();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
