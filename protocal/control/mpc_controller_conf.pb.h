// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/mpc_controller_conf.proto

#ifndef PROTOBUF_control_2fmpc_5fcontroller_5fconf_2eproto__INCLUDED
#define PROTOBUF_control_2fmpc_5fcontroller_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "control/calibration_table.pb.h"
#include "control/gain_scheduler_conf.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_control_2fmpc_5fcontroller_5fconf_2eproto();
void protobuf_AssignDesc_control_2fmpc_5fcontroller_5fconf_2eproto();
void protobuf_ShutdownFile_control_2fmpc_5fcontroller_5fconf_2eproto();

class MPCControllerConf;

// ===================================================================

class MPCControllerConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.control.MPCControllerConf) */ {
 public:
  MPCControllerConf();
  virtual ~MPCControllerConf();

  MPCControllerConf(const MPCControllerConf& from);

  inline MPCControllerConf& operator=(const MPCControllerConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MPCControllerConf& default_instance();

  void Swap(MPCControllerConf* other);

  // implements Message ----------------------------------------------

  inline MPCControllerConf* New() const { return New(NULL); }

  MPCControllerConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MPCControllerConf& from);
  void MergeFrom(const MPCControllerConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MPCControllerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ts = 1;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  double ts() const;
  void set_ts(double value);

  // optional double cf = 2;
  bool has_cf() const;
  void clear_cf();
  static const int kCfFieldNumber = 2;
  double cf() const;
  void set_cf(double value);

  // optional double cr = 3;
  bool has_cr() const;
  void clear_cr();
  static const int kCrFieldNumber = 3;
  double cr() const;
  void set_cr(double value);

  // optional int32 mass_fl = 4;
  bool has_mass_fl() const;
  void clear_mass_fl();
  static const int kMassFlFieldNumber = 4;
  ::google::protobuf::int32 mass_fl() const;
  void set_mass_fl(::google::protobuf::int32 value);

  // optional int32 mass_fr = 5;
  bool has_mass_fr() const;
  void clear_mass_fr();
  static const int kMassFrFieldNumber = 5;
  ::google::protobuf::int32 mass_fr() const;
  void set_mass_fr(::google::protobuf::int32 value);

  // optional int32 mass_rl = 6;
  bool has_mass_rl() const;
  void clear_mass_rl();
  static const int kMassRlFieldNumber = 6;
  ::google::protobuf::int32 mass_rl() const;
  void set_mass_rl(::google::protobuf::int32 value);

  // optional int32 mass_rr = 7;
  bool has_mass_rr() const;
  void clear_mass_rr();
  static const int kMassRrFieldNumber = 7;
  ::google::protobuf::int32 mass_rr() const;
  void set_mass_rr(::google::protobuf::int32 value);

  // optional double eps = 8;
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 8;
  double eps() const;
  void set_eps(double value);

  // repeated double matrix_q = 9;
  int matrix_q_size() const;
  void clear_matrix_q();
  static const int kMatrixQFieldNumber = 9;
  double matrix_q(int index) const;
  void set_matrix_q(int index, double value);
  void add_matrix_q(double value);
  const ::google::protobuf::RepeatedField< double >&
      matrix_q() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_matrix_q();

  // repeated double matrix_r = 10;
  int matrix_r_size() const;
  void clear_matrix_r();
  static const int kMatrixRFieldNumber = 10;
  double matrix_r(int index) const;
  void set_matrix_r(int index, double value);
  void add_matrix_r(double value);
  const ::google::protobuf::RepeatedField< double >&
      matrix_r() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_matrix_r();

  // optional int32 cutoff_freq = 11;
  bool has_cutoff_freq() const;
  void clear_cutoff_freq();
  static const int kCutoffFreqFieldNumber = 11;
  ::google::protobuf::int32 cutoff_freq() const;
  void set_cutoff_freq(::google::protobuf::int32 value);

  // optional int32 mean_filter_window_size = 12;
  bool has_mean_filter_window_size() const;
  void clear_mean_filter_window_size();
  static const int kMeanFilterWindowSizeFieldNumber = 12;
  ::google::protobuf::int32 mean_filter_window_size() const;
  void set_mean_filter_window_size(::google::protobuf::int32 value);

  // optional int32 max_iteration = 13;
  bool has_max_iteration() const;
  void clear_max_iteration();
  static const int kMaxIterationFieldNumber = 13;
  ::google::protobuf::int32 max_iteration() const;
  void set_max_iteration(::google::protobuf::int32 value);

  // optional double max_lateral_acceleration = 14;
  bool has_max_lateral_acceleration() const;
  void clear_max_lateral_acceleration();
  static const int kMaxLateralAccelerationFieldNumber = 14;
  double max_lateral_acceleration() const;
  void set_max_lateral_acceleration(double value);

  // optional double standstill_acceleration = 15;
  bool has_standstill_acceleration() const;
  void clear_standstill_acceleration();
  static const int kStandstillAccelerationFieldNumber = 15;
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);

  // optional double throttle_deadzone = 16;
  bool has_throttle_deadzone() const;
  void clear_throttle_deadzone();
  static const int kThrottleDeadzoneFieldNumber = 16;
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);

  // optional double brake_deadzone = 17;
  bool has_brake_deadzone() const;
  void clear_brake_deadzone();
  static const int kBrakeDeadzoneFieldNumber = 17;
  double brake_deadzone() const;
  void set_brake_deadzone(double value);

  // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
  bool has_lat_err_gain_scheduler() const;
  void clear_lat_err_gain_scheduler();
  static const int kLatErrGainSchedulerFieldNumber = 18;
  const ::apollo::control::GainScheduler& lat_err_gain_scheduler() const;
  ::apollo::control::GainScheduler* mutable_lat_err_gain_scheduler();
  ::apollo::control::GainScheduler* release_lat_err_gain_scheduler();
  void set_allocated_lat_err_gain_scheduler(::apollo::control::GainScheduler* lat_err_gain_scheduler);

  // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
  bool has_heading_err_gain_scheduler() const;
  void clear_heading_err_gain_scheduler();
  static const int kHeadingErrGainSchedulerFieldNumber = 19;
  const ::apollo::control::GainScheduler& heading_err_gain_scheduler() const;
  ::apollo::control::GainScheduler* mutable_heading_err_gain_scheduler();
  ::apollo::control::GainScheduler* release_heading_err_gain_scheduler();
  void set_allocated_heading_err_gain_scheduler(::apollo::control::GainScheduler* heading_err_gain_scheduler);

  // optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
  bool has_steer_weight_gain_scheduler() const;
  void clear_steer_weight_gain_scheduler();
  static const int kSteerWeightGainSchedulerFieldNumber = 20;
  const ::apollo::control::GainScheduler& steer_weight_gain_scheduler() const;
  ::apollo::control::GainScheduler* mutable_steer_weight_gain_scheduler();
  ::apollo::control::GainScheduler* release_steer_weight_gain_scheduler();
  void set_allocated_steer_weight_gain_scheduler(::apollo::control::GainScheduler* steer_weight_gain_scheduler);

  // optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
  bool has_feedforwardterm_gain_scheduler() const;
  void clear_feedforwardterm_gain_scheduler();
  static const int kFeedforwardtermGainSchedulerFieldNumber = 21;
  const ::apollo::control::GainScheduler& feedforwardterm_gain_scheduler() const;
  ::apollo::control::GainScheduler* mutable_feedforwardterm_gain_scheduler();
  ::apollo::control::GainScheduler* release_feedforwardterm_gain_scheduler();
  void set_allocated_feedforwardterm_gain_scheduler(::apollo::control::GainScheduler* feedforwardterm_gain_scheduler);

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
  bool has_calibration_table() const;
  void clear_calibration_table();
  static const int kCalibrationTableFieldNumber = 22;
  const ::apollo::control::calibrationtable::ControlCalibrationTable& calibration_table() const;
  ::apollo::control::calibrationtable::ControlCalibrationTable* mutable_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* release_calibration_table();
  void set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table);

  // @@protoc_insertion_point(class_scope:apollo.control.MPCControllerConf)
 private:
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_cf();
  inline void clear_has_cf();
  inline void set_has_cr();
  inline void clear_has_cr();
  inline void set_has_mass_fl();
  inline void clear_has_mass_fl();
  inline void set_has_mass_fr();
  inline void clear_has_mass_fr();
  inline void set_has_mass_rl();
  inline void clear_has_mass_rl();
  inline void set_has_mass_rr();
  inline void clear_has_mass_rr();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_cutoff_freq();
  inline void clear_has_cutoff_freq();
  inline void set_has_mean_filter_window_size();
  inline void clear_has_mean_filter_window_size();
  inline void set_has_max_iteration();
  inline void clear_has_max_iteration();
  inline void set_has_max_lateral_acceleration();
  inline void clear_has_max_lateral_acceleration();
  inline void set_has_standstill_acceleration();
  inline void clear_has_standstill_acceleration();
  inline void set_has_throttle_deadzone();
  inline void clear_has_throttle_deadzone();
  inline void set_has_brake_deadzone();
  inline void clear_has_brake_deadzone();
  inline void set_has_lat_err_gain_scheduler();
  inline void clear_has_lat_err_gain_scheduler();
  inline void set_has_heading_err_gain_scheduler();
  inline void clear_has_heading_err_gain_scheduler();
  inline void set_has_steer_weight_gain_scheduler();
  inline void clear_has_steer_weight_gain_scheduler();
  inline void set_has_feedforwardterm_gain_scheduler();
  inline void clear_has_feedforwardterm_gain_scheduler();
  inline void set_has_calibration_table();
  inline void clear_has_calibration_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double ts_;
  double cf_;
  double cr_;
  ::google::protobuf::int32 mass_fl_;
  ::google::protobuf::int32 mass_fr_;
  ::google::protobuf::int32 mass_rl_;
  ::google::protobuf::int32 mass_rr_;
  double eps_;
  ::google::protobuf::RepeatedField< double > matrix_q_;
  ::google::protobuf::RepeatedField< double > matrix_r_;
  ::google::protobuf::int32 cutoff_freq_;
  ::google::protobuf::int32 mean_filter_window_size_;
  double max_lateral_acceleration_;
  double standstill_acceleration_;
  double throttle_deadzone_;
  double brake_deadzone_;
  ::apollo::control::GainScheduler* lat_err_gain_scheduler_;
  ::apollo::control::GainScheduler* heading_err_gain_scheduler_;
  ::apollo::control::GainScheduler* steer_weight_gain_scheduler_;
  ::apollo::control::GainScheduler* feedforwardterm_gain_scheduler_;
  ::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table_;
  ::google::protobuf::int32 max_iteration_;
  friend void  protobuf_AddDesc_control_2fmpc_5fcontroller_5fconf_2eproto();
  friend void protobuf_AssignDesc_control_2fmpc_5fcontroller_5fconf_2eproto();
  friend void protobuf_ShutdownFile_control_2fmpc_5fcontroller_5fconf_2eproto();

  void InitAsDefaultInstance();
  static MPCControllerConf* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MPCControllerConf

// optional double ts = 1;
inline bool MPCControllerConf::has_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MPCControllerConf::set_has_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MPCControllerConf::clear_has_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MPCControllerConf::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline double MPCControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.ts)
  return ts_;
}
inline void MPCControllerConf::set_ts(double value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.ts)
}

// optional double cf = 2;
inline bool MPCControllerConf::has_cf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MPCControllerConf::set_has_cf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MPCControllerConf::clear_has_cf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MPCControllerConf::clear_cf() {
  cf_ = 0;
  clear_has_cf();
}
inline double MPCControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cf)
  return cf_;
}
inline void MPCControllerConf::set_cf(double value) {
  set_has_cf();
  cf_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cf)
}

// optional double cr = 3;
inline bool MPCControllerConf::has_cr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MPCControllerConf::set_has_cr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MPCControllerConf::clear_has_cr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MPCControllerConf::clear_cr() {
  cr_ = 0;
  clear_has_cr();
}
inline double MPCControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cr)
  return cr_;
}
inline void MPCControllerConf::set_cr(double value) {
  set_has_cr();
  cr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cr)
}

// optional int32 mass_fl = 4;
inline bool MPCControllerConf::has_mass_fl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MPCControllerConf::set_has_mass_fl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MPCControllerConf::clear_has_mass_fl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MPCControllerConf::clear_mass_fl() {
  mass_fl_ = 0;
  clear_has_mass_fl();
}
inline ::google::protobuf::int32 MPCControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_fl)
  return mass_fl_;
}
inline void MPCControllerConf::set_mass_fl(::google::protobuf::int32 value) {
  set_has_mass_fl();
  mass_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_fl)
}

// optional int32 mass_fr = 5;
inline bool MPCControllerConf::has_mass_fr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MPCControllerConf::set_has_mass_fr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MPCControllerConf::clear_has_mass_fr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MPCControllerConf::clear_mass_fr() {
  mass_fr_ = 0;
  clear_has_mass_fr();
}
inline ::google::protobuf::int32 MPCControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_fr)
  return mass_fr_;
}
inline void MPCControllerConf::set_mass_fr(::google::protobuf::int32 value) {
  set_has_mass_fr();
  mass_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_fr)
}

// optional int32 mass_rl = 6;
inline bool MPCControllerConf::has_mass_rl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MPCControllerConf::set_has_mass_rl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MPCControllerConf::clear_has_mass_rl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MPCControllerConf::clear_mass_rl() {
  mass_rl_ = 0;
  clear_has_mass_rl();
}
inline ::google::protobuf::int32 MPCControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_rl)
  return mass_rl_;
}
inline void MPCControllerConf::set_mass_rl(::google::protobuf::int32 value) {
  set_has_mass_rl();
  mass_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_rl)
}

// optional int32 mass_rr = 7;
inline bool MPCControllerConf::has_mass_rr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MPCControllerConf::set_has_mass_rr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MPCControllerConf::clear_has_mass_rr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MPCControllerConf::clear_mass_rr() {
  mass_rr_ = 0;
  clear_has_mass_rr();
}
inline ::google::protobuf::int32 MPCControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_rr)
  return mass_rr_;
}
inline void MPCControllerConf::set_mass_rr(::google::protobuf::int32 value) {
  set_has_mass_rr();
  mass_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_rr)
}

// optional double eps = 8;
inline bool MPCControllerConf::has_eps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MPCControllerConf::set_has_eps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MPCControllerConf::clear_has_eps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MPCControllerConf::clear_eps() {
  eps_ = 0;
  clear_has_eps();
}
inline double MPCControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.eps)
  return eps_;
}
inline void MPCControllerConf::set_eps(double value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.eps)
}

// repeated double matrix_q = 9;
inline int MPCControllerConf::matrix_q_size() const {
  return matrix_q_.size();
}
inline void MPCControllerConf::clear_matrix_q() {
  matrix_q_.Clear();
}
inline double MPCControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.matrix_q)
  return matrix_q_.Get(index);
}
inline void MPCControllerConf::set_matrix_q(int index, double value) {
  matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.matrix_q)
}
inline void MPCControllerConf::add_matrix_q(double value) {
  matrix_q_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.MPCControllerConf.matrix_q)
}
inline const ::google::protobuf::RepeatedField< double >&
MPCControllerConf::matrix_q() const {
  // @@protoc_insertion_point(field_list:apollo.control.MPCControllerConf.matrix_q)
  return matrix_q_;
}
inline ::google::protobuf::RepeatedField< double >*
MPCControllerConf::mutable_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.MPCControllerConf.matrix_q)
  return &matrix_q_;
}

// repeated double matrix_r = 10;
inline int MPCControllerConf::matrix_r_size() const {
  return matrix_r_.size();
}
inline void MPCControllerConf::clear_matrix_r() {
  matrix_r_.Clear();
}
inline double MPCControllerConf::matrix_r(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.matrix_r)
  return matrix_r_.Get(index);
}
inline void MPCControllerConf::set_matrix_r(int index, double value) {
  matrix_r_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.matrix_r)
}
inline void MPCControllerConf::add_matrix_r(double value) {
  matrix_r_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.MPCControllerConf.matrix_r)
}
inline const ::google::protobuf::RepeatedField< double >&
MPCControllerConf::matrix_r() const {
  // @@protoc_insertion_point(field_list:apollo.control.MPCControllerConf.matrix_r)
  return matrix_r_;
}
inline ::google::protobuf::RepeatedField< double >*
MPCControllerConf::mutable_matrix_r() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.MPCControllerConf.matrix_r)
  return &matrix_r_;
}

// optional int32 cutoff_freq = 11;
inline bool MPCControllerConf::has_cutoff_freq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MPCControllerConf::set_has_cutoff_freq() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MPCControllerConf::clear_has_cutoff_freq() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MPCControllerConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  clear_has_cutoff_freq();
}
inline ::google::protobuf::int32 MPCControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cutoff_freq)
  return cutoff_freq_;
}
inline void MPCControllerConf::set_cutoff_freq(::google::protobuf::int32 value) {
  set_has_cutoff_freq();
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cutoff_freq)
}

// optional int32 mean_filter_window_size = 12;
inline bool MPCControllerConf::has_mean_filter_window_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MPCControllerConf::set_has_mean_filter_window_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MPCControllerConf::clear_has_mean_filter_window_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MPCControllerConf::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 0;
  clear_has_mean_filter_window_size();
}
inline ::google::protobuf::int32 MPCControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mean_filter_window_size)
  return mean_filter_window_size_;
}
inline void MPCControllerConf::set_mean_filter_window_size(::google::protobuf::int32 value) {
  set_has_mean_filter_window_size();
  mean_filter_window_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mean_filter_window_size)
}

// optional int32 max_iteration = 13;
inline bool MPCControllerConf::has_max_iteration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MPCControllerConf::set_has_max_iteration() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MPCControllerConf::clear_has_max_iteration() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MPCControllerConf::clear_max_iteration() {
  max_iteration_ = 0;
  clear_has_max_iteration();
}
inline ::google::protobuf::int32 MPCControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.max_iteration)
  return max_iteration_;
}
inline void MPCControllerConf::set_max_iteration(::google::protobuf::int32 value) {
  set_has_max_iteration();
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.max_iteration)
}

// optional double max_lateral_acceleration = 14;
inline bool MPCControllerConf::has_max_lateral_acceleration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MPCControllerConf::set_has_max_lateral_acceleration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MPCControllerConf::clear_has_max_lateral_acceleration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MPCControllerConf::clear_max_lateral_acceleration() {
  max_lateral_acceleration_ = 0;
  clear_has_max_lateral_acceleration();
}
inline double MPCControllerConf::max_lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.max_lateral_acceleration)
  return max_lateral_acceleration_;
}
inline void MPCControllerConf::set_max_lateral_acceleration(double value) {
  set_has_max_lateral_acceleration();
  max_lateral_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.max_lateral_acceleration)
}

// optional double standstill_acceleration = 15;
inline bool MPCControllerConf::has_standstill_acceleration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MPCControllerConf::set_has_standstill_acceleration() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MPCControllerConf::clear_has_standstill_acceleration() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MPCControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  clear_has_standstill_acceleration();
}
inline double MPCControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
inline void MPCControllerConf::set_standstill_acceleration(double value) {
  set_has_standstill_acceleration();
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.standstill_acceleration)
}

// optional double throttle_deadzone = 16;
inline bool MPCControllerConf::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MPCControllerConf::set_has_throttle_deadzone() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MPCControllerConf::clear_has_throttle_deadzone() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MPCControllerConf::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
  clear_has_throttle_deadzone();
}
inline double MPCControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.throttle_deadzone)
  return throttle_deadzone_;
}
inline void MPCControllerConf::set_throttle_deadzone(double value) {
  set_has_throttle_deadzone();
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.throttle_deadzone)
}

// optional double brake_deadzone = 17;
inline bool MPCControllerConf::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MPCControllerConf::set_has_brake_deadzone() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MPCControllerConf::clear_has_brake_deadzone() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MPCControllerConf::clear_brake_deadzone() {
  brake_deadzone_ = 0;
  clear_has_brake_deadzone();
}
inline double MPCControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.brake_deadzone)
  return brake_deadzone_;
}
inline void MPCControllerConf::set_brake_deadzone(double value) {
  set_has_brake_deadzone();
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.brake_deadzone)
}

// optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
inline bool MPCControllerConf::has_lat_err_gain_scheduler() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MPCControllerConf::set_has_lat_err_gain_scheduler() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MPCControllerConf::clear_has_lat_err_gain_scheduler() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MPCControllerConf::clear_lat_err_gain_scheduler() {
  if (lat_err_gain_scheduler_ != NULL) lat_err_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_lat_err_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::lat_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  return lat_err_gain_scheduler_ != NULL ? *lat_err_gain_scheduler_ : *default_instance_->lat_err_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_lat_err_gain_scheduler() {
  set_has_lat_err_gain_scheduler();
  if (lat_err_gain_scheduler_ == NULL) {
    lat_err_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  return lat_err_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_lat_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  clear_has_lat_err_gain_scheduler();
  ::apollo::control::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = NULL;
  return temp;
}
inline void MPCControllerConf::set_allocated_lat_err_gain_scheduler(::apollo::control::GainScheduler* lat_err_gain_scheduler) {
  delete lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  if (lat_err_gain_scheduler) {
    set_has_lat_err_gain_scheduler();
  } else {
    clear_has_lat_err_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
}

// optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
inline bool MPCControllerConf::has_heading_err_gain_scheduler() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MPCControllerConf::set_has_heading_err_gain_scheduler() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MPCControllerConf::clear_has_heading_err_gain_scheduler() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MPCControllerConf::clear_heading_err_gain_scheduler() {
  if (heading_err_gain_scheduler_ != NULL) heading_err_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_heading_err_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::heading_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  return heading_err_gain_scheduler_ != NULL ? *heading_err_gain_scheduler_ : *default_instance_->heading_err_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_heading_err_gain_scheduler() {
  set_has_heading_err_gain_scheduler();
  if (heading_err_gain_scheduler_ == NULL) {
    heading_err_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  return heading_err_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_heading_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  clear_has_heading_err_gain_scheduler();
  ::apollo::control::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = NULL;
  return temp;
}
inline void MPCControllerConf::set_allocated_heading_err_gain_scheduler(::apollo::control::GainScheduler* heading_err_gain_scheduler) {
  delete heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  if (heading_err_gain_scheduler) {
    set_has_heading_err_gain_scheduler();
  } else {
    clear_has_heading_err_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
}

// optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
inline bool MPCControllerConf::has_steer_weight_gain_scheduler() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MPCControllerConf::set_has_steer_weight_gain_scheduler() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MPCControllerConf::clear_has_steer_weight_gain_scheduler() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MPCControllerConf::clear_steer_weight_gain_scheduler() {
  if (steer_weight_gain_scheduler_ != NULL) steer_weight_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_steer_weight_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::steer_weight_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  return steer_weight_gain_scheduler_ != NULL ? *steer_weight_gain_scheduler_ : *default_instance_->steer_weight_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_steer_weight_gain_scheduler() {
  set_has_steer_weight_gain_scheduler();
  if (steer_weight_gain_scheduler_ == NULL) {
    steer_weight_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  return steer_weight_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_steer_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  clear_has_steer_weight_gain_scheduler();
  ::apollo::control::GainScheduler* temp = steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = NULL;
  return temp;
}
inline void MPCControllerConf::set_allocated_steer_weight_gain_scheduler(::apollo::control::GainScheduler* steer_weight_gain_scheduler) {
  delete steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = steer_weight_gain_scheduler;
  if (steer_weight_gain_scheduler) {
    set_has_steer_weight_gain_scheduler();
  } else {
    clear_has_steer_weight_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
}

// optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
inline bool MPCControllerConf::has_feedforwardterm_gain_scheduler() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MPCControllerConf::set_has_feedforwardterm_gain_scheduler() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MPCControllerConf::clear_has_feedforwardterm_gain_scheduler() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MPCControllerConf::clear_feedforwardterm_gain_scheduler() {
  if (feedforwardterm_gain_scheduler_ != NULL) feedforwardterm_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_feedforwardterm_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::feedforwardterm_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return feedforwardterm_gain_scheduler_ != NULL ? *feedforwardterm_gain_scheduler_ : *default_instance_->feedforwardterm_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_feedforwardterm_gain_scheduler() {
  set_has_feedforwardterm_gain_scheduler();
  if (feedforwardterm_gain_scheduler_ == NULL) {
    feedforwardterm_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return feedforwardterm_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_feedforwardterm_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  clear_has_feedforwardterm_gain_scheduler();
  ::apollo::control::GainScheduler* temp = feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = NULL;
  return temp;
}
inline void MPCControllerConf::set_allocated_feedforwardterm_gain_scheduler(::apollo::control::GainScheduler* feedforwardterm_gain_scheduler) {
  delete feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = feedforwardterm_gain_scheduler;
  if (feedforwardterm_gain_scheduler) {
    set_has_feedforwardterm_gain_scheduler();
  } else {
    clear_has_feedforwardterm_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
inline bool MPCControllerConf::has_calibration_table() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MPCControllerConf::set_has_calibration_table() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MPCControllerConf::clear_has_calibration_table() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MPCControllerConf::clear_calibration_table() {
  if (calibration_table_ != NULL) calibration_table_->::apollo::control::calibrationtable::ControlCalibrationTable::Clear();
  clear_has_calibration_table();
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& MPCControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.calibration_table)
  return calibration_table_ != NULL ? *calibration_table_ : *default_instance_->calibration_table_;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::mutable_calibration_table() {
  set_has_calibration_table();
  if (calibration_table_ == NULL) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.calibration_table)
  return calibration_table_;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.calibration_table)
  clear_has_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = NULL;
  return temp;
}
inline void MPCControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  delete calibration_table_;
  calibration_table_ = calibration_table;
  if (calibration_table) {
    set_has_calibration_table();
  } else {
    clear_has_calibration_table();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.calibration_table)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_control_2fmpc_5fcontroller_5fconf_2eproto__INCLUDED
