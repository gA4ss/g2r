// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dreamview/hmi_config.proto

#ifndef PROTOBUF_dreamview_2fhmi_5fconfig_2eproto__INCLUDED
#define PROTOBUF_dreamview_2fhmi_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace dreamview {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

class AudioCapturingConfig;
class Component;
class Component_Command;
class HMIConfig;
class Mode;
class VehicleData;
class VehicleData_DataFile;

enum HMIAction {
  NONE = 0,
  SETUP = 1,
  AUTO_MODE = 2,
  DISENGAGE = 3
};
bool HMIAction_IsValid(int value);
const HMIAction HMIAction_MIN = NONE;
const HMIAction HMIAction_MAX = DISENGAGE;
const int HMIAction_ARRAYSIZE = HMIAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* HMIAction_descriptor();
inline const ::std::string& HMIAction_Name(HMIAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    HMIAction_descriptor(), value);
}
inline bool HMIAction_Parse(
    const ::std::string& name, HMIAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HMIAction>(
    HMIAction_descriptor(), name, value);
}
// ===================================================================

class Component_Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Component.Command) */ {
 public:
  Component_Command();
  virtual ~Component_Command();

  Component_Command(const Component_Command& from);

  inline Component_Command& operator=(const Component_Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Component_Command& default_instance();

  void Swap(Component_Command* other);

  // implements Message ----------------------------------------------

  inline Component_Command* New() const { return New(NULL); }

  Component_Command* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Component_Command& from);
  void MergeFrom(const Component_Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Component_Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string debug_cmd = 1;
  bool has_debug_cmd() const;
  void clear_debug_cmd();
  static const int kDebugCmdFieldNumber = 1;
  const ::std::string& debug_cmd() const;
  void set_debug_cmd(const ::std::string& value);
  void set_debug_cmd(const char* value);
  void set_debug_cmd(const char* value, size_t size);
  ::std::string* mutable_debug_cmd();
  ::std::string* release_debug_cmd();
  void set_allocated_debug_cmd(::std::string* debug_cmd);

  // optional string prod_cmd = 2;
  bool has_prod_cmd() const;
  void clear_prod_cmd();
  static const int kProdCmdFieldNumber = 2;
  const ::std::string& prod_cmd() const;
  void set_prod_cmd(const ::std::string& value);
  void set_prod_cmd(const char* value);
  void set_prod_cmd(const char* value, size_t size);
  ::std::string* mutable_prod_cmd();
  ::std::string* release_prod_cmd();
  void set_allocated_prod_cmd(::std::string* prod_cmd);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Component.Command)
 private:
  inline void set_has_debug_cmd();
  inline void clear_has_debug_cmd();
  inline void set_has_prod_cmd();
  inline void clear_has_prod_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr debug_cmd_;
  ::google::protobuf::internal::ArenaStringPtr prod_cmd_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Component_Command* default_instance_;
};
// -------------------------------------------------------------------

class Component : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Component& default_instance();

  void Swap(Component* other);

  // implements Message ----------------------------------------------

  inline Component* New() const { return New(NULL); }

  Component* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Component* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Component_Command Command;

  // accessors -------------------------------------------------------

  // optional string display_name = 1;
  bool has_display_name() const;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // optional string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // map<string, .apollo.dreamview.Component.Command> commands = 3;
  int commands_size() const;
  void clear_commands();
  static const int kCommandsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >&
      commands() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >*
      mutable_commands();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Component)
 private:
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::apollo::dreamview::Component_Command,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Component_CommandsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::apollo::dreamview::Component_Command,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > commands_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Component* default_instance_;
};
// -------------------------------------------------------------------

class Mode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Mode) */ {
 public:
  Mode();
  virtual ~Mode();

  Mode(const Mode& from);

  inline Mode& operator=(const Mode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mode& default_instance();

  void Swap(Mode* other);

  // implements Message ----------------------------------------------

  inline Mode* New() const { return New(NULL); }

  Mode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mode& from);
  void MergeFrom(const Mode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string live_modules = 1;
  int live_modules_size() const;
  void clear_live_modules();
  static const int kLiveModulesFieldNumber = 1;
  const ::std::string& live_modules(int index) const;
  ::std::string* mutable_live_modules(int index);
  void set_live_modules(int index, const ::std::string& value);
  void set_live_modules(int index, const char* value);
  void set_live_modules(int index, const char* value, size_t size);
  ::std::string* add_live_modules();
  void add_live_modules(const ::std::string& value);
  void add_live_modules(const char* value);
  void add_live_modules(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& live_modules() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_live_modules();

  // repeated string live_hardware = 2;
  int live_hardware_size() const;
  void clear_live_hardware();
  static const int kLiveHardwareFieldNumber = 2;
  const ::std::string& live_hardware(int index) const;
  ::std::string* mutable_live_hardware(int index);
  void set_live_hardware(int index, const ::std::string& value);
  void set_live_hardware(int index, const char* value);
  void set_live_hardware(int index, const char* value, size_t size);
  ::std::string* add_live_hardware();
  void add_live_hardware(const ::std::string& value);
  void add_live_hardware(const char* value);
  void add_live_hardware(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& live_hardware() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_live_hardware();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Mode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> live_modules_;
  ::google::protobuf::RepeatedPtrField< ::std::string> live_hardware_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Mode* default_instance_;
};
// -------------------------------------------------------------------

class AudioCapturingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.AudioCapturingConfig) */ {
 public:
  AudioCapturingConfig();
  virtual ~AudioCapturingConfig();

  AudioCapturingConfig(const AudioCapturingConfig& from);

  inline AudioCapturingConfig& operator=(const AudioCapturingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioCapturingConfig& default_instance();

  void Swap(AudioCapturingConfig* other);

  // implements Message ----------------------------------------------

  inline AudioCapturingConfig* New() const { return New(NULL); }

  AudioCapturingConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioCapturingConfig& from);
  void MergeFrom(const AudioCapturingConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioCapturingConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1 [default = 1];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 sample_rate = 2;
  bool has_sample_rate() const;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 2;
  ::google::protobuf::int32 sample_rate() const;
  void set_sample_rate(::google::protobuf::int32 value);

  // optional int32 bits_per_sample = 3;
  bool has_bits_per_sample() const;
  void clear_bits_per_sample();
  static const int kBitsPerSampleFieldNumber = 3;
  ::google::protobuf::int32 bits_per_sample() const;
  void set_bits_per_sample(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.AudioCapturingConfig)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_sample_rate();
  inline void clear_has_sample_rate();
  inline void set_has_bits_per_sample();
  inline void clear_has_bits_per_sample();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 sample_rate_;
  ::google::protobuf::int32 bits_per_sample_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static AudioCapturingConfig* default_instance_;
};
// -------------------------------------------------------------------

class HMIConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIConfig) */ {
 public:
  HMIConfig();
  virtual ~HMIConfig();

  HMIConfig(const HMIConfig& from);

  inline HMIConfig& operator=(const HMIConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HMIConfig& default_instance();

  void Swap(HMIConfig* other);

  // implements Message ----------------------------------------------

  inline HMIConfig* New() const { return New(NULL); }

  HMIConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HMIConfig& from);
  void MergeFrom(const HMIConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HMIConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string docker_image = 1;
  bool has_docker_image() const;
  void clear_docker_image();
  static const int kDockerImageFieldNumber = 1;
  const ::std::string& docker_image() const;
  void set_docker_image(const ::std::string& value);
  void set_docker_image(const char* value);
  void set_docker_image(const char* value, size_t size);
  ::std::string* mutable_docker_image();
  ::std::string* release_docker_image();
  void set_allocated_docker_image(::std::string* docker_image);

  // map<string, .apollo.dreamview.Component> modules = 2;
  int modules_size() const;
  void clear_modules();
  static const int kModulesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
      modules() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
      mutable_modules();

  // map<string, .apollo.dreamview.Component> hardware = 3;
  int hardware_size() const;
  void clear_hardware();
  static const int kHardwareFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
      hardware() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
      mutable_hardware();

  // map<string, .apollo.dreamview.Component> tools = 4;
  int tools_size() const;
  void clear_tools();
  static const int kToolsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
      tools() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
      mutable_tools();

  // map<string, string> available_maps = 5;
  int available_maps_size() const;
  void clear_available_maps();
  static const int kAvailableMapsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      available_maps() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_available_maps();

  // map<string, string> available_vehicles = 6;
  int available_vehicles_size() const;
  void clear_available_vehicles();
  static const int kAvailableVehiclesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      available_vehicles() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_available_vehicles();

  // map<string, .apollo.dreamview.Mode> modes = 7;
  int modes_size() const;
  void clear_modes();
  static const int kModesFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >&
      modes() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >*
      mutable_modes();

  // optional int32 utm_zone_id = 8;
  bool has_utm_zone_id() const;
  void clear_utm_zone_id();
  static const int kUtmZoneIdFieldNumber = 8;
  ::google::protobuf::int32 utm_zone_id() const;
  void set_utm_zone_id(::google::protobuf::int32 value);

  // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
  bool has_audio_capturing_conf() const;
  void clear_audio_capturing_conf();
  static const int kAudioCapturingConfFieldNumber = 9;
  const ::apollo::dreamview::AudioCapturingConfig& audio_capturing_conf() const;
  ::apollo::dreamview::AudioCapturingConfig* mutable_audio_capturing_conf();
  ::apollo::dreamview::AudioCapturingConfig* release_audio_capturing_conf();
  void set_allocated_audio_capturing_conf(::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf);

  // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
  bool has_chassis_high_beam_action() const;
  void clear_chassis_high_beam_action();
  static const int kChassisHighBeamActionFieldNumber = 10;
  ::apollo::dreamview::HMIAction chassis_high_beam_action() const;
  void set_chassis_high_beam_action(::apollo::dreamview::HMIAction value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIConfig)
 private:
  inline void set_has_docker_image();
  inline void clear_has_docker_image();
  inline void set_has_utm_zone_id();
  inline void clear_has_utm_zone_id();
  inline void set_has_audio_capturing_conf();
  inline void clear_has_audio_capturing_conf();
  inline void set_has_chassis_high_beam_action();
  inline void clear_has_chassis_high_beam_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr docker_image_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      HMIConfig_ModulesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modules_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      HMIConfig_HardwareEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > hardware_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      HMIConfig_ToolsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tools_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      HMIConfig_AvailableMapsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > available_maps_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      HMIConfig_AvailableVehiclesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > available_vehicles_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::apollo::dreamview::Mode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      HMIConfig_ModesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::apollo::dreamview::Mode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modes_;
  ::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf_;
  ::google::protobuf::int32 utm_zone_id_;
  int chassis_high_beam_action_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static HMIConfig* default_instance_;
};
// -------------------------------------------------------------------

class VehicleData_DataFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData.DataFile) */ {
 public:
  VehicleData_DataFile();
  virtual ~VehicleData_DataFile();

  VehicleData_DataFile(const VehicleData_DataFile& from);

  inline VehicleData_DataFile& operator=(const VehicleData_DataFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleData_DataFile& default_instance();

  void Swap(VehicleData_DataFile* other);

  // implements Message ----------------------------------------------

  inline VehicleData_DataFile* New() const { return New(NULL); }

  VehicleData_DataFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleData_DataFile& from);
  void MergeFrom(const VehicleData_DataFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleData_DataFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source_path = 1;
  bool has_source_path() const;
  void clear_source_path();
  static const int kSourcePathFieldNumber = 1;
  const ::std::string& source_path() const;
  void set_source_path(const ::std::string& value);
  void set_source_path(const char* value);
  void set_source_path(const char* value, size_t size);
  ::std::string* mutable_source_path();
  ::std::string* release_source_path();
  void set_allocated_source_path(::std::string* source_path);

  // optional string dest_path = 2;
  bool has_dest_path() const;
  void clear_dest_path();
  static const int kDestPathFieldNumber = 2;
  const ::std::string& dest_path() const;
  void set_dest_path(const ::std::string& value);
  void set_dest_path(const char* value);
  void set_dest_path(const char* value, size_t size);
  ::std::string* mutable_dest_path();
  ::std::string* release_dest_path();
  void set_allocated_dest_path(::std::string* dest_path);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData.DataFile)
 private:
  inline void set_has_source_path();
  inline void clear_has_source_path();
  inline void set_has_dest_path();
  inline void clear_has_dest_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_path_;
  ::google::protobuf::internal::ArenaStringPtr dest_path_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static VehicleData_DataFile* default_instance_;
};
// -------------------------------------------------------------------

class VehicleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData) */ {
 public:
  VehicleData();
  virtual ~VehicleData();

  VehicleData(const VehicleData& from);

  inline VehicleData& operator=(const VehicleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleData& default_instance();

  void Swap(VehicleData* other);

  // implements Message ----------------------------------------------

  inline VehicleData* New() const { return New(NULL); }

  VehicleData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleData& from);
  void MergeFrom(const VehicleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VehicleData_DataFile DataFile;

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  int data_files_size() const;
  void clear_data_files();
  static const int kDataFilesFieldNumber = 1;
  const ::apollo::dreamview::VehicleData_DataFile& data_files(int index) const;
  ::apollo::dreamview::VehicleData_DataFile* mutable_data_files(int index);
  ::apollo::dreamview::VehicleData_DataFile* add_data_files();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
      mutable_data_files();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
      data_files() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile > data_files_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static VehicleData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Component_Command

// optional string debug_cmd = 1;
inline bool Component_Command::has_debug_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Component_Command::set_has_debug_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Component_Command::clear_has_debug_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Component_Command::clear_debug_cmd() {
  debug_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug_cmd();
}
inline const ::std::string& Component_Command::debug_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.Command.debug_cmd)
  return debug_cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component_Command::set_debug_cmd(const ::std::string& value) {
  set_has_debug_cmd();
  debug_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.Command.debug_cmd)
}
inline void Component_Command::set_debug_cmd(const char* value) {
  set_has_debug_cmd();
  debug_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.Command.debug_cmd)
}
inline void Component_Command::set_debug_cmd(const char* value, size_t size) {
  set_has_debug_cmd();
  debug_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.Command.debug_cmd)
}
inline ::std::string* Component_Command::mutable_debug_cmd() {
  set_has_debug_cmd();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.Command.debug_cmd)
  return debug_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Component_Command::release_debug_cmd() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.Command.debug_cmd)
  clear_has_debug_cmd();
  return debug_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component_Command::set_allocated_debug_cmd(::std::string* debug_cmd) {
  if (debug_cmd != NULL) {
    set_has_debug_cmd();
  } else {
    clear_has_debug_cmd();
  }
  debug_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_cmd);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.Command.debug_cmd)
}

// optional string prod_cmd = 2;
inline bool Component_Command::has_prod_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Component_Command::set_has_prod_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Component_Command::clear_has_prod_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Component_Command::clear_prod_cmd() {
  prod_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prod_cmd();
}
inline const ::std::string& Component_Command::prod_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.Command.prod_cmd)
  return prod_cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component_Command::set_prod_cmd(const ::std::string& value) {
  set_has_prod_cmd();
  prod_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.Command.prod_cmd)
}
inline void Component_Command::set_prod_cmd(const char* value) {
  set_has_prod_cmd();
  prod_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.Command.prod_cmd)
}
inline void Component_Command::set_prod_cmd(const char* value, size_t size) {
  set_has_prod_cmd();
  prod_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.Command.prod_cmd)
}
inline ::std::string* Component_Command::mutable_prod_cmd() {
  set_has_prod_cmd();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.Command.prod_cmd)
  return prod_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Component_Command::release_prod_cmd() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.Command.prod_cmd)
  clear_has_prod_cmd();
  return prod_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component_Command::set_allocated_prod_cmd(::std::string* prod_cmd) {
  if (prod_cmd != NULL) {
    set_has_prod_cmd();
  } else {
    clear_has_prod_cmd();
  }
  prod_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prod_cmd);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.Command.prod_cmd)
}

// -------------------------------------------------------------------

// Component

// optional string display_name = 1;
inline bool Component::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Component::set_has_display_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Component::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Component::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
inline const ::std::string& Component::display_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.display_name)
}
inline void Component::set_display_name(const char* value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.display_name)
}
inline void Component::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.display_name)
}
inline ::std::string* Component::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Component::release_display_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.display_name)
}

// optional string path = 2;
inline bool Component::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Component::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Component::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Component::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& Component::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.path)
}
inline void Component::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.path)
}
inline void Component::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.path)
}
inline ::std::string* Component::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Component::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.path)
}

// map<string, .apollo.dreamview.Component.Command> commands = 3;
inline int Component::commands_size() const {
  return commands_.size();
}
inline void Component::clear_commands() {
  commands_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >&
Component::commands() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Component.commands)
  return commands_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >*
Component::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Component.commands)
  return commands_.MutableMap();
}

// -------------------------------------------------------------------

// Mode

// repeated string live_modules = 1;
inline int Mode::live_modules_size() const {
  return live_modules_.size();
}
inline void Mode::clear_live_modules() {
  live_modules_.Clear();
}
inline const ::std::string& Mode::live_modules(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_modules)
  return live_modules_.Get(index);
}
inline ::std::string* Mode::mutable_live_modules(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_modules)
  return live_modules_.Mutable(index);
}
inline void Mode::set_live_modules(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_modules)
  live_modules_.Mutable(index)->assign(value);
}
inline void Mode::set_live_modules(int index, const char* value) {
  live_modules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_modules)
}
inline void Mode::set_live_modules(int index, const char* value, size_t size) {
  live_modules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_modules)
}
inline ::std::string* Mode::add_live_modules() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_modules)
  return live_modules_.Add();
}
inline void Mode::add_live_modules(const ::std::string& value) {
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_modules)
}
inline void Mode::add_live_modules(const char* value) {
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_modules)
}
inline void Mode::add_live_modules(const char* value, size_t size) {
  live_modules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_modules)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_modules() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_modules)
  return live_modules_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_modules() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_modules)
  return &live_modules_;
}

// repeated string live_hardware = 2;
inline int Mode::live_hardware_size() const {
  return live_hardware_.size();
}
inline void Mode::clear_live_hardware() {
  live_hardware_.Clear();
}
inline const ::std::string& Mode::live_hardware(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Get(index);
}
inline ::std::string* Mode::mutable_live_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Mutable(index);
}
inline void Mode::set_live_hardware(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_hardware)
  live_hardware_.Mutable(index)->assign(value);
}
inline void Mode::set_live_hardware(int index, const char* value) {
  live_hardware_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::set_live_hardware(int index, const char* value, size_t size) {
  live_hardware_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_hardware)
}
inline ::std::string* Mode::add_live_hardware() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Add();
}
inline void Mode::add_live_hardware(const ::std::string& value) {
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::add_live_hardware(const char* value) {
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::add_live_hardware(const char* value, size_t size) {
  live_hardware_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_hardware)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_hardware() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_hardware)
  return live_hardware_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_hardware() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_hardware)
  return &live_hardware_;
}

// -------------------------------------------------------------------

// AudioCapturingConfig

// optional int32 channels = 1 [default = 1];
inline bool AudioCapturingConfig::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioCapturingConfig::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioCapturingConfig::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioCapturingConfig::clear_channels() {
  channels_ = 1;
  clear_has_channels();
}
inline ::google::protobuf::int32 AudioCapturingConfig::channels() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.channels)
  return channels_;
}
inline void AudioCapturingConfig::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.channels)
}

// optional int32 sample_rate = 2;
inline bool AudioCapturingConfig::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioCapturingConfig::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioCapturingConfig::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioCapturingConfig::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
inline ::google::protobuf::int32 AudioCapturingConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.sample_rate)
  return sample_rate_;
}
inline void AudioCapturingConfig::set_sample_rate(::google::protobuf::int32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.sample_rate)
}

// optional int32 bits_per_sample = 3;
inline bool AudioCapturingConfig::has_bits_per_sample() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioCapturingConfig::set_has_bits_per_sample() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioCapturingConfig::clear_has_bits_per_sample() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioCapturingConfig::clear_bits_per_sample() {
  bits_per_sample_ = 0;
  clear_has_bits_per_sample();
}
inline ::google::protobuf::int32 AudioCapturingConfig::bits_per_sample() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.bits_per_sample)
  return bits_per_sample_;
}
inline void AudioCapturingConfig::set_bits_per_sample(::google::protobuf::int32 value) {
  set_has_bits_per_sample();
  bits_per_sample_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.bits_per_sample)
}

// -------------------------------------------------------------------

// HMIConfig

// optional string docker_image = 1;
inline bool HMIConfig::has_docker_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HMIConfig::set_has_docker_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HMIConfig::clear_has_docker_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HMIConfig::clear_docker_image() {
  docker_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_docker_image();
}
inline const ::std::string& HMIConfig::docker_image() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.docker_image)
  return docker_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIConfig::set_docker_image(const ::std::string& value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.docker_image)
}
inline void HMIConfig::set_docker_image(const char* value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIConfig.docker_image)
}
inline void HMIConfig::set_docker_image(const char* value, size_t size) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIConfig.docker_image)
}
inline ::std::string* HMIConfig::mutable_docker_image() {
  set_has_docker_image();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIConfig.docker_image)
  return docker_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIConfig::release_docker_image() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIConfig.docker_image)
  clear_has_docker_image();
  return docker_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIConfig::set_allocated_docker_image(::std::string* docker_image) {
  if (docker_image != NULL) {
    set_has_docker_image();
  } else {
    clear_has_docker_image();
  }
  docker_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docker_image);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIConfig.docker_image)
}

// map<string, .apollo.dreamview.Component> modules = 2;
inline int HMIConfig::modules_size() const {
  return modules_.size();
}
inline void HMIConfig::clear_modules() {
  modules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modules)
  return modules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modules)
  return modules_.MutableMap();
}

// map<string, .apollo.dreamview.Component> hardware = 3;
inline int HMIConfig::hardware_size() const {
  return hardware_.size();
}
inline void HMIConfig::clear_hardware() {
  hardware_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::hardware() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.hardware)
  return hardware_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.hardware)
  return hardware_.MutableMap();
}

// map<string, .apollo.dreamview.Component> tools = 4;
inline int HMIConfig::tools_size() const {
  return tools_.size();
}
inline void HMIConfig::clear_tools() {
  tools_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::tools() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.tools)
  return tools_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.tools)
  return tools_.MutableMap();
}

// map<string, string> available_maps = 5;
inline int HMIConfig::available_maps_size() const {
  return available_maps_.size();
}
inline void HMIConfig::clear_available_maps() {
  available_maps_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_maps() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_maps)
  return available_maps_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_maps() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_maps)
  return available_maps_.MutableMap();
}

// map<string, string> available_vehicles = 6;
inline int HMIConfig::available_vehicles_size() const {
  return available_vehicles_.size();
}
inline void HMIConfig::clear_available_vehicles() {
  available_vehicles_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_vehicles() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_vehicles() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.MutableMap();
}

// map<string, .apollo.dreamview.Mode> modes = 7;
inline int HMIConfig::modes_size() const {
  return modes_.size();
}
inline void HMIConfig::clear_modes() {
  modes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >&
HMIConfig::modes() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modes)
  return modes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >*
HMIConfig::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modes)
  return modes_.MutableMap();
}

// optional int32 utm_zone_id = 8;
inline bool HMIConfig::has_utm_zone_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HMIConfig::set_has_utm_zone_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HMIConfig::clear_has_utm_zone_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HMIConfig::clear_utm_zone_id() {
  utm_zone_id_ = 0;
  clear_has_utm_zone_id();
}
inline ::google::protobuf::int32 HMIConfig::utm_zone_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.utm_zone_id)
  return utm_zone_id_;
}
inline void HMIConfig::set_utm_zone_id(::google::protobuf::int32 value) {
  set_has_utm_zone_id();
  utm_zone_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.utm_zone_id)
}

// optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
inline bool HMIConfig::has_audio_capturing_conf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HMIConfig::set_has_audio_capturing_conf() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HMIConfig::clear_has_audio_capturing_conf() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HMIConfig::clear_audio_capturing_conf() {
  if (audio_capturing_conf_ != NULL) audio_capturing_conf_->::apollo::dreamview::AudioCapturingConfig::Clear();
  clear_has_audio_capturing_conf();
}
inline const ::apollo::dreamview::AudioCapturingConfig& HMIConfig::audio_capturing_conf() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.audio_capturing_conf)
  return audio_capturing_conf_ != NULL ? *audio_capturing_conf_ : *default_instance_->audio_capturing_conf_;
}
inline ::apollo::dreamview::AudioCapturingConfig* HMIConfig::mutable_audio_capturing_conf() {
  set_has_audio_capturing_conf();
  if (audio_capturing_conf_ == NULL) {
    audio_capturing_conf_ = new ::apollo::dreamview::AudioCapturingConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIConfig.audio_capturing_conf)
  return audio_capturing_conf_;
}
inline ::apollo::dreamview::AudioCapturingConfig* HMIConfig::release_audio_capturing_conf() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIConfig.audio_capturing_conf)
  clear_has_audio_capturing_conf();
  ::apollo::dreamview::AudioCapturingConfig* temp = audio_capturing_conf_;
  audio_capturing_conf_ = NULL;
  return temp;
}
inline void HMIConfig::set_allocated_audio_capturing_conf(::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf) {
  delete audio_capturing_conf_;
  audio_capturing_conf_ = audio_capturing_conf;
  if (audio_capturing_conf) {
    set_has_audio_capturing_conf();
  } else {
    clear_has_audio_capturing_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIConfig.audio_capturing_conf)
}

// optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
inline bool HMIConfig::has_chassis_high_beam_action() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HMIConfig::set_has_chassis_high_beam_action() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HMIConfig::clear_has_chassis_high_beam_action() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HMIConfig::clear_chassis_high_beam_action() {
  chassis_high_beam_action_ = 0;
  clear_has_chassis_high_beam_action();
}
inline ::apollo::dreamview::HMIAction HMIConfig::chassis_high_beam_action() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.chassis_high_beam_action)
  return static_cast< ::apollo::dreamview::HMIAction >(chassis_high_beam_action_);
}
inline void HMIConfig::set_chassis_high_beam_action(::apollo::dreamview::HMIAction value) {
  assert(::apollo::dreamview::HMIAction_IsValid(value));
  set_has_chassis_high_beam_action();
  chassis_high_beam_action_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.chassis_high_beam_action)
}

// -------------------------------------------------------------------

// VehicleData_DataFile

// optional string source_path = 1;
inline bool VehicleData_DataFile::has_source_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleData_DataFile::set_has_source_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleData_DataFile::clear_has_source_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleData_DataFile::clear_source_path() {
  source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_path();
}
inline const ::std::string& VehicleData_DataFile::source_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.source_path)
  return source_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleData_DataFile::set_source_path(const ::std::string& value) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.source_path)
}
inline void VehicleData_DataFile::set_source_path(const char* value) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.VehicleData.DataFile.source_path)
}
inline void VehicleData_DataFile::set_source_path(const char* value, size_t size) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.VehicleData.DataFile.source_path)
}
inline ::std::string* VehicleData_DataFile::mutable_source_path() {
  set_has_source_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.source_path)
  return source_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleData_DataFile::release_source_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.source_path)
  clear_has_source_path();
  return source_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleData_DataFile::set_allocated_source_path(::std::string* source_path) {
  if (source_path != NULL) {
    set_has_source_path();
  } else {
    clear_has_source_path();
  }
  source_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.source_path)
}

// optional string dest_path = 2;
inline bool VehicleData_DataFile::has_dest_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleData_DataFile::set_has_dest_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleData_DataFile::clear_has_dest_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleData_DataFile::clear_dest_path() {
  dest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_path();
}
inline const ::std::string& VehicleData_DataFile::dest_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleData_DataFile::set_dest_path(const ::std::string& value) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.dest_path)
}
inline void VehicleData_DataFile::set_dest_path(const char* value) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.VehicleData.DataFile.dest_path)
}
inline void VehicleData_DataFile::set_dest_path(const char* value, size_t size) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.VehicleData.DataFile.dest_path)
}
inline ::std::string* VehicleData_DataFile::mutable_dest_path() {
  set_has_dest_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleData_DataFile::release_dest_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.dest_path)
  clear_has_dest_path();
  return dest_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleData_DataFile::set_allocated_dest_path(::std::string* dest_path) {
  if (dest_path != NULL) {
    set_has_dest_path();
  } else {
    clear_has_dest_path();
  }
  dest_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.dest_path)
}

// -------------------------------------------------------------------

// VehicleData

// repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
inline int VehicleData::data_files_size() const {
  return data_files_.size();
}
inline void VehicleData::clear_data_files() {
  data_files_.Clear();
}
inline const ::apollo::dreamview::VehicleData_DataFile& VehicleData::data_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.data_files)
  return data_files_.Get(index);
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::mutable_data_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.data_files)
  return data_files_.Mutable(index);
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::add_data_files() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.VehicleData.data_files)
  return data_files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
VehicleData::mutable_data_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.VehicleData.data_files)
  return &data_files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
VehicleData::data_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.VehicleData.data_files)
  return data_files_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::dreamview::HMIAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::HMIAction>() {
  return ::apollo::dreamview::HMIAction_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dreamview_2fhmi_5fconfig_2eproto__INCLUDED
