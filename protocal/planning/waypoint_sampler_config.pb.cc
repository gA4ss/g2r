// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/waypoint_sampler_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/waypoint_sampler_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* WaypointSamplerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaypointSamplerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/waypoint_sampler_config.proto");
  GOOGLE_CHECK(file != NULL);
  WaypointSamplerConfig_descriptor_ = file->message_type(0);
  static const int WaypointSamplerConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, sample_points_num_each_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, step_length_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, step_length_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, lateral_sample_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, lateral_adjust_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, sidepass_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, navigator_sample_num_each_level_),
  };
  WaypointSamplerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WaypointSamplerConfig_descriptor_,
      WaypointSamplerConfig::default_instance_,
      WaypointSamplerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(WaypointSamplerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointSamplerConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WaypointSamplerConfig_descriptor_, &WaypointSamplerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fwaypoint_5fsampler_5fconfig_2eproto() {
  delete WaypointSamplerConfig::default_instance_;
  delete WaypointSamplerConfig_reflection_;
}

void protobuf_AddDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&planning/waypoint_sampler_config.proto"
    "\022\017apollo.planning\"\204\002\n\025WaypointSamplerCon"
    "fig\022\'\n\034sample_points_num_each_level\030\001 \001("
    "\r:\0019\022\033\n\017step_length_max\030\002 \001(\001:\00215\022\032\n\017ste"
    "p_length_min\030\003 \001(\001:\0018\022\"\n\025lateral_sample_"
    "offset\030\004 \001(\001:\0030.5\022!\n\024lateral_adjust_coef"
    "f\030\005 \001(\001:\0030.5\022\031\n\021sidepass_distance\030\006 \001(\001\022"
    "\'\n\037navigator_sample_num_each_level\030\007 \001(\r", 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/waypoint_sampler_config.proto", &protobuf_RegisterTypes);
  WaypointSamplerConfig::default_instance_ = new WaypointSamplerConfig();
  WaypointSamplerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fwaypoint_5fsampler_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fwaypoint_5fsampler_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fwaypoint_5fsampler_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fwaypoint_5fsampler_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaypointSamplerConfig::kSamplePointsNumEachLevelFieldNumber;
const int WaypointSamplerConfig::kStepLengthMaxFieldNumber;
const int WaypointSamplerConfig::kStepLengthMinFieldNumber;
const int WaypointSamplerConfig::kLateralSampleOffsetFieldNumber;
const int WaypointSamplerConfig::kLateralAdjustCoeffFieldNumber;
const int WaypointSamplerConfig::kSidepassDistanceFieldNumber;
const int WaypointSamplerConfig::kNavigatorSampleNumEachLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaypointSamplerConfig::WaypointSamplerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.WaypointSamplerConfig)
}

void WaypointSamplerConfig::InitAsDefaultInstance() {
}

WaypointSamplerConfig::WaypointSamplerConfig(const WaypointSamplerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.WaypointSamplerConfig)
}

void WaypointSamplerConfig::SharedCtor() {
  _cached_size_ = 0;
  sample_points_num_each_level_ = 9u;
  step_length_max_ = 15;
  step_length_min_ = 8;
  lateral_sample_offset_ = 0.5;
  lateral_adjust_coeff_ = 0.5;
  sidepass_distance_ = 0;
  navigator_sample_num_each_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaypointSamplerConfig::~WaypointSamplerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.WaypointSamplerConfig)
  SharedDtor();
}

void WaypointSamplerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaypointSamplerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaypointSamplerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaypointSamplerConfig_descriptor_;
}

const WaypointSamplerConfig& WaypointSamplerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fwaypoint_5fsampler_5fconfig_2eproto();
  return *default_instance_;
}

WaypointSamplerConfig* WaypointSamplerConfig::default_instance_ = NULL;

WaypointSamplerConfig* WaypointSamplerConfig::New(::google::protobuf::Arena* arena) const {
  WaypointSamplerConfig* n = new WaypointSamplerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WaypointSamplerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.WaypointSamplerConfig)
  if (_has_bits_[0 / 32] & 127u) {
    sample_points_num_each_level_ = 9u;
    step_length_max_ = 15;
    step_length_min_ = 8;
    lateral_sample_offset_ = 0.5;
    lateral_adjust_coeff_ = 0.5;
    sidepass_distance_ = 0;
    navigator_sample_num_each_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WaypointSamplerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.WaypointSamplerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sample_points_num_each_level = 1 [default = 9];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_points_num_each_level_)));
          set_has_sample_points_num_each_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_step_length_max;
        break;
      }

      // optional double step_length_max = 2 [default = 15];
      case 2: {
        if (tag == 17) {
         parse_step_length_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_length_max_)));
          set_has_step_length_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_step_length_min;
        break;
      }

      // optional double step_length_min = 3 [default = 8];
      case 3: {
        if (tag == 25) {
         parse_step_length_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_length_min_)));
          set_has_step_length_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lateral_sample_offset;
        break;
      }

      // optional double lateral_sample_offset = 4 [default = 0.5];
      case 4: {
        if (tag == 33) {
         parse_lateral_sample_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_sample_offset_)));
          set_has_lateral_sample_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lateral_adjust_coeff;
        break;
      }

      // optional double lateral_adjust_coeff = 5 [default = 0.5];
      case 5: {
        if (tag == 41) {
         parse_lateral_adjust_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_adjust_coeff_)));
          set_has_lateral_adjust_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_sidepass_distance;
        break;
      }

      // optional double sidepass_distance = 6;
      case 6: {
        if (tag == 49) {
         parse_sidepass_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sidepass_distance_)));
          set_has_sidepass_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_navigator_sample_num_each_level;
        break;
      }

      // optional uint32 navigator_sample_num_each_level = 7;
      case 7: {
        if (tag == 56) {
         parse_navigator_sample_num_each_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navigator_sample_num_each_level_)));
          set_has_navigator_sample_num_each_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.WaypointSamplerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.WaypointSamplerConfig)
  return false;
#undef DO_
}

void WaypointSamplerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.WaypointSamplerConfig)
  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  if (has_sample_points_num_each_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sample_points_num_each_level(), output);
  }

  // optional double step_length_max = 2 [default = 15];
  if (has_step_length_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->step_length_max(), output);
  }

  // optional double step_length_min = 3 [default = 8];
  if (has_step_length_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->step_length_min(), output);
  }

  // optional double lateral_sample_offset = 4 [default = 0.5];
  if (has_lateral_sample_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lateral_sample_offset(), output);
  }

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  if (has_lateral_adjust_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateral_adjust_coeff(), output);
  }

  // optional double sidepass_distance = 6;
  if (has_sidepass_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sidepass_distance(), output);
  }

  // optional uint32 navigator_sample_num_each_level = 7;
  if (has_navigator_sample_num_each_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->navigator_sample_num_each_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.WaypointSamplerConfig)
}

::google::protobuf::uint8* WaypointSamplerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.WaypointSamplerConfig)
  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  if (has_sample_points_num_each_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sample_points_num_each_level(), target);
  }

  // optional double step_length_max = 2 [default = 15];
  if (has_step_length_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->step_length_max(), target);
  }

  // optional double step_length_min = 3 [default = 8];
  if (has_step_length_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->step_length_min(), target);
  }

  // optional double lateral_sample_offset = 4 [default = 0.5];
  if (has_lateral_sample_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lateral_sample_offset(), target);
  }

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  if (has_lateral_adjust_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateral_adjust_coeff(), target);
  }

  // optional double sidepass_distance = 6;
  if (has_sidepass_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sidepass_distance(), target);
  }

  // optional uint32 navigator_sample_num_each_level = 7;
  if (has_navigator_sample_num_each_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->navigator_sample_num_each_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.WaypointSamplerConfig)
  return target;
}

int WaypointSamplerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.WaypointSamplerConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 sample_points_num_each_level = 1 [default = 9];
    if (has_sample_points_num_each_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_points_num_each_level());
    }

    // optional double step_length_max = 2 [default = 15];
    if (has_step_length_max()) {
      total_size += 1 + 8;
    }

    // optional double step_length_min = 3 [default = 8];
    if (has_step_length_min()) {
      total_size += 1 + 8;
    }

    // optional double lateral_sample_offset = 4 [default = 0.5];
    if (has_lateral_sample_offset()) {
      total_size += 1 + 8;
    }

    // optional double lateral_adjust_coeff = 5 [default = 0.5];
    if (has_lateral_adjust_coeff()) {
      total_size += 1 + 8;
    }

    // optional double sidepass_distance = 6;
    if (has_sidepass_distance()) {
      total_size += 1 + 8;
    }

    // optional uint32 navigator_sample_num_each_level = 7;
    if (has_navigator_sample_num_each_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->navigator_sample_num_each_level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaypointSamplerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.WaypointSamplerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WaypointSamplerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WaypointSamplerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.WaypointSamplerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.WaypointSamplerConfig)
    MergeFrom(*source);
  }
}

void WaypointSamplerConfig::MergeFrom(const WaypointSamplerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.WaypointSamplerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_points_num_each_level()) {
      set_sample_points_num_each_level(from.sample_points_num_each_level());
    }
    if (from.has_step_length_max()) {
      set_step_length_max(from.step_length_max());
    }
    if (from.has_step_length_min()) {
      set_step_length_min(from.step_length_min());
    }
    if (from.has_lateral_sample_offset()) {
      set_lateral_sample_offset(from.lateral_sample_offset());
    }
    if (from.has_lateral_adjust_coeff()) {
      set_lateral_adjust_coeff(from.lateral_adjust_coeff());
    }
    if (from.has_sidepass_distance()) {
      set_sidepass_distance(from.sidepass_distance());
    }
    if (from.has_navigator_sample_num_each_level()) {
      set_navigator_sample_num_each_level(from.navigator_sample_num_each_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WaypointSamplerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.WaypointSamplerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointSamplerConfig::CopyFrom(const WaypointSamplerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.WaypointSamplerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointSamplerConfig::IsInitialized() const {

  return true;
}

void WaypointSamplerConfig::Swap(WaypointSamplerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaypointSamplerConfig::InternalSwap(WaypointSamplerConfig* other) {
  std::swap(sample_points_num_each_level_, other->sample_points_num_each_level_);
  std::swap(step_length_max_, other->step_length_max_);
  std::swap(step_length_min_, other->step_length_min_);
  std::swap(lateral_sample_offset_, other->lateral_sample_offset_);
  std::swap(lateral_adjust_coeff_, other->lateral_adjust_coeff_);
  std::swap(sidepass_distance_, other->sidepass_distance_);
  std::swap(navigator_sample_num_each_level_, other->navigator_sample_num_each_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WaypointSamplerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaypointSamplerConfig_descriptor_;
  metadata.reflection = WaypointSamplerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WaypointSamplerConfig

// optional uint32 sample_points_num_each_level = 1 [default = 9];
bool WaypointSamplerConfig::has_sample_points_num_each_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WaypointSamplerConfig::set_has_sample_points_num_each_level() {
  _has_bits_[0] |= 0x00000001u;
}
void WaypointSamplerConfig::clear_has_sample_points_num_each_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void WaypointSamplerConfig::clear_sample_points_num_each_level() {
  sample_points_num_each_level_ = 9u;
  clear_has_sample_points_num_each_level();
}
 ::google::protobuf::uint32 WaypointSamplerConfig::sample_points_num_each_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WaypointSamplerConfig.sample_points_num_each_level)
  return sample_points_num_each_level_;
}
 void WaypointSamplerConfig::set_sample_points_num_each_level(::google::protobuf::uint32 value) {
  set_has_sample_points_num_each_level();
  sample_points_num_each_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WaypointSamplerConfig.sample_points_num_each_level)
}

// optional double step_length_max = 2 [default = 15];
bool WaypointSamplerConfig::has_step_length_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WaypointSamplerConfig::set_has_step_length_max() {
  _has_bits_[0] |= 0x00000002u;
}
void WaypointSamplerConfig::clear_has_step_length_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void WaypointSamplerConfig::clear_step_length_max() {
  step_length_max_ = 15;
  clear_has_step_length_max();
}
 double WaypointSamplerConfig::step_length_max() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WaypointSamplerConfig.step_length_max)
  return step_length_max_;
}
 void WaypointSamplerConfig::set_step_length_max(double value) {
  set_has_step_length_max();
  step_length_max_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WaypointSamplerConfig.step_length_max)
}

// optional double step_length_min = 3 [default = 8];
bool WaypointSamplerConfig::has_step_length_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WaypointSamplerConfig::set_has_step_length_min() {
  _has_bits_[0] |= 0x00000004u;
}
void WaypointSamplerConfig::clear_has_step_length_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void WaypointSamplerConfig::clear_step_length_min() {
  step_length_min_ = 8;
  clear_has_step_length_min();
}
 double WaypointSamplerConfig::step_length_min() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WaypointSamplerConfig.step_length_min)
  return step_length_min_;
}
 void WaypointSamplerConfig::set_step_length_min(double value) {
  set_has_step_length_min();
  step_length_min_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WaypointSamplerConfig.step_length_min)
}

// optional double lateral_sample_offset = 4 [default = 0.5];
bool WaypointSamplerConfig::has_lateral_sample_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WaypointSamplerConfig::set_has_lateral_sample_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void WaypointSamplerConfig::clear_has_lateral_sample_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void WaypointSamplerConfig::clear_lateral_sample_offset() {
  lateral_sample_offset_ = 0.5;
  clear_has_lateral_sample_offset();
}
 double WaypointSamplerConfig::lateral_sample_offset() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WaypointSamplerConfig.lateral_sample_offset)
  return lateral_sample_offset_;
}
 void WaypointSamplerConfig::set_lateral_sample_offset(double value) {
  set_has_lateral_sample_offset();
  lateral_sample_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WaypointSamplerConfig.lateral_sample_offset)
}

// optional double lateral_adjust_coeff = 5 [default = 0.5];
bool WaypointSamplerConfig::has_lateral_adjust_coeff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WaypointSamplerConfig::set_has_lateral_adjust_coeff() {
  _has_bits_[0] |= 0x00000010u;
}
void WaypointSamplerConfig::clear_has_lateral_adjust_coeff() {
  _has_bits_[0] &= ~0x00000010u;
}
void WaypointSamplerConfig::clear_lateral_adjust_coeff() {
  lateral_adjust_coeff_ = 0.5;
  clear_has_lateral_adjust_coeff();
}
 double WaypointSamplerConfig::lateral_adjust_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WaypointSamplerConfig.lateral_adjust_coeff)
  return lateral_adjust_coeff_;
}
 void WaypointSamplerConfig::set_lateral_adjust_coeff(double value) {
  set_has_lateral_adjust_coeff();
  lateral_adjust_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WaypointSamplerConfig.lateral_adjust_coeff)
}

// optional double sidepass_distance = 6;
bool WaypointSamplerConfig::has_sidepass_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WaypointSamplerConfig::set_has_sidepass_distance() {
  _has_bits_[0] |= 0x00000020u;
}
void WaypointSamplerConfig::clear_has_sidepass_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
void WaypointSamplerConfig::clear_sidepass_distance() {
  sidepass_distance_ = 0;
  clear_has_sidepass_distance();
}
 double WaypointSamplerConfig::sidepass_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WaypointSamplerConfig.sidepass_distance)
  return sidepass_distance_;
}
 void WaypointSamplerConfig::set_sidepass_distance(double value) {
  set_has_sidepass_distance();
  sidepass_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WaypointSamplerConfig.sidepass_distance)
}

// optional uint32 navigator_sample_num_each_level = 7;
bool WaypointSamplerConfig::has_navigator_sample_num_each_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WaypointSamplerConfig::set_has_navigator_sample_num_each_level() {
  _has_bits_[0] |= 0x00000040u;
}
void WaypointSamplerConfig::clear_has_navigator_sample_num_each_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void WaypointSamplerConfig::clear_navigator_sample_num_each_level() {
  navigator_sample_num_each_level_ = 0u;
  clear_has_navigator_sample_num_each_level();
}
 ::google::protobuf::uint32 WaypointSamplerConfig::navigator_sample_num_each_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WaypointSamplerConfig.navigator_sample_num_each_level)
  return navigator_sample_num_each_level_;
}
 void WaypointSamplerConfig::set_navigator_sample_num_each_level(::google::protobuf::uint32 value) {
  set_has_navigator_sample_num_each_level();
  navigator_sample_num_each_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WaypointSamplerConfig.navigator_sample_num_each_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
