// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dreamview/hmi_status.proto

#ifndef PROTOBUF_dreamview_2fhmi_5fstatus_2eproto__INCLUDED
#define PROTOBUF_dreamview_2fhmi_5fstatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "monitor/system_status.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace dreamview {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dreamview_2fhmi_5fstatus_2eproto();
void protobuf_AssignDesc_dreamview_2fhmi_5fstatus_2eproto();
void protobuf_ShutdownFile_dreamview_2fhmi_5fstatus_2eproto();

class HMIStatus;

// ===================================================================

class HMIStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIStatus) */ {
 public:
  HMIStatus();
  virtual ~HMIStatus();

  HMIStatus(const HMIStatus& from);

  inline HMIStatus& operator=(const HMIStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HMIStatus& default_instance();

  void Swap(HMIStatus* other);

  // implements Message ----------------------------------------------

  inline HMIStatus* New() const { return New(NULL); }

  HMIStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HMIStatus& from);
  void MergeFrom(const HMIStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HMIStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.monitor.SystemStatus system_status = 1;
  bool has_system_status() const;
  void clear_system_status();
  static const int kSystemStatusFieldNumber = 1;
  const ::apollo::monitor::SystemStatus& system_status() const;
  ::apollo::monitor::SystemStatus* mutable_system_status();
  ::apollo::monitor::SystemStatus* release_system_status();
  void set_allocated_system_status(::apollo::monitor::SystemStatus* system_status);

  // optional string current_map = 2;
  bool has_current_map() const;
  void clear_current_map();
  static const int kCurrentMapFieldNumber = 2;
  const ::std::string& current_map() const;
  void set_current_map(const ::std::string& value);
  void set_current_map(const char* value);
  void set_current_map(const char* value, size_t size);
  ::std::string* mutable_current_map();
  ::std::string* release_current_map();
  void set_allocated_current_map(::std::string* current_map);

  // optional string current_vehicle = 3;
  bool has_current_vehicle() const;
  void clear_current_vehicle();
  static const int kCurrentVehicleFieldNumber = 3;
  const ::std::string& current_vehicle() const;
  void set_current_vehicle(const ::std::string& value);
  void set_current_vehicle(const char* value);
  void set_current_vehicle(const char* value, size_t size);
  ::std::string* mutable_current_vehicle();
  ::std::string* release_current_vehicle();
  void set_allocated_current_vehicle(::std::string* current_vehicle);

  // optional string current_mode = 4 [default = "Standard"];
  bool has_current_mode() const;
  void clear_current_mode();
  static const int kCurrentModeFieldNumber = 4;
  const ::std::string& current_mode() const;
  void set_current_mode(const ::std::string& value);
  void set_current_mode(const char* value);
  void set_current_mode(const char* value, size_t size);
  ::std::string* mutable_current_mode();
  ::std::string* release_current_mode();
  void set_allocated_current_mode(::std::string* current_mode);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIStatus)
 private:
  inline void set_has_system_status();
  inline void clear_has_system_status();
  inline void set_has_current_map();
  inline void clear_has_current_map();
  inline void set_has_current_vehicle();
  inline void clear_has_current_vehicle();
  inline void set_has_current_mode();
  inline void clear_has_current_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::monitor::SystemStatus* system_status_;
  ::google::protobuf::internal::ArenaStringPtr current_map_;
  ::google::protobuf::internal::ArenaStringPtr current_vehicle_;
  static ::std::string* _default_current_mode_;
  ::google::protobuf::internal::ArenaStringPtr current_mode_;
  friend void  protobuf_AddDesc_dreamview_2fhmi_5fstatus_2eproto();
  friend void protobuf_AssignDesc_dreamview_2fhmi_5fstatus_2eproto();
  friend void protobuf_ShutdownFile_dreamview_2fhmi_5fstatus_2eproto();

  void InitAsDefaultInstance();
  static HMIStatus* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HMIStatus

// optional .apollo.monitor.SystemStatus system_status = 1;
inline bool HMIStatus::has_system_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HMIStatus::set_has_system_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HMIStatus::clear_has_system_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HMIStatus::clear_system_status() {
  if (system_status_ != NULL) system_status_->::apollo::monitor::SystemStatus::Clear();
  clear_has_system_status();
}
inline const ::apollo::monitor::SystemStatus& HMIStatus::system_status() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.system_status)
  return system_status_ != NULL ? *system_status_ : *default_instance_->system_status_;
}
inline ::apollo::monitor::SystemStatus* HMIStatus::mutable_system_status() {
  set_has_system_status();
  if (system_status_ == NULL) {
    system_status_ = new ::apollo::monitor::SystemStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.system_status)
  return system_status_;
}
inline ::apollo::monitor::SystemStatus* HMIStatus::release_system_status() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.system_status)
  clear_has_system_status();
  ::apollo::monitor::SystemStatus* temp = system_status_;
  system_status_ = NULL;
  return temp;
}
inline void HMIStatus::set_allocated_system_status(::apollo::monitor::SystemStatus* system_status) {
  delete system_status_;
  system_status_ = system_status;
  if (system_status) {
    set_has_system_status();
  } else {
    clear_has_system_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.system_status)
}

// optional string current_map = 2;
inline bool HMIStatus::has_current_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HMIStatus::set_has_current_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HMIStatus::clear_has_current_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HMIStatus::clear_current_map() {
  current_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_map();
}
inline const ::std::string& HMIStatus::current_map() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_map)
  return current_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_current_map(const ::std::string& value) {
  set_has_current_map();
  current_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_map)
}
inline void HMIStatus::set_current_map(const char* value) {
  set_has_current_map();
  current_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_map)
}
inline void HMIStatus::set_current_map(const char* value, size_t size) {
  set_has_current_map();
  current_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_map)
}
inline ::std::string* HMIStatus::mutable_current_map() {
  set_has_current_map();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_map)
  return current_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIStatus::release_current_map() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_map)
  clear_has_current_map();
  return current_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_map(::std::string* current_map) {
  if (current_map != NULL) {
    set_has_current_map();
  } else {
    clear_has_current_map();
  }
  current_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_map);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_map)
}

// optional string current_vehicle = 3;
inline bool HMIStatus::has_current_vehicle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HMIStatus::set_has_current_vehicle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HMIStatus::clear_has_current_vehicle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HMIStatus::clear_current_vehicle() {
  current_vehicle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_vehicle();
}
inline const ::std::string& HMIStatus::current_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_vehicle)
  return current_vehicle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_current_vehicle(const ::std::string& value) {
  set_has_current_vehicle();
  current_vehicle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_vehicle)
}
inline void HMIStatus::set_current_vehicle(const char* value) {
  set_has_current_vehicle();
  current_vehicle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_vehicle)
}
inline void HMIStatus::set_current_vehicle(const char* value, size_t size) {
  set_has_current_vehicle();
  current_vehicle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_vehicle)
}
inline ::std::string* HMIStatus::mutable_current_vehicle() {
  set_has_current_vehicle();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_vehicle)
  return current_vehicle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIStatus::release_current_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_vehicle)
  clear_has_current_vehicle();
  return current_vehicle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_vehicle(::std::string* current_vehicle) {
  if (current_vehicle != NULL) {
    set_has_current_vehicle();
  } else {
    clear_has_current_vehicle();
  }
  current_vehicle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_vehicle);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_vehicle)
}

// optional string current_mode = 4 [default = "Standard"];
inline bool HMIStatus::has_current_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HMIStatus::set_has_current_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HMIStatus::clear_has_current_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HMIStatus::clear_current_mode() {
  current_mode_.ClearToDefaultNoArena(_default_current_mode_);
  clear_has_current_mode();
}
inline const ::std::string& HMIStatus::current_mode() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_mode)
  return current_mode_.GetNoArena(_default_current_mode_);
}
inline void HMIStatus::set_current_mode(const ::std::string& value) {
  set_has_current_mode();
  current_mode_.SetNoArena(_default_current_mode_, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_mode)
}
inline void HMIStatus::set_current_mode(const char* value) {
  set_has_current_mode();
  current_mode_.SetNoArena(_default_current_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_mode)
}
inline void HMIStatus::set_current_mode(const char* value, size_t size) {
  set_has_current_mode();
  current_mode_.SetNoArena(_default_current_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_mode)
}
inline ::std::string* HMIStatus::mutable_current_mode() {
  set_has_current_mode();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_mode)
  return current_mode_.MutableNoArena(_default_current_mode_);
}
inline ::std::string* HMIStatus::release_current_mode() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_mode)
  clear_has_current_mode();
  return current_mode_.ReleaseNoArena(_default_current_mode_);
}
inline void HMIStatus::set_allocated_current_mode(::std::string* current_mode) {
  if (current_mode != NULL) {
    set_has_current_mode();
  } else {
    clear_has_current_mode();
  }
  current_mode_.SetAllocatedNoArena(_default_current_mode_, current_mode);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_mode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dreamview_2fhmi_5fstatus_2eproto__INCLUDED
