// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/planning_stats.proto

#ifndef PROTOBUF_planning_2fplanning_5fstats_2eproto__INCLUDED
#define PROTOBUF_planning_2fplanning_5fstats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fplanning_5fstats_2eproto();
void protobuf_AssignDesc_planning_2fplanning_5fstats_2eproto();
void protobuf_ShutdownFile_planning_2fplanning_5fstats_2eproto();

class PlanningStats;
class StatsGroup;

// ===================================================================

class StatsGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StatsGroup) */ {
 public:
  StatsGroup();
  virtual ~StatsGroup();

  StatsGroup(const StatsGroup& from);

  inline StatsGroup& operator=(const StatsGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatsGroup& default_instance();

  void Swap(StatsGroup* other);

  // implements Message ----------------------------------------------

  inline StatsGroup* New() const { return New(NULL); }

  StatsGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatsGroup& from);
  void MergeFrom(const StatsGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatsGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max = 1;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 1;
  double max() const;
  void set_max(double value);

  // optional double min = 2 [default = 10000000000];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  double min() const;
  void set_min(double value);

  // optional double sum = 3;
  bool has_sum() const;
  void clear_sum();
  static const int kSumFieldNumber = 3;
  double sum() const;
  void set_sum(double value);

  // optional double avg = 4;
  bool has_avg() const;
  void clear_avg();
  static const int kAvgFieldNumber = 4;
  double avg() const;
  void set_avg(double value);

  // optional int32 num = 5;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 5;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.planning.StatsGroup)
 private:
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_avg();
  inline void clear_has_avg();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_;
  double min_;
  double sum_;
  double avg_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fstats_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fstats_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fstats_2eproto();

  void InitAsDefaultInstance();
  static StatsGroup* default_instance_;
};
// -------------------------------------------------------------------

class PlanningStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningStats) */ {
 public:
  PlanningStats();
  virtual ~PlanningStats();

  PlanningStats(const PlanningStats& from);

  inline PlanningStats& operator=(const PlanningStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningStats& default_instance();

  void Swap(PlanningStats* other);

  // implements Message ----------------------------------------------

  inline PlanningStats* New() const { return New(NULL); }

  PlanningStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanningStats& from);
  void MergeFrom(const PlanningStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlanningStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.StatsGroup total_path_length = 1;
  bool has_total_path_length() const;
  void clear_total_path_length();
  static const int kTotalPathLengthFieldNumber = 1;
  const ::apollo::planning::StatsGroup& total_path_length() const;
  ::apollo::planning::StatsGroup* mutable_total_path_length();
  ::apollo::planning::StatsGroup* release_total_path_length();
  void set_allocated_total_path_length(::apollo::planning::StatsGroup* total_path_length);

  // optional .apollo.planning.StatsGroup total_path_time = 2;
  bool has_total_path_time() const;
  void clear_total_path_time();
  static const int kTotalPathTimeFieldNumber = 2;
  const ::apollo::planning::StatsGroup& total_path_time() const;
  ::apollo::planning::StatsGroup* mutable_total_path_time();
  ::apollo::planning::StatsGroup* release_total_path_time();
  void set_allocated_total_path_time(::apollo::planning::StatsGroup* total_path_time);

  // optional .apollo.planning.StatsGroup v = 3;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 3;
  const ::apollo::planning::StatsGroup& v() const;
  ::apollo::planning::StatsGroup* mutable_v();
  ::apollo::planning::StatsGroup* release_v();
  void set_allocated_v(::apollo::planning::StatsGroup* v);

  // optional .apollo.planning.StatsGroup a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  const ::apollo::planning::StatsGroup& a() const;
  ::apollo::planning::StatsGroup* mutable_a();
  ::apollo::planning::StatsGroup* release_a();
  void set_allocated_a(::apollo::planning::StatsGroup* a);

  // optional .apollo.planning.StatsGroup kappa = 5;
  bool has_kappa() const;
  void clear_kappa();
  static const int kKappaFieldNumber = 5;
  const ::apollo::planning::StatsGroup& kappa() const;
  ::apollo::planning::StatsGroup* mutable_kappa();
  ::apollo::planning::StatsGroup* release_kappa();
  void set_allocated_kappa(::apollo::planning::StatsGroup* kappa);

  // optional .apollo.planning.StatsGroup dkappa = 6;
  bool has_dkappa() const;
  void clear_dkappa();
  static const int kDkappaFieldNumber = 6;
  const ::apollo::planning::StatsGroup& dkappa() const;
  ::apollo::planning::StatsGroup* mutable_dkappa();
  ::apollo::planning::StatsGroup* release_dkappa();
  void set_allocated_dkappa(::apollo::planning::StatsGroup* dkappa);

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningStats)
 private:
  inline void set_has_total_path_length();
  inline void clear_has_total_path_length();
  inline void set_has_total_path_time();
  inline void clear_has_total_path_time();
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_kappa();
  inline void clear_has_kappa();
  inline void set_has_dkappa();
  inline void clear_has_dkappa();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::StatsGroup* total_path_length_;
  ::apollo::planning::StatsGroup* total_path_time_;
  ::apollo::planning::StatsGroup* v_;
  ::apollo::planning::StatsGroup* a_;
  ::apollo::planning::StatsGroup* kappa_;
  ::apollo::planning::StatsGroup* dkappa_;
  friend void  protobuf_AddDesc_planning_2fplanning_5fstats_2eproto();
  friend void protobuf_AssignDesc_planning_2fplanning_5fstats_2eproto();
  friend void protobuf_ShutdownFile_planning_2fplanning_5fstats_2eproto();

  void InitAsDefaultInstance();
  static PlanningStats* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StatsGroup

// optional double max = 1;
inline bool StatsGroup::has_max() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatsGroup::set_has_max() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatsGroup::clear_has_max() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatsGroup::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double StatsGroup::max() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.max)
  return max_;
}
inline void StatsGroup::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.max)
}

// optional double min = 2 [default = 10000000000];
inline bool StatsGroup::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatsGroup::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatsGroup::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatsGroup::clear_min() {
  min_ = 10000000000;
  clear_has_min();
}
inline double StatsGroup::min() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.min)
  return min_;
}
inline void StatsGroup::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.min)
}

// optional double sum = 3;
inline bool StatsGroup::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatsGroup::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatsGroup::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatsGroup::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
inline double StatsGroup::sum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.sum)
  return sum_;
}
inline void StatsGroup::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.sum)
}

// optional double avg = 4;
inline bool StatsGroup::has_avg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatsGroup::set_has_avg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatsGroup::clear_has_avg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatsGroup::clear_avg() {
  avg_ = 0;
  clear_has_avg();
}
inline double StatsGroup::avg() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.avg)
  return avg_;
}
inline void StatsGroup::set_avg(double value) {
  set_has_avg();
  avg_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.avg)
}

// optional int32 num = 5;
inline bool StatsGroup::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatsGroup::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatsGroup::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatsGroup::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 StatsGroup::num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.num)
  return num_;
}
inline void StatsGroup::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.num)
}

// -------------------------------------------------------------------

// PlanningStats

// optional .apollo.planning.StatsGroup total_path_length = 1;
inline bool PlanningStats::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningStats::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningStats::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningStats::clear_total_path_length() {
  if (total_path_length_ != NULL) total_path_length_->::apollo::planning::StatsGroup::Clear();
  clear_has_total_path_length();
}
inline const ::apollo::planning::StatsGroup& PlanningStats::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_length)
  return total_path_length_ != NULL ? *total_path_length_ : *default_instance_->total_path_length_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_length() {
  set_has_total_path_length();
  if (total_path_length_ == NULL) {
    total_path_length_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_length)
  return total_path_length_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_total_path_length() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_length)
  clear_has_total_path_length();
  ::apollo::planning::StatsGroup* temp = total_path_length_;
  total_path_length_ = NULL;
  return temp;
}
inline void PlanningStats::set_allocated_total_path_length(::apollo::planning::StatsGroup* total_path_length) {
  delete total_path_length_;
  total_path_length_ = total_path_length;
  if (total_path_length) {
    set_has_total_path_length();
  } else {
    clear_has_total_path_length();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_length)
}

// optional .apollo.planning.StatsGroup total_path_time = 2;
inline bool PlanningStats::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningStats::set_has_total_path_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningStats::clear_has_total_path_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningStats::clear_total_path_time() {
  if (total_path_time_ != NULL) total_path_time_->::apollo::planning::StatsGroup::Clear();
  clear_has_total_path_time();
}
inline const ::apollo::planning::StatsGroup& PlanningStats::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_time)
  return total_path_time_ != NULL ? *total_path_time_ : *default_instance_->total_path_time_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_time() {
  set_has_total_path_time();
  if (total_path_time_ == NULL) {
    total_path_time_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_time)
  return total_path_time_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_total_path_time() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_time)
  clear_has_total_path_time();
  ::apollo::planning::StatsGroup* temp = total_path_time_;
  total_path_time_ = NULL;
  return temp;
}
inline void PlanningStats::set_allocated_total_path_time(::apollo::planning::StatsGroup* total_path_time) {
  delete total_path_time_;
  total_path_time_ = total_path_time;
  if (total_path_time) {
    set_has_total_path_time();
  } else {
    clear_has_total_path_time();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_time)
}

// optional .apollo.planning.StatsGroup v = 3;
inline bool PlanningStats::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningStats::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanningStats::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanningStats::clear_v() {
  if (v_ != NULL) v_->::apollo::planning::StatsGroup::Clear();
  clear_has_v();
}
inline const ::apollo::planning::StatsGroup& PlanningStats::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.v)
  return v_ != NULL ? *v_ : *default_instance_->v_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_v() {
  set_has_v();
  if (v_ == NULL) {
    v_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.v)
  return v_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_v() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.v)
  clear_has_v();
  ::apollo::planning::StatsGroup* temp = v_;
  v_ = NULL;
  return temp;
}
inline void PlanningStats::set_allocated_v(::apollo::planning::StatsGroup* v) {
  delete v_;
  v_ = v;
  if (v) {
    set_has_v();
  } else {
    clear_has_v();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.v)
}

// optional .apollo.planning.StatsGroup a = 4;
inline bool PlanningStats::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningStats::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanningStats::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanningStats::clear_a() {
  if (a_ != NULL) a_->::apollo::planning::StatsGroup::Clear();
  clear_has_a();
}
inline const ::apollo::planning::StatsGroup& PlanningStats::a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    a_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.a)
  return a_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_a() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.a)
  clear_has_a();
  ::apollo::planning::StatsGroup* temp = a_;
  a_ = NULL;
  return temp;
}
inline void PlanningStats::set_allocated_a(::apollo::planning::StatsGroup* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.a)
}

// optional .apollo.planning.StatsGroup kappa = 5;
inline bool PlanningStats::has_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningStats::set_has_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanningStats::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanningStats::clear_kappa() {
  if (kappa_ != NULL) kappa_->::apollo::planning::StatsGroup::Clear();
  clear_has_kappa();
}
inline const ::apollo::planning::StatsGroup& PlanningStats::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.kappa)
  return kappa_ != NULL ? *kappa_ : *default_instance_->kappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_kappa() {
  set_has_kappa();
  if (kappa_ == NULL) {
    kappa_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.kappa)
  return kappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_kappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.kappa)
  clear_has_kappa();
  ::apollo::planning::StatsGroup* temp = kappa_;
  kappa_ = NULL;
  return temp;
}
inline void PlanningStats::set_allocated_kappa(::apollo::planning::StatsGroup* kappa) {
  delete kappa_;
  kappa_ = kappa;
  if (kappa) {
    set_has_kappa();
  } else {
    clear_has_kappa();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.kappa)
}

// optional .apollo.planning.StatsGroup dkappa = 6;
inline bool PlanningStats::has_dkappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningStats::set_has_dkappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanningStats::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanningStats::clear_dkappa() {
  if (dkappa_ != NULL) dkappa_->::apollo::planning::StatsGroup::Clear();
  clear_has_dkappa();
}
inline const ::apollo::planning::StatsGroup& PlanningStats::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.dkappa)
  return dkappa_ != NULL ? *dkappa_ : *default_instance_->dkappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_dkappa() {
  set_has_dkappa();
  if (dkappa_ == NULL) {
    dkappa_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.dkappa)
  return dkappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_dkappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.dkappa)
  clear_has_dkappa();
  ::apollo::planning::StatsGroup* temp = dkappa_;
  dkappa_ = NULL;
  return temp;
}
inline void PlanningStats::set_allocated_dkappa(::apollo::planning::StatsGroup* dkappa) {
  delete dkappa_;
  dkappa_ = dkappa;
  if (dkappa) {
    set_has_dkappa();
  } else {
    clear_has_dkappa();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.dkappa)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fplanning_5fstats_2eproto__INCLUDED
