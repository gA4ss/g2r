// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing/poi.proto

#ifndef PROTOBUF_routing_2fpoi_2eproto__INCLUDED
#define PROTOBUF_routing_2fpoi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "routing/routing.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace routing {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_routing_2fpoi_2eproto();
void protobuf_AssignDesc_routing_2fpoi_2eproto();
void protobuf_ShutdownFile_routing_2fpoi_2eproto();

class Landmark;
class POI;

// ===================================================================

class Landmark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Landmark) */ {
 public:
  Landmark();
  virtual ~Landmark();

  Landmark(const Landmark& from);

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Landmark& default_instance();

  void Swap(Landmark* other);

  // implements Message ----------------------------------------------

  inline Landmark* New() const { return New(NULL); }

  Landmark* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Landmark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  int waypoint_size() const;
  void clear_waypoint();
  static const int kWaypointFieldNumber = 2;
  const ::apollo::routing::LaneWaypoint& waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* mutable_waypoint(int index);
  ::apollo::routing::LaneWaypoint* add_waypoint();
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
      mutable_waypoint();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
      waypoint() const;

  // @@protoc_insertion_point(class_scope:apollo.routing.Landmark)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint > waypoint_;
  friend void  protobuf_AddDesc_routing_2fpoi_2eproto();
  friend void protobuf_AssignDesc_routing_2fpoi_2eproto();
  friend void protobuf_ShutdownFile_routing_2fpoi_2eproto();

  void InitAsDefaultInstance();
  static Landmark* default_instance_;
};
// -------------------------------------------------------------------

class POI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.POI) */ {
 public:
  POI();
  virtual ~POI();

  POI(const POI& from);

  inline POI& operator=(const POI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const POI& default_instance();

  void Swap(POI* other);

  // implements Message ----------------------------------------------

  inline POI* New() const { return New(NULL); }

  POI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const POI& from);
  void MergeFrom(const POI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(POI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.routing.Landmark landmark = 1;
  int landmark_size() const;
  void clear_landmark();
  static const int kLandmarkFieldNumber = 1;
  const ::apollo::routing::Landmark& landmark(int index) const;
  ::apollo::routing::Landmark* mutable_landmark(int index);
  ::apollo::routing::Landmark* add_landmark();
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >*
      mutable_landmark();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:apollo.routing.POI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark > landmark_;
  friend void  protobuf_AddDesc_routing_2fpoi_2eproto();
  friend void protobuf_AssignDesc_routing_2fpoi_2eproto();
  friend void protobuf_ShutdownFile_routing_2fpoi_2eproto();

  void InitAsDefaultInstance();
  static POI* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Landmark

// optional string name = 1;
inline bool Landmark::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Landmark::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Landmark::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Landmark::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Landmark::name() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Landmark::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.name)
}
inline void Landmark::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Landmark.name)
}
inline void Landmark::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Landmark.name)
}
inline ::std::string* Landmark::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Landmark::release_name() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Landmark::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.name)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
inline int Landmark::waypoint_size() const {
  return waypoint_.size();
}
inline void Landmark::clear_waypoint() {
  waypoint_.Clear();
}
inline const ::apollo::routing::LaneWaypoint& Landmark::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.waypoint)
  return waypoint_.Get(index);
}
inline ::apollo::routing::LaneWaypoint* Landmark::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.waypoint)
  return waypoint_.Mutable(index);
}
inline ::apollo::routing::LaneWaypoint* Landmark::add_waypoint() {
  // @@protoc_insertion_point(field_add:apollo.routing.Landmark.waypoint)
  return waypoint_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
Landmark::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Landmark.waypoint)
  return &waypoint_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
Landmark::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Landmark.waypoint)
  return waypoint_;
}

// -------------------------------------------------------------------

// POI

// repeated .apollo.routing.Landmark landmark = 1;
inline int POI::landmark_size() const {
  return landmark_.size();
}
inline void POI::clear_landmark() {
  landmark_.Clear();
}
inline const ::apollo::routing::Landmark& POI::landmark(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.POI.landmark)
  return landmark_.Get(index);
}
inline ::apollo::routing::Landmark* POI::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.POI.landmark)
  return landmark_.Mutable(index);
}
inline ::apollo::routing::Landmark* POI::add_landmark() {
  // @@protoc_insertion_point(field_add:apollo.routing.POI.landmark)
  return landmark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >*
POI::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.POI.landmark)
  return &landmark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >&
POI::landmark() const {
  // @@protoc_insertion_point(field_list:apollo.routing.POI.landmark)
  return landmark_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_routing_2fpoi_2eproto__INCLUDED
