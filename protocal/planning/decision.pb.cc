// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* TargetLane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetLane_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectIgnore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectIgnore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectNudge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectNudge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectYield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectYield_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectFollow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectFollow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectOvertake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectOvertake_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectSidePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectSidePass_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectAvoid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAvoid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDecisionType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDecisionType_reflection_ = NULL;
struct ObjectDecisionTypeOneofInstance {
  const ::apollo::planning::ObjectIgnore* ignore_;
  const ::apollo::planning::ObjectStop* stop_;
  const ::apollo::planning::ObjectFollow* follow_;
  const ::apollo::planning::ObjectYield* yield_;
  const ::apollo::planning::ObjectOvertake* overtake_;
  const ::apollo::planning::ObjectNudge* nudge_;
  const ::apollo::planning::ObjectSidePass* sidepass_;
  const ::apollo::planning::ObjectAvoid* avoid_;
}* ObjectDecisionType_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ObjectDecision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDecision_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDecisions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDecisions_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmergencyStopHardBrake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmergencyStopHardBrake_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmergencyStopCruiseToStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmergencyStopCruiseToStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainEmergencyStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainEmergencyStop_reflection_ = NULL;
struct MainEmergencyStopOneofInstance {
  const ::apollo::planning::EmergencyStopHardBrake* hard_brake_;
  const ::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop_;
}* MainEmergencyStop_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MainCruise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainCruise_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainChangeLane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainChangeLane_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MainMissionComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainMissionComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainNotReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainNotReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainParking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainParking_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainDecision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainDecision_reflection_ = NULL;
struct MainDecisionOneofInstance {
  const ::apollo::planning::MainCruise* cruise_;
  const ::apollo::planning::MainStop* stop_;
  const ::apollo::planning::MainEmergencyStop* estop_;
  const ::apollo::planning::MainChangeLane* change_lane_;
  const ::apollo::planning::MainMissionComplete* mission_complete_;
  const ::apollo::planning::MainNotReady* not_ready_;
  const ::apollo::planning::MainParking* parking_;
}* MainDecision_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* DecisionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fdecision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fdecision_2eproto() {
  protobuf_AddDesc_planning_2fdecision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/decision.proto");
  GOOGLE_CHECK(file != NULL);
  TargetLane_descriptor_ = file->message_type(0);
  static const int TargetLane_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, start_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, end_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, speed_limit_),
  };
  TargetLane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetLane_descriptor_,
      TargetLane::default_instance_,
      TargetLane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, _has_bits_[0]),
      -1,
      -1,
      sizeof(TargetLane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, _internal_metadata_),
      -1);
  ObjectIgnore_descriptor_ = file->message_type(1);
  static const int ObjectIgnore_offsets_[1] = {
  };
  ObjectIgnore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectIgnore_descriptor_,
      ObjectIgnore::default_instance_,
      ObjectIgnore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIgnore, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectIgnore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIgnore, _internal_metadata_),
      -1);
  ObjectStop_descriptor_ = file->message_type(2);
  static const int ObjectStop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, reason_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, stop_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, wait_for_obstacle_),
  };
  ObjectStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectStop_descriptor_,
      ObjectStop::default_instance_,
      ObjectStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, _internal_metadata_),
      -1);
  ObjectNudge_descriptor_ = file->message_type(3);
  static const int ObjectNudge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, distance_l_),
  };
  ObjectNudge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectNudge_descriptor_,
      ObjectNudge::default_instance_,
      ObjectNudge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectNudge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, _internal_metadata_),
      -1);
  ObjectNudge_Type_descriptor_ = ObjectNudge_descriptor_->enum_type(0);
  ObjectYield_descriptor_ = file->message_type(4);
  static const int ObjectYield_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, fence_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, fence_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, time_buffer_),
  };
  ObjectYield_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectYield_descriptor_,
      ObjectYield::default_instance_,
      ObjectYield_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectYield),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, _internal_metadata_),
      -1);
  ObjectFollow_descriptor_ = file->message_type(5);
  static const int ObjectFollow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, fence_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, fence_heading_),
  };
  ObjectFollow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectFollow_descriptor_,
      ObjectFollow::default_instance_,
      ObjectFollow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectFollow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, _internal_metadata_),
      -1);
  ObjectOvertake_descriptor_ = file->message_type(6);
  static const int ObjectOvertake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, distance_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, fence_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, fence_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, time_buffer_),
  };
  ObjectOvertake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectOvertake_descriptor_,
      ObjectOvertake::default_instance_,
      ObjectOvertake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectOvertake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, _internal_metadata_),
      -1);
  ObjectSidePass_descriptor_ = file->message_type(7);
  static const int ObjectSidePass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, type_),
  };
  ObjectSidePass_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectSidePass_descriptor_,
      ObjectSidePass::default_instance_,
      ObjectSidePass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectSidePass),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, _internal_metadata_),
      -1);
  ObjectSidePass_Type_descriptor_ = ObjectSidePass_descriptor_->enum_type(0);
  ObjectAvoid_descriptor_ = file->message_type(8);
  static const int ObjectAvoid_offsets_[1] = {
  };
  ObjectAvoid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectAvoid_descriptor_,
      ObjectAvoid::default_instance_,
      ObjectAvoid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAvoid, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectAvoid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAvoid, _internal_metadata_),
      -1);
  ObjectDecisionType_descriptor_ = file->message_type(9);
  static const int ObjectDecisionType_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, ignore_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, stop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, follow_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, yield_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, overtake_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, nudge_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, sidepass_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObjectDecisionType_default_oneof_instance_, avoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, object_tag_),
  };
  ObjectDecisionType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDecisionType_descriptor_,
      ObjectDecisionType::default_instance_,
      ObjectDecisionType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _has_bits_[0]),
      -1,
      -1,
      ObjectDecisionType_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _oneof_case_[0]),
      sizeof(ObjectDecisionType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _internal_metadata_),
      -1);
  ObjectDecision_descriptor_ = file->message_type(10);
  static const int ObjectDecision_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, perception_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, object_decision_),
  };
  ObjectDecision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDecision_descriptor_,
      ObjectDecision::default_instance_,
      ObjectDecision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectDecision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, _internal_metadata_),
      -1);
  ObjectDecisions_descriptor_ = file->message_type(11);
  static const int ObjectDecisions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, decision_),
  };
  ObjectDecisions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectDecisions_descriptor_,
      ObjectDecisions::default_instance_,
      ObjectDecisions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObjectDecisions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, _internal_metadata_),
      -1);
  MainStop_descriptor_ = file->message_type(12);
  static const int MainStop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, reason_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, stop_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, change_lane_type_),
  };
  MainStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainStop_descriptor_,
      MainStop::default_instance_,
      MainStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, _has_bits_[0]),
      -1,
      -1,
      sizeof(MainStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, _internal_metadata_),
      -1);
  EmergencyStopHardBrake_descriptor_ = file->message_type(13);
  static const int EmergencyStopHardBrake_offsets_[1] = {
  };
  EmergencyStopHardBrake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmergencyStopHardBrake_descriptor_,
      EmergencyStopHardBrake::default_instance_,
      EmergencyStopHardBrake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopHardBrake, _has_bits_[0]),
      -1,
      -1,
      sizeof(EmergencyStopHardBrake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopHardBrake, _internal_metadata_),
      -1);
  EmergencyStopCruiseToStop_descriptor_ = file->message_type(14);
  static const int EmergencyStopCruiseToStop_offsets_[1] = {
  };
  EmergencyStopCruiseToStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmergencyStopCruiseToStop_descriptor_,
      EmergencyStopCruiseToStop::default_instance_,
      EmergencyStopCruiseToStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopCruiseToStop, _has_bits_[0]),
      -1,
      -1,
      sizeof(EmergencyStopCruiseToStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopCruiseToStop, _internal_metadata_),
      -1);
  MainEmergencyStop_descriptor_ = file->message_type(15);
  static const int MainEmergencyStop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, reason_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, reason_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainEmergencyStop_default_oneof_instance_, hard_brake_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainEmergencyStop_default_oneof_instance_, cruise_to_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, task_),
  };
  MainEmergencyStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainEmergencyStop_descriptor_,
      MainEmergencyStop::default_instance_,
      MainEmergencyStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _has_bits_[0]),
      -1,
      -1,
      MainEmergencyStop_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _oneof_case_[0]),
      sizeof(MainEmergencyStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _internal_metadata_),
      -1);
  MainEmergencyStop_ReasonCode_descriptor_ = MainEmergencyStop_descriptor_->enum_type(0);
  MainCruise_descriptor_ = file->message_type(16);
  static const int MainCruise_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, change_lane_type_),
  };
  MainCruise_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainCruise_descriptor_,
      MainCruise::default_instance_,
      MainCruise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, _has_bits_[0]),
      -1,
      -1,
      sizeof(MainCruise),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, _internal_metadata_),
      -1);
  MainChangeLane_descriptor_ = file->message_type(17);
  static const int MainChangeLane_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, default_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, default_lane_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, target_lane_stop_),
  };
  MainChangeLane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainChangeLane_descriptor_,
      MainChangeLane::default_instance_,
      MainChangeLane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, _has_bits_[0]),
      -1,
      -1,
      sizeof(MainChangeLane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, _internal_metadata_),
      -1);
  MainChangeLane_Type_descriptor_ = MainChangeLane_descriptor_->enum_type(0);
  MainMissionComplete_descriptor_ = file->message_type(18);
  static const int MainMissionComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, stop_heading_),
  };
  MainMissionComplete_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainMissionComplete_descriptor_,
      MainMissionComplete::default_instance_,
      MainMissionComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, _has_bits_[0]),
      -1,
      -1,
      sizeof(MainMissionComplete),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, _internal_metadata_),
      -1);
  MainNotReady_descriptor_ = file->message_type(19);
  static const int MainNotReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, reason_),
  };
  MainNotReady_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainNotReady_descriptor_,
      MainNotReady::default_instance_,
      MainNotReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, _has_bits_[0]),
      -1,
      -1,
      sizeof(MainNotReady),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, _internal_metadata_),
      -1);
  MainParking_descriptor_ = file->message_type(20);
  static const int MainParking_offsets_[1] = {
  };
  MainParking_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainParking_descriptor_,
      MainParking::default_instance_,
      MainParking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, _has_bits_[0]),
      -1,
      -1,
      sizeof(MainParking),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, _internal_metadata_),
      -1);
  MainDecision_descriptor_ = file->message_type(21);
  static const int MainDecision_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, cruise_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, stop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, estop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, change_lane_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, mission_complete_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, not_ready_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MainDecision_default_oneof_instance_, parking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, target_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, task_),
  };
  MainDecision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainDecision_descriptor_,
      MainDecision::default_instance_,
      MainDecision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _has_bits_[0]),
      -1,
      -1,
      MainDecision_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _oneof_case_[0]),
      sizeof(MainDecision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _internal_metadata_),
      -1);
  DecisionResult_descriptor_ = file->message_type(22);
  static const int DecisionResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, main_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, object_decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, vehicle_signal_),
  };
  DecisionResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DecisionResult_descriptor_,
      DecisionResult::default_instance_,
      DecisionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(DecisionResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, _internal_metadata_),
      -1);
  StopReasonCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fdecision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetLane_descriptor_, &TargetLane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectIgnore_descriptor_, &ObjectIgnore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectStop_descriptor_, &ObjectStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectNudge_descriptor_, &ObjectNudge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectYield_descriptor_, &ObjectYield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectFollow_descriptor_, &ObjectFollow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectOvertake_descriptor_, &ObjectOvertake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectSidePass_descriptor_, &ObjectSidePass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectAvoid_descriptor_, &ObjectAvoid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDecisionType_descriptor_, &ObjectDecisionType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDecision_descriptor_, &ObjectDecision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectDecisions_descriptor_, &ObjectDecisions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainStop_descriptor_, &MainStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmergencyStopHardBrake_descriptor_, &EmergencyStopHardBrake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmergencyStopCruiseToStop_descriptor_, &EmergencyStopCruiseToStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainEmergencyStop_descriptor_, &MainEmergencyStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainCruise_descriptor_, &MainCruise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainChangeLane_descriptor_, &MainChangeLane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainMissionComplete_descriptor_, &MainMissionComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainNotReady_descriptor_, &MainNotReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainParking_descriptor_, &MainParking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainDecision_descriptor_, &MainDecision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DecisionResult_descriptor_, &DecisionResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fdecision_2eproto() {
  delete TargetLane::default_instance_;
  delete TargetLane_reflection_;
  delete ObjectIgnore::default_instance_;
  delete ObjectIgnore_reflection_;
  delete ObjectStop::default_instance_;
  delete ObjectStop_reflection_;
  delete ObjectNudge::default_instance_;
  delete ObjectNudge_reflection_;
  delete ObjectYield::default_instance_;
  delete ObjectYield_reflection_;
  delete ObjectFollow::default_instance_;
  delete ObjectFollow_reflection_;
  delete ObjectOvertake::default_instance_;
  delete ObjectOvertake_reflection_;
  delete ObjectSidePass::default_instance_;
  delete ObjectSidePass_reflection_;
  delete ObjectAvoid::default_instance_;
  delete ObjectAvoid_reflection_;
  delete ObjectDecisionType::default_instance_;
  delete ObjectDecisionType_default_oneof_instance_;
  delete ObjectDecisionType_reflection_;
  delete ObjectDecision::default_instance_;
  delete ObjectDecision_reflection_;
  delete ObjectDecisions::default_instance_;
  delete ObjectDecisions_reflection_;
  delete MainStop::default_instance_;
  delete MainStop_reflection_;
  delete EmergencyStopHardBrake::default_instance_;
  delete EmergencyStopHardBrake_reflection_;
  delete EmergencyStopCruiseToStop::default_instance_;
  delete EmergencyStopCruiseToStop_reflection_;
  delete MainEmergencyStop::default_instance_;
  delete MainEmergencyStop_default_oneof_instance_;
  delete MainEmergencyStop_reflection_;
  delete MainCruise::default_instance_;
  delete MainCruise_reflection_;
  delete MainChangeLane::default_instance_;
  delete MainChangeLane_reflection_;
  delete MainMissionComplete::default_instance_;
  delete MainMissionComplete_reflection_;
  delete MainNotReady::default_instance_;
  delete MainNotReady_reflection_;
  delete MainParking::default_instance_;
  delete MainParking_reflection_;
  delete MainDecision::default_instance_;
  delete MainDecision_default_oneof_instance_;
  delete MainDecision_reflection_;
  delete DecisionResult::default_instance_;
  delete DecisionResult_reflection_;
}

void protobuf_AddDesc_planning_2fdecision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fdecision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fvehicle_5fsignal_2eproto();
  ::apollo::routing::protobuf_AddDesc_routing_2frouting_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027planning/decision.proto\022\017apollo.planni"
    "ng\032\025common/geometry.proto\032\033common/vehicl"
    "e_signal.proto\032\025routing/routing.proto\"M\n"
    "\nTargetLane\022\n\n\002id\030\001 \001(\t\022\017\n\007start_s\030\002 \001(\001"
    "\022\r\n\005end_s\030\003 \001(\001\022\023\n\013speed_limit\030\004 \001(\001\"\016\n\014"
    "ObjectIgnore\"\264\001\n\nObjectStop\0224\n\013reason_co"
    "de\030\001 \001(\0162\037.apollo.planning.StopReasonCod"
    "e\022\022\n\ndistance_s\030\002 \001(\001\022+\n\nstop_point\030\003 \001("
    "\0132\027.apollo.common.PointENU\022\024\n\014stop_headi"
    "ng\030\004 \001(\001\022\031\n\021wait_for_obstacle\030\005 \003(\t\"\211\001\n\013"
    "ObjectNudge\022/\n\004type\030\001 \001(\0162!.apollo.plann"
    "ing.ObjectNudge.Type\022\022\n\ndistance_l\030\002 \001(\001"
    "\"5\n\004Type\022\016\n\nLEFT_NUDGE\020\001\022\017\n\013RIGHT_NUDGE\020"
    "\002\022\014\n\010NO_NUDGE\020\003\"{\n\013ObjectYield\022\022\n\ndistan"
    "ce_s\030\001 \001(\001\022,\n\013fence_point\030\002 \001(\0132\027.apollo"
    ".common.PointENU\022\025\n\rfence_heading\030\003 \001(\001\022"
    "\023\n\013time_buffer\030\004 \001(\001\"g\n\014ObjectFollow\022\022\n\n"
    "distance_s\030\001 \001(\001\022,\n\013fence_point\030\002 \001(\0132\027."
    "apollo.common.PointENU\022\025\n\rfence_heading\030"
    "\003 \001(\001\"~\n\016ObjectOvertake\022\022\n\ndistance_s\030\001 "
    "\001(\001\022,\n\013fence_point\030\002 \001(\0132\027.apollo.common"
    ".PointENU\022\025\n\rfence_heading\030\003 \001(\001\022\023\n\013time"
    "_buffer\030\004 \001(\001\"a\n\016ObjectSidePass\0222\n\004type\030"
    "\001 \001(\0162$.apollo.planning.ObjectSidePass.T"
    "ype\"\033\n\004Type\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"\r\n\013Obje"
    "ctAvoid\"\250\003\n\022ObjectDecisionType\022/\n\006ignore"
    "\030\001 \001(\0132\035.apollo.planning.ObjectIgnoreH\000\022"
    "+\n\004stop\030\002 \001(\0132\033.apollo.planning.ObjectSt"
    "opH\000\022/\n\006follow\030\003 \001(\0132\035.apollo.planning.O"
    "bjectFollowH\000\022-\n\005yield\030\004 \001(\0132\034.apollo.pl"
    "anning.ObjectYieldH\000\0223\n\010overtake\030\005 \001(\0132\037"
    ".apollo.planning.ObjectOvertakeH\000\022-\n\005nud"
    "ge\030\006 \001(\0132\034.apollo.planning.ObjectNudgeH\000"
    "\0223\n\010sidepass\030\007 \001(\0132\037.apollo.planning.Obj"
    "ectSidePassH\000\022-\n\005avoid\030\010 \001(\0132\034.apollo.pl"
    "anning.ObjectAvoidH\000B\014\n\nobject_tag\"q\n\016Ob"
    "jectDecision\022\n\n\002id\030\001 \001(\t\022\025\n\rperception_i"
    "d\030\002 \001(\005\022<\n\017object_decision\030\003 \003(\0132#.apoll"
    "o.planning.ObjectDecisionType\"D\n\017ObjectD"
    "ecisions\0221\n\010decision\030\001 \003(\0132\037.apollo.plan"
    "ning.ObjectDecision\"\315\001\n\010MainStop\0224\n\013reas"
    "on_code\030\001 \001(\0162\037.apollo.planning.StopReas"
    "onCode\022\016\n\006reason\030\002 \001(\t\022+\n\nstop_point\030\003 \001"
    "(\0132\027.apollo.common.PointENU\022\024\n\014stop_head"
    "ing\030\004 \001(\001\0228\n\020change_lane_type\030\005 \001(\0162\036.ap"
    "ollo.routing.ChangeLaneType\"\030\n\026Emergency"
    "StopHardBrake\"\033\n\031EmergencyStopCruiseToSt"
    "op\"\237\003\n\021MainEmergencyStop\022B\n\013reason_code\030"
    "\001 \001(\0162-.apollo.planning.MainEmergencySto"
    "p.ReasonCode\022\016\n\006reason\030\002 \001(\t\022=\n\nhard_bra"
    "ke\030\003 \001(\0132\'.apollo.planning.EmergencyStop"
    "HardBrakeH\000\022D\n\016cruise_to_stop\030\004 \001(\0132*.ap"
    "ollo.planning.EmergencyStopCruiseToStopH"
    "\000\"\250\001\n\nReasonCode\022\035\n\031ESTOP_REASON_INTERNA"
    "L_ERR\020\001\022\032\n\026ESTOP_REASON_COLLISION\020\002\022\035\n\031E"
    "STOP_REASON_ST_FIND_PATH\020\003\022!\n\035ESTOP_REAS"
    "ON_ST_MAKE_DECISION\020\004\022\035\n\031ESTOP_REASON_SE"
    "NSOR_ERROR\020\005B\006\n\004task\"F\n\nMainCruise\0228\n\020ch"
    "ange_lane_type\030\001 \001(\0162\036.apollo.routing.Ch"
    "angeLaneType\"\377\001\n\016MainChangeLane\0222\n\004type\030"
    "\001 \001(\0162$.apollo.planning.MainChangeLane.T"
    "ype\0221\n\014default_lane\030\002 \003(\0132\033.apollo.plann"
    "ing.TargetLane\0224\n\021default_lane_stop\030\003 \001("
    "\0132\031.apollo.planning.MainStop\0223\n\020target_l"
    "ane_stop\030\004 \001(\0132\031.apollo.planning.MainSto"
    "p\"\033\n\004Type\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"X\n\023MainMi"
    "ssionComplete\022+\n\nstop_point\030\001 \001(\0132\027.apol"
    "lo.common.PointENU\022\024\n\014stop_heading\030\002 \001(\001"
    "\"\036\n\014MainNotReady\022\016\n\006reason\030\001 \001(\t\"\r\n\013Main"
    "Parking\"\276\003\n\014MainDecision\022-\n\006cruise\030\001 \001(\013"
    "2\033.apollo.planning.MainCruiseH\000\022)\n\004stop\030"
    "\002 \001(\0132\031.apollo.planning.MainStopH\000\0223\n\005es"
    "top\030\003 \001(\0132\".apollo.planning.MainEmergenc"
    "yStopH\000\022:\n\013change_lane\030\004 \001(\0132\037.apollo.pl"
    "anning.MainChangeLaneB\002\030\001H\000\022@\n\020mission_c"
    "omplete\030\006 \001(\0132$.apollo.planning.MainMiss"
    "ionCompleteH\000\0222\n\tnot_ready\030\007 \001(\0132\035.apoll"
    "o.planning.MainNotReadyH\000\022/\n\007parking\030\010 \001"
    "(\0132\034.apollo.planning.MainParkingH\000\0224\n\013ta"
    "rget_lane\030\005 \003(\0132\033.apollo.planning.Target"
    "LaneB\002\030\001B\006\n\004task\"\267\001\n\016DecisionResult\0224\n\rm"
    "ain_decision\030\001 \001(\0132\035.apollo.planning.Mai"
    "nDecision\0229\n\017object_decision\030\002 \001(\0132 .apo"
    "llo.planning.ObjectDecisions\0224\n\016vehicle_"
    "signal\030\003 \001(\0132\034.apollo.common.VehicleSign"
    "al*\225\003\n\016StopReasonCode\022\034\n\030STOP_REASON_HEA"
    "D_VEHICLE\020\001\022\033\n\027STOP_REASON_DESTINATION\020\002"
    "\022\032\n\026STOP_REASON_PEDESTRIAN\020\003\022\030\n\024STOP_REA"
    "SON_OBSTACLE\020\004\022\032\n\026STOP_REASON_PREPARKING"
    "\020\005\022\026\n\022STOP_REASON_SIGNAL\020d\022\031\n\025STOP_REASO"
    "N_STOP_SIGN\020e\022\032\n\026STOP_REASON_YIELD_SIGN\020"
    "f\022\032\n\026STOP_REASON_CLEAR_ZONE\020g\022\031\n\025STOP_RE"
    "ASON_CROSSWALK\020h\022\027\n\023STOP_REASON_CREEPER\020"
    "i\022\035\n\031STOP_REASON_REFERENCE_END\020j\022\035\n\031STOP"
    "_REASON_YELLOW_SIGNAL\020k\022\031\n\025STOP_REASON_P"
    "ULL_OVER\020l", 3810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/decision.proto", &protobuf_RegisterTypes);
  TargetLane::default_instance_ = new TargetLane();
  ObjectIgnore::default_instance_ = new ObjectIgnore();
  ObjectStop::default_instance_ = new ObjectStop();
  ObjectNudge::default_instance_ = new ObjectNudge();
  ObjectYield::default_instance_ = new ObjectYield();
  ObjectFollow::default_instance_ = new ObjectFollow();
  ObjectOvertake::default_instance_ = new ObjectOvertake();
  ObjectSidePass::default_instance_ = new ObjectSidePass();
  ObjectAvoid::default_instance_ = new ObjectAvoid();
  ObjectDecisionType::default_instance_ = new ObjectDecisionType();
  ObjectDecisionType_default_oneof_instance_ = new ObjectDecisionTypeOneofInstance();
  ObjectDecision::default_instance_ = new ObjectDecision();
  ObjectDecisions::default_instance_ = new ObjectDecisions();
  MainStop::default_instance_ = new MainStop();
  EmergencyStopHardBrake::default_instance_ = new EmergencyStopHardBrake();
  EmergencyStopCruiseToStop::default_instance_ = new EmergencyStopCruiseToStop();
  MainEmergencyStop::default_instance_ = new MainEmergencyStop();
  MainEmergencyStop_default_oneof_instance_ = new MainEmergencyStopOneofInstance();
  MainCruise::default_instance_ = new MainCruise();
  MainChangeLane::default_instance_ = new MainChangeLane();
  MainMissionComplete::default_instance_ = new MainMissionComplete();
  MainNotReady::default_instance_ = new MainNotReady();
  MainParking::default_instance_ = new MainParking();
  MainDecision::default_instance_ = new MainDecision();
  MainDecision_default_oneof_instance_ = new MainDecisionOneofInstance();
  DecisionResult::default_instance_ = new DecisionResult();
  TargetLane::default_instance_->InitAsDefaultInstance();
  ObjectIgnore::default_instance_->InitAsDefaultInstance();
  ObjectStop::default_instance_->InitAsDefaultInstance();
  ObjectNudge::default_instance_->InitAsDefaultInstance();
  ObjectYield::default_instance_->InitAsDefaultInstance();
  ObjectFollow::default_instance_->InitAsDefaultInstance();
  ObjectOvertake::default_instance_->InitAsDefaultInstance();
  ObjectSidePass::default_instance_->InitAsDefaultInstance();
  ObjectAvoid::default_instance_->InitAsDefaultInstance();
  ObjectDecisionType::default_instance_->InitAsDefaultInstance();
  ObjectDecision::default_instance_->InitAsDefaultInstance();
  ObjectDecisions::default_instance_->InitAsDefaultInstance();
  MainStop::default_instance_->InitAsDefaultInstance();
  EmergencyStopHardBrake::default_instance_->InitAsDefaultInstance();
  EmergencyStopCruiseToStop::default_instance_->InitAsDefaultInstance();
  MainEmergencyStop::default_instance_->InitAsDefaultInstance();
  MainCruise::default_instance_->InitAsDefaultInstance();
  MainChangeLane::default_instance_->InitAsDefaultInstance();
  MainMissionComplete::default_instance_->InitAsDefaultInstance();
  MainNotReady::default_instance_->InitAsDefaultInstance();
  MainParking::default_instance_->InitAsDefaultInstance();
  MainDecision::default_instance_->InitAsDefaultInstance();
  DecisionResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fdecision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fdecision_2eproto {
  StaticDescriptorInitializer_planning_2fdecision_2eproto() {
    protobuf_AddDesc_planning_2fdecision_2eproto();
  }
} static_descriptor_initializer_planning_2fdecision_2eproto_;
const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopReasonCode_descriptor_;
}
bool StopReasonCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetLane::kIdFieldNumber;
const int TargetLane::kStartSFieldNumber;
const int TargetLane::kEndSFieldNumber;
const int TargetLane::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetLane::TargetLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TargetLane)
}

void TargetLane::InitAsDefaultInstance() {
}

TargetLane::TargetLane(const TargetLane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TargetLane)
}

void TargetLane::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_s_ = 0;
  end_s_ = 0;
  speed_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetLane::~TargetLane() {
  // @@protoc_insertion_point(destructor:apollo.planning.TargetLane)
  SharedDtor();
}

void TargetLane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TargetLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetLane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetLane_descriptor_;
}

const TargetLane& TargetLane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

TargetLane* TargetLane::default_instance_ = NULL;

TargetLane* TargetLane::New(::google::protobuf::Arena* arena) const {
  TargetLane* n = new TargetLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TargetLane)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TargetLane, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TargetLane*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(start_s_, speed_limit_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TargetLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TargetLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TargetLane.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_start_s;
        break;
      }

      // optional double start_s = 2;
      case 2: {
        if (tag == 17) {
         parse_start_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
          set_has_start_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_end_s;
        break;
      }

      // optional double end_s = 3;
      case 3: {
        if (tag == 25) {
         parse_end_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
          set_has_end_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed_limit;
        break;
      }

      // optional double speed_limit = 4;
      case 4: {
        if (tag == 33) {
         parse_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
          set_has_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TargetLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TargetLane)
  return false;
#undef DO_
}

void TargetLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TargetLane)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TargetLane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_s = 2;
  if (has_start_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3;
  if (has_end_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // optional double speed_limit = 4;
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TargetLane)
}

::google::protobuf::uint8* TargetLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TargetLane)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TargetLane.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_s = 2;
  if (has_start_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3;
  if (has_end_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // optional double speed_limit = 4;
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TargetLane)
  return target;
}

int TargetLane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TargetLane)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double start_s = 2;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TargetLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetLane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TargetLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TargetLane)
    MergeFrom(*source);
  }
}

void TargetLane::MergeFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TargetLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_start_s()) {
      set_start_s(from.start_s());
    }
    if (from.has_end_s()) {
      set_end_s(from.end_s());
    }
    if (from.has_speed_limit()) {
      set_speed_limit(from.speed_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TargetLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetLane::CopyFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLane::IsInitialized() const {

  return true;
}

void TargetLane::Swap(TargetLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetLane::InternalSwap(TargetLane* other) {
  id_.Swap(&other->id_);
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetLane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetLane_descriptor_;
  metadata.reflection = TargetLane_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetLane

// optional string id = 1;
bool TargetLane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TargetLane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TargetLane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TargetLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& TargetLane::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetLane::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.id)
}
 void TargetLane::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.TargetLane.id)
}
 void TargetLane::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.TargetLane.id)
}
 ::std::string* TargetLane::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TargetLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TargetLane::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.TargetLane.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TargetLane.id)
}

// optional double start_s = 2;
bool TargetLane::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TargetLane::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
void TargetLane::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void TargetLane::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
 double TargetLane::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.start_s)
  return start_s_;
}
 void TargetLane::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.start_s)
}

// optional double end_s = 3;
bool TargetLane::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TargetLane::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
void TargetLane::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void TargetLane::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
 double TargetLane::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.end_s)
  return end_s_;
}
 void TargetLane::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.end_s)
}

// optional double speed_limit = 4;
bool TargetLane::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TargetLane::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void TargetLane::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void TargetLane::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
 double TargetLane::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.speed_limit)
  return speed_limit_;
}
 void TargetLane::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectIgnore::ObjectIgnore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectIgnore)
}

void ObjectIgnore::InitAsDefaultInstance() {
}

ObjectIgnore::ObjectIgnore(const ObjectIgnore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectIgnore)
}

void ObjectIgnore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectIgnore::~ObjectIgnore() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectIgnore)
  SharedDtor();
}

void ObjectIgnore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectIgnore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectIgnore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectIgnore_descriptor_;
}

const ObjectIgnore& ObjectIgnore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectIgnore* ObjectIgnore::default_instance_ = NULL;

ObjectIgnore* ObjectIgnore::New(::google::protobuf::Arena* arena) const {
  ObjectIgnore* n = new ObjectIgnore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectIgnore::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectIgnore)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectIgnore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectIgnore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectIgnore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectIgnore)
  return false;
#undef DO_
}

void ObjectIgnore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectIgnore)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectIgnore)
}

::google::protobuf::uint8* ObjectIgnore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectIgnore)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectIgnore)
  return target;
}

int ObjectIgnore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectIgnore)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectIgnore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectIgnore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectIgnore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectIgnore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectIgnore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectIgnore)
    MergeFrom(*source);
  }
}

void ObjectIgnore::MergeFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectIgnore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectIgnore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectIgnore::CopyFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIgnore::IsInitialized() const {

  return true;
}

void ObjectIgnore::Swap(ObjectIgnore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectIgnore::InternalSwap(ObjectIgnore* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectIgnore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectIgnore_descriptor_;
  metadata.reflection = ObjectIgnore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectIgnore

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectStop::kReasonCodeFieldNumber;
const int ObjectStop::kDistanceSFieldNumber;
const int ObjectStop::kStopPointFieldNumber;
const int ObjectStop::kStopHeadingFieldNumber;
const int ObjectStop::kWaitForObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectStop::ObjectStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectStop)
}

void ObjectStop::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectStop::ObjectStop(const ObjectStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectStop)
}

void ObjectStop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_code_ = 1;
  distance_s_ = 0;
  stop_point_ = NULL;
  stop_heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectStop::~ObjectStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectStop)
  SharedDtor();
}

void ObjectStop::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
  }
}

void ObjectStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectStop_descriptor_;
}

const ObjectStop& ObjectStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectStop* ObjectStop::default_instance_ = NULL;

ObjectStop* ObjectStop::New(::google::protobuf::Arena* arena) const {
  ObjectStop* n = new ObjectStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectStop)
  if (_has_bits_[0 / 32] & 15u) {
    reason_code_ = 1;
    distance_s_ = 0;
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
    }
    stop_heading_ = 0;
  }
  wait_for_obstacle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.StopReasonCode reason_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::StopReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::apollo::planning::StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_distance_s;
        break;
      }

      // optional double distance_s = 2;
      case 2: {
        if (tag == 17) {
         parse_distance_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
          set_has_distance_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stop_point;
        break;
      }

      // optional .apollo.common.PointENU stop_point = 3;
      case 3: {
        if (tag == 26) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_stop_heading;
        break;
      }

      // optional double stop_heading = 4;
      case 4: {
        if (tag == 33) {
         parse_stop_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
          set_has_stop_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wait_for_obstacle;
        break;
      }

      // repeated string wait_for_obstacle = 5;
      case 5: {
        if (tag == 42) {
         parse_wait_for_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wait_for_obstacle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wait_for_obstacle(this->wait_for_obstacle_size() - 1).data(),
            this->wait_for_obstacle(this->wait_for_obstacle_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.ObjectStop.wait_for_obstacle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wait_for_obstacle;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectStop)
  return false;
#undef DO_
}

void ObjectStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectStop)
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (has_reason_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional double distance_s = 2;
  if (has_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_s(), output);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // optional double stop_heading = 4;
  if (has_stop_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_heading(), output);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0; i < this->wait_for_obstacle_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle(i).data(), this->wait_for_obstacle(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectStop.wait_for_obstacle");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wait_for_obstacle(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectStop)
}

::google::protobuf::uint8* ObjectStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectStop)
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (has_reason_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional double distance_s = 2;
  if (has_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_s(), target);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stop_point_, false, target);
  }

  // optional double stop_heading = 4;
  if (has_stop_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_heading(), target);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0; i < this->wait_for_obstacle_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle(i).data(), this->wait_for_obstacle(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectStop.wait_for_obstacle");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->wait_for_obstacle(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectStop)
  return target;
}

int ObjectStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectStop)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.planning.StopReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

    // optional double distance_s = 2;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.PointENU stop_point = 3;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double stop_heading = 4;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

  }
  // repeated string wait_for_obstacle = 5;
  total_size += 1 * this->wait_for_obstacle_size();
  for (int i = 0; i < this->wait_for_obstacle_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wait_for_obstacle(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectStop)
    MergeFrom(*source);
  }
}

void ObjectStop::MergeFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  wait_for_obstacle_.MergeFrom(from.wait_for_obstacle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason_code()) {
      set_reason_code(from.reason_code());
    }
    if (from.has_distance_s()) {
      set_distance_s(from.distance_s());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from.stop_point());
    }
    if (from.has_stop_heading()) {
      set_stop_heading(from.stop_heading());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectStop::CopyFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStop::IsInitialized() const {

  return true;
}

void ObjectStop::Swap(ObjectStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectStop::InternalSwap(ObjectStop* other) {
  std::swap(reason_code_, other->reason_code_);
  std::swap(distance_s_, other->distance_s_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(stop_heading_, other->stop_heading_);
  wait_for_obstacle_.UnsafeArenaSwap(&other->wait_for_obstacle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectStop_descriptor_;
  metadata.reflection = ObjectStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectStop

// optional .apollo.planning.StopReasonCode reason_code = 1;
bool ObjectStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
 ::apollo::planning::StopReasonCode ObjectStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.reason_code)
  return static_cast< ::apollo::planning::StopReasonCode >(reason_code_);
}
 void ObjectStop::set_reason_code(::apollo::planning::StopReasonCode value) {
  assert(::apollo::planning::StopReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.reason_code)
}

// optional double distance_s = 2;
bool ObjectStop::has_distance_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectStop::set_has_distance_s() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectStop::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectStop::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
 double ObjectStop::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.distance_s)
  return distance_s_;
}
 void ObjectStop::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.distance_s)
}

// optional .apollo.common.PointENU stop_point = 3;
bool ObjectStop::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectStop::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectStop::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectStop::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
  clear_has_stop_point();
}
const ::apollo::common::PointENU& ObjectStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::common::PointENU* ObjectStop::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStop.stop_point)
  return stop_point_;
}
::apollo::common::PointENU* ObjectStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectStop.stop_point)
  clear_has_stop_point();
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void ObjectStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectStop.stop_point)
}

// optional double stop_heading = 4;
bool ObjectStop::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectStop::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectStop::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectStop::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
 double ObjectStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.stop_heading)
  return stop_heading_;
}
 void ObjectStop::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.stop_heading)
}

// repeated string wait_for_obstacle = 5;
int ObjectStop::wait_for_obstacle_size() const {
  return wait_for_obstacle_.size();
}
void ObjectStop::clear_wait_for_obstacle() {
  wait_for_obstacle_.Clear();
}
 const ::std::string& ObjectStop::wait_for_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Get(index);
}
 ::std::string* ObjectStop::mutable_wait_for_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Mutable(index);
}
 void ObjectStop::set_wait_for_obstacle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.wait_for_obstacle)
  wait_for_obstacle_.Mutable(index)->assign(value);
}
 void ObjectStop::set_wait_for_obstacle(int index, const char* value) {
  wait_for_obstacle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.ObjectStop.wait_for_obstacle)
}
 void ObjectStop::set_wait_for_obstacle(int index, const char* value, size_t size) {
  wait_for_obstacle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ObjectStop.wait_for_obstacle)
}
 ::std::string* ObjectStop::add_wait_for_obstacle() {
  // @@protoc_insertion_point(field_add_mutable:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Add();
}
 void ObjectStop::add_wait_for_obstacle(const ::std::string& value) {
  wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectStop.wait_for_obstacle)
}
 void ObjectStop::add_wait_for_obstacle(const char* value) {
  wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.planning.ObjectStop.wait_for_obstacle)
}
 void ObjectStop::add_wait_for_obstacle(const char* value, size_t size) {
  wait_for_obstacle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.planning.ObjectStop.wait_for_obstacle)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjectStop::wait_for_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjectStop::mutable_wait_for_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectStop.wait_for_obstacle)
  return &wait_for_obstacle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectNudge_Type_descriptor_;
}
bool ObjectNudge_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectNudge_Type ObjectNudge::LEFT_NUDGE;
const ObjectNudge_Type ObjectNudge::RIGHT_NUDGE;
const ObjectNudge_Type ObjectNudge::NO_NUDGE;
const ObjectNudge_Type ObjectNudge::Type_MIN;
const ObjectNudge_Type ObjectNudge::Type_MAX;
const int ObjectNudge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectNudge::kTypeFieldNumber;
const int ObjectNudge::kDistanceLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectNudge::ObjectNudge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectNudge)
}

void ObjectNudge::InitAsDefaultInstance() {
}

ObjectNudge::ObjectNudge(const ObjectNudge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectNudge)
}

void ObjectNudge::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  distance_l_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectNudge::~ObjectNudge() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectNudge)
  SharedDtor();
}

void ObjectNudge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectNudge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectNudge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectNudge_descriptor_;
}

const ObjectNudge& ObjectNudge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectNudge* ObjectNudge::default_instance_ = NULL;

ObjectNudge* ObjectNudge::New(::google::protobuf::Arena* arena) const {
  ObjectNudge* n = new ObjectNudge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectNudge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectNudge)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    distance_l_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectNudge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectNudge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ObjectNudge.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ObjectNudge_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::planning::ObjectNudge_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_distance_l;
        break;
      }

      // optional double distance_l = 2;
      case 2: {
        if (tag == 17) {
         parse_distance_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_l_)));
          set_has_distance_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectNudge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectNudge)
  return false;
#undef DO_
}

void ObjectNudge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectNudge)
  // optional .apollo.planning.ObjectNudge.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double distance_l = 2;
  if (has_distance_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectNudge)
}

::google::protobuf::uint8* ObjectNudge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectNudge)
  // optional .apollo.planning.ObjectNudge.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double distance_l = 2;
  if (has_distance_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectNudge)
  return target;
}

int ObjectNudge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectNudge)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.ObjectNudge.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double distance_l = 2;
    if (has_distance_l()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectNudge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectNudge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectNudge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectNudge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectNudge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectNudge)
    MergeFrom(*source);
  }
}

void ObjectNudge::MergeFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectNudge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_distance_l()) {
      set_distance_l(from.distance_l());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectNudge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectNudge::CopyFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectNudge::IsInitialized() const {

  return true;
}

void ObjectNudge::Swap(ObjectNudge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectNudge::InternalSwap(ObjectNudge* other) {
  std::swap(type_, other->type_);
  std::swap(distance_l_, other->distance_l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectNudge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectNudge_descriptor_;
  metadata.reflection = ObjectNudge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectNudge

// optional .apollo.planning.ObjectNudge.Type type = 1;
bool ObjectNudge::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectNudge::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectNudge::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectNudge::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::planning::ObjectNudge_Type ObjectNudge::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectNudge.type)
  return static_cast< ::apollo::planning::ObjectNudge_Type >(type_);
}
 void ObjectNudge::set_type(::apollo::planning::ObjectNudge_Type value) {
  assert(::apollo::planning::ObjectNudge_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectNudge.type)
}

// optional double distance_l = 2;
bool ObjectNudge::has_distance_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectNudge::set_has_distance_l() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectNudge::clear_has_distance_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectNudge::clear_distance_l() {
  distance_l_ = 0;
  clear_has_distance_l();
}
 double ObjectNudge::distance_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectNudge.distance_l)
  return distance_l_;
}
 void ObjectNudge::set_distance_l(double value) {
  set_has_distance_l();
  distance_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectNudge.distance_l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectYield::kDistanceSFieldNumber;
const int ObjectYield::kFencePointFieldNumber;
const int ObjectYield::kFenceHeadingFieldNumber;
const int ObjectYield::kTimeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectYield::ObjectYield()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectYield)
}

void ObjectYield::InitAsDefaultInstance() {
  fence_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectYield::ObjectYield(const ObjectYield& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectYield)
}

void ObjectYield::SharedCtor() {
  _cached_size_ = 0;
  distance_s_ = 0;
  fence_point_ = NULL;
  fence_heading_ = 0;
  time_buffer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectYield::~ObjectYield() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectYield)
  SharedDtor();
}

void ObjectYield::SharedDtor() {
  if (this != default_instance_) {
    delete fence_point_;
  }
}

void ObjectYield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectYield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectYield_descriptor_;
}

const ObjectYield& ObjectYield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectYield* ObjectYield::default_instance_ = NULL;

ObjectYield* ObjectYield::New(::google::protobuf::Arena* arena) const {
  ObjectYield* n = new ObjectYield;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectYield::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectYield)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ObjectYield, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObjectYield*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(fence_heading_, time_buffer_);
    distance_s_ = 0;
    if (has_fence_point()) {
      if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectYield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectYield)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
          set_has_distance_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fence_point;
        break;
      }

      // optional .apollo.common.PointENU fence_point = 2;
      case 2: {
        if (tag == 18) {
         parse_fence_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_fence_heading;
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (tag == 25) {
         parse_fence_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
          set_has_fence_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_time_buffer;
        break;
      }

      // optional double time_buffer = 4;
      case 4: {
        if (tag == 33) {
         parse_time_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_buffer_)));
          set_has_time_buffer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectYield)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectYield)
  return false;
#undef DO_
}

void ObjectYield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectYield)
  // optional double distance_s = 1;
  if (has_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (has_fence_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (has_fence_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  // optional double time_buffer = 4;
  if (has_time_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectYield)
}

::google::protobuf::uint8* ObjectYield::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectYield)
  // optional double distance_s = 1;
  if (has_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (has_fence_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fence_point_, false, target);
  }

  // optional double fence_heading = 3;
  if (has_fence_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (has_time_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectYield)
  return target;
}

int ObjectYield::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectYield)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fence_point_);
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (has_time_buffer()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectYield::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectYield)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectYield* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectYield>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectYield)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectYield)
    MergeFrom(*source);
  }
}

void ObjectYield::MergeFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectYield)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance_s()) {
      set_distance_s(from.distance_s());
    }
    if (from.has_fence_point()) {
      mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from.fence_point());
    }
    if (from.has_fence_heading()) {
      set_fence_heading(from.fence_heading());
    }
    if (from.has_time_buffer()) {
      set_time_buffer(from.time_buffer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectYield::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectYield::CopyFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectYield::IsInitialized() const {

  return true;
}

void ObjectYield::Swap(ObjectYield* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectYield::InternalSwap(ObjectYield* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(fence_point_, other->fence_point_);
  std::swap(fence_heading_, other->fence_heading_);
  std::swap(time_buffer_, other->time_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectYield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectYield_descriptor_;
  metadata.reflection = ObjectYield_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectYield

// optional double distance_s = 1;
bool ObjectYield::has_distance_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectYield::set_has_distance_s() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectYield::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectYield::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
 double ObjectYield::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.distance_s)
  return distance_s_;
}
 void ObjectYield::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
bool ObjectYield::has_fence_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectYield::set_has_fence_point() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectYield::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectYield::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
  clear_has_fence_point();
}
const ::apollo::common::PointENU& ObjectYield::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.fence_point)
  return fence_point_ != NULL ? *fence_point_ : *default_instance_->fence_point_;
}
::apollo::common::PointENU* ObjectYield::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectYield.fence_point)
  return fence_point_;
}
::apollo::common::PointENU* ObjectYield::release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectYield.fence_point)
  clear_has_fence_point();
  ::apollo::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
void ObjectYield::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectYield.fence_point)
}

// optional double fence_heading = 3;
bool ObjectYield::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectYield::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectYield::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectYield::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
 double ObjectYield::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.fence_heading)
  return fence_heading_;
}
 void ObjectYield::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.fence_heading)
}

// optional double time_buffer = 4;
bool ObjectYield::has_time_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectYield::set_has_time_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectYield::clear_has_time_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectYield::clear_time_buffer() {
  time_buffer_ = 0;
  clear_has_time_buffer();
}
 double ObjectYield::time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.time_buffer)
  return time_buffer_;
}
 void ObjectYield::set_time_buffer(double value) {
  set_has_time_buffer();
  time_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.time_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectFollow::kDistanceSFieldNumber;
const int ObjectFollow::kFencePointFieldNumber;
const int ObjectFollow::kFenceHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectFollow::ObjectFollow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectFollow)
}

void ObjectFollow::InitAsDefaultInstance() {
  fence_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectFollow::ObjectFollow(const ObjectFollow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectFollow)
}

void ObjectFollow::SharedCtor() {
  _cached_size_ = 0;
  distance_s_ = 0;
  fence_point_ = NULL;
  fence_heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectFollow::~ObjectFollow() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectFollow)
  SharedDtor();
}

void ObjectFollow::SharedDtor() {
  if (this != default_instance_) {
    delete fence_point_;
  }
}

void ObjectFollow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectFollow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectFollow_descriptor_;
}

const ObjectFollow& ObjectFollow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectFollow* ObjectFollow::default_instance_ = NULL;

ObjectFollow* ObjectFollow::New(::google::protobuf::Arena* arena) const {
  ObjectFollow* n = new ObjectFollow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectFollow::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectFollow)
  if (_has_bits_[0 / 32] & 7u) {
    distance_s_ = 0;
    if (has_fence_point()) {
      if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
    }
    fence_heading_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectFollow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
          set_has_distance_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fence_point;
        break;
      }

      // optional .apollo.common.PointENU fence_point = 2;
      case 2: {
        if (tag == 18) {
         parse_fence_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_fence_heading;
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (tag == 25) {
         parse_fence_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
          set_has_fence_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectFollow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectFollow)
  return false;
#undef DO_
}

void ObjectFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectFollow)
  // optional double distance_s = 1;
  if (has_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (has_fence_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (has_fence_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectFollow)
}

::google::protobuf::uint8* ObjectFollow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectFollow)
  // optional double distance_s = 1;
  if (has_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (has_fence_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fence_point_, false, target);
  }

  // optional double fence_heading = 3;
  if (has_fence_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectFollow)
  return target;
}

int ObjectFollow::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectFollow)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fence_point_);
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectFollow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectFollow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectFollow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectFollow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectFollow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectFollow)
    MergeFrom(*source);
  }
}

void ObjectFollow::MergeFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectFollow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance_s()) {
      set_distance_s(from.distance_s());
    }
    if (from.has_fence_point()) {
      mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from.fence_point());
    }
    if (from.has_fence_heading()) {
      set_fence_heading(from.fence_heading());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectFollow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectFollow::CopyFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFollow::IsInitialized() const {

  return true;
}

void ObjectFollow::Swap(ObjectFollow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectFollow::InternalSwap(ObjectFollow* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(fence_point_, other->fence_point_);
  std::swap(fence_heading_, other->fence_heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectFollow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectFollow_descriptor_;
  metadata.reflection = ObjectFollow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectFollow

// optional double distance_s = 1;
bool ObjectFollow::has_distance_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectFollow::set_has_distance_s() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectFollow::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectFollow::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
 double ObjectFollow::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.distance_s)
  return distance_s_;
}
 void ObjectFollow::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectFollow.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
bool ObjectFollow::has_fence_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectFollow::set_has_fence_point() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectFollow::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectFollow::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
  clear_has_fence_point();
}
const ::apollo::common::PointENU& ObjectFollow::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.fence_point)
  return fence_point_ != NULL ? *fence_point_ : *default_instance_->fence_point_;
}
::apollo::common::PointENU* ObjectFollow::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectFollow.fence_point)
  return fence_point_;
}
::apollo::common::PointENU* ObjectFollow::release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectFollow.fence_point)
  clear_has_fence_point();
  ::apollo::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
void ObjectFollow::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectFollow.fence_point)
}

// optional double fence_heading = 3;
bool ObjectFollow::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectFollow::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectFollow::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectFollow::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
 double ObjectFollow::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.fence_heading)
  return fence_heading_;
}
 void ObjectFollow::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectFollow.fence_heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectOvertake::kDistanceSFieldNumber;
const int ObjectOvertake::kFencePointFieldNumber;
const int ObjectOvertake::kFenceHeadingFieldNumber;
const int ObjectOvertake::kTimeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectOvertake::ObjectOvertake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectOvertake)
}

void ObjectOvertake::InitAsDefaultInstance() {
  fence_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

ObjectOvertake::ObjectOvertake(const ObjectOvertake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectOvertake)
}

void ObjectOvertake::SharedCtor() {
  _cached_size_ = 0;
  distance_s_ = 0;
  fence_point_ = NULL;
  fence_heading_ = 0;
  time_buffer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectOvertake::~ObjectOvertake() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectOvertake)
  SharedDtor();
}

void ObjectOvertake::SharedDtor() {
  if (this != default_instance_) {
    delete fence_point_;
  }
}

void ObjectOvertake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectOvertake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectOvertake_descriptor_;
}

const ObjectOvertake& ObjectOvertake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectOvertake* ObjectOvertake::default_instance_ = NULL;

ObjectOvertake* ObjectOvertake::New(::google::protobuf::Arena* arena) const {
  ObjectOvertake* n = new ObjectOvertake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectOvertake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectOvertake)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ObjectOvertake, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObjectOvertake*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(fence_heading_, time_buffer_);
    distance_s_ = 0;
    if (has_fence_point()) {
      if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectOvertake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectOvertake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
          set_has_distance_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fence_point;
        break;
      }

      // optional .apollo.common.PointENU fence_point = 2;
      case 2: {
        if (tag == 18) {
         parse_fence_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_fence_heading;
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (tag == 25) {
         parse_fence_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
          set_has_fence_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_time_buffer;
        break;
      }

      // optional double time_buffer = 4;
      case 4: {
        if (tag == 33) {
         parse_time_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_buffer_)));
          set_has_time_buffer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectOvertake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectOvertake)
  return false;
#undef DO_
}

void ObjectOvertake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectOvertake)
  // optional double distance_s = 1;
  if (has_distance_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (has_fence_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (has_fence_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  // optional double time_buffer = 4;
  if (has_time_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectOvertake)
}

::google::protobuf::uint8* ObjectOvertake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectOvertake)
  // optional double distance_s = 1;
  if (has_distance_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (has_fence_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fence_point_, false, target);
  }

  // optional double fence_heading = 3;
  if (has_fence_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (has_time_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectOvertake)
  return target;
}

int ObjectOvertake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectOvertake)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fence_point_);
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (has_time_buffer()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectOvertake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectOvertake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectOvertake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectOvertake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectOvertake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectOvertake)
    MergeFrom(*source);
  }
}

void ObjectOvertake::MergeFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectOvertake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance_s()) {
      set_distance_s(from.distance_s());
    }
    if (from.has_fence_point()) {
      mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from.fence_point());
    }
    if (from.has_fence_heading()) {
      set_fence_heading(from.fence_heading());
    }
    if (from.has_time_buffer()) {
      set_time_buffer(from.time_buffer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectOvertake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOvertake::CopyFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOvertake::IsInitialized() const {

  return true;
}

void ObjectOvertake::Swap(ObjectOvertake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectOvertake::InternalSwap(ObjectOvertake* other) {
  std::swap(distance_s_, other->distance_s_);
  std::swap(fence_point_, other->fence_point_);
  std::swap(fence_heading_, other->fence_heading_);
  std::swap(time_buffer_, other->time_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectOvertake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectOvertake_descriptor_;
  metadata.reflection = ObjectOvertake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectOvertake

// optional double distance_s = 1;
bool ObjectOvertake::has_distance_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectOvertake::set_has_distance_s() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectOvertake::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectOvertake::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
 double ObjectOvertake::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.distance_s)
  return distance_s_;
}
 void ObjectOvertake::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
bool ObjectOvertake::has_fence_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectOvertake::set_has_fence_point() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectOvertake::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectOvertake::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::apollo::common::PointENU::Clear();
  clear_has_fence_point();
}
const ::apollo::common::PointENU& ObjectOvertake::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.fence_point)
  return fence_point_ != NULL ? *fence_point_ : *default_instance_->fence_point_;
}
::apollo::common::PointENU* ObjectOvertake::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectOvertake.fence_point)
  return fence_point_;
}
::apollo::common::PointENU* ObjectOvertake::release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectOvertake.fence_point)
  clear_has_fence_point();
  ::apollo::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
void ObjectOvertake::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectOvertake.fence_point)
}

// optional double fence_heading = 3;
bool ObjectOvertake::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectOvertake::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectOvertake::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectOvertake::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
 double ObjectOvertake::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.fence_heading)
  return fence_heading_;
}
 void ObjectOvertake::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.fence_heading)
}

// optional double time_buffer = 4;
bool ObjectOvertake::has_time_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectOvertake::set_has_time_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectOvertake::clear_has_time_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectOvertake::clear_time_buffer() {
  time_buffer_ = 0;
  clear_has_time_buffer();
}
 double ObjectOvertake::time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.time_buffer)
  return time_buffer_;
}
 void ObjectOvertake::set_time_buffer(double value) {
  set_has_time_buffer();
  time_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.time_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectSidePass_Type_descriptor_;
}
bool ObjectSidePass_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectSidePass_Type ObjectSidePass::LEFT;
const ObjectSidePass_Type ObjectSidePass::RIGHT;
const ObjectSidePass_Type ObjectSidePass::Type_MIN;
const ObjectSidePass_Type ObjectSidePass::Type_MAX;
const int ObjectSidePass::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectSidePass::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectSidePass::ObjectSidePass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectSidePass)
}

void ObjectSidePass::InitAsDefaultInstance() {
}

ObjectSidePass::ObjectSidePass(const ObjectSidePass& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectSidePass)
}

void ObjectSidePass::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectSidePass::~ObjectSidePass() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectSidePass)
  SharedDtor();
}

void ObjectSidePass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectSidePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectSidePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectSidePass_descriptor_;
}

const ObjectSidePass& ObjectSidePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectSidePass* ObjectSidePass::default_instance_ = NULL;

ObjectSidePass* ObjectSidePass::New(::google::protobuf::Arena* arena) const {
  ObjectSidePass* n = new ObjectSidePass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectSidePass::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectSidePass)
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectSidePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectSidePass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ObjectSidePass.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ObjectSidePass_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::planning::ObjectSidePass_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectSidePass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectSidePass)
  return false;
#undef DO_
}

void ObjectSidePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectSidePass)
  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectSidePass)
}

::google::protobuf::uint8* ObjectSidePass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectSidePass)
  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectSidePass)
  return target;
}

int ObjectSidePass::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectSidePass)
  int total_size = 0;

  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectSidePass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectSidePass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectSidePass* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectSidePass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectSidePass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectSidePass)
    MergeFrom(*source);
  }
}

void ObjectSidePass::MergeFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectSidePass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectSidePass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSidePass::CopyFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSidePass::IsInitialized() const {

  return true;
}

void ObjectSidePass::Swap(ObjectSidePass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectSidePass::InternalSwap(ObjectSidePass* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectSidePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectSidePass_descriptor_;
  metadata.reflection = ObjectSidePass_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectSidePass

// optional .apollo.planning.ObjectSidePass.Type type = 1;
bool ObjectSidePass::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectSidePass::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectSidePass::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectSidePass::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::planning::ObjectSidePass_Type ObjectSidePass::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectSidePass.type)
  return static_cast< ::apollo::planning::ObjectSidePass_Type >(type_);
}
 void ObjectSidePass::set_type(::apollo::planning::ObjectSidePass_Type value) {
  assert(::apollo::planning::ObjectSidePass_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectSidePass.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectAvoid::ObjectAvoid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectAvoid)
}

void ObjectAvoid::InitAsDefaultInstance() {
}

ObjectAvoid::ObjectAvoid(const ObjectAvoid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectAvoid)
}

void ObjectAvoid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAvoid::~ObjectAvoid() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectAvoid)
  SharedDtor();
}

void ObjectAvoid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectAvoid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAvoid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAvoid_descriptor_;
}

const ObjectAvoid& ObjectAvoid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectAvoid* ObjectAvoid::default_instance_ = NULL;

ObjectAvoid* ObjectAvoid::New(::google::protobuf::Arena* arena) const {
  ObjectAvoid* n = new ObjectAvoid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectAvoid::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectAvoid)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectAvoid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectAvoid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectAvoid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectAvoid)
  return false;
#undef DO_
}

void ObjectAvoid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectAvoid)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectAvoid)
}

::google::protobuf::uint8* ObjectAvoid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectAvoid)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectAvoid)
  return target;
}

int ObjectAvoid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectAvoid)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectAvoid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectAvoid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectAvoid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectAvoid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectAvoid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectAvoid)
    MergeFrom(*source);
  }
}

void ObjectAvoid::MergeFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectAvoid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectAvoid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAvoid::CopyFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAvoid::IsInitialized() const {

  return true;
}

void ObjectAvoid::Swap(ObjectAvoid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectAvoid::InternalSwap(ObjectAvoid* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectAvoid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAvoid_descriptor_;
  metadata.reflection = ObjectAvoid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectAvoid

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisionType::kIgnoreFieldNumber;
const int ObjectDecisionType::kStopFieldNumber;
const int ObjectDecisionType::kFollowFieldNumber;
const int ObjectDecisionType::kYieldFieldNumber;
const int ObjectDecisionType::kOvertakeFieldNumber;
const int ObjectDecisionType::kNudgeFieldNumber;
const int ObjectDecisionType::kSidepassFieldNumber;
const int ObjectDecisionType::kAvoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisionType::ObjectDecisionType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectDecisionType)
}

void ObjectDecisionType::InitAsDefaultInstance() {
  ObjectDecisionType_default_oneof_instance_->ignore_ = const_cast< ::apollo::planning::ObjectIgnore*>(&::apollo::planning::ObjectIgnore::default_instance());
  ObjectDecisionType_default_oneof_instance_->stop_ = const_cast< ::apollo::planning::ObjectStop*>(&::apollo::planning::ObjectStop::default_instance());
  ObjectDecisionType_default_oneof_instance_->follow_ = const_cast< ::apollo::planning::ObjectFollow*>(&::apollo::planning::ObjectFollow::default_instance());
  ObjectDecisionType_default_oneof_instance_->yield_ = const_cast< ::apollo::planning::ObjectYield*>(&::apollo::planning::ObjectYield::default_instance());
  ObjectDecisionType_default_oneof_instance_->overtake_ = const_cast< ::apollo::planning::ObjectOvertake*>(&::apollo::planning::ObjectOvertake::default_instance());
  ObjectDecisionType_default_oneof_instance_->nudge_ = const_cast< ::apollo::planning::ObjectNudge*>(&::apollo::planning::ObjectNudge::default_instance());
  ObjectDecisionType_default_oneof_instance_->sidepass_ = const_cast< ::apollo::planning::ObjectSidePass*>(&::apollo::planning::ObjectSidePass::default_instance());
  ObjectDecisionType_default_oneof_instance_->avoid_ = const_cast< ::apollo::planning::ObjectAvoid*>(&::apollo::planning::ObjectAvoid::default_instance());
}

ObjectDecisionType::ObjectDecisionType(const ObjectDecisionType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecisionType)
}

void ObjectDecisionType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_object_tag();
}

ObjectDecisionType::~ObjectDecisionType() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecisionType)
  SharedDtor();
}

void ObjectDecisionType::SharedDtor() {
  if (has_object_tag()) {
    clear_object_tag();
  }
  if (this != default_instance_) {
  }
}

void ObjectDecisionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisionType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDecisionType_descriptor_;
}

const ObjectDecisionType& ObjectDecisionType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectDecisionType* ObjectDecisionType::default_instance_ = NULL;

ObjectDecisionType* ObjectDecisionType::New(::google::protobuf::Arena* arena) const {
  ObjectDecisionType* n = new ObjectDecisionType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisionType::clear_object_tag() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ObjectDecisionType)
  switch(object_tag_case()) {
    case kIgnore: {
      delete object_tag_.ignore_;
      break;
    }
    case kStop: {
      delete object_tag_.stop_;
      break;
    }
    case kFollow: {
      delete object_tag_.follow_;
      break;
    }
    case kYield: {
      delete object_tag_.yield_;
      break;
    }
    case kOvertake: {
      delete object_tag_.overtake_;
      break;
    }
    case kNudge: {
      delete object_tag_.nudge_;
      break;
    }
    case kSidepass: {
      delete object_tag_.sidepass_;
      break;
    }
    case kAvoid: {
      delete object_tag_.avoid_;
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}


void ObjectDecisionType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecisionType)
  clear_object_tag();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectDecisionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectDecisionType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ObjectIgnore ignore = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ignore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop;
        break;
      }

      // optional .apollo.planning.ObjectStop stop = 2;
      case 2: {
        if (tag == 18) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_follow;
        break;
      }

      // optional .apollo.planning.ObjectFollow follow = 3;
      case 3: {
        if (tag == 26) {
         parse_follow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_follow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_yield;
        break;
      }

      // optional .apollo.planning.ObjectYield yield = 4;
      case 4: {
        if (tag == 34) {
         parse_yield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_overtake;
        break;
      }

      // optional .apollo.planning.ObjectOvertake overtake = 5;
      case 5: {
        if (tag == 42) {
         parse_overtake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overtake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nudge;
        break;
      }

      // optional .apollo.planning.ObjectNudge nudge = 6;
      case 6: {
        if (tag == 50) {
         parse_nudge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nudge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sidepass;
        break;
      }

      // optional .apollo.planning.ObjectSidePass sidepass = 7;
      case 7: {
        if (tag == 58) {
         parse_sidepass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sidepass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avoid;
        break;
      }

      // optional .apollo.planning.ObjectAvoid avoid = 8;
      case 8: {
        if (tag == 66) {
         parse_avoid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avoid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectDecisionType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectDecisionType)
  return false;
#undef DO_
}

void ObjectDecisionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectDecisionType)
  // optional .apollo.planning.ObjectIgnore ignore = 1;
  if (has_ignore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *object_tag_.ignore_, output);
  }

  // optional .apollo.planning.ObjectStop stop = 2;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *object_tag_.stop_, output);
  }

  // optional .apollo.planning.ObjectFollow follow = 3;
  if (has_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *object_tag_.follow_, output);
  }

  // optional .apollo.planning.ObjectYield yield = 4;
  if (has_yield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *object_tag_.yield_, output);
  }

  // optional .apollo.planning.ObjectOvertake overtake = 5;
  if (has_overtake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *object_tag_.overtake_, output);
  }

  // optional .apollo.planning.ObjectNudge nudge = 6;
  if (has_nudge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *object_tag_.nudge_, output);
  }

  // optional .apollo.planning.ObjectSidePass sidepass = 7;
  if (has_sidepass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *object_tag_.sidepass_, output);
  }

  // optional .apollo.planning.ObjectAvoid avoid = 8;
  if (has_avoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *object_tag_.avoid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectDecisionType)
}

::google::protobuf::uint8* ObjectDecisionType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecisionType)
  // optional .apollo.planning.ObjectIgnore ignore = 1;
  if (has_ignore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *object_tag_.ignore_, false, target);
  }

  // optional .apollo.planning.ObjectStop stop = 2;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *object_tag_.stop_, false, target);
  }

  // optional .apollo.planning.ObjectFollow follow = 3;
  if (has_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *object_tag_.follow_, false, target);
  }

  // optional .apollo.planning.ObjectYield yield = 4;
  if (has_yield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *object_tag_.yield_, false, target);
  }

  // optional .apollo.planning.ObjectOvertake overtake = 5;
  if (has_overtake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *object_tag_.overtake_, false, target);
  }

  // optional .apollo.planning.ObjectNudge nudge = 6;
  if (has_nudge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *object_tag_.nudge_, false, target);
  }

  // optional .apollo.planning.ObjectSidePass sidepass = 7;
  if (has_sidepass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *object_tag_.sidepass_, false, target);
  }

  // optional .apollo.planning.ObjectAvoid avoid = 8;
  if (has_avoid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *object_tag_.avoid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecisionType)
  return target;
}

int ObjectDecisionType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecisionType)
  int total_size = 0;

  switch (object_tag_case()) {
    // optional .apollo.planning.ObjectIgnore ignore = 1;
    case kIgnore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.ignore_);
      break;
    }
    // optional .apollo.planning.ObjectStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.stop_);
      break;
    }
    // optional .apollo.planning.ObjectFollow follow = 3;
    case kFollow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.follow_);
      break;
    }
    // optional .apollo.planning.ObjectYield yield = 4;
    case kYield: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.yield_);
      break;
    }
    // optional .apollo.planning.ObjectOvertake overtake = 5;
    case kOvertake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.overtake_);
      break;
    }
    // optional .apollo.planning.ObjectNudge nudge = 6;
    case kNudge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.nudge_);
      break;
    }
    // optional .apollo.planning.ObjectSidePass sidepass = 7;
    case kSidepass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.sidepass_);
      break;
    }
    // optional .apollo.planning.ObjectAvoid avoid = 8;
    case kAvoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.avoid_);
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisionType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectDecisionType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDecisionType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisionType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectDecisionType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectDecisionType)
    MergeFrom(*source);
  }
}

void ObjectDecisionType::MergeFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecisionType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.object_tag_case()) {
    case kIgnore: {
      mutable_ignore()->::apollo::planning::ObjectIgnore::MergeFrom(from.ignore());
      break;
    }
    case kStop: {
      mutable_stop()->::apollo::planning::ObjectStop::MergeFrom(from.stop());
      break;
    }
    case kFollow: {
      mutable_follow()->::apollo::planning::ObjectFollow::MergeFrom(from.follow());
      break;
    }
    case kYield: {
      mutable_yield()->::apollo::planning::ObjectYield::MergeFrom(from.yield());
      break;
    }
    case kOvertake: {
      mutable_overtake()->::apollo::planning::ObjectOvertake::MergeFrom(from.overtake());
      break;
    }
    case kNudge: {
      mutable_nudge()->::apollo::planning::ObjectNudge::MergeFrom(from.nudge());
      break;
    }
    case kSidepass: {
      mutable_sidepass()->::apollo::planning::ObjectSidePass::MergeFrom(from.sidepass());
      break;
    }
    case kAvoid: {
      mutable_avoid()->::apollo::planning::ObjectAvoid::MergeFrom(from.avoid());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectDecisionType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisionType::CopyFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisionType::IsInitialized() const {

  return true;
}

void ObjectDecisionType::Swap(ObjectDecisionType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisionType::InternalSwap(ObjectDecisionType* other) {
  std::swap(object_tag_, other->object_tag_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisionType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDecisionType_descriptor_;
  metadata.reflection = ObjectDecisionType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecisionType

// optional .apollo.planning.ObjectIgnore ignore = 1;
bool ObjectDecisionType::has_ignore() const {
  return object_tag_case() == kIgnore;
}
void ObjectDecisionType::set_has_ignore() {
  _oneof_case_[0] = kIgnore;
}
void ObjectDecisionType::clear_ignore() {
  if (has_ignore()) {
    delete object_tag_.ignore_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectIgnore& ObjectDecisionType::ignore() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.ignore)
  return has_ignore()
      ? *object_tag_.ignore_
      : ::apollo::planning::ObjectIgnore::default_instance();
}
::apollo::planning::ObjectIgnore* ObjectDecisionType::mutable_ignore() {
  if (!has_ignore()) {
    clear_object_tag();
    set_has_ignore();
    object_tag_.ignore_ = new ::apollo::planning::ObjectIgnore;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.ignore)
  return object_tag_.ignore_;
}
::apollo::planning::ObjectIgnore* ObjectDecisionType::release_ignore() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.ignore)
  if (has_ignore()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectIgnore* temp = object_tag_.ignore_;
    object_tag_.ignore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_ignore(::apollo::planning::ObjectIgnore* ignore) {
  clear_object_tag();
  if (ignore) {
    set_has_ignore();
    object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.ignore)
}

// optional .apollo.planning.ObjectStop stop = 2;
bool ObjectDecisionType::has_stop() const {
  return object_tag_case() == kStop;
}
void ObjectDecisionType::set_has_stop() {
  _oneof_case_[0] = kStop;
}
void ObjectDecisionType::clear_stop() {
  if (has_stop()) {
    delete object_tag_.stop_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectStop& ObjectDecisionType::stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.stop)
  return has_stop()
      ? *object_tag_.stop_
      : ::apollo::planning::ObjectStop::default_instance();
}
::apollo::planning::ObjectStop* ObjectDecisionType::mutable_stop() {
  if (!has_stop()) {
    clear_object_tag();
    set_has_stop();
    object_tag_.stop_ = new ::apollo::planning::ObjectStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.stop)
  return object_tag_.stop_;
}
::apollo::planning::ObjectStop* ObjectDecisionType::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.stop)
  if (has_stop()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectStop* temp = object_tag_.stop_;
    object_tag_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_stop(::apollo::planning::ObjectStop* stop) {
  clear_object_tag();
  if (stop) {
    set_has_stop();
    object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.stop)
}

// optional .apollo.planning.ObjectFollow follow = 3;
bool ObjectDecisionType::has_follow() const {
  return object_tag_case() == kFollow;
}
void ObjectDecisionType::set_has_follow() {
  _oneof_case_[0] = kFollow;
}
void ObjectDecisionType::clear_follow() {
  if (has_follow()) {
    delete object_tag_.follow_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectFollow& ObjectDecisionType::follow() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.follow)
  return has_follow()
      ? *object_tag_.follow_
      : ::apollo::planning::ObjectFollow::default_instance();
}
::apollo::planning::ObjectFollow* ObjectDecisionType::mutable_follow() {
  if (!has_follow()) {
    clear_object_tag();
    set_has_follow();
    object_tag_.follow_ = new ::apollo::planning::ObjectFollow;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.follow)
  return object_tag_.follow_;
}
::apollo::planning::ObjectFollow* ObjectDecisionType::release_follow() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.follow)
  if (has_follow()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectFollow* temp = object_tag_.follow_;
    object_tag_.follow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_follow(::apollo::planning::ObjectFollow* follow) {
  clear_object_tag();
  if (follow) {
    set_has_follow();
    object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.follow)
}

// optional .apollo.planning.ObjectYield yield = 4;
bool ObjectDecisionType::has_yield() const {
  return object_tag_case() == kYield;
}
void ObjectDecisionType::set_has_yield() {
  _oneof_case_[0] = kYield;
}
void ObjectDecisionType::clear_yield() {
  if (has_yield()) {
    delete object_tag_.yield_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectYield& ObjectDecisionType::yield() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.yield)
  return has_yield()
      ? *object_tag_.yield_
      : ::apollo::planning::ObjectYield::default_instance();
}
::apollo::planning::ObjectYield* ObjectDecisionType::mutable_yield() {
  if (!has_yield()) {
    clear_object_tag();
    set_has_yield();
    object_tag_.yield_ = new ::apollo::planning::ObjectYield;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.yield)
  return object_tag_.yield_;
}
::apollo::planning::ObjectYield* ObjectDecisionType::release_yield() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.yield)
  if (has_yield()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectYield* temp = object_tag_.yield_;
    object_tag_.yield_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_yield(::apollo::planning::ObjectYield* yield) {
  clear_object_tag();
  if (yield) {
    set_has_yield();
    object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.yield)
}

// optional .apollo.planning.ObjectOvertake overtake = 5;
bool ObjectDecisionType::has_overtake() const {
  return object_tag_case() == kOvertake;
}
void ObjectDecisionType::set_has_overtake() {
  _oneof_case_[0] = kOvertake;
}
void ObjectDecisionType::clear_overtake() {
  if (has_overtake()) {
    delete object_tag_.overtake_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectOvertake& ObjectDecisionType::overtake() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.overtake)
  return has_overtake()
      ? *object_tag_.overtake_
      : ::apollo::planning::ObjectOvertake::default_instance();
}
::apollo::planning::ObjectOvertake* ObjectDecisionType::mutable_overtake() {
  if (!has_overtake()) {
    clear_object_tag();
    set_has_overtake();
    object_tag_.overtake_ = new ::apollo::planning::ObjectOvertake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.overtake)
  return object_tag_.overtake_;
}
::apollo::planning::ObjectOvertake* ObjectDecisionType::release_overtake() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.overtake)
  if (has_overtake()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectOvertake* temp = object_tag_.overtake_;
    object_tag_.overtake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_overtake(::apollo::planning::ObjectOvertake* overtake) {
  clear_object_tag();
  if (overtake) {
    set_has_overtake();
    object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.overtake)
}

// optional .apollo.planning.ObjectNudge nudge = 6;
bool ObjectDecisionType::has_nudge() const {
  return object_tag_case() == kNudge;
}
void ObjectDecisionType::set_has_nudge() {
  _oneof_case_[0] = kNudge;
}
void ObjectDecisionType::clear_nudge() {
  if (has_nudge()) {
    delete object_tag_.nudge_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectNudge& ObjectDecisionType::nudge() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.nudge)
  return has_nudge()
      ? *object_tag_.nudge_
      : ::apollo::planning::ObjectNudge::default_instance();
}
::apollo::planning::ObjectNudge* ObjectDecisionType::mutable_nudge() {
  if (!has_nudge()) {
    clear_object_tag();
    set_has_nudge();
    object_tag_.nudge_ = new ::apollo::planning::ObjectNudge;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.nudge)
  return object_tag_.nudge_;
}
::apollo::planning::ObjectNudge* ObjectDecisionType::release_nudge() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.nudge)
  if (has_nudge()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectNudge* temp = object_tag_.nudge_;
    object_tag_.nudge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_nudge(::apollo::planning::ObjectNudge* nudge) {
  clear_object_tag();
  if (nudge) {
    set_has_nudge();
    object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.nudge)
}

// optional .apollo.planning.ObjectSidePass sidepass = 7;
bool ObjectDecisionType::has_sidepass() const {
  return object_tag_case() == kSidepass;
}
void ObjectDecisionType::set_has_sidepass() {
  _oneof_case_[0] = kSidepass;
}
void ObjectDecisionType::clear_sidepass() {
  if (has_sidepass()) {
    delete object_tag_.sidepass_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectSidePass& ObjectDecisionType::sidepass() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.sidepass)
  return has_sidepass()
      ? *object_tag_.sidepass_
      : ::apollo::planning::ObjectSidePass::default_instance();
}
::apollo::planning::ObjectSidePass* ObjectDecisionType::mutable_sidepass() {
  if (!has_sidepass()) {
    clear_object_tag();
    set_has_sidepass();
    object_tag_.sidepass_ = new ::apollo::planning::ObjectSidePass;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.sidepass)
  return object_tag_.sidepass_;
}
::apollo::planning::ObjectSidePass* ObjectDecisionType::release_sidepass() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.sidepass)
  if (has_sidepass()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectSidePass* temp = object_tag_.sidepass_;
    object_tag_.sidepass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_sidepass(::apollo::planning::ObjectSidePass* sidepass) {
  clear_object_tag();
  if (sidepass) {
    set_has_sidepass();
    object_tag_.sidepass_ = sidepass;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.sidepass)
}

// optional .apollo.planning.ObjectAvoid avoid = 8;
bool ObjectDecisionType::has_avoid() const {
  return object_tag_case() == kAvoid;
}
void ObjectDecisionType::set_has_avoid() {
  _oneof_case_[0] = kAvoid;
}
void ObjectDecisionType::clear_avoid() {
  if (has_avoid()) {
    delete object_tag_.avoid_;
    clear_has_object_tag();
  }
}
 const ::apollo::planning::ObjectAvoid& ObjectDecisionType::avoid() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.avoid)
  return has_avoid()
      ? *object_tag_.avoid_
      : ::apollo::planning::ObjectAvoid::default_instance();
}
::apollo::planning::ObjectAvoid* ObjectDecisionType::mutable_avoid() {
  if (!has_avoid()) {
    clear_object_tag();
    set_has_avoid();
    object_tag_.avoid_ = new ::apollo::planning::ObjectAvoid;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.avoid)
  return object_tag_.avoid_;
}
::apollo::planning::ObjectAvoid* ObjectDecisionType::release_avoid() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.avoid)
  if (has_avoid()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectAvoid* temp = object_tag_.avoid_;
    object_tag_.avoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_avoid(::apollo::planning::ObjectAvoid* avoid) {
  clear_object_tag();
  if (avoid) {
    set_has_avoid();
    object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.avoid)
}

bool ObjectDecisionType::has_object_tag() const {
  return object_tag_case() != OBJECT_TAG_NOT_SET;
}
void ObjectDecisionType::clear_has_object_tag() {
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}
ObjectDecisionType::ObjectTagCase ObjectDecisionType::object_tag_case() const {
  return ObjectDecisionType::ObjectTagCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecision::kIdFieldNumber;
const int ObjectDecision::kPerceptionIdFieldNumber;
const int ObjectDecision::kObjectDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecision::ObjectDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectDecision)
}

void ObjectDecision::InitAsDefaultInstance() {
}

ObjectDecision::ObjectDecision(const ObjectDecision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecision)
}

void ObjectDecision::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perception_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDecision::~ObjectDecision() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecision)
  SharedDtor();
}

void ObjectDecision::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ObjectDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDecision_descriptor_;
}

const ObjectDecision& ObjectDecision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectDecision* ObjectDecision::default_instance_ = NULL;

ObjectDecision* ObjectDecision::New(::google::protobuf::Arena* arena) const {
  ObjectDecision* n = new ObjectDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecision)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    perception_id_ = 0;
  }
  object_decision_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.ObjectDecision.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_perception_id;
        break;
      }

      // optional int32 perception_id = 2;
      case 2: {
        if (tag == 16) {
         parse_perception_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perception_id_)));
          set_has_perception_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_object_decision;
        break;
      }

      // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
      case 3: {
        if (tag == 26) {
         parse_object_decision:
          DO_(input->IncrementRecursionDepth());
         parse_loop_object_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_object_decision;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectDecision)
  return false;
#undef DO_
}

void ObjectDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectDecision)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectDecision.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 perception_id = 2;
  if (has_perception_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->perception_id(), output);
  }

  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  for (unsigned int i = 0, n = this->object_decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object_decision(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectDecision)
}

::google::protobuf::uint8* ObjectDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecision)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectDecision.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 perception_id = 2;
  if (has_perception_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->perception_id(), target);
  }

  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  for (unsigned int i = 0, n = this->object_decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->object_decision(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecision)
  return target;
}

int ObjectDecision::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecision)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 perception_id = 2;
    if (has_perception_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perception_id());
    }

  }
  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  total_size += 1 * this->object_decision_size();
  for (int i = 0; i < this->object_decision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_decision(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDecision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectDecision)
    MergeFrom(*source);
  }
}

void ObjectDecision::MergeFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_decision_.MergeFrom(from.object_decision_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_perception_id()) {
      set_perception_id(from.perception_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecision::CopyFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecision::IsInitialized() const {

  return true;
}

void ObjectDecision::Swap(ObjectDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecision::InternalSwap(ObjectDecision* other) {
  id_.Swap(&other->id_);
  std::swap(perception_id_, other->perception_id_);
  object_decision_.UnsafeArenaSwap(&other->object_decision_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDecision_descriptor_;
  metadata.reflection = ObjectDecision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecision

// optional string id = 1;
bool ObjectDecision::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectDecision::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectDecision::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectDecision::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& ObjectDecision::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDecision::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectDecision.id)
}
 void ObjectDecision::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.ObjectDecision.id)
}
 void ObjectDecision::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ObjectDecision.id)
}
 ::std::string* ObjectDecision::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecision.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ObjectDecision::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecision.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ObjectDecision::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecision.id)
}

// optional int32 perception_id = 2;
bool ObjectDecision::has_perception_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectDecision::set_has_perception_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectDecision::clear_has_perception_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectDecision::clear_perception_id() {
  perception_id_ = 0;
  clear_has_perception_id();
}
 ::google::protobuf::int32 ObjectDecision::perception_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.perception_id)
  return perception_id_;
}
 void ObjectDecision::set_perception_id(::google::protobuf::int32 value) {
  set_has_perception_id();
  perception_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectDecision.perception_id)
}

// repeated .apollo.planning.ObjectDecisionType object_decision = 3;
int ObjectDecision::object_decision_size() const {
  return object_decision_.size();
}
void ObjectDecision::clear_object_decision() {
  object_decision_.Clear();
}
const ::apollo::planning::ObjectDecisionType& ObjectDecision::object_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.object_decision)
  return object_decision_.Get(index);
}
::apollo::planning::ObjectDecisionType* ObjectDecision::mutable_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecision.object_decision)
  return object_decision_.Mutable(index);
}
::apollo::planning::ObjectDecisionType* ObjectDecision::add_object_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectDecision.object_decision)
  return object_decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >*
ObjectDecision::mutable_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectDecision.object_decision)
  return &object_decision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >&
ObjectDecision::object_decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectDecision.object_decision)
  return object_decision_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisions::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisions::ObjectDecisions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectDecisions)
}

void ObjectDecisions::InitAsDefaultInstance() {
}

ObjectDecisions::ObjectDecisions(const ObjectDecisions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecisions)
}

void ObjectDecisions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDecisions::~ObjectDecisions() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecisions)
  SharedDtor();
}

void ObjectDecisions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectDecisions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDecisions_descriptor_;
}

const ObjectDecisions& ObjectDecisions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

ObjectDecisions* ObjectDecisions::default_instance_ = NULL;

ObjectDecisions* ObjectDecisions::New(::google::protobuf::Arena* arena) const {
  ObjectDecisions* n = new ObjectDecisions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisions::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecisions)
  decision_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObjectDecisions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObjectDecisions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.ObjectDecision decision = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_decision;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObjectDecisions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObjectDecisions)
  return false;
#undef DO_
}

void ObjectDecisions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObjectDecisions)
  // repeated .apollo.planning.ObjectDecision decision = 1;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->decision(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObjectDecisions)
}

::google::protobuf::uint8* ObjectDecisions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecisions)
  // repeated .apollo.planning.ObjectDecision decision = 1;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->decision(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecisions)
  return target;
}

int ObjectDecisions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecisions)
  int total_size = 0;

  // repeated .apollo.planning.ObjectDecision decision = 1;
  total_size += 1 * this->decision_size();
  for (int i = 0; i < this->decision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decision(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectDecisions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectDecisions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectDecisions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectDecisions)
    MergeFrom(*source);
  }
}

void ObjectDecisions::MergeFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecisions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  decision_.MergeFrom(from.decision_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObjectDecisions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisions::CopyFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisions::IsInitialized() const {

  return true;
}

void ObjectDecisions::Swap(ObjectDecisions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisions::InternalSwap(ObjectDecisions* other) {
  decision_.UnsafeArenaSwap(&other->decision_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDecisions_descriptor_;
  metadata.reflection = ObjectDecisions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecisions

// repeated .apollo.planning.ObjectDecision decision = 1;
int ObjectDecisions::decision_size() const {
  return decision_.size();
}
void ObjectDecisions::clear_decision() {
  decision_.Clear();
}
const ::apollo::planning::ObjectDecision& ObjectDecisions::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisions.decision)
  return decision_.Get(index);
}
::apollo::planning::ObjectDecision* ObjectDecisions::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisions.decision)
  return decision_.Mutable(index);
}
::apollo::planning::ObjectDecision* ObjectDecisions::add_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectDecisions.decision)
  return decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecision >*
ObjectDecisions::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectDecisions.decision)
  return &decision_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ObjectDecision >&
ObjectDecisions::decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectDecisions.decision)
  return decision_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainStop::kReasonCodeFieldNumber;
const int MainStop::kReasonFieldNumber;
const int MainStop::kStopPointFieldNumber;
const int MainStop::kStopHeadingFieldNumber;
const int MainStop::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainStop::MainStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainStop)
}

void MainStop::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

MainStop::MainStop(const MainStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainStop)
}

void MainStop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_code_ = 1;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_point_ = NULL;
  stop_heading_ = 0;
  change_lane_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainStop::~MainStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainStop)
  SharedDtor();
}

void MainStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stop_point_;
  }
}

void MainStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainStop_descriptor_;
}

const MainStop& MainStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainStop* MainStop::default_instance_ = NULL;

MainStop* MainStop::New(::google::protobuf::Arena* arena) const {
  MainStop* n = new MainStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainStop)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MainStop, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MainStop*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(change_lane_type_, stop_heading_);
    reason_code_ = 1;
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.StopReasonCode reason_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::StopReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::apollo::planning::StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.MainStop.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stop_point;
        break;
      }

      // optional .apollo.common.PointENU stop_point = 3;
      case 3: {
        if (tag == 26) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_stop_heading;
        break;
      }

      // optional double stop_heading = 4;
      case 4: {
        if (tag == 33) {
         parse_stop_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
          set_has_stop_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_change_lane_type;
        break;
      }

      // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
      case 5: {
        if (tag == 40) {
         parse_change_lane_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::apollo::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainStop)
  return false;
#undef DO_
}

void MainStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainStop)
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (has_reason_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // optional double stop_heading = 4;
  if (has_stop_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_heading(), output);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
  if (has_change_lane_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainStop)
}

::google::protobuf::uint8* MainStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainStop)
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (has_reason_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stop_point_, false, target);
  }

  // optional double stop_heading = 4;
  if (has_stop_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_heading(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
  if (has_change_lane_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainStop)
  return target;
}

int MainStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainStop)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.planning.StopReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .apollo.common.PointENU stop_point = 3;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double stop_heading = 4;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
    if (has_change_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainStop)
    MergeFrom(*source);
  }
}

void MainStop::MergeFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason_code()) {
      set_reason_code(from.reason_code());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from.stop_point());
    }
    if (from.has_stop_heading()) {
      set_stop_heading(from.stop_heading());
    }
    if (from.has_change_lane_type()) {
      set_change_lane_type(from.change_lane_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainStop::CopyFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainStop::IsInitialized() const {

  return true;
}

void MainStop::Swap(MainStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainStop::InternalSwap(MainStop* other) {
  std::swap(reason_code_, other->reason_code_);
  reason_.Swap(&other->reason_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(stop_heading_, other->stop_heading_);
  std::swap(change_lane_type_, other->change_lane_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainStop_descriptor_;
  metadata.reflection = MainStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainStop

// optional .apollo.planning.StopReasonCode reason_code = 1;
bool MainStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
void MainStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
 ::apollo::planning::StopReasonCode MainStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.reason_code)
  return static_cast< ::apollo::planning::StopReasonCode >(reason_code_);
}
 void MainStop::set_reason_code(::apollo::planning::StopReasonCode value) {
  assert(::apollo::planning::StopReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.reason_code)
}

// optional string reason = 2;
bool MainStop::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainStop::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void MainStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& MainStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.reason)
}
 void MainStop::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.MainStop.reason)
}
 void MainStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.MainStop.reason)
}
 ::std::string* MainStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MainStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainStop.reason)
}

// optional .apollo.common.PointENU stop_point = 3;
bool MainStop::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MainStop::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
void MainStop::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void MainStop::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
  clear_has_stop_point();
}
const ::apollo::common::PointENU& MainStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::common::PointENU* MainStop::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainStop.stop_point)
  return stop_point_;
}
::apollo::common::PointENU* MainStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainStop.stop_point)
  clear_has_stop_point();
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void MainStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainStop.stop_point)
}

// optional double stop_heading = 4;
bool MainStop::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MainStop::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000008u;
}
void MainStop::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
void MainStop::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
 double MainStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.stop_heading)
  return stop_heading_;
}
 void MainStop::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.stop_heading)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 5;
bool MainStop::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MainStop::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000010u;
}
void MainStop::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void MainStop::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
 ::apollo::routing::ChangeLaneType MainStop::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.change_lane_type)
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
 void MainStop::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.change_lane_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopHardBrake::EmergencyStopHardBrake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EmergencyStopHardBrake)
}

void EmergencyStopHardBrake::InitAsDefaultInstance() {
}

EmergencyStopHardBrake::EmergencyStopHardBrake(const EmergencyStopHardBrake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EmergencyStopHardBrake)
}

void EmergencyStopHardBrake::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmergencyStopHardBrake::~EmergencyStopHardBrake() {
  // @@protoc_insertion_point(destructor:apollo.planning.EmergencyStopHardBrake)
  SharedDtor();
}

void EmergencyStopHardBrake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmergencyStopHardBrake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopHardBrake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmergencyStopHardBrake_descriptor_;
}

const EmergencyStopHardBrake& EmergencyStopHardBrake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

EmergencyStopHardBrake* EmergencyStopHardBrake::default_instance_ = NULL;

EmergencyStopHardBrake* EmergencyStopHardBrake::New(::google::protobuf::Arena* arena) const {
  EmergencyStopHardBrake* n = new EmergencyStopHardBrake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopHardBrake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EmergencyStopHardBrake)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmergencyStopHardBrake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.EmergencyStopHardBrake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.EmergencyStopHardBrake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.EmergencyStopHardBrake)
  return false;
#undef DO_
}

void EmergencyStopHardBrake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.EmergencyStopHardBrake)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.EmergencyStopHardBrake)
}

::google::protobuf::uint8* EmergencyStopHardBrake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EmergencyStopHardBrake)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EmergencyStopHardBrake)
  return target;
}

int EmergencyStopHardBrake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EmergencyStopHardBrake)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopHardBrake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EmergencyStopHardBrake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmergencyStopHardBrake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopHardBrake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EmergencyStopHardBrake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EmergencyStopHardBrake)
    MergeFrom(*source);
  }
}

void EmergencyStopHardBrake::MergeFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EmergencyStopHardBrake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EmergencyStopHardBrake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopHardBrake::CopyFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopHardBrake::IsInitialized() const {

  return true;
}

void EmergencyStopHardBrake::Swap(EmergencyStopHardBrake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopHardBrake::InternalSwap(EmergencyStopHardBrake* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopHardBrake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmergencyStopHardBrake_descriptor_;
  metadata.reflection = EmergencyStopHardBrake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyStopHardBrake

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EmergencyStopCruiseToStop)
}

void EmergencyStopCruiseToStop::InitAsDefaultInstance() {
}

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EmergencyStopCruiseToStop)
}

void EmergencyStopCruiseToStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmergencyStopCruiseToStop::~EmergencyStopCruiseToStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.EmergencyStopCruiseToStop)
  SharedDtor();
}

void EmergencyStopCruiseToStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmergencyStopCruiseToStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopCruiseToStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmergencyStopCruiseToStop_descriptor_;
}

const EmergencyStopCruiseToStop& EmergencyStopCruiseToStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

EmergencyStopCruiseToStop* EmergencyStopCruiseToStop::default_instance_ = NULL;

EmergencyStopCruiseToStop* EmergencyStopCruiseToStop::New(::google::protobuf::Arena* arena) const {
  EmergencyStopCruiseToStop* n = new EmergencyStopCruiseToStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopCruiseToStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EmergencyStopCruiseToStop)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmergencyStopCruiseToStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.EmergencyStopCruiseToStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.EmergencyStopCruiseToStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.EmergencyStopCruiseToStop)
  return false;
#undef DO_
}

void EmergencyStopCruiseToStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.EmergencyStopCruiseToStop)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.EmergencyStopCruiseToStop)
}

::google::protobuf::uint8* EmergencyStopCruiseToStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EmergencyStopCruiseToStop)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EmergencyStopCruiseToStop)
  return target;
}

int EmergencyStopCruiseToStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EmergencyStopCruiseToStop)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopCruiseToStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EmergencyStopCruiseToStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmergencyStopCruiseToStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopCruiseToStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EmergencyStopCruiseToStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EmergencyStopCruiseToStop)
    MergeFrom(*source);
  }
}

void EmergencyStopCruiseToStop::MergeFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EmergencyStopCruiseToStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EmergencyStopCruiseToStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopCruiseToStop::CopyFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopCruiseToStop::IsInitialized() const {

  return true;
}

void EmergencyStopCruiseToStop::Swap(EmergencyStopCruiseToStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopCruiseToStop::InternalSwap(EmergencyStopCruiseToStop* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopCruiseToStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmergencyStopCruiseToStop_descriptor_;
  metadata.reflection = EmergencyStopCruiseToStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyStopCruiseToStop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainEmergencyStop_ReasonCode_descriptor_;
}
bool MainEmergencyStop_ReasonCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_INTERNAL_ERR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_COLLISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_FIND_PATH;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_MAKE_DECISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_SENSOR_ERROR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MIN;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MAX;
const int MainEmergencyStop::ReasonCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainEmergencyStop::kReasonCodeFieldNumber;
const int MainEmergencyStop::kReasonFieldNumber;
const int MainEmergencyStop::kHardBrakeFieldNumber;
const int MainEmergencyStop::kCruiseToStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainEmergencyStop::MainEmergencyStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainEmergencyStop)
}

void MainEmergencyStop::InitAsDefaultInstance() {
  MainEmergencyStop_default_oneof_instance_->hard_brake_ = const_cast< ::apollo::planning::EmergencyStopHardBrake*>(&::apollo::planning::EmergencyStopHardBrake::default_instance());
  MainEmergencyStop_default_oneof_instance_->cruise_to_stop_ = const_cast< ::apollo::planning::EmergencyStopCruiseToStop*>(&::apollo::planning::EmergencyStopCruiseToStop::default_instance());
}

MainEmergencyStop::MainEmergencyStop(const MainEmergencyStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainEmergencyStop)
}

void MainEmergencyStop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_code_ = 1;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_task();
}

MainEmergencyStop::~MainEmergencyStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainEmergencyStop)
  SharedDtor();
}

void MainEmergencyStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_task()) {
    clear_task();
  }
  if (this != default_instance_) {
  }
}

void MainEmergencyStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainEmergencyStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainEmergencyStop_descriptor_;
}

const MainEmergencyStop& MainEmergencyStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainEmergencyStop* MainEmergencyStop::default_instance_ = NULL;

MainEmergencyStop* MainEmergencyStop::New(::google::protobuf::Arena* arena) const {
  MainEmergencyStop* n = new MainEmergencyStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainEmergencyStop::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.MainEmergencyStop)
  switch(task_case()) {
    case kHardBrake: {
      delete task_.hard_brake_;
      break;
    }
    case kCruiseToStop: {
      delete task_.cruise_to_stop_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainEmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainEmergencyStop)
  if (_has_bits_[0 / 32] & 3u) {
    reason_code_ = 1;
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  clear_task();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainEmergencyStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainEmergencyStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::MainEmergencyStop_ReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::apollo::planning::MainEmergencyStop_ReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.MainEmergencyStop.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hard_brake;
        break;
      }

      // optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
      case 3: {
        if (tag == 26) {
         parse_hard_brake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_brake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cruise_to_stop;
        break;
      }

      // optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
      case 4: {
        if (tag == 34) {
         parse_cruise_to_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cruise_to_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainEmergencyStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainEmergencyStop)
  return false;
#undef DO_
}

void MainEmergencyStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainEmergencyStop)
  // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (has_reason_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainEmergencyStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
  if (has_hard_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *task_.hard_brake_, output);
  }

  // optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
  if (has_cruise_to_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *task_.cruise_to_stop_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainEmergencyStop)
}

::google::protobuf::uint8* MainEmergencyStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainEmergencyStop)
  // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (has_reason_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainEmergencyStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
  if (has_hard_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *task_.hard_brake_, false, target);
  }

  // optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
  if (has_cruise_to_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *task_.cruise_to_stop_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainEmergencyStop)
  return target;
}

int MainEmergencyStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainEmergencyStop)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  switch (task_case()) {
    // optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
    case kHardBrake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.hard_brake_);
      break;
    }
    // optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
    case kCruiseToStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.cruise_to_stop_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainEmergencyStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainEmergencyStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainEmergencyStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainEmergencyStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainEmergencyStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainEmergencyStop)
    MergeFrom(*source);
  }
}

void MainEmergencyStop::MergeFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainEmergencyStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.task_case()) {
    case kHardBrake: {
      mutable_hard_brake()->::apollo::planning::EmergencyStopHardBrake::MergeFrom(from.hard_brake());
      break;
    }
    case kCruiseToStop: {
      mutable_cruise_to_stop()->::apollo::planning::EmergencyStopCruiseToStop::MergeFrom(from.cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason_code()) {
      set_reason_code(from.reason_code());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainEmergencyStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainEmergencyStop::CopyFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainEmergencyStop::IsInitialized() const {

  return true;
}

void MainEmergencyStop::Swap(MainEmergencyStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainEmergencyStop::InternalSwap(MainEmergencyStop* other) {
  std::swap(reason_code_, other->reason_code_);
  reason_.Swap(&other->reason_);
  std::swap(task_, other->task_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainEmergencyStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainEmergencyStop_descriptor_;
  metadata.reflection = MainEmergencyStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainEmergencyStop

// optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
bool MainEmergencyStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainEmergencyStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
void MainEmergencyStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainEmergencyStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
 ::apollo::planning::MainEmergencyStop_ReasonCode MainEmergencyStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.reason_code)
  return static_cast< ::apollo::planning::MainEmergencyStop_ReasonCode >(reason_code_);
}
 void MainEmergencyStop::set_reason_code(::apollo::planning::MainEmergencyStop_ReasonCode value) {
  assert(::apollo::planning::MainEmergencyStop_ReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainEmergencyStop.reason_code)
}

// optional string reason = 2;
bool MainEmergencyStop::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainEmergencyStop::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void MainEmergencyStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainEmergencyStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& MainEmergencyStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainEmergencyStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainEmergencyStop.reason)
}
 void MainEmergencyStop::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.MainEmergencyStop.reason)
}
 void MainEmergencyStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.MainEmergencyStop.reason)
}
 ::std::string* MainEmergencyStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MainEmergencyStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainEmergencyStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.reason)
}

// optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
bool MainEmergencyStop::has_hard_brake() const {
  return task_case() == kHardBrake;
}
void MainEmergencyStop::set_has_hard_brake() {
  _oneof_case_[0] = kHardBrake;
}
void MainEmergencyStop::clear_hard_brake() {
  if (has_hard_brake()) {
    delete task_.hard_brake_;
    clear_has_task();
  }
}
 const ::apollo::planning::EmergencyStopHardBrake& MainEmergencyStop::hard_brake() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.hard_brake)
  return has_hard_brake()
      ? *task_.hard_brake_
      : ::apollo::planning::EmergencyStopHardBrake::default_instance();
}
::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::mutable_hard_brake() {
  if (!has_hard_brake()) {
    clear_task();
    set_has_hard_brake();
    task_.hard_brake_ = new ::apollo::planning::EmergencyStopHardBrake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.hard_brake)
  return task_.hard_brake_;
}
::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::release_hard_brake() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.hard_brake)
  if (has_hard_brake()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopHardBrake* temp = task_.hard_brake_;
    task_.hard_brake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainEmergencyStop::set_allocated_hard_brake(::apollo::planning::EmergencyStopHardBrake* hard_brake) {
  clear_task();
  if (hard_brake) {
    set_has_hard_brake();
    task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.hard_brake)
}

// optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
bool MainEmergencyStop::has_cruise_to_stop() const {
  return task_case() == kCruiseToStop;
}
void MainEmergencyStop::set_has_cruise_to_stop() {
  _oneof_case_[0] = kCruiseToStop;
}
void MainEmergencyStop::clear_cruise_to_stop() {
  if (has_cruise_to_stop()) {
    delete task_.cruise_to_stop_;
    clear_has_task();
  }
}
 const ::apollo::planning::EmergencyStopCruiseToStop& MainEmergencyStop::cruise_to_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.cruise_to_stop)
  return has_cruise_to_stop()
      ? *task_.cruise_to_stop_
      : ::apollo::planning::EmergencyStopCruiseToStop::default_instance();
}
::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::mutable_cruise_to_stop() {
  if (!has_cruise_to_stop()) {
    clear_task();
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = new ::apollo::planning::EmergencyStopCruiseToStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.cruise_to_stop)
  return task_.cruise_to_stop_;
}
::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::release_cruise_to_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.cruise_to_stop)
  if (has_cruise_to_stop()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopCruiseToStop* temp = task_.cruise_to_stop_;
    task_.cruise_to_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainEmergencyStop::set_allocated_cruise_to_stop(::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop) {
  clear_task();
  if (cruise_to_stop) {
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.cruise_to_stop)
}

bool MainEmergencyStop::has_task() const {
  return task_case() != TASK_NOT_SET;
}
void MainEmergencyStop::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
MainEmergencyStop::TaskCase MainEmergencyStop::task_case() const {
  return MainEmergencyStop::TaskCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainCruise::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainCruise::MainCruise()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainCruise)
}

void MainCruise::InitAsDefaultInstance() {
}

MainCruise::MainCruise(const MainCruise& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainCruise)
}

void MainCruise::SharedCtor() {
  _cached_size_ = 0;
  change_lane_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainCruise::~MainCruise() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainCruise)
  SharedDtor();
}

void MainCruise::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainCruise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainCruise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainCruise_descriptor_;
}

const MainCruise& MainCruise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainCruise* MainCruise::default_instance_ = NULL;

MainCruise* MainCruise::New(::google::protobuf::Arena* arena) const {
  MainCruise* n = new MainCruise;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainCruise::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainCruise)
  change_lane_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainCruise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainCruise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::apollo::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainCruise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainCruise)
  return false;
#undef DO_
}

void MainCruise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainCruise)
  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  if (has_change_lane_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainCruise)
}

::google::protobuf::uint8* MainCruise::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainCruise)
  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  if (has_change_lane_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainCruise)
  return target;
}

int MainCruise::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainCruise)
  int total_size = 0;

  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  if (has_change_lane_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainCruise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainCruise)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainCruise* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainCruise>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainCruise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainCruise)
    MergeFrom(*source);
  }
}

void MainCruise::MergeFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainCruise)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_lane_type()) {
      set_change_lane_type(from.change_lane_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainCruise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainCruise::CopyFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainCruise::IsInitialized() const {

  return true;
}

void MainCruise::Swap(MainCruise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainCruise::InternalSwap(MainCruise* other) {
  std::swap(change_lane_type_, other->change_lane_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainCruise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainCruise_descriptor_;
  metadata.reflection = MainCruise_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainCruise

// optional .apollo.routing.ChangeLaneType change_lane_type = 1;
bool MainCruise::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainCruise::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MainCruise::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainCruise::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
 ::apollo::routing::ChangeLaneType MainCruise::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainCruise.change_lane_type)
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
 void MainCruise::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainCruise.change_lane_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainChangeLane_Type_descriptor_;
}
bool MainChangeLane_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainChangeLane_Type MainChangeLane::LEFT;
const MainChangeLane_Type MainChangeLane::RIGHT;
const MainChangeLane_Type MainChangeLane::Type_MIN;
const MainChangeLane_Type MainChangeLane::Type_MAX;
const int MainChangeLane::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainChangeLane::kTypeFieldNumber;
const int MainChangeLane::kDefaultLaneFieldNumber;
const int MainChangeLane::kDefaultLaneStopFieldNumber;
const int MainChangeLane::kTargetLaneStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainChangeLane::MainChangeLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainChangeLane)
}

void MainChangeLane::InitAsDefaultInstance() {
  default_lane_stop_ = const_cast< ::apollo::planning::MainStop*>(&::apollo::planning::MainStop::default_instance());
  target_lane_stop_ = const_cast< ::apollo::planning::MainStop*>(&::apollo::planning::MainStop::default_instance());
}

MainChangeLane::MainChangeLane(const MainChangeLane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainChangeLane)
}

void MainChangeLane::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  default_lane_stop_ = NULL;
  target_lane_stop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainChangeLane::~MainChangeLane() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainChangeLane)
  SharedDtor();
}

void MainChangeLane::SharedDtor() {
  if (this != default_instance_) {
    delete default_lane_stop_;
    delete target_lane_stop_;
  }
}

void MainChangeLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainChangeLane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainChangeLane_descriptor_;
}

const MainChangeLane& MainChangeLane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainChangeLane* MainChangeLane::default_instance_ = NULL;

MainChangeLane* MainChangeLane::New(::google::protobuf::Arena* arena) const {
  MainChangeLane* n = new MainChangeLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainChangeLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainChangeLane)
  if (_has_bits_[0 / 32] & 13u) {
    type_ = 1;
    if (has_default_lane_stop()) {
      if (default_lane_stop_ != NULL) default_lane_stop_->::apollo::planning::MainStop::Clear();
    }
    if (has_target_lane_stop()) {
      if (target_lane_stop_ != NULL) target_lane_stop_->::apollo::planning::MainStop::Clear();
    }
  }
  default_lane_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainChangeLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainChangeLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.MainChangeLane.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::MainChangeLane_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::planning::MainChangeLane_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_default_lane;
        break;
      }

      // repeated .apollo.planning.TargetLane default_lane = 2;
      case 2: {
        if (tag == 18) {
         parse_default_lane:
          DO_(input->IncrementRecursionDepth());
         parse_loop_default_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_default_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_default_lane;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_default_lane_stop;
        break;
      }

      // optional .apollo.planning.MainStop default_lane_stop = 3;
      case 3: {
        if (tag == 26) {
         parse_default_lane_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_lane_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target_lane_stop;
        break;
      }

      // optional .apollo.planning.MainStop target_lane_stop = 4;
      case 4: {
        if (tag == 34) {
         parse_target_lane_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_lane_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainChangeLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainChangeLane)
  return false;
#undef DO_
}

void MainChangeLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainChangeLane)
  // optional .apollo.planning.MainChangeLane.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .apollo.planning.TargetLane default_lane = 2;
  for (unsigned int i = 0, n = this->default_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->default_lane(i), output);
  }

  // optional .apollo.planning.MainStop default_lane_stop = 3;
  if (has_default_lane_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_lane_stop_, output);
  }

  // optional .apollo.planning.MainStop target_lane_stop = 4;
  if (has_target_lane_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_lane_stop_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainChangeLane)
}

::google::protobuf::uint8* MainChangeLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainChangeLane)
  // optional .apollo.planning.MainChangeLane.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .apollo.planning.TargetLane default_lane = 2;
  for (unsigned int i = 0, n = this->default_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->default_lane(i), false, target);
  }

  // optional .apollo.planning.MainStop default_lane_stop = 3;
  if (has_default_lane_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->default_lane_stop_, false, target);
  }

  // optional .apollo.planning.MainStop target_lane_stop = 4;
  if (has_target_lane_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->target_lane_stop_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainChangeLane)
  return target;
}

int MainChangeLane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainChangeLane)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional .apollo.planning.MainChangeLane.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .apollo.planning.MainStop default_lane_stop = 3;
    if (has_default_lane_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->default_lane_stop_);
    }

    // optional .apollo.planning.MainStop target_lane_stop = 4;
    if (has_target_lane_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->target_lane_stop_);
    }

  }
  // repeated .apollo.planning.TargetLane default_lane = 2;
  total_size += 1 * this->default_lane_size();
  for (int i = 0; i < this->default_lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->default_lane(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainChangeLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainChangeLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainChangeLane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainChangeLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainChangeLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainChangeLane)
    MergeFrom(*source);
  }
}

void MainChangeLane::MergeFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainChangeLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  default_lane_.MergeFrom(from.default_lane_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_default_lane_stop()) {
      mutable_default_lane_stop()->::apollo::planning::MainStop::MergeFrom(from.default_lane_stop());
    }
    if (from.has_target_lane_stop()) {
      mutable_target_lane_stop()->::apollo::planning::MainStop::MergeFrom(from.target_lane_stop());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainChangeLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainChangeLane::CopyFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainChangeLane::IsInitialized() const {

  return true;
}

void MainChangeLane::Swap(MainChangeLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainChangeLane::InternalSwap(MainChangeLane* other) {
  std::swap(type_, other->type_);
  default_lane_.UnsafeArenaSwap(&other->default_lane_);
  std::swap(default_lane_stop_, other->default_lane_stop_);
  std::swap(target_lane_stop_, other->target_lane_stop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainChangeLane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainChangeLane_descriptor_;
  metadata.reflection = MainChangeLane_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainChangeLane

// optional .apollo.planning.MainChangeLane.Type type = 1;
bool MainChangeLane::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainChangeLane::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MainChangeLane::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainChangeLane::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::apollo::planning::MainChangeLane_Type MainChangeLane::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.type)
  return static_cast< ::apollo::planning::MainChangeLane_Type >(type_);
}
 void MainChangeLane::set_type(::apollo::planning::MainChangeLane_Type value) {
  assert(::apollo::planning::MainChangeLane_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainChangeLane.type)
}

// repeated .apollo.planning.TargetLane default_lane = 2;
int MainChangeLane::default_lane_size() const {
  return default_lane_.size();
}
void MainChangeLane::clear_default_lane() {
  default_lane_.Clear();
}
const ::apollo::planning::TargetLane& MainChangeLane::default_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.default_lane)
  return default_lane_.Get(index);
}
::apollo::planning::TargetLane* MainChangeLane::mutable_default_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.default_lane)
  return default_lane_.Mutable(index);
}
::apollo::planning::TargetLane* MainChangeLane::add_default_lane() {
  // @@protoc_insertion_point(field_add:apollo.planning.MainChangeLane.default_lane)
  return default_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >*
MainChangeLane::mutable_default_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MainChangeLane.default_lane)
  return &default_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >&
MainChangeLane::default_lane() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MainChangeLane.default_lane)
  return default_lane_;
}

// optional .apollo.planning.MainStop default_lane_stop = 3;
bool MainChangeLane::has_default_lane_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MainChangeLane::set_has_default_lane_stop() {
  _has_bits_[0] |= 0x00000004u;
}
void MainChangeLane::clear_has_default_lane_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
void MainChangeLane::clear_default_lane_stop() {
  if (default_lane_stop_ != NULL) default_lane_stop_->::apollo::planning::MainStop::Clear();
  clear_has_default_lane_stop();
}
const ::apollo::planning::MainStop& MainChangeLane::default_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.default_lane_stop)
  return default_lane_stop_ != NULL ? *default_lane_stop_ : *default_instance_->default_lane_stop_;
}
::apollo::planning::MainStop* MainChangeLane::mutable_default_lane_stop() {
  set_has_default_lane_stop();
  if (default_lane_stop_ == NULL) {
    default_lane_stop_ = new ::apollo::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.default_lane_stop)
  return default_lane_stop_;
}
::apollo::planning::MainStop* MainChangeLane::release_default_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainChangeLane.default_lane_stop)
  clear_has_default_lane_stop();
  ::apollo::planning::MainStop* temp = default_lane_stop_;
  default_lane_stop_ = NULL;
  return temp;
}
void MainChangeLane::set_allocated_default_lane_stop(::apollo::planning::MainStop* default_lane_stop) {
  delete default_lane_stop_;
  default_lane_stop_ = default_lane_stop;
  if (default_lane_stop) {
    set_has_default_lane_stop();
  } else {
    clear_has_default_lane_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainChangeLane.default_lane_stop)
}

// optional .apollo.planning.MainStop target_lane_stop = 4;
bool MainChangeLane::has_target_lane_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MainChangeLane::set_has_target_lane_stop() {
  _has_bits_[0] |= 0x00000008u;
}
void MainChangeLane::clear_has_target_lane_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
void MainChangeLane::clear_target_lane_stop() {
  if (target_lane_stop_ != NULL) target_lane_stop_->::apollo::planning::MainStop::Clear();
  clear_has_target_lane_stop();
}
const ::apollo::planning::MainStop& MainChangeLane::target_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.target_lane_stop)
  return target_lane_stop_ != NULL ? *target_lane_stop_ : *default_instance_->target_lane_stop_;
}
::apollo::planning::MainStop* MainChangeLane::mutable_target_lane_stop() {
  set_has_target_lane_stop();
  if (target_lane_stop_ == NULL) {
    target_lane_stop_ = new ::apollo::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.target_lane_stop)
  return target_lane_stop_;
}
::apollo::planning::MainStop* MainChangeLane::release_target_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainChangeLane.target_lane_stop)
  clear_has_target_lane_stop();
  ::apollo::planning::MainStop* temp = target_lane_stop_;
  target_lane_stop_ = NULL;
  return temp;
}
void MainChangeLane::set_allocated_target_lane_stop(::apollo::planning::MainStop* target_lane_stop) {
  delete target_lane_stop_;
  target_lane_stop_ = target_lane_stop;
  if (target_lane_stop) {
    set_has_target_lane_stop();
  } else {
    clear_has_target_lane_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainChangeLane.target_lane_stop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainMissionComplete::kStopPointFieldNumber;
const int MainMissionComplete::kStopHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainMissionComplete::MainMissionComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainMissionComplete)
}

void MainMissionComplete::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

MainMissionComplete::MainMissionComplete(const MainMissionComplete& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainMissionComplete)
}

void MainMissionComplete::SharedCtor() {
  _cached_size_ = 0;
  stop_point_ = NULL;
  stop_heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainMissionComplete::~MainMissionComplete() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainMissionComplete)
  SharedDtor();
}

void MainMissionComplete::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
  }
}

void MainMissionComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMissionComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMissionComplete_descriptor_;
}

const MainMissionComplete& MainMissionComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainMissionComplete* MainMissionComplete::default_instance_ = NULL;

MainMissionComplete* MainMissionComplete::New(::google::protobuf::Arena* arena) const {
  MainMissionComplete* n = new MainMissionComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainMissionComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainMissionComplete)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
    }
    stop_heading_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainMissionComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainMissionComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PointENU stop_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_stop_heading;
        break;
      }

      // optional double stop_heading = 2;
      case 2: {
        if (tag == 17) {
         parse_stop_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
          set_has_stop_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainMissionComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainMissionComplete)
  return false;
#undef DO_
}

void MainMissionComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainMissionComplete)
  // optional .apollo.common.PointENU stop_point = 1;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // optional double stop_heading = 2;
  if (has_stop_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainMissionComplete)
}

::google::protobuf::uint8* MainMissionComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainMissionComplete)
  // optional .apollo.common.PointENU stop_point = 1;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_point_, false, target);
  }

  // optional double stop_heading = 2;
  if (has_stop_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainMissionComplete)
  return target;
}

int MainMissionComplete::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainMissionComplete)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.PointENU stop_point = 1;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double stop_heading = 2;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMissionComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainMissionComplete)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainMissionComplete* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainMissionComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainMissionComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainMissionComplete)
    MergeFrom(*source);
  }
}

void MainMissionComplete::MergeFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainMissionComplete)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_point()) {
      mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from.stop_point());
    }
    if (from.has_stop_heading()) {
      set_stop_heading(from.stop_heading());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainMissionComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMissionComplete::CopyFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMissionComplete::IsInitialized() const {

  return true;
}

void MainMissionComplete::Swap(MainMissionComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainMissionComplete::InternalSwap(MainMissionComplete* other) {
  std::swap(stop_point_, other->stop_point_);
  std::swap(stop_heading_, other->stop_heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainMissionComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainMissionComplete_descriptor_;
  metadata.reflection = MainMissionComplete_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainMissionComplete

// optional .apollo.common.PointENU stop_point = 1;
bool MainMissionComplete::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainMissionComplete::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void MainMissionComplete::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainMissionComplete::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::apollo::common::PointENU::Clear();
  clear_has_stop_point();
}
const ::apollo::common::PointENU& MainMissionComplete::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainMissionComplete.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::apollo::common::PointENU* MainMissionComplete::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainMissionComplete.stop_point)
  return stop_point_;
}
::apollo::common::PointENU* MainMissionComplete::release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainMissionComplete.stop_point)
  clear_has_stop_point();
  ::apollo::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void MainMissionComplete::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainMissionComplete.stop_point)
}

// optional double stop_heading = 2;
bool MainMissionComplete::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainMissionComplete::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void MainMissionComplete::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainMissionComplete::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
 double MainMissionComplete::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainMissionComplete.stop_heading)
  return stop_heading_;
}
 void MainMissionComplete::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.MainMissionComplete.stop_heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainNotReady::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainNotReady::MainNotReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainNotReady)
}

void MainNotReady::InitAsDefaultInstance() {
}

MainNotReady::MainNotReady(const MainNotReady& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainNotReady)
}

void MainNotReady::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainNotReady::~MainNotReady() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainNotReady)
  SharedDtor();
}

void MainNotReady::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MainNotReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainNotReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainNotReady_descriptor_;
}

const MainNotReady& MainNotReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainNotReady* MainNotReady::default_instance_ = NULL;

MainNotReady* MainNotReady::New(::google::protobuf::Arena* arena) const {
  MainNotReady* n = new MainNotReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainNotReady::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainNotReady)
  if (has_reason()) {
    reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainNotReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainNotReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.MainNotReady.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainNotReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainNotReady)
  return false;
#undef DO_
}

void MainNotReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainNotReady)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainNotReady.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainNotReady)
}

::google::protobuf::uint8* MainNotReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainNotReady)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainNotReady.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainNotReady)
  return target;
}

int MainNotReady::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainNotReady)
  int total_size = 0;

  // optional string reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainNotReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainNotReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainNotReady* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainNotReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainNotReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainNotReady)
    MergeFrom(*source);
  }
}

void MainNotReady::MergeFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainNotReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainNotReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainNotReady::CopyFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainNotReady::IsInitialized() const {

  return true;
}

void MainNotReady::Swap(MainNotReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainNotReady::InternalSwap(MainNotReady* other) {
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainNotReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainNotReady_descriptor_;
  metadata.reflection = MainNotReady_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainNotReady

// optional string reason = 1;
bool MainNotReady::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainNotReady::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void MainNotReady::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainNotReady::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& MainNotReady::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainNotReady.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainNotReady::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainNotReady.reason)
}
 void MainNotReady::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.MainNotReady.reason)
}
 void MainNotReady::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.MainNotReady.reason)
}
 ::std::string* MainNotReady::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainNotReady.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MainNotReady::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainNotReady.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MainNotReady::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainNotReady.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainParking::MainParking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainParking)
}

void MainParking::InitAsDefaultInstance() {
}

MainParking::MainParking(const MainParking& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainParking)
}

void MainParking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainParking::~MainParking() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainParking)
  SharedDtor();
}

void MainParking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainParking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainParking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainParking_descriptor_;
}

const MainParking& MainParking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainParking* MainParking::default_instance_ = NULL;

MainParking* MainParking::New(::google::protobuf::Arena* arena) const {
  MainParking* n = new MainParking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainParking::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainParking)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainParking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainParking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainParking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainParking)
  return false;
#undef DO_
}

void MainParking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainParking)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainParking)
}

::google::protobuf::uint8* MainParking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainParking)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainParking)
  return target;
}

int MainParking::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainParking)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainParking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainParking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainParking* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainParking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainParking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainParking)
    MergeFrom(*source);
  }
}

void MainParking::MergeFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainParking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainParking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainParking::CopyFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainParking::IsInitialized() const {

  return true;
}

void MainParking::Swap(MainParking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainParking::InternalSwap(MainParking* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainParking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainParking_descriptor_;
  metadata.reflection = MainParking_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainParking

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainDecision::kCruiseFieldNumber;
const int MainDecision::kStopFieldNumber;
const int MainDecision::kEstopFieldNumber;
const int MainDecision::kChangeLaneFieldNumber;
const int MainDecision::kMissionCompleteFieldNumber;
const int MainDecision::kNotReadyFieldNumber;
const int MainDecision::kParkingFieldNumber;
const int MainDecision::kTargetLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainDecision::MainDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainDecision)
}

void MainDecision::InitAsDefaultInstance() {
  MainDecision_default_oneof_instance_->cruise_ = const_cast< ::apollo::planning::MainCruise*>(&::apollo::planning::MainCruise::default_instance());
  MainDecision_default_oneof_instance_->stop_ = const_cast< ::apollo::planning::MainStop*>(&::apollo::planning::MainStop::default_instance());
  MainDecision_default_oneof_instance_->estop_ = const_cast< ::apollo::planning::MainEmergencyStop*>(&::apollo::planning::MainEmergencyStop::default_instance());
  MainDecision_default_oneof_instance_->change_lane_ = const_cast< ::apollo::planning::MainChangeLane*>(&::apollo::planning::MainChangeLane::default_instance());
  MainDecision_default_oneof_instance_->mission_complete_ = const_cast< ::apollo::planning::MainMissionComplete*>(&::apollo::planning::MainMissionComplete::default_instance());
  MainDecision_default_oneof_instance_->not_ready_ = const_cast< ::apollo::planning::MainNotReady*>(&::apollo::planning::MainNotReady::default_instance());
  MainDecision_default_oneof_instance_->parking_ = const_cast< ::apollo::planning::MainParking*>(&::apollo::planning::MainParking::default_instance());
}

MainDecision::MainDecision(const MainDecision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainDecision)
}

void MainDecision::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_task();
}

MainDecision::~MainDecision() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainDecision)
  SharedDtor();
}

void MainDecision::SharedDtor() {
  if (has_task()) {
    clear_task();
  }
  if (this != default_instance_) {
  }
}

void MainDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainDecision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainDecision_descriptor_;
}

const MainDecision& MainDecision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

MainDecision* MainDecision::default_instance_ = NULL;

MainDecision* MainDecision::New(::google::protobuf::Arena* arena) const {
  MainDecision* n = new MainDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainDecision::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.MainDecision)
  switch(task_case()) {
    case kCruise: {
      delete task_.cruise_;
      break;
    }
    case kStop: {
      delete task_.stop_;
      break;
    }
    case kEstop: {
      delete task_.estop_;
      break;
    }
    case kChangeLane: {
      delete task_.change_lane_;
      break;
    }
    case kMissionComplete: {
      delete task_.mission_complete_;
      break;
    }
    case kNotReady: {
      delete task_.not_ready_;
      break;
    }
    case kParking: {
      delete task_.parking_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainDecision)
  target_lane_.Clear();
  clear_task();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MainDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.MainCruise cruise = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cruise()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop;
        break;
      }

      // optional .apollo.planning.MainStop stop = 2;
      case 2: {
        if (tag == 18) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_estop;
        break;
      }

      // optional .apollo.planning.MainEmergencyStop estop = 3;
      case 3: {
        if (tag == 26) {
         parse_estop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_change_lane;
        break;
      }

      // optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
      case 4: {
        if (tag == 34) {
         parse_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_target_lane;
        break;
      }

      // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
      case 5: {
        if (tag == 42) {
         parse_target_lane:
          DO_(input->IncrementRecursionDepth());
         parse_loop_target_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_target_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_target_lane;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_mission_complete;
        break;
      }

      // optional .apollo.planning.MainMissionComplete mission_complete = 6;
      case 6: {
        if (tag == 50) {
         parse_mission_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_complete()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_not_ready;
        break;
      }

      // optional .apollo.planning.MainNotReady not_ready = 7;
      case 7: {
        if (tag == 58) {
         parse_not_ready:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_ready()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_parking;
        break;
      }

      // optional .apollo.planning.MainParking parking = 8;
      case 8: {
        if (tag == 66) {
         parse_parking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MainDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MainDecision)
  return false;
#undef DO_
}

void MainDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MainDecision)
  // optional .apollo.planning.MainCruise cruise = 1;
  if (has_cruise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *task_.cruise_, output);
  }

  // optional .apollo.planning.MainStop stop = 2;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *task_.stop_, output);
  }

  // optional .apollo.planning.MainEmergencyStop estop = 3;
  if (has_estop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *task_.estop_, output);
  }

  // optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
  if (has_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *task_.change_lane_, output);
  }

  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned int i = 0, n = this->target_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_lane(i), output);
  }

  // optional .apollo.planning.MainMissionComplete mission_complete = 6;
  if (has_mission_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *task_.mission_complete_, output);
  }

  // optional .apollo.planning.MainNotReady not_ready = 7;
  if (has_not_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *task_.not_ready_, output);
  }

  // optional .apollo.planning.MainParking parking = 8;
  if (has_parking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *task_.parking_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MainDecision)
}

::google::protobuf::uint8* MainDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainDecision)
  // optional .apollo.planning.MainCruise cruise = 1;
  if (has_cruise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *task_.cruise_, false, target);
  }

  // optional .apollo.planning.MainStop stop = 2;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *task_.stop_, false, target);
  }

  // optional .apollo.planning.MainEmergencyStop estop = 3;
  if (has_estop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *task_.estop_, false, target);
  }

  // optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
  if (has_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *task_.change_lane_, false, target);
  }

  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned int i = 0, n = this->target_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->target_lane(i), false, target);
  }

  // optional .apollo.planning.MainMissionComplete mission_complete = 6;
  if (has_mission_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *task_.mission_complete_, false, target);
  }

  // optional .apollo.planning.MainNotReady not_ready = 7;
  if (has_not_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *task_.not_ready_, false, target);
  }

  // optional .apollo.planning.MainParking parking = 8;
  if (has_parking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *task_.parking_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainDecision)
  return target;
}

int MainDecision::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainDecision)
  int total_size = 0;

  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  total_size += 1 * this->target_lane_size();
  for (int i = 0; i < this->target_lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_lane(i));
  }

  switch (task_case()) {
    // optional .apollo.planning.MainCruise cruise = 1;
    case kCruise: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.cruise_);
      break;
    }
    // optional .apollo.planning.MainStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.stop_);
      break;
    }
    // optional .apollo.planning.MainEmergencyStop estop = 3;
    case kEstop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.estop_);
      break;
    }
    // optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
    case kChangeLane: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.change_lane_);
      break;
    }
    // optional .apollo.planning.MainMissionComplete mission_complete = 6;
    case kMissionComplete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.mission_complete_);
      break;
    }
    // optional .apollo.planning.MainNotReady not_ready = 7;
    case kNotReady: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.not_ready_);
      break;
    }
    // optional .apollo.planning.MainParking parking = 8;
    case kParking: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.parking_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainDecision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainDecision)
    MergeFrom(*source);
  }
}

void MainDecision::MergeFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainDecision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  target_lane_.MergeFrom(from.target_lane_);
  switch (from.task_case()) {
    case kCruise: {
      mutable_cruise()->::apollo::planning::MainCruise::MergeFrom(from.cruise());
      break;
    }
    case kStop: {
      mutable_stop()->::apollo::planning::MainStop::MergeFrom(from.stop());
      break;
    }
    case kEstop: {
      mutable_estop()->::apollo::planning::MainEmergencyStop::MergeFrom(from.estop());
      break;
    }
    case kChangeLane: {
      mutable_change_lane()->::apollo::planning::MainChangeLane::MergeFrom(from.change_lane());
      break;
    }
    case kMissionComplete: {
      mutable_mission_complete()->::apollo::planning::MainMissionComplete::MergeFrom(from.mission_complete());
      break;
    }
    case kNotReady: {
      mutable_not_ready()->::apollo::planning::MainNotReady::MergeFrom(from.not_ready());
      break;
    }
    case kParking: {
      mutable_parking()->::apollo::planning::MainParking::MergeFrom(from.parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MainDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainDecision::CopyFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainDecision::IsInitialized() const {

  return true;
}

void MainDecision::Swap(MainDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainDecision::InternalSwap(MainDecision* other) {
  target_lane_.UnsafeArenaSwap(&other->target_lane_);
  std::swap(task_, other->task_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainDecision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainDecision_descriptor_;
  metadata.reflection = MainDecision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainDecision

// optional .apollo.planning.MainCruise cruise = 1;
bool MainDecision::has_cruise() const {
  return task_case() == kCruise;
}
void MainDecision::set_has_cruise() {
  _oneof_case_[0] = kCruise;
}
void MainDecision::clear_cruise() {
  if (has_cruise()) {
    delete task_.cruise_;
    clear_has_task();
  }
}
 const ::apollo::planning::MainCruise& MainDecision::cruise() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.cruise)
  return has_cruise()
      ? *task_.cruise_
      : ::apollo::planning::MainCruise::default_instance();
}
::apollo::planning::MainCruise* MainDecision::mutable_cruise() {
  if (!has_cruise()) {
    clear_task();
    set_has_cruise();
    task_.cruise_ = new ::apollo::planning::MainCruise;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.cruise)
  return task_.cruise_;
}
::apollo::planning::MainCruise* MainDecision::release_cruise() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.cruise)
  if (has_cruise()) {
    clear_has_task();
    ::apollo::planning::MainCruise* temp = task_.cruise_;
    task_.cruise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_cruise(::apollo::planning::MainCruise* cruise) {
  clear_task();
  if (cruise) {
    set_has_cruise();
    task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.cruise)
}

// optional .apollo.planning.MainStop stop = 2;
bool MainDecision::has_stop() const {
  return task_case() == kStop;
}
void MainDecision::set_has_stop() {
  _oneof_case_[0] = kStop;
}
void MainDecision::clear_stop() {
  if (has_stop()) {
    delete task_.stop_;
    clear_has_task();
  }
}
 const ::apollo::planning::MainStop& MainDecision::stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.stop)
  return has_stop()
      ? *task_.stop_
      : ::apollo::planning::MainStop::default_instance();
}
::apollo::planning::MainStop* MainDecision::mutable_stop() {
  if (!has_stop()) {
    clear_task();
    set_has_stop();
    task_.stop_ = new ::apollo::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.stop)
  return task_.stop_;
}
::apollo::planning::MainStop* MainDecision::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.stop)
  if (has_stop()) {
    clear_has_task();
    ::apollo::planning::MainStop* temp = task_.stop_;
    task_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_stop(::apollo::planning::MainStop* stop) {
  clear_task();
  if (stop) {
    set_has_stop();
    task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.stop)
}

// optional .apollo.planning.MainEmergencyStop estop = 3;
bool MainDecision::has_estop() const {
  return task_case() == kEstop;
}
void MainDecision::set_has_estop() {
  _oneof_case_[0] = kEstop;
}
void MainDecision::clear_estop() {
  if (has_estop()) {
    delete task_.estop_;
    clear_has_task();
  }
}
 const ::apollo::planning::MainEmergencyStop& MainDecision::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.estop)
  return has_estop()
      ? *task_.estop_
      : ::apollo::planning::MainEmergencyStop::default_instance();
}
::apollo::planning::MainEmergencyStop* MainDecision::mutable_estop() {
  if (!has_estop()) {
    clear_task();
    set_has_estop();
    task_.estop_ = new ::apollo::planning::MainEmergencyStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.estop)
  return task_.estop_;
}
::apollo::planning::MainEmergencyStop* MainDecision::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.estop)
  if (has_estop()) {
    clear_has_task();
    ::apollo::planning::MainEmergencyStop* temp = task_.estop_;
    task_.estop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_estop(::apollo::planning::MainEmergencyStop* estop) {
  clear_task();
  if (estop) {
    set_has_estop();
    task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.estop)
}

// optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
bool MainDecision::has_change_lane() const {
  return task_case() == kChangeLane;
}
void MainDecision::set_has_change_lane() {
  _oneof_case_[0] = kChangeLane;
}
void MainDecision::clear_change_lane() {
  if (has_change_lane()) {
    delete task_.change_lane_;
    clear_has_task();
  }
}
 const ::apollo::planning::MainChangeLane& MainDecision::change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.change_lane)
  return has_change_lane()
      ? *task_.change_lane_
      : ::apollo::planning::MainChangeLane::default_instance();
}
::apollo::planning::MainChangeLane* MainDecision::mutable_change_lane() {
  if (!has_change_lane()) {
    clear_task();
    set_has_change_lane();
    task_.change_lane_ = new ::apollo::planning::MainChangeLane;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.change_lane)
  return task_.change_lane_;
}
::apollo::planning::MainChangeLane* MainDecision::release_change_lane() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.change_lane)
  if (has_change_lane()) {
    clear_has_task();
    ::apollo::planning::MainChangeLane* temp = task_.change_lane_;
    task_.change_lane_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_change_lane(::apollo::planning::MainChangeLane* change_lane) {
  clear_task();
  if (change_lane) {
    set_has_change_lane();
    task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.change_lane)
}

// optional .apollo.planning.MainMissionComplete mission_complete = 6;
bool MainDecision::has_mission_complete() const {
  return task_case() == kMissionComplete;
}
void MainDecision::set_has_mission_complete() {
  _oneof_case_[0] = kMissionComplete;
}
void MainDecision::clear_mission_complete() {
  if (has_mission_complete()) {
    delete task_.mission_complete_;
    clear_has_task();
  }
}
 const ::apollo::planning::MainMissionComplete& MainDecision::mission_complete() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.mission_complete)
  return has_mission_complete()
      ? *task_.mission_complete_
      : ::apollo::planning::MainMissionComplete::default_instance();
}
::apollo::planning::MainMissionComplete* MainDecision::mutable_mission_complete() {
  if (!has_mission_complete()) {
    clear_task();
    set_has_mission_complete();
    task_.mission_complete_ = new ::apollo::planning::MainMissionComplete;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.mission_complete)
  return task_.mission_complete_;
}
::apollo::planning::MainMissionComplete* MainDecision::release_mission_complete() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.mission_complete)
  if (has_mission_complete()) {
    clear_has_task();
    ::apollo::planning::MainMissionComplete* temp = task_.mission_complete_;
    task_.mission_complete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_mission_complete(::apollo::planning::MainMissionComplete* mission_complete) {
  clear_task();
  if (mission_complete) {
    set_has_mission_complete();
    task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.mission_complete)
}

// optional .apollo.planning.MainNotReady not_ready = 7;
bool MainDecision::has_not_ready() const {
  return task_case() == kNotReady;
}
void MainDecision::set_has_not_ready() {
  _oneof_case_[0] = kNotReady;
}
void MainDecision::clear_not_ready() {
  if (has_not_ready()) {
    delete task_.not_ready_;
    clear_has_task();
  }
}
 const ::apollo::planning::MainNotReady& MainDecision::not_ready() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.not_ready)
  return has_not_ready()
      ? *task_.not_ready_
      : ::apollo::planning::MainNotReady::default_instance();
}
::apollo::planning::MainNotReady* MainDecision::mutable_not_ready() {
  if (!has_not_ready()) {
    clear_task();
    set_has_not_ready();
    task_.not_ready_ = new ::apollo::planning::MainNotReady;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.not_ready)
  return task_.not_ready_;
}
::apollo::planning::MainNotReady* MainDecision::release_not_ready() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.not_ready)
  if (has_not_ready()) {
    clear_has_task();
    ::apollo::planning::MainNotReady* temp = task_.not_ready_;
    task_.not_ready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_not_ready(::apollo::planning::MainNotReady* not_ready) {
  clear_task();
  if (not_ready) {
    set_has_not_ready();
    task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.not_ready)
}

// optional .apollo.planning.MainParking parking = 8;
bool MainDecision::has_parking() const {
  return task_case() == kParking;
}
void MainDecision::set_has_parking() {
  _oneof_case_[0] = kParking;
}
void MainDecision::clear_parking() {
  if (has_parking()) {
    delete task_.parking_;
    clear_has_task();
  }
}
 const ::apollo::planning::MainParking& MainDecision::parking() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.parking)
  return has_parking()
      ? *task_.parking_
      : ::apollo::planning::MainParking::default_instance();
}
::apollo::planning::MainParking* MainDecision::mutable_parking() {
  if (!has_parking()) {
    clear_task();
    set_has_parking();
    task_.parking_ = new ::apollo::planning::MainParking;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.parking)
  return task_.parking_;
}
::apollo::planning::MainParking* MainDecision::release_parking() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.parking)
  if (has_parking()) {
    clear_has_task();
    ::apollo::planning::MainParking* temp = task_.parking_;
    task_.parking_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_parking(::apollo::planning::MainParking* parking) {
  clear_task();
  if (parking) {
    set_has_parking();
    task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.parking)
}

// repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
int MainDecision::target_lane_size() const {
  return target_lane_.size();
}
void MainDecision::clear_target_lane() {
  target_lane_.Clear();
}
const ::apollo::planning::TargetLane& MainDecision::target_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.target_lane)
  return target_lane_.Get(index);
}
::apollo::planning::TargetLane* MainDecision::mutable_target_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.target_lane)
  return target_lane_.Mutable(index);
}
::apollo::planning::TargetLane* MainDecision::add_target_lane() {
  // @@protoc_insertion_point(field_add:apollo.planning.MainDecision.target_lane)
  return target_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >*
MainDecision::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MainDecision.target_lane)
  return &target_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TargetLane >&
MainDecision::target_lane() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MainDecision.target_lane)
  return target_lane_;
}

bool MainDecision::has_task() const {
  return task_case() != TASK_NOT_SET;
}
void MainDecision::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
MainDecision::TaskCase MainDecision::task_case() const {
  return MainDecision::TaskCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionResult::kMainDecisionFieldNumber;
const int DecisionResult::kObjectDecisionFieldNumber;
const int DecisionResult::kVehicleSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionResult::DecisionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DecisionResult)
}

void DecisionResult::InitAsDefaultInstance() {
  main_decision_ = const_cast< ::apollo::planning::MainDecision*>(&::apollo::planning::MainDecision::default_instance());
  object_decision_ = const_cast< ::apollo::planning::ObjectDecisions*>(&::apollo::planning::ObjectDecisions::default_instance());
  vehicle_signal_ = const_cast< ::apollo::common::VehicleSignal*>(&::apollo::common::VehicleSignal::default_instance());
}

DecisionResult::DecisionResult(const DecisionResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DecisionResult)
}

void DecisionResult::SharedCtor() {
  _cached_size_ = 0;
  main_decision_ = NULL;
  object_decision_ = NULL;
  vehicle_signal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecisionResult::~DecisionResult() {
  // @@protoc_insertion_point(destructor:apollo.planning.DecisionResult)
  SharedDtor();
}

void DecisionResult::SharedDtor() {
  if (this != default_instance_) {
    delete main_decision_;
    delete object_decision_;
    delete vehicle_signal_;
  }
}

void DecisionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionResult_descriptor_;
}

const DecisionResult& DecisionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fdecision_2eproto();
  return *default_instance_;
}

DecisionResult* DecisionResult::default_instance_ = NULL;

DecisionResult* DecisionResult::New(::google::protobuf::Arena* arena) const {
  DecisionResult* n = new DecisionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DecisionResult)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_main_decision()) {
      if (main_decision_ != NULL) main_decision_->::apollo::planning::MainDecision::Clear();
    }
    if (has_object_decision()) {
      if (object_decision_ != NULL) object_decision_->::apollo::planning::ObjectDecisions::Clear();
    }
    if (has_vehicle_signal()) {
      if (vehicle_signal_ != NULL) vehicle_signal_->::apollo::common::VehicleSignal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DecisionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DecisionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.MainDecision main_decision = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object_decision;
        break;
      }

      // optional .apollo.planning.ObjectDecisions object_decision = 2;
      case 2: {
        if (tag == 18) {
         parse_object_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vehicle_signal;
        break;
      }

      // optional .apollo.common.VehicleSignal vehicle_signal = 3;
      case 3: {
        if (tag == 26) {
         parse_vehicle_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DecisionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DecisionResult)
  return false;
#undef DO_
}

void DecisionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DecisionResult)
  // optional .apollo.planning.MainDecision main_decision = 1;
  if (has_main_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->main_decision_, output);
  }

  // optional .apollo.planning.ObjectDecisions object_decision = 2;
  if (has_object_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_decision_, output);
  }

  // optional .apollo.common.VehicleSignal vehicle_signal = 3;
  if (has_vehicle_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vehicle_signal_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DecisionResult)
}

::google::protobuf::uint8* DecisionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DecisionResult)
  // optional .apollo.planning.MainDecision main_decision = 1;
  if (has_main_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->main_decision_, false, target);
  }

  // optional .apollo.planning.ObjectDecisions object_decision = 2;
  if (has_object_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->object_decision_, false, target);
  }

  // optional .apollo.common.VehicleSignal vehicle_signal = 3;
  if (has_vehicle_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vehicle_signal_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DecisionResult)
  return target;
}

int DecisionResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DecisionResult)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.planning.MainDecision main_decision = 1;
    if (has_main_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->main_decision_);
    }

    // optional .apollo.planning.ObjectDecisions object_decision = 2;
    if (has_object_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->object_decision_);
    }

    // optional .apollo.common.VehicleSignal vehicle_signal = 3;
    if (has_vehicle_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_signal_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DecisionResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DecisionResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DecisionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DecisionResult)
    MergeFrom(*source);
  }
}

void DecisionResult::MergeFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DecisionResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_decision()) {
      mutable_main_decision()->::apollo::planning::MainDecision::MergeFrom(from.main_decision());
    }
    if (from.has_object_decision()) {
      mutable_object_decision()->::apollo::planning::ObjectDecisions::MergeFrom(from.object_decision());
    }
    if (from.has_vehicle_signal()) {
      mutable_vehicle_signal()->::apollo::common::VehicleSignal::MergeFrom(from.vehicle_signal());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DecisionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionResult::CopyFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionResult::IsInitialized() const {

  return true;
}

void DecisionResult::Swap(DecisionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionResult::InternalSwap(DecisionResult* other) {
  std::swap(main_decision_, other->main_decision_);
  std::swap(object_decision_, other->object_decision_);
  std::swap(vehicle_signal_, other->vehicle_signal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionResult_descriptor_;
  metadata.reflection = DecisionResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionResult

// optional .apollo.planning.MainDecision main_decision = 1;
bool DecisionResult::has_main_decision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DecisionResult::set_has_main_decision() {
  _has_bits_[0] |= 0x00000001u;
}
void DecisionResult::clear_has_main_decision() {
  _has_bits_[0] &= ~0x00000001u;
}
void DecisionResult::clear_main_decision() {
  if (main_decision_ != NULL) main_decision_->::apollo::planning::MainDecision::Clear();
  clear_has_main_decision();
}
const ::apollo::planning::MainDecision& DecisionResult::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.main_decision)
  return main_decision_ != NULL ? *main_decision_ : *default_instance_->main_decision_;
}
::apollo::planning::MainDecision* DecisionResult::mutable_main_decision() {
  set_has_main_decision();
  if (main_decision_ == NULL) {
    main_decision_ = new ::apollo::planning::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.main_decision)
  return main_decision_;
}
::apollo::planning::MainDecision* DecisionResult::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.main_decision)
  clear_has_main_decision();
  ::apollo::planning::MainDecision* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_main_decision(::apollo::planning::MainDecision* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    set_has_main_decision();
  } else {
    clear_has_main_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.main_decision)
}

// optional .apollo.planning.ObjectDecisions object_decision = 2;
bool DecisionResult::has_object_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DecisionResult::set_has_object_decision() {
  _has_bits_[0] |= 0x00000002u;
}
void DecisionResult::clear_has_object_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
void DecisionResult::clear_object_decision() {
  if (object_decision_ != NULL) object_decision_->::apollo::planning::ObjectDecisions::Clear();
  clear_has_object_decision();
}
const ::apollo::planning::ObjectDecisions& DecisionResult::object_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.object_decision)
  return object_decision_ != NULL ? *object_decision_ : *default_instance_->object_decision_;
}
::apollo::planning::ObjectDecisions* DecisionResult::mutable_object_decision() {
  set_has_object_decision();
  if (object_decision_ == NULL) {
    object_decision_ = new ::apollo::planning::ObjectDecisions;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.object_decision)
  return object_decision_;
}
::apollo::planning::ObjectDecisions* DecisionResult::release_object_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.object_decision)
  clear_has_object_decision();
  ::apollo::planning::ObjectDecisions* temp = object_decision_;
  object_decision_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_object_decision(::apollo::planning::ObjectDecisions* object_decision) {
  delete object_decision_;
  object_decision_ = object_decision;
  if (object_decision) {
    set_has_object_decision();
  } else {
    clear_has_object_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.object_decision)
}

// optional .apollo.common.VehicleSignal vehicle_signal = 3;
bool DecisionResult::has_vehicle_signal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DecisionResult::set_has_vehicle_signal() {
  _has_bits_[0] |= 0x00000004u;
}
void DecisionResult::clear_has_vehicle_signal() {
  _has_bits_[0] &= ~0x00000004u;
}
void DecisionResult::clear_vehicle_signal() {
  if (vehicle_signal_ != NULL) vehicle_signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_vehicle_signal();
}
const ::apollo::common::VehicleSignal& DecisionResult::vehicle_signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.vehicle_signal)
  return vehicle_signal_ != NULL ? *vehicle_signal_ : *default_instance_->vehicle_signal_;
}
::apollo::common::VehicleSignal* DecisionResult::mutable_vehicle_signal() {
  set_has_vehicle_signal();
  if (vehicle_signal_ == NULL) {
    vehicle_signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.vehicle_signal)
  return vehicle_signal_;
}
::apollo::common::VehicleSignal* DecisionResult::release_vehicle_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.vehicle_signal)
  clear_has_vehicle_signal();
  ::apollo::common::VehicleSignal* temp = vehicle_signal_;
  vehicle_signal_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_vehicle_signal(::apollo::common::VehicleSignal* vehicle_signal) {
  delete vehicle_signal_;
  vehicle_signal_ = vehicle_signal;
  if (vehicle_signal) {
    set_has_vehicle_signal();
  } else {
    clear_has_vehicle_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.vehicle_signal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
