// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/navi_path_decider_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/navi_path_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* NaviPathDeciderConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NaviPathDeciderConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDestLaneConfigTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDestLaneConfigTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShiftConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShiftConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto() {
  protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/navi_path_decider_config.proto");
  GOOGLE_CHECK(file != NULL);
  NaviPathDeciderConfig_descriptor_ = file->message_type(0);
  static const int NaviPathDeciderConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, min_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, min_look_forward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, max_keep_lane_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, max_keep_lane_shift_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, min_keep_lane_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, keep_lane_shift_compensation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, move_dest_lane_config_talbe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, move_dest_lane_compensation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, max_kappa_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, kappa_move_dest_lane_compensation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, start_plan_point_from_),
  };
  NaviPathDeciderConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NaviPathDeciderConfig_descriptor_,
      NaviPathDeciderConfig::default_instance_,
      NaviPathDeciderConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(NaviPathDeciderConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, _internal_metadata_),
      -1);
  MoveDestLaneConfigTable_descriptor_ = file->message_type(1);
  static const int MoveDestLaneConfigTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDestLaneConfigTable, lateral_shift_),
  };
  MoveDestLaneConfigTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MoveDestLaneConfigTable_descriptor_,
      MoveDestLaneConfigTable::default_instance_,
      MoveDestLaneConfigTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDestLaneConfigTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(MoveDestLaneConfigTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDestLaneConfigTable, _internal_metadata_),
      -1);
  ShiftConfig_descriptor_ = file->message_type(2);
  static const int ShiftConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, max_move_dest_lane_shift_y_),
  };
  ShiftConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShiftConfig_descriptor_,
      ShiftConfig::default_instance_,
      ShiftConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShiftConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NaviPathDeciderConfig_descriptor_, &NaviPathDeciderConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MoveDestLaneConfigTable_descriptor_, &MoveDestLaneConfigTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShiftConfig_descriptor_, &ShiftConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto() {
  delete NaviPathDeciderConfig::default_instance_;
  delete NaviPathDeciderConfig_reflection_;
  delete MoveDestLaneConfigTable::default_instance_;
  delete MoveDestLaneConfigTable_reflection_;
  delete ShiftConfig::default_instance_;
  delete ShiftConfig_reflection_;
}

void protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'planning/navi_path_decider_config.prot"
    "o\022\017apollo.planning\"\325\003\n\025NaviPathDeciderCo"
    "nfig\022\032\n\017min_path_length\030\001 \001(\001:\0015\022 \n\025min_"
    "look_forward_time\030\002 \001(\r:\0012\022#\n\026max_keep_l"
    "ane_distance\030\003 \001(\001:\0030.8\022!\n\025max_keep_lane"
    "_shift_y\030\004 \001(\001:\00220\022 \n\024min_keep_lane_offs"
    "et\030\005 \001(\001:\00215\022*\n\034keep_lane_shift_compensa"
    "tion\030\006 \001(\001:\0040.01\022M\n\033move_dest_lane_confi"
    "g_talbe\030\007 \001(\0132(.apollo.planning.MoveDest"
    "LaneConfigTable\022)\n\033move_dest_lane_compen"
    "sation\030\010 \001(\001:\0040.35\022\036\n\023max_kappa_threshol"
    "d\030\t \001(\001:\0010\022,\n!kappa_move_dest_lane_compe"
    "nsation\030\n \001(\001:\0010\022 \n\025start_plan_point_fro"
    "m\030\013 \001(\r:\0010\"N\n\027MoveDestLaneConfigTable\0223\n"
    "\rlateral_shift\030\001 \003(\0132\034.apollo.planning.S"
    "hiftConfig\"O\n\013ShiftConfig\022\027\n\tmax_speed\030\001"
    " \001(\001:\0044.16\022\'\n\032max_move_dest_lane_shift_y"
    "\030\003 \001(\001:\0030.4", 691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/navi_path_decider_config.proto", &protobuf_RegisterTypes);
  NaviPathDeciderConfig::default_instance_ = new NaviPathDeciderConfig();
  MoveDestLaneConfigTable::default_instance_ = new MoveDestLaneConfigTable();
  ShiftConfig::default_instance_ = new ShiftConfig();
  NaviPathDeciderConfig::default_instance_->InitAsDefaultInstance();
  MoveDestLaneConfigTable::default_instance_->InitAsDefaultInstance();
  ShiftConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto {
  StaticDescriptorInitializer_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto() {
    protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto();
  }
} static_descriptor_initializer_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaviPathDeciderConfig::kMinPathLengthFieldNumber;
const int NaviPathDeciderConfig::kMinLookForwardTimeFieldNumber;
const int NaviPathDeciderConfig::kMaxKeepLaneDistanceFieldNumber;
const int NaviPathDeciderConfig::kMaxKeepLaneShiftYFieldNumber;
const int NaviPathDeciderConfig::kMinKeepLaneOffsetFieldNumber;
const int NaviPathDeciderConfig::kKeepLaneShiftCompensationFieldNumber;
const int NaviPathDeciderConfig::kMoveDestLaneConfigTalbeFieldNumber;
const int NaviPathDeciderConfig::kMoveDestLaneCompensationFieldNumber;
const int NaviPathDeciderConfig::kMaxKappaThresholdFieldNumber;
const int NaviPathDeciderConfig::kKappaMoveDestLaneCompensationFieldNumber;
const int NaviPathDeciderConfig::kStartPlanPointFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaviPathDeciderConfig::NaviPathDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NaviPathDeciderConfig)
}

void NaviPathDeciderConfig::InitAsDefaultInstance() {
  move_dest_lane_config_talbe_ = const_cast< ::apollo::planning::MoveDestLaneConfigTable*>(&::apollo::planning::MoveDestLaneConfigTable::default_instance());
}

NaviPathDeciderConfig::NaviPathDeciderConfig(const NaviPathDeciderConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviPathDeciderConfig)
}

void NaviPathDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  min_path_length_ = 5;
  min_look_forward_time_ = 2u;
  max_keep_lane_distance_ = 0.8;
  max_keep_lane_shift_y_ = 20;
  min_keep_lane_offset_ = 15;
  keep_lane_shift_compensation_ = 0.01;
  move_dest_lane_config_talbe_ = NULL;
  move_dest_lane_compensation_ = 0.35;
  max_kappa_threshold_ = 0;
  kappa_move_dest_lane_compensation_ = 0;
  start_plan_point_from_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NaviPathDeciderConfig::~NaviPathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviPathDeciderConfig)
  SharedDtor();
}

void NaviPathDeciderConfig::SharedDtor() {
  if (this != default_instance_) {
    delete move_dest_lane_config_talbe_;
  }
}

void NaviPathDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NaviPathDeciderConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NaviPathDeciderConfig_descriptor_;
}

const NaviPathDeciderConfig& NaviPathDeciderConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto();
  return *default_instance_;
}

NaviPathDeciderConfig* NaviPathDeciderConfig::default_instance_ = NULL;

NaviPathDeciderConfig* NaviPathDeciderConfig::New(::google::protobuf::Arena* arena) const {
  NaviPathDeciderConfig* n = new NaviPathDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NaviPathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviPathDeciderConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NaviPathDeciderConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NaviPathDeciderConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    min_path_length_ = 5;
    min_look_forward_time_ = 2u;
    max_keep_lane_distance_ = 0.8;
    max_keep_lane_shift_y_ = 20;
    min_keep_lane_offset_ = 15;
    keep_lane_shift_compensation_ = 0.01;
    if (has_move_dest_lane_config_talbe()) {
      if (move_dest_lane_config_talbe_ != NULL) move_dest_lane_config_talbe_->::apollo::planning::MoveDestLaneConfigTable::Clear();
    }
    move_dest_lane_compensation_ = 0.35;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(max_kappa_threshold_, kappa_move_dest_lane_compensation_);
    start_plan_point_from_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NaviPathDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.NaviPathDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_path_length = 1 [default = 5];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_path_length_)));
          set_has_min_path_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_look_forward_time;
        break;
      }

      // optional uint32 min_look_forward_time = 2 [default = 2];
      case 2: {
        if (tag == 16) {
         parse_min_look_forward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_look_forward_time_)));
          set_has_min_look_forward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_keep_lane_distance;
        break;
      }

      // optional double max_keep_lane_distance = 3 [default = 0.8];
      case 3: {
        if (tag == 25) {
         parse_max_keep_lane_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_keep_lane_distance_)));
          set_has_max_keep_lane_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_keep_lane_shift_y;
        break;
      }

      // optional double max_keep_lane_shift_y = 4 [default = 20];
      case 4: {
        if (tag == 33) {
         parse_max_keep_lane_shift_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_keep_lane_shift_y_)));
          set_has_max_keep_lane_shift_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_min_keep_lane_offset;
        break;
      }

      // optional double min_keep_lane_offset = 5 [default = 15];
      case 5: {
        if (tag == 41) {
         parse_min_keep_lane_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_keep_lane_offset_)));
          set_has_min_keep_lane_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_keep_lane_shift_compensation;
        break;
      }

      // optional double keep_lane_shift_compensation = 6 [default = 0.01];
      case 6: {
        if (tag == 49) {
         parse_keep_lane_shift_compensation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_lane_shift_compensation_)));
          set_has_keep_lane_shift_compensation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_move_dest_lane_config_talbe;
        break;
      }

      // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
      case 7: {
        if (tag == 58) {
         parse_move_dest_lane_config_talbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_dest_lane_config_talbe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_move_dest_lane_compensation;
        break;
      }

      // optional double move_dest_lane_compensation = 8 [default = 0.35];
      case 8: {
        if (tag == 65) {
         parse_move_dest_lane_compensation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &move_dest_lane_compensation_)));
          set_has_move_dest_lane_compensation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_max_kappa_threshold;
        break;
      }

      // optional double max_kappa_threshold = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_max_kappa_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_kappa_threshold_)));
          set_has_max_kappa_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_kappa_move_dest_lane_compensation;
        break;
      }

      // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_kappa_move_dest_lane_compensation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_move_dest_lane_compensation_)));
          set_has_kappa_move_dest_lane_compensation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_start_plan_point_from;
        break;
      }

      // optional uint32 start_plan_point_from = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_start_plan_point_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_plan_point_from_)));
          set_has_start_plan_point_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.NaviPathDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.NaviPathDeciderConfig)
  return false;
#undef DO_
}

void NaviPathDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.NaviPathDeciderConfig)
  // optional double min_path_length = 1 [default = 5];
  if (has_min_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_path_length(), output);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (has_min_look_forward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_look_forward_time(), output);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (has_max_keep_lane_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_keep_lane_distance(), output);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (has_max_keep_lane_shift_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_keep_lane_shift_y(), output);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (has_min_keep_lane_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_keep_lane_offset(), output);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (has_keep_lane_shift_compensation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->keep_lane_shift_compensation(), output);
  }

  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (has_move_dest_lane_config_talbe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->move_dest_lane_config_talbe_, output);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (has_move_dest_lane_compensation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->move_dest_lane_compensation(), output);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (has_max_kappa_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_kappa_threshold(), output);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (has_kappa_move_dest_lane_compensation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->kappa_move_dest_lane_compensation(), output);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (has_start_plan_point_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->start_plan_point_from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.NaviPathDeciderConfig)
}

::google::protobuf::uint8* NaviPathDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviPathDeciderConfig)
  // optional double min_path_length = 1 [default = 5];
  if (has_min_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_path_length(), target);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (has_min_look_forward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_look_forward_time(), target);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (has_max_keep_lane_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_keep_lane_distance(), target);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (has_max_keep_lane_shift_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_keep_lane_shift_y(), target);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (has_min_keep_lane_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_keep_lane_offset(), target);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (has_keep_lane_shift_compensation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->keep_lane_shift_compensation(), target);
  }

  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (has_move_dest_lane_config_talbe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->move_dest_lane_config_talbe_, false, target);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (has_move_dest_lane_compensation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->move_dest_lane_compensation(), target);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (has_max_kappa_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_kappa_threshold(), target);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (has_kappa_move_dest_lane_compensation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->kappa_move_dest_lane_compensation(), target);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (has_start_plan_point_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->start_plan_point_from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviPathDeciderConfig)
  return target;
}

int NaviPathDeciderConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviPathDeciderConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double min_path_length = 1 [default = 5];
    if (has_min_path_length()) {
      total_size += 1 + 8;
    }

    // optional uint32 min_look_forward_time = 2 [default = 2];
    if (has_min_look_forward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_look_forward_time());
    }

    // optional double max_keep_lane_distance = 3 [default = 0.8];
    if (has_max_keep_lane_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_shift_y = 4 [default = 20];
    if (has_max_keep_lane_shift_y()) {
      total_size += 1 + 8;
    }

    // optional double min_keep_lane_offset = 5 [default = 15];
    if (has_min_keep_lane_offset()) {
      total_size += 1 + 8;
    }

    // optional double keep_lane_shift_compensation = 6 [default = 0.01];
    if (has_keep_lane_shift_compensation()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
    if (has_move_dest_lane_config_talbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->move_dest_lane_config_talbe_);
    }

    // optional double move_dest_lane_compensation = 8 [default = 0.35];
    if (has_move_dest_lane_compensation()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double max_kappa_threshold = 9 [default = 0];
    if (has_max_kappa_threshold()) {
      total_size += 1 + 8;
    }

    // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
    if (has_kappa_move_dest_lane_compensation()) {
      total_size += 1 + 8;
    }

    // optional uint32 start_plan_point_from = 11 [default = 0];
    if (has_start_plan_point_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_plan_point_from());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NaviPathDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NaviPathDeciderConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NaviPathDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NaviPathDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NaviPathDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviPathDeciderConfig::MergeFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_path_length()) {
      set_min_path_length(from.min_path_length());
    }
    if (from.has_min_look_forward_time()) {
      set_min_look_forward_time(from.min_look_forward_time());
    }
    if (from.has_max_keep_lane_distance()) {
      set_max_keep_lane_distance(from.max_keep_lane_distance());
    }
    if (from.has_max_keep_lane_shift_y()) {
      set_max_keep_lane_shift_y(from.max_keep_lane_shift_y());
    }
    if (from.has_min_keep_lane_offset()) {
      set_min_keep_lane_offset(from.min_keep_lane_offset());
    }
    if (from.has_keep_lane_shift_compensation()) {
      set_keep_lane_shift_compensation(from.keep_lane_shift_compensation());
    }
    if (from.has_move_dest_lane_config_talbe()) {
      mutable_move_dest_lane_config_talbe()->::apollo::planning::MoveDestLaneConfigTable::MergeFrom(from.move_dest_lane_config_talbe());
    }
    if (from.has_move_dest_lane_compensation()) {
      set_move_dest_lane_compensation(from.move_dest_lane_compensation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_kappa_threshold()) {
      set_max_kappa_threshold(from.max_kappa_threshold());
    }
    if (from.has_kappa_move_dest_lane_compensation()) {
      set_kappa_move_dest_lane_compensation(from.kappa_move_dest_lane_compensation());
    }
    if (from.has_start_plan_point_from()) {
      set_start_plan_point_from(from.start_plan_point_from());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NaviPathDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviPathDeciderConfig::CopyFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviPathDeciderConfig::IsInitialized() const {

  return true;
}

void NaviPathDeciderConfig::Swap(NaviPathDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaviPathDeciderConfig::InternalSwap(NaviPathDeciderConfig* other) {
  std::swap(min_path_length_, other->min_path_length_);
  std::swap(min_look_forward_time_, other->min_look_forward_time_);
  std::swap(max_keep_lane_distance_, other->max_keep_lane_distance_);
  std::swap(max_keep_lane_shift_y_, other->max_keep_lane_shift_y_);
  std::swap(min_keep_lane_offset_, other->min_keep_lane_offset_);
  std::swap(keep_lane_shift_compensation_, other->keep_lane_shift_compensation_);
  std::swap(move_dest_lane_config_talbe_, other->move_dest_lane_config_talbe_);
  std::swap(move_dest_lane_compensation_, other->move_dest_lane_compensation_);
  std::swap(max_kappa_threshold_, other->max_kappa_threshold_);
  std::swap(kappa_move_dest_lane_compensation_, other->kappa_move_dest_lane_compensation_);
  std::swap(start_plan_point_from_, other->start_plan_point_from_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NaviPathDeciderConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NaviPathDeciderConfig_descriptor_;
  metadata.reflection = NaviPathDeciderConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NaviPathDeciderConfig

// optional double min_path_length = 1 [default = 5];
bool NaviPathDeciderConfig::has_min_path_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NaviPathDeciderConfig::set_has_min_path_length() {
  _has_bits_[0] |= 0x00000001u;
}
void NaviPathDeciderConfig::clear_has_min_path_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void NaviPathDeciderConfig::clear_min_path_length() {
  min_path_length_ = 5;
  clear_has_min_path_length();
}
 double NaviPathDeciderConfig::min_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_path_length)
  return min_path_length_;
}
 void NaviPathDeciderConfig::set_min_path_length(double value) {
  set_has_min_path_length();
  min_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_path_length)
}

// optional uint32 min_look_forward_time = 2 [default = 2];
bool NaviPathDeciderConfig::has_min_look_forward_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NaviPathDeciderConfig::set_has_min_look_forward_time() {
  _has_bits_[0] |= 0x00000002u;
}
void NaviPathDeciderConfig::clear_has_min_look_forward_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void NaviPathDeciderConfig::clear_min_look_forward_time() {
  min_look_forward_time_ = 2u;
  clear_has_min_look_forward_time();
}
 ::google::protobuf::uint32 NaviPathDeciderConfig::min_look_forward_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
  return min_look_forward_time_;
}
 void NaviPathDeciderConfig::set_min_look_forward_time(::google::protobuf::uint32 value) {
  set_has_min_look_forward_time();
  min_look_forward_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
}

// optional double max_keep_lane_distance = 3 [default = 0.8];
bool NaviPathDeciderConfig::has_max_keep_lane_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NaviPathDeciderConfig::set_has_max_keep_lane_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void NaviPathDeciderConfig::clear_has_max_keep_lane_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void NaviPathDeciderConfig::clear_max_keep_lane_distance() {
  max_keep_lane_distance_ = 0.8;
  clear_has_max_keep_lane_distance();
}
 double NaviPathDeciderConfig::max_keep_lane_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
  return max_keep_lane_distance_;
}
 void NaviPathDeciderConfig::set_max_keep_lane_distance(double value) {
  set_has_max_keep_lane_distance();
  max_keep_lane_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
}

// optional double max_keep_lane_shift_y = 4 [default = 20];
bool NaviPathDeciderConfig::has_max_keep_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NaviPathDeciderConfig::set_has_max_keep_lane_shift_y() {
  _has_bits_[0] |= 0x00000008u;
}
void NaviPathDeciderConfig::clear_has_max_keep_lane_shift_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void NaviPathDeciderConfig::clear_max_keep_lane_shift_y() {
  max_keep_lane_shift_y_ = 20;
  clear_has_max_keep_lane_shift_y();
}
 double NaviPathDeciderConfig::max_keep_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
  return max_keep_lane_shift_y_;
}
 void NaviPathDeciderConfig::set_max_keep_lane_shift_y(double value) {
  set_has_max_keep_lane_shift_y();
  max_keep_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
}

// optional double min_keep_lane_offset = 5 [default = 15];
bool NaviPathDeciderConfig::has_min_keep_lane_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NaviPathDeciderConfig::set_has_min_keep_lane_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void NaviPathDeciderConfig::clear_has_min_keep_lane_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void NaviPathDeciderConfig::clear_min_keep_lane_offset() {
  min_keep_lane_offset_ = 15;
  clear_has_min_keep_lane_offset();
}
 double NaviPathDeciderConfig::min_keep_lane_offset() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
  return min_keep_lane_offset_;
}
 void NaviPathDeciderConfig::set_min_keep_lane_offset(double value) {
  set_has_min_keep_lane_offset();
  min_keep_lane_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
}

// optional double keep_lane_shift_compensation = 6 [default = 0.01];
bool NaviPathDeciderConfig::has_keep_lane_shift_compensation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NaviPathDeciderConfig::set_has_keep_lane_shift_compensation() {
  _has_bits_[0] |= 0x00000020u;
}
void NaviPathDeciderConfig::clear_has_keep_lane_shift_compensation() {
  _has_bits_[0] &= ~0x00000020u;
}
void NaviPathDeciderConfig::clear_keep_lane_shift_compensation() {
  keep_lane_shift_compensation_ = 0.01;
  clear_has_keep_lane_shift_compensation();
}
 double NaviPathDeciderConfig::keep_lane_shift_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
  return keep_lane_shift_compensation_;
}
 void NaviPathDeciderConfig::set_keep_lane_shift_compensation(double value) {
  set_has_keep_lane_shift_compensation();
  keep_lane_shift_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
}

// optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
bool NaviPathDeciderConfig::has_move_dest_lane_config_talbe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NaviPathDeciderConfig::set_has_move_dest_lane_config_talbe() {
  _has_bits_[0] |= 0x00000040u;
}
void NaviPathDeciderConfig::clear_has_move_dest_lane_config_talbe() {
  _has_bits_[0] &= ~0x00000040u;
}
void NaviPathDeciderConfig::clear_move_dest_lane_config_talbe() {
  if (move_dest_lane_config_talbe_ != NULL) move_dest_lane_config_talbe_->::apollo::planning::MoveDestLaneConfigTable::Clear();
  clear_has_move_dest_lane_config_talbe();
}
const ::apollo::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::move_dest_lane_config_talbe() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return move_dest_lane_config_talbe_ != NULL ? *move_dest_lane_config_talbe_ : *default_instance_->move_dest_lane_config_talbe_;
}
::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::mutable_move_dest_lane_config_talbe() {
  set_has_move_dest_lane_config_talbe();
  if (move_dest_lane_config_talbe_ == NULL) {
    move_dest_lane_config_talbe_ = new ::apollo::planning::MoveDestLaneConfigTable;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return move_dest_lane_config_talbe_;
}
::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::release_move_dest_lane_config_talbe() {
  // @@protoc_insertion_point(field_release:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  clear_has_move_dest_lane_config_talbe();
  ::apollo::planning::MoveDestLaneConfigTable* temp = move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = NULL;
  return temp;
}
void NaviPathDeciderConfig::set_allocated_move_dest_lane_config_talbe(::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe) {
  delete move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = move_dest_lane_config_talbe;
  if (move_dest_lane_config_talbe) {
    set_has_move_dest_lane_config_talbe();
  } else {
    clear_has_move_dest_lane_config_talbe();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
}

// optional double move_dest_lane_compensation = 8 [default = 0.35];
bool NaviPathDeciderConfig::has_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NaviPathDeciderConfig::set_has_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000080u;
}
void NaviPathDeciderConfig::clear_has_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000080u;
}
void NaviPathDeciderConfig::clear_move_dest_lane_compensation() {
  move_dest_lane_compensation_ = 0.35;
  clear_has_move_dest_lane_compensation();
}
 double NaviPathDeciderConfig::move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
  return move_dest_lane_compensation_;
}
 void NaviPathDeciderConfig::set_move_dest_lane_compensation(double value) {
  set_has_move_dest_lane_compensation();
  move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
}

// optional double max_kappa_threshold = 9 [default = 0];
bool NaviPathDeciderConfig::has_max_kappa_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NaviPathDeciderConfig::set_has_max_kappa_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
void NaviPathDeciderConfig::clear_has_max_kappa_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
void NaviPathDeciderConfig::clear_max_kappa_threshold() {
  max_kappa_threshold_ = 0;
  clear_has_max_kappa_threshold();
}
 double NaviPathDeciderConfig::max_kappa_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
  return max_kappa_threshold_;
}
 void NaviPathDeciderConfig::set_max_kappa_threshold(double value) {
  set_has_max_kappa_threshold();
  max_kappa_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
}

// optional double kappa_move_dest_lane_compensation = 10 [default = 0];
bool NaviPathDeciderConfig::has_kappa_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NaviPathDeciderConfig::set_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000200u;
}
void NaviPathDeciderConfig::clear_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000200u;
}
void NaviPathDeciderConfig::clear_kappa_move_dest_lane_compensation() {
  kappa_move_dest_lane_compensation_ = 0;
  clear_has_kappa_move_dest_lane_compensation();
}
 double NaviPathDeciderConfig::kappa_move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
  return kappa_move_dest_lane_compensation_;
}
 void NaviPathDeciderConfig::set_kappa_move_dest_lane_compensation(double value) {
  set_has_kappa_move_dest_lane_compensation();
  kappa_move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
}

// optional uint32 start_plan_point_from = 11 [default = 0];
bool NaviPathDeciderConfig::has_start_plan_point_from() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NaviPathDeciderConfig::set_has_start_plan_point_from() {
  _has_bits_[0] |= 0x00000400u;
}
void NaviPathDeciderConfig::clear_has_start_plan_point_from() {
  _has_bits_[0] &= ~0x00000400u;
}
void NaviPathDeciderConfig::clear_start_plan_point_from() {
  start_plan_point_from_ = 0u;
  clear_has_start_plan_point_from();
}
 ::google::protobuf::uint32 NaviPathDeciderConfig::start_plan_point_from() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
  return start_plan_point_from_;
}
 void NaviPathDeciderConfig::set_start_plan_point_from(::google::protobuf::uint32 value) {
  set_has_start_plan_point_from();
  start_plan_point_from_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveDestLaneConfigTable::kLateralShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveDestLaneConfigTable::MoveDestLaneConfigTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MoveDestLaneConfigTable)
}

void MoveDestLaneConfigTable::InitAsDefaultInstance() {
}

MoveDestLaneConfigTable::MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MoveDestLaneConfigTable)
}

void MoveDestLaneConfigTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDestLaneConfigTable::~MoveDestLaneConfigTable() {
  // @@protoc_insertion_point(destructor:apollo.planning.MoveDestLaneConfigTable)
  SharedDtor();
}

void MoveDestLaneConfigTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveDestLaneConfigTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDestLaneConfigTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDestLaneConfigTable_descriptor_;
}

const MoveDestLaneConfigTable& MoveDestLaneConfigTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto();
  return *default_instance_;
}

MoveDestLaneConfigTable* MoveDestLaneConfigTable::default_instance_ = NULL;

MoveDestLaneConfigTable* MoveDestLaneConfigTable::New(::google::protobuf::Arena* arena) const {
  MoveDestLaneConfigTable* n = new MoveDestLaneConfigTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveDestLaneConfigTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MoveDestLaneConfigTable)
  lateral_shift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MoveDestLaneConfigTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MoveDestLaneConfigTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lateral_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lateral_shift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_lateral_shift;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MoveDestLaneConfigTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MoveDestLaneConfigTable)
  return false;
#undef DO_
}

void MoveDestLaneConfigTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MoveDestLaneConfigTable)
  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0, n = this->lateral_shift_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lateral_shift(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MoveDestLaneConfigTable)
}

::google::protobuf::uint8* MoveDestLaneConfigTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MoveDestLaneConfigTable)
  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0, n = this->lateral_shift_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lateral_shift(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MoveDestLaneConfigTable)
  return target;
}

int MoveDestLaneConfigTable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MoveDestLaneConfigTable)
  int total_size = 0;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  total_size += 1 * this->lateral_shift_size();
  for (int i = 0; i < this->lateral_shift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lateral_shift(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDestLaneConfigTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MoveDestLaneConfigTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveDestLaneConfigTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MoveDestLaneConfigTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MoveDestLaneConfigTable)
    MergeFrom(*source);
  }
}

void MoveDestLaneConfigTable::MergeFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lateral_shift_.MergeFrom(from.lateral_shift_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MoveDestLaneConfigTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDestLaneConfigTable::CopyFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDestLaneConfigTable::IsInitialized() const {

  return true;
}

void MoveDestLaneConfigTable::Swap(MoveDestLaneConfigTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveDestLaneConfigTable::InternalSwap(MoveDestLaneConfigTable* other) {
  lateral_shift_.UnsafeArenaSwap(&other->lateral_shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveDestLaneConfigTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDestLaneConfigTable_descriptor_;
  metadata.reflection = MoveDestLaneConfigTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveDestLaneConfigTable

// repeated .apollo.planning.ShiftConfig lateral_shift = 1;
int MoveDestLaneConfigTable::lateral_shift_size() const {
  return lateral_shift_.size();
}
void MoveDestLaneConfigTable::clear_lateral_shift() {
  lateral_shift_.Clear();
}
const ::apollo::planning::ShiftConfig& MoveDestLaneConfigTable::lateral_shift(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Get(index);
}
::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::mutable_lateral_shift(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Mutable(index);
}
::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::add_lateral_shift() {
  // @@protoc_insertion_point(field_add:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
MoveDestLaneConfigTable::mutable_lateral_shift() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return &lateral_shift_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
MoveDestLaneConfigTable::lateral_shift() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShiftConfig::kMaxSpeedFieldNumber;
const int ShiftConfig::kMaxMoveDestLaneShiftYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShiftConfig::ShiftConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ShiftConfig)
}

void ShiftConfig::InitAsDefaultInstance() {
}

ShiftConfig::ShiftConfig(const ShiftConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ShiftConfig)
}

void ShiftConfig::SharedCtor() {
  _cached_size_ = 0;
  max_speed_ = 4.16;
  max_move_dest_lane_shift_y_ = 0.4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShiftConfig::~ShiftConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ShiftConfig)
  SharedDtor();
}

void ShiftConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShiftConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShiftConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShiftConfig_descriptor_;
}

const ShiftConfig& ShiftConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fnavi_5fpath_5fdecider_5fconfig_2eproto();
  return *default_instance_;
}

ShiftConfig* ShiftConfig::default_instance_ = NULL;

ShiftConfig* ShiftConfig::New(::google::protobuf::Arena* arena) const {
  ShiftConfig* n = new ShiftConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ShiftConfig)
  if (_has_bits_[0 / 32] & 3u) {
    max_speed_ = 4.16;
    max_move_dest_lane_shift_y_ = 0.4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShiftConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ShiftConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_speed = 1 [default = 4.16];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_)));
          set_has_max_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_move_dest_lane_shift_y;
        break;
      }

      // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
      case 3: {
        if (tag == 25) {
         parse_max_move_dest_lane_shift_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_move_dest_lane_shift_y_)));
          set_has_max_move_dest_lane_shift_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ShiftConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ShiftConfig)
  return false;
#undef DO_
}

void ShiftConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ShiftConfig)
  // optional double max_speed = 1 [default = 4.16];
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_speed(), output);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (has_max_move_dest_lane_shift_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_move_dest_lane_shift_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ShiftConfig)
}

::google::protobuf::uint8* ShiftConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ShiftConfig)
  // optional double max_speed = 1 [default = 4.16];
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_speed(), target);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (has_max_move_dest_lane_shift_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_move_dest_lane_shift_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ShiftConfig)
  return target;
}

int ShiftConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ShiftConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double max_speed = 1 [default = 4.16];
    if (has_max_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
    if (has_max_move_dest_lane_shift_y()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShiftConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ShiftConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShiftConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShiftConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ShiftConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ShiftConfig)
    MergeFrom(*source);
  }
}

void ShiftConfig::MergeFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ShiftConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_speed()) {
      set_max_speed(from.max_speed());
    }
    if (from.has_max_move_dest_lane_shift_y()) {
      set_max_move_dest_lane_shift_y(from.max_move_dest_lane_shift_y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShiftConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftConfig::CopyFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftConfig::IsInitialized() const {

  return true;
}

void ShiftConfig::Swap(ShiftConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShiftConfig::InternalSwap(ShiftConfig* other) {
  std::swap(max_speed_, other->max_speed_);
  std::swap(max_move_dest_lane_shift_y_, other->max_move_dest_lane_shift_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShiftConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShiftConfig_descriptor_;
  metadata.reflection = ShiftConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShiftConfig

// optional double max_speed = 1 [default = 4.16];
bool ShiftConfig::has_max_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShiftConfig::set_has_max_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void ShiftConfig::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShiftConfig::clear_max_speed() {
  max_speed_ = 4.16;
  clear_has_max_speed();
}
 double ShiftConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_speed)
  return max_speed_;
}
 void ShiftConfig::set_max_speed(double value) {
  set_has_max_speed();
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_speed)
}

// optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
bool ShiftConfig::has_max_move_dest_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShiftConfig::set_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] |= 0x00000002u;
}
void ShiftConfig::clear_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShiftConfig::clear_max_move_dest_lane_shift_y() {
  max_move_dest_lane_shift_y_ = 0.4;
  clear_has_max_move_dest_lane_shift_y();
}
 double ShiftConfig::max_move_dest_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
  return max_move_dest_lane_shift_y_;
}
 void ShiftConfig::set_max_move_dest_lane_shift_y(double value) {
  set_has_max_move_dest_lane_shift_y();
  max_move_dest_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
