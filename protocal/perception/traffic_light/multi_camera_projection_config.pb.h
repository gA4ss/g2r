// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light/multi_camera_projection_config.proto

#ifndef PROTOBUF_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto__INCLUDED
#define PROTOBUF_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace traffic_light {
namespace multi_camera_projection_config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
void protobuf_AssignDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
void protobuf_ShutdownFile_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();

class CameraFocusConfig;
class ModelConfigs;
class MultiCamerasProjectionConfig;

// ===================================================================

class CameraFocusConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig) */ {
 public:
  CameraFocusConfig();
  virtual ~CameraFocusConfig();

  CameraFocusConfig(const CameraFocusConfig& from);

  inline CameraFocusConfig& operator=(const CameraFocusConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraFocusConfig& default_instance();

  void Swap(CameraFocusConfig* other);

  // implements Message ----------------------------------------------

  inline CameraFocusConfig* New() const { return New(NULL); }

  CameraFocusConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraFocusConfig& from);
  void MergeFrom(const CameraFocusConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraFocusConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string camera_extrinsic_file = 2;
  bool has_camera_extrinsic_file() const;
  void clear_camera_extrinsic_file();
  static const int kCameraExtrinsicFileFieldNumber = 2;
  const ::std::string& camera_extrinsic_file() const;
  void set_camera_extrinsic_file(const ::std::string& value);
  void set_camera_extrinsic_file(const char* value);
  void set_camera_extrinsic_file(const char* value, size_t size);
  ::std::string* mutable_camera_extrinsic_file();
  ::std::string* release_camera_extrinsic_file();
  void set_allocated_camera_extrinsic_file(::std::string* camera_extrinsic_file);

  // optional string camera_intrinsic_file = 3;
  bool has_camera_intrinsic_file() const;
  void clear_camera_intrinsic_file();
  static const int kCameraIntrinsicFileFieldNumber = 3;
  const ::std::string& camera_intrinsic_file() const;
  void set_camera_intrinsic_file(const ::std::string& value);
  void set_camera_intrinsic_file(const char* value);
  void set_camera_intrinsic_file(const char* value, size_t size);
  ::std::string* mutable_camera_intrinsic_file();
  ::std::string* release_camera_intrinsic_file();
  void set_allocated_camera_intrinsic_file(::std::string* camera_intrinsic_file);

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_camera_extrinsic_file();
  inline void clear_has_camera_extrinsic_file();
  inline void set_has_camera_intrinsic_file();
  inline void clear_has_camera_intrinsic_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr camera_extrinsic_file_;
  ::google::protobuf::internal::ArenaStringPtr camera_intrinsic_file_;
  friend void  protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static CameraFocusConfig* default_instance_;
};
// -------------------------------------------------------------------

class MultiCamerasProjectionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig) */ {
 public:
  MultiCamerasProjectionConfig();
  virtual ~MultiCamerasProjectionConfig();

  MultiCamerasProjectionConfig(const MultiCamerasProjectionConfig& from);

  inline MultiCamerasProjectionConfig& operator=(const MultiCamerasProjectionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiCamerasProjectionConfig& default_instance();

  void Swap(MultiCamerasProjectionConfig* other);

  // implements Message ----------------------------------------------

  inline MultiCamerasProjectionConfig* New() const { return New(NULL); }

  MultiCamerasProjectionConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiCamerasProjectionConfig& from);
  void MergeFrom(const MultiCamerasProjectionConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiCamerasProjectionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "MultiCamerasProjection"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2 [default = "1.0.0"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string single_projection = 3 [default = "BoundaryProjection"];
  bool has_single_projection() const;
  void clear_single_projection();
  static const int kSingleProjectionFieldNumber = 3;
  const ::std::string& single_projection() const;
  void set_single_projection(const ::std::string& value);
  void set_single_projection(const char* value);
  void set_single_projection(const char* value, size_t size);
  ::std::string* mutable_single_projection();
  ::std::string* release_single_projection();
  void set_allocated_single_projection(::std::string* single_projection);

  // repeated string camera_names = 4;
  int camera_names_size() const;
  void clear_camera_names();
  static const int kCameraNamesFieldNumber = 4;
  const ::std::string& camera_names(int index) const;
  ::std::string* mutable_camera_names(int index);
  void set_camera_names(int index, const ::std::string& value);
  void set_camera_names(int index, const char* value);
  void set_camera_names(int index, const char* value, size_t size);
  ::std::string* add_camera_names();
  void add_camera_names(const ::std::string& value);
  void add_camera_names(const char* value);
  void add_camera_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& camera_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_camera_names();

  // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  int camera_focus_config_size() const;
  void clear_camera_focus_config();
  static const int kCameraFocusConfigFieldNumber = 5;
  const ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& camera_focus_config(int index) const;
  ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* mutable_camera_focus_config(int index);
  ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* add_camera_focus_config();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >*
      mutable_camera_focus_config();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >&
      camera_focus_config() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_single_projection();
  inline void clear_has_single_projection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  static ::std::string* _default_version_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  static ::std::string* _default_single_projection_;
  ::google::protobuf::internal::ArenaStringPtr single_projection_;
  ::google::protobuf::RepeatedPtrField< ::std::string> camera_names_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig > camera_focus_config_;
  friend void  protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static MultiCamerasProjectionConfig* default_instance_;
};
// -------------------------------------------------------------------

class ModelConfigs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs) */ {
 public:
  ModelConfigs();
  virtual ~ModelConfigs();

  ModelConfigs(const ModelConfigs& from);

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfigs& default_instance();

  void Swap(ModelConfigs* other);

  // implements Message ----------------------------------------------

  inline ModelConfigs* New() const { return New(NULL); }

  ModelConfigs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelConfigs& from);
  void MergeFrom(const ModelConfigs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  bool has_multi_camera_projection_config() const;
  void clear_multi_camera_projection_config();
  static const int kMultiCameraProjectionConfigFieldNumber = 1;
  const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& multi_camera_projection_config() const;
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* mutable_multi_camera_projection_config();
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* release_multi_camera_projection_config();
  void set_allocated_multi_camera_projection_config(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config);

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
 private:
  inline void set_has_multi_camera_projection_config();
  inline void clear_has_multi_camera_projection_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config_;
  friend void  protobuf_AddDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  friend void protobuf_AssignDesc_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ModelConfigs* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraFocusConfig

// optional string name = 1;
inline bool CameraFocusConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraFocusConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraFocusConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraFocusConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CameraFocusConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFocusConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
inline void CameraFocusConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
inline void CameraFocusConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
inline ::std::string* CameraFocusConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraFocusConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFocusConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}

// optional string camera_extrinsic_file = 2;
inline bool CameraFocusConfig::has_camera_extrinsic_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraFocusConfig::set_has_camera_extrinsic_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraFocusConfig::clear_has_camera_extrinsic_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraFocusConfig::clear_camera_extrinsic_file() {
  camera_extrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_extrinsic_file();
}
inline const ::std::string& CameraFocusConfig::camera_extrinsic_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return camera_extrinsic_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFocusConfig::set_camera_extrinsic_file(const ::std::string& value) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
inline void CameraFocusConfig::set_camera_extrinsic_file(const char* value) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
inline void CameraFocusConfig::set_camera_extrinsic_file(const char* value, size_t size) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
inline ::std::string* CameraFocusConfig::mutable_camera_extrinsic_file() {
  set_has_camera_extrinsic_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return camera_extrinsic_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraFocusConfig::release_camera_extrinsic_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  clear_has_camera_extrinsic_file();
  return camera_extrinsic_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFocusConfig::set_allocated_camera_extrinsic_file(::std::string* camera_extrinsic_file) {
  if (camera_extrinsic_file != NULL) {
    set_has_camera_extrinsic_file();
  } else {
    clear_has_camera_extrinsic_file();
  }
  camera_extrinsic_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_extrinsic_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}

// optional string camera_intrinsic_file = 3;
inline bool CameraFocusConfig::has_camera_intrinsic_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraFocusConfig::set_has_camera_intrinsic_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraFocusConfig::clear_has_camera_intrinsic_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraFocusConfig::clear_camera_intrinsic_file() {
  camera_intrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_intrinsic_file();
}
inline const ::std::string& CameraFocusConfig::camera_intrinsic_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return camera_intrinsic_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFocusConfig::set_camera_intrinsic_file(const ::std::string& value) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
inline void CameraFocusConfig::set_camera_intrinsic_file(const char* value) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
inline void CameraFocusConfig::set_camera_intrinsic_file(const char* value, size_t size) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
inline ::std::string* CameraFocusConfig::mutable_camera_intrinsic_file() {
  set_has_camera_intrinsic_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return camera_intrinsic_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraFocusConfig::release_camera_intrinsic_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  clear_has_camera_intrinsic_file();
  return camera_intrinsic_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFocusConfig::set_allocated_camera_intrinsic_file(::std::string* camera_intrinsic_file) {
  if (camera_intrinsic_file != NULL) {
    set_has_camera_intrinsic_file();
  } else {
    clear_has_camera_intrinsic_file();
  }
  camera_intrinsic_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_intrinsic_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}

// -------------------------------------------------------------------

// MultiCamerasProjectionConfig

// optional string name = 1 [default = "MultiCamerasProjection"];
inline bool MultiCamerasProjectionConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiCamerasProjectionConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiCamerasProjectionConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiCamerasProjectionConfig::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
inline const ::std::string& MultiCamerasProjectionConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  return name_.GetNoArena(_default_name_);
}
inline void MultiCamerasProjectionConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
inline void MultiCamerasProjectionConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
inline void MultiCamerasProjectionConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
inline ::std::string* MultiCamerasProjectionConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  return name_.MutableNoArena(_default_name_);
}
inline ::std::string* MultiCamerasProjectionConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
inline void MultiCamerasProjectionConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
inline bool MultiCamerasProjectionConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiCamerasProjectionConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiCamerasProjectionConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiCamerasProjectionConfig::clear_version() {
  version_.ClearToDefaultNoArena(_default_version_);
  clear_has_version();
}
inline const ::std::string& MultiCamerasProjectionConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  return version_.GetNoArena(_default_version_);
}
inline void MultiCamerasProjectionConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(_default_version_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
inline void MultiCamerasProjectionConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(_default_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
inline void MultiCamerasProjectionConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(_default_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
inline ::std::string* MultiCamerasProjectionConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  return version_.MutableNoArena(_default_version_);
}
inline ::std::string* MultiCamerasProjectionConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(_default_version_);
}
inline void MultiCamerasProjectionConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(_default_version_, version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}

// optional string single_projection = 3 [default = "BoundaryProjection"];
inline bool MultiCamerasProjectionConfig::has_single_projection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiCamerasProjectionConfig::set_has_single_projection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiCamerasProjectionConfig::clear_has_single_projection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiCamerasProjectionConfig::clear_single_projection() {
  single_projection_.ClearToDefaultNoArena(_default_single_projection_);
  clear_has_single_projection();
}
inline const ::std::string& MultiCamerasProjectionConfig::single_projection() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  return single_projection_.GetNoArena(_default_single_projection_);
}
inline void MultiCamerasProjectionConfig::set_single_projection(const ::std::string& value) {
  set_has_single_projection();
  single_projection_.SetNoArena(_default_single_projection_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
inline void MultiCamerasProjectionConfig::set_single_projection(const char* value) {
  set_has_single_projection();
  single_projection_.SetNoArena(_default_single_projection_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
inline void MultiCamerasProjectionConfig::set_single_projection(const char* value, size_t size) {
  set_has_single_projection();
  single_projection_.SetNoArena(_default_single_projection_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
inline ::std::string* MultiCamerasProjectionConfig::mutable_single_projection() {
  set_has_single_projection();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  return single_projection_.MutableNoArena(_default_single_projection_);
}
inline ::std::string* MultiCamerasProjectionConfig::release_single_projection() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  clear_has_single_projection();
  return single_projection_.ReleaseNoArena(_default_single_projection_);
}
inline void MultiCamerasProjectionConfig::set_allocated_single_projection(::std::string* single_projection) {
  if (single_projection != NULL) {
    set_has_single_projection();
  } else {
    clear_has_single_projection();
  }
  single_projection_.SetAllocatedNoArena(_default_single_projection_, single_projection);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}

// repeated string camera_names = 4;
inline int MultiCamerasProjectionConfig::camera_names_size() const {
  return camera_names_.size();
}
inline void MultiCamerasProjectionConfig::clear_camera_names() {
  camera_names_.Clear();
}
inline const ::std::string& MultiCamerasProjectionConfig::camera_names(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Get(index);
}
inline ::std::string* MultiCamerasProjectionConfig::mutable_camera_names(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Mutable(index);
}
inline void MultiCamerasProjectionConfig::set_camera_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  camera_names_.Mutable(index)->assign(value);
}
inline void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value) {
  camera_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value, size_t size) {
  camera_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline ::std::string* MultiCamerasProjectionConfig::add_camera_names() {
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Add();
}
inline void MultiCamerasProjectionConfig::add_camera_names(const ::std::string& value) {
  camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::add_camera_names(const char* value) {
  camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::add_camera_names(const char* value, size_t size) {
  camera_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultiCamerasProjectionConfig::camera_names() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MultiCamerasProjectionConfig::mutable_camera_names() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return &camera_names_;
}

// repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
inline int MultiCamerasProjectionConfig::camera_focus_config_size() const {
  return camera_focus_config_.size();
}
inline void MultiCamerasProjectionConfig::clear_camera_focus_config() {
  camera_focus_config_.Clear();
}
inline const ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& MultiCamerasProjectionConfig::camera_focus_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Get(index);
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::mutable_camera_focus_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Mutable(index);
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::add_camera_focus_config() {
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >*
MultiCamerasProjectionConfig::mutable_camera_focus_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return &camera_focus_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >&
MultiCamerasProjectionConfig::camera_focus_config() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_;
}

// -------------------------------------------------------------------

// ModelConfigs

// optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
inline bool ModelConfigs::has_multi_camera_projection_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelConfigs::set_has_multi_camera_projection_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelConfigs::clear_has_multi_camera_projection_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelConfigs::clear_multi_camera_projection_config() {
  if (multi_camera_projection_config_ != NULL) multi_camera_projection_config_->::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Clear();
  clear_has_multi_camera_projection_config();
}
inline const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& ModelConfigs::multi_camera_projection_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return multi_camera_projection_config_ != NULL ? *multi_camera_projection_config_ : *default_instance_->multi_camera_projection_config_;
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::mutable_multi_camera_projection_config() {
  set_has_multi_camera_projection_config();
  if (multi_camera_projection_config_ == NULL) {
    multi_camera_projection_config_ = new ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return multi_camera_projection_config_;
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::release_multi_camera_projection_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  clear_has_multi_camera_projection_config();
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* temp = multi_camera_projection_config_;
  multi_camera_projection_config_ = NULL;
  return temp;
}
inline void ModelConfigs::set_allocated_multi_camera_projection_config(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config) {
  delete multi_camera_projection_config_;
  multi_camera_projection_config_ = multi_camera_projection_config;
  if (multi_camera_projection_config) {
    set_has_multi_camera_projection_config();
  } else {
    clear_has_multi_camera_projection_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multi_camera_projection_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto__INCLUDED
