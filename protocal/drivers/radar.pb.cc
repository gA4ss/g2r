// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/radar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {

namespace {

const ::google::protobuf::Descriptor* RadarObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarObstacle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RadarObstacle_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RadarObstacle_MovingStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RadarObstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarObstacles_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarObstacles_RadarObstacleEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fradar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fradar_2eproto() {
  protobuf_AddDesc_drivers_2fradar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/radar.proto");
  GOOGLE_CHECK(file != NULL);
  RadarObstacle_descriptor_ = file->message_type(0);
  static const int RadarObstacle_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, relative_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, relative_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, rcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, moving_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, absolute_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, absolute_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, moving_frames_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, status_),
  };
  RadarObstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarObstacle_descriptor_,
      RadarObstacle::default_instance_,
      RadarObstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarObstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, _internal_metadata_),
      -1);
  RadarObstacle_Status_descriptor_ = RadarObstacle_descriptor_->enum_type(0);
  RadarObstacle_MovingStatus_descriptor_ = RadarObstacle_descriptor_->enum_type(1);
  RadarObstacles_descriptor_ = file->message_type(1);
  static const int RadarObstacles_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, radar_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, error_code_),
  };
  RadarObstacles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarObstacles_descriptor_,
      RadarObstacles::default_instance_,
      RadarObstacles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarObstacles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, _internal_metadata_),
      -1);
  RadarObstacles_RadarObstacleEntry_descriptor_ = RadarObstacles_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fradar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarObstacle_descriptor_, &RadarObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarObstacles_descriptor_, &RadarObstacles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RadarObstacles_RadarObstacleEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::apollo::drivers::RadarObstacle,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                RadarObstacles_RadarObstacleEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fradar_2eproto() {
  delete RadarObstacle::default_instance_;
  delete RadarObstacle_reflection_;
  delete RadarObstacles::default_instance_;
  delete RadarObstacles_reflection_;
}

void protobuf_AddDesc_drivers_2fradar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fradar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2ferror_5fcode_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023drivers/radar.proto\022\016apollo.drivers\032\027c"
    "ommon/error_code.proto\032\023common/header.pr"
    "oto\032\025common/geometry.proto\"\314\005\n\rRadarObst"
    "acle\022\n\n\002id\030\001 \001(\005\0221\n\021relative_position\030\002 "
    "\001(\0132\026.apollo.common.Point2D\0221\n\021relative_"
    "velocity\030\003 \001(\0132\026.apollo.common.Point2D\022\013"
    "\n\003rcs\030\004 \001(\001\022A\n\rmoving_status\030\005 \001(\0162*.apo"
    "llo.drivers.RadarObstacle.MovingStatus\022\r"
    "\n\005width\030\006 \001(\001\022\016\n\006length\030\007 \001(\001\022\016\n\006height\030"
    "\010 \001(\001\022\r\n\005theta\030\t \001(\001\0221\n\021absolute_positio"
    "n\030\n \001(\0132\026.apollo.common.Point2D\0221\n\021absol"
    "ute_velocity\030\013 \001(\0132\026.apollo.common.Point"
    "2D\022\r\n\005count\030\014 \001(\005\022\033\n\023moving_frames_count"
    "\030\r \001(\005\0224\n\006status\030\016 \001(\0162$.apollo.drivers."
    "RadarObstacle.Status\"\256\001\n\006Status\022\r\n\tNO_TA"
    "RGET\020\000\022\016\n\nNEW_TARGET\020\001\022\026\n\022NEW_UPDATED_TA"
    "RGET\020\002\022\022\n\016UPDATED_TARGET\020\003\022\022\n\016COASTED_TA"
    "RGET\020\004\022\021\n\rMERGED_TARGET\020\005\022\032\n\026INVALID_COA"
    "STED_TARGET\020\006\022\026\n\022NEW_COASTED_TARGET\020\007\"B\n"
    "\014MovingStatus\022\016\n\nSTATIONARY\020\000\022\013\n\007NEARING"
    "\020\001\022\013\n\007AWAYING\020\002\022\010\n\004NONE\020\003\"\211\002\n\016RadarObsta"
    "cles\022I\n\016radar_obstacle\030\001 \003(\01321.apollo.dr"
    "ivers.RadarObstacles.RadarObstacleEntry\022"
    "%\n\006header\030\002 \001(\0132\025.apollo.common.Header\0220"
    "\n\nerror_code\030\003 \001(\0162\030.apollo.common.Error"
    "Code:\002OK\032S\n\022RadarObstacleEntry\022\013\n\003key\030\001 "
    "\001(\005\022,\n\005value\030\002 \001(\0132\035.apollo.drivers.Rada"
    "rObstacle:\0028\001", 1093);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/radar.proto", &protobuf_RegisterTypes);
  RadarObstacle::default_instance_ = new RadarObstacle();
  RadarObstacles::default_instance_ = new RadarObstacles();
  RadarObstacle::default_instance_->InitAsDefaultInstance();
  RadarObstacles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fradar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fradar_2eproto {
  StaticDescriptorInitializer_drivers_2fradar_2eproto() {
    protobuf_AddDesc_drivers_2fradar_2eproto();
  }
} static_descriptor_initializer_drivers_2fradar_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RadarObstacle_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarObstacle_Status_descriptor_;
}
bool RadarObstacle_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RadarObstacle_Status RadarObstacle::NO_TARGET;
const RadarObstacle_Status RadarObstacle::NEW_TARGET;
const RadarObstacle_Status RadarObstacle::NEW_UPDATED_TARGET;
const RadarObstacle_Status RadarObstacle::UPDATED_TARGET;
const RadarObstacle_Status RadarObstacle::COASTED_TARGET;
const RadarObstacle_Status RadarObstacle::MERGED_TARGET;
const RadarObstacle_Status RadarObstacle::INVALID_COASTED_TARGET;
const RadarObstacle_Status RadarObstacle::NEW_COASTED_TARGET;
const RadarObstacle_Status RadarObstacle::Status_MIN;
const RadarObstacle_Status RadarObstacle::Status_MAX;
const int RadarObstacle::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RadarObstacle_MovingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarObstacle_MovingStatus_descriptor_;
}
bool RadarObstacle_MovingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RadarObstacle_MovingStatus RadarObstacle::STATIONARY;
const RadarObstacle_MovingStatus RadarObstacle::NEARING;
const RadarObstacle_MovingStatus RadarObstacle::AWAYING;
const RadarObstacle_MovingStatus RadarObstacle::NONE;
const RadarObstacle_MovingStatus RadarObstacle::MovingStatus_MIN;
const RadarObstacle_MovingStatus RadarObstacle::MovingStatus_MAX;
const int RadarObstacle::MovingStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarObstacle::kIdFieldNumber;
const int RadarObstacle::kRelativePositionFieldNumber;
const int RadarObstacle::kRelativeVelocityFieldNumber;
const int RadarObstacle::kRcsFieldNumber;
const int RadarObstacle::kMovingStatusFieldNumber;
const int RadarObstacle::kWidthFieldNumber;
const int RadarObstacle::kLengthFieldNumber;
const int RadarObstacle::kHeightFieldNumber;
const int RadarObstacle::kThetaFieldNumber;
const int RadarObstacle::kAbsolutePositionFieldNumber;
const int RadarObstacle::kAbsoluteVelocityFieldNumber;
const int RadarObstacle::kCountFieldNumber;
const int RadarObstacle::kMovingFramesCountFieldNumber;
const int RadarObstacle::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarObstacle::RadarObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RadarObstacle)
}

void RadarObstacle::InitAsDefaultInstance() {
  relative_position_ = const_cast< ::apollo::common::Point2D*>(&::apollo::common::Point2D::default_instance());
  relative_velocity_ = const_cast< ::apollo::common::Point2D*>(&::apollo::common::Point2D::default_instance());
  absolute_position_ = const_cast< ::apollo::common::Point2D*>(&::apollo::common::Point2D::default_instance());
  absolute_velocity_ = const_cast< ::apollo::common::Point2D*>(&::apollo::common::Point2D::default_instance());
}

RadarObstacle::RadarObstacle(const RadarObstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarObstacle)
}

void RadarObstacle::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  relative_position_ = NULL;
  relative_velocity_ = NULL;
  rcs_ = 0;
  moving_status_ = 0;
  width_ = 0;
  length_ = 0;
  height_ = 0;
  theta_ = 0;
  absolute_position_ = NULL;
  absolute_velocity_ = NULL;
  count_ = 0;
  moving_frames_count_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarObstacle::~RadarObstacle() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarObstacle)
  SharedDtor();
}

void RadarObstacle::SharedDtor() {
  if (this != default_instance_) {
    delete relative_position_;
    delete relative_velocity_;
    delete absolute_position_;
    delete absolute_velocity_;
  }
}

void RadarObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarObstacle_descriptor_;
}

const RadarObstacle& RadarObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fradar_2eproto();
  return *default_instance_;
}

RadarObstacle* RadarObstacle::default_instance_ = NULL;

RadarObstacle* RadarObstacle::New(::google::protobuf::Arena* arena) const {
  RadarObstacle* n = new RadarObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarObstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadarObstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadarObstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, height_);
    if (has_relative_position()) {
      if (relative_position_ != NULL) relative_position_->::apollo::common::Point2D::Clear();
    }
    if (has_relative_velocity()) {
      if (relative_velocity_ != NULL) relative_velocity_->::apollo::common::Point2D::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(count_, status_);
    theta_ = 0;
    if (has_absolute_position()) {
      if (absolute_position_ != NULL) absolute_position_->::apollo::common::Point2D::Clear();
    }
    if (has_absolute_velocity()) {
      if (absolute_velocity_ != NULL) absolute_velocity_->::apollo::common::Point2D::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RadarObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_relative_position;
        break;
      }

      // optional .apollo.common.Point2D relative_position = 2;
      case 2: {
        if (tag == 18) {
         parse_relative_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relative_velocity;
        break;
      }

      // optional .apollo.common.Point2D relative_velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_relative_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rcs;
        break;
      }

      // optional double rcs = 4;
      case 4: {
        if (tag == 33) {
         parse_rcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
          set_has_rcs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_moving_status;
        break;
      }

      // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
      case 5: {
        if (tag == 40) {
         parse_moving_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::RadarObstacle_MovingStatus_IsValid(value)) {
            set_moving_status(static_cast< ::apollo::drivers::RadarObstacle_MovingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_width;
        break;
      }

      // optional double width = 6;
      case 6: {
        if (tag == 49) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_length;
        break;
      }

      // optional double length = 7;
      case 7: {
        if (tag == 57) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_height;
        break;
      }

      // optional double height = 8;
      case 8: {
        if (tag == 65) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_theta;
        break;
      }

      // optional double theta = 9;
      case 9: {
        if (tag == 73) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_absolute_position;
        break;
      }

      // optional .apollo.common.Point2D absolute_position = 10;
      case 10: {
        if (tag == 82) {
         parse_absolute_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_absolute_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_absolute_velocity;
        break;
      }

      // optional .apollo.common.Point2D absolute_velocity = 11;
      case 11: {
        if (tag == 90) {
         parse_absolute_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_absolute_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_count;
        break;
      }

      // optional int32 count = 12;
      case 12: {
        if (tag == 96) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_moving_frames_count;
        break;
      }

      // optional int32 moving_frames_count = 13;
      case 13: {
        if (tag == 104) {
         parse_moving_frames_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moving_frames_count_)));
          set_has_moving_frames_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_status;
        break;
      }

      // optional .apollo.drivers.RadarObstacle.Status status = 14;
      case 14: {
        if (tag == 112) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::RadarObstacle_Status_IsValid(value)) {
            set_status(static_cast< ::apollo::drivers::RadarObstacle_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RadarObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RadarObstacle)
  return false;
#undef DO_
}

void RadarObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RadarObstacle)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .apollo.common.Point2D relative_position = 2;
  if (has_relative_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->relative_position_, output);
  }

  // optional .apollo.common.Point2D relative_velocity = 3;
  if (has_relative_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->relative_velocity_, output);
  }

  // optional double rcs = 4;
  if (has_rcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rcs(), output);
  }

  // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
  if (has_moving_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->moving_status(), output);
  }

  // optional double width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double length = 7;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->length(), output);
  }

  // optional double height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // optional double theta = 9;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->theta(), output);
  }

  // optional .apollo.common.Point2D absolute_position = 10;
  if (has_absolute_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->absolute_position_, output);
  }

  // optional .apollo.common.Point2D absolute_velocity = 11;
  if (has_absolute_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->absolute_velocity_, output);
  }

  // optional int32 count = 12;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->count(), output);
  }

  // optional int32 moving_frames_count = 13;
  if (has_moving_frames_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->moving_frames_count(), output);
  }

  // optional .apollo.drivers.RadarObstacle.Status status = 14;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RadarObstacle)
}

::google::protobuf::uint8* RadarObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarObstacle)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .apollo.common.Point2D relative_position = 2;
  if (has_relative_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->relative_position_, false, target);
  }

  // optional .apollo.common.Point2D relative_velocity = 3;
  if (has_relative_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->relative_velocity_, false, target);
  }

  // optional double rcs = 4;
  if (has_rcs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rcs(), target);
  }

  // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
  if (has_moving_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->moving_status(), target);
  }

  // optional double width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double length = 7;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->length(), target);
  }

  // optional double height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // optional double theta = 9;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->theta(), target);
  }

  // optional .apollo.common.Point2D absolute_position = 10;
  if (has_absolute_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->absolute_position_, false, target);
  }

  // optional .apollo.common.Point2D absolute_velocity = 11;
  if (has_absolute_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->absolute_velocity_, false, target);
  }

  // optional int32 count = 12;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->count(), target);
  }

  // optional int32 moving_frames_count = 13;
  if (has_moving_frames_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->moving_frames_count(), target);
  }

  // optional .apollo.drivers.RadarObstacle.Status status = 14;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarObstacle)
  return target;
}

int RadarObstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarObstacle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.common.Point2D relative_position = 2;
    if (has_relative_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relative_position_);
    }

    // optional .apollo.common.Point2D relative_velocity = 3;
    if (has_relative_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relative_velocity_);
    }

    // optional double rcs = 4;
    if (has_rcs()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
    if (has_moving_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moving_status());
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double length = 7;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double theta = 9;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.Point2D absolute_position = 10;
    if (has_absolute_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->absolute_position_);
    }

    // optional .apollo.common.Point2D absolute_velocity = 11;
    if (has_absolute_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->absolute_velocity_);
    }

    // optional int32 count = 12;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 moving_frames_count = 13;
    if (has_moving_frames_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moving_frames_count());
    }

    // optional .apollo.drivers.RadarObstacle.Status status = 14;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RadarObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarObstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RadarObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RadarObstacle)
    MergeFrom(*source);
  }
}

void RadarObstacle::MergeFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_relative_position()) {
      mutable_relative_position()->::apollo::common::Point2D::MergeFrom(from.relative_position());
    }
    if (from.has_relative_velocity()) {
      mutable_relative_velocity()->::apollo::common::Point2D::MergeFrom(from.relative_velocity());
    }
    if (from.has_rcs()) {
      set_rcs(from.rcs());
    }
    if (from.has_moving_status()) {
      set_moving_status(from.moving_status());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_absolute_position()) {
      mutable_absolute_position()->::apollo::common::Point2D::MergeFrom(from.absolute_position());
    }
    if (from.has_absolute_velocity()) {
      mutable_absolute_velocity()->::apollo::common::Point2D::MergeFrom(from.absolute_velocity());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_moving_frames_count()) {
      set_moving_frames_count(from.moving_frames_count());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarObstacle::CopyFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacle::IsInitialized() const {

  return true;
}

void RadarObstacle::Swap(RadarObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarObstacle::InternalSwap(RadarObstacle* other) {
  std::swap(id_, other->id_);
  std::swap(relative_position_, other->relative_position_);
  std::swap(relative_velocity_, other->relative_velocity_);
  std::swap(rcs_, other->rcs_);
  std::swap(moving_status_, other->moving_status_);
  std::swap(width_, other->width_);
  std::swap(length_, other->length_);
  std::swap(height_, other->height_);
  std::swap(theta_, other->theta_);
  std::swap(absolute_position_, other->absolute_position_);
  std::swap(absolute_velocity_, other->absolute_velocity_);
  std::swap(count_, other->count_);
  std::swap(moving_frames_count_, other->moving_frames_count_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarObstacle_descriptor_;
  metadata.reflection = RadarObstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarObstacle

// optional int32 id = 1;
bool RadarObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 RadarObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.id)
  return id_;
}
 void RadarObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.id)
}

// optional .apollo.common.Point2D relative_position = 2;
bool RadarObstacle::has_relative_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarObstacle::set_has_relative_position() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarObstacle::clear_has_relative_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarObstacle::clear_relative_position() {
  if (relative_position_ != NULL) relative_position_->::apollo::common::Point2D::Clear();
  clear_has_relative_position();
}
const ::apollo::common::Point2D& RadarObstacle::relative_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.relative_position)
  return relative_position_ != NULL ? *relative_position_ : *default_instance_->relative_position_;
}
::apollo::common::Point2D* RadarObstacle::mutable_relative_position() {
  set_has_relative_position();
  if (relative_position_ == NULL) {
    relative_position_ = new ::apollo::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.relative_position)
  return relative_position_;
}
::apollo::common::Point2D* RadarObstacle::release_relative_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.relative_position)
  clear_has_relative_position();
  ::apollo::common::Point2D* temp = relative_position_;
  relative_position_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_relative_position(::apollo::common::Point2D* relative_position) {
  delete relative_position_;
  relative_position_ = relative_position;
  if (relative_position) {
    set_has_relative_position();
  } else {
    clear_has_relative_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.relative_position)
}

// optional .apollo.common.Point2D relative_velocity = 3;
bool RadarObstacle::has_relative_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarObstacle::set_has_relative_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarObstacle::clear_has_relative_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarObstacle::clear_relative_velocity() {
  if (relative_velocity_ != NULL) relative_velocity_->::apollo::common::Point2D::Clear();
  clear_has_relative_velocity();
}
const ::apollo::common::Point2D& RadarObstacle::relative_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.relative_velocity)
  return relative_velocity_ != NULL ? *relative_velocity_ : *default_instance_->relative_velocity_;
}
::apollo::common::Point2D* RadarObstacle::mutable_relative_velocity() {
  set_has_relative_velocity();
  if (relative_velocity_ == NULL) {
    relative_velocity_ = new ::apollo::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.relative_velocity)
  return relative_velocity_;
}
::apollo::common::Point2D* RadarObstacle::release_relative_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.relative_velocity)
  clear_has_relative_velocity();
  ::apollo::common::Point2D* temp = relative_velocity_;
  relative_velocity_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_relative_velocity(::apollo::common::Point2D* relative_velocity) {
  delete relative_velocity_;
  relative_velocity_ = relative_velocity;
  if (relative_velocity) {
    set_has_relative_velocity();
  } else {
    clear_has_relative_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.relative_velocity)
}

// optional double rcs = 4;
bool RadarObstacle::has_rcs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarObstacle::set_has_rcs() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarObstacle::clear_has_rcs() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarObstacle::clear_rcs() {
  rcs_ = 0;
  clear_has_rcs();
}
 double RadarObstacle::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.rcs)
  return rcs_;
}
 void RadarObstacle::set_rcs(double value) {
  set_has_rcs();
  rcs_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.rcs)
}

// optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
bool RadarObstacle::has_moving_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarObstacle::set_has_moving_status() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarObstacle::clear_has_moving_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarObstacle::clear_moving_status() {
  moving_status_ = 0;
  clear_has_moving_status();
}
 ::apollo::drivers::RadarObstacle_MovingStatus RadarObstacle::moving_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.moving_status)
  return static_cast< ::apollo::drivers::RadarObstacle_MovingStatus >(moving_status_);
}
 void RadarObstacle::set_moving_status(::apollo::drivers::RadarObstacle_MovingStatus value) {
  assert(::apollo::drivers::RadarObstacle_MovingStatus_IsValid(value));
  set_has_moving_status();
  moving_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.moving_status)
}

// optional double width = 6;
bool RadarObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RadarObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void RadarObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void RadarObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
 double RadarObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.width)
  return width_;
}
 void RadarObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.width)
}

// optional double length = 7;
bool RadarObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RadarObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
void RadarObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void RadarObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double RadarObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.length)
  return length_;
}
 void RadarObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.length)
}

// optional double height = 8;
bool RadarObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RadarObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void RadarObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void RadarObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
 double RadarObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.height)
  return height_;
}
 void RadarObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.height)
}

// optional double theta = 9;
bool RadarObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RadarObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000100u;
}
void RadarObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
void RadarObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
 double RadarObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.theta)
  return theta_;
}
 void RadarObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.theta)
}

// optional .apollo.common.Point2D absolute_position = 10;
bool RadarObstacle::has_absolute_position() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RadarObstacle::set_has_absolute_position() {
  _has_bits_[0] |= 0x00000200u;
}
void RadarObstacle::clear_has_absolute_position() {
  _has_bits_[0] &= ~0x00000200u;
}
void RadarObstacle::clear_absolute_position() {
  if (absolute_position_ != NULL) absolute_position_->::apollo::common::Point2D::Clear();
  clear_has_absolute_position();
}
const ::apollo::common::Point2D& RadarObstacle::absolute_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.absolute_position)
  return absolute_position_ != NULL ? *absolute_position_ : *default_instance_->absolute_position_;
}
::apollo::common::Point2D* RadarObstacle::mutable_absolute_position() {
  set_has_absolute_position();
  if (absolute_position_ == NULL) {
    absolute_position_ = new ::apollo::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.absolute_position)
  return absolute_position_;
}
::apollo::common::Point2D* RadarObstacle::release_absolute_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.absolute_position)
  clear_has_absolute_position();
  ::apollo::common::Point2D* temp = absolute_position_;
  absolute_position_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_absolute_position(::apollo::common::Point2D* absolute_position) {
  delete absolute_position_;
  absolute_position_ = absolute_position;
  if (absolute_position) {
    set_has_absolute_position();
  } else {
    clear_has_absolute_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.absolute_position)
}

// optional .apollo.common.Point2D absolute_velocity = 11;
bool RadarObstacle::has_absolute_velocity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RadarObstacle::set_has_absolute_velocity() {
  _has_bits_[0] |= 0x00000400u;
}
void RadarObstacle::clear_has_absolute_velocity() {
  _has_bits_[0] &= ~0x00000400u;
}
void RadarObstacle::clear_absolute_velocity() {
  if (absolute_velocity_ != NULL) absolute_velocity_->::apollo::common::Point2D::Clear();
  clear_has_absolute_velocity();
}
const ::apollo::common::Point2D& RadarObstacle::absolute_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.absolute_velocity)
  return absolute_velocity_ != NULL ? *absolute_velocity_ : *default_instance_->absolute_velocity_;
}
::apollo::common::Point2D* RadarObstacle::mutable_absolute_velocity() {
  set_has_absolute_velocity();
  if (absolute_velocity_ == NULL) {
    absolute_velocity_ = new ::apollo::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.absolute_velocity)
  return absolute_velocity_;
}
::apollo::common::Point2D* RadarObstacle::release_absolute_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.absolute_velocity)
  clear_has_absolute_velocity();
  ::apollo::common::Point2D* temp = absolute_velocity_;
  absolute_velocity_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_absolute_velocity(::apollo::common::Point2D* absolute_velocity) {
  delete absolute_velocity_;
  absolute_velocity_ = absolute_velocity;
  if (absolute_velocity) {
    set_has_absolute_velocity();
  } else {
    clear_has_absolute_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.absolute_velocity)
}

// optional int32 count = 12;
bool RadarObstacle::has_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RadarObstacle::set_has_count() {
  _has_bits_[0] |= 0x00000800u;
}
void RadarObstacle::clear_has_count() {
  _has_bits_[0] &= ~0x00000800u;
}
void RadarObstacle::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 RadarObstacle::count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.count)
  return count_;
}
 void RadarObstacle::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.count)
}

// optional int32 moving_frames_count = 13;
bool RadarObstacle::has_moving_frames_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RadarObstacle::set_has_moving_frames_count() {
  _has_bits_[0] |= 0x00001000u;
}
void RadarObstacle::clear_has_moving_frames_count() {
  _has_bits_[0] &= ~0x00001000u;
}
void RadarObstacle::clear_moving_frames_count() {
  moving_frames_count_ = 0;
  clear_has_moving_frames_count();
}
 ::google::protobuf::int32 RadarObstacle::moving_frames_count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.moving_frames_count)
  return moving_frames_count_;
}
 void RadarObstacle::set_moving_frames_count(::google::protobuf::int32 value) {
  set_has_moving_frames_count();
  moving_frames_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.moving_frames_count)
}

// optional .apollo.drivers.RadarObstacle.Status status = 14;
bool RadarObstacle::has_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RadarObstacle::set_has_status() {
  _has_bits_[0] |= 0x00002000u;
}
void RadarObstacle::clear_has_status() {
  _has_bits_[0] &= ~0x00002000u;
}
void RadarObstacle::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::apollo::drivers::RadarObstacle_Status RadarObstacle::status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.status)
  return static_cast< ::apollo::drivers::RadarObstacle_Status >(status_);
}
 void RadarObstacle::set_status(::apollo::drivers::RadarObstacle_Status value) {
  assert(::apollo::drivers::RadarObstacle_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarObstacles::kRadarObstacleFieldNumber;
const int RadarObstacles::kHeaderFieldNumber;
const int RadarObstacles::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarObstacles::RadarObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RadarObstacles)
}

void RadarObstacles::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

RadarObstacles::RadarObstacles(const RadarObstacles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarObstacles)
}

void RadarObstacles::SharedCtor() {
  _cached_size_ = 0;
  radar_obstacle_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  radar_obstacle_.SetEntryDescriptor(
      &::apollo::drivers::RadarObstacles_RadarObstacleEntry_descriptor_);
  header_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarObstacles::~RadarObstacles() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarObstacles)
  SharedDtor();
}

void RadarObstacles::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void RadarObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarObstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarObstacles_descriptor_;
}

const RadarObstacles& RadarObstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fradar_2eproto();
  return *default_instance_;
}

RadarObstacles* RadarObstacles::default_instance_ = NULL;

RadarObstacles* RadarObstacles::New(::google::protobuf::Arena* arena) const {
  RadarObstacles* n = new RadarObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarObstacles)
  if (_has_bits_[0 / 32] & 6u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    error_code_ = 0;
  }
  radar_obstacle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RadarObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_radar_obstacle:
          RadarObstacles_RadarObstacleEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::apollo::drivers::RadarObstacle,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle > > parser(&radar_obstacle_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_radar_obstacle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (tag == 24) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RadarObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RadarObstacles)
  return false;
#undef DO_
}

void RadarObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RadarObstacles)
  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  if (!this->radar_obstacle().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->radar_obstacle().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->radar_obstacle().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RadarObstacles)
}

::google::protobuf::uint8* RadarObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarObstacles)
  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  if (!this->radar_obstacle().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->radar_obstacle().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->radar_obstacle().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // optional .apollo.common.Header header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarObstacles)
  return target;
}

int RadarObstacles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarObstacles)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional .apollo.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  total_size += 1 * this->radar_obstacle_size();
  {
    ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
        it = this->radar_obstacle().begin();
        it != this->radar_obstacle().end(); ++it) {
      entry.reset(radar_obstacle_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RadarObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarObstacles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RadarObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RadarObstacles)
    MergeFrom(*source);
  }
}

void RadarObstacles::MergeFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  radar_obstacle_.MergeFrom(from.radar_obstacle_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarObstacles::CopyFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacles::IsInitialized() const {

  return true;
}

void RadarObstacles::Swap(RadarObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarObstacles::InternalSwap(RadarObstacles* other) {
  radar_obstacle_.Swap(&other->radar_obstacle_);
  std::swap(header_, other->header_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarObstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarObstacles_descriptor_;
  metadata.reflection = RadarObstacles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarObstacles

// map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
int RadarObstacles::radar_obstacle_size() const {
  return radar_obstacle_.size();
}
void RadarObstacles::clear_radar_obstacle() {
  radar_obstacle_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >&
RadarObstacles::radar_obstacle() const {
  // @@protoc_insertion_point(field_map:apollo.drivers.RadarObstacles.radar_obstacle)
  return radar_obstacle_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >*
RadarObstacles::mutable_radar_obstacle() {
  // @@protoc_insertion_point(field_mutable_map:apollo.drivers.RadarObstacles.radar_obstacle)
  return radar_obstacle_.MutableMap();
}

// optional .apollo.common.Header header = 2;
bool RadarObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarObstacles::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& RadarObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacles.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* RadarObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacles.header)
  return header_;
}
::apollo::common::Header* RadarObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RadarObstacles::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
bool RadarObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::apollo::common::ErrorCode RadarObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacles.error_code)
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
 void RadarObstacles::set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacles.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
