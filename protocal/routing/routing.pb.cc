// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing/routing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "routing/routing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace routing {

namespace {

const ::google::protobuf::Descriptor* LaneWaypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneWaypoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Measurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Measurement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Passage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Passage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutingResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeLaneType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_routing_2frouting_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_routing_2frouting_2eproto() {
  protobuf_AddDesc_routing_2frouting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "routing/routing.proto");
  GOOGLE_CHECK(file != NULL);
  LaneWaypoint_descriptor_ = file->message_type(0);
  static const int LaneWaypoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, pose_),
  };
  LaneWaypoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneWaypoint_descriptor_,
      LaneWaypoint::default_instance_,
      LaneWaypoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneWaypoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, _internal_metadata_),
      -1);
  LaneSegment_descriptor_ = file->message_type(1);
  static const int LaneSegment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, start_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, end_s_),
  };
  LaneSegment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneSegment_descriptor_,
      LaneSegment::default_instance_,
      LaneSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneSegment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _internal_metadata_),
      -1);
  RoutingRequest_descriptor_ = file->message_type(2);
  static const int RoutingRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, waypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, blacklisted_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, blacklisted_road_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, broadcast_),
  };
  RoutingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoutingRequest_descriptor_,
      RoutingRequest::default_instance_,
      RoutingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoutingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, _internal_metadata_),
      -1);
  Measurement_descriptor_ = file->message_type(3);
  static const int Measurement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, distance_),
  };
  Measurement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Measurement_descriptor_,
      Measurement::default_instance_,
      Measurement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _has_bits_[0]),
      -1,
      -1,
      sizeof(Measurement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _internal_metadata_),
      -1);
  Passage_descriptor_ = file->message_type(4);
  static const int Passage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, can_exit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, change_lane_type_),
  };
  Passage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Passage_descriptor_,
      Passage::default_instance_,
      Passage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _has_bits_[0]),
      -1,
      -1,
      sizeof(Passage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _internal_metadata_),
      -1);
  RoadSegment_descriptor_ = file->message_type(5);
  static const int RoadSegment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, passage_),
  };
  RoadSegment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoadSegment_descriptor_,
      RoadSegment::default_instance_,
      RoadSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoadSegment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, _internal_metadata_),
      -1);
  RoutingResponse_descriptor_ = file->message_type(6);
  static const int RoutingResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, road_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, measurement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, routing_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, map_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, status_),
  };
  RoutingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoutingResponse_descriptor_,
      RoutingResponse::default_instance_,
      RoutingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoutingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, _internal_metadata_),
      -1);
  ChangeLaneType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_routing_2frouting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneWaypoint_descriptor_, &LaneWaypoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneSegment_descriptor_, &LaneSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoutingRequest_descriptor_, &RoutingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Measurement_descriptor_, &Measurement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Passage_descriptor_, &Passage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoadSegment_descriptor_, &RoadSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoutingResponse_descriptor_, &RoutingResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_routing_2frouting_2eproto() {
  delete LaneWaypoint::default_instance_;
  delete LaneWaypoint_reflection_;
  delete LaneSegment::default_instance_;
  delete LaneSegment_reflection_;
  delete RoutingRequest::default_instance_;
  delete RoutingRequest_reflection_;
  delete Measurement::default_instance_;
  delete Measurement_reflection_;
  delete Passage::default_instance_;
  delete Passage_reflection_;
  delete RoadSegment::default_instance_;
  delete RoadSegment_reflection_;
  delete RoutingResponse::default_instance_;
  delete RoutingResponse_reflection_;
}

void protobuf_AddDesc_routing_2frouting_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_routing_2frouting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2ferror_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025routing/routing.proto\022\016apollo.routing\032"
    "\023common/header.proto\032\025common/geometry.pr"
    "oto\032\027common/error_code.proto\"L\n\014LaneWayp"
    "oint\022\n\n\002id\030\001 \001(\t\022\t\n\001s\030\002 \001(\001\022%\n\004pose\030\003 \001("
    "\0132\027.apollo.common.PointENU\"9\n\013LaneSegmen"
    "t\022\n\n\002id\030\001 \001(\t\022\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030"
    "\003 \001(\001\"\321\001\n\016RoutingRequest\022%\n\006header\030\001 \001(\013"
    "2\025.apollo.common.Header\022.\n\010waypoint\030\002 \003("
    "\0132\034.apollo.routing.LaneWaypoint\0225\n\020black"
    "listed_lane\030\003 \003(\0132\033.apollo.routing.LaneS"
    "egment\022\030\n\020blacklisted_road\030\004 \003(\t\022\027\n\tbroa"
    "dcast\030\005 \001(\010:\004true\"\037\n\013Measurement\022\020\n\010dist"
    "ance\030\001 \001(\001\"\214\001\n\007Passage\022,\n\007segment\030\001 \003(\0132"
    "\033.apollo.routing.LaneSegment\022\020\n\010can_exit"
    "\030\002 \001(\010\022A\n\020change_lane_type\030\003 \001(\0162\036.apoll"
    "o.routing.ChangeLaneType:\007FORWARD\"C\n\013Roa"
    "dSegment\022\n\n\002id\030\001 \001(\t\022(\n\007passage\030\002 \003(\0132\027."
    "apollo.routing.Passage\"\214\002\n\017RoutingRespon"
    "se\022%\n\006header\030\001 \001(\0132\025.apollo.common.Heade"
    "r\022)\n\004road\030\002 \003(\0132\033.apollo.routing.RoadSeg"
    "ment\0220\n\013measurement\030\003 \001(\0132\033.apollo.routi"
    "ng.Measurement\0227\n\017routing_request\030\004 \001(\0132"
    "\036.apollo.routing.RoutingRequest\022\023\n\013map_v"
    "ersion\030\005 \001(\014\022\'\n\006status\030\006 \001(\0132\027.apollo.co"
    "mmon.StatusPb*2\n\016ChangeLaneType\022\013\n\007FORWA"
    "RD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002", 1025);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "routing/routing.proto", &protobuf_RegisterTypes);
  LaneWaypoint::default_instance_ = new LaneWaypoint();
  LaneSegment::default_instance_ = new LaneSegment();
  RoutingRequest::default_instance_ = new RoutingRequest();
  Measurement::default_instance_ = new Measurement();
  Passage::default_instance_ = new Passage();
  RoadSegment::default_instance_ = new RoadSegment();
  RoutingResponse::default_instance_ = new RoutingResponse();
  LaneWaypoint::default_instance_->InitAsDefaultInstance();
  LaneSegment::default_instance_->InitAsDefaultInstance();
  RoutingRequest::default_instance_->InitAsDefaultInstance();
  Measurement::default_instance_->InitAsDefaultInstance();
  Passage::default_instance_->InitAsDefaultInstance();
  RoadSegment::default_instance_->InitAsDefaultInstance();
  RoutingResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_routing_2frouting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_routing_2frouting_2eproto {
  StaticDescriptorInitializer_routing_2frouting_2eproto() {
    protobuf_AddDesc_routing_2frouting_2eproto();
  }
} static_descriptor_initializer_routing_2frouting_2eproto_;
const ::google::protobuf::EnumDescriptor* ChangeLaneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLaneType_descriptor_;
}
bool ChangeLaneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneWaypoint::kIdFieldNumber;
const int LaneWaypoint::kSFieldNumber;
const int LaneWaypoint::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneWaypoint::LaneWaypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.LaneWaypoint)
}

void LaneWaypoint::InitAsDefaultInstance() {
  pose_ = const_cast< ::apollo::common::PointENU*>(&::apollo::common::PointENU::default_instance());
}

LaneWaypoint::LaneWaypoint(const LaneWaypoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneWaypoint)
}

void LaneWaypoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneWaypoint::~LaneWaypoint() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneWaypoint)
  SharedDtor();
}

void LaneWaypoint::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pose_;
  }
}

void LaneWaypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneWaypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneWaypoint_descriptor_;
}

const LaneWaypoint& LaneWaypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_2eproto();
  return *default_instance_;
}

LaneWaypoint* LaneWaypoint::default_instance_ = NULL;

LaneWaypoint* LaneWaypoint::New(::google::protobuf::Arena* arena) const {
  LaneWaypoint* n = new LaneWaypoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneWaypoint)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    s_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::apollo::common::PointENU::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneWaypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.LaneWaypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.LaneWaypoint.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_s;
        break;
      }

      // optional double s = 2;
      case 2: {
        if (tag == 17) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .apollo.common.PointENU pose = 3;
      case 3: {
        if (tag == 26) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.LaneWaypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.LaneWaypoint)
  return false;
#undef DO_
}

void LaneWaypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.LaneWaypoint)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneWaypoint.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double s = 2;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // optional .apollo.common.PointENU pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.LaneWaypoint)
}

::google::protobuf::uint8* LaneWaypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneWaypoint)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneWaypoint.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double s = 2;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // optional .apollo.common.PointENU pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pose_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneWaypoint)
  return target;
}

int LaneWaypoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneWaypoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double s = 2;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.PointENU pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneWaypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.LaneWaypoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneWaypoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneWaypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.LaneWaypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.LaneWaypoint)
    MergeFrom(*source);
  }
}

void LaneWaypoint::MergeFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneWaypoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_pose()) {
      mutable_pose()->::apollo::common::PointENU::MergeFrom(from.pose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneWaypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneWaypoint::CopyFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneWaypoint::IsInitialized() const {

  return true;
}

void LaneWaypoint::Swap(LaneWaypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneWaypoint::InternalSwap(LaneWaypoint* other) {
  id_.Swap(&other->id_);
  std::swap(s_, other->s_);
  std::swap(pose_, other->pose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneWaypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneWaypoint_descriptor_;
  metadata.reflection = LaneWaypoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneWaypoint

// optional string id = 1;
bool LaneWaypoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneWaypoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneWaypoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneWaypoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& LaneWaypoint::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaneWaypoint::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.LaneWaypoint.id)
}
 void LaneWaypoint::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.LaneWaypoint.id)
}
 void LaneWaypoint::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.LaneWaypoint.id)
}
 ::std::string* LaneWaypoint::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneWaypoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LaneWaypoint::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneWaypoint.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaneWaypoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneWaypoint.id)
}

// optional double s = 2;
bool LaneWaypoint::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneWaypoint::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneWaypoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneWaypoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double LaneWaypoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.s)
  return s_;
}
 void LaneWaypoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.LaneWaypoint.s)
}

// optional .apollo.common.PointENU pose = 3;
bool LaneWaypoint::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneWaypoint::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneWaypoint::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneWaypoint::clear_pose() {
  if (pose_ != NULL) pose_->::apollo::common::PointENU::Clear();
  clear_has_pose();
}
const ::apollo::common::PointENU& LaneWaypoint::pose() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::apollo::common::PointENU* LaneWaypoint::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneWaypoint.pose)
  return pose_;
}
::apollo::common::PointENU* LaneWaypoint::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneWaypoint.pose)
  clear_has_pose();
  ::apollo::common::PointENU* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LaneWaypoint::set_allocated_pose(::apollo::common::PointENU* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneWaypoint.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSegment::kIdFieldNumber;
const int LaneSegment::kStartSFieldNumber;
const int LaneSegment::kEndSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSegment::LaneSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.LaneSegment)
}

void LaneSegment::InitAsDefaultInstance() {
}

LaneSegment::LaneSegment(const LaneSegment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneSegment)
}

void LaneSegment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_s_ = 0;
  end_s_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneSegment)
  SharedDtor();
}

void LaneSegment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LaneSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneSegment_descriptor_;
}

const LaneSegment& LaneSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_2eproto();
  return *default_instance_;
}

LaneSegment* LaneSegment::default_instance_ = NULL;

LaneSegment* LaneSegment::New(::google::protobuf::Arena* arena) const {
  LaneSegment* n = new LaneSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneSegment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LaneSegment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LaneSegment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(start_s_, end_s_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.LaneSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.LaneSegment.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_start_s;
        break;
      }

      // optional double start_s = 2;
      case 2: {
        if (tag == 17) {
         parse_start_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
          set_has_start_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_end_s;
        break;
      }

      // optional double end_s = 3;
      case 3: {
        if (tag == 25) {
         parse_end_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
          set_has_end_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.LaneSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.LaneSegment)
  return false;
#undef DO_
}

void LaneSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.LaneSegment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneSegment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_s = 2;
  if (has_start_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3;
  if (has_end_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.LaneSegment)
}

::google::protobuf::uint8* LaneSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneSegment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneSegment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_s = 2;
  if (has_start_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3;
  if (has_end_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneSegment)
  return target;
}

int LaneSegment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneSegment)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double start_s = 2;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.LaneSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneSegment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.LaneSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_start_s()) {
      set_start_s(from.start_s());
    }
    if (from.has_end_s()) {
      set_end_s(from.end_s());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {

  return true;
}

void LaneSegment::Swap(LaneSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSegment::InternalSwap(LaneSegment* other) {
  id_.Swap(&other->id_);
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneSegment_descriptor_;
  metadata.reflection = LaneSegment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneSegment

// optional string id = 1;
bool LaneSegment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneSegment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneSegment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneSegment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& LaneSegment::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaneSegment::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.id)
}
 void LaneSegment::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.LaneSegment.id)
}
 void LaneSegment::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.LaneSegment.id)
}
 ::std::string* LaneSegment::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneSegment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LaneSegment::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneSegment.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaneSegment::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneSegment.id)
}

// optional double start_s = 2;
bool LaneSegment::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneSegment::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneSegment::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneSegment::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
 double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.start_s)
  return start_s_;
}
 void LaneSegment::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.start_s)
}

// optional double end_s = 3;
bool LaneSegment::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneSegment::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneSegment::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneSegment::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
 double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.end_s)
  return end_s_;
}
 void LaneSegment::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.end_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingRequest::kHeaderFieldNumber;
const int RoutingRequest::kWaypointFieldNumber;
const int RoutingRequest::kBlacklistedLaneFieldNumber;
const int RoutingRequest::kBlacklistedRoadFieldNumber;
const int RoutingRequest::kBroadcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingRequest::RoutingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingRequest)
}

void RoutingRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

RoutingRequest::RoutingRequest(const RoutingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingRequest)
}

void RoutingRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  broadcast_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutingRequest::~RoutingRequest() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingRequest)
  SharedDtor();
}

void RoutingRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void RoutingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingRequest_descriptor_;
}

const RoutingRequest& RoutingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_2eproto();
  return *default_instance_;
}

RoutingRequest* RoutingRequest::default_instance_ = NULL;

RoutingRequest* RoutingRequest::New(::google::protobuf::Arena* arena) const {
  RoutingRequest* n = new RoutingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingRequest)
  if (_has_bits_[0 / 32] & 17u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    broadcast_ = true;
  }
  waypoint_.Clear();
  blacklisted_lane_.Clear();
  blacklisted_road_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoutingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoutingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_waypoint;
        break;
      }

      // repeated .apollo.routing.LaneWaypoint waypoint = 2;
      case 2: {
        if (tag == 18) {
         parse_waypoint:
          DO_(input->IncrementRecursionDepth());
         parse_loop_waypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_waypoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_waypoint;
        if (input->ExpectTag(26)) goto parse_loop_blacklisted_lane;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_blacklisted_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blacklisted_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_blacklisted_lane;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_blacklisted_road;
        break;
      }

      // repeated string blacklisted_road = 4;
      case 4: {
        if (tag == 34) {
         parse_blacklisted_road:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklisted_road()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blacklisted_road(this->blacklisted_road_size() - 1).data(),
            this->blacklisted_road(this->blacklisted_road_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.RoutingRequest.blacklisted_road");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_blacklisted_road;
        if (input->ExpectTag(40)) goto parse_broadcast;
        break;
      }

      // optional bool broadcast = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_)));
          set_has_broadcast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoutingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoutingRequest)
  return false;
#undef DO_
}

void RoutingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoutingRequest)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0, n = this->waypoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waypoint(i), output);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0, n = this->blacklisted_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blacklisted_lane(i), output);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0; i < this->blacklisted_road_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklisted_road(i).data(), this->blacklisted_road(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoutingRequest.blacklisted_road");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->blacklisted_road(i), output);
  }

  // optional bool broadcast = 5 [default = true];
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->broadcast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoutingRequest)
}

::google::protobuf::uint8* RoutingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingRequest)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0, n = this->waypoint_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->waypoint(i), false, target);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0, n = this->blacklisted_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->blacklisted_lane(i), false, target);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0; i < this->blacklisted_road_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklisted_road(i).data(), this->blacklisted_road(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoutingRequest.blacklisted_road");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->blacklisted_road(i), target);
  }

  // optional bool broadcast = 5 [default = true];
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->broadcast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingRequest)
  return target;
}

int RoutingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 17u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional bool broadcast = 5 [default = true];
    if (has_broadcast()) {
      total_size += 1 + 1;
    }

  }
  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  total_size += 1 * this->waypoint_size();
  for (int i = 0; i < this->waypoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waypoint(i));
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  total_size += 1 * this->blacklisted_lane_size();
  for (int i = 0; i < this->blacklisted_lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blacklisted_lane(i));
  }

  // repeated string blacklisted_road = 4;
  total_size += 1 * this->blacklisted_road_size();
  for (int i = 0; i < this->blacklisted_road_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklisted_road(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoutingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingRequest)
    MergeFrom(*source);
  }
}

void RoutingRequest::MergeFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  waypoint_.MergeFrom(from.waypoint_);
  blacklisted_lane_.MergeFrom(from.blacklisted_lane_);
  blacklisted_road_.MergeFrom(from.blacklisted_road_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoutingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingRequest::CopyFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRequest::IsInitialized() const {

  return true;
}

void RoutingRequest::Swap(RoutingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingRequest::InternalSwap(RoutingRequest* other) {
  std::swap(header_, other->header_);
  waypoint_.UnsafeArenaSwap(&other->waypoint_);
  blacklisted_lane_.UnsafeArenaSwap(&other->blacklisted_lane_);
  blacklisted_road_.UnsafeArenaSwap(&other->blacklisted_road_);
  std::swap(broadcast_, other->broadcast_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutingRequest_descriptor_;
  metadata.reflection = RoutingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutingRequest

// optional .apollo.common.Header header = 1;
bool RoutingRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoutingRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RoutingRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingRequest::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& RoutingRequest::header() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* RoutingRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.header)
  return header_;
}
::apollo::common::Header* RoutingRequest::release_header() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingRequest.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RoutingRequest::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingRequest.header)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
int RoutingRequest::waypoint_size() const {
  return waypoint_.size();
}
void RoutingRequest::clear_waypoint() {
  waypoint_.Clear();
}
const ::apollo::routing::LaneWaypoint& RoutingRequest::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.waypoint)
  return waypoint_.Get(index);
}
::apollo::routing::LaneWaypoint* RoutingRequest::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.waypoint)
  return waypoint_.Mutable(index);
}
::apollo::routing::LaneWaypoint* RoutingRequest::add_waypoint() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.waypoint)
  return waypoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
RoutingRequest::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.waypoint)
  return &waypoint_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
RoutingRequest::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.waypoint)
  return waypoint_;
}

// repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
int RoutingRequest::blacklisted_lane_size() const {
  return blacklisted_lane_.size();
}
void RoutingRequest::clear_blacklisted_lane() {
  blacklisted_lane_.Clear();
}
const ::apollo::routing::LaneSegment& RoutingRequest::blacklisted_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Get(index);
}
::apollo::routing::LaneSegment* RoutingRequest::mutable_blacklisted_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Mutable(index);
}
::apollo::routing::LaneSegment* RoutingRequest::add_blacklisted_lane() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >*
RoutingRequest::mutable_blacklisted_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.blacklisted_lane)
  return &blacklisted_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >&
RoutingRequest::blacklisted_lane() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_;
}

// repeated string blacklisted_road = 4;
int RoutingRequest::blacklisted_road_size() const {
  return blacklisted_road_.size();
}
void RoutingRequest::clear_blacklisted_road() {
  blacklisted_road_.Clear();
}
 const ::std::string& RoutingRequest::blacklisted_road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Get(index);
}
 ::std::string* RoutingRequest::mutable_blacklisted_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Mutable(index);
}
 void RoutingRequest::set_blacklisted_road(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.blacklisted_road)
  blacklisted_road_.Mutable(index)->assign(value);
}
 void RoutingRequest::set_blacklisted_road(int index, const char* value) {
  blacklisted_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.routing.RoutingRequest.blacklisted_road)
}
 void RoutingRequest::set_blacklisted_road(int index, const char* value, size_t size) {
  blacklisted_road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.RoutingRequest.blacklisted_road)
}
 ::std::string* RoutingRequest::add_blacklisted_road() {
  // @@protoc_insertion_point(field_add_mutable:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Add();
}
 void RoutingRequest::add_blacklisted_road(const ::std::string& value) {
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_road)
}
 void RoutingRequest::add_blacklisted_road(const char* value) {
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.routing.RoutingRequest.blacklisted_road)
}
 void RoutingRequest::add_blacklisted_road(const char* value, size_t size) {
  blacklisted_road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.routing.RoutingRequest.blacklisted_road)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RoutingRequest::blacklisted_road() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RoutingRequest::mutable_blacklisted_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.blacklisted_road)
  return &blacklisted_road_;
}

// optional bool broadcast = 5 [default = true];
bool RoutingRequest::has_broadcast() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoutingRequest::set_has_broadcast() {
  _has_bits_[0] |= 0x00000010u;
}
void RoutingRequest::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoutingRequest::clear_broadcast() {
  broadcast_ = true;
  clear_has_broadcast();
}
 bool RoutingRequest::broadcast() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.broadcast)
  return broadcast_;
}
 void RoutingRequest::set_broadcast(bool value) {
  set_has_broadcast();
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.broadcast)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurement::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurement::Measurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Measurement)
}

void Measurement::InitAsDefaultInstance() {
}

Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Measurement)
}

void Measurement::SharedCtor() {
  _cached_size_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:apollo.routing.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Measurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Measurement_descriptor_;
}

const Measurement& Measurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_2eproto();
  return *default_instance_;
}

Measurement* Measurement::default_instance_ = NULL;

Measurement* Measurement::New(::google::protobuf::Arena* arena) const {
  Measurement* n = new Measurement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Measurement)
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Measurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Measurement)
  return false;
#undef DO_
}

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Measurement)
  // optional double distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Measurement)
}

::google::protobuf::uint8* Measurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Measurement)
  // optional double distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Measurement)
  return target;
}

int Measurement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Measurement)
  int total_size = 0;

  // optional double distance = 1;
  if (has_distance()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Measurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Measurement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Measurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Measurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Measurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {

  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measurement::InternalSwap(Measurement* other) {
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Measurement_descriptor_;
  metadata.reflection = Measurement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Measurement

// optional double distance = 1;
bool Measurement::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Measurement::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void Measurement::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void Measurement::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 double Measurement::distance() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Measurement.distance)
  return distance_;
}
 void Measurement::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Measurement.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Passage::kSegmentFieldNumber;
const int Passage::kCanExitFieldNumber;
const int Passage::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Passage::Passage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Passage)
}

void Passage::InitAsDefaultInstance() {
}

Passage::Passage(const Passage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Passage)
}

void Passage::SharedCtor() {
  _cached_size_ = 0;
  can_exit_ = false;
  change_lane_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:apollo.routing.Passage)
  SharedDtor();
}

void Passage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Passage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Passage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Passage_descriptor_;
}

const Passage& Passage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_2eproto();
  return *default_instance_;
}

Passage* Passage::default_instance_ = NULL;

Passage* Passage::New(::google::protobuf::Arena* arena) const {
  Passage* n = new Passage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Passage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Passage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Passage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(can_exit_, change_lane_type_);

#undef ZR_HELPER_
#undef ZR_

  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Passage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Passage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.routing.LaneSegment segment = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_segment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_can_exit;
        break;
      }

      // optional bool can_exit = 2;
      case 2: {
        if (tag == 16) {
         parse_can_exit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_exit_)));
          set_has_can_exit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_change_lane_type;
        break;
      }

      // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
      case 3: {
        if (tag == 24) {
         parse_change_lane_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::apollo::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Passage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Passage)
  return false;
#undef DO_
}

void Passage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Passage)
  // repeated .apollo.routing.LaneSegment segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment(i), output);
  }

  // optional bool can_exit = 2;
  if (has_can_exit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_exit(), output);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (has_change_lane_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Passage)
}

::google::protobuf::uint8* Passage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Passage)
  // repeated .apollo.routing.LaneSegment segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segment(i), false, target);
  }

  // optional bool can_exit = 2;
  if (has_can_exit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_exit(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (has_change_lane_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Passage)
  return target;
}

int Passage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Passage)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional bool can_exit = 2;
    if (has_can_exit()) {
      total_size += 1 + 1;
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
    if (has_change_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
    }

  }
  // repeated .apollo.routing.LaneSegment segment = 1;
  total_size += 1 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Passage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Passage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Passage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Passage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Passage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Passage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  segment_.MergeFrom(from.segment_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_can_exit()) {
      set_can_exit(from.can_exit());
    }
    if (from.has_change_lane_type()) {
      set_change_lane_type(from.change_lane_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Passage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {

  return true;
}

void Passage::Swap(Passage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Passage::InternalSwap(Passage* other) {
  segment_.UnsafeArenaSwap(&other->segment_);
  std::swap(can_exit_, other->can_exit_);
  std::swap(change_lane_type_, other->change_lane_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Passage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Passage_descriptor_;
  metadata.reflection = Passage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Passage

// repeated .apollo.routing.LaneSegment segment = 1;
int Passage::segment_size() const {
  return segment_.size();
}
void Passage::clear_segment() {
  segment_.Clear();
}
const ::apollo::routing::LaneSegment& Passage::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.segment)
  return segment_.Get(index);
}
::apollo::routing::LaneSegment* Passage::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Passage.segment)
  return segment_.Mutable(index);
}
::apollo::routing::LaneSegment* Passage::add_segment() {
  // @@protoc_insertion_point(field_add:apollo.routing.Passage.segment)
  return segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >*
Passage::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Passage.segment)
  return &segment_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >&
Passage::segment() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Passage.segment)
  return segment_;
}

// optional bool can_exit = 2;
bool Passage::has_can_exit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Passage::set_has_can_exit() {
  _has_bits_[0] |= 0x00000002u;
}
void Passage::clear_has_can_exit() {
  _has_bits_[0] &= ~0x00000002u;
}
void Passage::clear_can_exit() {
  can_exit_ = false;
  clear_has_can_exit();
}
 bool Passage::can_exit() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.can_exit)
  return can_exit_;
}
 void Passage::set_can_exit(bool value) {
  set_has_can_exit();
  can_exit_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Passage.can_exit)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
bool Passage::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Passage::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Passage::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Passage::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
 ::apollo::routing::ChangeLaneType Passage::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.change_lane_type)
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
 void Passage::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Passage.change_lane_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSegment::kIdFieldNumber;
const int RoadSegment::kPassageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSegment::RoadSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoadSegment)
}

void RoadSegment::InitAsDefaultInstance() {
}

RoadSegment::RoadSegment(const RoadSegment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoadSegment)
}

void RoadSegment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadSegment::~RoadSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoadSegment)
  SharedDtor();
}

void RoadSegment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoadSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadSegment_descriptor_;
}

const RoadSegment& RoadSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_2eproto();
  return *default_instance_;
}

RoadSegment* RoadSegment::default_instance_ = NULL;

RoadSegment* RoadSegment::New(::google::protobuf::Arena* arena) const {
  RoadSegment* n = new RoadSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoadSegment)
  if (has_id()) {
    id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  passage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoadSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoadSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.RoadSegment.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passage;
        break;
      }

      // repeated .apollo.routing.Passage passage = 2;
      case 2: {
        if (tag == 18) {
         parse_passage:
          DO_(input->IncrementRecursionDepth());
         parse_loop_passage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_passage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_passage;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoadSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoadSegment)
  return false;
#undef DO_
}

void RoadSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoadSegment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoadSegment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .apollo.routing.Passage passage = 2;
  for (unsigned int i = 0, n = this->passage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->passage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoadSegment)
}

::google::protobuf::uint8* RoadSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoadSegment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoadSegment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .apollo.routing.Passage passage = 2;
  for (unsigned int i = 0, n = this->passage_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->passage(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoadSegment)
  return target;
}

int RoadSegment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoadSegment)
  int total_size = 0;

  // optional string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // repeated .apollo.routing.Passage passage = 2;
  total_size += 1 * this->passage_size();
  for (int i = 0; i < this->passage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passage(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoadSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoadSegment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoadSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoadSegment)
    MergeFrom(*source);
  }
}

void RoadSegment::MergeFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoadSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  passage_.MergeFrom(from.passage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoadSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSegment::CopyFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegment::IsInitialized() const {

  return true;
}

void RoadSegment::Swap(RoadSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSegment::InternalSwap(RoadSegment* other) {
  id_.Swap(&other->id_);
  passage_.UnsafeArenaSwap(&other->passage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadSegment_descriptor_;
  metadata.reflection = RoadSegment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadSegment

// optional string id = 1;
bool RoadSegment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadSegment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadSegment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadSegment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& RoadSegment::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoadSegment.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoadSegment::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoadSegment.id)
}
 void RoadSegment::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.RoadSegment.id)
}
 void RoadSegment::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.RoadSegment.id)
}
 ::std::string* RoadSegment::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoadSegment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoadSegment::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoadSegment.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoadSegment::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoadSegment.id)
}

// repeated .apollo.routing.Passage passage = 2;
int RoadSegment::passage_size() const {
  return passage_.size();
}
void RoadSegment::clear_passage() {
  passage_.Clear();
}
const ::apollo::routing::Passage& RoadSegment::passage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoadSegment.passage)
  return passage_.Get(index);
}
::apollo::routing::Passage* RoadSegment::mutable_passage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoadSegment.passage)
  return passage_.Mutable(index);
}
::apollo::routing::Passage* RoadSegment::add_passage() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoadSegment.passage)
  return passage_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::Passage >*
RoadSegment::mutable_passage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoadSegment.passage)
  return &passage_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Passage >&
RoadSegment::passage() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoadSegment.passage)
  return passage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingResponse::kHeaderFieldNumber;
const int RoutingResponse::kRoadFieldNumber;
const int RoutingResponse::kMeasurementFieldNumber;
const int RoutingResponse::kRoutingRequestFieldNumber;
const int RoutingResponse::kMapVersionFieldNumber;
const int RoutingResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingResponse::RoutingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingResponse)
}

void RoutingResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  measurement_ = const_cast< ::apollo::routing::Measurement*>(&::apollo::routing::Measurement::default_instance());
  routing_request_ = const_cast< ::apollo::routing::RoutingRequest*>(&::apollo::routing::RoutingRequest::default_instance());
  status_ = const_cast< ::apollo::common::StatusPb*>(&::apollo::common::StatusPb::default_instance());
}

RoutingResponse::RoutingResponse(const RoutingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingResponse)
}

void RoutingResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  measurement_ = NULL;
  routing_request_ = NULL;
  map_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutingResponse::~RoutingResponse() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingResponse)
  SharedDtor();
}

void RoutingResponse::SharedDtor() {
  map_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
    delete measurement_;
    delete routing_request_;
    delete status_;
  }
}

void RoutingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingResponse_descriptor_;
}

const RoutingResponse& RoutingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routing_2frouting_2eproto();
  return *default_instance_;
}

RoutingResponse* RoutingResponse::default_instance_ = NULL;

RoutingResponse* RoutingResponse::New(::google::protobuf::Arena* arena) const {
  RoutingResponse* n = new RoutingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingResponse)
  if (_has_bits_[0 / 32] & 61u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_measurement()) {
      if (measurement_ != NULL) measurement_->::apollo::routing::Measurement::Clear();
    }
    if (has_routing_request()) {
      if (routing_request_ != NULL) routing_request_->::apollo::routing::RoutingRequest::Clear();
    }
    if (has_map_version()) {
      map_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      if (status_ != NULL) status_->::apollo::common::StatusPb::Clear();
    }
  }
  road_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoutingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoutingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_road;
        break;
      }

      // repeated .apollo.routing.RoadSegment road = 2;
      case 2: {
        if (tag == 18) {
         parse_road:
          DO_(input->IncrementRecursionDepth());
         parse_loop_road:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_road;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_measurement;
        break;
      }

      // optional .apollo.routing.Measurement measurement = 3;
      case 3: {
        if (tag == 26) {
         parse_measurement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measurement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_routing_request;
        break;
      }

      // optional .apollo.routing.RoutingRequest routing_request = 4;
      case 4: {
        if (tag == 34) {
         parse_routing_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map_version;
        break;
      }

      // optional bytes map_version = 5;
      case 5: {
        if (tag == 42) {
         parse_map_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_status;
        break;
      }

      // optional .apollo.common.StatusPb status = 6;
      case 6: {
        if (tag == 50) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoutingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoutingResponse)
  return false;
#undef DO_
}

void RoutingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoutingResponse)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .apollo.routing.RoadSegment road = 2;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road(i), output);
  }

  // optional .apollo.routing.Measurement measurement = 3;
  if (has_measurement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->measurement_, output);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  if (has_routing_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->routing_request_, output);
  }

  // optional bytes map_version = 5;
  if (has_map_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->map_version(), output);
  }

  // optional .apollo.common.StatusPb status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoutingResponse)
}

::google::protobuf::uint8* RoutingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingResponse)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .apollo.routing.RoadSegment road = 2;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->road(i), false, target);
  }

  // optional .apollo.routing.Measurement measurement = 3;
  if (has_measurement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->measurement_, false, target);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  if (has_routing_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->routing_request_, false, target);
  }

  // optional bytes map_version = 5;
  if (has_map_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->map_version(), target);
  }

  // optional .apollo.common.StatusPb status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingResponse)
  return target;
}

int RoutingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 61u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.routing.Measurement measurement = 3;
    if (has_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->measurement_);
    }

    // optional .apollo.routing.RoutingRequest routing_request = 4;
    if (has_routing_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_request_);
    }

    // optional bytes map_version = 5;
    if (has_map_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_version());
    }

    // optional .apollo.common.StatusPb status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

  }
  // repeated .apollo.routing.RoadSegment road = 2;
  total_size += 1 * this->road_size();
  for (int i = 0; i < this->road_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->road(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoutingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingResponse)
    MergeFrom(*source);
  }
}

void RoutingResponse::MergeFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  road_.MergeFrom(from.road_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_measurement()) {
      mutable_measurement()->::apollo::routing::Measurement::MergeFrom(from.measurement());
    }
    if (from.has_routing_request()) {
      mutable_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from.routing_request());
    }
    if (from.has_map_version()) {
      set_has_map_version();
      map_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_version_);
    }
    if (from.has_status()) {
      mutable_status()->::apollo::common::StatusPb::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoutingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingResponse::CopyFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponse::IsInitialized() const {

  return true;
}

void RoutingResponse::Swap(RoutingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingResponse::InternalSwap(RoutingResponse* other) {
  std::swap(header_, other->header_);
  road_.UnsafeArenaSwap(&other->road_);
  std::swap(measurement_, other->measurement_);
  std::swap(routing_request_, other->routing_request_);
  map_version_.Swap(&other->map_version_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutingResponse_descriptor_;
  metadata.reflection = RoutingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutingResponse

// optional .apollo.common.Header header = 1;
bool RoutingResponse::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoutingResponse::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RoutingResponse::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingResponse::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& RoutingResponse::header() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* RoutingResponse::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.header)
  return header_;
}
::apollo::common::Header* RoutingResponse::release_header() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.header)
}

// repeated .apollo.routing.RoadSegment road = 2;
int RoutingResponse::road_size() const {
  return road_.size();
}
void RoutingResponse::clear_road() {
  road_.Clear();
}
const ::apollo::routing::RoadSegment& RoutingResponse::road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.road)
  return road_.Get(index);
}
::apollo::routing::RoadSegment* RoutingResponse::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.road)
  return road_.Mutable(index);
}
::apollo::routing::RoadSegment* RoutingResponse::add_road() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingResponse.road)
  return road_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::RoadSegment >*
RoutingResponse::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingResponse.road)
  return &road_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::RoadSegment >&
RoutingResponse::road() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingResponse.road)
  return road_;
}

// optional .apollo.routing.Measurement measurement = 3;
bool RoutingResponse::has_measurement() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoutingResponse::set_has_measurement() {
  _has_bits_[0] |= 0x00000004u;
}
void RoutingResponse::clear_has_measurement() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoutingResponse::clear_measurement() {
  if (measurement_ != NULL) measurement_->::apollo::routing::Measurement::Clear();
  clear_has_measurement();
}
const ::apollo::routing::Measurement& RoutingResponse::measurement() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.measurement)
  return measurement_ != NULL ? *measurement_ : *default_instance_->measurement_;
}
::apollo::routing::Measurement* RoutingResponse::mutable_measurement() {
  set_has_measurement();
  if (measurement_ == NULL) {
    measurement_ = new ::apollo::routing::Measurement;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.measurement)
  return measurement_;
}
::apollo::routing::Measurement* RoutingResponse::release_measurement() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.measurement)
  clear_has_measurement();
  ::apollo::routing::Measurement* temp = measurement_;
  measurement_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_measurement(::apollo::routing::Measurement* measurement) {
  delete measurement_;
  measurement_ = measurement;
  if (measurement) {
    set_has_measurement();
  } else {
    clear_has_measurement();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.measurement)
}

// optional .apollo.routing.RoutingRequest routing_request = 4;
bool RoutingResponse::has_routing_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoutingResponse::set_has_routing_request() {
  _has_bits_[0] |= 0x00000008u;
}
void RoutingResponse::clear_has_routing_request() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoutingResponse::clear_routing_request() {
  if (routing_request_ != NULL) routing_request_->::apollo::routing::RoutingRequest::Clear();
  clear_has_routing_request();
}
const ::apollo::routing::RoutingRequest& RoutingResponse::routing_request() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.routing_request)
  return routing_request_ != NULL ? *routing_request_ : *default_instance_->routing_request_;
}
::apollo::routing::RoutingRequest* RoutingResponse::mutable_routing_request() {
  set_has_routing_request();
  if (routing_request_ == NULL) {
    routing_request_ = new ::apollo::routing::RoutingRequest;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.routing_request)
  return routing_request_;
}
::apollo::routing::RoutingRequest* RoutingResponse::release_routing_request() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.routing_request)
  clear_has_routing_request();
  ::apollo::routing::RoutingRequest* temp = routing_request_;
  routing_request_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request) {
  delete routing_request_;
  routing_request_ = routing_request;
  if (routing_request) {
    set_has_routing_request();
  } else {
    clear_has_routing_request();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.routing_request)
}

// optional bytes map_version = 5;
bool RoutingResponse::has_map_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoutingResponse::set_has_map_version() {
  _has_bits_[0] |= 0x00000010u;
}
void RoutingResponse::clear_has_map_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoutingResponse::clear_map_version() {
  map_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_version();
}
 const ::std::string& RoutingResponse::map_version() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.map_version)
  return map_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoutingResponse::set_map_version(const ::std::string& value) {
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingResponse.map_version)
}
 void RoutingResponse::set_map_version(const char* value) {
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.RoutingResponse.map_version)
}
 void RoutingResponse::set_map_version(const void* value, size_t size) {
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.RoutingResponse.map_version)
}
 ::std::string* RoutingResponse::mutable_map_version() {
  set_has_map_version();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.map_version)
  return map_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoutingResponse::release_map_version() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.map_version)
  clear_has_map_version();
  return map_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoutingResponse::set_allocated_map_version(::std::string* map_version) {
  if (map_version != NULL) {
    set_has_map_version();
  } else {
    clear_has_map_version();
  }
  map_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_version);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.map_version)
}

// optional .apollo.common.StatusPb status = 6;
bool RoutingResponse::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoutingResponse::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void RoutingResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoutingResponse::clear_status() {
  if (status_ != NULL) status_->::apollo::common::StatusPb::Clear();
  clear_has_status();
}
const ::apollo::common::StatusPb& RoutingResponse::status() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::apollo::common::StatusPb* RoutingResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::apollo::common::StatusPb;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.status)
  return status_;
}
::apollo::common::StatusPb* RoutingResponse::release_status() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.status)
  clear_has_status();
  ::apollo::common::StatusPb* temp = status_;
  status_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_status(::apollo::common::StatusPb* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
