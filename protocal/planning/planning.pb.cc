// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/planning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning/planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

namespace {

const ::google::protobuf::Descriptor* ADCTrajectoryPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCTrajectoryPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCPathPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCPathPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCSignals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCSignals_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatencyStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatencyStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCTrajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCTrajectory_CriticalRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCTrajectory_CriticalRegion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2fplanning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_planning_2fplanning_2eproto() {
  protobuf_AddDesc_planning_2fplanning_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning/planning.proto");
  GOOGLE_CHECK(file != NULL);
  ADCTrajectoryPoint_descriptor_ = file->message_type(0);
  static const int ADCTrajectoryPoint_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, acceleration_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, curvature_change_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, relative_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, accumulated_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, l_),
  };
  ADCTrajectoryPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCTrajectoryPoint_descriptor_,
      ADCTrajectoryPoint::default_instance_,
      ADCTrajectoryPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(ADCTrajectoryPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _internal_metadata_),
      -1);
  ADCPathPoint_descriptor_ = file->message_type(1);
  static const int ADCPathPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, heading_),
  };
  ADCPathPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCPathPoint_descriptor_,
      ADCPathPoint::default_instance_,
      ADCPathPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(ADCPathPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, _internal_metadata_),
      -1);
  ADCSignals_descriptor_ = file->message_type(2);
  static const int ADCSignals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, signal_),
  };
  ADCSignals_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCSignals_descriptor_,
      ADCSignals::default_instance_,
      ADCSignals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _has_bits_[0]),
      -1,
      -1,
      sizeof(ADCSignals),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _internal_metadata_),
      -1);
  ADCSignals_SignalType_descriptor_ = ADCSignals_descriptor_->enum_type(0);
  EStop_descriptor_ = file->message_type(3);
  static const int EStop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, is_estop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, reason_),
  };
  EStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EStop_descriptor_,
      EStop::default_instance_,
      EStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _has_bits_[0]),
      -1,
      -1,
      sizeof(EStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _internal_metadata_),
      -1);
  TaskStats_descriptor_ = file->message_type(4);
  static const int TaskStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, time_ms_),
  };
  TaskStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskStats_descriptor_,
      TaskStats::default_instance_,
      TaskStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(TaskStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, _internal_metadata_),
      -1);
  LatencyStats_descriptor_ = file->message_type(5);
  static const int LatencyStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, total_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, task_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, init_frame_time_ms_),
  };
  LatencyStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LatencyStats_descriptor_,
      LatencyStats::default_instance_,
      LatencyStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(LatencyStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _internal_metadata_),
      -1);
  ADCTrajectory_descriptor_ = file->message_type(6);
  static const int ADCTrajectory_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, trajectory_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, estop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, path_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, is_replan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, latency_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, routing_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, adc_path_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, adc_trajectory_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, right_of_way_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, engage_advice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, critical_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, trajectory_type_),
  };
  ADCTrajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCTrajectory_descriptor_,
      ADCTrajectory::default_instance_,
      ADCTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _has_bits_[0]),
      -1,
      -1,
      sizeof(ADCTrajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _internal_metadata_),
      -1);
  ADCTrajectory_CriticalRegion_descriptor_ = ADCTrajectory_descriptor_->nested_type(0);
  static const int ADCTrajectory_CriticalRegion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory_CriticalRegion, region_),
  };
  ADCTrajectory_CriticalRegion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADCTrajectory_CriticalRegion_descriptor_,
      ADCTrajectory_CriticalRegion::default_instance_,
      ADCTrajectory_CriticalRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory_CriticalRegion, _has_bits_[0]),
      -1,
      -1,
      sizeof(ADCTrajectory_CriticalRegion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory_CriticalRegion, _internal_metadata_),
      -1);
  ADCTrajectory_RightOfWayStatus_descriptor_ = ADCTrajectory_descriptor_->enum_type(0);
  ADCTrajectory_TrajectoryType_descriptor_ = ADCTrajectory_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2fplanning_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCTrajectoryPoint_descriptor_, &ADCTrajectoryPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCPathPoint_descriptor_, &ADCPathPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCSignals_descriptor_, &ADCSignals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EStop_descriptor_, &EStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskStats_descriptor_, &TaskStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LatencyStats_descriptor_, &LatencyStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCTrajectory_descriptor_, &ADCTrajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADCTrajectory_CriticalRegion_descriptor_, &ADCTrajectory_CriticalRegion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2fplanning_2eproto() {
  delete ADCTrajectoryPoint::default_instance_;
  delete ADCTrajectoryPoint_reflection_;
  delete ADCPathPoint::default_instance_;
  delete ADCPathPoint_reflection_;
  delete ADCSignals::default_instance_;
  delete ADCSignals_reflection_;
  delete EStop::default_instance_;
  delete EStop_reflection_;
  delete TaskStats::default_instance_;
  delete TaskStats_reflection_;
  delete LatencyStats::default_instance_;
  delete LatencyStats_reflection_;
  delete ADCTrajectory::default_instance_;
  delete ADCTrajectory_reflection_;
  delete ADCTrajectory_CriticalRegion::default_instance_;
  delete ADCTrajectory_CriticalRegion_reflection_;
}

void protobuf_AddDesc_planning_2fplanning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_planning_2fplanning_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::canbus::protobuf_AddDesc_canbus_2fchassis_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fdrive_5fstate_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fvehicle_5fsignal_2eproto();
  ::apollo::hdmap::protobuf_AddDesc_map_2fmap_5fid_2eproto();
  ::apollo::planning::protobuf_AddDesc_planning_2fdecision_2eproto();
  ::apollo::planning_internal::protobuf_AddDesc_planning_2fplanning_5finternal_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027planning/planning.proto\022\017apollo.planni"
    "ng\032\024canbus/chassis.proto\032\030common/drive_s"
    "tate.proto\032\025common/geometry.proto\032\023commo"
    "n/header.proto\032\026common/pnc_point.proto\032\033"
    "common/vehicle_signal.proto\032\020map/map_id."
    "proto\032\027planning/decision.proto\032 planning"
    "/planning_internal.proto\"\351\001\n\022ADCTrajecto"
    "ryPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
    "\022\r\n\005speed\030\006 \001(\001\022\026\n\016acceleration_s\030\007 \001(\001\022"
    "\021\n\tcurvature\030\010 \001(\001\022\035\n\025curvature_change_r"
    "ate\030\t \001(\001\022\025\n\rrelative_time\030\n \001(\001\022\r\n\005thet"
    "a\030\013 \001(\001\022\025\n\raccumulated_s\030\014 \001(\001\022\r\n\001s\030\004 \001("
    "\001B\002\030\001\022\r\n\001l\030\005 \001(\001B\002\030\001\"S\n\014ADCPathPoint\022\t\n\001"
    "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\021\n\tcurvatu"
    "re\030\004 \001(\001\022\017\n\007heading\030\005 \001(\001\"\276\001\n\nADCSignals"
    "\0226\n\006signal\030\001 \003(\0162&.apollo.planning.ADCSi"
    "gnals.SignalType\"x\n\nSignalType\022\r\n\tLEFT_T"
    "URN\020\001\022\016\n\nRIGHT_TURN\020\002\022\022\n\016LOW_BEAM_LIGHT\020"
    "\003\022\023\n\017HIGH_BEAM_LIGHT\020\004\022\r\n\tFOG_LIGHT\020\005\022\023\n"
    "\017EMERGENCY_LIGHT\020\006\")\n\005EStop\022\020\n\010is_estop\030"
    "\001 \001(\010\022\016\n\006reason\030\002 \001(\t\"*\n\tTaskStats\022\014\n\004na"
    "me\030\001 \001(\t\022\017\n\007time_ms\030\002 \001(\001\"q\n\014LatencyStat"
    "s\022\025\n\rtotal_time_ms\030\001 \001(\001\022.\n\ntask_stats\030\002"
    " \003(\0132\032.apollo.planning.TaskStats\022\032\n\022init"
    "_frame_time_ms\030\003 \001(\001\"\300\t\n\rADCTrajectory\022%"
    "\n\006header\030\001 \001(\0132\025.apollo.common.Header\022\031\n"
    "\021total_path_length\030\002 \001(\001\022\027\n\017total_path_t"
    "ime\030\003 \001(\001\0228\n\020trajectory_point\030\014 \003(\0132\036.ap"
    "ollo.common.TrajectoryPoint\022%\n\005estop\030\006 \001"
    "(\0132\026.apollo.planning.EStop\022,\n\npath_point"
    "\030\r \003(\0132\030.apollo.common.PathPoint\022\030\n\tis_r"
    "eplan\030\t \001(\010:\005false\0221\n\004gear\030\n \001(\0162#.apoll"
    "o.canbus.Chassis.GearPosition\0221\n\010decisio"
    "n\030\016 \001(\0132\037.apollo.planning.DecisionResult"
    "\0224\n\rlatency_stats\030\017 \001(\0132\035.apollo.plannin"
    "g.LatencyStats\022-\n\016routing_header\030\020 \001(\0132\025"
    ".apollo.common.Header\022.\n\005debug\030\010 \001(\0132\037.a"
    "pollo.planning_internal.Debug\0229\n\016adc_pat"
    "h_point\030\007 \003(\0132\035.apollo.planning.ADCPathP"
    "ointB\002\030\001\022E\n\024adc_trajectory_point\030\004 \003(\0132#"
    ".apollo.planning.ADCTrajectoryPointB\002\030\001\022"
    "0\n\006signal\030\013 \001(\0132\034.apollo.common.VehicleS"
    "ignalB\002\030\001\022L\n\023right_of_way_status\030\021 \001(\0162/"
    ".apollo.planning.ADCTrajectory.RightOfWa"
    "yStatus\022!\n\007lane_id\030\022 \003(\0132\020.apollo.hdmap."
    "Id\0222\n\rengage_advice\030\023 \001(\0132\033.apollo.commo"
    "n.EngageAdvice\022F\n\017critical_region\030\024 \001(\0132"
    "-.apollo.planning.ADCTrajectory.Critical"
    "Region\022O\n\017trajectory_type\030\025 \001(\0162-.apollo"
    ".planning.ADCTrajectory.TrajectoryType:\007"
    "UNKNOWN\0328\n\016CriticalRegion\022&\n\006region\030\001 \003("
    "\0132\026.apollo.common.Polygon\"2\n\020RightOfWayS"
    "tatus\022\017\n\013UNPROTECTED\020\000\022\r\n\tPROTECTED\020\001\"P\n"
    "\016TrajectoryType\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001"
    "\022\021\n\rPATH_FALLBACK\020\002\022\022\n\016SPEED_FALLBACK\020\003", 2199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/planning.proto", &protobuf_RegisterTypes);
  ADCTrajectoryPoint::default_instance_ = new ADCTrajectoryPoint();
  ADCPathPoint::default_instance_ = new ADCPathPoint();
  ADCSignals::default_instance_ = new ADCSignals();
  EStop::default_instance_ = new EStop();
  TaskStats::default_instance_ = new TaskStats();
  LatencyStats::default_instance_ = new LatencyStats();
  ADCTrajectory::default_instance_ = new ADCTrajectory();
  ADCTrajectory_CriticalRegion::default_instance_ = new ADCTrajectory_CriticalRegion();
  ADCTrajectoryPoint::default_instance_->InitAsDefaultInstance();
  ADCPathPoint::default_instance_->InitAsDefaultInstance();
  ADCSignals::default_instance_->InitAsDefaultInstance();
  EStop::default_instance_->InitAsDefaultInstance();
  TaskStats::default_instance_->InitAsDefaultInstance();
  LatencyStats::default_instance_->InitAsDefaultInstance();
  ADCTrajectory::default_instance_->InitAsDefaultInstance();
  ADCTrajectory_CriticalRegion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2fplanning_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2fplanning_2eproto {
  StaticDescriptorInitializer_planning_2fplanning_2eproto() {
    protobuf_AddDesc_planning_2fplanning_2eproto();
  }
} static_descriptor_initializer_planning_2fplanning_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectoryPoint::kXFieldNumber;
const int ADCTrajectoryPoint::kYFieldNumber;
const int ADCTrajectoryPoint::kZFieldNumber;
const int ADCTrajectoryPoint::kSpeedFieldNumber;
const int ADCTrajectoryPoint::kAccelerationSFieldNumber;
const int ADCTrajectoryPoint::kCurvatureFieldNumber;
const int ADCTrajectoryPoint::kCurvatureChangeRateFieldNumber;
const int ADCTrajectoryPoint::kRelativeTimeFieldNumber;
const int ADCTrajectoryPoint::kThetaFieldNumber;
const int ADCTrajectoryPoint::kAccumulatedSFieldNumber;
const int ADCTrajectoryPoint::kSFieldNumber;
const int ADCTrajectoryPoint::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectoryPoint::ADCTrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::InitAsDefaultInstance() {
}

ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  speed_ = 0;
  acceleration_s_ = 0;
  curvature_ = 0;
  curvature_change_rate_ = 0;
  relative_time_ = 0;
  theta_ = 0;
  accumulated_s_ = 0;
  s_ = 0;
  l_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectoryPoint)
  SharedDtor();
}

void ADCTrajectoryPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCTrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectoryPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTrajectoryPoint_descriptor_;
}

const ADCTrajectoryPoint& ADCTrajectoryPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

ADCTrajectoryPoint* ADCTrajectoryPoint::default_instance_ = NULL;

ADCTrajectoryPoint* ADCTrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  ADCTrajectoryPoint* n = new ADCTrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectoryPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADCTrajectoryPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADCTrajectoryPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(x_, relative_time_);
  }
  ZR_(theta_, l_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ADCTrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_s;
        break;
      }

      // optional double s = 4 [deprecated = true];
      case 4: {
        if (tag == 33) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_l;
        break;
      }

      // optional double l = 5 [deprecated = true];
      case 5: {
        if (tag == 41) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_speed;
        break;
      }

      // optional double speed = 6;
      case 6: {
        if (tag == 49) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_acceleration_s;
        break;
      }

      // optional double acceleration_s = 7;
      case 7: {
        if (tag == 57) {
         parse_acceleration_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_s_)));
          set_has_acceleration_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_curvature;
        break;
      }

      // optional double curvature = 8;
      case 8: {
        if (tag == 65) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
          set_has_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_curvature_change_rate;
        break;
      }

      // optional double curvature_change_rate = 9;
      case 9: {
        if (tag == 73) {
         parse_curvature_change_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_change_rate_)));
          set_has_curvature_change_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_relative_time;
        break;
      }

      // optional double relative_time = 10;
      case 10: {
        if (tag == 81) {
         parse_relative_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
          set_has_relative_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_theta;
        break;
      }

      // optional double theta = 11;
      case 11: {
        if (tag == 89) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_accumulated_s;
        break;
      }

      // optional double accumulated_s = 12;
      case 12: {
        if (tag == 97) {
         parse_accumulated_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accumulated_s_)));
          set_has_accumulated_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectoryPoint)
  return false;
#undef DO_
}

void ADCTrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectoryPoint)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double s = 4 [deprecated = true];
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->s(), output);
  }

  // optional double l = 5 [deprecated = true];
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->l(), output);
  }

  // optional double speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // optional double acceleration_s = 7;
  if (has_acceleration_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acceleration_s(), output);
  }

  // optional double curvature = 8;
  if (has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->curvature(), output);
  }

  // optional double curvature_change_rate = 9;
  if (has_curvature_change_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->curvature_change_rate(), output);
  }

  // optional double relative_time = 10;
  if (has_relative_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->relative_time(), output);
  }

  // optional double theta = 11;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->theta(), output);
  }

  // optional double accumulated_s = 12;
  if (has_accumulated_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->accumulated_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectoryPoint)
}

::google::protobuf::uint8* ADCTrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectoryPoint)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double s = 4 [deprecated = true];
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->s(), target);
  }

  // optional double l = 5 [deprecated = true];
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->l(), target);
  }

  // optional double speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // optional double acceleration_s = 7;
  if (has_acceleration_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acceleration_s(), target);
  }

  // optional double curvature = 8;
  if (has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->curvature(), target);
  }

  // optional double curvature_change_rate = 9;
  if (has_curvature_change_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->curvature_change_rate(), target);
  }

  // optional double relative_time = 10;
  if (has_relative_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->relative_time(), target);
  }

  // optional double theta = 11;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->theta(), target);
  }

  // optional double accumulated_s = 12;
  if (has_accumulated_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->accumulated_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectoryPoint)
  return target;
}

int ADCTrajectoryPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectoryPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_s = 7;
    if (has_acceleration_s()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 8;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double curvature_change_rate = 9;
    if (has_curvature_change_rate()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 10;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double theta = 11;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double accumulated_s = 12;
    if (has_accumulated_s()) {
      total_size += 1 + 8;
    }

    // optional double s = 4 [deprecated = true];
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 5 [deprecated = true];
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCTrajectoryPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectoryPoint)
    MergeFrom(*source);
  }
}

void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_acceleration_s()) {
      set_acceleration_s(from.acceleration_s());
    }
    if (from.has_curvature()) {
      set_curvature(from.curvature());
    }
    if (from.has_curvature_change_rate()) {
      set_curvature_change_rate(from.curvature_change_rate());
    }
    if (from.has_relative_time()) {
      set_relative_time(from.relative_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_accumulated_s()) {
      set_accumulated_s(from.accumulated_s());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ADCTrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {

  return true;
}

void ADCTrajectoryPoint::Swap(ADCTrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(speed_, other->speed_);
  std::swap(acceleration_s_, other->acceleration_s_);
  std::swap(curvature_, other->curvature_);
  std::swap(curvature_change_rate_, other->curvature_change_rate_);
  std::swap(relative_time_, other->relative_time_);
  std::swap(theta_, other->theta_);
  std::swap(accumulated_s_, other->accumulated_s_);
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectoryPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCTrajectoryPoint_descriptor_;
  metadata.reflection = ADCTrajectoryPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectoryPoint

// optional double x = 1;
bool ADCTrajectoryPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCTrajectoryPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCTrajectoryPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCTrajectoryPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double ADCTrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.x)
  return x_;
}
 void ADCTrajectoryPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.x)
}

// optional double y = 2;
bool ADCTrajectoryPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCTrajectoryPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCTrajectoryPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectoryPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double ADCTrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.y)
  return y_;
}
 void ADCTrajectoryPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.y)
}

// optional double z = 3;
bool ADCTrajectoryPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCTrajectoryPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCTrajectoryPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCTrajectoryPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double ADCTrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.z)
  return z_;
}
 void ADCTrajectoryPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.z)
}

// optional double speed = 6;
bool ADCTrajectoryPoint::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADCTrajectoryPoint::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void ADCTrajectoryPoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADCTrajectoryPoint::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 double ADCTrajectoryPoint::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.speed)
  return speed_;
}
 void ADCTrajectoryPoint::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.speed)
}

// optional double acceleration_s = 7;
bool ADCTrajectoryPoint::has_acceleration_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADCTrajectoryPoint::set_has_acceleration_s() {
  _has_bits_[0] |= 0x00000010u;
}
void ADCTrajectoryPoint::clear_has_acceleration_s() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectoryPoint::clear_acceleration_s() {
  acceleration_s_ = 0;
  clear_has_acceleration_s();
}
 double ADCTrajectoryPoint::acceleration_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.acceleration_s)
  return acceleration_s_;
}
 void ADCTrajectoryPoint::set_acceleration_s(double value) {
  set_has_acceleration_s();
  acceleration_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.acceleration_s)
}

// optional double curvature = 8;
bool ADCTrajectoryPoint::has_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ADCTrajectoryPoint::set_has_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
void ADCTrajectoryPoint::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
void ADCTrajectoryPoint::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
 double ADCTrajectoryPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature)
  return curvature_;
}
 void ADCTrajectoryPoint::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature)
}

// optional double curvature_change_rate = 9;
bool ADCTrajectoryPoint::has_curvature_change_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ADCTrajectoryPoint::set_has_curvature_change_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void ADCTrajectoryPoint::clear_has_curvature_change_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectoryPoint::clear_curvature_change_rate() {
  curvature_change_rate_ = 0;
  clear_has_curvature_change_rate();
}
 double ADCTrajectoryPoint::curvature_change_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
  return curvature_change_rate_;
}
 void ADCTrajectoryPoint::set_curvature_change_rate(double value) {
  set_has_curvature_change_rate();
  curvature_change_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
}

// optional double relative_time = 10;
bool ADCTrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ADCTrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000080u;
}
void ADCTrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void ADCTrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
 double ADCTrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.relative_time)
  return relative_time_;
}
 void ADCTrajectoryPoint::set_relative_time(double value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.relative_time)
}

// optional double theta = 11;
bool ADCTrajectoryPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ADCTrajectoryPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000100u;
}
void ADCTrajectoryPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
void ADCTrajectoryPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
 double ADCTrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.theta)
  return theta_;
}
 void ADCTrajectoryPoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.theta)
}

// optional double accumulated_s = 12;
bool ADCTrajectoryPoint::has_accumulated_s() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ADCTrajectoryPoint::set_has_accumulated_s() {
  _has_bits_[0] |= 0x00000200u;
}
void ADCTrajectoryPoint::clear_has_accumulated_s() {
  _has_bits_[0] &= ~0x00000200u;
}
void ADCTrajectoryPoint::clear_accumulated_s() {
  accumulated_s_ = 0;
  clear_has_accumulated_s();
}
 double ADCTrajectoryPoint::accumulated_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.accumulated_s)
  return accumulated_s_;
}
 void ADCTrajectoryPoint::set_accumulated_s(double value) {
  set_has_accumulated_s();
  accumulated_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.accumulated_s)
}

// optional double s = 4 [deprecated = true];
bool ADCTrajectoryPoint::has_s() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ADCTrajectoryPoint::set_has_s() {
  _has_bits_[0] |= 0x00000400u;
}
void ADCTrajectoryPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000400u;
}
void ADCTrajectoryPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double ADCTrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.s)
  return s_;
}
 void ADCTrajectoryPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.s)
}

// optional double l = 5 [deprecated = true];
bool ADCTrajectoryPoint::has_l() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ADCTrajectoryPoint::set_has_l() {
  _has_bits_[0] |= 0x00000800u;
}
void ADCTrajectoryPoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000800u;
}
void ADCTrajectoryPoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
 double ADCTrajectoryPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.l)
  return l_;
}
 void ADCTrajectoryPoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCPathPoint::kXFieldNumber;
const int ADCPathPoint::kYFieldNumber;
const int ADCPathPoint::kZFieldNumber;
const int ADCPathPoint::kCurvatureFieldNumber;
const int ADCPathPoint::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCPathPoint::ADCPathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCPathPoint)
}

void ADCPathPoint::InitAsDefaultInstance() {
}

ADCPathPoint::ADCPathPoint(const ADCPathPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCPathPoint)
}

void ADCPathPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  curvature_ = 0;
  heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCPathPoint::~ADCPathPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCPathPoint)
  SharedDtor();
}

void ADCPathPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCPathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCPathPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCPathPoint_descriptor_;
}

const ADCPathPoint& ADCPathPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

ADCPathPoint* ADCPathPoint::default_instance_ = NULL;

ADCPathPoint* ADCPathPoint::New(::google::protobuf::Arena* arena) const {
  ADCPathPoint* n = new ADCPathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCPathPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADCPathPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADCPathPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(x_, heading_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ADCPathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCPathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_curvature;
        break;
      }

      // optional double curvature = 4;
      case 4: {
        if (tag == 33) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
          set_has_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading;
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (tag == 41) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCPathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCPathPoint)
  return false;
#undef DO_
}

void ADCPathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCPathPoint)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double curvature = 4;
  if (has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->curvature(), output);
  }

  // optional double heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCPathPoint)
}

::google::protobuf::uint8* ADCPathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCPathPoint)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double curvature = 4;
  if (has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->curvature(), target);
  }

  // optional double heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCPathPoint)
  return target;
}

int ADCPathPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCPathPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 4;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCPathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCPathPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCPathPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCPathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCPathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCPathPoint)
    MergeFrom(*source);
  }
}

void ADCPathPoint::MergeFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCPathPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_curvature()) {
      set_curvature(from.curvature());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ADCPathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCPathPoint::CopyFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCPathPoint::IsInitialized() const {

  return true;
}

void ADCPathPoint::Swap(ADCPathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCPathPoint::InternalSwap(ADCPathPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(curvature_, other->curvature_);
  std::swap(heading_, other->heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCPathPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCPathPoint_descriptor_;
  metadata.reflection = ADCPathPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCPathPoint

// optional double x = 1;
bool ADCPathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCPathPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCPathPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCPathPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double ADCPathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.x)
  return x_;
}
 void ADCPathPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.x)
}

// optional double y = 2;
bool ADCPathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCPathPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCPathPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCPathPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double ADCPathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.y)
  return y_;
}
 void ADCPathPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.y)
}

// optional double z = 3;
bool ADCPathPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCPathPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCPathPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCPathPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double ADCPathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.z)
  return z_;
}
 void ADCPathPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.z)
}

// optional double curvature = 4;
bool ADCPathPoint::has_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADCPathPoint::set_has_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
void ADCPathPoint::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADCPathPoint::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
 double ADCPathPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.curvature)
  return curvature_;
}
 void ADCPathPoint::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.curvature)
}

// optional double heading = 5;
bool ADCPathPoint::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADCPathPoint::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
void ADCPathPoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADCPathPoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double ADCPathPoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.heading)
  return heading_;
}
 void ADCPathPoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCSignals_SignalType_descriptor_;
}
bool ADCSignals_SignalType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCSignals_SignalType ADCSignals::LEFT_TURN;
const ADCSignals_SignalType ADCSignals::RIGHT_TURN;
const ADCSignals_SignalType ADCSignals::LOW_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::HIGH_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::FOG_LIGHT;
const ADCSignals_SignalType ADCSignals::EMERGENCY_LIGHT;
const ADCSignals_SignalType ADCSignals::SignalType_MIN;
const ADCSignals_SignalType ADCSignals::SignalType_MAX;
const int ADCSignals::SignalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCSignals::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCSignals::ADCSignals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCSignals)
}

void ADCSignals::InitAsDefaultInstance() {
}

ADCSignals::ADCSignals(const ADCSignals& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCSignals)
}

void ADCSignals::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCSignals::~ADCSignals() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCSignals)
  SharedDtor();
}

void ADCSignals::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCSignals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCSignals_descriptor_;
}

const ADCSignals& ADCSignals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

ADCSignals* ADCSignals::default_instance_ = NULL;

ADCSignals* ADCSignals::New(::google::protobuf::Arena* arena) const {
  ADCSignals* n = new ADCSignals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCSignals)
  signal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ADCSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCSignals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
      case 1: {
        if (tag == 8) {
         parse_signal:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ADCSignals_SignalType_IsValid(value)) {
            add_signal(static_cast< ::apollo::planning::ADCSignals_SignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::ADCSignals_SignalType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_signal())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_signal;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCSignals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCSignals)
  return false;
#undef DO_
}

void ADCSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCSignals)
  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  for (int i = 0; i < this->signal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCSignals)
}

::google::protobuf::uint8* ADCSignals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCSignals)
  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  for (int i = 0; i < this->signal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->signal(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCSignals)
  return target;
}

int ADCSignals::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCSignals)
  int total_size = 0;

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->signal_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->signal(i));
    }
    total_size += 1 * this->signal_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCSignals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCSignals)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCSignals* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCSignals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCSignals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCSignals)
    MergeFrom(*source);
  }
}

void ADCSignals::MergeFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCSignals)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  signal_.MergeFrom(from.signal_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ADCSignals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCSignals::CopyFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCSignals::IsInitialized() const {

  return true;
}

void ADCSignals::Swap(ADCSignals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCSignals::InternalSwap(ADCSignals* other) {
  signal_.UnsafeArenaSwap(&other->signal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCSignals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCSignals_descriptor_;
  metadata.reflection = ADCSignals_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCSignals

// repeated .apollo.planning.ADCSignals.SignalType signal = 1;
int ADCSignals::signal_size() const {
  return signal_.size();
}
void ADCSignals::clear_signal() {
  signal_.Clear();
}
 ::apollo::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCSignals.signal)
  return static_cast< ::apollo::planning::ADCSignals_SignalType >(signal_.Get(index));
}
 void ADCSignals::set_signal(int index, ::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCSignals.signal)
}
 void ADCSignals::add_signal(::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ADCSignals.signal)
}
 const ::google::protobuf::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCSignals.signal)
  return signal_;
}
 ::google::protobuf::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCSignals.signal)
  return &signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EStop::kIsEstopFieldNumber;
const int EStop::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EStop::EStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EStop)
}

void EStop::InitAsDefaultInstance() {
}

EStop::EStop(const EStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EStop)
}

void EStop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_estop_ = false;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.EStop)
  SharedDtor();
}

void EStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStop_descriptor_;
}

const EStop& EStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

EStop* EStop::default_instance_ = NULL;

EStop* EStop::New(::google::protobuf::Arena* arena) const {
  EStop* n = new EStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EStop)
  if (_has_bits_[0 / 32] & 3u) {
    is_estop_ = false;
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.EStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_estop = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_estop_)));
          set_has_is_estop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.EStop.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.EStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.EStop)
  return false;
#undef DO_
}

void EStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.EStop)
  // optional bool is_estop = 1;
  if (has_is_estop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_estop(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.EStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.EStop)
}

::google::protobuf::uint8* EStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EStop)
  // optional bool is_estop = 1;
  if (has_is_estop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_estop(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.EStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EStop)
  return target;
}

int EStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EStop)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool is_estop = 1;
    if (has_is_estop()) {
      total_size += 1 + 1;
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_estop()) {
      set_is_estop(from.is_estop());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {

  return true;
}

void EStop::Swap(EStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EStop::InternalSwap(EStop* other) {
  std::swap(is_estop_, other->is_estop_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EStop_descriptor_;
  metadata.reflection = EStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EStop

// optional bool is_estop = 1;
bool EStop::has_is_estop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EStop::set_has_is_estop() {
  _has_bits_[0] |= 0x00000001u;
}
void EStop::clear_has_is_estop() {
  _has_bits_[0] &= ~0x00000001u;
}
void EStop::clear_is_estop() {
  is_estop_ = false;
  clear_has_is_estop();
}
 bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.is_estop)
  return is_estop_;
}
 void EStop::set_is_estop(bool value) {
  set_has_is_estop();
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.is_estop)
}

// optional string reason = 2;
bool EStop::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EStop::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void EStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void EStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.reason)
}
 void EStop::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.EStop.reason)
}
 void EStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.EStop.reason)
}
 ::std::string* EStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.EStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EStop.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStats::kNameFieldNumber;
const int TaskStats::kTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStats::TaskStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TaskStats)
}

void TaskStats::InitAsDefaultInstance() {
}

TaskStats::TaskStats(const TaskStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TaskStats)
}

void TaskStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.TaskStats)
  SharedDtor();
}

void TaskStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TaskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStats_descriptor_;
}

const TaskStats& TaskStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

TaskStats* TaskStats::default_instance_ = NULL;

TaskStats* TaskStats::New(::google::protobuf::Arena* arena) const {
  TaskStats* n = new TaskStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TaskStats)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    time_ms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TaskStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TaskStats.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time_ms;
        break;
      }

      // optional double time_ms = 2;
      case 2: {
        if (tag == 17) {
         parse_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_ms_)));
          set_has_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TaskStats)
  return false;
#undef DO_
}

void TaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TaskStats)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TaskStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time_ms = 2;
  if (has_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TaskStats)
}

::google::protobuf::uint8* TaskStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TaskStats)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TaskStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double time_ms = 2;
  if (has_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TaskStats)
  return target;
}

int TaskStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TaskStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time_ms = 2;
    if (has_time_ms()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TaskStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TaskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TaskStats)
    MergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TaskStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_time_ms()) {
      set_time_ms(from.time_ms());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TaskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {

  return true;
}

void TaskStats::Swap(TaskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStats::InternalSwap(TaskStats* other) {
  name_.Swap(&other->name_);
  std::swap(time_ms_, other->time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStats_descriptor_;
  metadata.reflection = TaskStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskStats

// optional string name = 1;
bool TaskStats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskStats::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskStats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.name)
}
 void TaskStats::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.TaskStats.name)
}
 void TaskStats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.TaskStats.name)
}
 ::std::string* TaskStats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskStats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskStats.name)
}

// optional double time_ms = 2;
bool TaskStats::has_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskStats::set_has_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskStats::clear_has_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskStats::clear_time_ms() {
  time_ms_ = 0;
  clear_has_time_ms();
}
 double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.time_ms)
  return time_ms_;
}
 void TaskStats::set_time_ms(double value) {
  set_has_time_ms();
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kTaskStatsFieldNumber;
const int LatencyStats::kInitFrameTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LatencyStats)
}

void LatencyStats::InitAsDefaultInstance() {
}

LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatencyStats)
}

void LatencyStats::SharedCtor() {
  _cached_size_ = 0;
  total_time_ms_ = 0;
  init_frame_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatencyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatencyStats_descriptor_;
}

const LatencyStats& LatencyStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

LatencyStats* LatencyStats::default_instance_ = NULL;

LatencyStats* LatencyStats::New(::google::protobuf::Arena* arena) const {
  LatencyStats* n = new LatencyStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatencyStats)
  if (_has_bits_[0 / 32] & 5u) {
    total_time_ms_ = 0;
    init_frame_time_ms_ = 0;
  }
  task_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LatencyStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
          set_has_total_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_stats;
        break;
      }

      // repeated .apollo.planning.TaskStats task_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_task_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_task_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_task_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_task_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_init_frame_time_ms;
        break;
      }

      // optional double init_frame_time_ms = 3;
      case 3: {
        if (tag == 25) {
         parse_init_frame_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_frame_time_ms_)));
          set_has_init_frame_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LatencyStats)
  // optional double total_time_ms = 1;
  if (has_total_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated .apollo.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0, n = this->task_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_stats(i), output);
  }

  // optional double init_frame_time_ms = 3;
  if (has_init_frame_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->init_frame_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatencyStats)
  // optional double total_time_ms = 1;
  if (has_total_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated .apollo.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0, n = this->task_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->task_stats(i), false, target);
  }

  // optional double init_frame_time_ms = 3;
  if (has_init_frame_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->init_frame_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatencyStats)
  return target;
}

int LatencyStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatencyStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional double total_time_ms = 1;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (has_init_frame_time_ms()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.planning.TaskStats task_stats = 2;
  total_size += 1 * this->task_stats_size();
  for (int i = 0; i < this->task_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LatencyStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LatencyStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatencyStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  task_stats_.MergeFrom(from.task_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_time_ms()) {
      set_total_time_ms(from.total_time_ms());
    }
    if (from.has_init_frame_time_ms()) {
      set_init_frame_time_ms(from.init_frame_time_ms());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {

  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  std::swap(total_time_ms_, other->total_time_ms_);
  task_stats_.UnsafeArenaSwap(&other->task_stats_);
  std::swap(init_frame_time_ms_, other->init_frame_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatencyStats_descriptor_;
  metadata.reflection = LatencyStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyStats

// optional double total_time_ms = 1;
bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatencyStats::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void LatencyStats::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
 double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.total_time_ms)
  return total_time_ms_;
}
 void LatencyStats::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.total_time_ms)
}

// repeated .apollo.planning.TaskStats task_stats = 2;
int LatencyStats::task_stats_size() const {
  return task_stats_.size();
}
void LatencyStats::clear_task_stats() {
  task_stats_.Clear();
}
const ::apollo::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Get(index);
}
::apollo::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Mutable(index);
}
::apollo::planning::TaskStats* LatencyStats::add_task_stats() {
  // @@protoc_insertion_point(field_add:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.LatencyStats.task_stats)
  return &task_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:apollo.planning.LatencyStats.task_stats)
  return task_stats_;
}

// optional double init_frame_time_ms = 3;
bool LatencyStats::has_init_frame_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatencyStats::set_has_init_frame_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void LatencyStats::clear_has_init_frame_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatencyStats::clear_init_frame_time_ms() {
  init_frame_time_ms_ = 0;
  clear_has_init_frame_time_ms();
}
 double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.init_frame_time_ms)
  return init_frame_time_ms_;
}
 void LatencyStats::set_init_frame_time_ms(double value) {
  set_has_init_frame_time_ms();
  init_frame_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.init_frame_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTrajectory_RightOfWayStatus_descriptor_;
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
const int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTrajectory_TrajectoryType_descriptor_;
}
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
const int ADCTrajectory::TrajectoryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory_CriticalRegion::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectory.CriticalRegion)
}

void ADCTrajectory_CriticalRegion::InitAsDefaultInstance() {
}

ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory.CriticalRegion)
}

void ADCTrajectory_CriticalRegion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCTrajectory_CriticalRegion::~ADCTrajectory_CriticalRegion() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory.CriticalRegion)
  SharedDtor();
}

void ADCTrajectory_CriticalRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCTrajectory_CriticalRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectory_CriticalRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTrajectory_CriticalRegion_descriptor_;
}

const ADCTrajectory_CriticalRegion& ADCTrajectory_CriticalRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

ADCTrajectory_CriticalRegion* ADCTrajectory_CriticalRegion::default_instance_ = NULL;

ADCTrajectory_CriticalRegion* ADCTrajectory_CriticalRegion::New(::google::protobuf::Arena* arena) const {
  ADCTrajectory_CriticalRegion* n = new ADCTrajectory_CriticalRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectory_CriticalRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory.CriticalRegion)
  region_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ADCTrajectory_CriticalRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectory.CriticalRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Polygon region = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_region;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectory.CriticalRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectory.CriticalRegion)
  return false;
#undef DO_
}

void ADCTrajectory_CriticalRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectory.CriticalRegion)
  // repeated .apollo.common.Polygon region = 1;
  for (unsigned int i = 0, n = this->region_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectory.CriticalRegion)
}

::google::protobuf::uint8* ADCTrajectory_CriticalRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory.CriticalRegion)
  // repeated .apollo.common.Polygon region = 1;
  for (unsigned int i = 0, n = this->region_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->region(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory.CriticalRegion)
  return target;
}

int ADCTrajectory_CriticalRegion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory.CriticalRegion)
  int total_size = 0;

  // repeated .apollo.common.Polygon region = 1;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCTrajectory_CriticalRegion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory_CriticalRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectory.CriticalRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectory.CriticalRegion)
    MergeFrom(*source);
  }
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  region_.MergeFrom(from.region_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory_CriticalRegion::IsInitialized() const {

  return true;
}

void ADCTrajectory_CriticalRegion::Swap(ADCTrajectory_CriticalRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory_CriticalRegion::InternalSwap(ADCTrajectory_CriticalRegion* other) {
  region_.UnsafeArenaSwap(&other->region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectory_CriticalRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCTrajectory_CriticalRegion_descriptor_;
  metadata.reflection = ADCTrajectory_CriticalRegion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory::kHeaderFieldNumber;
const int ADCTrajectory::kTotalPathLengthFieldNumber;
const int ADCTrajectory::kTotalPathTimeFieldNumber;
const int ADCTrajectory::kTrajectoryPointFieldNumber;
const int ADCTrajectory::kEstopFieldNumber;
const int ADCTrajectory::kPathPointFieldNumber;
const int ADCTrajectory::kIsReplanFieldNumber;
const int ADCTrajectory::kGearFieldNumber;
const int ADCTrajectory::kDecisionFieldNumber;
const int ADCTrajectory::kLatencyStatsFieldNumber;
const int ADCTrajectory::kRoutingHeaderFieldNumber;
const int ADCTrajectory::kDebugFieldNumber;
const int ADCTrajectory::kAdcPathPointFieldNumber;
const int ADCTrajectory::kAdcTrajectoryPointFieldNumber;
const int ADCTrajectory::kSignalFieldNumber;
const int ADCTrajectory::kRightOfWayStatusFieldNumber;
const int ADCTrajectory::kLaneIdFieldNumber;
const int ADCTrajectory::kEngageAdviceFieldNumber;
const int ADCTrajectory::kCriticalRegionFieldNumber;
const int ADCTrajectory::kTrajectoryTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory::ADCTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectory)
}

void ADCTrajectory::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  estop_ = const_cast< ::apollo::planning::EStop*>(&::apollo::planning::EStop::default_instance());
  decision_ = const_cast< ::apollo::planning::DecisionResult*>(&::apollo::planning::DecisionResult::default_instance());
  latency_stats_ = const_cast< ::apollo::planning::LatencyStats*>(&::apollo::planning::LatencyStats::default_instance());
  routing_header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  debug_ = const_cast< ::apollo::planning_internal::Debug*>(&::apollo::planning_internal::Debug::default_instance());
  signal_ = const_cast< ::apollo::common::VehicleSignal*>(&::apollo::common::VehicleSignal::default_instance());
  engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(&::apollo::common::EngageAdvice::default_instance());
  critical_region_ = const_cast< ::apollo::planning::ADCTrajectory_CriticalRegion*>(&::apollo::planning::ADCTrajectory_CriticalRegion::default_instance());
}

ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  total_path_length_ = 0;
  total_path_time_ = 0;
  estop_ = NULL;
  is_replan_ = false;
  gear_ = 0;
  decision_ = NULL;
  latency_stats_ = NULL;
  routing_header_ = NULL;
  debug_ = NULL;
  signal_ = NULL;
  right_of_way_status_ = 0;
  engage_advice_ = NULL;
  critical_region_ = NULL;
  trajectory_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory)
  SharedDtor();
}

void ADCTrajectory::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete estop_;
    delete decision_;
    delete latency_stats_;
    delete routing_header_;
    delete debug_;
    delete signal_;
    delete engage_advice_;
    delete critical_region_;
  }
}

void ADCTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTrajectory_descriptor_;
}

const ADCTrajectory& ADCTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2fplanning_2eproto();
  return *default_instance_;
}

ADCTrajectory* ADCTrajectory::default_instance_ = NULL;

ADCTrajectory* ADCTrajectory::New(::google::protobuf::Arena* arena) const {
  ADCTrajectory* n = new ADCTrajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADCTrajectory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADCTrajectory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 215u) {
    ZR_(total_path_length_, total_path_time_);
    ZR_(is_replan_, gear_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_estop()) {
      if (estop_ != NULL) estop_->::apollo::planning::EStop::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 52992u) {
    if (has_decision()) {
      if (decision_ != NULL) decision_->::apollo::planning::DecisionResult::Clear();
    }
    if (has_latency_stats()) {
      if (latency_stats_ != NULL) latency_stats_->::apollo::planning::LatencyStats::Clear();
    }
    if (has_routing_header()) {
      if (routing_header_ != NULL) routing_header_->::apollo::common::Header::Clear();
    }
    if (has_debug()) {
      if (debug_ != NULL) debug_->::apollo::planning_internal::Debug::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
    }
    right_of_way_status_ = 0;
  }
  if (_has_bits_[16 / 32] & 917504u) {
    if (has_engage_advice()) {
      if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
    }
    if (has_critical_region()) {
      if (critical_region_ != NULL) critical_region_->::apollo::planning::ADCTrajectory_CriticalRegion::Clear();
    }
    trajectory_type_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  trajectory_point_.Clear();
  path_point_.Clear();
  adc_path_point_.Clear();
  adc_trajectory_point_.Clear();
  lane_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ADCTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_path_length;
        break;
      }

      // optional double total_path_length = 2;
      case 2: {
        if (tag == 17) {
         parse_total_path_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
          set_has_total_path_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_path_time;
        break;
      }

      // optional double total_path_time = 3;
      case 3: {
        if (tag == 25) {
         parse_total_path_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_time_)));
          set_has_total_path_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adc_trajectory_point;
        break;
      }

      // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
      case 4: {
        if (tag == 34) {
         parse_adc_trajectory_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_adc_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adc_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_adc_trajectory_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_estop;
        break;
      }

      // optional .apollo.planning.EStop estop = 6;
      case 6: {
        if (tag == 50) {
         parse_estop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adc_path_point;
        break;
      }

      // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
      case 7: {
        if (tag == 58) {
         parse_adc_path_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_adc_path_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adc_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_adc_path_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_debug;
        break;
      }

      // optional .apollo.planning_internal.Debug debug = 8;
      case 8: {
        if (tag == 66) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_replan;
        break;
      }

      // optional bool is_replan = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_is_replan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));
          set_has_is_replan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gear;
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear = 10;
      case 10: {
        if (tag == 80) {
         parse_gear:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_signal;
        break;
      }

      // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
      case 11: {
        if (tag == 90) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_trajectory_point;
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
      case 12: {
        if (tag == 98) {
         parse_trajectory_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_trajectory_point;
        if (input->ExpectTag(106)) goto parse_loop_path_point;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 13;
      case 13: {
        if (tag == 106) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_path_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(114)) goto parse_decision;
        break;
      }

      // optional .apollo.planning.DecisionResult decision = 14;
      case 14: {
        if (tag == 114) {
         parse_decision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_latency_stats;
        break;
      }

      // optional .apollo.planning.LatencyStats latency_stats = 15;
      case 15: {
        if (tag == 122) {
         parse_latency_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_routing_header;
        break;
      }

      // optional .apollo.common.Header routing_header = 16;
      case 16: {
        if (tag == 130) {
         parse_routing_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_right_of_way_status;
        break;
      }

      // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17: {
        if (tag == 136) {
         parse_right_of_way_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value)) {
            set_right_of_way_status(static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_lane_id;
        break;
      }

      // repeated .apollo.hdmap.Id lane_id = 18;
      case 18: {
        if (tag == 146) {
         parse_lane_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_lane_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(154)) goto parse_engage_advice;
        break;
      }

      // optional .apollo.common.EngageAdvice engage_advice = 19;
      case 19: {
        if (tag == 154) {
         parse_engage_advice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_critical_region;
        break;
      }

      // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
      case 20: {
        if (tag == 162) {
         parse_critical_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_critical_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_trajectory_type;
        break;
      }

      // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
      case 21: {
        if (tag == 168) {
         parse_trajectory_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ADCTrajectory_TrajectoryType_IsValid(value)) {
            set_trajectory_type(static_cast< ::apollo::planning::ADCTrajectory_TrajectoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectory)
  return false;
#undef DO_
}

void ADCTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectory)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double total_path_length = 2;
  if (has_total_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_path_length(), output);
  }

  // optional double total_path_time = 3;
  if (has_total_path_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_path_time(), output);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->adc_trajectory_point(i), output);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (has_estop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->estop_, output);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->adc_path_point(i), output);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->debug_, output);
  }

  // optional bool is_replan = 9 [default = false];
  if (has_is_replan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_replan(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gear(), output);
  }

  // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->signal_, output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->trajectory_point(i), output);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->path_point(i), output);
  }

  // optional .apollo.planning.DecisionResult decision = 14;
  if (has_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->decision_, output);
  }

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  if (has_latency_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->latency_stats_, output);
  }

  // optional .apollo.common.Header routing_header = 16;
  if (has_routing_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->routing_header_, output);
  }

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (has_right_of_way_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->right_of_way_status(), output);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->lane_id(i), output);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  if (has_engage_advice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->engage_advice_, output);
  }

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (has_critical_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->critical_region_, output);
  }

  // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (has_trajectory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->trajectory_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectory)
}

::google::protobuf::uint8* ADCTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional double total_path_length = 2;
  if (has_total_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (has_total_path_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_path_time(), target);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->adc_trajectory_point(i), false, target);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (has_estop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->estop_, false, target);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->adc_path_point(i), false, target);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->debug_, false, target);
  }

  // optional bool is_replan = 9 [default = false];
  if (has_is_replan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_replan(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gear(), target);
  }

  // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->signal_, false, target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->trajectory_point(i), false, target);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->path_point(i), false, target);
  }

  // optional .apollo.planning.DecisionResult decision = 14;
  if (has_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->decision_, false, target);
  }

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  if (has_latency_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->latency_stats_, false, target);
  }

  // optional .apollo.common.Header routing_header = 16;
  if (has_routing_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->routing_header_, false, target);
  }

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (has_right_of_way_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->right_of_way_status(), target);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->lane_id(i), false, target);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  if (has_engage_advice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->engage_advice_, false, target);
  }

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (has_critical_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->critical_region_, false, target);
  }

  // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (has_trajectory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->trajectory_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory)
  return target;
}

int ADCTrajectory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 215u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional double total_path_length = 2;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_path_time = 3;
    if (has_total_path_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.EStop estop = 6;
    if (has_estop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->estop_);
    }

    // optional bool is_replan = 9 [default = false];
    if (has_is_replan()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear = 10;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

  }
  if (_has_bits_[8 / 32] & 52992u) {
    // optional .apollo.planning.DecisionResult decision = 14;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decision_);
    }

    // optional .apollo.planning.LatencyStats latency_stats = 15;
    if (has_latency_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->latency_stats_);
    }

    // optional .apollo.common.Header routing_header = 16;
    if (has_routing_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_header_);
    }

    // optional .apollo.planning_internal.Debug debug = 8;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_);
    }

    // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (has_right_of_way_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_of_way_status());
    }

  }
  if (_has_bits_[17 / 32] & 917504u) {
    // optional .apollo.common.EngageAdvice engage_advice = 19;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engage_advice_);
    }

    // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    if (has_critical_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->critical_region_);
    }

    // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    if (has_trajectory_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trajectory_type());
    }

  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  total_size += 1 * this->trajectory_point_size();
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory_point(i));
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  total_size += 1 * this->path_point_size();
  for (int i = 0; i < this->path_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_point(i));
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  total_size += 1 * this->adc_path_point_size();
  for (int i = 0; i < this->adc_path_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adc_path_point(i));
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  total_size += 1 * this->adc_trajectory_point_size();
  for (int i = 0; i < this->adc_trajectory_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adc_trajectory_point(i));
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  total_size += 2 * this->lane_id_size();
  for (int i = 0; i < this->lane_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ADCTrajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  adc_path_point_.MergeFrom(from.adc_path_point_);
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  lane_id_.MergeFrom(from.lane_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_total_path_length()) {
      set_total_path_length(from.total_path_length());
    }
    if (from.has_total_path_time()) {
      set_total_path_time(from.total_path_time());
    }
    if (from.has_estop()) {
      mutable_estop()->::apollo::planning::EStop::MergeFrom(from.estop());
    }
    if (from.has_is_replan()) {
      set_is_replan(from.is_replan());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_decision()) {
      mutable_decision()->::apollo::planning::DecisionResult::MergeFrom(from.decision());
    }
    if (from.has_latency_stats()) {
      mutable_latency_stats()->::apollo::planning::LatencyStats::MergeFrom(from.latency_stats());
    }
    if (from.has_routing_header()) {
      mutable_routing_header()->::apollo::common::Header::MergeFrom(from.routing_header());
    }
    if (from.has_debug()) {
      mutable_debug()->::apollo::planning_internal::Debug::MergeFrom(from.debug());
    }
    if (from.has_signal()) {
      mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (from.has_right_of_way_status()) {
      set_right_of_way_status(from.right_of_way_status());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_engage_advice()) {
      mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (from.has_critical_region()) {
      mutable_critical_region()->::apollo::planning::ADCTrajectory_CriticalRegion::MergeFrom(from.critical_region());
    }
    if (from.has_trajectory_type()) {
      set_trajectory_type(from.trajectory_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ADCTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {

  return true;
}

void ADCTrajectory::Swap(ADCTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  std::swap(header_, other->header_);
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_path_time_, other->total_path_time_);
  trajectory_point_.UnsafeArenaSwap(&other->trajectory_point_);
  std::swap(estop_, other->estop_);
  path_point_.UnsafeArenaSwap(&other->path_point_);
  std::swap(is_replan_, other->is_replan_);
  std::swap(gear_, other->gear_);
  std::swap(decision_, other->decision_);
  std::swap(latency_stats_, other->latency_stats_);
  std::swap(routing_header_, other->routing_header_);
  std::swap(debug_, other->debug_);
  adc_path_point_.UnsafeArenaSwap(&other->adc_path_point_);
  adc_trajectory_point_.UnsafeArenaSwap(&other->adc_trajectory_point_);
  std::swap(signal_, other->signal_);
  std::swap(right_of_way_status_, other->right_of_way_status_);
  lane_id_.UnsafeArenaSwap(&other->lane_id_);
  std::swap(engage_advice_, other->engage_advice_);
  std::swap(critical_region_, other->critical_region_);
  std::swap(trajectory_type_, other->trajectory_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCTrajectory_descriptor_;
  metadata.reflection = ADCTrajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectory_CriticalRegion

// repeated .apollo.common.Polygon region = 1;
int ADCTrajectory_CriticalRegion::region_size() const {
  return region_.size();
}
void ADCTrajectory_CriticalRegion::clear_region() {
  region_.Clear();
}
const ::apollo::common::Polygon& ADCTrajectory_CriticalRegion::region(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Get(index);
}
::apollo::common::Polygon* ADCTrajectory_CriticalRegion::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Mutable(index);
}
::apollo::common::Polygon* ADCTrajectory_CriticalRegion::add_region() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Polygon >*
ADCTrajectory_CriticalRegion::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return &region_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Polygon >&
ADCTrajectory_CriticalRegion::region() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_;
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .apollo.common.Header header = 1;
bool ADCTrajectory::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCTrajectory::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCTrajectory::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCTrajectory::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* ADCTrajectory::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.header)
  return header_;
}
::apollo::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
bool ADCTrajectory::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCTrajectory::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCTrajectory::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
  clear_has_total_path_length();
}
 double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
 void ADCTrajectory::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
bool ADCTrajectory::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCTrajectory::set_has_total_path_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCTrajectory::clear_has_total_path_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
  clear_has_total_path_time();
}
 double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
 void ADCTrajectory::set_total_path_time(double value) {
  set_has_total_path_time();
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_time)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
int ADCTrajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::apollo::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
::apollo::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::apollo::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// optional .apollo.planning.EStop estop = 6;
bool ADCTrajectory::has_estop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADCTrajectory::set_has_estop() {
  _has_bits_[0] |= 0x00000010u;
}
void ADCTrajectory::clear_has_estop() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectory::clear_estop() {
  if (estop_ != NULL) estop_->::apollo::planning::EStop::Clear();
  clear_has_estop();
}
const ::apollo::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.estop)
  return estop_ != NULL ? *estop_ : *default_instance_->estop_;
}
::apollo::planning::EStop* ADCTrajectory::mutable_estop() {
  set_has_estop();
  if (estop_ == NULL) {
    estop_ = new ::apollo::planning::EStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.estop)
  return estop_;
}
::apollo::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.estop)
  clear_has_estop();
  ::apollo::planning::EStop* temp = estop_;
  estop_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_estop(::apollo::planning::EStop* estop) {
  delete estop_;
  estop_ = estop;
  if (estop) {
    set_has_estop();
  } else {
    clear_has_estop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.estop)
}

// repeated .apollo.common.PathPoint path_point = 13;
int ADCTrajectory::path_point_size() const {
  return path_point_.size();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
const ::apollo::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Get(index);
}
::apollo::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
::apollo::common::PathPoint* ADCTrajectory::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.path_point)
  return &path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.path_point)
  return path_point_;
}

// optional bool is_replan = 9 [default = false];
bool ADCTrajectory::has_is_replan() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ADCTrajectory::set_has_is_replan() {
  _has_bits_[0] |= 0x00000040u;
}
void ADCTrajectory::clear_has_is_replan() {
  _has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
  clear_has_is_replan();
}
 bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.is_replan)
  return is_replan_;
}
 void ADCTrajectory::set_is_replan(bool value) {
  set_has_is_replan();
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.is_replan)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 10;
bool ADCTrajectory::has_gear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ADCTrajectory::set_has_gear() {
  _has_bits_[0] |= 0x00000080u;
}
void ADCTrajectory::clear_has_gear() {
  _has_bits_[0] &= ~0x00000080u;
}
void ADCTrajectory::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
 ::apollo::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.gear)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
 void ADCTrajectory::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.gear)
}

// optional .apollo.planning.DecisionResult decision = 14;
bool ADCTrajectory::has_decision() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ADCTrajectory::set_has_decision() {
  _has_bits_[0] |= 0x00000100u;
}
void ADCTrajectory::clear_has_decision() {
  _has_bits_[0] &= ~0x00000100u;
}
void ADCTrajectory::clear_decision() {
  if (decision_ != NULL) decision_->::apollo::planning::DecisionResult::Clear();
  clear_has_decision();
}
const ::apollo::planning::DecisionResult& ADCTrajectory::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.decision)
  return decision_ != NULL ? *decision_ : *default_instance_->decision_;
}
::apollo::planning::DecisionResult* ADCTrajectory::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::apollo::planning::DecisionResult;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.decision)
  return decision_;
}
::apollo::planning::DecisionResult* ADCTrajectory::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.decision)
  clear_has_decision();
  ::apollo::planning::DecisionResult* temp = decision_;
  decision_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_decision(::apollo::planning::DecisionResult* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.decision)
}

// optional .apollo.planning.LatencyStats latency_stats = 15;
bool ADCTrajectory::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ADCTrajectory::set_has_latency_stats() {
  _has_bits_[0] |= 0x00000200u;
}
void ADCTrajectory::clear_has_latency_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
void ADCTrajectory::clear_latency_stats() {
  if (latency_stats_ != NULL) latency_stats_->::apollo::planning::LatencyStats::Clear();
  clear_has_latency_stats();
}
const ::apollo::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_ : *default_instance_->latency_stats_;
}
::apollo::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  set_has_latency_stats();
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::planning::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.latency_stats)
  return latency_stats_;
}
::apollo::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.latency_stats)
  clear_has_latency_stats();
  ::apollo::planning::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    set_has_latency_stats();
  } else {
    clear_has_latency_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.latency_stats)
}

// optional .apollo.common.Header routing_header = 16;
bool ADCTrajectory::has_routing_header() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ADCTrajectory::set_has_routing_header() {
  _has_bits_[0] |= 0x00000400u;
}
void ADCTrajectory::clear_has_routing_header() {
  _has_bits_[0] &= ~0x00000400u;
}
void ADCTrajectory::clear_routing_header() {
  if (routing_header_ != NULL) routing_header_->::apollo::common::Header::Clear();
  clear_has_routing_header();
}
const ::apollo::common::Header& ADCTrajectory::routing_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.routing_header)
  return routing_header_ != NULL ? *routing_header_ : *default_instance_->routing_header_;
}
::apollo::common::Header* ADCTrajectory::mutable_routing_header() {
  set_has_routing_header();
  if (routing_header_ == NULL) {
    routing_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.routing_header)
  return routing_header_;
}
::apollo::common::Header* ADCTrajectory::release_routing_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.routing_header)
  clear_has_routing_header();
  ::apollo::common::Header* temp = routing_header_;
  routing_header_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_routing_header(::apollo::common::Header* routing_header) {
  delete routing_header_;
  routing_header_ = routing_header;
  if (routing_header) {
    set_has_routing_header();
  } else {
    clear_has_routing_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.routing_header)
}

// optional .apollo.planning_internal.Debug debug = 8;
bool ADCTrajectory::has_debug() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ADCTrajectory::set_has_debug() {
  _has_bits_[0] |= 0x00000800u;
}
void ADCTrajectory::clear_has_debug() {
  _has_bits_[0] &= ~0x00000800u;
}
void ADCTrajectory::clear_debug() {
  if (debug_ != NULL) debug_->::apollo::planning_internal::Debug::Clear();
  clear_has_debug();
}
const ::apollo::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.debug)
  return debug_ != NULL ? *debug_ : *default_instance_->debug_;
}
::apollo::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  set_has_debug();
  if (debug_ == NULL) {
    debug_ = new ::apollo::planning_internal::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.debug)
  return debug_;
}
::apollo::planning_internal::Debug* ADCTrajectory::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.debug)
  clear_has_debug();
  ::apollo::planning_internal::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_debug(::apollo::planning_internal::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.debug)
}

// repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
int ADCTrajectory::adc_path_point_size() const {
  return adc_path_point_.size();
}
void ADCTrajectory::clear_adc_path_point() {
  adc_path_point_.Clear();
}
const ::apollo::planning::ADCPathPoint& ADCTrajectory::adc_path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Get(index);
}
::apollo::planning::ADCPathPoint* ADCTrajectory::mutable_adc_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Mutable(index);
}
::apollo::planning::ADCPathPoint* ADCTrajectory::add_adc_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
ADCTrajectory::mutable_adc_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_path_point)
  return &adc_path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
ADCTrajectory::adc_path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_;
}

// repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
int ADCTrajectory::adc_trajectory_point_size() const {
  return adc_trajectory_point_.size();
}
void ADCTrajectory::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
const ::apollo::planning::ADCTrajectoryPoint& ADCTrajectory::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Get(index);
}
::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Mutable(index);
}
::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::add_adc_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
ADCTrajectory::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return &adc_trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
ADCTrajectory::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_;
}

// optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
bool ADCTrajectory::has_signal() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ADCTrajectory::set_has_signal() {
  _has_bits_[0] |= 0x00004000u;
}
void ADCTrajectory::clear_has_signal() {
  _has_bits_[0] &= ~0x00004000u;
}
void ADCTrajectory::clear_signal() {
  if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_signal();
}
const ::apollo::common::VehicleSignal& ADCTrajectory::signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
::apollo::common::VehicleSignal* ADCTrajectory::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signal)
  return signal_;
}
::apollo::common::VehicleSignal* ADCTrajectory::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signal)
  clear_has_signal();
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signal)
}

// optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
bool ADCTrajectory::has_right_of_way_status() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ADCTrajectory::set_has_right_of_way_status() {
  _has_bits_[0] |= 0x00008000u;
}
void ADCTrajectory::clear_has_right_of_way_status() {
  _has_bits_[0] &= ~0x00008000u;
}
void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
  clear_has_right_of_way_status();
}
 ::apollo::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.right_of_way_status)
  return static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
 void ADCTrajectory::set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  set_has_right_of_way_status();
  right_of_way_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.right_of_way_status)
}

// repeated .apollo.hdmap.Id lane_id = 18;
int ADCTrajectory::lane_id_size() const {
  return lane_id_.size();
}
void ADCTrajectory::clear_lane_id() {
  lane_id_.Clear();
}
const ::apollo::hdmap::Id& ADCTrajectory::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Get(index);
}
::apollo::hdmap::Id* ADCTrajectory::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Mutable(index);
}
::apollo::hdmap::Id* ADCTrajectory::add_lane_id() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
ADCTrajectory::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
ADCTrajectory::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_;
}

// optional .apollo.common.EngageAdvice engage_advice = 19;
bool ADCTrajectory::has_engage_advice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ADCTrajectory::set_has_engage_advice() {
  _has_bits_[0] |= 0x00020000u;
}
void ADCTrajectory::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00020000u;
}
void ADCTrajectory::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::apollo::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
const ::apollo::common::EngageAdvice& ADCTrajectory::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_ : *default_instance_->engage_advice_;
}
::apollo::common::EngageAdvice* ADCTrajectory::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::apollo::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.engage_advice)
  return engage_advice_;
}
::apollo::common::EngageAdvice* ADCTrajectory::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.engage_advice)
  clear_has_engage_advice();
  ::apollo::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.engage_advice)
}

// optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
bool ADCTrajectory::has_critical_region() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ADCTrajectory::set_has_critical_region() {
  _has_bits_[0] |= 0x00040000u;
}
void ADCTrajectory::clear_has_critical_region() {
  _has_bits_[0] &= ~0x00040000u;
}
void ADCTrajectory::clear_critical_region() {
  if (critical_region_ != NULL) critical_region_->::apollo::planning::ADCTrajectory_CriticalRegion::Clear();
  clear_has_critical_region();
}
const ::apollo::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::critical_region() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.critical_region)
  return critical_region_ != NULL ? *critical_region_ : *default_instance_->critical_region_;
}
::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::mutable_critical_region() {
  set_has_critical_region();
  if (critical_region_ == NULL) {
    critical_region_ = new ::apollo::planning::ADCTrajectory_CriticalRegion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.critical_region)
  return critical_region_;
}
::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::release_critical_region() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.critical_region)
  clear_has_critical_region();
  ::apollo::planning::ADCTrajectory_CriticalRegion* temp = critical_region_;
  critical_region_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_critical_region(::apollo::planning::ADCTrajectory_CriticalRegion* critical_region) {
  delete critical_region_;
  critical_region_ = critical_region;
  if (critical_region) {
    set_has_critical_region();
  } else {
    clear_has_critical_region();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.critical_region)
}

// optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
bool ADCTrajectory::has_trajectory_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ADCTrajectory::set_has_trajectory_type() {
  _has_bits_[0] |= 0x00080000u;
}
void ADCTrajectory::clear_has_trajectory_type() {
  _has_bits_[0] &= ~0x00080000u;
}
void ADCTrajectory::clear_trajectory_type() {
  trajectory_type_ = 0;
  clear_has_trajectory_type();
}
 ::apollo::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_type)
  return static_cast< ::apollo::planning::ADCTrajectory_TrajectoryType >(trajectory_type_);
}
 void ADCTrajectory::set_trajectory_type(::apollo::planning::ADCTrajectory_TrajectoryType value) {
  assert(::apollo::planning::ADCTrajectory_TrajectoryType_IsValid(value));
  set_has_trajectory_type();
  trajectory_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.trajectory_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
