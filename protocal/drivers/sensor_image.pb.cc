// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/sensor_image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/sensor_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {

namespace {

const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedImage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PixelFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fsensor_5fimage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fsensor_5fimage_2eproto() {
  protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/sensor_image.proto");
  GOOGLE_CHECK(file != NULL);
  Image_descriptor_ = file->message_type(0);
  static const int Image_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
  };
  Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      -1,
      -1,
      sizeof(Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
      -1);
  CompressedImage_descriptor_ = file->message_type(1);
  static const int CompressedImage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedImage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedImage, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedImage, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedImage, data_),
  };
  CompressedImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompressedImage_descriptor_,
      CompressedImage::default_instance_,
      CompressedImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedImage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CompressedImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedImage, _internal_metadata_),
      -1);
  PixelFormat_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fsensor_5fimage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompressedImage_descriptor_, &CompressedImage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fsensor_5fimage_2eproto() {
  delete Image::default_instance_;
  delete Image_reflection_;
  delete CompressedImage::default_instance_;
  delete CompressedImage_reflection_;
}

void protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032drivers/sensor_image.proto\022\016apollo.dri"
    "vers\032\023common/header.proto\"\247\001\n\005Image\022%\n\006h"
    "eader\030\001 \001(\0132\025.apollo.common.Header\022\020\n\010fr"
    "ame_id\030\002 \001(\t\022\030\n\020measurement_time\030\003 \002(\001\022\016"
    "\n\006height\030\004 \001(\r\022\r\n\005width\030\005 \001(\r\022\020\n\010encodin"
    "g\030\006 \001(\t\022\014\n\004step\030\007 \001(\r\022\014\n\004data\030\010 \001(\014\"h\n\017C"
    "ompressedImage\022%\n\006header\030\001 \001(\0132\025.apollo."
    "common.Header\022\020\n\010frame_id\030\002 \001(\t\022\016\n\006forma"
    "t\030\003 \001(\t\022\014\n\004data\030\004 \001(\014*\373\005\n\013PixelFormat\022\t\n"
    "\004RGB8\020\351\007\022\n\n\005RGBA8\020\352\007\022\n\n\005RGB16\020\353\007\022\013\n\006RGBA"
    "16\020\354\007\022\t\n\004BGR8\020\355\007\022\n\n\005BGRA8\020\356\007\022\n\n\005BGR16\020\357\007"
    "\022\013\n\006BGRA16\020\360\007\022\n\n\005MONO8\020\361\007\022\013\n\006MONO16\020\362\007\022\016"
    "\n\tTYPE_8UC1\020\321\017\022\016\n\tTYPE_8UC2\020\322\017\022\016\n\tTYPE_8"
    "UC3\020\323\017\022\016\n\tTYPE_8UC4\020\324\017\022\016\n\tTYPE_8SC1\020\325\017\022\016"
    "\n\tTYPE_8SC2\020\326\017\022\016\n\tTYPE_8SC3\020\327\017\022\016\n\tTYPE_8"
    "SC4\020\330\017\022\017\n\nTYPE_16UC1\020\331\017\022\017\n\nTYPE_16UC2\020\332\017"
    "\022\017\n\nTYPE_16UC3\020\333\017\022\017\n\nTYPE_16UC4\020\334\017\022\017\n\nTY"
    "PE_16SC1\020\335\017\022\017\n\nTYPE_16SC2\020\336\017\022\017\n\nTYPE_16S"
    "C3\020\337\017\022\017\n\nTYPE_16SC4\020\340\017\022\017\n\nTYPE_32SC1\020\341\017\022"
    "\017\n\nTYPE_32SC2\020\342\017\022\017\n\nTYPE_32SC3\020\343\017\022\017\n\nTYP"
    "E_32SC4\020\344\017\022\017\n\nTYPE_32FC1\020\345\017\022\017\n\nTYPE_32FC"
    "2\020\346\017\022\017\n\nTYPE_32FC3\020\347\017\022\017\n\nTYPE_32FC4\020\350\017\022\017"
    "\n\nTYPE_64FC1\020\351\017\022\017\n\nTYPE_64FC2\020\352\017\022\017\n\nTYPE"
    "_64FC3\020\353\017\022\017\n\nTYPE_64FC4\020\354\017\022\020\n\013BAYER_RGGB"
    "8\020\271\027\022\020\n\013BAYER_BGGR8\020\272\027\022\020\n\013BAYER_GBRG8\020\273\027"
    "\022\020\n\013BAYER_GRBG8\020\274\027\022\021\n\014BAYER_RGGB16\020\275\027\022\021\n"
    "\014BAYER_BGGR16\020\276\027\022\021\n\014BAYER_GBRG16\020\277\027\022\021\n\014B"
    "AYER_GRBG16\020\300\027\022\013\n\006YUV422\020\241\037", 1107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/sensor_image.proto", &protobuf_RegisterTypes);
  Image::default_instance_ = new Image();
  CompressedImage::default_instance_ = new CompressedImage();
  Image::default_instance_->InitAsDefaultInstance();
  CompressedImage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fsensor_5fimage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fsensor_5fimage_2eproto {
  StaticDescriptorInitializer_drivers_2fsensor_5fimage_2eproto() {
    protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto();
  }
} static_descriptor_initializer_drivers_2fsensor_5fimage_2eproto_;
const ::google::protobuf::EnumDescriptor* PixelFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PixelFormat_descriptor_;
}
bool PixelFormat_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 4001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kHeaderFieldNumber;
const int Image::kFrameIdFieldNumber;
const int Image::kMeasurementTimeFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kEncodingFieldNumber;
const int Image::kStepFieldNumber;
const int Image::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Image)
}

void Image::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

Image::Image(const Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Image)
}

void Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurement_time_ = 0;
  height_ = 0u;
  width_ = 0u;
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  step_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Image)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Image, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Image*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(measurement_time_, width_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_frame_id()) {
      frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_encoding()) {
      encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    step_ = 0u;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frame_id;
        break;
      }

      // optional string frame_id = 2;
      case 2: {
        if (tag == 18) {
         parse_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.Image.frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_measurement_time;
        break;
      }

      // required double measurement_time = 3;
      case 3: {
        if (tag == 25) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // optional uint32 width = 5;
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_encoding;
        break;
      }

      // optional string encoding = 6;
      case 6: {
        if (tag == 50) {
         parse_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encoding().data(), this->encoding().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.Image.encoding");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_step;
        break;
      }

      // optional uint32 step = 7;
      case 7: {
        if (tag == 56) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Image)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame_id(), output);
  }

  // required double measurement_time = 3;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->measurement_time(), output);
  }

  // optional uint32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // optional string encoding = 6;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), this->encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->encoding(), output);
  }

  // optional uint32 step = 7;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->step(), output);
  }

  // optional bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Image)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional string frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_id(), target);
  }

  // required double measurement_time = 3;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->measurement_time(), target);
  }

  // optional uint32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // optional string encoding = 6;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), this->encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->encoding(), target);
  }

  // optional uint32 step = 7;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->step(), target);
  }

  // optional bytes data = 8;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Image)
  return target;
}

int Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Image)
  int total_size = 0;

  // required double measurement_time = 3;
  if (has_measurement_time()) {
    total_size += 1 + 8;
  }
  if (_has_bits_[0 / 32] & 251u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional string frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional string encoding = 6;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoding());
    }

    // optional uint32 step = 7;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_frame_id()) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_encoding()) {
      set_has_encoding();
      encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  std::swap(header_, other->header_);
  frame_id_.Swap(&other->frame_id_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  encoding_.Swap(&other->encoding_);
  std::swap(step_, other->step_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional .apollo.common.Header header = 1;
bool Image::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Image::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Image::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Image::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& Image::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* Image::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.header)
  return header_;
}
::apollo::common::Header* Image::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Image::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.header)
}

// optional string frame_id = 2;
bool Image::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Image::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Image::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Image::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
 const ::std::string& Image::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.frame_id)
  return frame_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.frame_id)
}
 void Image::set_frame_id(const char* value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.Image.frame_id)
}
 void Image::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.Image.frame_id)
}
 ::std::string* Image::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.frame_id)
}

// required double measurement_time = 3;
bool Image::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Image::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Image::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Image::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double Image::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.measurement_time)
  return measurement_time_;
}
 void Image::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.measurement_time)
}

// optional uint32 height = 4;
bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Image::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void Image::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.height)
  return height_;
}
 void Image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.height)
}

// optional uint32 width = 5;
bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Image::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void Image::clear_width() {
  width_ = 0u;
  clear_has_width();
}
 ::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.width)
  return width_;
}
 void Image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.width)
}

// optional string encoding = 6;
bool Image::has_encoding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Image::set_has_encoding() {
  _has_bits_[0] |= 0x00000020u;
}
void Image::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000020u;
}
void Image::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encoding();
}
 const ::std::string& Image::encoding() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.encoding)
  return encoding_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_encoding(const ::std::string& value) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.encoding)
}
 void Image::set_encoding(const char* value) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.Image.encoding)
}
 void Image::set_encoding(const char* value, size_t size) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.Image.encoding)
}
 ::std::string* Image::mutable_encoding() {
  set_has_encoding();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.encoding)
  return encoding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_encoding() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.encoding)
  clear_has_encoding();
  return encoding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_encoding(::std::string* encoding) {
  if (encoding != NULL) {
    set_has_encoding();
  } else {
    clear_has_encoding();
  }
  encoding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.encoding)
}

// optional uint32 step = 7;
bool Image::has_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Image::set_has_step() {
  _has_bits_[0] |= 0x00000040u;
}
void Image::clear_has_step() {
  _has_bits_[0] &= ~0x00000040u;
}
void Image::clear_step() {
  step_ = 0u;
  clear_has_step();
}
 ::google::protobuf::uint32 Image::step() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.step)
  return step_;
}
 void Image::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.step)
}

// optional bytes data = 8;
bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Image::set_has_data() {
  _has_bits_[0] |= 0x00000080u;
}
void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000080u;
}
void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Image.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Image.data)
}
 void Image::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.Image.data)
}
 void Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.Image.data)
}
 ::std::string* Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Image.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedImage::kHeaderFieldNumber;
const int CompressedImage::kFrameIdFieldNumber;
const int CompressedImage::kFormatFieldNumber;
const int CompressedImage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedImage::CompressedImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.CompressedImage)
}

void CompressedImage::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

CompressedImage::CompressedImage(const CompressedImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.CompressedImage)
}

void CompressedImage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedImage::~CompressedImage() {
  // @@protoc_insertion_point(destructor:apollo.drivers.CompressedImage)
  SharedDtor();
}

void CompressedImage::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void CompressedImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedImage_descriptor_;
}

const CompressedImage& CompressedImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fsensor_5fimage_2eproto();
  return *default_instance_;
}

CompressedImage* CompressedImage::default_instance_ = NULL;

CompressedImage* CompressedImage::New(::google::protobuf::Arena* arena) const {
  CompressedImage* n = new CompressedImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedImage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.CompressedImage)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_frame_id()) {
      frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_format()) {
      format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CompressedImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.CompressedImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frame_id;
        break;
      }

      // optional string frame_id = 2;
      case 2: {
        if (tag == 18) {
         parse_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.CompressedImage.frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }

      // optional string format = 3;
      case 3: {
        if (tag == 26) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.CompressedImage.format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.CompressedImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.CompressedImage)
  return false;
#undef DO_
}

void CompressedImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.CompressedImage)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame_id(), output);
  }

  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->format(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.CompressedImage)
}

::google::protobuf::uint8* CompressedImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.CompressedImage)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional string frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_id(), target);
  }

  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->format(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.CompressedImage)
  return target;
}

int CompressedImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.CompressedImage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional string frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional string format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.CompressedImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompressedImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.CompressedImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.CompressedImage)
    MergeFrom(*source);
  }
}

void CompressedImage::MergeFrom(const CompressedImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.CompressedImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_frame_id()) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (from.has_format()) {
      set_has_format();
      format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CompressedImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.CompressedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedImage::CopyFrom(const CompressedImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.CompressedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedImage::IsInitialized() const {

  return true;
}

void CompressedImage::Swap(CompressedImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedImage::InternalSwap(CompressedImage* other) {
  std::swap(header_, other->header_);
  frame_id_.Swap(&other->frame_id_);
  format_.Swap(&other->format_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedImage_descriptor_;
  metadata.reflection = CompressedImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedImage

// optional .apollo.common.Header header = 1;
bool CompressedImage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompressedImage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void CompressedImage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompressedImage::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& CompressedImage::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* CompressedImage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.header)
  return header_;
}
::apollo::common::Header* CompressedImage::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void CompressedImage::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.header)
}

// optional string frame_id = 2;
bool CompressedImage::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CompressedImage::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CompressedImage::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CompressedImage::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
 const ::std::string& CompressedImage::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.frame_id)
  return frame_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedImage::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.CompressedImage.frame_id)
}
 void CompressedImage::set_frame_id(const char* value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.CompressedImage.frame_id)
}
 void CompressedImage::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.CompressedImage.frame_id)
}
 ::std::string* CompressedImage::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CompressedImage::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedImage::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.frame_id)
}

// optional string format = 3;
bool CompressedImage::has_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CompressedImage::set_has_format() {
  _has_bits_[0] |= 0x00000004u;
}
void CompressedImage::clear_has_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void CompressedImage::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
 const ::std::string& CompressedImage::format() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.format)
  return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedImage::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.CompressedImage.format)
}
 void CompressedImage::set_format(const char* value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.CompressedImage.format)
}
 void CompressedImage::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.CompressedImage.format)
}
 ::std::string* CompressedImage::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CompressedImage::release_format() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.format)
  clear_has_format();
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedImage::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.format)
}

// optional bytes data = 4;
bool CompressedImage::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CompressedImage::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void CompressedImage::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void CompressedImage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CompressedImage::data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.CompressedImage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedImage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.CompressedImage.data)
}
 void CompressedImage::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.CompressedImage.data)
}
 void CompressedImage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.CompressedImage.data)
}
 ::std::string* CompressedImage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.CompressedImage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CompressedImage::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.CompressedImage.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedImage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.CompressedImage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
