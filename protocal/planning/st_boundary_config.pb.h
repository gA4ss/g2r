// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/st_boundary_config.proto

#ifndef PROTOBUF_planning_2fst_5fboundary_5fconfig_2eproto__INCLUDED
#define PROTOBUF_planning_2fst_5fboundary_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
void protobuf_AssignDesc_planning_2fst_5fboundary_5fconfig_2eproto();
void protobuf_ShutdownFile_planning_2fst_5fboundary_5fconfig_2eproto();

class StBoundaryConfig;

// ===================================================================

class StBoundaryConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StBoundaryConfig) */ {
 public:
  StBoundaryConfig();
  virtual ~StBoundaryConfig();

  StBoundaryConfig(const StBoundaryConfig& from);

  inline StBoundaryConfig& operator=(const StBoundaryConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StBoundaryConfig& default_instance();

  void Swap(StBoundaryConfig* other);

  // implements Message ----------------------------------------------

  inline StBoundaryConfig* New() const { return New(NULL); }

  StBoundaryConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StBoundaryConfig& from);
  void MergeFrom(const StBoundaryConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StBoundaryConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double boundary_buffer = 1 [default = 0.1];
  bool has_boundary_buffer() const;
  void clear_boundary_buffer();
  static const int kBoundaryBufferFieldNumber = 1;
  double boundary_buffer() const;
  void set_boundary_buffer(double value);

  // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
  bool has_high_speed_centric_acceleration_limit() const;
  void clear_high_speed_centric_acceleration_limit();
  static const int kHighSpeedCentricAccelerationLimitFieldNumber = 2;
  double high_speed_centric_acceleration_limit() const;
  void set_high_speed_centric_acceleration_limit(double value);

  // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
  bool has_low_speed_centric_acceleration_limit() const;
  void clear_low_speed_centric_acceleration_limit();
  static const int kLowSpeedCentricAccelerationLimitFieldNumber = 3;
  double low_speed_centric_acceleration_limit() const;
  void set_low_speed_centric_acceleration_limit(double value);

  // optional double high_speed_threshold = 4 [default = 20];
  bool has_high_speed_threshold() const;
  void clear_high_speed_threshold();
  static const int kHighSpeedThresholdFieldNumber = 4;
  double high_speed_threshold() const;
  void set_high_speed_threshold(double value);

  // optional double low_speed_threshold = 5 [default = 7];
  bool has_low_speed_threshold() const;
  void clear_low_speed_threshold();
  static const int kLowSpeedThresholdFieldNumber = 5;
  double low_speed_threshold() const;
  void set_low_speed_threshold(double value);

  // optional double minimal_kappa = 6 [default = 1e-05];
  bool has_minimal_kappa() const;
  void clear_minimal_kappa();
  static const int kMinimalKappaFieldNumber = 6;
  double minimal_kappa() const;
  void set_minimal_kappa(double value);

  // optional double point_extension = 7 [default = 1];
  bool has_point_extension() const;
  void clear_point_extension();
  static const int kPointExtensionFieldNumber = 7;
  double point_extension() const;
  void set_point_extension(double value);

  // optional double lowest_speed = 8 [default = 2.5];
  bool has_lowest_speed() const;
  void clear_lowest_speed();
  static const int kLowestSpeedFieldNumber = 8;
  double lowest_speed() const;
  void set_lowest_speed(double value);

  // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
  bool has_num_points_to_avg_kappa() const;
  void clear_num_points_to_avg_kappa();
  static const int kNumPointsToAvgKappaFieldNumber = 9;
  ::google::protobuf::uint32 num_points_to_avg_kappa() const;
  void set_num_points_to_avg_kappa(::google::protobuf::uint32 value);

  // optional double static_obs_nudge_speed_ratio = 10;
  bool has_static_obs_nudge_speed_ratio() const;
  void clear_static_obs_nudge_speed_ratio();
  static const int kStaticObsNudgeSpeedRatioFieldNumber = 10;
  double static_obs_nudge_speed_ratio() const;
  void set_static_obs_nudge_speed_ratio(double value);

  // optional double dynamic_obs_nudge_speed_ratio = 11;
  bool has_dynamic_obs_nudge_speed_ratio() const;
  void clear_dynamic_obs_nudge_speed_ratio();
  static const int kDynamicObsNudgeSpeedRatioFieldNumber = 11;
  double dynamic_obs_nudge_speed_ratio() const;
  void set_dynamic_obs_nudge_speed_ratio(double value);

  // optional double centri_jerk_speed_coeff = 12;
  bool has_centri_jerk_speed_coeff() const;
  void clear_centri_jerk_speed_coeff();
  static const int kCentriJerkSpeedCoeffFieldNumber = 12;
  double centri_jerk_speed_coeff() const;
  void set_centri_jerk_speed_coeff(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.StBoundaryConfig)
 private:
  inline void set_has_boundary_buffer();
  inline void clear_has_boundary_buffer();
  inline void set_has_high_speed_centric_acceleration_limit();
  inline void clear_has_high_speed_centric_acceleration_limit();
  inline void set_has_low_speed_centric_acceleration_limit();
  inline void clear_has_low_speed_centric_acceleration_limit();
  inline void set_has_high_speed_threshold();
  inline void clear_has_high_speed_threshold();
  inline void set_has_low_speed_threshold();
  inline void clear_has_low_speed_threshold();
  inline void set_has_minimal_kappa();
  inline void clear_has_minimal_kappa();
  inline void set_has_point_extension();
  inline void clear_has_point_extension();
  inline void set_has_lowest_speed();
  inline void clear_has_lowest_speed();
  inline void set_has_num_points_to_avg_kappa();
  inline void clear_has_num_points_to_avg_kappa();
  inline void set_has_static_obs_nudge_speed_ratio();
  inline void clear_has_static_obs_nudge_speed_ratio();
  inline void set_has_dynamic_obs_nudge_speed_ratio();
  inline void clear_has_dynamic_obs_nudge_speed_ratio();
  inline void set_has_centri_jerk_speed_coeff();
  inline void clear_has_centri_jerk_speed_coeff();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double boundary_buffer_;
  double high_speed_centric_acceleration_limit_;
  double low_speed_centric_acceleration_limit_;
  double high_speed_threshold_;
  double low_speed_threshold_;
  double minimal_kappa_;
  double point_extension_;
  double lowest_speed_;
  double static_obs_nudge_speed_ratio_;
  double dynamic_obs_nudge_speed_ratio_;
  double centri_jerk_speed_coeff_;
  ::google::protobuf::uint32 num_points_to_avg_kappa_;
  friend void  protobuf_AddDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  friend void protobuf_AssignDesc_planning_2fst_5fboundary_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_planning_2fst_5fboundary_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static StBoundaryConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StBoundaryConfig

// optional double boundary_buffer = 1 [default = 0.1];
inline bool StBoundaryConfig::has_boundary_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StBoundaryConfig::set_has_boundary_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StBoundaryConfig::clear_has_boundary_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StBoundaryConfig::clear_boundary_buffer() {
  boundary_buffer_ = 0.1;
  clear_has_boundary_buffer();
}
inline double StBoundaryConfig::boundary_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.boundary_buffer)
  return boundary_buffer_;
}
inline void StBoundaryConfig::set_boundary_buffer(double value) {
  set_has_boundary_buffer();
  boundary_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.boundary_buffer)
}

// optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
inline bool StBoundaryConfig::has_high_speed_centric_acceleration_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StBoundaryConfig::set_has_high_speed_centric_acceleration_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StBoundaryConfig::clear_has_high_speed_centric_acceleration_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StBoundaryConfig::clear_high_speed_centric_acceleration_limit() {
  high_speed_centric_acceleration_limit_ = 1.2;
  clear_has_high_speed_centric_acceleration_limit();
}
inline double StBoundaryConfig::high_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
  return high_speed_centric_acceleration_limit_;
}
inline void StBoundaryConfig::set_high_speed_centric_acceleration_limit(double value) {
  set_has_high_speed_centric_acceleration_limit();
  high_speed_centric_acceleration_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
}

// optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
inline bool StBoundaryConfig::has_low_speed_centric_acceleration_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StBoundaryConfig::set_has_low_speed_centric_acceleration_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StBoundaryConfig::clear_has_low_speed_centric_acceleration_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StBoundaryConfig::clear_low_speed_centric_acceleration_limit() {
  low_speed_centric_acceleration_limit_ = 1.4;
  clear_has_low_speed_centric_acceleration_limit();
}
inline double StBoundaryConfig::low_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
  return low_speed_centric_acceleration_limit_;
}
inline void StBoundaryConfig::set_low_speed_centric_acceleration_limit(double value) {
  set_has_low_speed_centric_acceleration_limit();
  low_speed_centric_acceleration_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
}

// optional double high_speed_threshold = 4 [default = 20];
inline bool StBoundaryConfig::has_high_speed_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StBoundaryConfig::set_has_high_speed_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StBoundaryConfig::clear_has_high_speed_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StBoundaryConfig::clear_high_speed_threshold() {
  high_speed_threshold_ = 20;
  clear_has_high_speed_threshold();
}
inline double StBoundaryConfig::high_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_threshold)
  return high_speed_threshold_;
}
inline void StBoundaryConfig::set_high_speed_threshold(double value) {
  set_has_high_speed_threshold();
  high_speed_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_threshold)
}

// optional double low_speed_threshold = 5 [default = 7];
inline bool StBoundaryConfig::has_low_speed_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StBoundaryConfig::set_has_low_speed_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StBoundaryConfig::clear_has_low_speed_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StBoundaryConfig::clear_low_speed_threshold() {
  low_speed_threshold_ = 7;
  clear_has_low_speed_threshold();
}
inline double StBoundaryConfig::low_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_threshold)
  return low_speed_threshold_;
}
inline void StBoundaryConfig::set_low_speed_threshold(double value) {
  set_has_low_speed_threshold();
  low_speed_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_threshold)
}

// optional double minimal_kappa = 6 [default = 1e-05];
inline bool StBoundaryConfig::has_minimal_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StBoundaryConfig::set_has_minimal_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StBoundaryConfig::clear_has_minimal_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StBoundaryConfig::clear_minimal_kappa() {
  minimal_kappa_ = 1e-05;
  clear_has_minimal_kappa();
}
inline double StBoundaryConfig::minimal_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.minimal_kappa)
  return minimal_kappa_;
}
inline void StBoundaryConfig::set_minimal_kappa(double value) {
  set_has_minimal_kappa();
  minimal_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.minimal_kappa)
}

// optional double point_extension = 7 [default = 1];
inline bool StBoundaryConfig::has_point_extension() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StBoundaryConfig::set_has_point_extension() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StBoundaryConfig::clear_has_point_extension() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StBoundaryConfig::clear_point_extension() {
  point_extension_ = 1;
  clear_has_point_extension();
}
inline double StBoundaryConfig::point_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.point_extension)
  return point_extension_;
}
inline void StBoundaryConfig::set_point_extension(double value) {
  set_has_point_extension();
  point_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.point_extension)
}

// optional double lowest_speed = 8 [default = 2.5];
inline bool StBoundaryConfig::has_lowest_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StBoundaryConfig::set_has_lowest_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StBoundaryConfig::clear_has_lowest_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StBoundaryConfig::clear_lowest_speed() {
  lowest_speed_ = 2.5;
  clear_has_lowest_speed();
}
inline double StBoundaryConfig::lowest_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.lowest_speed)
  return lowest_speed_;
}
inline void StBoundaryConfig::set_lowest_speed(double value) {
  set_has_lowest_speed();
  lowest_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.lowest_speed)
}

// optional uint32 num_points_to_avg_kappa = 9 [default = 4];
inline bool StBoundaryConfig::has_num_points_to_avg_kappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StBoundaryConfig::set_has_num_points_to_avg_kappa() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StBoundaryConfig::clear_has_num_points_to_avg_kappa() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StBoundaryConfig::clear_num_points_to_avg_kappa() {
  num_points_to_avg_kappa_ = 4u;
  clear_has_num_points_to_avg_kappa();
}
inline ::google::protobuf::uint32 StBoundaryConfig::num_points_to_avg_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
  return num_points_to_avg_kappa_;
}
inline void StBoundaryConfig::set_num_points_to_avg_kappa(::google::protobuf::uint32 value) {
  set_has_num_points_to_avg_kappa();
  num_points_to_avg_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
}

// optional double static_obs_nudge_speed_ratio = 10;
inline bool StBoundaryConfig::has_static_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StBoundaryConfig::set_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StBoundaryConfig::clear_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StBoundaryConfig::clear_static_obs_nudge_speed_ratio() {
  static_obs_nudge_speed_ratio_ = 0;
  clear_has_static_obs_nudge_speed_ratio();
}
inline double StBoundaryConfig::static_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
  return static_obs_nudge_speed_ratio_;
}
inline void StBoundaryConfig::set_static_obs_nudge_speed_ratio(double value) {
  set_has_static_obs_nudge_speed_ratio();
  static_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
}

// optional double dynamic_obs_nudge_speed_ratio = 11;
inline bool StBoundaryConfig::has_dynamic_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StBoundaryConfig::set_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StBoundaryConfig::clear_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StBoundaryConfig::clear_dynamic_obs_nudge_speed_ratio() {
  dynamic_obs_nudge_speed_ratio_ = 0;
  clear_has_dynamic_obs_nudge_speed_ratio();
}
inline double StBoundaryConfig::dynamic_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
  return dynamic_obs_nudge_speed_ratio_;
}
inline void StBoundaryConfig::set_dynamic_obs_nudge_speed_ratio(double value) {
  set_has_dynamic_obs_nudge_speed_ratio();
  dynamic_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
}

// optional double centri_jerk_speed_coeff = 12;
inline bool StBoundaryConfig::has_centri_jerk_speed_coeff() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StBoundaryConfig::set_has_centri_jerk_speed_coeff() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StBoundaryConfig::clear_has_centri_jerk_speed_coeff() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StBoundaryConfig::clear_centri_jerk_speed_coeff() {
  centri_jerk_speed_coeff_ = 0;
  clear_has_centri_jerk_speed_coeff();
}
inline double StBoundaryConfig::centri_jerk_speed_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.centri_jerk_speed_coeff)
  return centri_jerk_speed_coeff_;
}
inline void StBoundaryConfig::set_centri_jerk_speed_coeff(double value) {
  set_has_centri_jerk_speed_coeff();
  centri_jerk_speed_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.centri_jerk_speed_coeff)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2fst_5fboundary_5fconfig_2eproto__INCLUDED
