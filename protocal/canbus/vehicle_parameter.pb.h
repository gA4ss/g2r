// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: canbus/vehicle_parameter.proto

#ifndef PROTOBUF_canbus_2fvehicle_5fparameter_2eproto__INCLUDED
#define PROTOBUF_canbus_2fvehicle_5fparameter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "canbus/chassis.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace canbus {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_canbus_2fvehicle_5fparameter_2eproto();
void protobuf_AssignDesc_canbus_2fvehicle_5fparameter_2eproto();
void protobuf_ShutdownFile_canbus_2fvehicle_5fparameter_2eproto();

class VehicleParameter;

enum VehicleParameter_VehicleBrand {
  VehicleParameter_VehicleBrand_LINCOLN_MKZ = 0,
  VehicleParameter_VehicleBrand_GEM = 1
};
bool VehicleParameter_VehicleBrand_IsValid(int value);
const VehicleParameter_VehicleBrand VehicleParameter_VehicleBrand_VehicleBrand_MIN = VehicleParameter_VehicleBrand_LINCOLN_MKZ;
const VehicleParameter_VehicleBrand VehicleParameter_VehicleBrand_VehicleBrand_MAX = VehicleParameter_VehicleBrand_GEM;
const int VehicleParameter_VehicleBrand_VehicleBrand_ARRAYSIZE = VehicleParameter_VehicleBrand_VehicleBrand_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleParameter_VehicleBrand_descriptor();
inline const ::std::string& VehicleParameter_VehicleBrand_Name(VehicleParameter_VehicleBrand value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleParameter_VehicleBrand_descriptor(), value);
}
inline bool VehicleParameter_VehicleBrand_Parse(
    const ::std::string& name, VehicleParameter_VehicleBrand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleParameter_VehicleBrand>(
    VehicleParameter_VehicleBrand_descriptor(), name, value);
}
// ===================================================================

class VehicleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.VehicleParameter) */ {
 public:
  VehicleParameter();
  virtual ~VehicleParameter();

  VehicleParameter(const VehicleParameter& from);

  inline VehicleParameter& operator=(const VehicleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleParameter& default_instance();

  void Swap(VehicleParameter* other);

  // implements Message ----------------------------------------------

  inline VehicleParameter* New() const { return New(NULL); }

  VehicleParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleParameter& from);
  void MergeFrom(const VehicleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VehicleParameter_VehicleBrand VehicleBrand;
  static const VehicleBrand LINCOLN_MKZ =
    VehicleParameter_VehicleBrand_LINCOLN_MKZ;
  static const VehicleBrand GEM =
    VehicleParameter_VehicleBrand_GEM;
  static inline bool VehicleBrand_IsValid(int value) {
    return VehicleParameter_VehicleBrand_IsValid(value);
  }
  static const VehicleBrand VehicleBrand_MIN =
    VehicleParameter_VehicleBrand_VehicleBrand_MIN;
  static const VehicleBrand VehicleBrand_MAX =
    VehicleParameter_VehicleBrand_VehicleBrand_MAX;
  static const int VehicleBrand_ARRAYSIZE =
    VehicleParameter_VehicleBrand_VehicleBrand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VehicleBrand_descriptor() {
    return VehicleParameter_VehicleBrand_descriptor();
  }
  static inline const ::std::string& VehicleBrand_Name(VehicleBrand value) {
    return VehicleParameter_VehicleBrand_Name(value);
  }
  static inline bool VehicleBrand_Parse(const ::std::string& name,
      VehicleBrand* value) {
    return VehicleParameter_VehicleBrand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
  bool has_brand() const;
  void clear_brand();
  static const int kBrandFieldNumber = 1;
  ::apollo::canbus::VehicleParameter_VehicleBrand brand() const;
  void set_brand(::apollo::canbus::VehicleParameter_VehicleBrand value);

  // optional double max_engine_pedal = 2;
  bool has_max_engine_pedal() const;
  void clear_max_engine_pedal();
  static const int kMaxEnginePedalFieldNumber = 2;
  double max_engine_pedal() const;
  void set_max_engine_pedal(double value);

  // optional int32 max_enable_fail_attempt = 3;
  bool has_max_enable_fail_attempt() const;
  void clear_max_enable_fail_attempt();
  static const int kMaxEnableFailAttemptFieldNumber = 3;
  ::google::protobuf::int32 max_enable_fail_attempt() const;
  void set_max_enable_fail_attempt(::google::protobuf::int32 value);

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  bool has_driving_mode() const;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 4;
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.VehicleParameter)
 private:
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_max_engine_pedal();
  inline void clear_has_max_engine_pedal();
  inline void set_has_max_enable_fail_attempt();
  inline void clear_has_max_enable_fail_attempt();
  inline void set_has_driving_mode();
  inline void clear_has_driving_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_engine_pedal_;
  int brand_;
  ::google::protobuf::int32 max_enable_fail_attempt_;
  int driving_mode_;
  friend void  protobuf_AddDesc_canbus_2fvehicle_5fparameter_2eproto();
  friend void protobuf_AssignDesc_canbus_2fvehicle_5fparameter_2eproto();
  friend void protobuf_ShutdownFile_canbus_2fvehicle_5fparameter_2eproto();

  void InitAsDefaultInstance();
  static VehicleParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleParameter

// optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
inline bool VehicleParameter::has_brand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleParameter::set_has_brand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleParameter::clear_has_brand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleParameter::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
inline ::apollo::canbus::VehicleParameter_VehicleBrand VehicleParameter::brand() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.brand)
  return static_cast< ::apollo::canbus::VehicleParameter_VehicleBrand >(brand_);
}
inline void VehicleParameter::set_brand(::apollo::canbus::VehicleParameter_VehicleBrand value) {
  assert(::apollo::canbus::VehicleParameter_VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.brand)
}

// optional double max_engine_pedal = 2;
inline bool VehicleParameter::has_max_engine_pedal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleParameter::set_has_max_engine_pedal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleParameter::clear_has_max_engine_pedal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleParameter::clear_max_engine_pedal() {
  max_engine_pedal_ = 0;
  clear_has_max_engine_pedal();
}
inline double VehicleParameter::max_engine_pedal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.max_engine_pedal)
  return max_engine_pedal_;
}
inline void VehicleParameter::set_max_engine_pedal(double value) {
  set_has_max_engine_pedal();
  max_engine_pedal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.max_engine_pedal)
}

// optional int32 max_enable_fail_attempt = 3;
inline bool VehicleParameter::has_max_enable_fail_attempt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleParameter::set_has_max_enable_fail_attempt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleParameter::clear_has_max_enable_fail_attempt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleParameter::clear_max_enable_fail_attempt() {
  max_enable_fail_attempt_ = 0;
  clear_has_max_enable_fail_attempt();
}
inline ::google::protobuf::int32 VehicleParameter::max_enable_fail_attempt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.max_enable_fail_attempt)
  return max_enable_fail_attempt_;
}
inline void VehicleParameter::set_max_enable_fail_attempt(::google::protobuf::int32 value) {
  set_has_max_enable_fail_attempt();
  max_enable_fail_attempt_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.max_enable_fail_attempt)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
inline bool VehicleParameter::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleParameter::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleParameter::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleParameter::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
inline ::apollo::canbus::Chassis_DrivingMode VehicleParameter::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void VehicleParameter::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.driving_mode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::canbus::VehicleParameter_VehicleBrand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::VehicleParameter_VehicleBrand>() {
  return ::apollo::canbus::VehicleParameter_VehicleBrand_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_canbus_2fvehicle_5fparameter_2eproto__INCLUDED
