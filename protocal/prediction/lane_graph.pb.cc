// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/lane_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prediction/lane_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace prediction {

namespace {

const ::google::protobuf::Descriptor* LanePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LanePoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LanePoint_ScenarioType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LaneSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* NearbyObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NearbyObstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneSequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneSequence_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneSequence_Features_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneSequence_Features_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneSequence_BehaviorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LaneGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneGraph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prediction_2flane_5fgraph_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prediction_2flane_5fgraph_2eproto() {
  protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prediction/lane_graph.proto");
  GOOGLE_CHECK(file != NULL);
  LanePoint_descriptor_ = file->message_type(0);
  static const int LanePoint_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, relative_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, relative_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, angle_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, scenario_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, speed_limit_),
  };
  LanePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LanePoint_descriptor_,
      LanePoint::default_instance_,
      LanePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(LanePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, _internal_metadata_),
      -1);
  LanePoint_ScenarioType_descriptor_ = LanePoint_descriptor_->enum_type(0);
  LaneSegment_descriptor_ = file->message_type(1);
  static const int LaneSegment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, start_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, end_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, lane_turn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, lane_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, total_length_),
  };
  LaneSegment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneSegment_descriptor_,
      LaneSegment::default_instance_,
      LaneSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneSegment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _internal_metadata_),
      -1);
  NearbyObstacle_descriptor_ = file->message_type(2);
  static const int NearbyObstacle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, l_),
  };
  NearbyObstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NearbyObstacle_descriptor_,
      NearbyObstacle::default_instance_,
      NearbyObstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, _has_bits_[0]),
      -1,
      -1,
      sizeof(NearbyObstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, _internal_metadata_),
      -1);
  LaneSequence_descriptor_ = file->message_type(3);
  static const int LaneSequence_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, lane_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, lane_segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, nearby_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, path_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, behavior_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, vehicle_on_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, curr_lane_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, left_neighbor_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, right_neighbor_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, left_nearby_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, right_nearby_obstacle_),
  };
  LaneSequence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneSequence_descriptor_,
      LaneSequence::default_instance_,
      LaneSequence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneSequence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, _internal_metadata_),
      -1);
  LaneSequence_Features_descriptor_ = LaneSequence_descriptor_->nested_type(0);
  static const int LaneSequence_Features_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence_Features, mlp_features_),
  };
  LaneSequence_Features_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneSequence_Features_descriptor_,
      LaneSequence_Features::default_instance_,
      LaneSequence_Features_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence_Features, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneSequence_Features),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence_Features, _internal_metadata_),
      -1);
  LaneSequence_BehaviorType_descriptor_ = LaneSequence_descriptor_->enum_type(0);
  LaneGraph_descriptor_ = file->message_type(4);
  static const int LaneGraph_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneGraph, lane_sequence_),
  };
  LaneGraph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaneGraph_descriptor_,
      LaneGraph::default_instance_,
      LaneGraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneGraph, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaneGraph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneGraph, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prediction_2flane_5fgraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LanePoint_descriptor_, &LanePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneSegment_descriptor_, &LaneSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NearbyObstacle_descriptor_, &NearbyObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneSequence_descriptor_, &LaneSequence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneSequence_Features_descriptor_, &LaneSequence_Features::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaneGraph_descriptor_, &LaneGraph::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prediction_2flane_5fgraph_2eproto() {
  delete LanePoint::default_instance_;
  delete LanePoint_reflection_;
  delete LaneSegment::default_instance_;
  delete LaneSegment_reflection_;
  delete NearbyObstacle::default_instance_;
  delete NearbyObstacle_reflection_;
  delete LaneSequence::default_instance_;
  delete LaneSequence_reflection_;
  delete LaneSequence_Features::default_instance_;
  delete LaneSequence_Features_reflection_;
  delete LaneGraph::default_instance_;
  delete LaneGraph_reflection_;
}

void protobuf_AddDesc_prediction_2flane_5fgraph_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prediction_2flane_5fgraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fgeometry_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033prediction/lane_graph.proto\022\021apollo.pr"
    "ediction\032\025common/geometry.proto\032\026common/"
    "pnc_point.proto\"\304\002\n\tLanePoint\022(\n\010positio"
    "n\030\001 \001(\0132\026.apollo.common.Point3D\022\022\n\007headi"
    "ng\030\002 \001(\001:\0010\022\020\n\005width\030\003 \001(\001:\0010\022\025\n\nrelativ"
    "e_s\030\004 \001(\001:\0010\022\025\n\nrelative_l\030\005 \001(\001:\0010\022\025\n\na"
    "ngle_diff\030\006 \001(\001:\0010\022\020\n\005kappa\030\007 \001(\001:\0010\022@\n\r"
    "scenario_type\030\010 \001(\0162).apollo.prediction."
    "LanePoint.ScenarioType\022\023\n\013speed_limit\030\t "
    "\001(\001\"9\n\014ScenarioType\022\016\n\nURBAN_ROAD\020\000\022\014\n\010J"
    "UNCTION\020\001\022\013\n\007HIGHWAY\020\002\"\252\001\n\013LaneSegment\022\017"
    "\n\007lane_id\030\001 \001(\t\022\022\n\007start_s\030\002 \001(\001:\0010\022\020\n\005e"
    "nd_s\030\003 \001(\001:\0010\022\031\n\016lane_turn_type\030\004 \001(\r:\0010"
    "\0220\n\nlane_point\030\005 \003(\0132\034.apollo.prediction"
    ".LanePoint\022\027\n\014total_length\030\006 \001(\001:\0010\"2\n\016N"
    "earbyObstacle\022\n\n\002id\030\001 \001(\005\022\t\n\001s\030\002 \001(\001\022\t\n\001"
    "l\030\003 \001(\001\"\220\007\n\014LaneSequence\022\030\n\020lane_sequenc"
    "e_id\030\001 \001(\005\0224\n\014lane_segment\030\002 \003(\0132\036.apoll"
    "o.prediction.LaneSegment\022:\n\017nearby_obsta"
    "cle\030\003 \003(\0132!.apollo.prediction.NearbyObst"
    "acle\022:\n\010features\030\004 \001(\0132(.apollo.predicti"
    "on.LaneSequence.Features\022\020\n\005label\030\005 \001(\005:"
    "\0010\022\026\n\013probability\030\006 \001(\001:\0010\022\027\n\014accelerati"
    "on\030\007 \001(\001:\0010\022,\n\npath_point\030\010 \003(\0132\030.apollo"
    ".common.PathPoint\022C\n\rbehavior_type\030\t \001(\016"
    "2,.apollo.prediction.LaneSequence.Behavi"
    "orType\022\027\n\017vehicle_on_lane\030\n \001(\010\0225\n\017curr_"
    "lane_point\030\013 \003(\0132\034.apollo.prediction.Lan"
    "ePoint\0229\n\023left_neighbor_point\030\014 \003(\0132\034.ap"
    "ollo.prediction.LanePoint\022:\n\024right_neigh"
    "bor_point\030\r \003(\0132\034.apollo.prediction.Lane"
    "Point\022\?\n\024left_nearby_obstacle\030\016 \003(\0132!.ap"
    "ollo.prediction.NearbyObstacle\022@\n\025right_"
    "nearby_obstacle\030\017 \003(\0132!.apollo.predictio"
    "n.NearbyObstacle\032 \n\010Features\022\024\n\014mlp_feat"
    "ures\030\001 \003(\001\"\225\001\n\014BehaviorType\022\021\n\rNOT_GOTO_"
    "LANE\020\001\022\022\n\016CONSTANT_SPEED\020\002\022\026\n\022SMALL_ACCE"
    "LERATION\020\003\022\026\n\022LARGE_ACCELERATION\020\004\022\026\n\022SM"
    "ALL_DECELERATION\020\005\022\026\n\022LARGE_DECELERATION"
    "\020\006\"C\n\tLaneGraph\0226\n\rlane_sequence\030\001 \003(\0132\037"
    ".apollo.prediction.LaneSequence", 1631);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction/lane_graph.proto", &protobuf_RegisterTypes);
  LanePoint::default_instance_ = new LanePoint();
  LaneSegment::default_instance_ = new LaneSegment();
  NearbyObstacle::default_instance_ = new NearbyObstacle();
  LaneSequence::default_instance_ = new LaneSequence();
  LaneSequence_Features::default_instance_ = new LaneSequence_Features();
  LaneGraph::default_instance_ = new LaneGraph();
  LanePoint::default_instance_->InitAsDefaultInstance();
  LaneSegment::default_instance_->InitAsDefaultInstance();
  NearbyObstacle::default_instance_->InitAsDefaultInstance();
  LaneSequence::default_instance_->InitAsDefaultInstance();
  LaneSequence_Features::default_instance_->InitAsDefaultInstance();
  LaneGraph::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prediction_2flane_5fgraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prediction_2flane_5fgraph_2eproto {
  StaticDescriptorInitializer_prediction_2flane_5fgraph_2eproto() {
    protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  }
} static_descriptor_initializer_prediction_2flane_5fgraph_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LanePoint_ScenarioType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanePoint_ScenarioType_descriptor_;
}
bool LanePoint_ScenarioType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LanePoint_ScenarioType LanePoint::URBAN_ROAD;
const LanePoint_ScenarioType LanePoint::JUNCTION;
const LanePoint_ScenarioType LanePoint::HIGHWAY;
const LanePoint_ScenarioType LanePoint::ScenarioType_MIN;
const LanePoint_ScenarioType LanePoint::ScenarioType_MAX;
const int LanePoint::ScenarioType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanePoint::kPositionFieldNumber;
const int LanePoint::kHeadingFieldNumber;
const int LanePoint::kWidthFieldNumber;
const int LanePoint::kRelativeSFieldNumber;
const int LanePoint::kRelativeLFieldNumber;
const int LanePoint::kAngleDiffFieldNumber;
const int LanePoint::kKappaFieldNumber;
const int LanePoint::kScenarioTypeFieldNumber;
const int LanePoint::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanePoint::LanePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LanePoint)
}

void LanePoint::InitAsDefaultInstance() {
  position_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
}

LanePoint::LanePoint(const LanePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LanePoint)
}

void LanePoint::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  heading_ = 0;
  width_ = 0;
  relative_s_ = 0;
  relative_l_ = 0;
  angle_diff_ = 0;
  kappa_ = 0;
  scenario_type_ = 0;
  speed_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanePoint::~LanePoint() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LanePoint)
  SharedDtor();
}

void LanePoint::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void LanePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanePoint_descriptor_;
}

const LanePoint& LanePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  return *default_instance_;
}

LanePoint* LanePoint::default_instance_ = NULL;

LanePoint* LanePoint::New(::google::protobuf::Arena* arena) const {
  LanePoint* n = new LanePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LanePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LanePoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LanePoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LanePoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(heading_, kappa_);
    if (has_position()) {
      if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
    }
    scenario_type_ = 0;
  }
  speed_limit_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LanePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LanePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point3D position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_heading;
        break;
      }

      // optional double heading = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_width;
        break;
      }

      // optional double width = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_relative_s;
        break;
      }

      // optional double relative_s = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_relative_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_s_)));
          set_has_relative_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_relative_l;
        break;
      }

      // optional double relative_l = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_relative_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_l_)));
          set_has_relative_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_angle_diff;
        break;
      }

      // optional double angle_diff = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_angle_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_diff_)));
          set_has_angle_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_kappa;
        break;
      }

      // optional double kappa = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
          set_has_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_scenario_type;
        break;
      }

      // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
      case 8: {
        if (tag == 64) {
         parse_scenario_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::LanePoint_ScenarioType_IsValid(value)) {
            set_scenario_type(static_cast< ::apollo::prediction::LanePoint_ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_speed_limit;
        break;
      }

      // optional double speed_limit = 9;
      case 9: {
        if (tag == 73) {
         parse_speed_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
          set_has_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LanePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LanePoint)
  return false;
#undef DO_
}

void LanePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LanePoint)
  // optional .apollo.common.Point3D position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional double heading = 2 [default = 0];
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heading(), output);
  }

  // optional double width = 3 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // optional double relative_s = 4 [default = 0];
  if (has_relative_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_s(), output);
  }

  // optional double relative_l = 5 [default = 0];
  if (has_relative_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_l(), output);
  }

  // optional double angle_diff = 6 [default = 0];
  if (has_angle_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->angle_diff(), output);
  }

  // optional double kappa = 7 [default = 0];
  if (has_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->kappa(), output);
  }

  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  if (has_scenario_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->scenario_type(), output);
  }

  // optional double speed_limit = 9;
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LanePoint)
}

::google::protobuf::uint8* LanePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LanePoint)
  // optional .apollo.common.Point3D position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional double heading = 2 [default = 0];
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heading(), target);
  }

  // optional double width = 3 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // optional double relative_s = 4 [default = 0];
  if (has_relative_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_s(), target);
  }

  // optional double relative_l = 5 [default = 0];
  if (has_relative_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_l(), target);
  }

  // optional double angle_diff = 6 [default = 0];
  if (has_angle_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->angle_diff(), target);
  }

  // optional double kappa = 7 [default = 0];
  if (has_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->kappa(), target);
  }

  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  if (has_scenario_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->scenario_type(), target);
  }

  // optional double speed_limit = 9;
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LanePoint)
  return target;
}

int LanePoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LanePoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Point3D position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional double heading = 2 [default = 0];
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double width = 3 [default = 0];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double relative_s = 4 [default = 0];
    if (has_relative_s()) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 5 [default = 0];
    if (has_relative_l()) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 6 [default = 0];
    if (has_angle_diff()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 7 [default = 0];
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
    if (has_scenario_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scenario_type());
    }

  }
  // optional double speed_limit = 9;
  if (has_speed_limit()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LanePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LanePoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LanePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LanePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LanePoint)
    MergeFrom(*source);
  }
}

void LanePoint::MergeFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LanePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_relative_s()) {
      set_relative_s(from.relative_s());
    }
    if (from.has_relative_l()) {
      set_relative_l(from.relative_l());
    }
    if (from.has_angle_diff()) {
      set_angle_diff(from.angle_diff());
    }
    if (from.has_kappa()) {
      set_kappa(from.kappa());
    }
    if (from.has_scenario_type()) {
      set_scenario_type(from.scenario_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speed_limit()) {
      set_speed_limit(from.speed_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LanePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanePoint::CopyFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePoint::IsInitialized() const {

  return true;
}

void LanePoint::Swap(LanePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanePoint::InternalSwap(LanePoint* other) {
  std::swap(position_, other->position_);
  std::swap(heading_, other->heading_);
  std::swap(width_, other->width_);
  std::swap(relative_s_, other->relative_s_);
  std::swap(relative_l_, other->relative_l_);
  std::swap(angle_diff_, other->angle_diff_);
  std::swap(kappa_, other->kappa_);
  std::swap(scenario_type_, other->scenario_type_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LanePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LanePoint_descriptor_;
  metadata.reflection = LanePoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LanePoint

// optional .apollo.common.Point3D position = 1;
bool LanePoint::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LanePoint::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void LanePoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void LanePoint::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
const ::apollo::common::Point3D& LanePoint::position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::apollo::common::Point3D* LanePoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LanePoint.position)
  return position_;
}
::apollo::common::Point3D* LanePoint::release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LanePoint.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
void LanePoint::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LanePoint.position)
}

// optional double heading = 2 [default = 0];
bool LanePoint::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LanePoint::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void LanePoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void LanePoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double LanePoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.heading)
  return heading_;
}
 void LanePoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.heading)
}

// optional double width = 3 [default = 0];
bool LanePoint::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LanePoint::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void LanePoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void LanePoint::clear_width() {
  width_ = 0;
  clear_has_width();
}
 double LanePoint::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.width)
  return width_;
}
 void LanePoint::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.width)
}

// optional double relative_s = 4 [default = 0];
bool LanePoint::has_relative_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LanePoint::set_has_relative_s() {
  _has_bits_[0] |= 0x00000008u;
}
void LanePoint::clear_has_relative_s() {
  _has_bits_[0] &= ~0x00000008u;
}
void LanePoint::clear_relative_s() {
  relative_s_ = 0;
  clear_has_relative_s();
}
 double LanePoint::relative_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_s)
  return relative_s_;
}
 void LanePoint::set_relative_s(double value) {
  set_has_relative_s();
  relative_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_s)
}

// optional double relative_l = 5 [default = 0];
bool LanePoint::has_relative_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LanePoint::set_has_relative_l() {
  _has_bits_[0] |= 0x00000010u;
}
void LanePoint::clear_has_relative_l() {
  _has_bits_[0] &= ~0x00000010u;
}
void LanePoint::clear_relative_l() {
  relative_l_ = 0;
  clear_has_relative_l();
}
 double LanePoint::relative_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_l)
  return relative_l_;
}
 void LanePoint::set_relative_l(double value) {
  set_has_relative_l();
  relative_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_l)
}

// optional double angle_diff = 6 [default = 0];
bool LanePoint::has_angle_diff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LanePoint::set_has_angle_diff() {
  _has_bits_[0] |= 0x00000020u;
}
void LanePoint::clear_has_angle_diff() {
  _has_bits_[0] &= ~0x00000020u;
}
void LanePoint::clear_angle_diff() {
  angle_diff_ = 0;
  clear_has_angle_diff();
}
 double LanePoint::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.angle_diff)
  return angle_diff_;
}
 void LanePoint::set_angle_diff(double value) {
  set_has_angle_diff();
  angle_diff_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.angle_diff)
}

// optional double kappa = 7 [default = 0];
bool LanePoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LanePoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000040u;
}
void LanePoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000040u;
}
void LanePoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
 double LanePoint::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.kappa)
  return kappa_;
}
 void LanePoint::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.kappa)
}

// optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
bool LanePoint::has_scenario_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LanePoint::set_has_scenario_type() {
  _has_bits_[0] |= 0x00000080u;
}
void LanePoint::clear_has_scenario_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void LanePoint::clear_scenario_type() {
  scenario_type_ = 0;
  clear_has_scenario_type();
}
 ::apollo::prediction::LanePoint_ScenarioType LanePoint::scenario_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.scenario_type)
  return static_cast< ::apollo::prediction::LanePoint_ScenarioType >(scenario_type_);
}
 void LanePoint::set_scenario_type(::apollo::prediction::LanePoint_ScenarioType value) {
  assert(::apollo::prediction::LanePoint_ScenarioType_IsValid(value));
  set_has_scenario_type();
  scenario_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.scenario_type)
}

// optional double speed_limit = 9;
bool LanePoint::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LanePoint::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000100u;
}
void LanePoint::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
void LanePoint::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
 double LanePoint::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.speed_limit)
  return speed_limit_;
}
 void LanePoint::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSegment::kLaneIdFieldNumber;
const int LaneSegment::kStartSFieldNumber;
const int LaneSegment::kEndSFieldNumber;
const int LaneSegment::kLaneTurnTypeFieldNumber;
const int LaneSegment::kLanePointFieldNumber;
const int LaneSegment::kTotalLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSegment::LaneSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSegment)
}

void LaneSegment::InitAsDefaultInstance() {
}

LaneSegment::LaneSegment(const LaneSegment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSegment)
}

void LaneSegment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_s_ = 0;
  end_s_ = 0;
  lane_turn_type_ = 0u;
  total_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSegment)
  SharedDtor();
}

void LaneSegment::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LaneSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneSegment_descriptor_;
}

const LaneSegment& LaneSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  return *default_instance_;
}

LaneSegment* LaneSegment::default_instance_ = NULL;

LaneSegment* LaneSegment::New(::google::protobuf::Arena* arena) const {
  LaneSegment* n = new LaneSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSegment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LaneSegment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LaneSegment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(start_s_, end_s_);
    ZR_(total_length_, lane_turn_type_);
    if (has_lane_id()) {
      lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  lane_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.LaneSegment.lane_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_start_s;
        break;
      }

      // optional double start_s = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_start_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
          set_has_start_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_end_s;
        break;
      }

      // optional double end_s = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_end_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
          set_has_end_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lane_turn_type;
        break;
      }

      // optional uint32 lane_turn_type = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_lane_turn_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_turn_type_)));
          set_has_lane_turn_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lane_point;
        break;
      }

      // repeated .apollo.prediction.LanePoint lane_point = 5;
      case 5: {
        if (tag == 42) {
         parse_lane_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_lane_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(49)) goto parse_total_length;
        break;
      }

      // optional double total_length = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_total_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_length_)));
          set_has_total_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSegment)
  return false;
#undef DO_
}

void LaneSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSegment)
  // optional string lane_id = 1;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneSegment.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional double start_s = 2 [default = 0];
  if (has_start_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3 [default = 0];
  if (has_end_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // optional uint32 lane_turn_type = 4 [default = 0];
  if (has_lane_turn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane_turn_type(), output);
  }

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  for (unsigned int i = 0, n = this->lane_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lane_point(i), output);
  }

  // optional double total_length = 6 [default = 0];
  if (has_total_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->total_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSegment)
}

::google::protobuf::uint8* LaneSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSegment)
  // optional string lane_id = 1;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneSegment.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional double start_s = 2 [default = 0];
  if (has_start_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3 [default = 0];
  if (has_end_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // optional uint32 lane_turn_type = 4 [default = 0];
  if (has_lane_turn_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane_turn_type(), target);
  }

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  for (unsigned int i = 0, n = this->lane_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->lane_point(i), false, target);
  }

  // optional double total_length = 6 [default = 0];
  if (has_total_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->total_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSegment)
  return target;
}

int LaneSegment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSegment)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 47u) {
    // optional string lane_id = 1;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double start_s = 2 [default = 0];
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3 [default = 0];
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 4 [default = 0];
    if (has_lane_turn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_turn_type());
    }

    // optional double total_length = 6 [default = 0];
    if (has_total_length()) {
      total_size += 1 + 8;
    }

  }
  // repeated .apollo.prediction.LanePoint lane_point = 5;
  total_size += 1 * this->lane_point_size();
  for (int i = 0; i < this->lane_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneSegment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lane_point_.MergeFrom(from.lane_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lane_id()) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (from.has_start_s()) {
      set_start_s(from.start_s());
    }
    if (from.has_end_s()) {
      set_end_s(from.end_s());
    }
    if (from.has_lane_turn_type()) {
      set_lane_turn_type(from.lane_turn_type());
    }
    if (from.has_total_length()) {
      set_total_length(from.total_length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {

  return true;
}

void LaneSegment::Swap(LaneSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSegment::InternalSwap(LaneSegment* other) {
  lane_id_.Swap(&other->lane_id_);
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(lane_turn_type_, other->lane_turn_type_);
  lane_point_.UnsafeArenaSwap(&other->lane_point_);
  std::swap(total_length_, other->total_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneSegment_descriptor_;
  metadata.reflection = LaneSegment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneSegment

// optional string lane_id = 1;
bool LaneSegment::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneSegment::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneSegment::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneSegment::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
 const ::std::string& LaneSegment::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaneSegment::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_id)
}
 void LaneSegment::set_lane_id(const char* value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LaneSegment.lane_id)
}
 void LaneSegment::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LaneSegment.lane_id)
}
 ::std::string* LaneSegment::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LaneSegment::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSegment.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaneSegment::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSegment.lane_id)
}

// optional double start_s = 2 [default = 0];
bool LaneSegment::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneSegment::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneSegment::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneSegment::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
 double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.start_s)
  return start_s_;
}
 void LaneSegment::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.start_s)
}

// optional double end_s = 3 [default = 0];
bool LaneSegment::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneSegment::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneSegment::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneSegment::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
 double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.end_s)
  return end_s_;
}
 void LaneSegment::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.end_s)
}

// optional uint32 lane_turn_type = 4 [default = 0];
bool LaneSegment::has_lane_turn_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneSegment::set_has_lane_turn_type() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneSegment::clear_has_lane_turn_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneSegment::clear_lane_turn_type() {
  lane_turn_type_ = 0u;
  clear_has_lane_turn_type();
}
 ::google::protobuf::uint32 LaneSegment::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_turn_type)
  return lane_turn_type_;
}
 void LaneSegment::set_lane_turn_type(::google::protobuf::uint32 value) {
  set_has_lane_turn_type();
  lane_turn_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_turn_type)
}

// repeated .apollo.prediction.LanePoint lane_point = 5;
int LaneSegment::lane_point_size() const {
  return lane_point_.size();
}
void LaneSegment::clear_lane_point() {
  lane_point_.Clear();
}
const ::apollo::prediction::LanePoint& LaneSegment::lane_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Get(index);
}
::apollo::prediction::LanePoint* LaneSegment::mutable_lane_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Mutable(index);
}
::apollo::prediction::LanePoint* LaneSegment::add_lane_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSegment::mutable_lane_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSegment.lane_point)
  return &lane_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSegment::lane_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSegment.lane_point)
  return lane_point_;
}

// optional double total_length = 6 [default = 0];
bool LaneSegment::has_total_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneSegment::set_has_total_length() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneSegment::clear_has_total_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneSegment::clear_total_length() {
  total_length_ = 0;
  clear_has_total_length();
}
 double LaneSegment::total_length() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.total_length)
  return total_length_;
}
 void LaneSegment::set_total_length(double value) {
  set_has_total_length();
  total_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.total_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NearbyObstacle::kIdFieldNumber;
const int NearbyObstacle::kSFieldNumber;
const int NearbyObstacle::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NearbyObstacle::NearbyObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.NearbyObstacle)
}

void NearbyObstacle::InitAsDefaultInstance() {
}

NearbyObstacle::NearbyObstacle(const NearbyObstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.NearbyObstacle)
}

void NearbyObstacle::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  s_ = 0;
  l_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NearbyObstacle::~NearbyObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.NearbyObstacle)
  SharedDtor();
}

void NearbyObstacle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NearbyObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NearbyObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NearbyObstacle_descriptor_;
}

const NearbyObstacle& NearbyObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  return *default_instance_;
}

NearbyObstacle* NearbyObstacle::default_instance_ = NULL;

NearbyObstacle* NearbyObstacle::New(::google::protobuf::Arena* arena) const {
  NearbyObstacle* n = new NearbyObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NearbyObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.NearbyObstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NearbyObstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NearbyObstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(s_, id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NearbyObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.NearbyObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_s;
        break;
      }

      // optional double s = 2;
      case 2: {
        if (tag == 17) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_l;
        break;
      }

      // optional double l = 3;
      case 3: {
        if (tag == 25) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.NearbyObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.NearbyObstacle)
  return false;
#undef DO_
}

void NearbyObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.NearbyObstacle)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double s = 2;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // optional double l = 3;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.NearbyObstacle)
}

::google::protobuf::uint8* NearbyObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.NearbyObstacle)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double s = 2;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // optional double l = 3;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.NearbyObstacle)
  return target;
}

int NearbyObstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.NearbyObstacle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional double s = 2;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 3;
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NearbyObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.NearbyObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NearbyObstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NearbyObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.NearbyObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.NearbyObstacle)
    MergeFrom(*source);
  }
}

void NearbyObstacle::MergeFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.NearbyObstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NearbyObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.NearbyObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearbyObstacle::CopyFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.NearbyObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyObstacle::IsInitialized() const {

  return true;
}

void NearbyObstacle::Swap(NearbyObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NearbyObstacle::InternalSwap(NearbyObstacle* other) {
  std::swap(id_, other->id_);
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NearbyObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NearbyObstacle_descriptor_;
  metadata.reflection = NearbyObstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NearbyObstacle

// optional int32 id = 1;
bool NearbyObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NearbyObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NearbyObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NearbyObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 NearbyObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.id)
  return id_;
}
 void NearbyObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.id)
}

// optional double s = 2;
bool NearbyObstacle::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NearbyObstacle::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
void NearbyObstacle::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void NearbyObstacle::clear_s() {
  s_ = 0;
  clear_has_s();
}
 double NearbyObstacle::s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.s)
  return s_;
}
 void NearbyObstacle::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.s)
}

// optional double l = 3;
bool NearbyObstacle::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NearbyObstacle::set_has_l() {
  _has_bits_[0] |= 0x00000004u;
}
void NearbyObstacle::clear_has_l() {
  _has_bits_[0] &= ~0x00000004u;
}
void NearbyObstacle::clear_l() {
  l_ = 0;
  clear_has_l();
}
 double NearbyObstacle::l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.l)
  return l_;
}
 void NearbyObstacle::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LaneSequence_BehaviorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneSequence_BehaviorType_descriptor_;
}
bool LaneSequence_BehaviorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneSequence_BehaviorType LaneSequence::NOT_GOTO_LANE;
const LaneSequence_BehaviorType LaneSequence::CONSTANT_SPEED;
const LaneSequence_BehaviorType LaneSequence::SMALL_ACCELERATION;
const LaneSequence_BehaviorType LaneSequence::LARGE_ACCELERATION;
const LaneSequence_BehaviorType LaneSequence::SMALL_DECELERATION;
const LaneSequence_BehaviorType LaneSequence::LARGE_DECELERATION;
const LaneSequence_BehaviorType LaneSequence::BehaviorType_MIN;
const LaneSequence_BehaviorType LaneSequence::BehaviorType_MAX;
const int LaneSequence::BehaviorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSequence_Features::kMlpFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSequence_Features::LaneSequence_Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSequence.Features)
}

void LaneSequence_Features::InitAsDefaultInstance() {
}

LaneSequence_Features::LaneSequence_Features(const LaneSequence_Features& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSequence.Features)
}

void LaneSequence_Features::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneSequence_Features::~LaneSequence_Features() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSequence.Features)
  SharedDtor();
}

void LaneSequence_Features::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneSequence_Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSequence_Features::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneSequence_Features_descriptor_;
}

const LaneSequence_Features& LaneSequence_Features::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  return *default_instance_;
}

LaneSequence_Features* LaneSequence_Features::default_instance_ = NULL;

LaneSequence_Features* LaneSequence_Features::New(::google::protobuf::Arena* arena) const {
  LaneSequence_Features* n = new LaneSequence_Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSequence_Features::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSequence.Features)
  mlp_features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneSequence_Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSequence.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double mlp_features = 1;
      case 1: {
        if (tag == 9) {
         parse_mlp_features:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_mlp_features())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_mlp_features())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_mlp_features;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSequence.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSequence.Features)
  return false;
#undef DO_
}

void LaneSequence_Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSequence.Features)
  // repeated double mlp_features = 1;
  for (int i = 0; i < this->mlp_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->mlp_features(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSequence.Features)
}

::google::protobuf::uint8* LaneSequence_Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSequence.Features)
  // repeated double mlp_features = 1;
  for (int i = 0; i < this->mlp_features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->mlp_features(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSequence.Features)
  return target;
}

int LaneSequence_Features::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSequence.Features)
  int total_size = 0;

  // repeated double mlp_features = 1;
  {
    int data_size = 0;
    data_size = 8 * this->mlp_features_size();
    total_size += 1 * this->mlp_features_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSequence_Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSequence.Features)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneSequence_Features* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSequence_Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSequence.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSequence.Features)
    MergeFrom(*source);
  }
}

void LaneSequence_Features::MergeFrom(const LaneSequence_Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSequence.Features)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mlp_features_.MergeFrom(from.mlp_features_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneSequence_Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSequence.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSequence_Features::CopyFrom(const LaneSequence_Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSequence.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSequence_Features::IsInitialized() const {

  return true;
}

void LaneSequence_Features::Swap(LaneSequence_Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSequence_Features::InternalSwap(LaneSequence_Features* other) {
  mlp_features_.UnsafeArenaSwap(&other->mlp_features_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSequence_Features::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneSequence_Features_descriptor_;
  metadata.reflection = LaneSequence_Features_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSequence::kLaneSequenceIdFieldNumber;
const int LaneSequence::kLaneSegmentFieldNumber;
const int LaneSequence::kNearbyObstacleFieldNumber;
const int LaneSequence::kFeaturesFieldNumber;
const int LaneSequence::kLabelFieldNumber;
const int LaneSequence::kProbabilityFieldNumber;
const int LaneSequence::kAccelerationFieldNumber;
const int LaneSequence::kPathPointFieldNumber;
const int LaneSequence::kBehaviorTypeFieldNumber;
const int LaneSequence::kVehicleOnLaneFieldNumber;
const int LaneSequence::kCurrLanePointFieldNumber;
const int LaneSequence::kLeftNeighborPointFieldNumber;
const int LaneSequence::kRightNeighborPointFieldNumber;
const int LaneSequence::kLeftNearbyObstacleFieldNumber;
const int LaneSequence::kRightNearbyObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSequence::LaneSequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSequence)
}

void LaneSequence::InitAsDefaultInstance() {
  features_ = const_cast< ::apollo::prediction::LaneSequence_Features*>(&::apollo::prediction::LaneSequence_Features::default_instance());
}

LaneSequence::LaneSequence(const LaneSequence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSequence)
}

void LaneSequence::SharedCtor() {
  _cached_size_ = 0;
  lane_sequence_id_ = 0;
  features_ = NULL;
  label_ = 0;
  probability_ = 0;
  acceleration_ = 0;
  behavior_type_ = 1;
  vehicle_on_lane_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneSequence::~LaneSequence() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSequence)
  SharedDtor();
}

void LaneSequence::SharedDtor() {
  if (this != default_instance_) {
    delete features_;
  }
}

void LaneSequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneSequence_descriptor_;
}

const LaneSequence& LaneSequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  return *default_instance_;
}

LaneSequence* LaneSequence::default_instance_ = NULL;

LaneSequence* LaneSequence::New(::google::protobuf::Arena* arena) const {
  LaneSequence* n = new LaneSequence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSequence)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LaneSequence, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LaneSequence*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 121u) {
    ZR_(lane_sequence_id_, label_);
    ZR_(probability_, acceleration_);
    if (has_features()) {
      if (features_ != NULL) features_->::apollo::prediction::LaneSequence_Features::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    behavior_type_ = 1;
    vehicle_on_lane_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  lane_segment_.Clear();
  nearby_obstacle_.Clear();
  path_point_.Clear();
  curr_lane_point_.Clear();
  left_neighbor_point_.Clear();
  right_neighbor_point_.Clear();
  left_nearby_obstacle_.Clear();
  right_nearby_obstacle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_sequence_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_sequence_id_)));
          set_has_lane_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lane_segment;
        break;
      }

      // repeated .apollo.prediction.LaneSegment lane_segment = 2;
      case 2: {
        if (tag == 18) {
         parse_lane_segment:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_lane_segment;
        if (input->ExpectTag(26)) goto parse_loop_nearby_obstacle;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nearby_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nearby_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_nearby_obstacle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_features;
        break;
      }

      // optional .apollo.prediction.LaneSequence.Features features = 4;
      case 4: {
        if (tag == 34) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_label;
        break;
      }

      // optional int32 label = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_probability;
        break;
      }

      // optional double probability = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_acceleration;
        break;
      }

      // optional double acceleration = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_path_point;
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 8;
      case 8: {
        if (tag == 66) {
         parse_path_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_path_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_behavior_type;
        break;
      }

      // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
      case 9: {
        if (tag == 72) {
         parse_behavior_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::LaneSequence_BehaviorType_IsValid(value)) {
            set_behavior_type(static_cast< ::apollo::prediction::LaneSequence_BehaviorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vehicle_on_lane;
        break;
      }

      // optional bool vehicle_on_lane = 10;
      case 10: {
        if (tag == 80) {
         parse_vehicle_on_lane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicle_on_lane_)));
          set_has_vehicle_on_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_curr_lane_point;
        break;
      }

      // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
      case 11: {
        if (tag == 90) {
         parse_curr_lane_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_curr_lane_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_curr_lane_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_curr_lane_point;
        if (input->ExpectTag(98)) goto parse_loop_left_neighbor_point;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_left_neighbor_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_left_neighbor_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_left_neighbor_point;
        if (input->ExpectTag(106)) goto parse_loop_right_neighbor_point;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
      case 13: {
        if (tag == 106) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_right_neighbor_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_right_neighbor_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_right_neighbor_point;
        if (input->ExpectTag(114)) goto parse_loop_left_nearby_obstacle;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_left_nearby_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_left_nearby_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_left_nearby_obstacle;
        if (input->ExpectTag(122)) goto parse_loop_right_nearby_obstacle;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_right_nearby_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_right_nearby_obstacle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_right_nearby_obstacle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSequence)
  return false;
#undef DO_
}

void LaneSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSequence)
  // optional int32 lane_sequence_id = 1;
  if (has_lane_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_sequence_id(), output);
  }

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_segment(i), output);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  for (unsigned int i = 0, n = this->nearby_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nearby_obstacle(i), output);
  }

  // optional .apollo.prediction.LaneSequence.Features features = 4;
  if (has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->features_, output);
  }

  // optional int32 label = 5 [default = 0];
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // optional double probability = 6 [default = 0];
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->probability(), output);
  }

  // optional double acceleration = 7 [default = 0];
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acceleration(), output);
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->path_point(i), output);
  }

  // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
  if (has_behavior_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->behavior_type(), output);
  }

  // optional bool vehicle_on_lane = 10;
  if (has_vehicle_on_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->vehicle_on_lane(), output);
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  for (unsigned int i = 0, n = this->curr_lane_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->curr_lane_point(i), output);
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  for (unsigned int i = 0, n = this->left_neighbor_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->left_neighbor_point(i), output);
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  for (unsigned int i = 0, n = this->right_neighbor_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->right_neighbor_point(i), output);
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  for (unsigned int i = 0, n = this->left_nearby_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->left_nearby_obstacle(i), output);
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  for (unsigned int i = 0, n = this->right_nearby_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->right_nearby_obstacle(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSequence)
}

::google::protobuf::uint8* LaneSequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSequence)
  // optional int32 lane_sequence_id = 1;
  if (has_lane_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_sequence_id(), target);
  }

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_segment(i), false, target);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  for (unsigned int i = 0, n = this->nearby_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->nearby_obstacle(i), false, target);
  }

  // optional .apollo.prediction.LaneSequence.Features features = 4;
  if (has_features()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->features_, false, target);
  }

  // optional int32 label = 5 [default = 0];
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // optional double probability = 6 [default = 0];
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->probability(), target);
  }

  // optional double acceleration = 7 [default = 0];
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acceleration(), target);
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->path_point(i), false, target);
  }

  // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
  if (has_behavior_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->behavior_type(), target);
  }

  // optional bool vehicle_on_lane = 10;
  if (has_vehicle_on_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->vehicle_on_lane(), target);
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  for (unsigned int i = 0, n = this->curr_lane_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->curr_lane_point(i), false, target);
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  for (unsigned int i = 0, n = this->left_neighbor_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->left_neighbor_point(i), false, target);
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  for (unsigned int i = 0, n = this->right_neighbor_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->right_neighbor_point(i), false, target);
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  for (unsigned int i = 0, n = this->left_nearby_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->left_nearby_obstacle(i), false, target);
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  for (unsigned int i = 0, n = this->right_nearby_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->right_nearby_obstacle(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSequence)
  return target;
}

int LaneSequence::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSequence)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 121u) {
    // optional int32 lane_sequence_id = 1;
    if (has_lane_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_sequence_id());
    }

    // optional .apollo.prediction.LaneSequence.Features features = 4;
    if (has_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->features_);
    }

    // optional int32 label = 5 [default = 0];
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional double probability = 6 [default = 0];
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 7 [default = 0];
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
    if (has_behavior_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior_type());
    }

    // optional bool vehicle_on_lane = 10;
    if (has_vehicle_on_lane()) {
      total_size += 1 + 1;
    }

  }
  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  total_size += 1 * this->lane_segment_size();
  for (int i = 0; i < this->lane_segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_segment(i));
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  total_size += 1 * this->nearby_obstacle_size();
  for (int i = 0; i < this->nearby_obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nearby_obstacle(i));
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  total_size += 1 * this->path_point_size();
  for (int i = 0; i < this->path_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_point(i));
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  total_size += 1 * this->curr_lane_point_size();
  for (int i = 0; i < this->curr_lane_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curr_lane_point(i));
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  total_size += 1 * this->left_neighbor_point_size();
  for (int i = 0; i < this->left_neighbor_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_neighbor_point(i));
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  total_size += 1 * this->right_neighbor_point_size();
  for (int i = 0; i < this->right_neighbor_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->right_neighbor_point(i));
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  total_size += 1 * this->left_nearby_obstacle_size();
  for (int i = 0; i < this->left_nearby_obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_nearby_obstacle(i));
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  total_size += 1 * this->right_nearby_obstacle_size();
  for (int i = 0; i < this->right_nearby_obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->right_nearby_obstacle(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneSequence* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSequence)
    MergeFrom(*source);
  }
}

void LaneSequence::MergeFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lane_segment_.MergeFrom(from.lane_segment_);
  nearby_obstacle_.MergeFrom(from.nearby_obstacle_);
  path_point_.MergeFrom(from.path_point_);
  curr_lane_point_.MergeFrom(from.curr_lane_point_);
  left_neighbor_point_.MergeFrom(from.left_neighbor_point_);
  right_neighbor_point_.MergeFrom(from.right_neighbor_point_);
  left_nearby_obstacle_.MergeFrom(from.left_nearby_obstacle_);
  right_nearby_obstacle_.MergeFrom(from.right_nearby_obstacle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lane_sequence_id()) {
      set_lane_sequence_id(from.lane_sequence_id());
    }
    if (from.has_features()) {
      mutable_features()->::apollo::prediction::LaneSequence_Features::MergeFrom(from.features());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_behavior_type()) {
      set_behavior_type(from.behavior_type());
    }
    if (from.has_vehicle_on_lane()) {
      set_vehicle_on_lane(from.vehicle_on_lane());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSequence::CopyFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSequence::IsInitialized() const {

  return true;
}

void LaneSequence::Swap(LaneSequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSequence::InternalSwap(LaneSequence* other) {
  std::swap(lane_sequence_id_, other->lane_sequence_id_);
  lane_segment_.UnsafeArenaSwap(&other->lane_segment_);
  nearby_obstacle_.UnsafeArenaSwap(&other->nearby_obstacle_);
  std::swap(features_, other->features_);
  std::swap(label_, other->label_);
  std::swap(probability_, other->probability_);
  std::swap(acceleration_, other->acceleration_);
  path_point_.UnsafeArenaSwap(&other->path_point_);
  std::swap(behavior_type_, other->behavior_type_);
  std::swap(vehicle_on_lane_, other->vehicle_on_lane_);
  curr_lane_point_.UnsafeArenaSwap(&other->curr_lane_point_);
  left_neighbor_point_.UnsafeArenaSwap(&other->left_neighbor_point_);
  right_neighbor_point_.UnsafeArenaSwap(&other->right_neighbor_point_);
  left_nearby_obstacle_.UnsafeArenaSwap(&other->left_nearby_obstacle_);
  right_nearby_obstacle_.UnsafeArenaSwap(&other->right_nearby_obstacle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSequence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneSequence_descriptor_;
  metadata.reflection = LaneSequence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneSequence_Features

// repeated double mlp_features = 1;
int LaneSequence_Features::mlp_features_size() const {
  return mlp_features_.size();
}
void LaneSequence_Features::clear_mlp_features() {
  mlp_features_.Clear();
}
 double LaneSequence_Features::mlp_features(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.Features.mlp_features)
  return mlp_features_.Get(index);
}
 void LaneSequence_Features::set_mlp_features(int index, double value) {
  mlp_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.Features.mlp_features)
}
 void LaneSequence_Features::add_mlp_features(double value) {
  mlp_features_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.Features.mlp_features)
}
 const ::google::protobuf::RepeatedField< double >&
LaneSequence_Features::mlp_features() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.Features.mlp_features)
  return mlp_features_;
}
 ::google::protobuf::RepeatedField< double >*
LaneSequence_Features::mutable_mlp_features() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.Features.mlp_features)
  return &mlp_features_;
}

// -------------------------------------------------------------------

// LaneSequence

// optional int32 lane_sequence_id = 1;
bool LaneSequence::has_lane_sequence_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneSequence::set_has_lane_sequence_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneSequence::clear_has_lane_sequence_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneSequence::clear_lane_sequence_id() {
  lane_sequence_id_ = 0;
  clear_has_lane_sequence_id();
}
 ::google::protobuf::int32 LaneSequence::lane_sequence_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_sequence_id)
  return lane_sequence_id_;
}
 void LaneSequence::set_lane_sequence_id(::google::protobuf::int32 value) {
  set_has_lane_sequence_id();
  lane_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_sequence_id)
}

// repeated .apollo.prediction.LaneSegment lane_segment = 2;
int LaneSequence::lane_segment_size() const {
  return lane_segment_.size();
}
void LaneSequence::clear_lane_segment() {
  lane_segment_.Clear();
}
const ::apollo::prediction::LaneSegment& LaneSequence::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Get(index);
}
::apollo::prediction::LaneSegment* LaneSequence::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Mutable(index);
}
::apollo::prediction::LaneSegment* LaneSequence::add_lane_segment() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
LaneSequence::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.lane_segment)
  return &lane_segment_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
LaneSequence::lane_segment() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_;
}

// repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
int LaneSequence::nearby_obstacle_size() const {
  return nearby_obstacle_.size();
}
void LaneSequence::clear_nearby_obstacle() {
  nearby_obstacle_.Clear();
}
const ::apollo::prediction::NearbyObstacle& LaneSequence::nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Get(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::mutable_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Mutable(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::add_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return &nearby_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_;
}

// optional .apollo.prediction.LaneSequence.Features features = 4;
bool LaneSequence::has_features() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneSequence::set_has_features() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneSequence::clear_has_features() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneSequence::clear_features() {
  if (features_ != NULL) features_->::apollo::prediction::LaneSequence_Features::Clear();
  clear_has_features();
}
const ::apollo::prediction::LaneSequence_Features& LaneSequence::features() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.features)
  return features_ != NULL ? *features_ : *default_instance_->features_;
}
::apollo::prediction::LaneSequence_Features* LaneSequence::mutable_features() {
  set_has_features();
  if (features_ == NULL) {
    features_ = new ::apollo::prediction::LaneSequence_Features;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.features)
  return features_;
}
::apollo::prediction::LaneSequence_Features* LaneSequence::release_features() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSequence.features)
  clear_has_features();
  ::apollo::prediction::LaneSequence_Features* temp = features_;
  features_ = NULL;
  return temp;
}
void LaneSequence::set_allocated_features(::apollo::prediction::LaneSequence_Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    set_has_features();
  } else {
    clear_has_features();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSequence.features)
}

// optional int32 label = 5 [default = 0];
bool LaneSequence::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaneSequence::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void LaneSequence::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaneSequence::clear_label() {
  label_ = 0;
  clear_has_label();
}
 ::google::protobuf::int32 LaneSequence::label() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.label)
  return label_;
}
 void LaneSequence::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.label)
}

// optional double probability = 6 [default = 0];
bool LaneSequence::has_probability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneSequence::set_has_probability() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneSequence::clear_has_probability() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneSequence::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double LaneSequence::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.probability)
  return probability_;
}
 void LaneSequence::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.probability)
}

// optional double acceleration = 7 [default = 0];
bool LaneSequence::has_acceleration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LaneSequence::set_has_acceleration() {
  _has_bits_[0] |= 0x00000040u;
}
void LaneSequence::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000040u;
}
void LaneSequence::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
 double LaneSequence::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.acceleration)
  return acceleration_;
}
 void LaneSequence::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.acceleration)
}

// repeated .apollo.common.PathPoint path_point = 8;
int LaneSequence::path_point_size() const {
  return path_point_.size();
}
void LaneSequence::clear_path_point() {
  path_point_.Clear();
}
const ::apollo::common::PathPoint& LaneSequence::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.path_point)
  return path_point_.Get(index);
}
::apollo::common::PathPoint* LaneSequence::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.path_point)
  return path_point_.Mutable(index);
}
::apollo::common::PathPoint* LaneSequence::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.path_point)
  return path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
LaneSequence::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.path_point)
  return &path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
LaneSequence::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.path_point)
  return path_point_;
}

// optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
bool LaneSequence::has_behavior_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LaneSequence::set_has_behavior_type() {
  _has_bits_[0] |= 0x00000100u;
}
void LaneSequence::clear_has_behavior_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void LaneSequence::clear_behavior_type() {
  behavior_type_ = 1;
  clear_has_behavior_type();
}
 ::apollo::prediction::LaneSequence_BehaviorType LaneSequence::behavior_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.behavior_type)
  return static_cast< ::apollo::prediction::LaneSequence_BehaviorType >(behavior_type_);
}
 void LaneSequence::set_behavior_type(::apollo::prediction::LaneSequence_BehaviorType value) {
  assert(::apollo::prediction::LaneSequence_BehaviorType_IsValid(value));
  set_has_behavior_type();
  behavior_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.behavior_type)
}

// optional bool vehicle_on_lane = 10;
bool LaneSequence::has_vehicle_on_lane() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LaneSequence::set_has_vehicle_on_lane() {
  _has_bits_[0] |= 0x00000200u;
}
void LaneSequence::clear_has_vehicle_on_lane() {
  _has_bits_[0] &= ~0x00000200u;
}
void LaneSequence::clear_vehicle_on_lane() {
  vehicle_on_lane_ = false;
  clear_has_vehicle_on_lane();
}
 bool LaneSequence::vehicle_on_lane() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.vehicle_on_lane)
  return vehicle_on_lane_;
}
 void LaneSequence::set_vehicle_on_lane(bool value) {
  set_has_vehicle_on_lane();
  vehicle_on_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.vehicle_on_lane)
}

// repeated .apollo.prediction.LanePoint curr_lane_point = 11;
int LaneSequence::curr_lane_point_size() const {
  return curr_lane_point_.size();
}
void LaneSequence::clear_curr_lane_point() {
  curr_lane_point_.Clear();
}
const ::apollo::prediction::LanePoint& LaneSequence::curr_lane_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_.Get(index);
}
::apollo::prediction::LanePoint* LaneSequence::mutable_curr_lane_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_.Mutable(index);
}
::apollo::prediction::LanePoint* LaneSequence::add_curr_lane_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSequence::mutable_curr_lane_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.curr_lane_point)
  return &curr_lane_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSequence::curr_lane_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_;
}

// repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
int LaneSequence::left_neighbor_point_size() const {
  return left_neighbor_point_.size();
}
void LaneSequence::clear_left_neighbor_point() {
  left_neighbor_point_.Clear();
}
const ::apollo::prediction::LanePoint& LaneSequence::left_neighbor_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_.Get(index);
}
::apollo::prediction::LanePoint* LaneSequence::mutable_left_neighbor_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_.Mutable(index);
}
::apollo::prediction::LanePoint* LaneSequence::add_left_neighbor_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSequence::mutable_left_neighbor_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.left_neighbor_point)
  return &left_neighbor_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSequence::left_neighbor_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_;
}

// repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
int LaneSequence::right_neighbor_point_size() const {
  return right_neighbor_point_.size();
}
void LaneSequence::clear_right_neighbor_point() {
  right_neighbor_point_.Clear();
}
const ::apollo::prediction::LanePoint& LaneSequence::right_neighbor_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_.Get(index);
}
::apollo::prediction::LanePoint* LaneSequence::mutable_right_neighbor_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_.Mutable(index);
}
::apollo::prediction::LanePoint* LaneSequence::add_right_neighbor_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSequence::mutable_right_neighbor_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.right_neighbor_point)
  return &right_neighbor_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSequence::right_neighbor_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_;
}

// repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
int LaneSequence::left_nearby_obstacle_size() const {
  return left_nearby_obstacle_.size();
}
void LaneSequence::clear_left_nearby_obstacle() {
  left_nearby_obstacle_.Clear();
}
const ::apollo::prediction::NearbyObstacle& LaneSequence::left_nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_.Get(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::mutable_left_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_.Mutable(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::add_left_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_left_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return &left_nearby_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::left_nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_;
}

// repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
int LaneSequence::right_nearby_obstacle_size() const {
  return right_nearby_obstacle_.size();
}
void LaneSequence::clear_right_nearby_obstacle() {
  right_nearby_obstacle_.Clear();
}
const ::apollo::prediction::NearbyObstacle& LaneSequence::right_nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_.Get(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::mutable_right_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_.Mutable(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::add_right_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_right_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return &right_nearby_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::right_nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneGraph::kLaneSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneGraph::LaneGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneGraph)
}

void LaneGraph::InitAsDefaultInstance() {
}

LaneGraph::LaneGraph(const LaneGraph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneGraph)
}

void LaneGraph::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneGraph::~LaneGraph() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneGraph)
  SharedDtor();
}

void LaneGraph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneGraph_descriptor_;
}

const LaneGraph& LaneGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2flane_5fgraph_2eproto();
  return *default_instance_;
}

LaneGraph* LaneGraph::default_instance_ = NULL;

LaneGraph* LaneGraph::New(::google::protobuf::Arena* arena) const {
  LaneGraph* n = new LaneGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneGraph)
  lane_sequence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaneGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_sequence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_lane_sequence;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneGraph)
  return false;
#undef DO_
}

void LaneGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneGraph)
  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  for (unsigned int i = 0, n = this->lane_sequence_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_sequence(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneGraph)
}

::google::protobuf::uint8* LaneGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneGraph)
  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  for (unsigned int i = 0, n = this->lane_sequence_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lane_sequence(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneGraph)
  return target;
}

int LaneGraph::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneGraph)
  int total_size = 0;

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  total_size += 1 * this->lane_sequence_size();
  for (int i = 0; i < this->lane_sequence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_sequence(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LaneGraph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneGraph)
    MergeFrom(*source);
  }
}

void LaneGraph::MergeFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lane_sequence_.MergeFrom(from.lane_sequence_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaneGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneGraph::CopyFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGraph::IsInitialized() const {

  return true;
}

void LaneGraph::Swap(LaneGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneGraph::InternalSwap(LaneGraph* other) {
  lane_sequence_.UnsafeArenaSwap(&other->lane_sequence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneGraph_descriptor_;
  metadata.reflection = LaneGraph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneGraph

// repeated .apollo.prediction.LaneSequence lane_sequence = 1;
int LaneGraph::lane_sequence_size() const {
  return lane_sequence_.size();
}
void LaneGraph::clear_lane_sequence() {
  lane_sequence_.Clear();
}
const ::apollo::prediction::LaneSequence& LaneGraph::lane_sequence(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Get(index);
}
::apollo::prediction::LaneSequence* LaneGraph::mutable_lane_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Mutable(index);
}
::apollo::prediction::LaneSequence* LaneGraph::add_lane_sequence() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
LaneGraph::mutable_lane_sequence() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneGraph.lane_sequence)
  return &lane_sequence_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
LaneGraph::lane_sequence() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
