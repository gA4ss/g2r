// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/traffic_light/recognizer_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception/traffic_light/recognizer_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace traffic_light {
namespace recognizer_config {

namespace {

const ::google::protobuf::Descriptor* RecognizerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto() {
  protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception/traffic_light/recognizer_config.proto");
  GOOGLE_CHECK(file != NULL);
  RecognizerConfig_descriptor_ = file->message_type(0);
  static const int RecognizerConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, classify_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, classify_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, classify_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, classify_resize_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, classify_resize_height_),
  };
  RecognizerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizerConfig_descriptor_,
      RecognizerConfig::default_instance_,
      RecognizerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(RecognizerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizerConfig, _internal_metadata_),
      -1);
  ModelConfigs_descriptor_ = file->message_type(1);
  static const int ModelConfigs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, recognizer_config_),
  };
  ModelConfigs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelConfigs_descriptor_,
      ModelConfigs::default_instance_,
      ModelConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelConfigs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizerConfig_descriptor_, &RecognizerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelConfigs_descriptor_, &ModelConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto() {
  delete RecognizerConfig::default_instance_;
  delete RecognizerConfig_reflection_;
  delete ModelConfigs::default_instance_;
  delete ModelConfigs_reflection_;
}

void protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n0perception/traffic_light/recognizer_co"
    "nfig.proto\0221apollo.perception.traffic_li"
    "ght.recognizer_config\"\272\001\n\020RecognizerConf"
    "ig\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\026\n\016cla"
    "ssify_model\030\003 \001(\t\022\024\n\014classify_net\030\004 \001(\t\022"
    "\032\n\022classify_threshold\030\005 \001(\002\022\035\n\025classify_"
    "resize_width\030\006 \001(\005\022\036\n\026classify_resize_he"
    "ight\030\007 \001(\005\"n\n\014ModelConfigs\022^\n\021recognizer"
    "_config\030\001 \003(\0132C.apollo.perception.traffi"
    "c_light.recognizer_config.RecognizerConf"
    "ig", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/traffic_light/recognizer_config.proto", &protobuf_RegisterTypes);
  RecognizerConfig::default_instance_ = new RecognizerConfig();
  ModelConfigs::default_instance_ = new ModelConfigs();
  RecognizerConfig::default_instance_->InitAsDefaultInstance();
  ModelConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto {
  StaticDescriptorInitializer_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto() {
    protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  }
} static_descriptor_initializer_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizerConfig::kNameFieldNumber;
const int RecognizerConfig::kVersionFieldNumber;
const int RecognizerConfig::kClassifyModelFieldNumber;
const int RecognizerConfig::kClassifyNetFieldNumber;
const int RecognizerConfig::kClassifyThresholdFieldNumber;
const int RecognizerConfig::kClassifyResizeWidthFieldNumber;
const int RecognizerConfig::kClassifyResizeHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizerConfig::RecognizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
}

void RecognizerConfig::InitAsDefaultInstance() {
}

RecognizerConfig::RecognizerConfig(const RecognizerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
}

void RecognizerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classify_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classify_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classify_threshold_ = 0;
  classify_resize_width_ = 0;
  classify_resize_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecognizerConfig::~RecognizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  SharedDtor();
}

void RecognizerConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classify_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classify_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RecognizerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizerConfig_descriptor_;
}

const RecognizerConfig& RecognizerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  return *default_instance_;
}

RecognizerConfig* RecognizerConfig::default_instance_ = NULL;

RecognizerConfig* RecognizerConfig::New(::google::protobuf::Arena* arena) const {
  RecognizerConfig* n = new RecognizerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecognizerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecognizerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(classify_threshold_, classify_resize_height_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_classify_model()) {
      classify_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_classify_net()) {
      classify_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RecognizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classify_model;
        break;
      }

      // optional string classify_model = 3;
      case 3: {
        if (tag == 26) {
         parse_classify_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classify_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classify_model().data(), this->classify_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_classify_net;
        break;
      }

      // optional string classify_net = 4;
      case 4: {
        if (tag == 34) {
         parse_classify_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classify_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classify_net().data(), this->classify_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_classify_threshold;
        break;
      }

      // optional float classify_threshold = 5;
      case 5: {
        if (tag == 45) {
         parse_classify_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &classify_threshold_)));
          set_has_classify_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_classify_resize_width;
        break;
      }

      // optional int32 classify_resize_width = 6;
      case 6: {
        if (tag == 48) {
         parse_classify_resize_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classify_resize_width_)));
          set_has_classify_resize_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_classify_resize_height;
        break;
      }

      // optional int32 classify_resize_height = 7;
      case 7: {
        if (tag == 56) {
         parse_classify_resize_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classify_resize_height_)));
          set_has_classify_resize_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  return false;
#undef DO_
}

void RecognizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string classify_model = 3;
  if (has_classify_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classify_model().data(), this->classify_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->classify_model(), output);
  }

  // optional string classify_net = 4;
  if (has_classify_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classify_net().data(), this->classify_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->classify_net(), output);
  }

  // optional float classify_threshold = 5;
  if (has_classify_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->classify_threshold(), output);
  }

  // optional int32 classify_resize_width = 6;
  if (has_classify_resize_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->classify_resize_width(), output);
  }

  // optional int32 classify_resize_height = 7;
  if (has_classify_resize_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->classify_resize_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
}

::google::protobuf::uint8* RecognizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string classify_model = 3;
  if (has_classify_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classify_model().data(), this->classify_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->classify_model(), target);
  }

  // optional string classify_net = 4;
  if (has_classify_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classify_net().data(), this->classify_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->classify_net(), target);
  }

  // optional float classify_threshold = 5;
  if (has_classify_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->classify_threshold(), target);
  }

  // optional int32 classify_resize_width = 6;
  if (has_classify_resize_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->classify_resize_width(), target);
  }

  // optional int32 classify_resize_height = 7;
  if (has_classify_resize_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->classify_resize_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  return target;
}

int RecognizerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string classify_model = 3;
    if (has_classify_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classify_model());
    }

    // optional string classify_net = 4;
    if (has_classify_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classify_net());
    }

    // optional float classify_threshold = 5;
    if (has_classify_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 classify_resize_width = 6;
    if (has_classify_resize_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classify_resize_width());
    }

    // optional int32 classify_resize_height = 7;
    if (has_classify_resize_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classify_resize_height());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecognizerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
    MergeFrom(*source);
  }
}

void RecognizerConfig::MergeFrom(const RecognizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_classify_model()) {
      set_has_classify_model();
      classify_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classify_model_);
    }
    if (from.has_classify_net()) {
      set_has_classify_net();
      classify_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classify_net_);
    }
    if (from.has_classify_threshold()) {
      set_classify_threshold(from.classify_threshold());
    }
    if (from.has_classify_resize_width()) {
      set_classify_resize_width(from.classify_resize_width());
    }
    if (from.has_classify_resize_height()) {
      set_classify_resize_height(from.classify_resize_height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RecognizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizerConfig::CopyFrom(const RecognizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizerConfig::IsInitialized() const {

  return true;
}

void RecognizerConfig::Swap(RecognizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizerConfig::InternalSwap(RecognizerConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  classify_model_.Swap(&other->classify_model_);
  classify_net_.Swap(&other->classify_net_);
  std::swap(classify_threshold_, other->classify_threshold_);
  std::swap(classify_resize_width_, other->classify_resize_width_);
  std::swap(classify_resize_height_, other->classify_resize_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizerConfig_descriptor_;
  metadata.reflection = RecognizerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizerConfig

// optional string name = 1;
bool RecognizerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecognizerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RecognizerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecognizerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& RecognizerConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}
 void RecognizerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}
 void RecognizerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}
 ::std::string* RecognizerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizerConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}

// optional string version = 2;
bool RecognizerConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecognizerConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void RecognizerConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecognizerConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& RecognizerConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}
 void RecognizerConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}
 void RecognizerConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}
 ::std::string* RecognizerConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizerConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}

// optional string classify_model = 3;
bool RecognizerConfig::has_classify_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecognizerConfig::set_has_classify_model() {
  _has_bits_[0] |= 0x00000004u;
}
void RecognizerConfig::clear_has_classify_model() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecognizerConfig::clear_classify_model() {
  classify_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classify_model();
}
 const ::std::string& RecognizerConfig::classify_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  return classify_model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_classify_model(const ::std::string& value) {
  set_has_classify_model();
  classify_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}
 void RecognizerConfig::set_classify_model(const char* value) {
  set_has_classify_model();
  classify_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}
 void RecognizerConfig::set_classify_model(const char* value, size_t size) {
  set_has_classify_model();
  classify_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}
 ::std::string* RecognizerConfig::mutable_classify_model() {
  set_has_classify_model();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  return classify_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizerConfig::release_classify_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  clear_has_classify_model();
  return classify_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_allocated_classify_model(::std::string* classify_model) {
  if (classify_model != NULL) {
    set_has_classify_model();
  } else {
    clear_has_classify_model();
  }
  classify_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classify_model);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}

// optional string classify_net = 4;
bool RecognizerConfig::has_classify_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecognizerConfig::set_has_classify_net() {
  _has_bits_[0] |= 0x00000008u;
}
void RecognizerConfig::clear_has_classify_net() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecognizerConfig::clear_classify_net() {
  classify_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classify_net();
}
 const ::std::string& RecognizerConfig::classify_net() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  return classify_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_classify_net(const ::std::string& value) {
  set_has_classify_net();
  classify_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}
 void RecognizerConfig::set_classify_net(const char* value) {
  set_has_classify_net();
  classify_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}
 void RecognizerConfig::set_classify_net(const char* value, size_t size) {
  set_has_classify_net();
  classify_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}
 ::std::string* RecognizerConfig::mutable_classify_net() {
  set_has_classify_net();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  return classify_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizerConfig::release_classify_net() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  clear_has_classify_net();
  return classify_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizerConfig::set_allocated_classify_net(::std::string* classify_net) {
  if (classify_net != NULL) {
    set_has_classify_net();
  } else {
    clear_has_classify_net();
  }
  classify_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classify_net);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}

// optional float classify_threshold = 5;
bool RecognizerConfig::has_classify_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RecognizerConfig::set_has_classify_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void RecognizerConfig::clear_has_classify_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void RecognizerConfig::clear_classify_threshold() {
  classify_threshold_ = 0;
  clear_has_classify_threshold();
}
 float RecognizerConfig::classify_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_threshold)
  return classify_threshold_;
}
 void RecognizerConfig::set_classify_threshold(float value) {
  set_has_classify_threshold();
  classify_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_threshold)
}

// optional int32 classify_resize_width = 6;
bool RecognizerConfig::has_classify_resize_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RecognizerConfig::set_has_classify_resize_width() {
  _has_bits_[0] |= 0x00000020u;
}
void RecognizerConfig::clear_has_classify_resize_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void RecognizerConfig::clear_classify_resize_width() {
  classify_resize_width_ = 0;
  clear_has_classify_resize_width();
}
 ::google::protobuf::int32 RecognizerConfig::classify_resize_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_width)
  return classify_resize_width_;
}
 void RecognizerConfig::set_classify_resize_width(::google::protobuf::int32 value) {
  set_has_classify_resize_width();
  classify_resize_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_width)
}

// optional int32 classify_resize_height = 7;
bool RecognizerConfig::has_classify_resize_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RecognizerConfig::set_has_classify_resize_height() {
  _has_bits_[0] |= 0x00000040u;
}
void RecognizerConfig::clear_has_classify_resize_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void RecognizerConfig::clear_classify_resize_height() {
  classify_resize_height_ = 0;
  clear_has_classify_resize_height();
}
 ::google::protobuf::int32 RecognizerConfig::classify_resize_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_height)
  return classify_resize_height_;
}
 void RecognizerConfig::set_classify_resize_height(::google::protobuf::int32 value) {
  set_has_classify_resize_height();
  classify_resize_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kRecognizerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
}

void ModelConfigs::InitAsDefaultInstance() {
}

ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfigs_descriptor_;
}

const ModelConfigs& ModelConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2ftraffic_5flight_2frecognizer_5fconfig_2eproto();
  return *default_instance_;
}

ModelConfigs* ModelConfigs::default_instance_ = NULL;

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  recognizer_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_recognizer_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recognizer_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_recognizer_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  // repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
  for (unsigned int i = 0, n = this->recognizer_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recognizer_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  // repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
  for (unsigned int i = 0, n = this->recognizer_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->recognizer_config(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  return target;
}

int ModelConfigs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  int total_size = 0;

  // repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
  total_size += 1 * this->recognizer_config_size();
  for (int i = 0; i < this->recognizer_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recognizer_config(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelConfigs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  recognizer_config_.MergeFrom(from.recognizer_config_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {

  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  recognizer_config_.UnsafeArenaSwap(&other->recognizer_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfigs_descriptor_;
  metadata.reflection = ModelConfigs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
int ModelConfigs::recognizer_config_size() const {
  return recognizer_config_.size();
}
void ModelConfigs::clear_recognizer_config() {
  recognizer_config_.Clear();
}
const ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig& ModelConfigs::recognizer_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_.Get(index);
}
::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* ModelConfigs::mutable_recognizer_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_.Mutable(index);
}
::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* ModelConfigs::add_recognizer_config() {
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >*
ModelConfigs::mutable_recognizer_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return &recognizer_config_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >&
ModelConfigs::recognizer_config() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return recognizer_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace recognizer_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
