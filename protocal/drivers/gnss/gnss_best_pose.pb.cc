// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/gnss_best_pose.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/gnss/gnss_best_pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss {

namespace {

const ::google::protobuf::Descriptor* GnssBestPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GnssBestPose_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolutionStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolutionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DatumId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto() {
  protobuf_AddDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/gnss/gnss_best_pose.proto");
  GOOGLE_CHECK(file != NULL);
  GnssBestPose_descriptor_ = file->message_type(0);
  static const int GnssBestPose_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, sol_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, sol_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, height_msl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, undulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, datum_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, latitude_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, longitude_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, height_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, base_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, differential_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, solution_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, num_sats_tracked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, num_sats_in_solution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, num_sats_l1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, num_sats_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, extended_solution_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, galileo_beidou_used_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, gps_glonass_used_mask_),
  };
  GnssBestPose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GnssBestPose_descriptor_,
      GnssBestPose::default_instance_,
      GnssBestPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, _has_bits_[0]),
      -1,
      -1,
      sizeof(GnssBestPose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssBestPose, _internal_metadata_),
      -1);
  SolutionStatus_descriptor_ = file->enum_type(0);
  SolutionType_descriptor_ = file->enum_type(1);
  DatumId_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GnssBestPose_descriptor_, &GnssBestPose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto() {
  delete GnssBestPose::default_instance_;
  delete GnssBestPose_reflection_;
}

void protobuf_AddDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!drivers/gnss/gnss_best_pose.proto\022\023apo"
    "llo.drivers.gnss\032\023common/header.proto\"\252\005"
    "\n\014GnssBestPose\022%\n\006header\030\001 \001(\0132\025.apollo."
    "common.Header\022\030\n\020measurement_time\030\002 \001(\001\022"
    "7\n\nsol_status\030\003 \001(\0162#.apollo.drivers.gns"
    "s.SolutionStatus\0223\n\010sol_type\030\004 \001(\0162!.apo"
    "llo.drivers.gnss.SolutionType\022\020\n\010latitud"
    "e\030\005 \001(\001\022\021\n\tlongitude\030\006 \001(\001\022\022\n\nheight_msl"
    "\030\007 \001(\001\022\022\n\nundulation\030\010 \001(\002\022.\n\010datum_id\030\t"
    " \001(\0162\034.apollo.drivers.gnss.DatumId\022\030\n\020la"
    "titude_std_dev\030\n \001(\002\022\031\n\021longitude_std_de"
    "v\030\013 \001(\002\022\026\n\016height_std_dev\030\014 \001(\002\022\027\n\017base_"
    "station_id\030\r \001(\014\022\030\n\020differential_age\030\016 \001"
    "(\002\022\024\n\014solution_age\030\017 \001(\002\022\030\n\020num_sats_tra"
    "cked\030\020 \001(\r\022\034\n\024num_sats_in_solution\030\021 \001(\r"
    "\022\023\n\013num_sats_l1\030\022 \001(\r\022\026\n\016num_sats_multi\030"
    "\023 \001(\r\022\020\n\010reserved\030\024 \001(\r\022 \n\030extended_solu"
    "tion_status\030\025 \001(\r\022 \n\030galileo_beidou_used"
    "_mask\030\026 \001(\r\022\035\n\025gps_glonass_used_mask\030\027 \001"
    "(\r*\220\002\n\016SolutionStatus\022\020\n\014SOL_COMPUTED\020\000\022"
    "\024\n\020INSUFFICIENT_OBS\020\001\022\022\n\016NO_CONVERGENCE\020"
    "\002\022\017\n\013SINGULARITY\020\003\022\r\n\tCOV_TRACE\020\004\022\r\n\tTES"
    "T_DIST\020\005\022\016\n\nCOLD_START\020\006\022\r\n\tV_H_LIMIT\020\007\022"
    "\014\n\010VARIANCE\020\010\022\r\n\tRESIDUALS\020\t\022\025\n\021INTEGRIT"
    "Y_WARNING\020\r\022\013\n\007PENDING\020\022\022\017\n\013INVALID_FIX\020"
    "\023\022\020\n\014UNAUTHORIZED\020\024\022\020\n\014INVALID_RATE\020\026*\237\004"
    "\n\014SolutionType\022\010\n\004NONE\020\000\022\014\n\010FIXEDPOS\020\001\022\017"
    "\n\013FIXEDHEIGHT\020\002\022\r\n\tFLOATCONV\020\004\022\014\n\010WIDELA"
    "NE\020\005\022\016\n\nNARROWLANE\020\006\022\024\n\020DOPPLER_VELOCITY"
    "\020\010\022\n\n\006SINGLE\020\020\022\013\n\007PSRDIFF\020\021\022\010\n\004WAAS\020\022\022\016\n"
    "\nPROPOGATED\020\023\022\014\n\010OMNISTAR\020\024\022\014\n\010L1_FLOAT\020"
    " \022\022\n\016IONOFREE_FLOAT\020!\022\020\n\014NARROW_FLOAT\020\"\022"
    "\n\n\006L1_INT\0200\022\014\n\010WIDE_INT\0201\022\016\n\nNARROW_INT\020"
    "2\022\022\n\016RTK_DIRECT_INS\0203\022\014\n\010INS_SBAS\0204\022\r\n\tI"
    "NS_PSRSP\0205\022\017\n\013INS_PSRDIFF\0206\022\020\n\014INS_RTKFL"
    "OAT\0207\022\020\n\014INS_RTKFIXED\0208\022\020\n\014INS_OMNISTAR\020"
    "9\022\023\n\017INS_OMNISTAR_HP\020:\022\023\n\017INS_OMNISTAR_X"
    "P\020;\022\017\n\013OMNISTAR_HP\020@\022\017\n\013OMNISTAR_XP\020A\022\022\n"
    "\016PPP_CONVERGING\020D\022\007\n\003PPP\020E\022\026\n\022INS_PPP_CO"
    "NVERGING\020I\022\013\n\007INS_PPP\020J*\024\n\007DatumId\022\t\n\005WG"
    "S84\020=", 1605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/gnss/gnss_best_pose.proto", &protobuf_RegisterTypes);
  GnssBestPose::default_instance_ = new GnssBestPose();
  GnssBestPose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto {
  StaticDescriptorInitializer_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto() {
    protobuf_AddDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();
  }
} static_descriptor_initializer_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto_;
const ::google::protobuf::EnumDescriptor* SolutionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolutionStatus_descriptor_;
}
bool SolutionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 18:
    case 19:
    case 20:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SolutionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolutionType_descriptor_;
}
bool SolutionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 32:
    case 33:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
    case 65:
    case 68:
    case 69:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DatumId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatumId_descriptor_;
}
bool DatumId_IsValid(int value) {
  switch(value) {
    case 61:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssBestPose::kHeaderFieldNumber;
const int GnssBestPose::kMeasurementTimeFieldNumber;
const int GnssBestPose::kSolStatusFieldNumber;
const int GnssBestPose::kSolTypeFieldNumber;
const int GnssBestPose::kLatitudeFieldNumber;
const int GnssBestPose::kLongitudeFieldNumber;
const int GnssBestPose::kHeightMslFieldNumber;
const int GnssBestPose::kUndulationFieldNumber;
const int GnssBestPose::kDatumIdFieldNumber;
const int GnssBestPose::kLatitudeStdDevFieldNumber;
const int GnssBestPose::kLongitudeStdDevFieldNumber;
const int GnssBestPose::kHeightStdDevFieldNumber;
const int GnssBestPose::kBaseStationIdFieldNumber;
const int GnssBestPose::kDifferentialAgeFieldNumber;
const int GnssBestPose::kSolutionAgeFieldNumber;
const int GnssBestPose::kNumSatsTrackedFieldNumber;
const int GnssBestPose::kNumSatsInSolutionFieldNumber;
const int GnssBestPose::kNumSatsL1FieldNumber;
const int GnssBestPose::kNumSatsMultiFieldNumber;
const int GnssBestPose::kReservedFieldNumber;
const int GnssBestPose::kExtendedSolutionStatusFieldNumber;
const int GnssBestPose::kGalileoBeidouUsedMaskFieldNumber;
const int GnssBestPose::kGpsGlonassUsedMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssBestPose::GnssBestPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssBestPose)
}

void GnssBestPose::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

GnssBestPose::GnssBestPose(const GnssBestPose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssBestPose)
}

void GnssBestPose::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  measurement_time_ = 0;
  sol_status_ = 0;
  sol_type_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  height_msl_ = 0;
  undulation_ = 0;
  datum_id_ = 61;
  latitude_std_dev_ = 0;
  longitude_std_dev_ = 0;
  height_std_dev_ = 0;
  base_station_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  differential_age_ = 0;
  solution_age_ = 0;
  num_sats_tracked_ = 0u;
  num_sats_in_solution_ = 0u;
  num_sats_l1_ = 0u;
  num_sats_multi_ = 0u;
  reserved_ = 0u;
  extended_solution_status_ = 0u;
  galileo_beidou_used_mask_ = 0u;
  gps_glonass_used_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GnssBestPose::~GnssBestPose() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssBestPose)
  SharedDtor();
}

void GnssBestPose::SharedDtor() {
  base_station_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void GnssBestPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssBestPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssBestPose_descriptor_;
}

const GnssBestPose& GnssBestPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fbest_5fpose_2eproto();
  return *default_instance_;
}

GnssBestPose* GnssBestPose::default_instance_ = NULL;

GnssBestPose* GnssBestPose::New(::google::protobuf::Arena* arena) const {
  GnssBestPose* n = new GnssBestPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssBestPose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssBestPose)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GnssBestPose, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GnssBestPose*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(measurement_time_, undulation_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(latitude_std_dev_, longitude_std_dev_);
    ZR_(height_std_dev_, num_sats_tracked_);
    datum_id_ = 61;
    if (has_base_station_id()) {
      base_station_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ZR_(num_sats_in_solution_, gps_glonass_used_mask_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GnssBestPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.GnssBestPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (tag == 17) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sol_status;
        break;
      }

      // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
      case 3: {
        if (tag == 24) {
         parse_sol_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::SolutionStatus_IsValid(value)) {
            set_sol_status(static_cast< ::apollo::drivers::gnss::SolutionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sol_type;
        break;
      }

      // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
      case 4: {
        if (tag == 32) {
         parse_sol_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::SolutionType_IsValid(value)) {
            set_sol_type(static_cast< ::apollo::drivers::gnss::SolutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_latitude;
        break;
      }

      // optional double latitude = 5;
      case 5: {
        if (tag == 41) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_longitude;
        break;
      }

      // optional double longitude = 6;
      case 6: {
        if (tag == 49) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_height_msl;
        break;
      }

      // optional double height_msl = 7;
      case 7: {
        if (tag == 57) {
         parse_height_msl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_msl_)));
          set_has_height_msl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_undulation;
        break;
      }

      // optional float undulation = 8;
      case 8: {
        if (tag == 69) {
         parse_undulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &undulation_)));
          set_has_undulation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_datum_id;
        break;
      }

      // optional .apollo.drivers.gnss.DatumId datum_id = 9;
      case 9: {
        if (tag == 72) {
         parse_datum_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::DatumId_IsValid(value)) {
            set_datum_id(static_cast< ::apollo::drivers::gnss::DatumId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_latitude_std_dev;
        break;
      }

      // optional float latitude_std_dev = 10;
      case 10: {
        if (tag == 85) {
         parse_latitude_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_std_dev_)));
          set_has_latitude_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_longitude_std_dev;
        break;
      }

      // optional float longitude_std_dev = 11;
      case 11: {
        if (tag == 93) {
         parse_longitude_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_std_dev_)));
          set_has_longitude_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_height_std_dev;
        break;
      }

      // optional float height_std_dev = 12;
      case 12: {
        if (tag == 101) {
         parse_height_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_std_dev_)));
          set_has_height_std_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_base_station_id;
        break;
      }

      // optional bytes base_station_id = 13;
      case 13: {
        if (tag == 106) {
         parse_base_station_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_station_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_differential_age;
        break;
      }

      // optional float differential_age = 14;
      case 14: {
        if (tag == 117) {
         parse_differential_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &differential_age_)));
          set_has_differential_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_solution_age;
        break;
      }

      // optional float solution_age = 15;
      case 15: {
        if (tag == 125) {
         parse_solution_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solution_age_)));
          set_has_solution_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_num_sats_tracked;
        break;
      }

      // optional uint32 num_sats_tracked = 16;
      case 16: {
        if (tag == 128) {
         parse_num_sats_tracked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_tracked_)));
          set_has_num_sats_tracked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_num_sats_in_solution;
        break;
      }

      // optional uint32 num_sats_in_solution = 17;
      case 17: {
        if (tag == 136) {
         parse_num_sats_in_solution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_in_solution_)));
          set_has_num_sats_in_solution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_num_sats_l1;
        break;
      }

      // optional uint32 num_sats_l1 = 18;
      case 18: {
        if (tag == 144) {
         parse_num_sats_l1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_l1_)));
          set_has_num_sats_l1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_num_sats_multi;
        break;
      }

      // optional uint32 num_sats_multi = 19;
      case 19: {
        if (tag == 152) {
         parse_num_sats_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_multi_)));
          set_has_num_sats_multi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_reserved;
        break;
      }

      // optional uint32 reserved = 20;
      case 20: {
        if (tag == 160) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_extended_solution_status;
        break;
      }

      // optional uint32 extended_solution_status = 21;
      case 21: {
        if (tag == 168) {
         parse_extended_solution_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_solution_status_)));
          set_has_extended_solution_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_galileo_beidou_used_mask;
        break;
      }

      // optional uint32 galileo_beidou_used_mask = 22;
      case 22: {
        if (tag == 176) {
         parse_galileo_beidou_used_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &galileo_beidou_used_mask_)));
          set_has_galileo_beidou_used_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gps_glonass_used_mask;
        break;
      }

      // optional uint32 gps_glonass_used_mask = 23;
      case 23: {
        if (tag == 184) {
         parse_gps_glonass_used_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_glonass_used_mask_)));
          set_has_gps_glonass_used_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.GnssBestPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.GnssBestPose)
  return false;
#undef DO_
}

void GnssBestPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.GnssBestPose)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  if (has_sol_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sol_status(), output);
  }

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  if (has_sol_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sol_type(), output);
  }

  // optional double latitude = 5;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // optional double longitude = 6;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longitude(), output);
  }

  // optional double height_msl = 7;
  if (has_height_msl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height_msl(), output);
  }

  // optional float undulation = 8;
  if (has_undulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->undulation(), output);
  }

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  if (has_datum_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->datum_id(), output);
  }

  // optional float latitude_std_dev = 10;
  if (has_latitude_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->latitude_std_dev(), output);
  }

  // optional float longitude_std_dev = 11;
  if (has_longitude_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->longitude_std_dev(), output);
  }

  // optional float height_std_dev = 12;
  if (has_height_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->height_std_dev(), output);
  }

  // optional bytes base_station_id = 13;
  if (has_base_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->base_station_id(), output);
  }

  // optional float differential_age = 14;
  if (has_differential_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->differential_age(), output);
  }

  // optional float solution_age = 15;
  if (has_solution_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->solution_age(), output);
  }

  // optional uint32 num_sats_tracked = 16;
  if (has_num_sats_tracked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->num_sats_tracked(), output);
  }

  // optional uint32 num_sats_in_solution = 17;
  if (has_num_sats_in_solution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->num_sats_in_solution(), output);
  }

  // optional uint32 num_sats_l1 = 18;
  if (has_num_sats_l1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->num_sats_l1(), output);
  }

  // optional uint32 num_sats_multi = 19;
  if (has_num_sats_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->num_sats_multi(), output);
  }

  // optional uint32 reserved = 20;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->reserved(), output);
  }

  // optional uint32 extended_solution_status = 21;
  if (has_extended_solution_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->extended_solution_status(), output);
  }

  // optional uint32 galileo_beidou_used_mask = 22;
  if (has_galileo_beidou_used_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->galileo_beidou_used_mask(), output);
  }

  // optional uint32 gps_glonass_used_mask = 23;
  if (has_gps_glonass_used_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gps_glonass_used_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.GnssBestPose)
}

::google::protobuf::uint8* GnssBestPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssBestPose)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional double measurement_time = 2;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  if (has_sol_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sol_status(), target);
  }

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  if (has_sol_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sol_type(), target);
  }

  // optional double latitude = 5;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // optional double longitude = 6;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longitude(), target);
  }

  // optional double height_msl = 7;
  if (has_height_msl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height_msl(), target);
  }

  // optional float undulation = 8;
  if (has_undulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->undulation(), target);
  }

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  if (has_datum_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->datum_id(), target);
  }

  // optional float latitude_std_dev = 10;
  if (has_latitude_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->latitude_std_dev(), target);
  }

  // optional float longitude_std_dev = 11;
  if (has_longitude_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->longitude_std_dev(), target);
  }

  // optional float height_std_dev = 12;
  if (has_height_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->height_std_dev(), target);
  }

  // optional bytes base_station_id = 13;
  if (has_base_station_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->base_station_id(), target);
  }

  // optional float differential_age = 14;
  if (has_differential_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->differential_age(), target);
  }

  // optional float solution_age = 15;
  if (has_solution_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->solution_age(), target);
  }

  // optional uint32 num_sats_tracked = 16;
  if (has_num_sats_tracked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->num_sats_tracked(), target);
  }

  // optional uint32 num_sats_in_solution = 17;
  if (has_num_sats_in_solution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->num_sats_in_solution(), target);
  }

  // optional uint32 num_sats_l1 = 18;
  if (has_num_sats_l1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->num_sats_l1(), target);
  }

  // optional uint32 num_sats_multi = 19;
  if (has_num_sats_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->num_sats_multi(), target);
  }

  // optional uint32 reserved = 20;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->reserved(), target);
  }

  // optional uint32 extended_solution_status = 21;
  if (has_extended_solution_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->extended_solution_status(), target);
  }

  // optional uint32 galileo_beidou_used_mask = 22;
  if (has_galileo_beidou_used_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->galileo_beidou_used_mask(), target);
  }

  // optional uint32 gps_glonass_used_mask = 23;
  if (has_gps_glonass_used_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gps_glonass_used_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssBestPose)
  return target;
}

int GnssBestPose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssBestPose)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
    if (has_sol_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sol_status());
    }

    // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
    if (has_sol_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sol_type());
    }

    // optional double latitude = 5;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 6;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double height_msl = 7;
    if (has_height_msl()) {
      total_size += 1 + 8;
    }

    // optional float undulation = 8;
    if (has_undulation()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.drivers.gnss.DatumId datum_id = 9;
    if (has_datum_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datum_id());
    }

    // optional float latitude_std_dev = 10;
    if (has_latitude_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float longitude_std_dev = 11;
    if (has_longitude_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float height_std_dev = 12;
    if (has_height_std_dev()) {
      total_size += 1 + 4;
    }

    // optional bytes base_station_id = 13;
    if (has_base_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->base_station_id());
    }

    // optional float differential_age = 14;
    if (has_differential_age()) {
      total_size += 1 + 4;
    }

    // optional float solution_age = 15;
    if (has_solution_age()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_sats_tracked = 16;
    if (has_num_sats_tracked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_tracked());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 num_sats_in_solution = 17;
    if (has_num_sats_in_solution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_in_solution());
    }

    // optional uint32 num_sats_l1 = 18;
    if (has_num_sats_l1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_l1());
    }

    // optional uint32 num_sats_multi = 19;
    if (has_num_sats_multi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_multi());
    }

    // optional uint32 reserved = 20;
    if (has_reserved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

    // optional uint32 extended_solution_status = 21;
    if (has_extended_solution_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_solution_status());
    }

    // optional uint32 galileo_beidou_used_mask = 22;
    if (has_galileo_beidou_used_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->galileo_beidou_used_mask());
    }

    // optional uint32 gps_glonass_used_mask = 23;
    if (has_gps_glonass_used_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_glonass_used_mask());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssBestPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssBestPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GnssBestPose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssBestPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssBestPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssBestPose)
    MergeFrom(*source);
  }
}

void GnssBestPose::MergeFrom(const GnssBestPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssBestPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
    if (from.has_sol_status()) {
      set_sol_status(from.sol_status());
    }
    if (from.has_sol_type()) {
      set_sol_type(from.sol_type());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_height_msl()) {
      set_height_msl(from.height_msl());
    }
    if (from.has_undulation()) {
      set_undulation(from.undulation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datum_id()) {
      set_datum_id(from.datum_id());
    }
    if (from.has_latitude_std_dev()) {
      set_latitude_std_dev(from.latitude_std_dev());
    }
    if (from.has_longitude_std_dev()) {
      set_longitude_std_dev(from.longitude_std_dev());
    }
    if (from.has_height_std_dev()) {
      set_height_std_dev(from.height_std_dev());
    }
    if (from.has_base_station_id()) {
      set_has_base_station_id();
      base_station_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_station_id_);
    }
    if (from.has_differential_age()) {
      set_differential_age(from.differential_age());
    }
    if (from.has_solution_age()) {
      set_solution_age(from.solution_age());
    }
    if (from.has_num_sats_tracked()) {
      set_num_sats_tracked(from.num_sats_tracked());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_num_sats_in_solution()) {
      set_num_sats_in_solution(from.num_sats_in_solution());
    }
    if (from.has_num_sats_l1()) {
      set_num_sats_l1(from.num_sats_l1());
    }
    if (from.has_num_sats_multi()) {
      set_num_sats_multi(from.num_sats_multi());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_extended_solution_status()) {
      set_extended_solution_status(from.extended_solution_status());
    }
    if (from.has_galileo_beidou_used_mask()) {
      set_galileo_beidou_used_mask(from.galileo_beidou_used_mask());
    }
    if (from.has_gps_glonass_used_mask()) {
      set_gps_glonass_used_mask(from.gps_glonass_used_mask());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GnssBestPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssBestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssBestPose::CopyFrom(const GnssBestPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssBestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssBestPose::IsInitialized() const {

  return true;
}

void GnssBestPose::Swap(GnssBestPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssBestPose::InternalSwap(GnssBestPose* other) {
  std::swap(header_, other->header_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(sol_status_, other->sol_status_);
  std::swap(sol_type_, other->sol_type_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(height_msl_, other->height_msl_);
  std::swap(undulation_, other->undulation_);
  std::swap(datum_id_, other->datum_id_);
  std::swap(latitude_std_dev_, other->latitude_std_dev_);
  std::swap(longitude_std_dev_, other->longitude_std_dev_);
  std::swap(height_std_dev_, other->height_std_dev_);
  base_station_id_.Swap(&other->base_station_id_);
  std::swap(differential_age_, other->differential_age_);
  std::swap(solution_age_, other->solution_age_);
  std::swap(num_sats_tracked_, other->num_sats_tracked_);
  std::swap(num_sats_in_solution_, other->num_sats_in_solution_);
  std::swap(num_sats_l1_, other->num_sats_l1_);
  std::swap(num_sats_multi_, other->num_sats_multi_);
  std::swap(reserved_, other->reserved_);
  std::swap(extended_solution_status_, other->extended_solution_status_);
  std::swap(galileo_beidou_used_mask_, other->galileo_beidou_used_mask_);
  std::swap(gps_glonass_used_mask_, other->gps_glonass_used_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssBestPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GnssBestPose_descriptor_;
  metadata.reflection = GnssBestPose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssBestPose

// optional .apollo.common.Header header = 1;
bool GnssBestPose::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GnssBestPose::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void GnssBestPose::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void GnssBestPose::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& GnssBestPose::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* GnssBestPose::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.header)
  return header_;
}
::apollo::common::Header* GnssBestPose::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void GnssBestPose::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.header)
}

// optional double measurement_time = 2;
bool GnssBestPose::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GnssBestPose::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000002u;
}
void GnssBestPose::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void GnssBestPose::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
 double GnssBestPose::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.measurement_time)
  return measurement_time_;
}
 void GnssBestPose::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.measurement_time)
}

// optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
bool GnssBestPose::has_sol_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GnssBestPose::set_has_sol_status() {
  _has_bits_[0] |= 0x00000004u;
}
void GnssBestPose::clear_has_sol_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void GnssBestPose::clear_sol_status() {
  sol_status_ = 0;
  clear_has_sol_status();
}
 ::apollo::drivers::gnss::SolutionStatus GnssBestPose::sol_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_status)
  return static_cast< ::apollo::drivers::gnss::SolutionStatus >(sol_status_);
}
 void GnssBestPose::set_sol_status(::apollo::drivers::gnss::SolutionStatus value) {
  assert(::apollo::drivers::gnss::SolutionStatus_IsValid(value));
  set_has_sol_status();
  sol_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_status)
}

// optional .apollo.drivers.gnss.SolutionType sol_type = 4;
bool GnssBestPose::has_sol_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GnssBestPose::set_has_sol_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GnssBestPose::clear_has_sol_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GnssBestPose::clear_sol_type() {
  sol_type_ = 0;
  clear_has_sol_type();
}
 ::apollo::drivers::gnss::SolutionType GnssBestPose::sol_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_type)
  return static_cast< ::apollo::drivers::gnss::SolutionType >(sol_type_);
}
 void GnssBestPose::set_sol_type(::apollo::drivers::gnss::SolutionType value) {
  assert(::apollo::drivers::gnss::SolutionType_IsValid(value));
  set_has_sol_type();
  sol_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_type)
}

// optional double latitude = 5;
bool GnssBestPose::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GnssBestPose::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
void GnssBestPose::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void GnssBestPose::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double GnssBestPose::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude)
  return latitude_;
}
 void GnssBestPose::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude)
}

// optional double longitude = 6;
bool GnssBestPose::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GnssBestPose::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
void GnssBestPose::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void GnssBestPose::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double GnssBestPose::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude)
  return longitude_;
}
 void GnssBestPose::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude)
}

// optional double height_msl = 7;
bool GnssBestPose::has_height_msl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GnssBestPose::set_has_height_msl() {
  _has_bits_[0] |= 0x00000040u;
}
void GnssBestPose::clear_has_height_msl() {
  _has_bits_[0] &= ~0x00000040u;
}
void GnssBestPose::clear_height_msl() {
  height_msl_ = 0;
  clear_has_height_msl();
}
 double GnssBestPose::height_msl() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_msl)
  return height_msl_;
}
 void GnssBestPose::set_height_msl(double value) {
  set_has_height_msl();
  height_msl_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_msl)
}

// optional float undulation = 8;
bool GnssBestPose::has_undulation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GnssBestPose::set_has_undulation() {
  _has_bits_[0] |= 0x00000080u;
}
void GnssBestPose::clear_has_undulation() {
  _has_bits_[0] &= ~0x00000080u;
}
void GnssBestPose::clear_undulation() {
  undulation_ = 0;
  clear_has_undulation();
}
 float GnssBestPose::undulation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.undulation)
  return undulation_;
}
 void GnssBestPose::set_undulation(float value) {
  set_has_undulation();
  undulation_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.undulation)
}

// optional .apollo.drivers.gnss.DatumId datum_id = 9;
bool GnssBestPose::has_datum_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GnssBestPose::set_has_datum_id() {
  _has_bits_[0] |= 0x00000100u;
}
void GnssBestPose::clear_has_datum_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void GnssBestPose::clear_datum_id() {
  datum_id_ = 61;
  clear_has_datum_id();
}
 ::apollo::drivers::gnss::DatumId GnssBestPose::datum_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.datum_id)
  return static_cast< ::apollo::drivers::gnss::DatumId >(datum_id_);
}
 void GnssBestPose::set_datum_id(::apollo::drivers::gnss::DatumId value) {
  assert(::apollo::drivers::gnss::DatumId_IsValid(value));
  set_has_datum_id();
  datum_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.datum_id)
}

// optional float latitude_std_dev = 10;
bool GnssBestPose::has_latitude_std_dev() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GnssBestPose::set_has_latitude_std_dev() {
  _has_bits_[0] |= 0x00000200u;
}
void GnssBestPose::clear_has_latitude_std_dev() {
  _has_bits_[0] &= ~0x00000200u;
}
void GnssBestPose::clear_latitude_std_dev() {
  latitude_std_dev_ = 0;
  clear_has_latitude_std_dev();
}
 float GnssBestPose::latitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
  return latitude_std_dev_;
}
 void GnssBestPose::set_latitude_std_dev(float value) {
  set_has_latitude_std_dev();
  latitude_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
}

// optional float longitude_std_dev = 11;
bool GnssBestPose::has_longitude_std_dev() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GnssBestPose::set_has_longitude_std_dev() {
  _has_bits_[0] |= 0x00000400u;
}
void GnssBestPose::clear_has_longitude_std_dev() {
  _has_bits_[0] &= ~0x00000400u;
}
void GnssBestPose::clear_longitude_std_dev() {
  longitude_std_dev_ = 0;
  clear_has_longitude_std_dev();
}
 float GnssBestPose::longitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
  return longitude_std_dev_;
}
 void GnssBestPose::set_longitude_std_dev(float value) {
  set_has_longitude_std_dev();
  longitude_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
}

// optional float height_std_dev = 12;
bool GnssBestPose::has_height_std_dev() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GnssBestPose::set_has_height_std_dev() {
  _has_bits_[0] |= 0x00000800u;
}
void GnssBestPose::clear_has_height_std_dev() {
  _has_bits_[0] &= ~0x00000800u;
}
void GnssBestPose::clear_height_std_dev() {
  height_std_dev_ = 0;
  clear_has_height_std_dev();
}
 float GnssBestPose::height_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_std_dev)
  return height_std_dev_;
}
 void GnssBestPose::set_height_std_dev(float value) {
  set_has_height_std_dev();
  height_std_dev_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_std_dev)
}

// optional bytes base_station_id = 13;
bool GnssBestPose::has_base_station_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GnssBestPose::set_has_base_station_id() {
  _has_bits_[0] |= 0x00001000u;
}
void GnssBestPose::clear_has_base_station_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void GnssBestPose::clear_base_station_id() {
  base_station_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_station_id();
}
 const ::std::string& GnssBestPose::base_station_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return base_station_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GnssBestPose::set_base_station_id(const ::std::string& value) {
  set_has_base_station_id();
  base_station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
 void GnssBestPose::set_base_station_id(const char* value) {
  set_has_base_station_id();
  base_station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
 void GnssBestPose::set_base_station_id(const void* value, size_t size) {
  set_has_base_station_id();
  base_station_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
 ::std::string* GnssBestPose::mutable_base_station_id() {
  set_has_base_station_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return base_station_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GnssBestPose::release_base_station_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.base_station_id)
  clear_has_base_station_id();
  return base_station_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GnssBestPose::set_allocated_base_station_id(::std::string* base_station_id) {
  if (base_station_id != NULL) {
    set_has_base_station_id();
  } else {
    clear_has_base_station_id();
  }
  base_station_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_station_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.base_station_id)
}

// optional float differential_age = 14;
bool GnssBestPose::has_differential_age() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GnssBestPose::set_has_differential_age() {
  _has_bits_[0] |= 0x00002000u;
}
void GnssBestPose::clear_has_differential_age() {
  _has_bits_[0] &= ~0x00002000u;
}
void GnssBestPose::clear_differential_age() {
  differential_age_ = 0;
  clear_has_differential_age();
}
 float GnssBestPose::differential_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.differential_age)
  return differential_age_;
}
 void GnssBestPose::set_differential_age(float value) {
  set_has_differential_age();
  differential_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.differential_age)
}

// optional float solution_age = 15;
bool GnssBestPose::has_solution_age() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GnssBestPose::set_has_solution_age() {
  _has_bits_[0] |= 0x00004000u;
}
void GnssBestPose::clear_has_solution_age() {
  _has_bits_[0] &= ~0x00004000u;
}
void GnssBestPose::clear_solution_age() {
  solution_age_ = 0;
  clear_has_solution_age();
}
 float GnssBestPose::solution_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.solution_age)
  return solution_age_;
}
 void GnssBestPose::set_solution_age(float value) {
  set_has_solution_age();
  solution_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.solution_age)
}

// optional uint32 num_sats_tracked = 16;
bool GnssBestPose::has_num_sats_tracked() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GnssBestPose::set_has_num_sats_tracked() {
  _has_bits_[0] |= 0x00008000u;
}
void GnssBestPose::clear_has_num_sats_tracked() {
  _has_bits_[0] &= ~0x00008000u;
}
void GnssBestPose::clear_num_sats_tracked() {
  num_sats_tracked_ = 0u;
  clear_has_num_sats_tracked();
}
 ::google::protobuf::uint32 GnssBestPose::num_sats_tracked() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
  return num_sats_tracked_;
}
 void GnssBestPose::set_num_sats_tracked(::google::protobuf::uint32 value) {
  set_has_num_sats_tracked();
  num_sats_tracked_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
}

// optional uint32 num_sats_in_solution = 17;
bool GnssBestPose::has_num_sats_in_solution() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void GnssBestPose::set_has_num_sats_in_solution() {
  _has_bits_[0] |= 0x00010000u;
}
void GnssBestPose::clear_has_num_sats_in_solution() {
  _has_bits_[0] &= ~0x00010000u;
}
void GnssBestPose::clear_num_sats_in_solution() {
  num_sats_in_solution_ = 0u;
  clear_has_num_sats_in_solution();
}
 ::google::protobuf::uint32 GnssBestPose::num_sats_in_solution() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
  return num_sats_in_solution_;
}
 void GnssBestPose::set_num_sats_in_solution(::google::protobuf::uint32 value) {
  set_has_num_sats_in_solution();
  num_sats_in_solution_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
}

// optional uint32 num_sats_l1 = 18;
bool GnssBestPose::has_num_sats_l1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void GnssBestPose::set_has_num_sats_l1() {
  _has_bits_[0] |= 0x00020000u;
}
void GnssBestPose::clear_has_num_sats_l1() {
  _has_bits_[0] &= ~0x00020000u;
}
void GnssBestPose::clear_num_sats_l1() {
  num_sats_l1_ = 0u;
  clear_has_num_sats_l1();
}
 ::google::protobuf::uint32 GnssBestPose::num_sats_l1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
  return num_sats_l1_;
}
 void GnssBestPose::set_num_sats_l1(::google::protobuf::uint32 value) {
  set_has_num_sats_l1();
  num_sats_l1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
}

// optional uint32 num_sats_multi = 19;
bool GnssBestPose::has_num_sats_multi() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void GnssBestPose::set_has_num_sats_multi() {
  _has_bits_[0] |= 0x00040000u;
}
void GnssBestPose::clear_has_num_sats_multi() {
  _has_bits_[0] &= ~0x00040000u;
}
void GnssBestPose::clear_num_sats_multi() {
  num_sats_multi_ = 0u;
  clear_has_num_sats_multi();
}
 ::google::protobuf::uint32 GnssBestPose::num_sats_multi() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
  return num_sats_multi_;
}
 void GnssBestPose::set_num_sats_multi(::google::protobuf::uint32 value) {
  set_has_num_sats_multi();
  num_sats_multi_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
}

// optional uint32 reserved = 20;
bool GnssBestPose::has_reserved() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void GnssBestPose::set_has_reserved() {
  _has_bits_[0] |= 0x00080000u;
}
void GnssBestPose::clear_has_reserved() {
  _has_bits_[0] &= ~0x00080000u;
}
void GnssBestPose::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
 ::google::protobuf::uint32 GnssBestPose::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.reserved)
  return reserved_;
}
 void GnssBestPose::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.reserved)
}

// optional uint32 extended_solution_status = 21;
bool GnssBestPose::has_extended_solution_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void GnssBestPose::set_has_extended_solution_status() {
  _has_bits_[0] |= 0x00100000u;
}
void GnssBestPose::clear_has_extended_solution_status() {
  _has_bits_[0] &= ~0x00100000u;
}
void GnssBestPose::clear_extended_solution_status() {
  extended_solution_status_ = 0u;
  clear_has_extended_solution_status();
}
 ::google::protobuf::uint32 GnssBestPose::extended_solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
  return extended_solution_status_;
}
 void GnssBestPose::set_extended_solution_status(::google::protobuf::uint32 value) {
  set_has_extended_solution_status();
  extended_solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
}

// optional uint32 galileo_beidou_used_mask = 22;
bool GnssBestPose::has_galileo_beidou_used_mask() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void GnssBestPose::set_has_galileo_beidou_used_mask() {
  _has_bits_[0] |= 0x00200000u;
}
void GnssBestPose::clear_has_galileo_beidou_used_mask() {
  _has_bits_[0] &= ~0x00200000u;
}
void GnssBestPose::clear_galileo_beidou_used_mask() {
  galileo_beidou_used_mask_ = 0u;
  clear_has_galileo_beidou_used_mask();
}
 ::google::protobuf::uint32 GnssBestPose::galileo_beidou_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
  return galileo_beidou_used_mask_;
}
 void GnssBestPose::set_galileo_beidou_used_mask(::google::protobuf::uint32 value) {
  set_has_galileo_beidou_used_mask();
  galileo_beidou_used_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
}

// optional uint32 gps_glonass_used_mask = 23;
bool GnssBestPose::has_gps_glonass_used_mask() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void GnssBestPose::set_has_gps_glonass_used_mask() {
  _has_bits_[0] |= 0x00400000u;
}
void GnssBestPose::clear_has_gps_glonass_used_mask() {
  _has_bits_[0] &= ~0x00400000u;
}
void GnssBestPose::clear_gps_glonass_used_mask() {
  gps_glonass_used_mask_ = 0u;
  clear_has_gps_glonass_used_mask();
}
 ::google::protobuf::uint32 GnssBestPose::gps_glonass_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
  return gps_glonass_used_mask_;
}
 void GnssBestPose::set_gps_glonass_used_mask(::google::protobuf::uint32 value) {
  set_has_gps_glonass_used_mask();
  gps_glonass_used_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
