// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dreamview/hmi_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dreamview/hmi_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace dreamview {

namespace {

const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_CommandsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Mode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mode_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioCapturingConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioCapturingConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* HMIConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HMIConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* HMIConfig_ModulesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HMIConfig_HardwareEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HMIConfig_ToolsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HMIConfig_AvailableMapsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HMIConfig_AvailableVehiclesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HMIConfig_ModesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehicleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleData_DataFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleData_DataFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HMIAction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto() {
  protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dreamview/hmi_config.proto");
  GOOGLE_CHECK(file != NULL);
  Component_descriptor_ = file->message_type(0);
  static const int Component_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, commands_),
  };
  Component_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      -1,
      -1,
      sizeof(Component),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _internal_metadata_),
      -1);
  Component_Command_descriptor_ = Component_descriptor_->nested_type(0);
  static const int Component_Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component_Command, debug_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component_Command, prod_cmd_),
  };
  Component_Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Component_Command_descriptor_,
      Component_Command::default_instance_,
      Component_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component_Command, _has_bits_[0]),
      -1,
      -1,
      sizeof(Component_Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component_Command, _internal_metadata_),
      -1);
  Component_CommandsEntry_descriptor_ = Component_descriptor_->nested_type(1);
  Mode_descriptor_ = file->message_type(1);
  static const int Mode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, live_modules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, live_hardware_),
  };
  Mode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mode_descriptor_,
      Mode::default_instance_,
      Mode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, _has_bits_[0]),
      -1,
      -1,
      sizeof(Mode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, _internal_metadata_),
      -1);
  AudioCapturingConfig_descriptor_ = file->message_type(2);
  static const int AudioCapturingConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, bits_per_sample_),
  };
  AudioCapturingConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AudioCapturingConfig_descriptor_,
      AudioCapturingConfig::default_instance_,
      AudioCapturingConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(AudioCapturingConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, _internal_metadata_),
      -1);
  HMIConfig_descriptor_ = file->message_type(3);
  static const int HMIConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, docker_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, modules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, tools_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, available_maps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, available_vehicles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, utm_zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, audio_capturing_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, chassis_high_beam_action_),
  };
  HMIConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HMIConfig_descriptor_,
      HMIConfig::default_instance_,
      HMIConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(HMIConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, _internal_metadata_),
      -1);
  HMIConfig_ModulesEntry_descriptor_ = HMIConfig_descriptor_->nested_type(0);
  HMIConfig_HardwareEntry_descriptor_ = HMIConfig_descriptor_->nested_type(1);
  HMIConfig_ToolsEntry_descriptor_ = HMIConfig_descriptor_->nested_type(2);
  HMIConfig_AvailableMapsEntry_descriptor_ = HMIConfig_descriptor_->nested_type(3);
  HMIConfig_AvailableVehiclesEntry_descriptor_ = HMIConfig_descriptor_->nested_type(4);
  HMIConfig_ModesEntry_descriptor_ = HMIConfig_descriptor_->nested_type(5);
  VehicleData_descriptor_ = file->message_type(4);
  static const int VehicleData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, data_files_),
  };
  VehicleData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleData_descriptor_,
      VehicleData::default_instance_,
      VehicleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, _internal_metadata_),
      -1);
  VehicleData_DataFile_descriptor_ = VehicleData_descriptor_->nested_type(0);
  static const int VehicleData_DataFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, source_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, dest_path_),
  };
  VehicleData_DataFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleData_DataFile_descriptor_,
      VehicleData_DataFile::default_instance_,
      VehicleData_DataFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleData_DataFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, _internal_metadata_),
      -1);
  HMIAction_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dreamview_2fhmi_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Component_Command_descriptor_, &Component_Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Component_CommandsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::dreamview::Component_Command,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Component_CommandsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mode_descriptor_, &Mode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AudioCapturingConfig_descriptor_, &AudioCapturingConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HMIConfig_descriptor_, &HMIConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HMIConfig_ModulesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::dreamview::Component,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                HMIConfig_ModulesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HMIConfig_HardwareEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::dreamview::Component,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                HMIConfig_HardwareEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HMIConfig_ToolsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::dreamview::Component,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                HMIConfig_ToolsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HMIConfig_AvailableMapsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                HMIConfig_AvailableMapsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HMIConfig_AvailableVehiclesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                HMIConfig_AvailableVehiclesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HMIConfig_ModesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::dreamview::Mode,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                HMIConfig_ModesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleData_descriptor_, &VehicleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleData_DataFile_descriptor_, &VehicleData_DataFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto() {
  delete Component::default_instance_;
  delete Component_reflection_;
  delete Component_Command::default_instance_;
  delete Component_Command_reflection_;
  delete Mode::default_instance_;
  delete Mode_reflection_;
  delete AudioCapturingConfig::default_instance_;
  delete AudioCapturingConfig_reflection_;
  delete HMIConfig::default_instance_;
  delete HMIConfig_reflection_;
  delete VehicleData::default_instance_;
  delete VehicleData_reflection_;
  delete VehicleData_DataFile::default_instance_;
  delete VehicleData_DataFile_reflection_;
}

void protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032dreamview/hmi_config.proto\022\020apollo.dre"
    "amview\"\362\001\n\tComponent\022\024\n\014display_name\030\001 \001"
    "(\t\022\014\n\004path\030\002 \001(\t\022;\n\010commands\030\003 \003(\0132).apo"
    "llo.dreamview.Component.CommandsEntry\032.\n"
    "\007Command\022\021\n\tdebug_cmd\030\001 \001(\t\022\020\n\010prod_cmd\030"
    "\002 \001(\t\032T\n\rCommandsEntry\022\013\n\003key\030\001 \001(\t\0222\n\005v"
    "alue\030\002 \001(\0132#.apollo.dreamview.Component."
    "Command:\0028\001\"3\n\004Mode\022\024\n\014live_modules\030\001 \003("
    "\t\022\025\n\rlive_hardware\030\002 \003(\t\"Y\n\024AudioCapturi"
    "ngConfig\022\023\n\010channels\030\001 \001(\005:\0011\022\023\n\013sample_"
    "rate\030\002 \001(\005\022\027\n\017bits_per_sample\030\003 \001(\005\"\325\007\n\t"
    "HMIConfig\022\024\n\014docker_image\030\001 \001(\t\0229\n\007modul"
    "es\030\002 \003(\0132(.apollo.dreamview.HMIConfig.Mo"
    "dulesEntry\022;\n\010hardware\030\003 \003(\0132).apollo.dr"
    "eamview.HMIConfig.HardwareEntry\0225\n\005tools"
    "\030\004 \003(\0132&.apollo.dreamview.HMIConfig.Tool"
    "sEntry\022F\n\016available_maps\030\005 \003(\0132..apollo."
    "dreamview.HMIConfig.AvailableMapsEntry\022N"
    "\n\022available_vehicles\030\006 \003(\01322.apollo.drea"
    "mview.HMIConfig.AvailableVehiclesEntry\0225"
    "\n\005modes\030\007 \003(\0132&.apollo.dreamview.HMIConf"
    "ig.ModesEntry\022\023\n\013utm_zone_id\030\010 \001(\005\022D\n\024au"
    "dio_capturing_conf\030\t \001(\0132&.apollo.dreamv"
    "iew.AudioCapturingConfig\022=\n\030chassis_high"
    "_beam_action\030\n \001(\0162\033.apollo.dreamview.HM"
    "IAction\032K\n\014ModulesEntry\022\013\n\003key\030\001 \001(\t\022*\n\005"
    "value\030\002 \001(\0132\033.apollo.dreamview.Component"
    ":\0028\001\032L\n\rHardwareEntry\022\013\n\003key\030\001 \001(\t\022*\n\005va"
    "lue\030\002 \001(\0132\033.apollo.dreamview.Component:\002"
    "8\001\032I\n\nToolsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002"
    " \001(\0132\033.apollo.dreamview.Component:\0028\001\0324\n"
    "\022AvailableMapsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\t:\0028\001\0328\n\026AvailableVehiclesEntry\022\013\n"
    "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032D\n\nModesEn"
    "try\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.apollo"
    ".dreamview.Mode:\0028\001\"}\n\013VehicleData\022:\n\nda"
    "ta_files\030\001 \003(\0132&.apollo.dreamview.Vehicl"
    "eData.DataFile\0322\n\010DataFile\022\023\n\013source_pat"
    "h\030\001 \001(\t\022\021\n\tdest_path\030\002 \001(\t*>\n\tHMIAction\022"
    "\010\n\004NONE\020\000\022\t\n\005SETUP\020\001\022\r\n\tAUTO_MODE\020\002\022\r\n\tD"
    "ISENGAGE\020\003", 1610);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dreamview/hmi_config.proto", &protobuf_RegisterTypes);
  Component::default_instance_ = new Component();
  Component_Command::default_instance_ = new Component_Command();
  Mode::default_instance_ = new Mode();
  AudioCapturingConfig::default_instance_ = new AudioCapturingConfig();
  HMIConfig::default_instance_ = new HMIConfig();
  VehicleData::default_instance_ = new VehicleData();
  VehicleData_DataFile::default_instance_ = new VehicleData_DataFile();
  Component::default_instance_->InitAsDefaultInstance();
  Component_Command::default_instance_->InitAsDefaultInstance();
  Mode::default_instance_->InitAsDefaultInstance();
  AudioCapturingConfig::default_instance_->InitAsDefaultInstance();
  HMIConfig::default_instance_->InitAsDefaultInstance();
  VehicleData::default_instance_->InitAsDefaultInstance();
  VehicleData_DataFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dreamview_2fhmi_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dreamview_2fhmi_5fconfig_2eproto {
  StaticDescriptorInitializer_dreamview_2fhmi_5fconfig_2eproto() {
    protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  }
} static_descriptor_initializer_dreamview_2fhmi_5fconfig_2eproto_;
const ::google::protobuf::EnumDescriptor* HMIAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HMIAction_descriptor_;
}
bool HMIAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Component_Command::kDebugCmdFieldNumber;
const int Component_Command::kProdCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Component_Command::Component_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Component.Command)
}

void Component_Command::InitAsDefaultInstance() {
}

Component_Command::Component_Command(const Component_Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Component.Command)
}

void Component_Command::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  debug_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prod_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component_Command::~Component_Command() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Component.Command)
  SharedDtor();
}

void Component_Command::SharedDtor() {
  debug_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prod_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Component_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_Command_descriptor_;
}

const Component_Command& Component_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  return *default_instance_;
}

Component_Command* Component_Command::default_instance_ = NULL;

Component_Command* Component_Command::New(::google::protobuf::Arena* arena) const {
  Component_Command* n = new Component_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Component_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Component.Command)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_debug_cmd()) {
      debug_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_prod_cmd()) {
      prod_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Component_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Component.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug_cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_cmd().data(), this->debug_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Component.Command.debug_cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_prod_cmd;
        break;
      }

      // optional string prod_cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_prod_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prod_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prod_cmd().data(), this->prod_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Component.Command.prod_cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Component.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Component.Command)
  return false;
#undef DO_
}

void Component_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Component.Command)
  // optional string debug_cmd = 1;
  if (has_debug_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_cmd().data(), this->debug_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.Command.debug_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->debug_cmd(), output);
  }

  // optional string prod_cmd = 2;
  if (has_prod_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prod_cmd().data(), this->prod_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.Command.prod_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prod_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Component.Command)
}

::google::protobuf::uint8* Component_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Component.Command)
  // optional string debug_cmd = 1;
  if (has_debug_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_cmd().data(), this->debug_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.Command.debug_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->debug_cmd(), target);
  }

  // optional string prod_cmd = 2;
  if (has_prod_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prod_cmd().data(), this->prod_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.Command.prod_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prod_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Component.Command)
  return target;
}

int Component_Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Component.Command)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string debug_cmd = 1;
    if (has_debug_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_cmd());
    }

    // optional string prod_cmd = 2;
    if (has_prod_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prod_cmd());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Component.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Component_Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Component_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Component.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Component.Command)
    MergeFrom(*source);
  }
}

void Component_Command::MergeFrom(const Component_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Component.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_cmd()) {
      set_has_debug_cmd();
      debug_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_cmd_);
    }
    if (from.has_prod_cmd()) {
      set_has_prod_cmd();
      prod_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prod_cmd_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Component_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Component.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component_Command::CopyFrom(const Component_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Component.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component_Command::IsInitialized() const {

  return true;
}

void Component_Command::Swap(Component_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Component_Command::InternalSwap(Component_Command* other) {
  debug_cmd_.Swap(&other->debug_cmd_);
  prod_cmd_.Swap(&other->prod_cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Component_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_Command_descriptor_;
  metadata.reflection = Component_Command_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Component::kDisplayNameFieldNumber;
const int Component::kPathFieldNumber;
const int Component::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Component::Component()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Component)
}

void Component::InitAsDefaultInstance() {
}

Component::Component(const Component& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Component)
}

void Component::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commands_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  commands_.SetEntryDescriptor(
      &::apollo::dreamview::Component_CommandsEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New(::google::protobuf::Arena* arena) const {
  Component* n = new Component;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Component)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_display_name()) {
      display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string display_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Component.display_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Component.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commands;
        break;
      }

      // map<string, .apollo.dreamview.Component.Command> commands = 3;
      case 3: {
        if (tag == 26) {
         parse_commands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_commands:
          Component_CommandsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::dreamview::Component_Command,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command > > parser(&commands_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Component.CommandsEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_commands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Component)
  return false;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Component)
  // optional string display_name = 1;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // map<string, .apollo.dreamview.Component.Command> commands = 3;
  if (!this->commands().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Component.CommandsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->commands().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->commands().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::const_iterator
          it = this->commands().begin();
          it != this->commands().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Component_CommandsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(commands_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Component_CommandsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::const_iterator
          it = this->commands().begin();
          it != this->commands().end(); ++it) {
        entry.reset(commands_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Component)
}

::google::protobuf::uint8* Component::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Component)
  // optional string display_name = 1;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // map<string, .apollo.dreamview.Component.Command> commands = 3;
  if (!this->commands().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Component.CommandsEntry.key");
      }
    };

    if (deterministic &&
        this->commands().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->commands().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::const_iterator
          it = this->commands().begin();
          it != this->commands().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Component_CommandsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(commands_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Component_CommandsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::const_iterator
          it = this->commands().begin();
          it != this->commands().end(); ++it) {
        entry.reset(commands_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Component)
  return target;
}

int Component::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Component)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string display_name = 1;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  // map<string, .apollo.dreamview.Component.Command> commands = 3;
  total_size += 1 * this->commands_size();
  {
    ::google::protobuf::scoped_ptr<Component_CommandsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >::const_iterator
        it = this->commands().begin();
        it != this->commands().end(); ++it) {
      entry.reset(commands_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Component)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Component* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Component>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Component)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Component)
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Component)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display_name()) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {

  return true;
}

void Component::Swap(Component* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Component::InternalSwap(Component* other) {
  display_name_.Swap(&other->display_name_);
  path_.Swap(&other->path_);
  commands_.Swap(&other->commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Component_Command

// optional string debug_cmd = 1;
bool Component_Command::has_debug_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Component_Command::set_has_debug_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void Component_Command::clear_has_debug_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void Component_Command::clear_debug_cmd() {
  debug_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug_cmd();
}
 const ::std::string& Component_Command::debug_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.Command.debug_cmd)
  return debug_cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component_Command::set_debug_cmd(const ::std::string& value) {
  set_has_debug_cmd();
  debug_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.Command.debug_cmd)
}
 void Component_Command::set_debug_cmd(const char* value) {
  set_has_debug_cmd();
  debug_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.Command.debug_cmd)
}
 void Component_Command::set_debug_cmd(const char* value, size_t size) {
  set_has_debug_cmd();
  debug_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.Command.debug_cmd)
}
 ::std::string* Component_Command::mutable_debug_cmd() {
  set_has_debug_cmd();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.Command.debug_cmd)
  return debug_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Component_Command::release_debug_cmd() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.Command.debug_cmd)
  clear_has_debug_cmd();
  return debug_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component_Command::set_allocated_debug_cmd(::std::string* debug_cmd) {
  if (debug_cmd != NULL) {
    set_has_debug_cmd();
  } else {
    clear_has_debug_cmd();
  }
  debug_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_cmd);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.Command.debug_cmd)
}

// optional string prod_cmd = 2;
bool Component_Command::has_prod_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Component_Command::set_has_prod_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void Component_Command::clear_has_prod_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Component_Command::clear_prod_cmd() {
  prod_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prod_cmd();
}
 const ::std::string& Component_Command::prod_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.Command.prod_cmd)
  return prod_cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component_Command::set_prod_cmd(const ::std::string& value) {
  set_has_prod_cmd();
  prod_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.Command.prod_cmd)
}
 void Component_Command::set_prod_cmd(const char* value) {
  set_has_prod_cmd();
  prod_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.Command.prod_cmd)
}
 void Component_Command::set_prod_cmd(const char* value, size_t size) {
  set_has_prod_cmd();
  prod_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.Command.prod_cmd)
}
 ::std::string* Component_Command::mutable_prod_cmd() {
  set_has_prod_cmd();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.Command.prod_cmd)
  return prod_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Component_Command::release_prod_cmd() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.Command.prod_cmd)
  clear_has_prod_cmd();
  return prod_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component_Command::set_allocated_prod_cmd(::std::string* prod_cmd) {
  if (prod_cmd != NULL) {
    set_has_prod_cmd();
  } else {
    clear_has_prod_cmd();
  }
  prod_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prod_cmd);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.Command.prod_cmd)
}

// -------------------------------------------------------------------

// Component

// optional string display_name = 1;
bool Component::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Component::set_has_display_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Component::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Component::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
 const ::std::string& Component::display_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.display_name)
}
 void Component::set_display_name(const char* value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.display_name)
}
 void Component::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.display_name)
}
 ::std::string* Component::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Component::release_display_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.display_name)
}

// optional string path = 2;
bool Component::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Component::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void Component::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void Component::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& Component::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.path)
}
 void Component::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.path)
}
 void Component::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.path)
}
 ::std::string* Component::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Component::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Component::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.path)
}

// map<string, .apollo.dreamview.Component.Command> commands = 3;
int Component::commands_size() const {
  return commands_.size();
}
void Component::clear_commands() {
  commands_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >&
Component::commands() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Component.commands)
  return commands_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component_Command >*
Component::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Component.commands)
  return commands_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mode::kLiveModulesFieldNumber;
const int Mode::kLiveHardwareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mode::Mode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Mode)
}

void Mode::InitAsDefaultInstance() {
}

Mode::Mode(const Mode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Mode)
}

void Mode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mode::~Mode() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Mode)
  SharedDtor();
}

void Mode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mode_descriptor_;
}

const Mode& Mode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  return *default_instance_;
}

Mode* Mode::default_instance_ = NULL;

Mode* Mode::New(::google::protobuf::Arena* arena) const {
  Mode* n = new Mode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Mode)
  live_modules_.Clear();
  live_hardware_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Mode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string live_modules = 1;
      case 1: {
        if (tag == 10) {
         parse_live_modules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_live_modules()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->live_modules(this->live_modules_size() - 1).data(),
            this->live_modules(this->live_modules_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Mode.live_modules");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_live_modules;
        if (input->ExpectTag(18)) goto parse_live_hardware;
        break;
      }

      // repeated string live_hardware = 2;
      case 2: {
        if (tag == 18) {
         parse_live_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_live_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->live_hardware(this->live_hardware_size() - 1).data(),
            this->live_hardware(this->live_hardware_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Mode.live_hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_live_hardware;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Mode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Mode)
  return false;
#undef DO_
}

void Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Mode)
  // repeated string live_modules = 1;
  for (int i = 0; i < this->live_modules_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_modules(i).data(), this->live_modules(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Mode.live_modules");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->live_modules(i), output);
  }

  // repeated string live_hardware = 2;
  for (int i = 0; i < this->live_hardware_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_hardware(i).data(), this->live_hardware(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Mode.live_hardware");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->live_hardware(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Mode)
}

::google::protobuf::uint8* Mode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Mode)
  // repeated string live_modules = 1;
  for (int i = 0; i < this->live_modules_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_modules(i).data(), this->live_modules(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Mode.live_modules");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->live_modules(i), target);
  }

  // repeated string live_hardware = 2;
  for (int i = 0; i < this->live_hardware_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_hardware(i).data(), this->live_hardware(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Mode.live_hardware");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->live_hardware(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Mode)
  return target;
}

int Mode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Mode)
  int total_size = 0;

  // repeated string live_modules = 1;
  total_size += 1 * this->live_modules_size();
  for (int i = 0; i < this->live_modules_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->live_modules(i));
  }

  // repeated string live_hardware = 2;
  total_size += 1 * this->live_hardware_size();
  for (int i = 0; i < this->live_hardware_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->live_hardware(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Mode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Mode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Mode)
    MergeFrom(*source);
  }
}

void Mode::MergeFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Mode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  live_modules_.MergeFrom(from.live_modules_);
  live_hardware_.MergeFrom(from.live_hardware_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Mode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mode::CopyFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mode::IsInitialized() const {

  return true;
}

void Mode::Swap(Mode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mode::InternalSwap(Mode* other) {
  live_modules_.UnsafeArenaSwap(&other->live_modules_);
  live_hardware_.UnsafeArenaSwap(&other->live_hardware_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mode_descriptor_;
  metadata.reflection = Mode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mode

// repeated string live_modules = 1;
int Mode::live_modules_size() const {
  return live_modules_.size();
}
void Mode::clear_live_modules() {
  live_modules_.Clear();
}
 const ::std::string& Mode::live_modules(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_modules)
  return live_modules_.Get(index);
}
 ::std::string* Mode::mutable_live_modules(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_modules)
  return live_modules_.Mutable(index);
}
 void Mode::set_live_modules(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_modules)
  live_modules_.Mutable(index)->assign(value);
}
 void Mode::set_live_modules(int index, const char* value) {
  live_modules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_modules)
}
 void Mode::set_live_modules(int index, const char* value, size_t size) {
  live_modules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_modules)
}
 ::std::string* Mode::add_live_modules() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_modules)
  return live_modules_.Add();
}
 void Mode::add_live_modules(const ::std::string& value) {
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_modules)
}
 void Mode::add_live_modules(const char* value) {
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_modules)
}
 void Mode::add_live_modules(const char* value, size_t size) {
  live_modules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_modules)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_modules() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_modules)
  return live_modules_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_modules() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_modules)
  return &live_modules_;
}

// repeated string live_hardware = 2;
int Mode::live_hardware_size() const {
  return live_hardware_.size();
}
void Mode::clear_live_hardware() {
  live_hardware_.Clear();
}
 const ::std::string& Mode::live_hardware(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Get(index);
}
 ::std::string* Mode::mutable_live_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Mutable(index);
}
 void Mode::set_live_hardware(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_hardware)
  live_hardware_.Mutable(index)->assign(value);
}
 void Mode::set_live_hardware(int index, const char* value) {
  live_hardware_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_hardware)
}
 void Mode::set_live_hardware(int index, const char* value, size_t size) {
  live_hardware_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_hardware)
}
 ::std::string* Mode::add_live_hardware() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Add();
}
 void Mode::add_live_hardware(const ::std::string& value) {
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_hardware)
}
 void Mode::add_live_hardware(const char* value) {
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_hardware)
}
 void Mode::add_live_hardware(const char* value, size_t size) {
  live_hardware_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_hardware)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_hardware() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_hardware)
  return live_hardware_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_hardware() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_hardware)
  return &live_hardware_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioCapturingConfig::kChannelsFieldNumber;
const int AudioCapturingConfig::kSampleRateFieldNumber;
const int AudioCapturingConfig::kBitsPerSampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioCapturingConfig::AudioCapturingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.AudioCapturingConfig)
}

void AudioCapturingConfig::InitAsDefaultInstance() {
}

AudioCapturingConfig::AudioCapturingConfig(const AudioCapturingConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.AudioCapturingConfig)
}

void AudioCapturingConfig::SharedCtor() {
  _cached_size_ = 0;
  channels_ = 1;
  sample_rate_ = 0;
  bits_per_sample_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioCapturingConfig::~AudioCapturingConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.AudioCapturingConfig)
  SharedDtor();
}

void AudioCapturingConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioCapturingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioCapturingConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioCapturingConfig_descriptor_;
}

const AudioCapturingConfig& AudioCapturingConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  return *default_instance_;
}

AudioCapturingConfig* AudioCapturingConfig::default_instance_ = NULL;

AudioCapturingConfig* AudioCapturingConfig::New(::google::protobuf::Arena* arena) const {
  AudioCapturingConfig* n = new AudioCapturingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioCapturingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.AudioCapturingConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AudioCapturingConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AudioCapturingConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(sample_rate_, bits_per_sample_);
    channels_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AudioCapturingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.AudioCapturingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sample_rate;
        break;
      }

      // optional int32 sample_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bits_per_sample;
        break;
      }

      // optional int32 bits_per_sample = 3;
      case 3: {
        if (tag == 24) {
         parse_bits_per_sample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_per_sample_)));
          set_has_bits_per_sample();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.AudioCapturingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.AudioCapturingConfig)
  return false;
#undef DO_
}

void AudioCapturingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.AudioCapturingConfig)
  // optional int32 channels = 1 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 sample_rate = 2;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate(), output);
  }

  // optional int32 bits_per_sample = 3;
  if (has_bits_per_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bits_per_sample(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.AudioCapturingConfig)
}

::google::protobuf::uint8* AudioCapturingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.AudioCapturingConfig)
  // optional int32 channels = 1 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 sample_rate = 2;
  if (has_sample_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate(), target);
  }

  // optional int32 bits_per_sample = 3;
  if (has_bits_per_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bits_per_sample(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.AudioCapturingConfig)
  return target;
}

int AudioCapturingConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.AudioCapturingConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 channels = 1 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 sample_rate = 2;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_rate());
    }

    // optional int32 bits_per_sample = 3;
    if (has_bits_per_sample()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits_per_sample());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioCapturingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.AudioCapturingConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AudioCapturingConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioCapturingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.AudioCapturingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.AudioCapturingConfig)
    MergeFrom(*source);
  }
}

void AudioCapturingConfig::MergeFrom(const AudioCapturingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.AudioCapturingConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_bits_per_sample()) {
      set_bits_per_sample(from.bits_per_sample());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AudioCapturingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.AudioCapturingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioCapturingConfig::CopyFrom(const AudioCapturingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.AudioCapturingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioCapturingConfig::IsInitialized() const {

  return true;
}

void AudioCapturingConfig::Swap(AudioCapturingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioCapturingConfig::InternalSwap(AudioCapturingConfig* other) {
  std::swap(channels_, other->channels_);
  std::swap(sample_rate_, other->sample_rate_);
  std::swap(bits_per_sample_, other->bits_per_sample_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioCapturingConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioCapturingConfig_descriptor_;
  metadata.reflection = AudioCapturingConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioCapturingConfig

// optional int32 channels = 1 [default = 1];
bool AudioCapturingConfig::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioCapturingConfig::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioCapturingConfig::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioCapturingConfig::clear_channels() {
  channels_ = 1;
  clear_has_channels();
}
 ::google::protobuf::int32 AudioCapturingConfig::channels() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.channels)
  return channels_;
}
 void AudioCapturingConfig::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.channels)
}

// optional int32 sample_rate = 2;
bool AudioCapturingConfig::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioCapturingConfig::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioCapturingConfig::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioCapturingConfig::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
 ::google::protobuf::int32 AudioCapturingConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.sample_rate)
  return sample_rate_;
}
 void AudioCapturingConfig::set_sample_rate(::google::protobuf::int32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.sample_rate)
}

// optional int32 bits_per_sample = 3;
bool AudioCapturingConfig::has_bits_per_sample() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioCapturingConfig::set_has_bits_per_sample() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioCapturingConfig::clear_has_bits_per_sample() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioCapturingConfig::clear_bits_per_sample() {
  bits_per_sample_ = 0;
  clear_has_bits_per_sample();
}
 ::google::protobuf::int32 AudioCapturingConfig::bits_per_sample() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.bits_per_sample)
  return bits_per_sample_;
}
 void AudioCapturingConfig::set_bits_per_sample(::google::protobuf::int32 value) {
  set_has_bits_per_sample();
  bits_per_sample_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.bits_per_sample)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HMIConfig::kDockerImageFieldNumber;
const int HMIConfig::kModulesFieldNumber;
const int HMIConfig::kHardwareFieldNumber;
const int HMIConfig::kToolsFieldNumber;
const int HMIConfig::kAvailableMapsFieldNumber;
const int HMIConfig::kAvailableVehiclesFieldNumber;
const int HMIConfig::kModesFieldNumber;
const int HMIConfig::kUtmZoneIdFieldNumber;
const int HMIConfig::kAudioCapturingConfFieldNumber;
const int HMIConfig::kChassisHighBeamActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HMIConfig::HMIConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.HMIConfig)
}

void HMIConfig::InitAsDefaultInstance() {
  audio_capturing_conf_ = const_cast< ::apollo::dreamview::AudioCapturingConfig*>(&::apollo::dreamview::AudioCapturingConfig::default_instance());
}

HMIConfig::HMIConfig(const HMIConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.HMIConfig)
}

void HMIConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  docker_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modules_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  modules_.SetEntryDescriptor(
      &::apollo::dreamview::HMIConfig_ModulesEntry_descriptor_);
  hardware_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  hardware_.SetEntryDescriptor(
      &::apollo::dreamview::HMIConfig_HardwareEntry_descriptor_);
  tools_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tools_.SetEntryDescriptor(
      &::apollo::dreamview::HMIConfig_ToolsEntry_descriptor_);
  available_maps_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  available_maps_.SetEntryDescriptor(
      &::apollo::dreamview::HMIConfig_AvailableMapsEntry_descriptor_);
  available_vehicles_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  available_vehicles_.SetEntryDescriptor(
      &::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_descriptor_);
  modes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  modes_.SetEntryDescriptor(
      &::apollo::dreamview::HMIConfig_ModesEntry_descriptor_);
  utm_zone_id_ = 0;
  audio_capturing_conf_ = NULL;
  chassis_high_beam_action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HMIConfig::~HMIConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.HMIConfig)
  SharedDtor();
}

void HMIConfig::SharedDtor() {
  docker_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete audio_capturing_conf_;
  }
}

void HMIConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HMIConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HMIConfig_descriptor_;
}

const HMIConfig& HMIConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  return *default_instance_;
}

HMIConfig* HMIConfig::default_instance_ = NULL;

HMIConfig* HMIConfig::New(::google::protobuf::Arena* arena) const {
  HMIConfig* n = new HMIConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HMIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.HMIConfig)
  if (_has_bits_[0 / 32] & 129u) {
    if (has_docker_image()) {
      docker_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    utm_zone_id_ = 0;
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_audio_capturing_conf()) {
      if (audio_capturing_conf_ != NULL) audio_capturing_conf_->::apollo::dreamview::AudioCapturingConfig::Clear();
    }
    chassis_high_beam_action_ = 0;
  }
  modules_.Clear();
  hardware_.Clear();
  tools_.Clear();
  available_maps_.Clear();
  available_vehicles_.Clear();
  modes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HMIConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.HMIConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docker_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docker_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docker_image().data(), this->docker_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.docker_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modules;
        break;
      }

      // map<string, .apollo.dreamview.Component> modules = 2;
      case 2: {
        if (tag == 18) {
         parse_modules:
          DO_(input->IncrementRecursionDepth());
         parse_loop_modules:
          HMIConfig_ModulesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::dreamview::Component,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component > > parser(&modules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.ModulesEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_modules;
        if (input->ExpectTag(26)) goto parse_loop_hardware;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .apollo.dreamview.Component> hardware = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hardware:
          HMIConfig_HardwareEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::dreamview::Component,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component > > parser(&hardware_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.HardwareEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_hardware;
        if (input->ExpectTag(34)) goto parse_loop_tools;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .apollo.dreamview.Component> tools = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tools:
          HMIConfig_ToolsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::dreamview::Component,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component > > parser(&tools_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.ToolsEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_tools;
        if (input->ExpectTag(42)) goto parse_loop_available_maps;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> available_maps = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_available_maps:
          HMIConfig_AvailableMapsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&available_maps_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.AvailableMapsEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.AvailableMapsEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_available_maps;
        if (input->ExpectTag(50)) goto parse_loop_available_vehicles;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> available_vehicles = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_available_vehicles:
          HMIConfig_AvailableVehiclesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&available_vehicles_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_available_vehicles;
        if (input->ExpectTag(58)) goto parse_loop_modes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .apollo.dreamview.Mode> modes = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_modes:
          HMIConfig_ModesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::dreamview::Mode,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode > > parser(&modes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.ModesEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_modes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_utm_zone_id;
        break;
      }

      // optional int32 utm_zone_id = 8;
      case 8: {
        if (tag == 64) {
         parse_utm_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utm_zone_id_)));
          set_has_utm_zone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_audio_capturing_conf;
        break;
      }

      // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
      case 9: {
        if (tag == 74) {
         parse_audio_capturing_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_capturing_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_chassis_high_beam_action;
        break;
      }

      // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
      case 10: {
        if (tag == 80) {
         parse_chassis_high_beam_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::HMIAction_IsValid(value)) {
            set_chassis_high_beam_action(static_cast< ::apollo::dreamview::HMIAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.HMIConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.HMIConfig)
  return false;
#undef DO_
}

void HMIConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.HMIConfig)
  // optional string docker_image = 1;
  if (has_docker_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_image().data(), this->docker_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIConfig.docker_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docker_image(), output);
  }

  // map<string, .apollo.dreamview.Component> modules = 2;
  if (!this->modules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModulesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->modules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it) {
        entry.reset(modules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.Component> hardware = 3;
  if (!this->hardware().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.HardwareEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->hardware().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hardware().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hardware_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it) {
        entry.reset(hardware_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.Component> tools = 4;
  if (!this->tools().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ToolsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->tools().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tools().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tools_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it) {
        entry.reset(tools_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_maps = 5;
  if (!this->available_maps().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableMapsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableMapsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->available_maps().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_maps().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_maps_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it) {
        entry.reset(available_maps_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_vehicles = 6;
  if (!this->available_vehicles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->available_vehicles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_vehicles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.Mode> modes = 7;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->modes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 utm_zone_id = 8;
  if (has_utm_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->utm_zone_id(), output);
  }

  // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
  if (has_audio_capturing_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->audio_capturing_conf_, output);
  }

  // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
  if (has_chassis_high_beam_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->chassis_high_beam_action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.HMIConfig)
}

::google::protobuf::uint8* HMIConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.HMIConfig)
  // optional string docker_image = 1;
  if (has_docker_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_image().data(), this->docker_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIConfig.docker_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docker_image(), target);
  }

  // map<string, .apollo.dreamview.Component> modules = 2;
  if (!this->modules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModulesEntry.key");
      }
    };

    if (deterministic &&
        this->modules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it) {
        entry.reset(modules_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.Component> hardware = 3;
  if (!this->hardware().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.HardwareEntry.key");
      }
    };

    if (deterministic &&
        this->hardware().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hardware().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hardware_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it) {
        entry.reset(hardware_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.Component> tools = 4;
  if (!this->tools().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ToolsEntry.key");
      }
    };

    if (deterministic &&
        this->tools().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tools().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tools_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it) {
        entry.reset(tools_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_maps = 5;
  if (!this->available_maps().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableMapsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableMapsEntry.value");
      }
    };

    if (deterministic &&
        this->available_maps().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_maps().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_maps_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it) {
        entry.reset(available_maps_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_vehicles = 6;
  if (!this->available_vehicles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.value");
      }
    };

    if (deterministic &&
        this->available_vehicles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_vehicles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.Mode> modes = 7;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.key");
      }
    };

    if (deterministic &&
        this->modes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 utm_zone_id = 8;
  if (has_utm_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->utm_zone_id(), target);
  }

  // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
  if (has_audio_capturing_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->audio_capturing_conf_, false, target);
  }

  // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
  if (has_chassis_high_beam_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->chassis_high_beam_action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.HMIConfig)
  return target;
}

int HMIConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.HMIConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 129u) {
    // optional string docker_image = 1;
    if (has_docker_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docker_image());
    }

    // optional int32 utm_zone_id = 8;
    if (has_utm_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utm_zone_id());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
    if (has_audio_capturing_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->audio_capturing_conf_);
    }

    // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
    if (has_chassis_high_beam_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chassis_high_beam_action());
    }

  }
  // map<string, .apollo.dreamview.Component> modules = 2;
  total_size += 1 * this->modules_size();
  {
    ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
        it = this->modules().begin();
        it != this->modules().end(); ++it) {
      entry.reset(modules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .apollo.dreamview.Component> hardware = 3;
  total_size += 1 * this->hardware_size();
  {
    ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
        it = this->hardware().begin();
        it != this->hardware().end(); ++it) {
      entry.reset(hardware_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .apollo.dreamview.Component> tools = 4;
  total_size += 1 * this->tools_size();
  {
    ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >::const_iterator
        it = this->tools().begin();
        it != this->tools().end(); ++it) {
      entry.reset(tools_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> available_maps = 5;
  total_size += 1 * this->available_maps_size();
  {
    ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->available_maps().begin();
        it != this->available_maps().end(); ++it) {
      entry.reset(available_maps_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> available_vehicles = 6;
  total_size += 1 * this->available_vehicles_size();
  {
    ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->available_vehicles().begin();
        it != this->available_vehicles().end(); ++it) {
      entry.reset(available_vehicles_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .apollo.dreamview.Mode> modes = 7;
  total_size += 1 * this->modes_size();
  {
    ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >::const_iterator
        it = this->modes().begin();
        it != this->modes().end(); ++it) {
      entry.reset(modes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HMIConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.HMIConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HMIConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HMIConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.HMIConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.HMIConfig)
    MergeFrom(*source);
  }
}

void HMIConfig::MergeFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.HMIConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  modules_.MergeFrom(from.modules_);
  hardware_.MergeFrom(from.hardware_);
  tools_.MergeFrom(from.tools_);
  available_maps_.MergeFrom(from.available_maps_);
  available_vehicles_.MergeFrom(from.available_vehicles_);
  modes_.MergeFrom(from.modes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docker_image()) {
      set_has_docker_image();
      docker_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docker_image_);
    }
    if (from.has_utm_zone_id()) {
      set_utm_zone_id(from.utm_zone_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_audio_capturing_conf()) {
      mutable_audio_capturing_conf()->::apollo::dreamview::AudioCapturingConfig::MergeFrom(from.audio_capturing_conf());
    }
    if (from.has_chassis_high_beam_action()) {
      set_chassis_high_beam_action(from.chassis_high_beam_action());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HMIConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIConfig::CopyFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIConfig::IsInitialized() const {

  return true;
}

void HMIConfig::Swap(HMIConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HMIConfig::InternalSwap(HMIConfig* other) {
  docker_image_.Swap(&other->docker_image_);
  modules_.Swap(&other->modules_);
  hardware_.Swap(&other->hardware_);
  tools_.Swap(&other->tools_);
  available_maps_.Swap(&other->available_maps_);
  available_vehicles_.Swap(&other->available_vehicles_);
  modes_.Swap(&other->modes_);
  std::swap(utm_zone_id_, other->utm_zone_id_);
  std::swap(audio_capturing_conf_, other->audio_capturing_conf_);
  std::swap(chassis_high_beam_action_, other->chassis_high_beam_action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HMIConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HMIConfig_descriptor_;
  metadata.reflection = HMIConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HMIConfig

// optional string docker_image = 1;
bool HMIConfig::has_docker_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HMIConfig::set_has_docker_image() {
  _has_bits_[0] |= 0x00000001u;
}
void HMIConfig::clear_has_docker_image() {
  _has_bits_[0] &= ~0x00000001u;
}
void HMIConfig::clear_docker_image() {
  docker_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_docker_image();
}
 const ::std::string& HMIConfig::docker_image() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.docker_image)
  return docker_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMIConfig::set_docker_image(const ::std::string& value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.docker_image)
}
 void HMIConfig::set_docker_image(const char* value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIConfig.docker_image)
}
 void HMIConfig::set_docker_image(const char* value, size_t size) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIConfig.docker_image)
}
 ::std::string* HMIConfig::mutable_docker_image() {
  set_has_docker_image();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIConfig.docker_image)
  return docker_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HMIConfig::release_docker_image() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIConfig.docker_image)
  clear_has_docker_image();
  return docker_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HMIConfig::set_allocated_docker_image(::std::string* docker_image) {
  if (docker_image != NULL) {
    set_has_docker_image();
  } else {
    clear_has_docker_image();
  }
  docker_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docker_image);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIConfig.docker_image)
}

// map<string, .apollo.dreamview.Component> modules = 2;
int HMIConfig::modules_size() const {
  return modules_.size();
}
void HMIConfig::clear_modules() {
  modules_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modules)
  return modules_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modules)
  return modules_.MutableMap();
}

// map<string, .apollo.dreamview.Component> hardware = 3;
int HMIConfig::hardware_size() const {
  return hardware_.size();
}
void HMIConfig::clear_hardware() {
  hardware_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::hardware() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.hardware)
  return hardware_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.hardware)
  return hardware_.MutableMap();
}

// map<string, .apollo.dreamview.Component> tools = 4;
int HMIConfig::tools_size() const {
  return tools_.size();
}
void HMIConfig::clear_tools() {
  tools_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::tools() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.tools)
  return tools_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.tools)
  return tools_.MutableMap();
}

// map<string, string> available_maps = 5;
int HMIConfig::available_maps_size() const {
  return available_maps_.size();
}
void HMIConfig::clear_available_maps() {
  available_maps_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_maps() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_maps)
  return available_maps_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_maps() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_maps)
  return available_maps_.MutableMap();
}

// map<string, string> available_vehicles = 6;
int HMIConfig::available_vehicles_size() const {
  return available_vehicles_.size();
}
void HMIConfig::clear_available_vehicles() {
  available_vehicles_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_vehicles() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_vehicles() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.MutableMap();
}

// map<string, .apollo.dreamview.Mode> modes = 7;
int HMIConfig::modes_size() const {
  return modes_.size();
}
void HMIConfig::clear_modes() {
  modes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >&
HMIConfig::modes() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modes)
  return modes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >*
HMIConfig::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modes)
  return modes_.MutableMap();
}

// optional int32 utm_zone_id = 8;
bool HMIConfig::has_utm_zone_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HMIConfig::set_has_utm_zone_id() {
  _has_bits_[0] |= 0x00000080u;
}
void HMIConfig::clear_has_utm_zone_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void HMIConfig::clear_utm_zone_id() {
  utm_zone_id_ = 0;
  clear_has_utm_zone_id();
}
 ::google::protobuf::int32 HMIConfig::utm_zone_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.utm_zone_id)
  return utm_zone_id_;
}
 void HMIConfig::set_utm_zone_id(::google::protobuf::int32 value) {
  set_has_utm_zone_id();
  utm_zone_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.utm_zone_id)
}

// optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
bool HMIConfig::has_audio_capturing_conf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void HMIConfig::set_has_audio_capturing_conf() {
  _has_bits_[0] |= 0x00000100u;
}
void HMIConfig::clear_has_audio_capturing_conf() {
  _has_bits_[0] &= ~0x00000100u;
}
void HMIConfig::clear_audio_capturing_conf() {
  if (audio_capturing_conf_ != NULL) audio_capturing_conf_->::apollo::dreamview::AudioCapturingConfig::Clear();
  clear_has_audio_capturing_conf();
}
const ::apollo::dreamview::AudioCapturingConfig& HMIConfig::audio_capturing_conf() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.audio_capturing_conf)
  return audio_capturing_conf_ != NULL ? *audio_capturing_conf_ : *default_instance_->audio_capturing_conf_;
}
::apollo::dreamview::AudioCapturingConfig* HMIConfig::mutable_audio_capturing_conf() {
  set_has_audio_capturing_conf();
  if (audio_capturing_conf_ == NULL) {
    audio_capturing_conf_ = new ::apollo::dreamview::AudioCapturingConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIConfig.audio_capturing_conf)
  return audio_capturing_conf_;
}
::apollo::dreamview::AudioCapturingConfig* HMIConfig::release_audio_capturing_conf() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIConfig.audio_capturing_conf)
  clear_has_audio_capturing_conf();
  ::apollo::dreamview::AudioCapturingConfig* temp = audio_capturing_conf_;
  audio_capturing_conf_ = NULL;
  return temp;
}
void HMIConfig::set_allocated_audio_capturing_conf(::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf) {
  delete audio_capturing_conf_;
  audio_capturing_conf_ = audio_capturing_conf;
  if (audio_capturing_conf) {
    set_has_audio_capturing_conf();
  } else {
    clear_has_audio_capturing_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIConfig.audio_capturing_conf)
}

// optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
bool HMIConfig::has_chassis_high_beam_action() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void HMIConfig::set_has_chassis_high_beam_action() {
  _has_bits_[0] |= 0x00000200u;
}
void HMIConfig::clear_has_chassis_high_beam_action() {
  _has_bits_[0] &= ~0x00000200u;
}
void HMIConfig::clear_chassis_high_beam_action() {
  chassis_high_beam_action_ = 0;
  clear_has_chassis_high_beam_action();
}
 ::apollo::dreamview::HMIAction HMIConfig::chassis_high_beam_action() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.chassis_high_beam_action)
  return static_cast< ::apollo::dreamview::HMIAction >(chassis_high_beam_action_);
}
 void HMIConfig::set_chassis_high_beam_action(::apollo::dreamview::HMIAction value) {
  assert(::apollo::dreamview::HMIAction_IsValid(value));
  set_has_chassis_high_beam_action();
  chassis_high_beam_action_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.chassis_high_beam_action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleData_DataFile::kSourcePathFieldNumber;
const int VehicleData_DataFile::kDestPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleData_DataFile::VehicleData_DataFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.VehicleData.DataFile)
}

void VehicleData_DataFile::InitAsDefaultInstance() {
}

VehicleData_DataFile::VehicleData_DataFile(const VehicleData_DataFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData.DataFile)
}

void VehicleData_DataFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleData_DataFile::~VehicleData_DataFile() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData.DataFile)
  SharedDtor();
}

void VehicleData_DataFile::SharedDtor() {
  source_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VehicleData_DataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleData_DataFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleData_DataFile_descriptor_;
}

const VehicleData_DataFile& VehicleData_DataFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  return *default_instance_;
}

VehicleData_DataFile* VehicleData_DataFile::default_instance_ = NULL;

VehicleData_DataFile* VehicleData_DataFile::New(::google::protobuf::Arena* arena) const {
  VehicleData_DataFile* n = new VehicleData_DataFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleData_DataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData.DataFile)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source_path()) {
      source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dest_path()) {
      dest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleData_DataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.VehicleData.DataFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_path().data(), this->source_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.VehicleData.DataFile.source_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest_path;
        break;
      }

      // optional string dest_path = 2;
      case 2: {
        if (tag == 18) {
         parse_dest_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_path().data(), this->dest_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.VehicleData.DataFile.dest_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.VehicleData.DataFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.VehicleData.DataFile)
  return false;
#undef DO_
}

void VehicleData_DataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.VehicleData.DataFile)
  // optional string source_path = 1;
  if (has_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.source_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_path(), output);
  }

  // optional string dest_path = 2;
  if (has_dest_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_path().data(), this->dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.dest_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.VehicleData.DataFile)
}

::google::protobuf::uint8* VehicleData_DataFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData.DataFile)
  // optional string source_path = 1;
  if (has_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.source_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_path(), target);
  }

  // optional string dest_path = 2;
  if (has_dest_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_path().data(), this->dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.dest_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData.DataFile)
  return target;
}

int VehicleData_DataFile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData.DataFile)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string source_path = 1;
    if (has_source_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_path());
    }

    // optional string dest_path = 2;
    if (has_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_path());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleData_DataFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.VehicleData.DataFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleData_DataFile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleData_DataFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.VehicleData.DataFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.VehicleData.DataFile)
    MergeFrom(*source);
  }
}

void VehicleData_DataFile::MergeFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData.DataFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_path()) {
      set_has_source_path();
      source_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_path_);
    }
    if (from.has_dest_path()) {
      set_has_dest_path();
      dest_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_path_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleData_DataFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData_DataFile::CopyFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData_DataFile::IsInitialized() const {

  return true;
}

void VehicleData_DataFile::Swap(VehicleData_DataFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleData_DataFile::InternalSwap(VehicleData_DataFile* other) {
  source_path_.Swap(&other->source_path_);
  dest_path_.Swap(&other->dest_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleData_DataFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleData_DataFile_descriptor_;
  metadata.reflection = VehicleData_DataFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleData::kDataFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleData::VehicleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.VehicleData)
}

void VehicleData::InitAsDefaultInstance() {
}

VehicleData::VehicleData(const VehicleData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData)
}

void VehicleData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData)
  SharedDtor();
}

void VehicleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleData_descriptor_;
}

const VehicleData& VehicleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dreamview_2fhmi_5fconfig_2eproto();
  return *default_instance_;
}

VehicleData* VehicleData::default_instance_ = NULL;

VehicleData* VehicleData::New(::google::protobuf::Arena* arena) const {
  VehicleData* n = new VehicleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData)
  data_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.VehicleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data_files;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.VehicleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.VehicleData)
  return false;
#undef DO_
}

void VehicleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.VehicleData)
  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned int i = 0, n = this->data_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.VehicleData)
}

::google::protobuf::uint8* VehicleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData)
  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned int i = 0, n = this->data_files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_files(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData)
  return target;
}

int VehicleData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData)
  int total_size = 0;

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  total_size += 1 * this->data_files_size();
  for (int i = 0; i < this->data_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_files(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.VehicleData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.VehicleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.VehicleData)
    MergeFrom(*source);
  }
}

void VehicleData::MergeFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_files_.MergeFrom(from.data_files_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData::CopyFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {

  return true;
}

void VehicleData::Swap(VehicleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleData::InternalSwap(VehicleData* other) {
  data_files_.UnsafeArenaSwap(&other->data_files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleData_descriptor_;
  metadata.reflection = VehicleData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleData_DataFile

// optional string source_path = 1;
bool VehicleData_DataFile::has_source_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleData_DataFile::set_has_source_path() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleData_DataFile::clear_has_source_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleData_DataFile::clear_source_path() {
  source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_path();
}
 const ::std::string& VehicleData_DataFile::source_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.source_path)
  return source_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleData_DataFile::set_source_path(const ::std::string& value) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.source_path)
}
 void VehicleData_DataFile::set_source_path(const char* value) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.VehicleData.DataFile.source_path)
}
 void VehicleData_DataFile::set_source_path(const char* value, size_t size) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.VehicleData.DataFile.source_path)
}
 ::std::string* VehicleData_DataFile::mutable_source_path() {
  set_has_source_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.source_path)
  return source_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleData_DataFile::release_source_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.source_path)
  clear_has_source_path();
  return source_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleData_DataFile::set_allocated_source_path(::std::string* source_path) {
  if (source_path != NULL) {
    set_has_source_path();
  } else {
    clear_has_source_path();
  }
  source_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.source_path)
}

// optional string dest_path = 2;
bool VehicleData_DataFile::has_dest_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleData_DataFile::set_has_dest_path() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleData_DataFile::clear_has_dest_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleData_DataFile::clear_dest_path() {
  dest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_path();
}
 const ::std::string& VehicleData_DataFile::dest_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleData_DataFile::set_dest_path(const ::std::string& value) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.dest_path)
}
 void VehicleData_DataFile::set_dest_path(const char* value) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.VehicleData.DataFile.dest_path)
}
 void VehicleData_DataFile::set_dest_path(const char* value, size_t size) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.VehicleData.DataFile.dest_path)
}
 ::std::string* VehicleData_DataFile::mutable_dest_path() {
  set_has_dest_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleData_DataFile::release_dest_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.dest_path)
  clear_has_dest_path();
  return dest_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleData_DataFile::set_allocated_dest_path(::std::string* dest_path) {
  if (dest_path != NULL) {
    set_has_dest_path();
  } else {
    clear_has_dest_path();
  }
  dest_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.dest_path)
}

// -------------------------------------------------------------------

// VehicleData

// repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
int VehicleData::data_files_size() const {
  return data_files_.size();
}
void VehicleData::clear_data_files() {
  data_files_.Clear();
}
const ::apollo::dreamview::VehicleData_DataFile& VehicleData::data_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.data_files)
  return data_files_.Get(index);
}
::apollo::dreamview::VehicleData_DataFile* VehicleData::mutable_data_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.data_files)
  return data_files_.Mutable(index);
}
::apollo::dreamview::VehicleData_DataFile* VehicleData::add_data_files() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.VehicleData.data_files)
  return data_files_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
VehicleData::mutable_data_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.VehicleData.data_files)
  return &data_files_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
VehicleData::data_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.VehicleData.data_files)
  return data_files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
