// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/gnss/gnss_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/gnss/gnss_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace gnss_status {

namespace {

const ::google::protobuf::Descriptor* StreamStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamStatus_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InsStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InsStatus_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GnssStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GnssStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto() {
  protobuf_AddDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drivers/gnss/gnss_status.proto");
  GOOGLE_CHECK(file != NULL);
  StreamStatus_descriptor_ = file->message_type(0);
  static const int StreamStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, ins_stream_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, rtk_stream_in_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, rtk_stream_out_type_),
  };
  StreamStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamStatus_descriptor_,
      StreamStatus::default_instance_,
      StreamStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, _internal_metadata_),
      -1);
  StreamStatus_Type_descriptor_ = StreamStatus_descriptor_->enum_type(0);
  InsStatus_descriptor_ = file->message_type(1);
  static const int InsStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, type_),
  };
  InsStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InsStatus_descriptor_,
      InsStatus::default_instance_,
      InsStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(InsStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, _internal_metadata_),
      -1);
  InsStatus_Type_descriptor_ = InsStatus_descriptor_->enum_type(0);
  GnssStatus_descriptor_ = file->message_type(2);
  static const int GnssStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, solution_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, solution_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, position_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, num_sats_),
  };
  GnssStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GnssStatus_descriptor_,
      GnssStatus::default_instance_,
      GnssStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(GnssStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamStatus_descriptor_, &StreamStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InsStatus_descriptor_, &InsStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GnssStatus_descriptor_, &GnssStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fstatus_2eproto() {
  delete StreamStatus::default_instance_;
  delete StreamStatus_reflection_;
  delete InsStatus::default_instance_;
  delete InsStatus_reflection_;
  delete GnssStatus::default_instance_;
  delete GnssStatus_reflection_;
}

void protobuf_AddDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036drivers/gnss/gnss_status.proto\022\032apollo"
    ".drivers.gnss_status\032\023common/header.prot"
    "o\"\347\002\n\014StreamStatus\022%\n\006header\030\001 \001(\0132\025.apo"
    "llo.common.Header\022T\n\017ins_stream_type\030\002 \001"
    "(\0162-.apollo.drivers.gnss_status.StreamSt"
    "atus.Type:\014DISCONNECTED\022W\n\022rtk_stream_in"
    "_type\030\003 \001(\0162-.apollo.drivers.gnss_status"
    ".StreamStatus.Type:\014DISCONNECTED\022X\n\023rtk_"
    "stream_out_type\030\004 \001(\0162-.apollo.drivers.g"
    "nss_status.StreamStatus.Type:\014DISCONNECT"
    "ED\"\'\n\004Type\022\020\n\014DISCONNECTED\020\000\022\r\n\tCONNECTE"
    "D\020\001\"\244\001\n\tInsStatus\022%\n\006header\030\001 \001(\0132\025.apol"
    "lo.common.Header\022A\n\004type\030\002 \001(\0162*.apollo."
    "drivers.gnss_status.InsStatus.Type:\007INVA"
    "LID\"-\n\004Type\022\013\n\007INVALID\020\000\022\016\n\nCONVERGING\020\001"
    "\022\010\n\004GOOD\020\002\"\241\001\n\nGnssStatus\022%\n\006header\030\001 \001("
    "\0132\025.apollo.common.Header\022!\n\022solution_com"
    "pleted\030\002 \001(\010:\005false\022\032\n\017solution_status\030\003"
    " \001(\r:\0010\022\030\n\rposition_type\030\004 \001(\r:\0010\022\023\n\010num"
    "_sats\030\005 \001(\005:\0010", 774);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/gnss/gnss_status.proto", &protobuf_RegisterTypes);
  StreamStatus::default_instance_ = new StreamStatus();
  InsStatus::default_instance_ = new InsStatus();
  GnssStatus::default_instance_ = new GnssStatus();
  StreamStatus::default_instance_->InitAsDefaultInstance();
  InsStatus::default_instance_->InitAsDefaultInstance();
  GnssStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drivers_2fgnss_2fgnss_5fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drivers_2fgnss_2fgnss_5fstatus_2eproto {
  StaticDescriptorInitializer_drivers_2fgnss_2fgnss_5fstatus_2eproto() {
    protobuf_AddDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto();
  }
} static_descriptor_initializer_drivers_2fgnss_2fgnss_5fstatus_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StreamStatus_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamStatus_Type_descriptor_;
}
bool StreamStatus_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamStatus_Type StreamStatus::DISCONNECTED;
const StreamStatus_Type StreamStatus::CONNECTED;
const StreamStatus_Type StreamStatus::Type_MIN;
const StreamStatus_Type StreamStatus::Type_MAX;
const int StreamStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamStatus::kHeaderFieldNumber;
const int StreamStatus::kInsStreamTypeFieldNumber;
const int StreamStatus::kRtkStreamInTypeFieldNumber;
const int StreamStatus::kRtkStreamOutTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamStatus::StreamStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss_status.StreamStatus)
}

void StreamStatus::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

StreamStatus::StreamStatus(const StreamStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss_status.StreamStatus)
}

void StreamStatus::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ins_stream_type_ = 0;
  rtk_stream_in_type_ = 0;
  rtk_stream_out_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamStatus::~StreamStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss_status.StreamStatus)
  SharedDtor();
}

void StreamStatus::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void StreamStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamStatus_descriptor_;
}

const StreamStatus& StreamStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto();
  return *default_instance_;
}

StreamStatus* StreamStatus::default_instance_ = NULL;

StreamStatus* StreamStatus::New(::google::protobuf::Arena* arena) const {
  StreamStatus* n = new StreamStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss_status.StreamStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreamStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreamStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(ins_stream_type_, rtk_stream_out_type_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss_status.StreamStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ins_stream_type;
        break;
      }

      // optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
      case 2: {
        if (tag == 16) {
         parse_ins_stream_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(value)) {
            set_ins_stream_type(static_cast< ::apollo::drivers::gnss_status::StreamStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rtk_stream_in_type;
        break;
      }

      // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
      case 3: {
        if (tag == 24) {
         parse_rtk_stream_in_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(value)) {
            set_rtk_stream_in_type(static_cast< ::apollo::drivers::gnss_status::StreamStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rtk_stream_out_type;
        break;
      }

      // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
      case 4: {
        if (tag == 32) {
         parse_rtk_stream_out_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(value)) {
            set_rtk_stream_out_type(static_cast< ::apollo::drivers::gnss_status::StreamStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss_status.StreamStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss_status.StreamStatus)
  return false;
#undef DO_
}

void StreamStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss_status.StreamStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
  if (has_ins_stream_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ins_stream_type(), output);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
  if (has_rtk_stream_in_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rtk_stream_in_type(), output);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
  if (has_rtk_stream_out_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rtk_stream_out_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss_status.StreamStatus)
}

::google::protobuf::uint8* StreamStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss_status.StreamStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
  if (has_ins_stream_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ins_stream_type(), target);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
  if (has_rtk_stream_in_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rtk_stream_in_type(), target);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
  if (has_rtk_stream_out_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rtk_stream_out_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss_status.StreamStatus)
  return target;
}

int StreamStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss_status.StreamStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
    if (has_ins_stream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ins_stream_type());
    }

    // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
    if (has_rtk_stream_in_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_stream_in_type());
    }

    // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
    if (has_rtk_stream_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_stream_out_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss_status.StreamStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss_status.StreamStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss_status.StreamStatus)
    MergeFrom(*source);
  }
}

void StreamStatus::MergeFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss_status.StreamStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_ins_stream_type()) {
      set_ins_stream_type(from.ins_stream_type());
    }
    if (from.has_rtk_stream_in_type()) {
      set_rtk_stream_in_type(from.rtk_stream_in_type());
    }
    if (from.has_rtk_stream_out_type()) {
      set_rtk_stream_out_type(from.rtk_stream_out_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss_status.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStatus::CopyFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss_status.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStatus::IsInitialized() const {

  return true;
}

void StreamStatus::Swap(StreamStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamStatus::InternalSwap(StreamStatus* other) {
  std::swap(header_, other->header_);
  std::swap(ins_stream_type_, other->ins_stream_type_);
  std::swap(rtk_stream_in_type_, other->rtk_stream_in_type_);
  std::swap(rtk_stream_out_type_, other->rtk_stream_out_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamStatus_descriptor_;
  metadata.reflection = StreamStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamStatus

// optional .apollo.common.Header header = 1;
bool StreamStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& StreamStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.StreamStatus.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* StreamStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss_status.StreamStatus.header)
  return header_;
}
::apollo::common::Header* StreamStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss_status.StreamStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void StreamStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss_status.StreamStatus.header)
}

// optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
bool StreamStatus::has_ins_stream_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamStatus::set_has_ins_stream_type() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamStatus::clear_has_ins_stream_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamStatus::clear_ins_stream_type() {
  ins_stream_type_ = 0;
  clear_has_ins_stream_type();
}
 ::apollo::drivers::gnss_status::StreamStatus_Type StreamStatus::ins_stream_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.StreamStatus.ins_stream_type)
  return static_cast< ::apollo::drivers::gnss_status::StreamStatus_Type >(ins_stream_type_);
}
 void StreamStatus::set_ins_stream_type(::apollo::drivers::gnss_status::StreamStatus_Type value) {
  assert(::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(value));
  set_has_ins_stream_type();
  ins_stream_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.StreamStatus.ins_stream_type)
}

// optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
bool StreamStatus::has_rtk_stream_in_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreamStatus::set_has_rtk_stream_in_type() {
  _has_bits_[0] |= 0x00000004u;
}
void StreamStatus::clear_has_rtk_stream_in_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreamStatus::clear_rtk_stream_in_type() {
  rtk_stream_in_type_ = 0;
  clear_has_rtk_stream_in_type();
}
 ::apollo::drivers::gnss_status::StreamStatus_Type StreamStatus::rtk_stream_in_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.StreamStatus.rtk_stream_in_type)
  return static_cast< ::apollo::drivers::gnss_status::StreamStatus_Type >(rtk_stream_in_type_);
}
 void StreamStatus::set_rtk_stream_in_type(::apollo::drivers::gnss_status::StreamStatus_Type value) {
  assert(::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(value));
  set_has_rtk_stream_in_type();
  rtk_stream_in_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.StreamStatus.rtk_stream_in_type)
}

// optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
bool StreamStatus::has_rtk_stream_out_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StreamStatus::set_has_rtk_stream_out_type() {
  _has_bits_[0] |= 0x00000008u;
}
void StreamStatus::clear_has_rtk_stream_out_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void StreamStatus::clear_rtk_stream_out_type() {
  rtk_stream_out_type_ = 0;
  clear_has_rtk_stream_out_type();
}
 ::apollo::drivers::gnss_status::StreamStatus_Type StreamStatus::rtk_stream_out_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.StreamStatus.rtk_stream_out_type)
  return static_cast< ::apollo::drivers::gnss_status::StreamStatus_Type >(rtk_stream_out_type_);
}
 void StreamStatus::set_rtk_stream_out_type(::apollo::drivers::gnss_status::StreamStatus_Type value) {
  assert(::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(value));
  set_has_rtk_stream_out_type();
  rtk_stream_out_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.StreamStatus.rtk_stream_out_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* InsStatus_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsStatus_Type_descriptor_;
}
bool InsStatus_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InsStatus_Type InsStatus::INVALID;
const InsStatus_Type InsStatus::CONVERGING;
const InsStatus_Type InsStatus::GOOD;
const InsStatus_Type InsStatus::Type_MIN;
const InsStatus_Type InsStatus::Type_MAX;
const int InsStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsStatus::kHeaderFieldNumber;
const int InsStatus::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsStatus::InsStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss_status.InsStatus)
}

void InsStatus::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

InsStatus::InsStatus(const InsStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss_status.InsStatus)
}

void InsStatus::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsStatus::~InsStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss_status.InsStatus)
  SharedDtor();
}

void InsStatus::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsStatus_descriptor_;
}

const InsStatus& InsStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto();
  return *default_instance_;
}

InsStatus* InsStatus::default_instance_ = NULL;

InsStatus* InsStatus::New(::google::protobuf::Arena* arena) const {
  InsStatus* n = new InsStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss_status.InsStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss_status.InsStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss_status::InsStatus_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::drivers::gnss_status::InsStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss_status.InsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss_status.InsStatus)
  return false;
#undef DO_
}

void InsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss_status.InsStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss_status.InsStatus)
}

::google::protobuf::uint8* InsStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss_status.InsStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss_status.InsStatus)
  return target;
}

int InsStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss_status.InsStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss_status.InsStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InsStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InsStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss_status.InsStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss_status.InsStatus)
    MergeFrom(*source);
  }
}

void InsStatus::MergeFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss_status.InsStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InsStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss_status.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsStatus::CopyFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss_status.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStatus::IsInitialized() const {

  return true;
}

void InsStatus::Swap(InsStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsStatus::InternalSwap(InsStatus* other) {
  std::swap(header_, other->header_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsStatus_descriptor_;
  metadata.reflection = InsStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsStatus

// optional .apollo.common.Header header = 1;
bool InsStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void InsStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& InsStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.InsStatus.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* InsStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss_status.InsStatus.header)
  return header_;
}
::apollo::common::Header* InsStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss_status.InsStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void InsStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss_status.InsStatus.header)
}

// optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
bool InsStatus::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsStatus::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void InsStatus::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsStatus::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::apollo::drivers::gnss_status::InsStatus_Type InsStatus::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.InsStatus.type)
  return static_cast< ::apollo::drivers::gnss_status::InsStatus_Type >(type_);
}
 void InsStatus::set_type(::apollo::drivers::gnss_status::InsStatus_Type value) {
  assert(::apollo::drivers::gnss_status::InsStatus_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.InsStatus.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssStatus::kHeaderFieldNumber;
const int GnssStatus::kSolutionCompletedFieldNumber;
const int GnssStatus::kSolutionStatusFieldNumber;
const int GnssStatus::kPositionTypeFieldNumber;
const int GnssStatus::kNumSatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssStatus::GnssStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss_status.GnssStatus)
}

void GnssStatus::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

GnssStatus::GnssStatus(const GnssStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss_status.GnssStatus)
}

void GnssStatus::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  solution_completed_ = false;
  solution_status_ = 0u;
  position_type_ = 0u;
  num_sats_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GnssStatus::~GnssStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss_status.GnssStatus)
  SharedDtor();
}

void GnssStatus::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GnssStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssStatus_descriptor_;
}

const GnssStatus& GnssStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drivers_2fgnss_2fgnss_5fstatus_2eproto();
  return *default_instance_;
}

GnssStatus* GnssStatus::default_instance_ = NULL;

GnssStatus* GnssStatus::New(::google::protobuf::Arena* arena) const {
  GnssStatus* n = new GnssStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss_status.GnssStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GnssStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GnssStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(solution_completed_, num_sats_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GnssStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss_status.GnssStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_solution_completed;
        break;
      }

      // optional bool solution_completed = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_solution_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solution_completed_)));
          set_has_solution_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_solution_status;
        break;
      }

      // optional uint32 solution_status = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_solution_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
          set_has_solution_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_position_type;
        break;
      }

      // optional uint32 position_type = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_position_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
          set_has_position_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_sats;
        break;
      }

      // optional int32 num_sats = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_num_sats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sats_)));
          set_has_num_sats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss_status.GnssStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss_status.GnssStatus)
  return false;
#undef DO_
}

void GnssStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss_status.GnssStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bool solution_completed = 2 [default = false];
  if (has_solution_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->solution_completed(), output);
  }

  // optional uint32 solution_status = 3 [default = 0];
  if (has_solution_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->solution_status(), output);
  }

  // optional uint32 position_type = 4 [default = 0];
  if (has_position_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position_type(), output);
  }

  // optional int32 num_sats = 5 [default = 0];
  if (has_num_sats()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_sats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss_status.GnssStatus)
}

::google::protobuf::uint8* GnssStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss_status.GnssStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional bool solution_completed = 2 [default = false];
  if (has_solution_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->solution_completed(), target);
  }

  // optional uint32 solution_status = 3 [default = 0];
  if (has_solution_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->solution_status(), target);
  }

  // optional uint32 position_type = 4 [default = 0];
  if (has_position_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position_type(), target);
  }

  // optional int32 num_sats = 5 [default = 0];
  if (has_num_sats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_sats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss_status.GnssStatus)
  return target;
}

int GnssStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss_status.GnssStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional bool solution_completed = 2 [default = false];
    if (has_solution_completed()) {
      total_size += 1 + 1;
    }

    // optional uint32 solution_status = 3 [default = 0];
    if (has_solution_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_status());
    }

    // optional uint32 position_type = 4 [default = 0];
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_type());
    }

    // optional int32 num_sats = 5 [default = 0];
    if (has_num_sats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sats());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss_status.GnssStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GnssStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss_status.GnssStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss_status.GnssStatus)
    MergeFrom(*source);
  }
}

void GnssStatus::MergeFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss_status.GnssStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_solution_completed()) {
      set_solution_completed(from.solution_completed());
    }
    if (from.has_solution_status()) {
      set_solution_status(from.solution_status());
    }
    if (from.has_position_type()) {
      set_position_type(from.position_type());
    }
    if (from.has_num_sats()) {
      set_num_sats(from.num_sats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GnssStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss_status.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssStatus::CopyFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss_status.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssStatus::IsInitialized() const {

  return true;
}

void GnssStatus::Swap(GnssStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssStatus::InternalSwap(GnssStatus* other) {
  std::swap(header_, other->header_);
  std::swap(solution_completed_, other->solution_completed_);
  std::swap(solution_status_, other->solution_status_);
  std::swap(position_type_, other->position_type_);
  std::swap(num_sats_, other->num_sats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GnssStatus_descriptor_;
  metadata.reflection = GnssStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssStatus

// optional .apollo.common.Header header = 1;
bool GnssStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GnssStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void GnssStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void GnssStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& GnssStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.GnssStatus.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* GnssStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss_status.GnssStatus.header)
  return header_;
}
::apollo::common::Header* GnssStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss_status.GnssStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void GnssStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss_status.GnssStatus.header)
}

// optional bool solution_completed = 2 [default = false];
bool GnssStatus::has_solution_completed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GnssStatus::set_has_solution_completed() {
  _has_bits_[0] |= 0x00000002u;
}
void GnssStatus::clear_has_solution_completed() {
  _has_bits_[0] &= ~0x00000002u;
}
void GnssStatus::clear_solution_completed() {
  solution_completed_ = false;
  clear_has_solution_completed();
}
 bool GnssStatus::solution_completed() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.GnssStatus.solution_completed)
  return solution_completed_;
}
 void GnssStatus::set_solution_completed(bool value) {
  set_has_solution_completed();
  solution_completed_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.GnssStatus.solution_completed)
}

// optional uint32 solution_status = 3 [default = 0];
bool GnssStatus::has_solution_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GnssStatus::set_has_solution_status() {
  _has_bits_[0] |= 0x00000004u;
}
void GnssStatus::clear_has_solution_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void GnssStatus::clear_solution_status() {
  solution_status_ = 0u;
  clear_has_solution_status();
}
 ::google::protobuf::uint32 GnssStatus::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.GnssStatus.solution_status)
  return solution_status_;
}
 void GnssStatus::set_solution_status(::google::protobuf::uint32 value) {
  set_has_solution_status();
  solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.GnssStatus.solution_status)
}

// optional uint32 position_type = 4 [default = 0];
bool GnssStatus::has_position_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GnssStatus::set_has_position_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GnssStatus::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GnssStatus::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
 ::google::protobuf::uint32 GnssStatus::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.GnssStatus.position_type)
  return position_type_;
}
 void GnssStatus::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.GnssStatus.position_type)
}

// optional int32 num_sats = 5 [default = 0];
bool GnssStatus::has_num_sats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GnssStatus::set_has_num_sats() {
  _has_bits_[0] |= 0x00000010u;
}
void GnssStatus::clear_has_num_sats() {
  _has_bits_[0] &= ~0x00000010u;
}
void GnssStatus::clear_num_sats() {
  num_sats_ = 0;
  clear_has_num_sats();
}
 ::google::protobuf::int32 GnssStatus::num_sats() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss_status.GnssStatus.num_sats)
  return num_sats_;
}
 void GnssStatus::set_num_sats(::google::protobuf::int32 value) {
  set_has_num_sats();
  num_sats_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss_status.GnssStatus.num_sats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss_status
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
