// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/conti_radar.proto

#ifndef PROTOBUF_drivers_2fconti_5fradar_2eproto__INCLUDED
#define PROTOBUF_drivers_2fconti_5fradar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/header.pb.h"
#include "drivers/radar/conti_radar/conti_radar_conf.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_drivers_2fconti_5fradar_2eproto();
void protobuf_AssignDesc_drivers_2fconti_5fradar_2eproto();
void protobuf_ShutdownFile_drivers_2fconti_5fradar_2eproto();

class ClusterListStatus_600;
class ContiRadar;
class ContiRadarObs;
class ObjectListStatus_60A;
class RadarState_201;

// ===================================================================

class ClusterListStatus_600 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.ClusterListStatus_600) */ {
 public:
  ClusterListStatus_600();
  virtual ~ClusterListStatus_600();

  ClusterListStatus_600(const ClusterListStatus_600& from);

  inline ClusterListStatus_600& operator=(const ClusterListStatus_600& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterListStatus_600& default_instance();

  void Swap(ClusterListStatus_600* other);

  // implements Message ----------------------------------------------

  inline ClusterListStatus_600* New() const { return New(NULL); }

  ClusterListStatus_600* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterListStatus_600& from);
  void MergeFrom(const ClusterListStatus_600& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClusterListStatus_600* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 near = 1 [default = 0];
  bool has_near() const;
  void clear_near();
  static const int kNearFieldNumber = 1;
  ::google::protobuf::int32 near() const;
  void set_near(::google::protobuf::int32 value);

  // optional int32 far = 2 [default = 0];
  bool has_far() const;
  void clear_far();
  static const int kFarFieldNumber = 2;
  ::google::protobuf::int32 far() const;
  void set_far(::google::protobuf::int32 value);

  // optional int32 meas_counter = 3 [default = -1];
  bool has_meas_counter() const;
  void clear_meas_counter();
  static const int kMeasCounterFieldNumber = 3;
  ::google::protobuf::int32 meas_counter() const;
  void set_meas_counter(::google::protobuf::int32 value);

  // optional int32 interface_version = 4;
  bool has_interface_version() const;
  void clear_interface_version();
  static const int kInterfaceVersionFieldNumber = 4;
  ::google::protobuf::int32 interface_version() const;
  void set_interface_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.ClusterListStatus_600)
 private:
  inline void set_has_near();
  inline void clear_has_near();
  inline void set_has_far();
  inline void clear_has_far();
  inline void set_has_meas_counter();
  inline void clear_has_meas_counter();
  inline void set_has_interface_version();
  inline void clear_has_interface_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 near_;
  ::google::protobuf::int32 far_;
  ::google::protobuf::int32 meas_counter_;
  ::google::protobuf::int32 interface_version_;
  friend void  protobuf_AddDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_AssignDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fconti_5fradar_2eproto();

  void InitAsDefaultInstance();
  static ClusterListStatus_600* default_instance_;
};
// -------------------------------------------------------------------

class ObjectListStatus_60A : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.ObjectListStatus_60A) */ {
 public:
  ObjectListStatus_60A();
  virtual ~ObjectListStatus_60A();

  ObjectListStatus_60A(const ObjectListStatus_60A& from);

  inline ObjectListStatus_60A& operator=(const ObjectListStatus_60A& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectListStatus_60A& default_instance();

  void Swap(ObjectListStatus_60A* other);

  // implements Message ----------------------------------------------

  inline ObjectListStatus_60A* New() const { return New(NULL); }

  ObjectListStatus_60A* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectListStatus_60A& from);
  void MergeFrom(const ObjectListStatus_60A& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectListStatus_60A* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nof_objects = 1 [default = 0];
  bool has_nof_objects() const;
  void clear_nof_objects();
  static const int kNofObjectsFieldNumber = 1;
  ::google::protobuf::int32 nof_objects() const;
  void set_nof_objects(::google::protobuf::int32 value);

  // optional int32 meas_counter = 2 [default = -1];
  bool has_meas_counter() const;
  void clear_meas_counter();
  static const int kMeasCounterFieldNumber = 2;
  ::google::protobuf::int32 meas_counter() const;
  void set_meas_counter(::google::protobuf::int32 value);

  // optional int32 interface_version = 3;
  bool has_interface_version() const;
  void clear_interface_version();
  static const int kInterfaceVersionFieldNumber = 3;
  ::google::protobuf::int32 interface_version() const;
  void set_interface_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.ObjectListStatus_60A)
 private:
  inline void set_has_nof_objects();
  inline void clear_has_nof_objects();
  inline void set_has_meas_counter();
  inline void clear_has_meas_counter();
  inline void set_has_interface_version();
  inline void clear_has_interface_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 nof_objects_;
  ::google::protobuf::int32 meas_counter_;
  ::google::protobuf::int32 interface_version_;
  friend void  protobuf_AddDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_AssignDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fconti_5fradar_2eproto();

  void InitAsDefaultInstance();
  static ObjectListStatus_60A* default_instance_;
};
// -------------------------------------------------------------------

class RadarState_201 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RadarState_201) */ {
 public:
  RadarState_201();
  virtual ~RadarState_201();

  RadarState_201(const RadarState_201& from);

  inline RadarState_201& operator=(const RadarState_201& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarState_201& default_instance();

  void Swap(RadarState_201* other);

  // implements Message ----------------------------------------------

  inline RadarState_201* New() const { return New(NULL); }

  RadarState_201* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarState_201& from);
  void MergeFrom(const RadarState_201& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarState_201* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_distance = 1;
  bool has_max_distance() const;
  void clear_max_distance();
  static const int kMaxDistanceFieldNumber = 1;
  ::google::protobuf::uint32 max_distance() const;
  void set_max_distance(::google::protobuf::uint32 value);

  // optional uint32 radar_power = 2;
  bool has_radar_power() const;
  void clear_radar_power();
  static const int kRadarPowerFieldNumber = 2;
  ::google::protobuf::uint32 radar_power() const;
  void set_radar_power(::google::protobuf::uint32 value);

  // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
  bool has_output_type() const;
  void clear_output_type();
  static const int kOutputTypeFieldNumber = 3;
  ::apollo::drivers::conti_radar::OutputType output_type() const;
  void set_output_type(::apollo::drivers::conti_radar::OutputType value);

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
  bool has_rcs_threshold() const;
  void clear_rcs_threshold();
  static const int kRcsThresholdFieldNumber = 4;
  ::apollo::drivers::conti_radar::RcsThreshold rcs_threshold() const;
  void set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value);

  // optional bool send_quality = 5;
  bool has_send_quality() const;
  void clear_send_quality();
  static const int kSendQualityFieldNumber = 5;
  bool send_quality() const;
  void set_send_quality(bool value);

  // optional bool send_ext_info = 6;
  bool has_send_ext_info() const;
  void clear_send_ext_info();
  static const int kSendExtInfoFieldNumber = 6;
  bool send_ext_info() const;
  void set_send_ext_info(bool value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.RadarState_201)
 private:
  inline void set_has_max_distance();
  inline void clear_has_max_distance();
  inline void set_has_radar_power();
  inline void clear_has_radar_power();
  inline void set_has_output_type();
  inline void clear_has_output_type();
  inline void set_has_rcs_threshold();
  inline void clear_has_rcs_threshold();
  inline void set_has_send_quality();
  inline void clear_has_send_quality();
  inline void set_has_send_ext_info();
  inline void clear_has_send_ext_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 max_distance_;
  ::google::protobuf::uint32 radar_power_;
  int output_type_;
  int rcs_threshold_;
  bool send_quality_;
  bool send_ext_info_;
  friend void  protobuf_AddDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_AssignDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fconti_5fradar_2eproto();

  void InitAsDefaultInstance();
  static RadarState_201* default_instance_;
};
// -------------------------------------------------------------------

class ContiRadarObs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.ContiRadarObs) */ {
 public:
  ContiRadarObs();
  virtual ~ContiRadarObs();

  ContiRadarObs(const ContiRadarObs& from);

  inline ContiRadarObs& operator=(const ContiRadarObs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContiRadarObs& default_instance();

  void Swap(ContiRadarObs* other);

  // implements Message ----------------------------------------------

  inline ContiRadarObs* New() const { return New(NULL); }

  ContiRadarObs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContiRadarObs& from);
  void MergeFrom(const ContiRadarObs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContiRadarObs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional bool clusterortrack = 2;
  bool has_clusterortrack() const;
  void clear_clusterortrack();
  static const int kClusterortrackFieldNumber = 2;
  bool clusterortrack() const;
  void set_clusterortrack(bool value);

  // optional int32 obstacle_id = 3;
  bool has_obstacle_id() const;
  void clear_obstacle_id();
  static const int kObstacleIdFieldNumber = 3;
  ::google::protobuf::int32 obstacle_id() const;
  void set_obstacle_id(::google::protobuf::int32 value);

  // required double longitude_dist = 4;
  bool has_longitude_dist() const;
  void clear_longitude_dist();
  static const int kLongitudeDistFieldNumber = 4;
  double longitude_dist() const;
  void set_longitude_dist(double value);

  // required double lateral_dist = 5;
  bool has_lateral_dist() const;
  void clear_lateral_dist();
  static const int kLateralDistFieldNumber = 5;
  double lateral_dist() const;
  void set_lateral_dist(double value);

  // required double longitude_vel = 6;
  bool has_longitude_vel() const;
  void clear_longitude_vel();
  static const int kLongitudeVelFieldNumber = 6;
  double longitude_vel() const;
  void set_longitude_vel(double value);

  // required double lateral_vel = 7;
  bool has_lateral_vel() const;
  void clear_lateral_vel();
  static const int kLateralVelFieldNumber = 7;
  double lateral_vel() const;
  void set_lateral_vel(double value);

  // optional double rcs = 8;
  bool has_rcs() const;
  void clear_rcs();
  static const int kRcsFieldNumber = 8;
  double rcs() const;
  void set_rcs(double value);

  // optional int32 dynprop = 9;
  bool has_dynprop() const;
  void clear_dynprop();
  static const int kDynpropFieldNumber = 9;
  ::google::protobuf::int32 dynprop() const;
  void set_dynprop(::google::protobuf::int32 value);

  // optional double longitude_dist_rms = 10;
  bool has_longitude_dist_rms() const;
  void clear_longitude_dist_rms();
  static const int kLongitudeDistRmsFieldNumber = 10;
  double longitude_dist_rms() const;
  void set_longitude_dist_rms(double value);

  // optional double lateral_dist_rms = 11;
  bool has_lateral_dist_rms() const;
  void clear_lateral_dist_rms();
  static const int kLateralDistRmsFieldNumber = 11;
  double lateral_dist_rms() const;
  void set_lateral_dist_rms(double value);

  // optional double longitude_vel_rms = 12;
  bool has_longitude_vel_rms() const;
  void clear_longitude_vel_rms();
  static const int kLongitudeVelRmsFieldNumber = 12;
  double longitude_vel_rms() const;
  void set_longitude_vel_rms(double value);

  // optional double lateral_vel_rms = 13;
  bool has_lateral_vel_rms() const;
  void clear_lateral_vel_rms();
  static const int kLateralVelRmsFieldNumber = 13;
  double lateral_vel_rms() const;
  void set_lateral_vel_rms(double value);

  // optional double probexist = 14;
  bool has_probexist() const;
  void clear_probexist();
  static const int kProbexistFieldNumber = 14;
  double probexist() const;
  void set_probexist(double value);

  // optional int32 meas_state = 15;
  bool has_meas_state() const;
  void clear_meas_state();
  static const int kMeasStateFieldNumber = 15;
  ::google::protobuf::int32 meas_state() const;
  void set_meas_state(::google::protobuf::int32 value);

  // optional double longitude_accel = 16;
  bool has_longitude_accel() const;
  void clear_longitude_accel();
  static const int kLongitudeAccelFieldNumber = 16;
  double longitude_accel() const;
  void set_longitude_accel(double value);

  // optional double lateral_accel = 17;
  bool has_lateral_accel() const;
  void clear_lateral_accel();
  static const int kLateralAccelFieldNumber = 17;
  double lateral_accel() const;
  void set_lateral_accel(double value);

  // optional double oritation_angle = 18;
  bool has_oritation_angle() const;
  void clear_oritation_angle();
  static const int kOritationAngleFieldNumber = 18;
  double oritation_angle() const;
  void set_oritation_angle(double value);

  // optional double longitude_accel_rms = 19;
  bool has_longitude_accel_rms() const;
  void clear_longitude_accel_rms();
  static const int kLongitudeAccelRmsFieldNumber = 19;
  double longitude_accel_rms() const;
  void set_longitude_accel_rms(double value);

  // optional double lateral_accel_rms = 20;
  bool has_lateral_accel_rms() const;
  void clear_lateral_accel_rms();
  static const int kLateralAccelRmsFieldNumber = 20;
  double lateral_accel_rms() const;
  void set_lateral_accel_rms(double value);

  // optional double oritation_angle_rms = 21;
  bool has_oritation_angle_rms() const;
  void clear_oritation_angle_rms();
  static const int kOritationAngleRmsFieldNumber = 21;
  double oritation_angle_rms() const;
  void set_oritation_angle_rms(double value);

  // optional double length = 22;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 22;
  double length() const;
  void set_length(double value);

  // optional double width = 23;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 23;
  double width() const;
  void set_width(double value);

  // optional int32 obstacle_class = 24;
  bool has_obstacle_class() const;
  void clear_obstacle_class();
  static const int kObstacleClassFieldNumber = 24;
  ::google::protobuf::int32 obstacle_class() const;
  void set_obstacle_class(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.ContiRadarObs)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_clusterortrack();
  inline void clear_has_clusterortrack();
  inline void set_has_obstacle_id();
  inline void clear_has_obstacle_id();
  inline void set_has_longitude_dist();
  inline void clear_has_longitude_dist();
  inline void set_has_lateral_dist();
  inline void clear_has_lateral_dist();
  inline void set_has_longitude_vel();
  inline void clear_has_longitude_vel();
  inline void set_has_lateral_vel();
  inline void clear_has_lateral_vel();
  inline void set_has_rcs();
  inline void clear_has_rcs();
  inline void set_has_dynprop();
  inline void clear_has_dynprop();
  inline void set_has_longitude_dist_rms();
  inline void clear_has_longitude_dist_rms();
  inline void set_has_lateral_dist_rms();
  inline void clear_has_lateral_dist_rms();
  inline void set_has_longitude_vel_rms();
  inline void clear_has_longitude_vel_rms();
  inline void set_has_lateral_vel_rms();
  inline void clear_has_lateral_vel_rms();
  inline void set_has_probexist();
  inline void clear_has_probexist();
  inline void set_has_meas_state();
  inline void clear_has_meas_state();
  inline void set_has_longitude_accel();
  inline void clear_has_longitude_accel();
  inline void set_has_lateral_accel();
  inline void clear_has_lateral_accel();
  inline void set_has_oritation_angle();
  inline void clear_has_oritation_angle();
  inline void set_has_longitude_accel_rms();
  inline void clear_has_longitude_accel_rms();
  inline void set_has_lateral_accel_rms();
  inline void clear_has_lateral_accel_rms();
  inline void set_has_oritation_angle_rms();
  inline void clear_has_oritation_angle_rms();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_obstacle_class();
  inline void clear_has_obstacle_class();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  bool clusterortrack_;
  ::google::protobuf::int32 obstacle_id_;
  double longitude_dist_;
  double lateral_dist_;
  double longitude_vel_;
  double lateral_vel_;
  double rcs_;
  double longitude_dist_rms_;
  double lateral_dist_rms_;
  double longitude_vel_rms_;
  ::google::protobuf::int32 dynprop_;
  ::google::protobuf::int32 meas_state_;
  double lateral_vel_rms_;
  double probexist_;
  double longitude_accel_;
  double lateral_accel_;
  double oritation_angle_;
  double longitude_accel_rms_;
  double lateral_accel_rms_;
  double oritation_angle_rms_;
  double length_;
  double width_;
  ::google::protobuf::int32 obstacle_class_;
  friend void  protobuf_AddDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_AssignDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fconti_5fradar_2eproto();

  void InitAsDefaultInstance();
  static ContiRadarObs* default_instance_;
};
// -------------------------------------------------------------------

class ContiRadar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.ContiRadar) */ {
 public:
  ContiRadar();
  virtual ~ContiRadar();

  ContiRadar(const ContiRadar& from);

  inline ContiRadar& operator=(const ContiRadar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContiRadar& default_instance();

  void Swap(ContiRadar* other);

  // implements Message ----------------------------------------------

  inline ContiRadar* New() const { return New(NULL); }

  ContiRadar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContiRadar& from);
  void MergeFrom(const ContiRadar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContiRadar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
  int contiobs_size() const;
  void clear_contiobs();
  static const int kContiobsFieldNumber = 2;
  const ::apollo::drivers::ContiRadarObs& contiobs(int index) const;
  ::apollo::drivers::ContiRadarObs* mutable_contiobs(int index);
  ::apollo::drivers::ContiRadarObs* add_contiobs();
  ::google::protobuf::RepeatedPtrField< ::apollo::drivers::ContiRadarObs >*
      mutable_contiobs();
  const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::ContiRadarObs >&
      contiobs() const;

  // optional .apollo.drivers.RadarState_201 radar_state = 3;
  bool has_radar_state() const;
  void clear_radar_state();
  static const int kRadarStateFieldNumber = 3;
  const ::apollo::drivers::RadarState_201& radar_state() const;
  ::apollo::drivers::RadarState_201* mutable_radar_state();
  ::apollo::drivers::RadarState_201* release_radar_state();
  void set_allocated_radar_state(::apollo::drivers::RadarState_201* radar_state);

  // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
  bool has_cluster_list_status() const;
  void clear_cluster_list_status();
  static const int kClusterListStatusFieldNumber = 4;
  const ::apollo::drivers::ClusterListStatus_600& cluster_list_status() const;
  ::apollo::drivers::ClusterListStatus_600* mutable_cluster_list_status();
  ::apollo::drivers::ClusterListStatus_600* release_cluster_list_status();
  void set_allocated_cluster_list_status(::apollo::drivers::ClusterListStatus_600* cluster_list_status);

  // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
  bool has_object_list_status() const;
  void clear_object_list_status();
  static const int kObjectListStatusFieldNumber = 5;
  const ::apollo::drivers::ObjectListStatus_60A& object_list_status() const;
  ::apollo::drivers::ObjectListStatus_60A* mutable_object_list_status();
  ::apollo::drivers::ObjectListStatus_60A* release_object_list_status();
  void set_allocated_object_list_status(::apollo::drivers::ObjectListStatus_60A* object_list_status);

  // @@protoc_insertion_point(class_scope:apollo.drivers.ContiRadar)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_radar_state();
  inline void clear_has_radar_state();
  inline void set_has_cluster_list_status();
  inline void clear_has_cluster_list_status();
  inline void set_has_object_list_status();
  inline void clear_has_object_list_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::apollo::drivers::ContiRadarObs > contiobs_;
  ::apollo::drivers::RadarState_201* radar_state_;
  ::apollo::drivers::ClusterListStatus_600* cluster_list_status_;
  ::apollo::drivers::ObjectListStatus_60A* object_list_status_;
  friend void  protobuf_AddDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_AssignDesc_drivers_2fconti_5fradar_2eproto();
  friend void protobuf_ShutdownFile_drivers_2fconti_5fradar_2eproto();

  void InitAsDefaultInstance();
  static ContiRadar* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterListStatus_600

// optional int32 near = 1 [default = 0];
inline bool ClusterListStatus_600::has_near() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterListStatus_600::set_has_near() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterListStatus_600::clear_has_near() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterListStatus_600::clear_near() {
  near_ = 0;
  clear_has_near();
}
inline ::google::protobuf::int32 ClusterListStatus_600::near() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.near)
  return near_;
}
inline void ClusterListStatus_600::set_near(::google::protobuf::int32 value) {
  set_has_near();
  near_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.near)
}

// optional int32 far = 2 [default = 0];
inline bool ClusterListStatus_600::has_far() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClusterListStatus_600::set_has_far() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClusterListStatus_600::clear_has_far() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClusterListStatus_600::clear_far() {
  far_ = 0;
  clear_has_far();
}
inline ::google::protobuf::int32 ClusterListStatus_600::far() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.far)
  return far_;
}
inline void ClusterListStatus_600::set_far(::google::protobuf::int32 value) {
  set_has_far();
  far_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.far)
}

// optional int32 meas_counter = 3 [default = -1];
inline bool ClusterListStatus_600::has_meas_counter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClusterListStatus_600::set_has_meas_counter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClusterListStatus_600::clear_has_meas_counter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClusterListStatus_600::clear_meas_counter() {
  meas_counter_ = -1;
  clear_has_meas_counter();
}
inline ::google::protobuf::int32 ClusterListStatus_600::meas_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.meas_counter)
  return meas_counter_;
}
inline void ClusterListStatus_600::set_meas_counter(::google::protobuf::int32 value) {
  set_has_meas_counter();
  meas_counter_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.meas_counter)
}

// optional int32 interface_version = 4;
inline bool ClusterListStatus_600::has_interface_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClusterListStatus_600::set_has_interface_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClusterListStatus_600::clear_has_interface_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClusterListStatus_600::clear_interface_version() {
  interface_version_ = 0;
  clear_has_interface_version();
}
inline ::google::protobuf::int32 ClusterListStatus_600::interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.interface_version)
  return interface_version_;
}
inline void ClusterListStatus_600::set_interface_version(::google::protobuf::int32 value) {
  set_has_interface_version();
  interface_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.interface_version)
}

// -------------------------------------------------------------------

// ObjectListStatus_60A

// optional int32 nof_objects = 1 [default = 0];
inline bool ObjectListStatus_60A::has_nof_objects() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectListStatus_60A::set_has_nof_objects() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectListStatus_60A::clear_has_nof_objects() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectListStatus_60A::clear_nof_objects() {
  nof_objects_ = 0;
  clear_has_nof_objects();
}
inline ::google::protobuf::int32 ObjectListStatus_60A::nof_objects() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ObjectListStatus_60A.nof_objects)
  return nof_objects_;
}
inline void ObjectListStatus_60A::set_nof_objects(::google::protobuf::int32 value) {
  set_has_nof_objects();
  nof_objects_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ObjectListStatus_60A.nof_objects)
}

// optional int32 meas_counter = 2 [default = -1];
inline bool ObjectListStatus_60A::has_meas_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectListStatus_60A::set_has_meas_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectListStatus_60A::clear_has_meas_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectListStatus_60A::clear_meas_counter() {
  meas_counter_ = -1;
  clear_has_meas_counter();
}
inline ::google::protobuf::int32 ObjectListStatus_60A::meas_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ObjectListStatus_60A.meas_counter)
  return meas_counter_;
}
inline void ObjectListStatus_60A::set_meas_counter(::google::protobuf::int32 value) {
  set_has_meas_counter();
  meas_counter_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ObjectListStatus_60A.meas_counter)
}

// optional int32 interface_version = 3;
inline bool ObjectListStatus_60A::has_interface_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectListStatus_60A::set_has_interface_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectListStatus_60A::clear_has_interface_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectListStatus_60A::clear_interface_version() {
  interface_version_ = 0;
  clear_has_interface_version();
}
inline ::google::protobuf::int32 ObjectListStatus_60A::interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ObjectListStatus_60A.interface_version)
  return interface_version_;
}
inline void ObjectListStatus_60A::set_interface_version(::google::protobuf::int32 value) {
  set_has_interface_version();
  interface_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ObjectListStatus_60A.interface_version)
}

// -------------------------------------------------------------------

// RadarState_201

// optional uint32 max_distance = 1;
inline bool RadarState_201::has_max_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarState_201::set_has_max_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarState_201::clear_has_max_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarState_201::clear_max_distance() {
  max_distance_ = 0u;
  clear_has_max_distance();
}
inline ::google::protobuf::uint32 RadarState_201::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.max_distance)
  return max_distance_;
}
inline void RadarState_201::set_max_distance(::google::protobuf::uint32 value) {
  set_has_max_distance();
  max_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.max_distance)
}

// optional uint32 radar_power = 2;
inline bool RadarState_201::has_radar_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarState_201::set_has_radar_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarState_201::clear_has_radar_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarState_201::clear_radar_power() {
  radar_power_ = 0u;
  clear_has_radar_power();
}
inline ::google::protobuf::uint32 RadarState_201::radar_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.radar_power)
  return radar_power_;
}
inline void RadarState_201::set_radar_power(::google::protobuf::uint32 value) {
  set_has_radar_power();
  radar_power_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.radar_power)
}

// optional .apollo.drivers.conti_radar.OutputType output_type = 3;
inline bool RadarState_201::has_output_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarState_201::set_has_output_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarState_201::clear_has_output_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarState_201::clear_output_type() {
  output_type_ = 0;
  clear_has_output_type();
}
inline ::apollo::drivers::conti_radar::OutputType RadarState_201::output_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.output_type)
  return static_cast< ::apollo::drivers::conti_radar::OutputType >(output_type_);
}
inline void RadarState_201::set_output_type(::apollo::drivers::conti_radar::OutputType value) {
  assert(::apollo::drivers::conti_radar::OutputType_IsValid(value));
  set_has_output_type();
  output_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.output_type)
}

// optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
inline bool RadarState_201::has_rcs_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarState_201::set_has_rcs_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarState_201::clear_has_rcs_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarState_201::clear_rcs_threshold() {
  rcs_threshold_ = 0;
  clear_has_rcs_threshold();
}
inline ::apollo::drivers::conti_radar::RcsThreshold RadarState_201::rcs_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.rcs_threshold)
  return static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(rcs_threshold_);
}
inline void RadarState_201::set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value) {
  assert(::apollo::drivers::conti_radar::RcsThreshold_IsValid(value));
  set_has_rcs_threshold();
  rcs_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.rcs_threshold)
}

// optional bool send_quality = 5;
inline bool RadarState_201::has_send_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarState_201::set_has_send_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarState_201::clear_has_send_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarState_201::clear_send_quality() {
  send_quality_ = false;
  clear_has_send_quality();
}
inline bool RadarState_201::send_quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.send_quality)
  return send_quality_;
}
inline void RadarState_201::set_send_quality(bool value) {
  set_has_send_quality();
  send_quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.send_quality)
}

// optional bool send_ext_info = 6;
inline bool RadarState_201::has_send_ext_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarState_201::set_has_send_ext_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarState_201::clear_has_send_ext_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarState_201::clear_send_ext_info() {
  send_ext_info_ = false;
  clear_has_send_ext_info();
}
inline bool RadarState_201::send_ext_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.send_ext_info)
  return send_ext_info_;
}
inline void RadarState_201::set_send_ext_info(bool value) {
  set_has_send_ext_info();
  send_ext_info_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.send_ext_info)
}

// -------------------------------------------------------------------

// ContiRadarObs

// optional .apollo.common.Header header = 1;
inline bool ContiRadarObs::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContiRadarObs::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContiRadarObs::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContiRadarObs::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& ContiRadarObs::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* ContiRadarObs::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadarObs.header)
  return header_;
}
inline ::apollo::common::Header* ContiRadarObs::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadarObs.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ContiRadarObs::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadarObs.header)
}

// optional bool clusterortrack = 2;
inline bool ContiRadarObs::has_clusterortrack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContiRadarObs::set_has_clusterortrack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContiRadarObs::clear_has_clusterortrack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContiRadarObs::clear_clusterortrack() {
  clusterortrack_ = false;
  clear_has_clusterortrack();
}
inline bool ContiRadarObs::clusterortrack() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.clusterortrack)
  return clusterortrack_;
}
inline void ContiRadarObs::set_clusterortrack(bool value) {
  set_has_clusterortrack();
  clusterortrack_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.clusterortrack)
}

// optional int32 obstacle_id = 3;
inline bool ContiRadarObs::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContiRadarObs::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContiRadarObs::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContiRadarObs::clear_obstacle_id() {
  obstacle_id_ = 0;
  clear_has_obstacle_id();
}
inline ::google::protobuf::int32 ContiRadarObs::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.obstacle_id)
  return obstacle_id_;
}
inline void ContiRadarObs::set_obstacle_id(::google::protobuf::int32 value) {
  set_has_obstacle_id();
  obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.obstacle_id)
}

// required double longitude_dist = 4;
inline bool ContiRadarObs::has_longitude_dist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContiRadarObs::set_has_longitude_dist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContiRadarObs::clear_has_longitude_dist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContiRadarObs::clear_longitude_dist() {
  longitude_dist_ = 0;
  clear_has_longitude_dist();
}
inline double ContiRadarObs::longitude_dist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_dist)
  return longitude_dist_;
}
inline void ContiRadarObs::set_longitude_dist(double value) {
  set_has_longitude_dist();
  longitude_dist_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_dist)
}

// required double lateral_dist = 5;
inline bool ContiRadarObs::has_lateral_dist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContiRadarObs::set_has_lateral_dist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContiRadarObs::clear_has_lateral_dist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContiRadarObs::clear_lateral_dist() {
  lateral_dist_ = 0;
  clear_has_lateral_dist();
}
inline double ContiRadarObs::lateral_dist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_dist)
  return lateral_dist_;
}
inline void ContiRadarObs::set_lateral_dist(double value) {
  set_has_lateral_dist();
  lateral_dist_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_dist)
}

// required double longitude_vel = 6;
inline bool ContiRadarObs::has_longitude_vel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContiRadarObs::set_has_longitude_vel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContiRadarObs::clear_has_longitude_vel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContiRadarObs::clear_longitude_vel() {
  longitude_vel_ = 0;
  clear_has_longitude_vel();
}
inline double ContiRadarObs::longitude_vel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_vel)
  return longitude_vel_;
}
inline void ContiRadarObs::set_longitude_vel(double value) {
  set_has_longitude_vel();
  longitude_vel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_vel)
}

// required double lateral_vel = 7;
inline bool ContiRadarObs::has_lateral_vel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContiRadarObs::set_has_lateral_vel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContiRadarObs::clear_has_lateral_vel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContiRadarObs::clear_lateral_vel() {
  lateral_vel_ = 0;
  clear_has_lateral_vel();
}
inline double ContiRadarObs::lateral_vel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_vel)
  return lateral_vel_;
}
inline void ContiRadarObs::set_lateral_vel(double value) {
  set_has_lateral_vel();
  lateral_vel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_vel)
}

// optional double rcs = 8;
inline bool ContiRadarObs::has_rcs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContiRadarObs::set_has_rcs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContiRadarObs::clear_has_rcs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContiRadarObs::clear_rcs() {
  rcs_ = 0;
  clear_has_rcs();
}
inline double ContiRadarObs::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.rcs)
  return rcs_;
}
inline void ContiRadarObs::set_rcs(double value) {
  set_has_rcs();
  rcs_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.rcs)
}

// optional int32 dynprop = 9;
inline bool ContiRadarObs::has_dynprop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContiRadarObs::set_has_dynprop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContiRadarObs::clear_has_dynprop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContiRadarObs::clear_dynprop() {
  dynprop_ = 0;
  clear_has_dynprop();
}
inline ::google::protobuf::int32 ContiRadarObs::dynprop() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.dynprop)
  return dynprop_;
}
inline void ContiRadarObs::set_dynprop(::google::protobuf::int32 value) {
  set_has_dynprop();
  dynprop_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.dynprop)
}

// optional double longitude_dist_rms = 10;
inline bool ContiRadarObs::has_longitude_dist_rms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContiRadarObs::set_has_longitude_dist_rms() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContiRadarObs::clear_has_longitude_dist_rms() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContiRadarObs::clear_longitude_dist_rms() {
  longitude_dist_rms_ = 0;
  clear_has_longitude_dist_rms();
}
inline double ContiRadarObs::longitude_dist_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_dist_rms)
  return longitude_dist_rms_;
}
inline void ContiRadarObs::set_longitude_dist_rms(double value) {
  set_has_longitude_dist_rms();
  longitude_dist_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_dist_rms)
}

// optional double lateral_dist_rms = 11;
inline bool ContiRadarObs::has_lateral_dist_rms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContiRadarObs::set_has_lateral_dist_rms() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContiRadarObs::clear_has_lateral_dist_rms() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContiRadarObs::clear_lateral_dist_rms() {
  lateral_dist_rms_ = 0;
  clear_has_lateral_dist_rms();
}
inline double ContiRadarObs::lateral_dist_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_dist_rms)
  return lateral_dist_rms_;
}
inline void ContiRadarObs::set_lateral_dist_rms(double value) {
  set_has_lateral_dist_rms();
  lateral_dist_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_dist_rms)
}

// optional double longitude_vel_rms = 12;
inline bool ContiRadarObs::has_longitude_vel_rms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ContiRadarObs::set_has_longitude_vel_rms() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ContiRadarObs::clear_has_longitude_vel_rms() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ContiRadarObs::clear_longitude_vel_rms() {
  longitude_vel_rms_ = 0;
  clear_has_longitude_vel_rms();
}
inline double ContiRadarObs::longitude_vel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_vel_rms)
  return longitude_vel_rms_;
}
inline void ContiRadarObs::set_longitude_vel_rms(double value) {
  set_has_longitude_vel_rms();
  longitude_vel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_vel_rms)
}

// optional double lateral_vel_rms = 13;
inline bool ContiRadarObs::has_lateral_vel_rms() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ContiRadarObs::set_has_lateral_vel_rms() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ContiRadarObs::clear_has_lateral_vel_rms() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ContiRadarObs::clear_lateral_vel_rms() {
  lateral_vel_rms_ = 0;
  clear_has_lateral_vel_rms();
}
inline double ContiRadarObs::lateral_vel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_vel_rms)
  return lateral_vel_rms_;
}
inline void ContiRadarObs::set_lateral_vel_rms(double value) {
  set_has_lateral_vel_rms();
  lateral_vel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_vel_rms)
}

// optional double probexist = 14;
inline bool ContiRadarObs::has_probexist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ContiRadarObs::set_has_probexist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ContiRadarObs::clear_has_probexist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ContiRadarObs::clear_probexist() {
  probexist_ = 0;
  clear_has_probexist();
}
inline double ContiRadarObs::probexist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.probexist)
  return probexist_;
}
inline void ContiRadarObs::set_probexist(double value) {
  set_has_probexist();
  probexist_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.probexist)
}

// optional int32 meas_state = 15;
inline bool ContiRadarObs::has_meas_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ContiRadarObs::set_has_meas_state() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ContiRadarObs::clear_has_meas_state() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ContiRadarObs::clear_meas_state() {
  meas_state_ = 0;
  clear_has_meas_state();
}
inline ::google::protobuf::int32 ContiRadarObs::meas_state() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.meas_state)
  return meas_state_;
}
inline void ContiRadarObs::set_meas_state(::google::protobuf::int32 value) {
  set_has_meas_state();
  meas_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.meas_state)
}

// optional double longitude_accel = 16;
inline bool ContiRadarObs::has_longitude_accel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ContiRadarObs::set_has_longitude_accel() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ContiRadarObs::clear_has_longitude_accel() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ContiRadarObs::clear_longitude_accel() {
  longitude_accel_ = 0;
  clear_has_longitude_accel();
}
inline double ContiRadarObs::longitude_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_accel)
  return longitude_accel_;
}
inline void ContiRadarObs::set_longitude_accel(double value) {
  set_has_longitude_accel();
  longitude_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_accel)
}

// optional double lateral_accel = 17;
inline bool ContiRadarObs::has_lateral_accel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ContiRadarObs::set_has_lateral_accel() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ContiRadarObs::clear_has_lateral_accel() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ContiRadarObs::clear_lateral_accel() {
  lateral_accel_ = 0;
  clear_has_lateral_accel();
}
inline double ContiRadarObs::lateral_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_accel)
  return lateral_accel_;
}
inline void ContiRadarObs::set_lateral_accel(double value) {
  set_has_lateral_accel();
  lateral_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_accel)
}

// optional double oritation_angle = 18;
inline bool ContiRadarObs::has_oritation_angle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ContiRadarObs::set_has_oritation_angle() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ContiRadarObs::clear_has_oritation_angle() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ContiRadarObs::clear_oritation_angle() {
  oritation_angle_ = 0;
  clear_has_oritation_angle();
}
inline double ContiRadarObs::oritation_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.oritation_angle)
  return oritation_angle_;
}
inline void ContiRadarObs::set_oritation_angle(double value) {
  set_has_oritation_angle();
  oritation_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.oritation_angle)
}

// optional double longitude_accel_rms = 19;
inline bool ContiRadarObs::has_longitude_accel_rms() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ContiRadarObs::set_has_longitude_accel_rms() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ContiRadarObs::clear_has_longitude_accel_rms() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ContiRadarObs::clear_longitude_accel_rms() {
  longitude_accel_rms_ = 0;
  clear_has_longitude_accel_rms();
}
inline double ContiRadarObs::longitude_accel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_accel_rms)
  return longitude_accel_rms_;
}
inline void ContiRadarObs::set_longitude_accel_rms(double value) {
  set_has_longitude_accel_rms();
  longitude_accel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_accel_rms)
}

// optional double lateral_accel_rms = 20;
inline bool ContiRadarObs::has_lateral_accel_rms() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ContiRadarObs::set_has_lateral_accel_rms() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ContiRadarObs::clear_has_lateral_accel_rms() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ContiRadarObs::clear_lateral_accel_rms() {
  lateral_accel_rms_ = 0;
  clear_has_lateral_accel_rms();
}
inline double ContiRadarObs::lateral_accel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_accel_rms)
  return lateral_accel_rms_;
}
inline void ContiRadarObs::set_lateral_accel_rms(double value) {
  set_has_lateral_accel_rms();
  lateral_accel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_accel_rms)
}

// optional double oritation_angle_rms = 21;
inline bool ContiRadarObs::has_oritation_angle_rms() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ContiRadarObs::set_has_oritation_angle_rms() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ContiRadarObs::clear_has_oritation_angle_rms() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ContiRadarObs::clear_oritation_angle_rms() {
  oritation_angle_rms_ = 0;
  clear_has_oritation_angle_rms();
}
inline double ContiRadarObs::oritation_angle_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.oritation_angle_rms)
  return oritation_angle_rms_;
}
inline void ContiRadarObs::set_oritation_angle_rms(double value) {
  set_has_oritation_angle_rms();
  oritation_angle_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.oritation_angle_rms)
}

// optional double length = 22;
inline bool ContiRadarObs::has_length() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ContiRadarObs::set_has_length() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ContiRadarObs::clear_has_length() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ContiRadarObs::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double ContiRadarObs::length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.length)
  return length_;
}
inline void ContiRadarObs::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.length)
}

// optional double width = 23;
inline bool ContiRadarObs::has_width() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ContiRadarObs::set_has_width() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ContiRadarObs::clear_has_width() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ContiRadarObs::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double ContiRadarObs::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.width)
  return width_;
}
inline void ContiRadarObs::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.width)
}

// optional int32 obstacle_class = 24;
inline bool ContiRadarObs::has_obstacle_class() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ContiRadarObs::set_has_obstacle_class() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ContiRadarObs::clear_has_obstacle_class() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ContiRadarObs::clear_obstacle_class() {
  obstacle_class_ = 0;
  clear_has_obstacle_class();
}
inline ::google::protobuf::int32 ContiRadarObs::obstacle_class() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.obstacle_class)
  return obstacle_class_;
}
inline void ContiRadarObs::set_obstacle_class(::google::protobuf::int32 value) {
  set_has_obstacle_class();
  obstacle_class_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.obstacle_class)
}

// -------------------------------------------------------------------

// ContiRadar

// optional .apollo.common.Header header = 1;
inline bool ContiRadar::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContiRadar::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContiRadar::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContiRadar::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& ContiRadar::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* ContiRadar::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.header)
  return header_;
}
inline ::apollo::common::Header* ContiRadar::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ContiRadar::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.header)
}

// repeated .apollo.drivers.ContiRadarObs contiobs = 2;
inline int ContiRadar::contiobs_size() const {
  return contiobs_.size();
}
inline void ContiRadar::clear_contiobs() {
  contiobs_.Clear();
}
inline const ::apollo::drivers::ContiRadarObs& ContiRadar::contiobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.contiobs)
  return contiobs_.Get(index);
}
inline ::apollo::drivers::ContiRadarObs* ContiRadar::mutable_contiobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.contiobs)
  return contiobs_.Mutable(index);
}
inline ::apollo::drivers::ContiRadarObs* ContiRadar::add_contiobs() {
  // @@protoc_insertion_point(field_add:apollo.drivers.ContiRadar.contiobs)
  return contiobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::drivers::ContiRadarObs >*
ContiRadar::mutable_contiobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.ContiRadar.contiobs)
  return &contiobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::ContiRadarObs >&
ContiRadar::contiobs() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.ContiRadar.contiobs)
  return contiobs_;
}

// optional .apollo.drivers.RadarState_201 radar_state = 3;
inline bool ContiRadar::has_radar_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContiRadar::set_has_radar_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContiRadar::clear_has_radar_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContiRadar::clear_radar_state() {
  if (radar_state_ != NULL) radar_state_->::apollo::drivers::RadarState_201::Clear();
  clear_has_radar_state();
}
inline const ::apollo::drivers::RadarState_201& ContiRadar::radar_state() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.radar_state)
  return radar_state_ != NULL ? *radar_state_ : *default_instance_->radar_state_;
}
inline ::apollo::drivers::RadarState_201* ContiRadar::mutable_radar_state() {
  set_has_radar_state();
  if (radar_state_ == NULL) {
    radar_state_ = new ::apollo::drivers::RadarState_201;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.radar_state)
  return radar_state_;
}
inline ::apollo::drivers::RadarState_201* ContiRadar::release_radar_state() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.radar_state)
  clear_has_radar_state();
  ::apollo::drivers::RadarState_201* temp = radar_state_;
  radar_state_ = NULL;
  return temp;
}
inline void ContiRadar::set_allocated_radar_state(::apollo::drivers::RadarState_201* radar_state) {
  delete radar_state_;
  radar_state_ = radar_state;
  if (radar_state) {
    set_has_radar_state();
  } else {
    clear_has_radar_state();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.radar_state)
}

// optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
inline bool ContiRadar::has_cluster_list_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContiRadar::set_has_cluster_list_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContiRadar::clear_has_cluster_list_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContiRadar::clear_cluster_list_status() {
  if (cluster_list_status_ != NULL) cluster_list_status_->::apollo::drivers::ClusterListStatus_600::Clear();
  clear_has_cluster_list_status();
}
inline const ::apollo::drivers::ClusterListStatus_600& ContiRadar::cluster_list_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.cluster_list_status)
  return cluster_list_status_ != NULL ? *cluster_list_status_ : *default_instance_->cluster_list_status_;
}
inline ::apollo::drivers::ClusterListStatus_600* ContiRadar::mutable_cluster_list_status() {
  set_has_cluster_list_status();
  if (cluster_list_status_ == NULL) {
    cluster_list_status_ = new ::apollo::drivers::ClusterListStatus_600;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.cluster_list_status)
  return cluster_list_status_;
}
inline ::apollo::drivers::ClusterListStatus_600* ContiRadar::release_cluster_list_status() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.cluster_list_status)
  clear_has_cluster_list_status();
  ::apollo::drivers::ClusterListStatus_600* temp = cluster_list_status_;
  cluster_list_status_ = NULL;
  return temp;
}
inline void ContiRadar::set_allocated_cluster_list_status(::apollo::drivers::ClusterListStatus_600* cluster_list_status) {
  delete cluster_list_status_;
  cluster_list_status_ = cluster_list_status;
  if (cluster_list_status) {
    set_has_cluster_list_status();
  } else {
    clear_has_cluster_list_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.cluster_list_status)
}

// optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
inline bool ContiRadar::has_object_list_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContiRadar::set_has_object_list_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContiRadar::clear_has_object_list_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContiRadar::clear_object_list_status() {
  if (object_list_status_ != NULL) object_list_status_->::apollo::drivers::ObjectListStatus_60A::Clear();
  clear_has_object_list_status();
}
inline const ::apollo::drivers::ObjectListStatus_60A& ContiRadar::object_list_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.object_list_status)
  return object_list_status_ != NULL ? *object_list_status_ : *default_instance_->object_list_status_;
}
inline ::apollo::drivers::ObjectListStatus_60A* ContiRadar::mutable_object_list_status() {
  set_has_object_list_status();
  if (object_list_status_ == NULL) {
    object_list_status_ = new ::apollo::drivers::ObjectListStatus_60A;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.object_list_status)
  return object_list_status_;
}
inline ::apollo::drivers::ObjectListStatus_60A* ContiRadar::release_object_list_status() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.object_list_status)
  clear_has_object_list_status();
  ::apollo::drivers::ObjectListStatus_60A* temp = object_list_status_;
  object_list_status_ = NULL;
  return temp;
}
inline void ContiRadar::set_allocated_object_list_status(::apollo::drivers::ObjectListStatus_60A* object_list_status) {
  delete object_list_status_;
  object_list_status_ = object_list_status;
  if (object_list_status) {
    set_has_object_list_status();
  } else {
    clear_has_object_list_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.object_list_status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drivers_2fconti_5fradar_2eproto__INCLUDED
