// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map/relative_map/navigation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map/relative_map/navigation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace relative_map {

namespace {

const ::google::protobuf::Descriptor* NavigationPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavigationPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* NavigationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavigationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapMsg_NavigationPathEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2frelative_5fmap_2fnavigation_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_map_2frelative_5fmap_2fnavigation_2eproto() {
  protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map/relative_map/navigation.proto");
  GOOGLE_CHECK(file != NULL);
  NavigationPath_descriptor_ = file->message_type(0);
  static const int NavigationPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, path_priority_),
  };
  NavigationPath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NavigationPath_descriptor_,
      NavigationPath::default_instance_,
      NavigationPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, _has_bits_[0]),
      -1,
      -1,
      sizeof(NavigationPath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, _internal_metadata_),
      -1);
  NavigationInfo_descriptor_ = file->message_type(1);
  static const int NavigationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, navigation_path_),
  };
  NavigationInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NavigationInfo_descriptor_,
      NavigationInfo::default_instance_,
      NavigationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(NavigationInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, _internal_metadata_),
      -1);
  MapMsg_descriptor_ = file->message_type(2);
  static const int MapMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, hdmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, navigation_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, lane_marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, localization_),
  };
  MapMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapMsg_descriptor_,
      MapMsg::default_instance_,
      MapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, _internal_metadata_),
      -1);
  MapMsg_NavigationPathEntry_descriptor_ = MapMsg_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2frelative_5fmap_2fnavigation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NavigationPath_descriptor_, &NavigationPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NavigationInfo_descriptor_, &NavigationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapMsg_descriptor_, &MapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MapMsg_NavigationPathEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::apollo::relative_map::NavigationPath,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MapMsg_NavigationPathEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_map_2frelative_5fmap_2fnavigation_2eproto() {
  delete NavigationPath::default_instance_;
  delete NavigationPath_reflection_;
  delete NavigationInfo::default_instance_;
  delete NavigationInfo_reflection_;
  delete MapMsg::default_instance_;
  delete MapMsg_reflection_;
}

void protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_common_2fheader_2eproto();
  ::apollo::common::protobuf_AddDesc_common_2fpnc_5fpoint_2eproto();
  ::apollo::localization::protobuf_AddDesc_localization_2flocalization_2eproto();
  ::apollo::hdmap::protobuf_AddDesc_map_2fmap_2eproto();
  ::apollo::perception::protobuf_AddDesc_perception_2fperception_5fobstacle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!map/relative_map/navigation.proto\022\023apo"
    "llo.relative_map\032\023common/header.proto\032\026c"
    "ommon/pnc_point.proto\032\037localization/loca"
    "lization.proto\032\rmap/map.proto\032$perceptio"
    "n/perception_obstacle.proto\"J\n\016Navigatio"
    "nPath\022!\n\004path\030\001 \001(\0132\023.apollo.common.Path"
    "\022\025\n\rpath_priority\030\002 \001(\r\"u\n\016NavigationInf"
    "o\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header"
    "\022<\n\017navigation_path\030\002 \003(\0132#.apollo.relat"
    "ive_map.NavigationPath\"\355\002\n\006MapMsg\022%\n\006hea"
    "der\030\001 \001(\0132\025.apollo.common.Header\022 \n\005hdma"
    "p\030\002 \001(\0132\021.apollo.hdmap.Map\022H\n\017navigation"
    "_path\030\003 \003(\0132/.apollo.relative_map.MapMsg"
    ".NavigationPathEntry\0223\n\013lane_marker\030\004 \001("
    "\0132\036.apollo.perception.LaneMarkers\022\?\n\014loc"
    "alization\030\005 \001(\0132).apollo.localization.Lo"
    "calizationEstimate\032Z\n\023NavigationPathEntr"
    "y\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.apollo.r"
    "elative_map.NavigationPath:\0028\001", 750);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map/relative_map/navigation.proto", &protobuf_RegisterTypes);
  NavigationPath::default_instance_ = new NavigationPath();
  NavigationInfo::default_instance_ = new NavigationInfo();
  MapMsg::default_instance_ = new MapMsg();
  NavigationPath::default_instance_->InitAsDefaultInstance();
  NavigationInfo::default_instance_->InitAsDefaultInstance();
  MapMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2frelative_5fmap_2fnavigation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2frelative_5fmap_2fnavigation_2eproto {
  StaticDescriptorInitializer_map_2frelative_5fmap_2fnavigation_2eproto() {
    protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto();
  }
} static_descriptor_initializer_map_2frelative_5fmap_2fnavigation_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationPath::kPathFieldNumber;
const int NavigationPath::kPathPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationPath::NavigationPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationPath)
}

void NavigationPath::InitAsDefaultInstance() {
  path_ = const_cast< ::apollo::common::Path*>(&::apollo::common::Path::default_instance());
}

NavigationPath::NavigationPath(const NavigationPath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationPath)
}

void NavigationPath::SharedCtor() {
  _cached_size_ = 0;
  path_ = NULL;
  path_priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavigationPath::~NavigationPath() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationPath)
  SharedDtor();
}

void NavigationPath::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
  }
}

void NavigationPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationPath_descriptor_;
}

const NavigationPath& NavigationPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto();
  return *default_instance_;
}

NavigationPath* NavigationPath::default_instance_ = NULL;

NavigationPath* NavigationPath::New(::google::protobuf::Arena* arena) const {
  NavigationPath* n = new NavigationPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationPath)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path()) {
      if (path_ != NULL) path_->::apollo::common::Path::Clear();
    }
    path_priority_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NavigationPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.NavigationPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Path path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_path_priority;
        break;
      }

      // optional uint32 path_priority = 2;
      case 2: {
        if (tag == 16) {
         parse_path_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_priority_)));
          set_has_path_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.NavigationPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.NavigationPath)
  return false;
#undef DO_
}

void NavigationPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.NavigationPath)
  // optional .apollo.common.Path path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // optional uint32 path_priority = 2;
  if (has_path_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->path_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.NavigationPath)
}

::google::protobuf::uint8* NavigationPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationPath)
  // optional .apollo.common.Path path = 1;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // optional uint32 path_priority = 2;
  if (has_path_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->path_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationPath)
  return target;
}

int NavigationPath::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationPath)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Path path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_);
    }

    // optional uint32 path_priority = 2;
    if (has_path_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path_priority());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NavigationPath* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationPath)
    MergeFrom(*source);
  }
}

void NavigationPath::MergeFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      mutable_path()->::apollo::common::Path::MergeFrom(from.path());
    }
    if (from.has_path_priority()) {
      set_path_priority(from.path_priority());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NavigationPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPath::CopyFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPath::IsInitialized() const {

  return true;
}

void NavigationPath::Swap(NavigationPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationPath::InternalSwap(NavigationPath* other) {
  std::swap(path_, other->path_);
  std::swap(path_priority_, other->path_priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavigationPath_descriptor_;
  metadata.reflection = NavigationPath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationPath

// optional .apollo.common.Path path = 1;
bool NavigationPath::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigationPath::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigationPath::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigationPath::clear_path() {
  if (path_ != NULL) path_->::apollo::common::Path::Clear();
  clear_has_path();
}
const ::apollo::common::Path& NavigationPath::path() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationPath.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::apollo::common::Path* NavigationPath::mutable_path() {
  set_has_path();
  if (path_ == NULL) {
    path_ = new ::apollo::common::Path;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigationPath.path)
  return path_;
}
::apollo::common::Path* NavigationPath::release_path() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.NavigationPath.path)
  clear_has_path();
  ::apollo::common::Path* temp = path_;
  path_ = NULL;
  return temp;
}
void NavigationPath::set_allocated_path(::apollo::common::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    set_has_path();
  } else {
    clear_has_path();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.NavigationPath.path)
}

// optional uint32 path_priority = 2;
bool NavigationPath::has_path_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NavigationPath::set_has_path_priority() {
  _has_bits_[0] |= 0x00000002u;
}
void NavigationPath::clear_has_path_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
void NavigationPath::clear_path_priority() {
  path_priority_ = 0u;
  clear_has_path_priority();
}
 ::google::protobuf::uint32 NavigationPath::path_priority() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationPath.path_priority)
  return path_priority_;
}
 void NavigationPath::set_path_priority(::google::protobuf::uint32 value) {
  set_has_path_priority();
  path_priority_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationPath.path_priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationInfo::kHeaderFieldNumber;
const int NavigationInfo::kNavigationPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationInfo::NavigationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationInfo)
}

void NavigationInfo::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

NavigationInfo::NavigationInfo(const NavigationInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationInfo)
}

void NavigationInfo::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavigationInfo::~NavigationInfo() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationInfo)
  SharedDtor();
}

void NavigationInfo::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void NavigationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationInfo_descriptor_;
}

const NavigationInfo& NavigationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto();
  return *default_instance_;
}

NavigationInfo* NavigationInfo::default_instance_ = NULL;

NavigationInfo* NavigationInfo::New(::google::protobuf::Arena* arena) const {
  NavigationInfo* n = new NavigationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationInfo)
  if (has_header()) {
    if (header_ != NULL) header_->::apollo::common::Header::Clear();
  }
  navigation_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NavigationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.NavigationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_navigation_path;
        break;
      }

      // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
      case 2: {
        if (tag == 18) {
         parse_navigation_path:
          DO_(input->IncrementRecursionDepth());
         parse_loop_navigation_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_navigation_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_navigation_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.NavigationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.NavigationInfo)
  return false;
#undef DO_
}

void NavigationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.NavigationInfo)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  for (unsigned int i = 0, n = this->navigation_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->navigation_path(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.NavigationInfo)
}

::google::protobuf::uint8* NavigationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationInfo)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  for (unsigned int i = 0, n = this->navigation_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->navigation_path(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationInfo)
  return target;
}

int NavigationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationInfo)
  int total_size = 0;

  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  total_size += 1 * this->navigation_path_size();
  for (int i = 0; i < this->navigation_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->navigation_path(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NavigationInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationInfo)
    MergeFrom(*source);
  }
}

void NavigationInfo::MergeFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  navigation_path_.MergeFrom(from.navigation_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NavigationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationInfo::CopyFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationInfo::IsInitialized() const {

  return true;
}

void NavigationInfo::Swap(NavigationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationInfo::InternalSwap(NavigationInfo* other) {
  std::swap(header_, other->header_);
  navigation_path_.UnsafeArenaSwap(&other->navigation_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavigationInfo_descriptor_;
  metadata.reflection = NavigationInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationInfo

// optional .apollo.common.Header header = 1;
bool NavigationInfo::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigationInfo::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigationInfo::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigationInfo::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& NavigationInfo::header() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* NavigationInfo::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigationInfo.header)
  return header_;
}
::apollo::common::Header* NavigationInfo::release_header() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.NavigationInfo.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void NavigationInfo::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.NavigationInfo.header)
}

// repeated .apollo.relative_map.NavigationPath navigation_path = 2;
int NavigationInfo::navigation_path_size() const {
  return navigation_path_.size();
}
void NavigationInfo::clear_navigation_path() {
  navigation_path_.Clear();
}
const ::apollo::relative_map::NavigationPath& NavigationInfo::navigation_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Get(index);
}
::apollo::relative_map::NavigationPath* NavigationInfo::mutable_navigation_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Mutable(index);
}
::apollo::relative_map::NavigationPath* NavigationInfo::add_navigation_path() {
  // @@protoc_insertion_point(field_add:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::relative_map::NavigationPath >*
NavigationInfo::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.relative_map.NavigationInfo.navigation_path)
  return &navigation_path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::relative_map::NavigationPath >&
NavigationInfo::navigation_path() const {
  // @@protoc_insertion_point(field_list:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapMsg::kHeaderFieldNumber;
const int MapMsg::kHdmapFieldNumber;
const int MapMsg::kNavigationPathFieldNumber;
const int MapMsg::kLaneMarkerFieldNumber;
const int MapMsg::kLocalizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapMsg::MapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.MapMsg)
}

void MapMsg::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  hdmap_ = const_cast< ::apollo::hdmap::Map*>(&::apollo::hdmap::Map::default_instance());
  lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(&::apollo::perception::LaneMarkers::default_instance());
  localization_ = const_cast< ::apollo::localization::LocalizationEstimate*>(&::apollo::localization::LocalizationEstimate::default_instance());
}

MapMsg::MapMsg(const MapMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapMsg)
}

void MapMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  hdmap_ = NULL;
  navigation_path_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  navigation_path_.SetEntryDescriptor(
      &::apollo::relative_map::MapMsg_NavigationPathEntry_descriptor_);
  lane_marker_ = NULL;
  localization_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapMsg::~MapMsg() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapMsg)
  SharedDtor();
}

void MapMsg::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete hdmap_;
    delete lane_marker_;
    delete localization_;
  }
}

void MapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapMsg_descriptor_;
}

const MapMsg& MapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2frelative_5fmap_2fnavigation_2eproto();
  return *default_instance_;
}

MapMsg* MapMsg::default_instance_ = NULL;

MapMsg* MapMsg::New(::google::protobuf::Arena* arena) const {
  MapMsg* n = new MapMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapMsg)
  if (_has_bits_[0 / 32] & 27u) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_hdmap()) {
      if (hdmap_ != NULL) hdmap_->::apollo::hdmap::Map::Clear();
    }
    if (has_lane_marker()) {
      if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
    }
    if (has_localization()) {
      if (localization_ != NULL) localization_->::apollo::localization::LocalizationEstimate::Clear();
    }
  }
  navigation_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.MapMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hdmap;
        break;
      }

      // optional .apollo.hdmap.Map hdmap = 2;
      case 2: {
        if (tag == 18) {
         parse_hdmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_navigation_path;
        break;
      }

      // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
      case 3: {
        if (tag == 26) {
         parse_navigation_path:
          DO_(input->IncrementRecursionDepth());
         parse_loop_navigation_path:
          MapMsg_NavigationPathEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::apollo::relative_map::NavigationPath,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath > > parser(&navigation_path_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.relative_map.MapMsg.NavigationPathEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_navigation_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_lane_marker;
        break;
      }

      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4: {
        if (tag == 34) {
         parse_lane_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_localization;
        break;
      }

      // optional .apollo.localization.LocalizationEstimate localization = 5;
      case 5: {
        if (tag == 42) {
         parse_localization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.MapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.MapMsg)
  return false;
#undef DO_
}

void MapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.MapMsg)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.hdmap.Map hdmap = 2;
  if (has_hdmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hdmap_, output);
  }

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  if (!this->navigation_path().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.relative_map.MapMsg.NavigationPathEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->navigation_path().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->navigation_path().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(navigation_path_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it) {
        entry.reset(navigation_path_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (has_lane_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lane_marker_, output);
  }

  // optional .apollo.localization.LocalizationEstimate localization = 5;
  if (has_localization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->localization_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.MapMsg)
}

::google::protobuf::uint8* MapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapMsg)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .apollo.hdmap.Map hdmap = 2;
  if (has_hdmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hdmap_, false, target);
  }

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  if (!this->navigation_path().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.relative_map.MapMsg.NavigationPathEntry.key");
      }
    };

    if (deterministic &&
        this->navigation_path().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->navigation_path().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(navigation_path_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it) {
        entry.reset(navigation_path_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (has_lane_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lane_marker_, false, target);
  }

  // optional .apollo.localization.LocalizationEstimate localization = 5;
  if (has_localization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->localization_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapMsg)
  return target;
}

int MapMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 27u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.hdmap.Map hdmap = 2;
    if (has_hdmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdmap_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (has_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_marker_);
    }

    // optional .apollo.localization.LocalizationEstimate localization = 5;
    if (has_localization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localization_);
    }

  }
  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  total_size += 1 * this->navigation_path_size();
  {
    ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
        it = this->navigation_path().begin();
        it != this->navigation_path().end(); ++it) {
      entry.reset(navigation_path_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.MapMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.MapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.MapMsg)
    MergeFrom(*source);
  }
}

void MapMsg::MergeFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  navigation_path_.MergeFrom(from.navigation_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_hdmap()) {
      mutable_hdmap()->::apollo::hdmap::Map::MergeFrom(from.hdmap());
    }
    if (from.has_lane_marker()) {
      mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (from.has_localization()) {
      mutable_localization()->::apollo::localization::LocalizationEstimate::MergeFrom(from.localization());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMsg::CopyFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMsg::IsInitialized() const {

  return true;
}

void MapMsg::Swap(MapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapMsg::InternalSwap(MapMsg* other) {
  std::swap(header_, other->header_);
  std::swap(hdmap_, other->hdmap_);
  navigation_path_.Swap(&other->navigation_path_);
  std::swap(lane_marker_, other->lane_marker_);
  std::swap(localization_, other->localization_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapMsg_descriptor_;
  metadata.reflection = MapMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapMsg

// optional .apollo.common.Header header = 1;
bool MapMsg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapMsg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MapMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapMsg::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& MapMsg::header() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::apollo::common::Header* MapMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.header)
  return header_;
}
::apollo::common::Header* MapMsg::release_header() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MapMsg::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.header)
}

// optional .apollo.hdmap.Map hdmap = 2;
bool MapMsg::has_hdmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapMsg::set_has_hdmap() {
  _has_bits_[0] |= 0x00000002u;
}
void MapMsg::clear_has_hdmap() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapMsg::clear_hdmap() {
  if (hdmap_ != NULL) hdmap_->::apollo::hdmap::Map::Clear();
  clear_has_hdmap();
}
const ::apollo::hdmap::Map& MapMsg::hdmap() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.hdmap)
  return hdmap_ != NULL ? *hdmap_ : *default_instance_->hdmap_;
}
::apollo::hdmap::Map* MapMsg::mutable_hdmap() {
  set_has_hdmap();
  if (hdmap_ == NULL) {
    hdmap_ = new ::apollo::hdmap::Map;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.hdmap)
  return hdmap_;
}
::apollo::hdmap::Map* MapMsg::release_hdmap() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.hdmap)
  clear_has_hdmap();
  ::apollo::hdmap::Map* temp = hdmap_;
  hdmap_ = NULL;
  return temp;
}
void MapMsg::set_allocated_hdmap(::apollo::hdmap::Map* hdmap) {
  delete hdmap_;
  hdmap_ = hdmap;
  if (hdmap) {
    set_has_hdmap();
  } else {
    clear_has_hdmap();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.hdmap)
}

// map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
int MapMsg::navigation_path_size() const {
  return navigation_path_.size();
}
void MapMsg::clear_navigation_path() {
  navigation_path_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >&
MapMsg::navigation_path() const {
  // @@protoc_insertion_point(field_map:apollo.relative_map.MapMsg.navigation_path)
  return navigation_path_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >*
MapMsg::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_map:apollo.relative_map.MapMsg.navigation_path)
  return navigation_path_.MutableMap();
}

// optional .apollo.perception.LaneMarkers lane_marker = 4;
bool MapMsg::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MapMsg::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000008u;
}
void MapMsg::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000008u;
}
void MapMsg::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
  clear_has_lane_marker();
}
const ::apollo::perception::LaneMarkers& MapMsg::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_ : *default_instance_->lane_marker_;
}
::apollo::perception::LaneMarkers* MapMsg::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::apollo::perception::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.lane_marker)
  return lane_marker_;
}
::apollo::perception::LaneMarkers* MapMsg::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.lane_marker)
  clear_has_lane_marker();
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
void MapMsg::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.lane_marker)
}

// optional .apollo.localization.LocalizationEstimate localization = 5;
bool MapMsg::has_localization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MapMsg::set_has_localization() {
  _has_bits_[0] |= 0x00000010u;
}
void MapMsg::clear_has_localization() {
  _has_bits_[0] &= ~0x00000010u;
}
void MapMsg::clear_localization() {
  if (localization_ != NULL) localization_->::apollo::localization::LocalizationEstimate::Clear();
  clear_has_localization();
}
const ::apollo::localization::LocalizationEstimate& MapMsg::localization() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.localization)
  return localization_ != NULL ? *localization_ : *default_instance_->localization_;
}
::apollo::localization::LocalizationEstimate* MapMsg::mutable_localization() {
  set_has_localization();
  if (localization_ == NULL) {
    localization_ = new ::apollo::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.localization)
  return localization_;
}
::apollo::localization::LocalizationEstimate* MapMsg::release_localization() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.localization)
  clear_has_localization();
  ::apollo::localization::LocalizationEstimate* temp = localization_;
  localization_ = NULL;
  return temp;
}
void MapMsg::set_allocated_localization(::apollo::localization::LocalizationEstimate* localization) {
  delete localization_;
  localization_ = localization;
  if (localization) {
    set_has_localization();
  } else {
    clear_has_localization();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.localization)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
