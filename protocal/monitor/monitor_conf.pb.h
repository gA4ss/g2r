// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor/monitor_conf.proto

#ifndef PROTOBUF_monitor_2fmonitor_5fconf_2eproto__INCLUDED
#define PROTOBUF_monitor_2fmonitor_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/adapters/adapter_config.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace monitor {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

class MonitorConf;
class MonitorConf_HardwareConf;
class MonitorConf_ModuleConf;
class ProcessConf;
class ProcessStatus;
class ResourceConf;
class ResourceConf_DirSpace;
class TopicConf;
class TopicStatus;

// ===================================================================

class ProcessConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.ProcessConf) */ {
 public:
  ProcessConf();
  virtual ~ProcessConf();

  ProcessConf(const ProcessConf& from);

  inline ProcessConf& operator=(const ProcessConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessConf& default_instance();

  void Swap(ProcessConf* other);

  // implements Message ----------------------------------------------

  inline ProcessConf* New() const { return New(NULL); }

  ProcessConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessConf& from);
  void MergeFrom(const ProcessConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string process_cmd_keywords = 1;
  int process_cmd_keywords_size() const;
  void clear_process_cmd_keywords();
  static const int kProcessCmdKeywordsFieldNumber = 1;
  const ::std::string& process_cmd_keywords(int index) const;
  ::std::string* mutable_process_cmd_keywords(int index);
  void set_process_cmd_keywords(int index, const ::std::string& value);
  void set_process_cmd_keywords(int index, const char* value);
  void set_process_cmd_keywords(int index, const char* value, size_t size);
  ::std::string* add_process_cmd_keywords();
  void add_process_cmd_keywords(const ::std::string& value);
  void add_process_cmd_keywords(const char* value);
  void add_process_cmd_keywords(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& process_cmd_keywords() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_process_cmd_keywords();

  // @@protoc_insertion_point(class_scope:apollo.monitor.ProcessConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> process_cmd_keywords_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static ProcessConf* default_instance_;
};
// -------------------------------------------------------------------

class ProcessStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.ProcessStatus) */ {
 public:
  ProcessStatus();
  virtual ~ProcessStatus();

  ProcessStatus(const ProcessStatus& from);

  inline ProcessStatus& operator=(const ProcessStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessStatus& default_instance();

  void Swap(ProcessStatus* other);

  // implements Message ----------------------------------------------

  inline ProcessStatus* New() const { return New(NULL); }

  ProcessStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessStatus& from);
  void MergeFrom(const ProcessStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool running = 1;
  bool has_running() const;
  void clear_running();
  static const int kRunningFieldNumber = 1;
  bool running() const;
  void set_running(bool value);

  // @@protoc_insertion_point(class_scope:apollo.monitor.ProcessStatus)
 private:
  inline void set_has_running();
  inline void clear_has_running();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool running_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static ProcessStatus* default_instance_;
};
// -------------------------------------------------------------------

class TopicConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.TopicConf) */ {
 public:
  TopicConf();
  virtual ~TopicConf();

  TopicConf(const TopicConf& from);

  inline TopicConf& operator=(const TopicConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicConf& default_instance();

  void Swap(TopicConf* other);

  // implements Message ----------------------------------------------

  inline TopicConf* New() const { return New(NULL); }

  TopicConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicConf& from);
  void MergeFrom(const TopicConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::common::adapter::AdapterConfig_MessageType type() const;
  void set_type(::apollo::common::adapter::AdapterConfig_MessageType value);

  // optional double acceptable_delay = 2 [default = 3];
  bool has_acceptable_delay() const;
  void clear_acceptable_delay();
  static const int kAcceptableDelayFieldNumber = 2;
  double acceptable_delay() const;
  void set_acceptable_delay(double value);

  // @@protoc_insertion_point(class_scope:apollo.monitor.TopicConf)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_acceptable_delay();
  inline void clear_has_acceptable_delay();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double acceptable_delay_;
  int type_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static TopicConf* default_instance_;
};
// -------------------------------------------------------------------

class TopicStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.TopicStatus) */ {
 public:
  TopicStatus();
  virtual ~TopicStatus();

  TopicStatus(const TopicStatus& from);

  inline TopicStatus& operator=(const TopicStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicStatus& default_instance();

  void Swap(TopicStatus* other);

  // implements Message ----------------------------------------------

  inline TopicStatus* New() const { return New(NULL); }

  TopicStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicStatus& from);
  void MergeFrom(const TopicStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double message_delay = 1;
  bool has_message_delay() const;
  void clear_message_delay();
  static const int kMessageDelayFieldNumber = 1;
  double message_delay() const;
  void set_message_delay(double value);

  // @@protoc_insertion_point(class_scope:apollo.monitor.TopicStatus)
 private:
  inline void set_has_message_delay();
  inline void clear_has_message_delay();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double message_delay_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static TopicStatus* default_instance_;
};
// -------------------------------------------------------------------

class ResourceConf_DirSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.ResourceConf.DirSpace) */ {
 public:
  ResourceConf_DirSpace();
  virtual ~ResourceConf_DirSpace();

  ResourceConf_DirSpace(const ResourceConf_DirSpace& from);

  inline ResourceConf_DirSpace& operator=(const ResourceConf_DirSpace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceConf_DirSpace& default_instance();

  void Swap(ResourceConf_DirSpace* other);

  // implements Message ----------------------------------------------

  inline ResourceConf_DirSpace* New() const { return New(NULL); }

  ResourceConf_DirSpace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceConf_DirSpace& from);
  void MergeFrom(const ResourceConf_DirSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceConf_DirSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional int32 min_available_gb = 2;
  bool has_min_available_gb() const;
  void clear_min_available_gb();
  static const int kMinAvailableGbFieldNumber = 2;
  ::google::protobuf::int32 min_available_gb() const;
  void set_min_available_gb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.monitor.ResourceConf.DirSpace)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_min_available_gb();
  inline void clear_has_min_available_gb();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 min_available_gb_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static ResourceConf_DirSpace* default_instance_;
};
// -------------------------------------------------------------------

class ResourceConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.ResourceConf) */ {
 public:
  ResourceConf();
  virtual ~ResourceConf();

  ResourceConf(const ResourceConf& from);

  inline ResourceConf& operator=(const ResourceConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceConf& default_instance();

  void Swap(ResourceConf* other);

  // implements Message ----------------------------------------------

  inline ResourceConf* New() const { return New(NULL); }

  ResourceConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceConf& from);
  void MergeFrom(const ResourceConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResourceConf_DirSpace DirSpace;

  // accessors -------------------------------------------------------

  // repeated .apollo.monitor.ResourceConf.DirSpace dir_spaces = 1;
  int dir_spaces_size() const;
  void clear_dir_spaces();
  static const int kDirSpacesFieldNumber = 1;
  const ::apollo::monitor::ResourceConf_DirSpace& dir_spaces(int index) const;
  ::apollo::monitor::ResourceConf_DirSpace* mutable_dir_spaces(int index);
  ::apollo::monitor::ResourceConf_DirSpace* add_dir_spaces();
  ::google::protobuf::RepeatedPtrField< ::apollo::monitor::ResourceConf_DirSpace >*
      mutable_dir_spaces();
  const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::ResourceConf_DirSpace >&
      dir_spaces() const;

  // @@protoc_insertion_point(class_scope:apollo.monitor.ResourceConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::monitor::ResourceConf_DirSpace > dir_spaces_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static ResourceConf* default_instance_;
};
// -------------------------------------------------------------------

class MonitorConf_ModuleConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.MonitorConf.ModuleConf) */ {
 public:
  MonitorConf_ModuleConf();
  virtual ~MonitorConf_ModuleConf();

  MonitorConf_ModuleConf(const MonitorConf_ModuleConf& from);

  inline MonitorConf_ModuleConf& operator=(const MonitorConf_ModuleConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorConf_ModuleConf& default_instance();

  void Swap(MonitorConf_ModuleConf* other);

  // implements Message ----------------------------------------------

  inline MonitorConf_ModuleConf* New() const { return New(NULL); }

  MonitorConf_ModuleConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonitorConf_ModuleConf& from);
  void MergeFrom(const MonitorConf_ModuleConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MonitorConf_ModuleConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .apollo.monitor.ProcessConf process_conf = 2;
  bool has_process_conf() const;
  void clear_process_conf();
  static const int kProcessConfFieldNumber = 2;
  const ::apollo::monitor::ProcessConf& process_conf() const;
  ::apollo::monitor::ProcessConf* mutable_process_conf();
  ::apollo::monitor::ProcessConf* release_process_conf();
  void set_allocated_process_conf(::apollo::monitor::ProcessConf* process_conf);

  // optional .apollo.monitor.TopicConf topic_conf = 3;
  bool has_topic_conf() const;
  void clear_topic_conf();
  static const int kTopicConfFieldNumber = 3;
  const ::apollo::monitor::TopicConf& topic_conf() const;
  ::apollo::monitor::TopicConf* mutable_topic_conf();
  ::apollo::monitor::TopicConf* release_topic_conf();
  void set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf);

  // @@protoc_insertion_point(class_scope:apollo.monitor.MonitorConf.ModuleConf)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_process_conf();
  inline void clear_has_process_conf();
  inline void set_has_topic_conf();
  inline void clear_has_topic_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::apollo::monitor::ProcessConf* process_conf_;
  ::apollo::monitor::TopicConf* topic_conf_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static MonitorConf_ModuleConf* default_instance_;
};
// -------------------------------------------------------------------

class MonitorConf_HardwareConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.MonitorConf.HardwareConf) */ {
 public:
  MonitorConf_HardwareConf();
  virtual ~MonitorConf_HardwareConf();

  MonitorConf_HardwareConf(const MonitorConf_HardwareConf& from);

  inline MonitorConf_HardwareConf& operator=(const MonitorConf_HardwareConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorConf_HardwareConf& default_instance();

  void Swap(MonitorConf_HardwareConf* other);

  // implements Message ----------------------------------------------

  inline MonitorConf_HardwareConf* New() const { return New(NULL); }

  MonitorConf_HardwareConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonitorConf_HardwareConf& from);
  void MergeFrom(const MonitorConf_HardwareConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MonitorConf_HardwareConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .apollo.monitor.TopicConf topic_conf = 2;
  bool has_topic_conf() const;
  void clear_topic_conf();
  static const int kTopicConfFieldNumber = 2;
  const ::apollo::monitor::TopicConf& topic_conf() const;
  ::apollo::monitor::TopicConf* mutable_topic_conf();
  ::apollo::monitor::TopicConf* release_topic_conf();
  void set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf);

  // @@protoc_insertion_point(class_scope:apollo.monitor.MonitorConf.HardwareConf)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_topic_conf();
  inline void clear_has_topic_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::apollo::monitor::TopicConf* topic_conf_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static MonitorConf_HardwareConf* default_instance_;
};
// -------------------------------------------------------------------

class MonitorConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.MonitorConf) */ {
 public:
  MonitorConf();
  virtual ~MonitorConf();

  MonitorConf(const MonitorConf& from);

  inline MonitorConf& operator=(const MonitorConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorConf& default_instance();

  void Swap(MonitorConf* other);

  // implements Message ----------------------------------------------

  inline MonitorConf* New() const { return New(NULL); }

  MonitorConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonitorConf& from);
  void MergeFrom(const MonitorConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MonitorConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MonitorConf_ModuleConf ModuleConf;
  typedef MonitorConf_HardwareConf HardwareConf;

  // accessors -------------------------------------------------------

  // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
  int modules_size() const;
  void clear_modules();
  static const int kModulesFieldNumber = 1;
  const ::apollo::monitor::MonitorConf_ModuleConf& modules(int index) const;
  ::apollo::monitor::MonitorConf_ModuleConf* mutable_modules(int index);
  ::apollo::monitor::MonitorConf_ModuleConf* add_modules();
  ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >*
      mutable_modules();
  const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >&
      modules() const;

  // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
  int hardware_size() const;
  void clear_hardware();
  static const int kHardwareFieldNumber = 2;
  const ::apollo::monitor::MonitorConf_HardwareConf& hardware(int index) const;
  ::apollo::monitor::MonitorConf_HardwareConf* mutable_hardware(int index);
  ::apollo::monitor::MonitorConf_HardwareConf* add_hardware();
  ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >*
      mutable_hardware();
  const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >&
      hardware() const;

  // optional string online_report_endpoint = 3;
  bool has_online_report_endpoint() const;
  void clear_online_report_endpoint();
  static const int kOnlineReportEndpointFieldNumber = 3;
  const ::std::string& online_report_endpoint() const;
  void set_online_report_endpoint(const ::std::string& value);
  void set_online_report_endpoint(const char* value);
  void set_online_report_endpoint(const char* value, size_t size);
  ::std::string* mutable_online_report_endpoint();
  ::std::string* release_online_report_endpoint();
  void set_allocated_online_report_endpoint(::std::string* online_report_endpoint);

  // optional .apollo.monitor.ResourceConf resource_conf = 4;
  bool has_resource_conf() const;
  void clear_resource_conf();
  static const int kResourceConfFieldNumber = 4;
  const ::apollo::monitor::ResourceConf& resource_conf() const;
  ::apollo::monitor::ResourceConf* mutable_resource_conf();
  ::apollo::monitor::ResourceConf* release_resource_conf();
  void set_allocated_resource_conf(::apollo::monitor::ResourceConf* resource_conf);

  // @@protoc_insertion_point(class_scope:apollo.monitor.MonitorConf)
 private:
  inline void set_has_online_report_endpoint();
  inline void clear_has_online_report_endpoint();
  inline void set_has_resource_conf();
  inline void clear_has_resource_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf > modules_;
  ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf > hardware_;
  ::google::protobuf::internal::ArenaStringPtr online_report_endpoint_;
  ::apollo::monitor::ResourceConf* resource_conf_;
  friend void  protobuf_AddDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_AssignDesc_monitor_2fmonitor_5fconf_2eproto();
  friend void protobuf_ShutdownFile_monitor_2fmonitor_5fconf_2eproto();

  void InitAsDefaultInstance();
  static MonitorConf* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessConf

// repeated string process_cmd_keywords = 1;
inline int ProcessConf::process_cmd_keywords_size() const {
  return process_cmd_keywords_.size();
}
inline void ProcessConf::clear_process_cmd_keywords() {
  process_cmd_keywords_.Clear();
}
inline const ::std::string& ProcessConf::process_cmd_keywords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_.Get(index);
}
inline ::std::string* ProcessConf::mutable_process_cmd_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_.Mutable(index);
}
inline void ProcessConf::set_process_cmd_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.monitor.ProcessConf.process_cmd_keywords)
  process_cmd_keywords_.Mutable(index)->assign(value);
}
inline void ProcessConf::set_process_cmd_keywords(int index, const char* value) {
  process_cmd_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::set_process_cmd_keywords(int index, const char* value, size_t size) {
  process_cmd_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline ::std::string* ProcessConf::add_process_cmd_keywords() {
  // @@protoc_insertion_point(field_add_mutable:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_.Add();
}
inline void ProcessConf::add_process_cmd_keywords(const ::std::string& value) {
  process_cmd_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::add_process_cmd_keywords(const char* value) {
  process_cmd_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::add_process_cmd_keywords(const char* value, size_t size) {
  process_cmd_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessConf::process_cmd_keywords() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.ProcessConf.process_cmd_keywords)
  return process_cmd_keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessConf::mutable_process_cmd_keywords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.ProcessConf.process_cmd_keywords)
  return &process_cmd_keywords_;
}

// -------------------------------------------------------------------

// ProcessStatus

// optional bool running = 1;
inline bool ProcessStatus::has_running() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessStatus::set_has_running() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessStatus::clear_has_running() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessStatus::clear_running() {
  running_ = false;
  clear_has_running();
}
inline bool ProcessStatus::running() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ProcessStatus.running)
  return running_;
}
inline void ProcessStatus::set_running(bool value) {
  set_has_running();
  running_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.ProcessStatus.running)
}

// -------------------------------------------------------------------

// TopicConf

// optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
inline bool TopicConf::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicConf::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicConf::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicConf::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::apollo::common::adapter::AdapterConfig_MessageType TopicConf::type() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicConf.type)
  return static_cast< ::apollo::common::adapter::AdapterConfig_MessageType >(type_);
}
inline void TopicConf::set_type(::apollo::common::adapter::AdapterConfig_MessageType value) {
  assert(::apollo::common::adapter::AdapterConfig_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicConf.type)
}

// optional double acceptable_delay = 2 [default = 3];
inline bool TopicConf::has_acceptable_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicConf::set_has_acceptable_delay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicConf::clear_has_acceptable_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicConf::clear_acceptable_delay() {
  acceptable_delay_ = 3;
  clear_has_acceptable_delay();
}
inline double TopicConf::acceptable_delay() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicConf.acceptable_delay)
  return acceptable_delay_;
}
inline void TopicConf::set_acceptable_delay(double value) {
  set_has_acceptable_delay();
  acceptable_delay_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicConf.acceptable_delay)
}

// -------------------------------------------------------------------

// TopicStatus

// optional double message_delay = 1;
inline bool TopicStatus::has_message_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicStatus::set_has_message_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicStatus::clear_has_message_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicStatus::clear_message_delay() {
  message_delay_ = 0;
  clear_has_message_delay();
}
inline double TopicStatus::message_delay() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicStatus.message_delay)
  return message_delay_;
}
inline void TopicStatus::set_message_delay(double value) {
  set_has_message_delay();
  message_delay_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicStatus.message_delay)
}

// -------------------------------------------------------------------

// ResourceConf_DirSpace

// optional string path = 1;
inline bool ResourceConf_DirSpace::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceConf_DirSpace::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceConf_DirSpace::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceConf_DirSpace::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& ResourceConf_DirSpace::path() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ResourceConf.DirSpace.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceConf_DirSpace::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.ResourceConf.DirSpace.path)
}
inline void ResourceConf_DirSpace::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.ResourceConf.DirSpace.path)
}
inline void ResourceConf_DirSpace::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.ResourceConf.DirSpace.path)
}
inline ::std::string* ResourceConf_DirSpace::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ResourceConf.DirSpace.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceConf_DirSpace::release_path() {
  // @@protoc_insertion_point(field_release:apollo.monitor.ResourceConf.DirSpace.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceConf_DirSpace::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.ResourceConf.DirSpace.path)
}

// optional int32 min_available_gb = 2;
inline bool ResourceConf_DirSpace::has_min_available_gb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceConf_DirSpace::set_has_min_available_gb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceConf_DirSpace::clear_has_min_available_gb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceConf_DirSpace::clear_min_available_gb() {
  min_available_gb_ = 0;
  clear_has_min_available_gb();
}
inline ::google::protobuf::int32 ResourceConf_DirSpace::min_available_gb() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ResourceConf.DirSpace.min_available_gb)
  return min_available_gb_;
}
inline void ResourceConf_DirSpace::set_min_available_gb(::google::protobuf::int32 value) {
  set_has_min_available_gb();
  min_available_gb_ = value;
  // @@protoc_insertion_point(field_set:apollo.monitor.ResourceConf.DirSpace.min_available_gb)
}

// -------------------------------------------------------------------

// ResourceConf

// repeated .apollo.monitor.ResourceConf.DirSpace dir_spaces = 1;
inline int ResourceConf::dir_spaces_size() const {
  return dir_spaces_.size();
}
inline void ResourceConf::clear_dir_spaces() {
  dir_spaces_.Clear();
}
inline const ::apollo::monitor::ResourceConf_DirSpace& ResourceConf::dir_spaces(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_.Get(index);
}
inline ::apollo::monitor::ResourceConf_DirSpace* ResourceConf::mutable_dir_spaces(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_.Mutable(index);
}
inline ::apollo::monitor::ResourceConf_DirSpace* ResourceConf::add_dir_spaces() {
  // @@protoc_insertion_point(field_add:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::monitor::ResourceConf_DirSpace >*
ResourceConf::mutable_dir_spaces() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.ResourceConf.dir_spaces)
  return &dir_spaces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::ResourceConf_DirSpace >&
ResourceConf::dir_spaces() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.ResourceConf.dir_spaces)
  return dir_spaces_;
}

// -------------------------------------------------------------------

// MonitorConf_ModuleConf

// optional string name = 1;
inline bool MonitorConf_ModuleConf::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonitorConf_ModuleConf::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonitorConf_ModuleConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonitorConf_ModuleConf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MonitorConf_ModuleConf::name() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorConf_ModuleConf::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.ModuleConf.name)
}
inline void MonitorConf_ModuleConf::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.MonitorConf.ModuleConf.name)
}
inline void MonitorConf_ModuleConf::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.MonitorConf.ModuleConf.name)
}
inline ::std::string* MonitorConf_ModuleConf::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorConf_ModuleConf::release_name() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorConf_ModuleConf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.name)
}

// optional .apollo.monitor.ProcessConf process_conf = 2;
inline bool MonitorConf_ModuleConf::has_process_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonitorConf_ModuleConf::set_has_process_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonitorConf_ModuleConf::clear_has_process_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonitorConf_ModuleConf::clear_process_conf() {
  if (process_conf_ != NULL) process_conf_->::apollo::monitor::ProcessConf::Clear();
  clear_has_process_conf();
}
inline const ::apollo::monitor::ProcessConf& MonitorConf_ModuleConf::process_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  return process_conf_ != NULL ? *process_conf_ : *default_instance_->process_conf_;
}
inline ::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::mutable_process_conf() {
  set_has_process_conf();
  if (process_conf_ == NULL) {
    process_conf_ = new ::apollo::monitor::ProcessConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  return process_conf_;
}
inline ::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::release_process_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  clear_has_process_conf();
  ::apollo::monitor::ProcessConf* temp = process_conf_;
  process_conf_ = NULL;
  return temp;
}
inline void MonitorConf_ModuleConf::set_allocated_process_conf(::apollo::monitor::ProcessConf* process_conf) {
  delete process_conf_;
  process_conf_ = process_conf;
  if (process_conf) {
    set_has_process_conf();
  } else {
    clear_has_process_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.process_conf)
}

// optional .apollo.monitor.TopicConf topic_conf = 3;
inline bool MonitorConf_ModuleConf::has_topic_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonitorConf_ModuleConf::set_has_topic_conf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonitorConf_ModuleConf::clear_has_topic_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonitorConf_ModuleConf::clear_topic_conf() {
  if (topic_conf_ != NULL) topic_conf_->::apollo::monitor::TopicConf::Clear();
  clear_has_topic_conf();
}
inline const ::apollo::monitor::TopicConf& MonitorConf_ModuleConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  return topic_conf_ != NULL ? *topic_conf_ : *default_instance_->topic_conf_;
}
inline ::apollo::monitor::TopicConf* MonitorConf_ModuleConf::mutable_topic_conf() {
  set_has_topic_conf();
  if (topic_conf_ == NULL) {
    topic_conf_ = new ::apollo::monitor::TopicConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  return topic_conf_;
}
inline ::apollo::monitor::TopicConf* MonitorConf_ModuleConf::release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  clear_has_topic_conf();
  ::apollo::monitor::TopicConf* temp = topic_conf_;
  topic_conf_ = NULL;
  return temp;
}
inline void MonitorConf_ModuleConf::set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf) {
  delete topic_conf_;
  topic_conf_ = topic_conf;
  if (topic_conf) {
    set_has_topic_conf();
  } else {
    clear_has_topic_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
}

// -------------------------------------------------------------------

// MonitorConf_HardwareConf

// optional string name = 1;
inline bool MonitorConf_HardwareConf::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonitorConf_HardwareConf::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonitorConf_HardwareConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonitorConf_HardwareConf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MonitorConf_HardwareConf::name() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.HardwareConf.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorConf_HardwareConf::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.HardwareConf.name)
}
inline void MonitorConf_HardwareConf::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.MonitorConf.HardwareConf.name)
}
inline void MonitorConf_HardwareConf::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.MonitorConf.HardwareConf.name)
}
inline ::std::string* MonitorConf_HardwareConf::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.HardwareConf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorConf_HardwareConf::release_name() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.HardwareConf.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorConf_HardwareConf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.HardwareConf.name)
}

// optional .apollo.monitor.TopicConf topic_conf = 2;
inline bool MonitorConf_HardwareConf::has_topic_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonitorConf_HardwareConf::set_has_topic_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonitorConf_HardwareConf::clear_has_topic_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonitorConf_HardwareConf::clear_topic_conf() {
  if (topic_conf_ != NULL) topic_conf_->::apollo::monitor::TopicConf::Clear();
  clear_has_topic_conf();
}
inline const ::apollo::monitor::TopicConf& MonitorConf_HardwareConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  return topic_conf_ != NULL ? *topic_conf_ : *default_instance_->topic_conf_;
}
inline ::apollo::monitor::TopicConf* MonitorConf_HardwareConf::mutable_topic_conf() {
  set_has_topic_conf();
  if (topic_conf_ == NULL) {
    topic_conf_ = new ::apollo::monitor::TopicConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  return topic_conf_;
}
inline ::apollo::monitor::TopicConf* MonitorConf_HardwareConf::release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  clear_has_topic_conf();
  ::apollo::monitor::TopicConf* temp = topic_conf_;
  topic_conf_ = NULL;
  return temp;
}
inline void MonitorConf_HardwareConf::set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf) {
  delete topic_conf_;
  topic_conf_ = topic_conf;
  if (topic_conf) {
    set_has_topic_conf();
  } else {
    clear_has_topic_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
}

// -------------------------------------------------------------------

// MonitorConf

// repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
inline int MonitorConf::modules_size() const {
  return modules_.size();
}
inline void MonitorConf::clear_modules() {
  modules_.Clear();
}
inline const ::apollo::monitor::MonitorConf_ModuleConf& MonitorConf::modules(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.modules)
  return modules_.Get(index);
}
inline ::apollo::monitor::MonitorConf_ModuleConf* MonitorConf::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.modules)
  return modules_.Mutable(index);
}
inline ::apollo::monitor::MonitorConf_ModuleConf* MonitorConf::add_modules() {
  // @@protoc_insertion_point(field_add:apollo.monitor.MonitorConf.modules)
  return modules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >*
MonitorConf::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.MonitorConf.modules)
  return &modules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >&
MonitorConf::modules() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.MonitorConf.modules)
  return modules_;
}

// repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
inline int MonitorConf::hardware_size() const {
  return hardware_.size();
}
inline void MonitorConf::clear_hardware() {
  hardware_.Clear();
}
inline const ::apollo::monitor::MonitorConf_HardwareConf& MonitorConf::hardware(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.hardware)
  return hardware_.Get(index);
}
inline ::apollo::monitor::MonitorConf_HardwareConf* MonitorConf::mutable_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.hardware)
  return hardware_.Mutable(index);
}
inline ::apollo::monitor::MonitorConf_HardwareConf* MonitorConf::add_hardware() {
  // @@protoc_insertion_point(field_add:apollo.monitor.MonitorConf.hardware)
  return hardware_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >*
MonitorConf::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.MonitorConf.hardware)
  return &hardware_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >&
MonitorConf::hardware() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.MonitorConf.hardware)
  return hardware_;
}

// optional string online_report_endpoint = 3;
inline bool MonitorConf::has_online_report_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonitorConf::set_has_online_report_endpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonitorConf::clear_has_online_report_endpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonitorConf::clear_online_report_endpoint() {
  online_report_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_online_report_endpoint();
}
inline const ::std::string& MonitorConf::online_report_endpoint() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.online_report_endpoint)
  return online_report_endpoint_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorConf::set_online_report_endpoint(const ::std::string& value) {
  set_has_online_report_endpoint();
  online_report_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.online_report_endpoint)
}
inline void MonitorConf::set_online_report_endpoint(const char* value) {
  set_has_online_report_endpoint();
  online_report_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.MonitorConf.online_report_endpoint)
}
inline void MonitorConf::set_online_report_endpoint(const char* value, size_t size) {
  set_has_online_report_endpoint();
  online_report_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.MonitorConf.online_report_endpoint)
}
inline ::std::string* MonitorConf::mutable_online_report_endpoint() {
  set_has_online_report_endpoint();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.online_report_endpoint)
  return online_report_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorConf::release_online_report_endpoint() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.online_report_endpoint)
  clear_has_online_report_endpoint();
  return online_report_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorConf::set_allocated_online_report_endpoint(::std::string* online_report_endpoint) {
  if (online_report_endpoint != NULL) {
    set_has_online_report_endpoint();
  } else {
    clear_has_online_report_endpoint();
  }
  online_report_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_report_endpoint);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.online_report_endpoint)
}

// optional .apollo.monitor.ResourceConf resource_conf = 4;
inline bool MonitorConf::has_resource_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonitorConf::set_has_resource_conf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonitorConf::clear_has_resource_conf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonitorConf::clear_resource_conf() {
  if (resource_conf_ != NULL) resource_conf_->::apollo::monitor::ResourceConf::Clear();
  clear_has_resource_conf();
}
inline const ::apollo::monitor::ResourceConf& MonitorConf::resource_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.resource_conf)
  return resource_conf_ != NULL ? *resource_conf_ : *default_instance_->resource_conf_;
}
inline ::apollo::monitor::ResourceConf* MonitorConf::mutable_resource_conf() {
  set_has_resource_conf();
  if (resource_conf_ == NULL) {
    resource_conf_ = new ::apollo::monitor::ResourceConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.resource_conf)
  return resource_conf_;
}
inline ::apollo::monitor::ResourceConf* MonitorConf::release_resource_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.resource_conf)
  clear_has_resource_conf();
  ::apollo::monitor::ResourceConf* temp = resource_conf_;
  resource_conf_ = NULL;
  return temp;
}
inline void MonitorConf::set_allocated_resource_conf(::apollo::monitor::ResourceConf* resource_conf) {
  delete resource_conf_;
  resource_conf_ = resource_conf;
  if (resource_conf) {
    set_has_resource_conf();
  } else {
    clear_has_resource_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.resource_conf)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monitor_2fmonitor_5fconf_2eproto__INCLUDED
