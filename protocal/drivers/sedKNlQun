// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drivers/delphi_esr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drivers/delphi_esr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
class Esr_status9_5e8DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status9_5e8> {
} _Esr_status9_5e8_default_instance_;
class Esr_status6_5e5DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status6_5e5> {
} _Esr_status6_5e5_default_instance_;
class Esr_status5_5e4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status5_5e4> {
} _Esr_status5_5e4_default_instance_;
class Esr_status3_4e2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status3_4e2> {
} _Esr_status3_4e2_default_instance_;
class Esr_status4_4e3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status4_4e3> {
} _Esr_status4_4e3_default_instance_;
class Esr_trackmotionpower_540_MotionpowerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_trackmotionpower_540_Motionpower> {
} _Esr_trackmotionpower_540_Motionpower_default_instance_;
class Esr_trackmotionpower_540DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_trackmotionpower_540> {
} _Esr_trackmotionpower_540_default_instance_;
class Acm_inst_req_7e0DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Acm_inst_req_7e0> {
} _Acm_inst_req_7e0_default_instance_;
class Esr_track01_500DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_track01_500> {
} _Esr_track01_500_default_instance_;
class Esr_valid1_5d0DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_valid1_5d0> {
} _Esr_valid1_5d0_default_instance_;
class Esr_valid2_5d1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_valid2_5d1> {
} _Esr_valid2_5d1_default_instance_;
class Acm_inst_resp_7e4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Acm_inst_resp_7e4> {
} _Acm_inst_resp_7e4_default_instance_;
class Vehicle2_4f1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle2_4f1> {
} _Vehicle2_4f1_default_instance_;
class Vehicle1_4f0DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle1_4f0> {
} _Vehicle1_4f0_default_instance_;
class Esr_sim1_5c0DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_sim1_5c0> {
} _Esr_sim1_5c0_default_instance_;
class Esr_status1_4e0DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status1_4e0> {
} _Esr_status1_4e0_default_instance_;
class Esr_status2_4e1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status2_4e1> {
} _Esr_status2_4e1_default_instance_;
class Esr_status8_5e7DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status8_5e7> {
} _Esr_status8_5e7_default_instance_;
class Esr_status7_5e6DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esr_status7_5e6> {
} _Esr_status7_5e6_default_instance_;
class Vehicle3_5f2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle3_5f2> {
} _Vehicle3_5f2_default_instance_;
class Vehicle4_5f3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle4_5f3> {
} _Vehicle4_5f3_default_instance_;
class Vehicle5_5f4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle5_5f4> {
} _Vehicle5_5f4_default_instance_;
class Vehicle6_5f5DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle6_5f5> {
} _Vehicle6_5f5_default_instance_;
class DelphiESRDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelphiESR> {
} _DelphiESR_default_instance_;

namespace protobuf_drivers_2fdelphi_5fesr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[52];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, can_tx_path_id_.o_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, can_tx_path_id_.o_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, can_tx_filtered_xohp_.o_cipv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, can_tx_water_spray_target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, can_tx_serial_num_3rd_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, can_tx_sideslip_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status9_5e8, can_tx_avg_pwr_cwblkg_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_sw_version_dsp_3rd_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_vertical_align_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_vertical_misalignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_serv_align_updates_done_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_found_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_factory_misalignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_factory_align_status_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_factory_align_status_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_recommend_unconverge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_wave_diff_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_system_power_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_supply_n5v_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status6_5e5, can_tx_supply_1p8v_a2d_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_supply_10v_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_temp2_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_temp1_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_swbatt_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_supply_5vdx_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_supply_5va_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_supply_3p3v_a2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status5_5e4, can_tx_ignp_a2d_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status3_4e2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status3_4e2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status3_4e2, can_tx_sw_version_pld_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status3_4e2, can_tx_sw_version_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status3_4e2, can_tx_hw_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status3_4e2, can_tx_interface_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status3_4e2, can_tx_serial_num_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_truck_target_det_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_lr_only_grating_lobe_det_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_sidelobe_blockage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_partial_blockage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_path_id_.o_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_mr_lr_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_auto_align_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_rolling_count_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_path_id_fcw_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_path_id_fcw_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_path_id_cmbb_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_path_id_cmbb_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status4_4e3, can_tx_path_id_.o_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540_Motionpower, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540_Motionpower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540_Motionpower, can_tx_track_moving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540_Motionpower, can_tx_track_moving_fast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540_Motionpower, can_tx_track_moving_slow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540_Motionpower, can_tx_track_power_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540, can_tx_track_rolling_count_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540, can_tx_track_can_id_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_trackmotionpower_540, can_tx_track_motion_power_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0, command_ctr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0, command_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0,.o_word_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0,.o_word_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0,.o_byte_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_req_7e0,.o_byte_1_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_grouping_changed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_oncoming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_lat_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_bridge_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_rolling_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_range_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_range_.oel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_med_range_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_track01_500, can_tx_track_angle_),
  0,
  1,
  2,
  4,
  3,
  5,
  8,
  6,
  7,
  10,
  9,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid1_5d0, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid1_5d0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid1_5d0, can_tx_valid_lr_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid1_5d0, can_tx_valid_lr_range_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid1_5d0, can_tx_valid_lr_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid1_5d0, can_tx_valid_lr_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid1_5d0, can_tx_valid_lr_angle_),
  1,
  0,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid2_5d1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid2_5d1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid2_5d1, can_tx_valid_mr_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid2_5d1, can_tx_valid_mr_range_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid2_5d1, can_tx_valid_mr_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid2_5d1, can_tx_valid_mr_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_valid2_5d1, can_tx_valid_mr_angle_),
  1,
  0,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, data_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, data_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, data_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, data_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, data_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, rtn_cmd_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, command_return_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acm_inst_resp_7e4, pid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_volvo_short_track_roc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_mr_only_transmit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_lr_only_transmit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_high_yaw_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_clear_faults_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_use_angle_misalignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_turn_signal_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_blockage_disable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_vehicle_speed_validity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_mmr_upside_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_wiper_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_raw_data_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_radar_cmd_radiate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_grouping_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_maximum_tracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_lateral_mounting_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_angle_misalignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle2_4f1, can_rx_scan_index_ack_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_steering_angle_validity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_steering_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_steering_angle_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_steering_angle_rate_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_radius_curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_yaw_rate_validity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_vehicle_speed_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle1_4f0, can_rx_vehicle_speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_range_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_range_.oel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_lat_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_lat_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_function_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_sim1_5c0, can_rx_sim_angle_),
  0,
  1,
  2,
  3,
  5,
  4,
  7,
  6,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, can_tx_dsp_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, can_tx_comm_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, can_tx_yaw_rate_calc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, can_tx_vehicle_speed_calc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, can_tx_scan_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, can_tx_rolling_count_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status1_4e0, can_tx_radius_curvature_calc_),
  0,
  2,
  1,
  4,
  3,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_yaw_rate_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_veh_spd_comp_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_sw_version_dsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_raw_data_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_range_perf_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_overheat_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_maximum_tracks_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_internal_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_grouping_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_xcvr_operational_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_steering_angle_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status2_4e1, can_tx_rolling_count_2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status8_5e7, can_tx_history_fault_0_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esr_status7_5e6, can_tx_active_fault_1_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_serv_align_updates_need_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_serv_align_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_serv_align_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_aalign_avg_ctr_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_auto_align_converged_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_auto_align_disable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_angle_mounting_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_wheel_slip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_radar_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_radar_fov_mr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_radar_fov_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_long_.oel_validity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_long_.oel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_lat_.oel_validity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle3_5f2, can_rx_lat_.oel_),
  0,
  1,
  3,
  2,
  4,
  6,
  5,
  7,
  8,
  9,
  10,
  11,
  12,
  14,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_tgt_range_r2m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_tgt_range_m2t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_tgt_range_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_tgt_mtg_space_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_tgt_mtg_space_hor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_tgt_mtg_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_align_samp_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_align_max_nt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_align_cmd_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle4_5f3, can_rx_fac_align_cmd_1_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_yaw_rate_bias_shift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_steering_gear_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_wheelbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_distance_rear_axle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_cw_blockage_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_funnel_offset_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_funnel_offset_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_beamwidth_vert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle5_5f4, can_rx_oversteer_understeer_),
  4,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle6_5f5, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle6_5f5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle6_5f5, can_rx_inner_funnel_offset_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle6_5f5, can_rx_inner_funnel_offset_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle6_5f5, can_volvo_fa_range_max_short_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle6_5f5, can_volvo_fa_min_vspeed_short_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle6_5f5, can_volvo_fa_aalign_estimate_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status9_5e8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status6_5e5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status5_5e4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status3_4e2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status4_4e3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_trackmotionpower_540_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, acm_inst_req_7e0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_track01_500_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_valid1_5d0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_valid2_5d1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, acm_inst_resp_7e4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, vehicle2_4f1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, vehicle1_4f0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_sim1_5c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status1_4e0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status2_4e1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status8_5e7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, esr_status7_5e6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, vehicle3_5f2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, vehicle4_5f3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, vehicle5_5f4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelphiESR, vehicle6_5f5_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(Esr_status9_5e8)},
  { 19, 37, sizeof(Esr_status6_5e5)},
  { 50, 63, sizeof(Esr_status5_5e4)},
  { 71, 81, sizeof(Esr_status3_4e2)},
  { 86, 104, sizeof(Esr_status4_4e3)},
  { 117, 126, sizeof(Esr_trackmotionpower_540_Motionpower)},
  { 130, 138, sizeof(Esr_trackmotionpower_540)},
  { 141, 152, sizeof(Acm_inst_req_7e0)},
  { 158, 175, sizeof(Esr_track01_500)},
  { 187, 197, sizeof(Esr_valid1_5d0)},
  { 202, 212, sizeof(Esr_valid2_5d1)},
  { 217, 230, sizeof(Acm_inst_resp_7e4)},
  { 238, 261, sizeof(Vehicle2_4f1)},
  { 279, 294, sizeof(Vehicle1_4f0)},
  { 304, 318, sizeof(Esr_sim1_5c0)},
  { 327, 339, sizeof(Esr_status1_4e0)},
  { 346, 364, sizeof(Esr_status2_4e1)},
  { 377, 390, sizeof(Esr_status8_5e7)},
  { 398, 411, sizeof(Esr_status7_5e6)},
  { 419, 439, sizeof(Vehicle3_5f2)},
  { 454, 469, sizeof(Vehicle4_5f3)},
  { 479, 493, sizeof(Vehicle5_5f4)},
  { 502, 512, sizeof(Vehicle6_5f5)},
  { 517, 545, sizeof(DelphiESR)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status9_5e8_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status6_5e5_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status5_5e4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status3_4e2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status4_4e3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_trackmotionpower_540_Motionpower_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_trackmotionpower_540_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Acm_inst_req_7e0_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_track01_500_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_valid1_5d0_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_valid2_5d1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Acm_inst_resp_7e4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle2_4f1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle1_4f0_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_sim1_5c0_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status1_4e0_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status2_4e1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status8_5e7_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esr_status7_5e6_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle3_5f2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle4_5f3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle5_5f4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle6_5f5_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelphiESR_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "drivers/delphi_esr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

}  // namespace

void TableStruct::Shutdown() {
  _Esr_status9_5e8_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Esr_status6_5e5_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Esr_status5_5e4_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Esr_status3_4e2_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Esr_status4_4e3_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Esr_trackmotionpower_540_Motionpower_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Esr_trackmotionpower_540_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Acm_inst_req_7e0_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Esr_track01_500_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Esr_valid1_5d0_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Esr_valid2_5d1_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Acm_inst_resp_7e4_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Vehicle2_4f1_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Vehicle1_4f0_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Esr_sim1_5c0_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Esr_status1_4e0_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Esr_status2_4e1_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Esr_status8_5e7_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _Esr_status7_5e6_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _Vehicle3_5f2_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _Vehicle4_5f3_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _Vehicle5_5f4_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _Vehicle6_5f5_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _DelphiESR_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_common_2fheader_2eproto::InitDefaults();
  _Esr_status9_5e8_default_instance_.DefaultConstruct();
  _Esr_status6_5e5_default_instance_.DefaultConstruct();
  _Esr_status5_5e4_default_instance_.DefaultConstruct();
  _Esr_status3_4e2_default_instance_.DefaultConstruct();
  _Esr_status4_4e3_default_instance_.DefaultConstruct();
  _Esr_trackmotionpower_540_Motionpower_default_instance_.DefaultConstruct();
  _Esr_trackmotionpower_540_default_instance_.DefaultConstruct();
  _Acm_inst_req_7e0_default_instance_.DefaultConstruct();
  _Esr_track01_500_default_instance_.DefaultConstruct();
  _Esr_valid1_5d0_default_instance_.DefaultConstruct();
  _Esr_valid2_5d1_default_instance_.DefaultConstruct();
  _Acm_inst_resp_7e4_default_instance_.DefaultConstruct();
  _Vehicle2_4f1_default_instance_.DefaultConstruct();
  _Vehicle1_4f0_default_instance_.DefaultConstruct();
  _Esr_sim1_5c0_default_instance_.DefaultConstruct();
  _Esr_status1_4e0_default_instance_.DefaultConstruct();
  _Esr_status2_4e1_default_instance_.DefaultConstruct();
  _Esr_status8_5e7_default_instance_.DefaultConstruct();
  _Esr_status7_5e6_default_instance_.DefaultConstruct();
  _Vehicle3_5f2_default_instance_.DefaultConstruct();
  _Vehicle4_5f3_default_instance_.DefaultConstruct();
  _Vehicle5_5f4_default_instance_.DefaultConstruct();
  _Vehicle6_5f5_default_instance_.DefaultConstruct();
  _DelphiESR_default_instance_.DefaultConstruct();
  _DelphiESR_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status9_5e8_ = const_cast< ::apollo::drivers::Esr_status9_5e8*>(
      ::apollo::drivers::Esr_status9_5e8::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status6_5e5_ = const_cast< ::apollo::drivers::Esr_status6_5e5*>(
      ::apollo::drivers::Esr_status6_5e5::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status5_5e4_ = const_cast< ::apollo::drivers::Esr_status5_5e4*>(
      ::apollo::drivers::Esr_status5_5e4::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status3_4e2_ = const_cast< ::apollo::drivers::Esr_status3_4e2*>(
      ::apollo::drivers::Esr_status3_4e2::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status4_4e3_ = const_cast< ::apollo::drivers::Esr_status4_4e3*>(
      ::apollo::drivers::Esr_status4_4e3::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->acm_inst_req_7e0_ = const_cast< ::apollo::drivers::Acm_inst_req_7e0*>(
      ::apollo::drivers::Acm_inst_req_7e0::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_valid1_5d0_ = const_cast< ::apollo::drivers::Esr_valid1_5d0*>(
      ::apollo::drivers::Esr_valid1_5d0::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_valid2_5d1_ = const_cast< ::apollo::drivers::Esr_valid2_5d1*>(
      ::apollo::drivers::Esr_valid2_5d1::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->acm_inst_resp_7e4_ = const_cast< ::apollo::drivers::Acm_inst_resp_7e4*>(
      ::apollo::drivers::Acm_inst_resp_7e4::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->vehicle2_4f1_ = const_cast< ::apollo::drivers::Vehicle2_4f1*>(
      ::apollo::drivers::Vehicle2_4f1::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->vehicle1_4f0_ = const_cast< ::apollo::drivers::Vehicle1_4f0*>(
      ::apollo::drivers::Vehicle1_4f0::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_sim1_5c0_ = const_cast< ::apollo::drivers::Esr_sim1_5c0*>(
      ::apollo::drivers::Esr_sim1_5c0::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status1_4e0_ = const_cast< ::apollo::drivers::Esr_status1_4e0*>(
      ::apollo::drivers::Esr_status1_4e0::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status2_4e1_ = const_cast< ::apollo::drivers::Esr_status2_4e1*>(
      ::apollo::drivers::Esr_status2_4e1::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status8_5e7_ = const_cast< ::apollo::drivers::Esr_status8_5e7*>(
      ::apollo::drivers::Esr_status8_5e7::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->esr_status7_5e6_ = const_cast< ::apollo::drivers::Esr_status7_5e6*>(
      ::apollo::drivers::Esr_status7_5e6::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->vehicle3_5f2_ = const_cast< ::apollo::drivers::Vehicle3_5f2*>(
      ::apollo::drivers::Vehicle3_5f2::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->vehicle4_5f3_ = const_cast< ::apollo::drivers::Vehicle4_5f3*>(
      ::apollo::drivers::Vehicle4_5f3::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->vehicle5_5f4_ = const_cast< ::apollo::drivers::Vehicle5_5f4*>(
      ::apollo::drivers::Vehicle5_5f4::internal_default_instance());
  _DelphiESR_default_instance_.get_mutable()->vehicle6_5f5_ = const_cast< ::apollo::drivers::Vehicle6_5f5*>(
      ::apollo::drivers::Vehicle6_5f5::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030drivers/delphi_esr.proto\022\016apollo.drive"
      "rs\032\023common/header.proto\"\374\001\n\017Esr_status9_"
      "5e8\022\034\n\024can_tx_path_id_.o_3\030\001 \001(\005\022\034\n\024can"
      "_tx_path_id_.o_2\030\002 \001(\005\022%\n\035can_tx_filter"
      "ed_xohp_.o_cipv\030\003 \001(\001\022$\n\034can_tx_water_s"
      "pray_target_id\030\004 \001(\005\022\"\n\032can_tx_serial_nu"
      "m_3rd_byte\030\005 \001(\005\022\035\n\025can_tx_sideslip_angl"
      "e\030\006 \001(\001\022\035\n\025can_tx_avg_pwr_cwblkg\030\007 \001(\005\"\232"
      "\021\n\017Esr_status6_5e5\022&\n\036can_tx_sw_version_"
      "dsp_3rd_byte\030\001 \001(\005\022h\n\035can_tx_vertical_al"
      "ign_updated\030\002 \001(\0162A.apollo.drivers.Esr_s"
      "tatus6_5e5.Can_tx_vertical_align_updated"
      "Type\022$\n\034can_tx_vertical_misalignment\030\003 \001"
      "(\001\022&\n\036can_tx_serv_align_updates_done\030\004 \001"
      "(\005\022T\n\023can_tx_found_target\030\005 \001(\01627.apollo"
      ".drivers.Esr_status6_5e5.Can_tx_found_ta"
      "rgetType\022#\n\033can_tx_factory_misalignment\030"
      "\006 \001(\001\022h\n\035can_tx_factory_align_status_2\030\007"
      " \001(\0162A.apollo.drivers.Esr_status6_5e5.Ca"
      "n_tx_factory_align_status_2Type\022h\n\035can_t"
      "x_factory_align_status_1\030\010 \001(\0162A.apollo."
      "drivers.Esr_status6_5e5.Can_tx_factory_a"
      "lign_status_1Type\022d\n\033can_tx_recommend_un"
      "converge\030\t \001(\0162\?.apollo.drivers.Esr_stat"
      "us6_5e5.Can_tx_recommend_unconvergeType\022"
      "\034\n\024can_tx_wave_diff_a2d\030\n \001(\005\022^\n\030can_tx_"
      "system_power_mode\030\013 \001(\0162<.apollo.drivers"
      ".Esr_status6_5e5.Can_tx_system_power_mod"
      "eType\022\035\n\025can_tx_supply_n5v_a2d\030\014 \001(\005\022\036\n\026"
      "can_tx_supply_1p8v_a2d\030\r \001(\005\"}\n!Can_tx_v"
      "ertical_align_updatedType\022-\n)CAN_TX_VERT"
      "ICAL_ALIGN_UPDATED_NOT_UPDATED\020\000\022)\n%CAN_"
      "TX_VERTICAL_ALIGN_UPDATED_UPDATED\020\001\"[\n\027C"
      "an_tx_found_targetType\022!\n\035CAN_TX_FOUND_T"
      "ARGET_NOT_FOUND\020\000\022\035\n\031CAN_TX_FOUND_TARGET"
      "_FOUND\020\001\"\273\002\n!Can_tx_factory_align_status"
      "_2Type\022%\n!CAN_TX_FACTORY_ALIGN_STATUS_2_"
      "OFF\020\000\022&\n\"CAN_TX_FACTORY_ALIGN_STATUS_2_B"
      "USY\020\001\022)\n%CAN_TX_FACTORY_ALIGN_STATUS_2_S"
      "UCCESS\020\002\0220\n,CAN_TX_FACTORY_ALIGN_STATUS_"
      "2_FAIL_NO_TARGET\020\003\0224\n0CAN_TX_FACTORY_ALI"
      "GN_STATUS_2_FAIL_DEV_TOO_LARGE\020\004\0224\n0CAN_"
      "TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_L"
      "ARGE\020\005\"\273\002\n!Can_tx_factory_align_status_1"
      "Type\022%\n!CAN_TX_FACTORY_ALIGN_STATUS_1_OF"
      "F\020\000\022&\n\"CAN_TX_FACTORY_ALIGN_STATUS_1_BUS"
      "Y\020\001\022)\n%CAN_TX_FACTORY_ALIGN_STATUS_1_SUC"
      "CESS\020\002\0220\n,CAN_TX_FACTORY_ALIGN_STATUS_1_"
      "FAIL_NO_TARGET\020\003\0224\n0CAN_TX_FACTORY_ALIGN"
      "_STATUS_1_FAIL_DEV_TOO_LARGE\020\004\0224\n0CAN_TX"
      "_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LAR"
      "GE\020\005\"{\n\037Can_tx_recommend_unconvergeType\022"
      "-\n)CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOM"
      "MEND\020\000\022)\n%CAN_TX_RECOMMEND_UNCONVERGE_RE"
      "COMMEND\020\001\"\337\002\n\034Can_tx_system_power_modeTy"
      "pe\022%\n!CAN_TX_SYSTEM_POWER_MODE_DSP_INIT\020"
      "\000\022(\n$CAN_TX_SYSTEM_POWER_MODE_RADIATE_OF"
      "F\020\001\022\'\n#CAN_TX_SYSTEM_POWER_MODE_RADIATE_"
      "ON\020\002\022)\n%CAN_TX_SYSTEM_POWER_MODE_DSP_SHU"
      "TDOWN\020\003\022$\n CAN_TX_SYSTEM_POWER_MODE_DSP_"
      "OFF\020\004\022*\n&CAN_TX_SYSTEM_POWER_MODE_HOST_S"
      "HUTDOWN\020\005\022!\n\035CAN_TX_SYSTEM_POWER_MODE_TE"
      "ST\020\006\022%\n!CAN_TX_SYSTEM_POWER_MODE_7INVALI"
      "D\020\007\"\367\001\n\017Esr_status5_5e4\022\035\n\025can_tx_supply"
      "_10v_a2d\030\001 \001(\005\022\030\n\020can_tx_temp2_a2d\030\002 \001(\005"
      "\022\030\n\020can_tx_temp1_a2d\030\003 \001(\005\022\031\n\021can_tx_swb"
      "att_a2d\030\004 \001(\005\022\036\n\026can_tx_supply_5vdx_a2d\030"
      "\005 \001(\005\022\035\n\025can_tx_supply_5va_a2d\030\006 \001(\005\022\036\n\026"
      "can_tx_supply_3p3v_a2d\030\007 \001(\005\022\027\n\017can_tx_i"
      "gnp_a2d\030\010 \001(\005\"\250\001\n\017Esr_status3_4e2\022\035\n\025can"
      "_tx_sw_version_pld\030\001 \001(\005\022\036\n\026can_tx_sw_ve"
      "rsion_host\030\002 \001(\005\022\031\n\021can_tx_hw_version\030\003 "
      "\001(\005\022 \n\030can_tx_interface_version\030\004 \001(\005\022\031\n"
      "\021can_tx_serial_num\030\005 \001(\005\"\226\013\n\017Esr_status4"
      "_4e3\022\\\n\027can_tx_truck_target_det\030\001 \001(\0162;."
      "apollo.drivers.Esr_status4_4e3.Can_tx_tr"
      "uck_target_detType\022l\n\037can_tx_lr_only_gra"
      "ting_lobe_det\030\002 \001(\0162C.apollo.drivers.Esr"
      "_status4_4e3.Can_tx_lr_only_grating_lobe"
      "_detType\022^\n\030can_tx_sidelobe_blockage\030\003 \001"
      "(\0162<.apollo.drivers.Esr_status4_4e3.Can_"
      "tx_sidelobe_blockageType\022\\\n\027can_tx_parti"
      "al_blockage\030\004 \001(\0162;.apollo.drivers.Esr_s"
      "tatus4_4e3.Can_tx_partial_blockageType\022\037"
      "\n\027can_tx_path_id_.o_stat\030\005 \001(\005\022P\n\021can_t"
      "x_mr_lr_mode\030\006 \001(\01625.apollo.drivers.Esr_"
      "status4_4e3.Can_tx_mr_lr_modeType\022\037\n\027can"
      "_tx_auto_align_angle\030\007 \001(\001\022\036\n\026can_tx_rol"
      "ling_count_3\030\010 \001(\005\022\037\n\027can_tx_path_id_fcw"
      "_stat\030\t \001(\005\022\037\n\027can_tx_path_id_fcw_move\030\n"
      " \001(\005\022 \n\030can_tx_path_id_cmbb_stat\030\013 \001(\005\022 "
      "\n\030can_tx_path_id_cmbb_move\030\014 \001(\005\022\032\n\022can_"
      "tx_path_id_.o\030\r \001(\005\"m\n\033Can_tx_truck_tar"
      "get_detType\022(\n$CAN_TX_TRUCK_TARGET_DET_N"
      "OT_DETECTED\020\000\022$\n CAN_TX_TRUCK_TARGET_DET"
      "_DETECTED\020\001\"\205\001\n#Can_tx_lr_only_grating_l"
      "obe_detType\0220\n,CAN_TX_LR_ONLY_GRATING_LO"
      "BE_DET_NOT_DETECTED\020\000\022,\n(CAN_TX_LR_ONLY_"
      "GRATING_LOBE_DET_DETECTED\020\001\"a\n\034Can_tx_si"
      "delobe_blockageType\022 \n\034CAN_TX_SIDELOBE_B"
      "LOCKAGE_OFF\020\000\022\037\n\033CAN_TX_SIDELOBE_BLOCKAG"
      "E_ON\020\001\"k\n\033Can_tx_partial_blockageType\022\'\n"
      "#CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED\020\000\022#"
      "\n\037CAN_TX_PARTIAL_BLOCKAGE_BLOCKED\020\001\"\333\001\n\025"
      "Can_tx_mr_lr_modeType\022\036\n\032CAN_TX_MR_LR_MO"
      "DE_RESERVED\020\000\0225\n1CAN_TX_MR_LR_MODE_OUTPU"
      "T_ONLY_MEDIUM_RANGE_TRACKS\020\001\0223\n/CAN_TX_M"
      "R_LR_MODE_OUTPUT_ONLY_LONG_RANGE_TRACKS\020"
      "\002\0226\n2CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM"
      "_RANGE_AND_LONG\020\003\"\311\002\n\030Esr_trackmotionpow"
      "er_540\022$\n\034can_tx_track_rolling_count_2\030\001"
      " \001(\010\022!\n\031can_tx_track_can_id_group\030\002 \001(\005\022"
      "W\n\031can_tx_track_motion_power\030\003 \003(\01324.apo"
      "llo.drivers.Esr_trackmotionpower_540.Mot"
      "ionpower\032\212\001\n\013Motionpower\022\033\n\023can_tx_track"
      "_moving\030\001 \001(\010\022 \n\030can_tx_track_moving_fas"
      "t\030\002 \001(\010\022 \n\030can_tx_track_moving_slow\030\003 \001("
      "\010\022\032\n\022can_tx_track_power\030\004 \001(\005\"\211\001\n\020Acm_in"
      "st_req_7e0\022\023\n\013command_ctr\030\001 \001(\005\022\024\n\014comma"
      "nd_code\030\002 \001(\005\022\021\n\.o_word_2\030\003 \001(\005\022\021\n\.o_w"
      "ord_1\030\004 \001(\005\022\021\n\.o_byte_2\030\005 \001(\005\022\021\n\.o_byt"
      "e_1\030\006 \001(\005\"\203\r\n\017Esr_track01_500\022h\n\035can_tx_"
      "track_grouping_changed\030\001 \001(\0162A.apollo.dr"
      "ivers.Esr_track01_500.Can_tx_track_group"
      "ing_changedType\022X\n\025can_tx_track_oncoming"
      "\030\002 \001(\01629.apollo.drivers.Esr_track01_500."
      "Can_tx_track_oncomingType\022\035\n\025can_tx_trac"
      "k_lat_rate\030\003 \001(\001\022b\n\032can_tx_track_bridge_"
      "object\030\004 \001(\0162>.apollo.drivers.Esr_track0"
      "1_500.Can_tx_track_bridge_objectType\022\032\n\022"
      "can_tx_track_width\030\005 \001(\001\022T\n\023can_tx_track"
      "_status\030\006 \001(\01627.apollo.drivers.Esr_track"
      "01_500.Can_tx_track_statusType\022\"\n\032can_tx"
      "_track_rolling_count\030\007 \001(\010\022\037\n\027can_tx_tra"
      "ck_range_rate\030\010 \001(\001\022 \n\030can_tx_track_rang"
      "e_.oel\030\t \001(\001\022\032\n\022can_tx_track_range\030\n \001("
      "\001\022d\n\033can_tx_track_med_range_mode\030\013 \001(\0162\?"
      ".apollo.drivers.Esr_track01_500.Can_tx_t"
      "rack_med_range_modeType\022\032\n\022can_tx_track_"
      "angle\030\014 \001(\001\"\213\001\n!Can_tx_track_grouping_ch"
      "angedType\0223\n/CAN_TX_TRACK_GROUPING_CHANG"
      "ED_GROUPINGUNCHANGED\020\000\0221\n-CAN_TX_TRACK_G"
      "ROUPING_CHANGED_GROUPINGCHANGED\020\001\"f\n\031Can"
      "_tx_track_oncomingType\022%\n!CAN_TX_TRACK_O"
      "NCOMING_NOTONCOMING\020\000\022\"\n\036CAN_TX_TRACK_ON"
      "COMING_ONCOMING\020\001\"r\n\036Can_tx_track_bridge"
      "_objectType\022)\n%CAN_TX_TRACK_BRIDGE_OBJEC"
      "T_NOT_BRIDGE\020\000\022%\n!CAN_TX_TRACK_BRIDGE_OB"
      "JECT_BRIDGE\020\001\"\337\002\n\027Can_tx_track_statusTyp"
      "e\022!\n\035CAN_TX_TRACK_STATUS_NO_TARGET\020\000\022\"\n\036"
      "CAN_TX_TRACK_STATUS_NEW_TARGET\020\001\022*\n&CAN_"
      "TX_TRACK_STATUS_NEW_UPDATED_TARGET\020\002\022&\n\""
      "CAN_TX_TRACK_STATUS_UPDATED_TARGET\020\003\022&\n\""
      "CAN_TX_TRACK_STATUS_COASTED_TARGET\020\004\022%\n!"
      "CAN_TX_TRACK_STATUS_MERGED_TARGET\020\005\022.\n*C"
      "AN_TX_TRACK_STATUS_INVALID_COASTED_TARGE"
      "T\020\006\022*\n&CAN_TX_TRACK_STATUS_NEW_COASTED_T"
      "ARGET\020\007\"\345\001\n\037Can_tx_track_med_range_modeT"
      "ype\022/\n+CAN_TX_TRACK_MED_RANGE_MODE_NO_MR"
      "_LR_UPDATE\020\000\022.\n*CAN_TX_TRACK_MED_RANGE_M"
      "ODE_MR_UPDATE_ONLY\020\001\022.\n*CAN_TX_TRACK_MED"
      "_RANGE_MODE_LR_UPDATE_ONLY\020\002\0221\n-CAN_TX_T"
      "RACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE\020\003\""
      "\255\001\n\016Esr_valid1_5d0\022\032\n\022can_tx_valid_lr_sn"
      "\030\001 \001(\005\022\"\n\032can_tx_valid_lr_range_rate\030\002 \001"
      "(\001\022\035\n\025can_tx_valid_lr_range\030\003 \001(\001\022\035\n\025can"
      "_tx_valid_lr_power\030\004 \001(\005\022\035\n\025can_tx_valid"
      "_lr_angle\030\005 \001(\001\"\255\001\n\016Esr_valid2_5d1\022\032\n\022ca"
      "n_tx_valid_mr_sn\030\001 \001(\005\022\"\n\032can_tx_valid_m"
      "r_range_rate\030\002 \001(\001\022\035\n\025can_tx_valid_mr_ra"
      "nge\030\003 \001(\001\022\035\n\025can_tx_valid_mr_power\030\004 \001(\005"
      "\022\035\n\025can_tx_valid_mr_angle\030\005 \001(\001\"\246\001\n\021Acm_"
      "inst_resp_7e4\022\016\n\006data_7\030\001 \001(\005\022\016\n\006data_6\030"
      "\002 \001(\005\022\016\n\006data_5\030\003 \001(\005\022\016\n\006data_4\030\004 \001(\005\022\016\n"
      "\006data_3\030\005 \001(\005\022\027\n\017rtn_cmd_counter\030\006 \001(\005\022\033"
      "\n\023command_return_code\030\007 \001(\005\022\013\n\003pid\030\010 \001(\005"
      "\"\237\025\n\014Vehicle2_4f1\022$\n\034can_rx_volvo_short_"
      "track_roc\030\001 \001(\001\022Y\n\027can_rx_mr_only_transm"
      "it\030\002 \001(\01628.apollo.drivers.Vehicle2_4f1.C"
      "an_rx_mr_only_transmitType\022Y\n\027can_rx_lr_"
      "only_transmit\030\003 \001(\01628.apollo.drivers.Veh"
      "icle2_4f1.Can_rx_lr_only_transmitType\022\035\n"
      "\025can_rx_high_yaw_angle\030\004 \001(\005\022Q\n\023can_rx_c"
      "lear_faults\030\005 \001(\01624.apollo.drivers.Vehic"
      "le2_4f1.Can_rx_clear_faultsType\022e\n\035can_r"
      "x_use_angle_misalignment\030\006 \001(\0162>.apollo."
      "drivers.Vehicle2_4f1.Can_rx_use_angle_mi"
      "salignmentType\022]\n\031can_rx_turn_signal_sta"
      "tus\030\007 \001(\0162:.apollo.drivers.Vehicle2_4f1."
      "Can_rx_turn_signal_statusType\022Y\n\027can_rx_"
      "blockage_disable\030\010 \001(\01628.apollo.drivers."
      "Vehicle2_4f1.Can_rx_blockage_disableType"
      "\022e\n\035can_rx_vehicle_speed_validity\030\t \001(\0162"
      ">.apollo.drivers.Vehicle2_4f1.Can_rx_veh"
      "icle_speed_validityType\022W\n\026can_rx_mmr_up"
      "side_down\030\n \001(\01627.apollo.drivers.Vehicle"
      "2_4f1.Can_rx_mmr_upside_downType\022Q\n\023can_"
      "rx_wiper_status\030\013 \001(\01624.apollo.drivers.V"
      "ehicle2_4f1.Can_rx_wiper_statusType\022W\n\026c"
      "an_rx_raw_data_enable\030\014 \001(\01627.apollo.dri"
      "vers.Vehicle2_4f1.Can_rx_raw_data_enable"
      "Type\022[\n\030can_rx_radar_cmd_radiate\030\r \001(\01629"
      ".apollo.drivers.Vehicle2_4f1.Can_rx_rada"
      "r_cmd_radiateType\022S\n\024can_rx_grouping_mod"
      "e\030\016 \001(\01625.apollo.drivers.Vehicle2_4f1.Ca"
      "n_rx_grouping_modeType\022\035\n\025can_rx_maximum"
      "_tracks\030\017 \001(\005\022&\n\036can_rx_lateral_mounting"
      "_offset\030\020 \001(\001\022!\n\031can_rx_angle_misalignme"
      "nt\030\021 \001(\001\022\035\n\025can_rx_scan_index_ack\030\022 \001(\005\""
      "^\n\033Can_rx_mr_only_transmitType\022\037\n\033CAN_RX"
      "_MR_ONLY_TRANSMIT_OFF\020\000\022\036\n\032CAN_RX_MR_ONL"
      "Y_TRANSMIT_ON\020\001\"^\n\033Can_rx_lr_only_transm"
      "itType\022\037\n\033CAN_RX_LR_ONLY_TRANSMIT_OFF\020\000\022"
      "\036\n\032CAN_RX_LR_ONLY_TRANSMIT_ON\020\001\"R\n\027Can_r"
      "x_clear_faultsType\022\033\n\027CAN_RX_CLEAR_FAULT"
      "S_OFF\020\000\022\032\n\026CAN_RX_CLEAR_FAULTS_ON\020\001\"p\n!C"
      "an_rx_use_angle_misalignmentType\022%\n!CAN_"
      "RX_USE_ANGLE_MISALIGNMENT_OFF\020\000\022$\n CAN_R"
      "X_USE_ANGLE_MISALIGNMENT_ON\020\001\"\264\001\n\035Can_rx"
      "_turn_signal_statusType\022!\n\035CAN_RX_TURN_S"
      "IGNAL_STATUS_OFF\020\000\022\"\n\036CAN_RX_TURN_SIGNAL"
      "_STATUS_LEFT\020\001\022#\n\037CAN_RX_TURN_SIGNAL_STA"
      "TUS_RIGHT\020\002\022\'\n#CAN_RX_TURN_SIGNAL_STATUS"
      "_INVALID_3\020\003\"h\n\033Can_rx_blockage_disableT"
      "ype\022#\n\037CAN_RX_BLOCKAGE_DISABLE_ENABLED\020\000"
      "\022$\n CAN_RX_BLOCKAGE_DISABLE_DISABLED\020\001\"w"
      "\n!Can_rx_vehicle_speed_validityType\022)\n%C"
      "AN_RX_VEHICLE_SPEED_VALIDITY_INVALID\020\000\022\'"
      "\n#CAN_RX_VEHICLE_SPEED_VALIDITY_VALID\020\001\""
      "n\n\032Can_rx_mmr_upside_downType\022(\n$CAN_RX_"
      "MMR_UPSIDE_DOWN_RIGHT_SIDE_UP\020\000\022&\n\"CAN_R"
      "X_MMR_UPSIDE_DOWN_UPSIDE_DOWN\020\001\"R\n\027Can_r"
      "x_wiper_statusType\022\033\n\027CAN_RX_WIPER_STATU"
      "S_OFF\020\000\022\032\n\026CAN_RX_WIPER_STATUS_ON\020\001\"a\n\032C"
      "an_rx_raw_data_enableType\022#\n\037CAN_RX_RAW_"
      "DATA_ENABLE_FILTERED\020\000\022\036\n\032CAN_RX_RAW_DAT"
      "A_ENABLE_RAW\020\001\"a\n\034Can_rx_radar_cmd_radia"
      "teType\022 \n\034CAN_RX_RADAR_CMD_RADIATE_OFF\020\000"
      "\022\037\n\033CAN_RX_RADAR_CMD_RADIATE_ON\020\001\"\316\001\n\030Ca"
      "n_rx_grouping_modeType\022$\n CAN_RX_GROUPIN"
      "G_MODE_NO_GROUPING\020\000\022*\n&CAN_RX_GROUPING_"
      "MODE_GROUP_MOVING_ONLY\020\001\022.\n*CAN_RX_GROUP"
      "ING_MODE_GROUP_STATIONARY_ONLY\020\002\0220\n,CAN_"
      "RX_GROUPING_MODE_GROUP_MOVING_STATIONARY"
      "\020\003\"\222\n\n\014Vehicle1_4f0\022g\n\036can_rx_steering_a"
      "ngle_validity\030\001 \001(\0162\?.apollo.drivers.Veh"
      "icle1_4f0.Can_rx_steering_angle_validity"
      "Type\022\"\n\032can_rx_steering_angle_rate\030\002 \001(\005"
      "\022_\n\032can_rx_steering_angle_sign\030\003 \001(\0162;.a"
      "pollo.drivers.Vehicle1_4f0.Can_rx_steeri"
      "ng_angle_signType\022i\n\037can_rx_steering_ang"
      "le_rate_sign\030\004 \001(\0162@.apollo.drivers.Vehi"
      "cle1_4f0.Can_rx_steering_angle_rate_sign"
      "Type\022\035\n\025can_rx_steering_angle\030\005 \001(\005\022\037\n\027c"
      "an_rx_radius_curvature\030\006 \001(\005\022[\n\030can_rx_y"
      "aw_rate_validity\030\007 \001(\01629.apollo.drivers."
      "Vehicle1_4f0.Can_rx_yaw_rate_validityTyp"
      "e\022\027\n\017can_rx_yaw_rate\030\010 \001(\001\022g\n\036can_rx_veh"
      "icle_speed_direction\030\t \001(\0162\?.apollo.driv"
      "ers.Vehicle1_4f0.Can_rx_vehicle_speed_di"
      "rectionType\022\034\n\024can_rx_vehicle_speed\030\n \001("
      "\001\"z\n\"Can_rx_steering_angle_validityType\022"
      "*\n&CAN_RX_STEERING_ANGLE_VALIDITY_INVALI"
      "D\020\000\022(\n$CAN_RX_STEERING_ANGLE_VALIDITY_VA"
      "LID\020\001\"{\n\036Can_rx_steering_angle_signType\022"
      "/\n+CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLO"
      "CKWISE\020\000\022(\n$CAN_RX_STEERING_ANGLE_SIGN_C"
      "LOCKWISE\020\001\"\212\001\n#Can_rx_steering_angle_rat"
      "e_signType\0224\n0CAN_RX_STEERING_ANGLE_RATE"
      "_SIGN_COUNTERCLOCKWISE\020\000\022-\n)CAN_RX_STEER"
      "ING_ANGLE_RATE_SIGN_CLOCKWISE\020\001\"h\n\034Can_r"
      "x_yaw_rate_validityType\022$\n CAN_RX_YAW_RA"
      "TE_VALIDITY_INVALID\020\000\022\"\n\036CAN_RX_YAW_RATE"
      "_VALIDITY_VALID\020\001\"|\n\"Can_rx_vehicle_spee"
      "d_directionType\022*\n&CAN_RX_VEHICLE_SPEED_"
      "DIRECTION_FORWARD\020\000\022*\n&CAN_RX_VEHICLE_SP"
      "EED_DIRECTION_REVERSE\020\001\"\202\010\n\014Esr_sim1_5c0"
      "\022Q\n\023can_rx_sim_track_id\030\001 \001(\01624.apollo.d"
      "rivers.Esr_sim1_5c0.Can_rx_sim_track_idT"
      "ype\022M\n\021can_rx_sim_status\030\002 \001(\01622.apollo."
      "drivers.Esr_sim1_5c0.Can_rx_sim_statusTy"
      "pe\022\035\n\025can_rx_sim_range_rate\030\003 \001(\001\022\036\n\026can"
      "_rx_sim_range_.oel\030\004 \001(\001\022\030\n\020can_rx_sim_"
      "range\030\005 \001(\005\022\033\n\023can_rx_sim_lat_rate\030\006 \001(\001"
      "\022\032\n\022can_rx_sim_lat_pos\030\007 \001(\001\022Q\n\023can_rx_s"
      "im_function\030\010 \001(\01624.apollo.drivers.Esr_s"
      "im1_5c0.Can_rx_sim_functionType\022\030\n\020can_r"
      "x_sim_angle\030\t \001(\001\"\200\001\n\027Can_rx_sim_track_i"
      "dType\022!\n\035CAN_RX_SIM_TRACK_ID_NO_TARGET\020\000"
      "\022 \n\034CAN_RX_SIM_TRACK_ID_TARGET_1\020\001\022 \n\034CA"
      "N_RX_SIM_TRACK_ID_TARGET_2\020\002\"\217\001\n\025Can_rx_"
      "sim_statusType\022\035\n\031CAN_RX_SIM_STATUS_INVA"
      "LID\020\000\022\031\n\025CAN_RX_SIM_STATUS_NEW\020\001\022\035\n\031CAN_"
      "RX_SIM_STATUS_UPDATED\020\002\022\035\n\031CAN_RX_SIM_ST"
      "ATUS_COASTED\020\003\"\273\002\n\027Can_rx_sim_functionTy"
      "pe\022\033\n\027CAN_RX_SIM_FUNCTION_ACC\020\000\022\032\n\026CAN_R"
      "X_SIM_FUNCTION_RI\020\001\022 \n\034CAN_RX_SIM_FUNCTI"
      "ON_FCW_MOVE\020\002\022 \n\034CAN_RX_SIM_FUNCTION_FCW"
      "_STAT\020\003\022!\n\035CAN_RX_SIM_FUNCTION_CMBB_MOVE"
      "\020\004\022!\n\035CAN_RX_SIM_FUNCTION_CMBB_STAT\020\005\022/\n"
      "+CAN_RX_SIM_FUNCTION_ALL_MOVING_ACC_FCW_"
      "CMBB\020\006\022,\n(CAN_RX_SIM_FUNCTION_ALL_STAT_R"
      "I_FCW_CMBB\020\007\"\354\001\n\017Esr_status1_4e0\022\034\n\024can_"
      "tx_dsp_timestamp\030\001 \001(\001\022\031\n\021can_tx_comm_er"
      "ror\030\002 \001(\010\022\034\n\024can_tx_yaw_rate_calc\030\003 \001(\001\022"
      "!\n\031can_tx_vehicle_speed_calc\030\004 \001(\001\022\031\n\021ca"
      "n_tx_scan_index\030\005 \001(\005\022\036\n\026can_tx_rolling_"
      "count_1\030\006 \001(\005\022$\n\034can_tx_radius_curvature"
      "_calc\030\007 \001(\005\"\335\013\n\017Esr_status2_4e1\022\034\n\024can_t"
      "x_yaw_rate_bias\030\001 \001(\001\022\"\n\032can_tx_veh_spd_"
      "comp_factor\030\002 \001(\001\022\035\n\025can_tx_sw_version_d"
      "sp\030\003 \001(\005\022\032\n\022can_tx_temperature\030\004 \001(\005\022V\n\024"
      "can_tx_raw_data_mode\030\005 \001(\01628.apollo.driv"
      "ers.Esr_status2_4e1.Can_tx_raw_data_mode"
      "Type\022\\\n\027can_tx_range_perf_error\030\006 \001(\0162;."
      "apollo.drivers.Esr_status2_4e1.Can_tx_ra"
      "nge_perf_errorType\022X\n\025can_tx_overheat_er"
      "ror\030\007 \001(\01629.apollo.drivers.Esr_status2_4"
      "e1.Can_tx_overheat_errorType\022!\n\031can_tx_m"
      "aximum_tracks_ack\030\010 \001(\005\022X\n\025can_tx_intern"
      "al_error\030\t \001(\01629.apollo.drivers.Esr_stat"
      "us2_4e1.Can_tx_internal_errorType\022V\n\024can"
      "_tx_grouping_mode\030\n \001(\01628.apollo.drivers"
      ".Esr_status2_4e1.Can_tx_grouping_modeTyp"
      "e\022\\\n\027can_tx_xcvr_operational\030\013 \001(\0162;.apo"
      "llo.drivers.Esr_status2_4e1.Can_tx_xcvr_"
      "operationalType\022!\n\031can_tx_steering_angle"
      "_ack\030\014 \001(\005\022\036\n\026can_tx_rolling_count_2\030\r \001"
      "(\005\"[\n\030Can_tx_raw_data_modeType\022!\n\035CAN_TX"
      "_RAW_DATA_MODE_FILTERED\020\000\022\034\n\030CAN_TX_RAW_"
      "DATA_MODE_RAW\020\001\"k\n\033Can_tx_range_perf_err"
      "orType\022\'\n#CAN_TX_RANGE_PERF_ERROR_NOT_BL"
      "OCKED\020\000\022#\n\037CAN_TX_RANGE_PERF_ERROR_BLOCK"
      "ED\020\001\"g\n\031Can_tx_overheat_errorType\022&\n\"CAN"
      "_TX_OVERHEAT_ERROR_NOT_OVERTEMP\020\000\022\"\n\036CAN"
      "_TX_OVERHEAT_ERROR_OVERTEMP\020\001\"c\n\031Can_tx_"
      "internal_errorType\022$\n CAN_TX_INTERNAL_ER"
      "ROR_NOT_FAILED\020\000\022 \n\034CAN_TX_INTERNAL_ERRO"
      "R_FAILED\020\001\"\316\001\n\030Can_tx_grouping_modeType\022"
      "$\n CAN_TX_GROUPING_MODE_NO_GROUPING\020\000\022*\n"
      "&CAN_TX_GROUPING_MODE_GROUP_MOVING_ONLY\020"
      "\001\022.\n*CAN_TX_GROUPING_MODE_GROUP_STATIONA"
      "RY_ONLY\020\002\0220\n,CAN_TX_GROUPING_MODE_GROUP_"
      "MOVING_STATIONARY\020\003\"^\n\033Can_tx_xcvr_opera"
      "tionalType\022\037\n\033CAN_TX_XCVR_OPERATIONAL_OF"
      "F\020\000\022\036\n\032CAN_TX_XCVR_OPERATIONAL_ON\020\001\"\221\002\n\017"
      "Esr_status8_5e7\022\036\n\026can_tx_history_fault_"
      "7\030\001 \001(\005\022\036\n\026can_tx_history_fault_6\030\002 \001(\005\022"
      "\036\n\026can_tx_history_fault_5\030\003 \001(\005\022\036\n\026can_t"
      "x_history_fault_4\030\004 \001(\005\022\036\n\026can_tx_histor"
      "y_fault_3\030\005 \001(\005\022\036\n\026can_tx_history_fault_"
      "2\030\006 \001(\005\022\036\n\026can_tx_history_fault_1\030\007 \001(\005\022"
      "\036\n\026can_tx_history_fault_0\030\010 \001(\005\"\211\002\n\017Esr_"
      "status7_5e6\022\035\n\025can_tx_active_fault_7\030\001 \001"
      "(\005\022\035\n\025can_tx_active_fault_6\030\002 \001(\005\022\035\n\025can"
      "_tx_active_fault_5\030\003 \001(\005\022\035\n\025can_tx_activ"
      "e_fault_4\030\004 \001(\005\022\035\n\025can_tx_active_fault_3"
      "\030\005 \001(\005\022\035\n\025can_tx_active_fault_2\030\006 \001(\005\022\035\n"
      "\025can_tx_active_fault_0\030\007 \001(\005\022\035\n\025can_tx_a"
      "ctive_fault_1\030\010 \001(\005\"\366\r\n\014Vehicle3_5f2\022&\n\036"
      "can_rx_serv_align_updates_need\030\001 \001(\005\022W\n\026"
      "can_rx_serv_align_type\030\002 \001(\01627.apollo.dr"
      "ivers.Vehicle3_5f2.Can_rx_serv_align_typ"
      "eType\022[\n\030can_rx_serv_align_enable\030\003 \001(\0162"
      "9.apollo.drivers.Vehicle3_5f2.Can_rx_ser"
      "v_align_enableType\022#\n\033can_rx_aalign_avg_"
      "ctr_total\030\004 \001(\001\022a\n\033can_rx_auto_align_con"
      "verged\030\005 \001(\0162<.apollo.drivers.Vehicle3_5"
      "f2.Can_rx_auto_align_convergedType\022]\n\031ca"
      "n_rx_auto_align_disable\030\006 \001(\0162:.apollo.d"
      "rivers.Vehicle3_5f2.Can_rx_auto_align_di"
      "sableType\022$\n\034can_rx_angle_mounting_offse"
      "t\030\007 \001(\001\022M\n\021can_rx_wheel_slip\030\010 \001(\01622.apo"
      "llo.drivers.Vehicle3_5f2.Can_rx_wheel_sl"
      "ipType\022\033\n\023can_rx_radar_height\030\t \001(\005\022\033\n\023c"
      "an_rx_radar_fov_mr\030\n \001(\005\022\033\n\023can_rx_radar"
      "_fov_lr\030\013 \001(\005\022_\n\032can_rx_long_.oel_valid"
      "ity\030\014 \001(\0162;.apollo.drivers.Vehicle3_5f2."
      "Can_rx_long_.oel_validityType\022\031\n\021can_rx"
      "_long_.oel\030\r \001(\001\022]\n\031can_rx_lat_.oel_va"
      "lidity\030\016 \001(\0162:.apollo.drivers.Vehicle3_5"
      "f2.Can_rx_lat_.oel_validityType\022\030\n\020can_"
      "rx_lat_.oel\030\017 \001(\001\"u\n\032Can_rx_serv_align_"
      "typeType\022)\n%CAN_RX_SERV_ALIGN_TYPE_AUTO_"
      "OR_DEALER\020\000\022,\n(CAN_RX_SERV_ALIGN_TYPE_VO"
      "LVO_SHORT_TRACK\020\001\"k\n\034Can_rx_serv_align_e"
      "nableType\022%\n!CAN_RX_SERV_ALIGN_ENABLE_DI"
      "SABLED\020\000\022$\n CAN_RX_SERV_ALIGN_ENABLE_ENA"
      "BLED\020\001\"{\n\037Can_rx_auto_align_convergedTyp"
      "e\022-\n)CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CON"
      "VERGED\020\000\022)\n%CAN_RX_AUTO_ALIGN_CONVERGED_"
      "CONVERGED\020\001\"n\n\035Can_rx_auto_align_disable"
      "Type\022%\n!CAN_RX_AUTO_ALIGN_DISABLE_ENABLE"
      "D\020\000\022&\n\"CAN_RX_AUTO_ALIGN_DISABLE_DISABLE"
      "D\020\001\"\261\001\n\025Can_rx_wheel_slipType\022 \n\034CAN_RX_"
      "WHEEL_SLIP_NO_CONTROL\020\000\022(\n$CAN_RX_WHEEL_"
      "SLIP_BRAKE_SLIP_CONTROL\020\001\022+\n\'CAN_RX_WHEE"
      "L_SLIP_TRACTION_SLIP_CONTROL\020\002\022\037\n\033CAN_RX"
      "_WHEEL_SLIP_INVALID_3\020\003\"n\n\036Can_rx_long_a"
      .oel_validityType\022&\n\"CAN_RX_LONG_ACCEL_V"
      "ALIDITY_INVALID\020\000\022$\n CAN_RX_LONG_ACCEL_V"
      "ALIDITY_VALID\020\001\"k\n\035Can_rx_lat_.oel_vali"
      "dityType\022%\n!CAN_RX_LAT_ACCEL_VALIDITY_IN"
      "VALID\020\000\022#\n\037CAN_RX_LAT_ACCEL_VALIDITY_VAL"
      "ID\020\001\"\221\005\n\014Vehicle4_5f3\022 \n\030can_rx_fac_tgt_"
      "range_r2m\030\001 \001(\001\022 \n\030can_rx_fac_tgt_range_"
      "m2t\030\002 \001(\001\022\036\n\026can_rx_fac_tgt_range_1\030\003 \001("
      "\001\022$\n\034can_rx_fac_tgt_mtg_space_ver\030\004 \001(\005\022"
      "$\n\034can_rx_fac_tgt_mtg_space_hor\030\005 \001(\005\022!\n"
      "\031can_rx_fac_tgt_mtg_offset\030\006 \001(\005\022!\n\031can_"
      "rx_fac_align_samp_req\030\007 \001(\005\022\037\n\027can_rx_fa"
      "c_align_max_nt\030\010 \001(\005\022W\n\026can_rx_fac_align"
      "_cmd_2\030\t \001(\01627.apollo.drivers.Vehicle4_5"
      "f3.Can_rx_fac_align_cmd_2Type\022W\n\026can_rx_"
      "fac_align_cmd_1\030\n \001(\01627.apollo.drivers.V"
      "ehicle4_5f3.Can_rx_fac_align_cmd_1Type\"["
      "\n\032Can_rx_fac_align_cmd_2Type\022\036\n\032CAN_RX_F"
      "AC_ALIGN_CMD_2_OFF\020\000\022\035\n\031CAN_RX_FAC_ALIGN"
      "_CMD_2_ON\020\001\"[\n\032Can_rx_fac_align_cmd_1Typ"
      "e\022\036\n\032CAN_RX_FAC_ALIGN_CMD_1_OFF\020\000\022\035\n\031CAN"
      "_RX_FAC_ALIGN_CMD_1_ON\020\001\"\364\003\n\014Vehicle5_5f"
      "4\022_\n\032can_rx_yaw_rate_bias_shift\030\001 \001(\0162;."
      "apollo.drivers.Vehicle5_5f4.Can_rx_yaw_r"
      "ate_bias_shiftType\022\"\n\032can_rx_steering_ge"
      "ar_ratio\030\002 \001(\001\022\030\n\020can_rx_wheelbase\030\003 \001(\001"
      "\022!\n\031can_rx_distance_rear_axle\030\004 \001(\001\022$\n\034c"
      "an_rx_cw_blockage_threshold\030\005 \001(\001\022\"\n\032can"
      "_rx_funnel_offset_right\030\006 \001(\001\022!\n\031can_rx_"
      "funnel_offset_left\030\007 \001(\001\022\035\n\025can_rx_beamw"
      "idth_vert\030\010 \001(\001\022#\n\033can_rx_oversteer_unde"
      "rsteer\030\t \001(\005\"q\n\036Can_rx_yaw_rate_bias_shi"
      "ftType\022(\n$CAN_RX_YAW_RATE_BIAS_SHIFT_NO_"
      "DETECT\020\000\022%\n!CAN_RX_YAW_RATE_BIAS_SHIFT_D"
      "ETECT\020\001\"\324\001\n\014Vehicle6_5f5\022(\n can_rx_inner"
      "_funnel_offset_right\030\001 \001(\001\022\'\n\037can_rx_inn"
      "er_funnel_offset_left\030\002 \001(\001\022$\n\034can_volvo"
      "_fa_range_max_short\030\003 \001(\005\022%\n\035can_volvo_f"
      "a_min_vspeed_short\030\004 \001(\001\022$\n\034can_volvo_fa"
      "_aalign_estimate\030\005 \001(\001\"\230\n\n\tDelphiESR\022%\n\006"
      "header\030\001 \001(\0132\025.apollo.common.Header\0228\n\017e"
      "sr_status9_5e8\030\002 \001(\0132\037.apollo.drivers.Es"
      "r_status9_5e8\0228\n\017esr_status6_5e5\030\003 \001(\0132\037"
      ".apollo.drivers.Esr_status6_5e5\0228\n\017esr_s"
      "tatus5_5e4\030\004 \001(\0132\037.apollo.drivers.Esr_st"
      "atus5_5e4\0228\n\017esr_status3_4e2\030\005 \001(\0132\037.apo"
      "llo.drivers.Esr_status3_4e2\0228\n\017esr_statu"
      "s4_4e3\030\006 \001(\0132\037.apollo.drivers.Esr_status"
      "4_4e3\022J\n\030esr_trackmotionpower_540\030\007 \003(\0132"
      "(.apollo.drivers.Esr_trackmotionpower_54"
      "0\022:\n\020acm_inst_req_7e0\030\010 \001(\0132 .apollo.dri"
      "vers.Acm_inst_req_7e0\0228\n\017esr_track01_500"
      "\030\t \003(\0132\037.apollo.drivers.Esr_track01_500\022"
      "6\n\016esr_valid1_5d0\030\n \001(\0132\036.apollo.drivers"
      ".Esr_valid1_5d0\0226\n\016esr_valid2_5d1\030\013 \001(\0132"
      "\036.apollo.drivers.Esr_valid2_5d1\022<\n\021acm_i"
      "nst_resp_7e4\030\014 \001(\0132!.apollo.drivers.Acm_"
      "inst_resp_7e4\0222\n\014vehicle2_4f1\030\r \001(\0132\034.ap"
      "ollo.drivers.Vehicle2_4f1\0222\n\014vehicle1_4f"
      "0\030\016 \001(\0132\034.apollo.drivers.Vehicle1_4f0\0222\n"
      "\014esr_sim1_5c0\030\017 \001(\0132\034.apollo.drivers.Esr"
      "_sim1_5c0\0228\n\017esr_status1_4e0\030\020 \001(\0132\037.apo"
      "llo.drivers.Esr_status1_4e0\0228\n\017esr_statu"
      "s2_4e1\030\021 \001(\0132\037.apollo.drivers.Esr_status"
      "2_4e1\0228\n\017esr_status8_5e7\030\022 \001(\0132\037.apollo."
      "drivers.Esr_status8_5e7\0228\n\017esr_status7_5"
      "e6\030\023 \001(\0132\037.apollo.drivers.Esr_status7_5e"
      "6\0222\n\014vehicle3_5f2\030\024 \001(\0132\034.apollo.drivers"
      ".Vehicle3_5f2\0222\n\014vehicle4_5f3\030\025 \001(\0132\034.ap"
      "ollo.drivers.Vehicle4_5f3\0222\n\014vehicle5_5f"
      "4\030\026 \001(\0132\034.apollo.drivers.Vehicle5_5f4\0222\n"
      "\014vehicle6_5f5\030\027 \001(\0132\034.apollo.drivers.Veh"
      "icle6_5f5"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 18849);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drivers/delphi_esr.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_common_2fheader_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_drivers_2fdelphi_5fesr_2eproto

const ::google::protobuf::EnumDescriptor* Esr_status6_5e5_Can_tx_vertical_align_updatedType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[0];
}
bool Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::CAN_TX_VERTICAL_ALIGN_UPDATED_NOT_UPDATED;
const Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::CAN_TX_VERTICAL_ALIGN_UPDATED_UPDATED;
const Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::Can_tx_vertical_align_updatedType_MIN;
const Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::Can_tx_vertical_align_updatedType_MAX;
const int Esr_status6_5e5::Can_tx_vertical_align_updatedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status6_5e5_Can_tx_found_targetType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[1];
}
bool Esr_status6_5e5_Can_tx_found_targetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::CAN_TX_FOUND_TARGET_NOT_FOUND;
const Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::CAN_TX_FOUND_TARGET_FOUND;
const Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::Can_tx_found_targetType_MIN;
const Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::Can_tx_found_targetType_MAX;
const int Esr_status6_5e5::Can_tx_found_targetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status6_5e5_Can_tx_factory_align_status_2Type_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[2];
}
bool Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_OFF;
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_BUSY;
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_SUCCESS;
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_NO_TARGET;
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_DEV_TOO_LARGE;
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_LARGE;
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::Can_tx_factory_align_status_2Type_MIN;
const Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::Can_tx_factory_align_status_2Type_MAX;
const int Esr_status6_5e5::Can_tx_factory_align_status_2Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status6_5e5_Can_tx_factory_align_status_1Type_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[3];
}
bool Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_OFF;
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_BUSY;
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_SUCCESS;
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_NO_TARGET;
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_DEV_TOO_LARGE;
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LARGE;
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::Can_tx_factory_align_status_1Type_MIN;
const Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::Can_tx_factory_align_status_1Type_MAX;
const int Esr_status6_5e5::Can_tx_factory_align_status_1Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status6_5e5_Can_tx_recommend_unconvergeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[4];
}
bool Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOMMEND;
const Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::CAN_TX_RECOMMEND_UNCONVERGE_RECOMMEND;
const Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::Can_tx_recommend_unconvergeType_MIN;
const Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::Can_tx_recommend_unconvergeType_MAX;
const int Esr_status6_5e5::Can_tx_recommend_unconvergeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status6_5e5_Can_tx_system_power_modeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[5];
}
bool Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_DSP_INIT;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_RADIATE_OFF;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_RADIATE_ON;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_DSP_SHUTDOWN;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_DSP_OFF;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_HOST_SHUTDOWN;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_TEST;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_7INVALID;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::Can_tx_system_power_modeType_MIN;
const Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::Can_tx_system_power_modeType_MAX;
const int Esr_status6_5e5::Can_tx_system_power_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status4_4e3_Can_tx_truck_target_detType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[6];
}
bool Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED;
const Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::CAN_TX_TRUCK_TARGET_DET_DETECTED;
const Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::Can_tx_truck_target_detType_MIN;
const Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::Can_tx_truck_target_detType_MAX;
const int Esr_status4_4e3::Can_tx_truck_target_detType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[7];
}
bool Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_DETECTED;
const Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::CAN_TX_LR_ONLY_GRATING_LOBE_DET_DETECTED;
const Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::Can_tx_lr_only_grating_lobe_detType_MIN;
const Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::Can_tx_lr_only_grating_lobe_detType_MAX;
const int Esr_status4_4e3::Can_tx_lr_only_grating_lobe_detType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status4_4e3_Can_tx_sidelobe_blockageType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[8];
}
bool Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::CAN_TX_SIDELOBE_BLOCKAGE_OFF;
const Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::CAN_TX_SIDELOBE_BLOCKAGE_ON;
const Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::Can_tx_sidelobe_blockageType_MIN;
const Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::Can_tx_sidelobe_blockageType_MAX;
const int Esr_status4_4e3::Can_tx_sidelobe_blockageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status4_4e3_Can_tx_partial_blockageType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[9];
}
bool Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED;
const Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::CAN_TX_PARTIAL_BLOCKAGE_BLOCKED;
const Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::Can_tx_partial_blockageType_MIN;
const Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::Can_tx_partial_blockageType_MAX;
const int Esr_status4_4e3::Can_tx_partial_blockageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status4_4e3_Can_tx_mr_lr_modeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[10];
}
bool Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_RESERVED;
const Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_OUTPUT_ONLY_MEDIUM_RANGE_TRACKS;
const Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_OUTPUT_ONLY_LONG_RANGE_TRACKS;
const Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_LONG;
const Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::Can_tx_mr_lr_modeType_MIN;
const Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::Can_tx_mr_lr_modeType_MAX;
const int Esr_status4_4e3::Can_tx_mr_lr_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_track01_500_Can_tx_track_grouping_changedType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[11];
}
bool Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGUNCHANGED;
const Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGCHANGED;
const Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::Can_tx_track_grouping_changedType_MIN;
const Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::Can_tx_track_grouping_changedType_MAX;
const int Esr_track01_500::Can_tx_track_grouping_changedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_track01_500_Can_tx_track_oncomingType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[12];
}
bool Esr_track01_500_Can_tx_track_oncomingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::CAN_TX_TRACK_ONCOMING_NOTONCOMING;
const Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::CAN_TX_TRACK_ONCOMING_ONCOMING;
const Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::Can_tx_track_oncomingType_MIN;
const Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::Can_tx_track_oncomingType_MAX;
const int Esr_track01_500::Can_tx_track_oncomingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_track01_500_Can_tx_track_bridge_objectType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[13];
}
bool Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE;
const Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE;
const Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::Can_tx_track_bridge_objectType_MIN;
const Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::Can_tx_track_bridge_objectType_MAX;
const int Esr_track01_500::Can_tx_track_bridge_objectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_track01_500_Can_tx_track_statusType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[14];
}
bool Esr_track01_500_Can_tx_track_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NO_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NEW_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NEW_UPDATED_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_UPDATED_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_COASTED_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_MERGED_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_INVALID_COASTED_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NEW_COASTED_TARGET;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::Can_tx_track_statusType_MIN;
const Esr_track01_500_Can_tx_track_statusType Esr_track01_500::Can_tx_track_statusType_MAX;
const int Esr_track01_500::Can_tx_track_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_track01_500_Can_tx_track_med_range_modeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[15];
}
bool Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE;
const Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_MR_UPDATE_ONLY;
const Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_LR_UPDATE_ONLY;
const Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE;
const Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::Can_tx_track_med_range_modeType_MIN;
const Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::Can_tx_track_med_range_modeType_MAX;
const int Esr_track01_500::Can_tx_track_med_range_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_mr_only_transmitType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[16];
}
bool Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::CAN_RX_MR_ONLY_TRANSMIT_OFF;
const Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::CAN_RX_MR_ONLY_TRANSMIT_ON;
const Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::Can_rx_mr_only_transmitType_MIN;
const Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::Can_rx_mr_only_transmitType_MAX;
const int Vehicle2_4f1::Can_rx_mr_only_transmitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_lr_only_transmitType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[17];
}
bool Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::CAN_RX_LR_ONLY_TRANSMIT_OFF;
const Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::CAN_RX_LR_ONLY_TRANSMIT_ON;
const Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::Can_rx_lr_only_transmitType_MIN;
const Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::Can_rx_lr_only_transmitType_MAX;
const int Vehicle2_4f1::Can_rx_lr_only_transmitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_clear_faultsType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[18];
}
bool Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::CAN_RX_CLEAR_FAULTS_OFF;
const Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::CAN_RX_CLEAR_FAULTS_ON;
const Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::Can_rx_clear_faultsType_MIN;
const Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::Can_rx_clear_faultsType_MAX;
const int Vehicle2_4f1::Can_rx_clear_faultsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_use_angle_misalignmentType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[19];
}
bool Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::CAN_RX_USE_ANGLE_MISALIGNMENT_OFF;
const Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::CAN_RX_USE_ANGLE_MISALIGNMENT_ON;
const Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::Can_rx_use_angle_misalignmentType_MIN;
const Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::Can_rx_use_angle_misalignmentType_MAX;
const int Vehicle2_4f1::Can_rx_use_angle_misalignmentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_turn_signal_statusType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[20];
}
bool Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_OFF;
const Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_LEFT;
const Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_RIGHT;
const Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_INVALID_3;
const Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::Can_rx_turn_signal_statusType_MIN;
const Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::Can_rx_turn_signal_statusType_MAX;
const int Vehicle2_4f1::Can_rx_turn_signal_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_blockage_disableType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[21];
}
bool Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::CAN_RX_BLOCKAGE_DISABLE_ENABLED;
const Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::CAN_RX_BLOCKAGE_DISABLE_DISABLED;
const Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::Can_rx_blockage_disableType_MIN;
const Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::Can_rx_blockage_disableType_MAX;
const int Vehicle2_4f1::Can_rx_blockage_disableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_vehicle_speed_validityType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[22];
}
bool Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::CAN_RX_VEHICLE_SPEED_VALIDITY_INVALID;
const Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::CAN_RX_VEHICLE_SPEED_VALIDITY_VALID;
const Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::Can_rx_vehicle_speed_validityType_MIN;
const Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::Can_rx_vehicle_speed_validityType_MAX;
const int Vehicle2_4f1::Can_rx_vehicle_speed_validityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_mmr_upside_downType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[23];
}
bool Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::CAN_RX_MMR_UPSIDE_DOWN_RIGHT_SIDE_UP;
const Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::CAN_RX_MMR_UPSIDE_DOWN_UPSIDE_DOWN;
const Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::Can_rx_mmr_upside_downType_MIN;
const Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::Can_rx_mmr_upside_downType_MAX;
const int Vehicle2_4f1::Can_rx_mmr_upside_downType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_wiper_statusType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[24];
}
bool Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::CAN_RX_WIPER_STATUS_OFF;
const Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::CAN_RX_WIPER_STATUS_ON;
const Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::Can_rx_wiper_statusType_MIN;
const Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::Can_rx_wiper_statusType_MAX;
const int Vehicle2_4f1::Can_rx_wiper_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_raw_data_enableType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[25];
}
bool Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::CAN_RX_RAW_DATA_ENABLE_FILTERED;
const Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::CAN_RX_RAW_DATA_ENABLE_RAW;
const Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::Can_rx_raw_data_enableType_MIN;
const Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::Can_rx_raw_data_enableType_MAX;
const int Vehicle2_4f1::Can_rx_raw_data_enableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_radar_cmd_radiateType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[26];
}
bool Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::CAN_RX_RADAR_CMD_RADIATE_OFF;
const Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::CAN_RX_RADAR_CMD_RADIATE_ON;
const Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::Can_rx_radar_cmd_radiateType_MIN;
const Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::Can_rx_radar_cmd_radiateType_MAX;
const int Vehicle2_4f1::Can_rx_radar_cmd_radiateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle2_4f1_Can_rx_grouping_modeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[27];
}
bool Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_NO_GROUPING;
const Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_GROUP_MOVING_ONLY;
const Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_GROUP_STATIONARY_ONLY;
const Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
const Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::Can_rx_grouping_modeType_MIN;
const Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::Can_rx_grouping_modeType_MAX;
const int Vehicle2_4f1::Can_rx_grouping_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_validityType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[28];
}
bool Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_VALIDITY_INVALID;
const Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_VALIDITY_VALID;
const Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::Can_rx_steering_angle_validityType_MIN;
const Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::Can_rx_steering_angle_validityType_MAX;
const int Vehicle1_4f0::Can_rx_steering_angle_validityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_signType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[29];
}
bool Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLOCKWISE;
const Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE;
const Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::Can_rx_steering_angle_signType_MIN;
const Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::Can_rx_steering_angle_signType_MAX;
const int Vehicle1_4f0::Can_rx_steering_angle_signType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_rate_signType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[30];
}
bool Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTERCLOCKWISE;
const Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_RATE_SIGN_CLOCKWISE;
const Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::Can_rx_steering_angle_rate_signType_MIN;
const Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::Can_rx_steering_angle_rate_signType_MAX;
const int Vehicle1_4f0::Can_rx_steering_angle_rate_signType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle1_4f0_Can_rx_yaw_rate_validityType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[31];
}
bool Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::CAN_RX_YAW_RATE_VALIDITY_INVALID;
const Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::CAN_RX_YAW_RATE_VALIDITY_VALID;
const Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::Can_rx_yaw_rate_validityType_MIN;
const Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::Can_rx_yaw_rate_validityType_MAX;
const int Vehicle1_4f0::Can_rx_yaw_rate_validityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle1_4f0_Can_rx_vehicle_speed_directionType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[32];
}
bool Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::CAN_RX_VEHICLE_SPEED_DIRECTION_FORWARD;
const Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::CAN_RX_VEHICLE_SPEED_DIRECTION_REVERSE;
const Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::Can_rx_vehicle_speed_directionType_MIN;
const Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::Can_rx_vehicle_speed_directionType_MAX;
const int Vehicle1_4f0::Can_rx_vehicle_speed_directionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_track_idType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[33];
}
bool Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::CAN_RX_SIM_TRACK_ID_NO_TARGET;
const Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::CAN_RX_SIM_TRACK_ID_TARGET_1;
const Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::CAN_RX_SIM_TRACK_ID_TARGET_2;
const Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::Can_rx_sim_track_idType_MIN;
const Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::Can_rx_sim_track_idType_MAX;
const int Esr_sim1_5c0::Can_rx_sim_track_idType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_statusType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[34];
}
bool Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_INVALID;
const Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_NEW;
const Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_UPDATED;
const Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_COASTED;
const Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::Can_rx_sim_statusType_MIN;
const Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::Can_rx_sim_statusType_MAX;
const int Esr_sim1_5c0::Can_rx_sim_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_functionType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[35];
}
bool Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_ACC;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_RI;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_FCW_MOVE;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_FCW_STAT;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_CMBB_MOVE;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_CMBB_STAT;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_ALL_MOVING_ACC_FCW_CMBB;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::Can_rx_sim_functionType_MIN;
const Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::Can_rx_sim_functionType_MAX;
const int Esr_sim1_5c0::Can_rx_sim_functionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status2_4e1_Can_tx_raw_data_modeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[36];
}
bool Esr_status2_4e1_Can_tx_raw_data_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::CAN_TX_RAW_DATA_MODE_FILTERED;
const Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::CAN_TX_RAW_DATA_MODE_RAW;
const Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::Can_tx_raw_data_modeType_MIN;
const Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::Can_tx_raw_data_modeType_MAX;
const int Esr_status2_4e1::Can_tx_raw_data_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status2_4e1_Can_tx_range_perf_errorType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[37];
}
bool Esr_status2_4e1_Can_tx_range_perf_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::CAN_TX_RANGE_PERF_ERROR_NOT_BLOCKED;
const Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::CAN_TX_RANGE_PERF_ERROR_BLOCKED;
const Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::Can_tx_range_perf_errorType_MIN;
const Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::Can_tx_range_perf_errorType_MAX;
const int Esr_status2_4e1::Can_tx_range_perf_errorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status2_4e1_Can_tx_overheat_errorType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[38];
}
bool Esr_status2_4e1_Can_tx_overheat_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::CAN_TX_OVERHEAT_ERROR_NOT_OVERTEMP;
const Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::CAN_TX_OVERHEAT_ERROR_OVERTEMP;
const Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::Can_tx_overheat_errorType_MIN;
const Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::Can_tx_overheat_errorType_MAX;
const int Esr_status2_4e1::Can_tx_overheat_errorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status2_4e1_Can_tx_internal_errorType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[39];
}
bool Esr_status2_4e1_Can_tx_internal_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::CAN_TX_INTERNAL_ERROR_NOT_FAILED;
const Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::CAN_TX_INTERNAL_ERROR_FAILED;
const Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::Can_tx_internal_errorType_MIN;
const Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::Can_tx_internal_errorType_MAX;
const int Esr_status2_4e1::Can_tx_internal_errorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status2_4e1_Can_tx_grouping_modeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[40];
}
bool Esr_status2_4e1_Can_tx_grouping_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_NO_GROUPING;
const Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_GROUP_MOVING_ONLY;
const Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_GROUP_STATIONARY_ONLY;
const Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
const Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::Can_tx_grouping_modeType_MIN;
const Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::Can_tx_grouping_modeType_MAX;
const int Esr_status2_4e1::Can_tx_grouping_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esr_status2_4e1_Can_tx_xcvr_operationalType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[41];
}
bool Esr_status2_4e1_Can_tx_xcvr_operationalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::CAN_TX_XCVR_OPERATIONAL_OFF;
const Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::CAN_TX_XCVR_OPERATIONAL_ON;
const Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::Can_tx_xcvr_operationalType_MIN;
const Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::Can_tx_xcvr_operationalType_MAX;
const int Esr_status2_4e1::Can_tx_xcvr_operationalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle3_5f2_Can_rx_serv_align_typeType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[42];
}
bool Vehicle3_5f2_Can_rx_serv_align_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER;
const Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TRACK;
const Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::Can_rx_serv_align_typeType_MIN;
const Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::Can_rx_serv_align_typeType_MAX;
const int Vehicle3_5f2::Can_rx_serv_align_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle3_5f2_Can_rx_serv_align_enableType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[43];
}
bool Vehicle3_5f2_Can_rx_serv_align_enableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::CAN_RX_SERV_ALIGN_ENABLE_DISABLED;
const Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::CAN_RX_SERV_ALIGN_ENABLE_ENABLED;
const Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::Can_rx_serv_align_enableType_MIN;
const Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::Can_rx_serv_align_enableType_MAX;
const int Vehicle3_5f2::Can_rx_serv_align_enableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle3_5f2_Can_rx_auto_align_convergedType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[44];
}
bool Vehicle3_5f2_Can_rx_auto_align_convergedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CONVERGED;
const Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED;
const Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::Can_rx_auto_align_convergedType_MIN;
const Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::Can_rx_auto_align_convergedType_MAX;
const int Vehicle3_5f2::Can_rx_auto_align_convergedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle3_5f2_Can_rx_auto_align_disableType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[45];
}
bool Vehicle3_5f2_Can_rx_auto_align_disableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_DISABLE_ENABLED;
const Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_DISABLE_DISABLED;
const Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::Can_rx_auto_align_disableType_MIN;
const Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::Can_rx_auto_align_disableType_MAX;
const int Vehicle3_5f2::Can_rx_auto_align_disableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle3_5f2_Can_rx_wheel_slipType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[46];
}
bool Vehicle3_5f2_Can_rx_wheel_slipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_NO_CONTROL;
const Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_BRAKE_SLIP_CONTROL;
const Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_TRACTION_SLIP_CONTROL;
const Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_INVALID_3;
const Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::Can_rx_wheel_slipType_MIN;
const Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::Can_rx_wheel_slipType_MAX;
const int Vehicle3_5f2::Can_rx_wheel_slipType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle3_5f2_Can_rx_long_.oel_validityType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[47];
}
bool Vehicle3_5f2_Can_rx_long_.oel_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle3_5f2_Can_rx_long_.oel_validityType Vehicle3_5f2::CAN_RX_LONG_ACCEL_VALIDITY_INVALID;
const Vehicle3_5f2_Can_rx_long_.oel_validityType Vehicle3_5f2::CAN_RX_LONG_ACCEL_VALIDITY_VALID;
const Vehicle3_5f2_Can_rx_long_.oel_validityType Vehicle3_5f2::Can_rx_long_.oel_validityType_MIN;
const Vehicle3_5f2_Can_rx_long_.oel_validityType Vehicle3_5f2::Can_rx_long_.oel_validityType_MAX;
const int Vehicle3_5f2::Can_rx_long_.oel_validityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle3_5f2_Can_rx_lat_.oel_validityType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[48];
}
bool Vehicle3_5f2_Can_rx_lat_.oel_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle3_5f2_Can_rx_lat_.oel_validityType Vehicle3_5f2::CAN_RX_LAT_ACCEL_VALIDITY_INVALID;
const Vehicle3_5f2_Can_rx_lat_.oel_validityType Vehicle3_5f2::CAN_RX_LAT_ACCEL_VALIDITY_VALID;
const Vehicle3_5f2_Can_rx_lat_.oel_validityType Vehicle3_5f2::Can_rx_lat_.oel_validityType_MIN;
const Vehicle3_5f2_Can_rx_lat_.oel_validityType Vehicle3_5f2::Can_rx_lat_.oel_validityType_MAX;
const int Vehicle3_5f2::Can_rx_lat_.oel_validityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[49];
}
bool Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_2_OFF;
const Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_2_ON;
const Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::Can_rx_fac_align_cmd_2Type_MIN;
const Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::Can_rx_fac_align_cmd_2Type_MAX;
const int Vehicle4_5f3::Can_rx_fac_align_cmd_2Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[50];
}
bool Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_1_OFF;
const Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_1_ON;
const Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::Can_rx_fac_align_cmd_1Type_MIN;
const Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::Can_rx_fac_align_cmd_1Type_MAX;
const int Vehicle4_5f3::Can_rx_fac_align_cmd_1Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_enum_descriptors[51];
}
bool Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::CAN_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT;
const Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT;
const Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::Can_rx_yaw_rate_bias_shiftType_MIN;
const Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::Can_rx_yaw_rate_bias_shiftType_MAX;
const int Vehicle5_5f4::Can_rx_yaw_rate_bias_shiftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_status9_5e8::kCanTxPathId.o3FieldNumber;
const int Esr_status9_5e8::kCanTxPathId.o2FieldNumber;
const int Esr_status9_5e8::kCanTxFilteredXohp.oCipvFieldNumber;
const int Esr_status9_5e8::kCanTxWaterSprayTargetIdFieldNumber;
const int Esr_status9_5e8::kCanTxSerialNum3RdByteFieldNumber;
const int Esr_status9_5e8::kCanTxSideslipAngleFieldNumber;
const int Esr_status9_5e8::kCanTxAvgPwrCwblkgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_status9_5e8::Esr_status9_5e8()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status9_5e8)
}
Esr_status9_5e8::Esr_status9_5e8(const Esr_status9_5e8& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_path_id_.o_3_, &from.can_tx_path_id_.o_3_,
    reinterpret_cast<char*>(&can_tx_avg_pwr_cwblkg_) -
    reinterpret_cast<char*>(&can_tx_path_id_.o_3_) + sizeof(can_tx_avg_pwr_cwblkg_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status9_5e8)
}

void Esr_status9_5e8::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_path_id_.o_3_, 0, reinterpret_cast<char*>(&can_tx_avg_pwr_cwblkg_) -
    reinterpret_cast<char*>(&can_tx_path_id_.o_3_) + sizeof(can_tx_avg_pwr_cwblkg_));
}

Esr_status9_5e8::~Esr_status9_5e8() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status9_5e8)
  SharedDtor();
}

void Esr_status9_5e8::SharedDtor() {
}

void Esr_status9_5e8::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_status9_5e8::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_status9_5e8& Esr_status9_5e8::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_status9_5e8* Esr_status9_5e8::New(::google::protobuf::Arena* arena) const {
  Esr_status9_5e8* n = new Esr_status9_5e8;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_status9_5e8::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status9_5e8)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&can_tx_path_id_.o_3_, 0, reinterpret_cast<char*>(&can_tx_avg_pwr_cwblkg_) -
      reinterpret_cast<char*>(&can_tx_path_id_.o_3_) + sizeof(can_tx_avg_pwr_cwblkg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_status9_5e8::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_status9_5e8)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 can_tx_path_id_.o_3 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_path_id_.o_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_.o_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_path_id_.o_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_tx_path_id_.o_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_.o_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_filtered_xohp_.o_cipv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_can_tx_filtered_xohp_.o_cipv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_filtered_xohp_.o_cipv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_water_spray_target_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_tx_water_spray_target_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_water_spray_target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_serial_num_3rd_byte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_can_tx_serial_num_3rd_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_serial_num_3rd_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_sideslip_angle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_can_tx_sideslip_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_sideslip_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_avg_pwr_cwblkg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_can_tx_avg_pwr_cwblkg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_avg_pwr_cwblkg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_status9_5e8)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_status9_5e8)
  return false;
#undef DO_
}

void Esr_status9_5e8::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_status9_5e8)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_path_id_.o_3 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_tx_path_id_.o_3(), output);
  }

  // optional int32 can_tx_path_id_.o_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_tx_path_id_.o_2(), output);
  }

  // optional double can_tx_filtered_xohp_.o_cipv = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->can_tx_filtered_xohp_.o_cipv(), output);
  }

  // optional int32 can_tx_water_spray_target_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_tx_water_spray_target_id(), output);
  }

  // optional int32 can_tx_serial_num_3rd_byte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->can_tx_serial_num_3rd_byte(), output);
  }

  // optional double can_tx_sideslip_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->can_tx_sideslip_angle(), output);
  }

  // optional int32 can_tx_avg_pwr_cwblkg = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->can_tx_avg_pwr_cwblkg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_status9_5e8)
}

::google::protobuf::uint8* Esr_status9_5e8::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status9_5e8)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_path_id_.o_3 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_tx_path_id_.o_3(), target);
  }

  // optional int32 can_tx_path_id_.o_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_tx_path_id_.o_2(), target);
  }

  // optional double can_tx_filtered_xohp_.o_cipv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->can_tx_filtered_xohp_.o_cipv(), target);
  }

  // optional int32 can_tx_water_spray_target_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_tx_water_spray_target_id(), target);
  }

  // optional int32 can_tx_serial_num_3rd_byte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->can_tx_serial_num_3rd_byte(), target);
  }

  // optional double can_tx_sideslip_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->can_tx_sideslip_angle(), target);
  }

  // optional int32 can_tx_avg_pwr_cwblkg = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->can_tx_avg_pwr_cwblkg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status9_5e8)
  return target;
}

size_t Esr_status9_5e8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status9_5e8)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 can_tx_path_id_.o_3 = 1;
    if (has_can_tx_path_id_.o_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_.o_3());
    }

    // optional int32 can_tx_path_id_.o_2 = 2;
    if (has_can_tx_path_id_.o_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_.o_2());
    }

    // optional double can_tx_filtered_xohp_.o_cipv = 3;
    if (has_can_tx_filtered_xohp_.o_cipv()) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_water_spray_target_id = 4;
    if (has_can_tx_water_spray_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_water_spray_target_id());
    }

    // optional int32 can_tx_serial_num_3rd_byte = 5;
    if (has_can_tx_serial_num_3rd_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_serial_num_3rd_byte());
    }

    // optional double can_tx_sideslip_angle = 6;
    if (has_can_tx_sideslip_angle()) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_avg_pwr_cwblkg = 7;
    if (has_can_tx_avg_pwr_cwblkg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_avg_pwr_cwblkg());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_status9_5e8::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status9_5e8)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status9_5e8* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_status9_5e8>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status9_5e8)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_status9_5e8)
    MergeFrom(*source);
  }
}

void Esr_status9_5e8::MergeFrom(const Esr_status9_5e8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status9_5e8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_path_id_.o_3_ = from.can_tx_path_id_.o_3_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_path_id_.o_2_ = from.can_tx_path_id_.o_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_filtered_xohp_.o_cipv_ = from.can_tx_filtered_xohp_.o_cipv_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_water_spray_target_id_ = from.can_tx_water_spray_target_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_serial_num_3rd_byte_ = from.can_tx_serial_num_3rd_byte_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_sideslip_angle_ = from.can_tx_sideslip_angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_avg_pwr_cwblkg_ = from.can_tx_avg_pwr_cwblkg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status9_5e8::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status9_5e8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status9_5e8::CopyFrom(const Esr_status9_5e8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status9_5e8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status9_5e8::IsInitialized() const {
  return true;
}

void Esr_status9_5e8::Swap(Esr_status9_5e8* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_status9_5e8::InternalSwap(Esr_status9_5e8* other) {
  std::swap(can_tx_path_id_.o_3_, other->can_tx_path_id_.o_3_);
  std::swap(can_tx_path_id_.o_2_, other->can_tx_path_id_.o_2_);
  std::swap(can_tx_filtered_xohp_.o_cipv_, other->can_tx_filtered_xohp_.o_cipv_);
  std::swap(can_tx_water_spray_target_id_, other->can_tx_water_spray_target_id_);
  std::swap(can_tx_serial_num_3rd_byte_, other->can_tx_serial_num_3rd_byte_);
  std::swap(can_tx_sideslip_angle_, other->can_tx_sideslip_angle_);
  std::swap(can_tx_avg_pwr_cwblkg_, other->can_tx_avg_pwr_cwblkg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_status9_5e8::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_status9_5e8

// optional int32 can_tx_path_id_.o_3 = 1;
bool Esr_status9_5e8::has_can_tx_path_id_.o_3() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_status9_5e8::set_has_can_tx_path_id_.o_3() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_status9_5e8::clear_has_can_tx_path_id_.o_3() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_status9_5e8::clear_can_tx_path_id_.o_3() {
  can_tx_path_id_.o_3_ = 0;
  clear_has_can_tx_path_id_.o_3();
}
::google::protobuf::int32 Esr_status9_5e8::can_tx_path_id_.o_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_path_id_.o_3)
  return can_tx_path_id_.o_3_;
}
void Esr_status9_5e8::set_can_tx_path_id_.o_3(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_.o_3();
  can_tx_path_id_.o_3_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_path_id_.o_3)
}

// optional int32 can_tx_path_id_.o_2 = 2;
bool Esr_status9_5e8::has_can_tx_path_id_.o_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_status9_5e8::set_has_can_tx_path_id_.o_2() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_status9_5e8::clear_has_can_tx_path_id_.o_2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_status9_5e8::clear_can_tx_path_id_.o_2() {
  can_tx_path_id_.o_2_ = 0;
  clear_has_can_tx_path_id_.o_2();
}
::google::protobuf::int32 Esr_status9_5e8::can_tx_path_id_.o_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_path_id_.o_2)
  return can_tx_path_id_.o_2_;
}
void Esr_status9_5e8::set_can_tx_path_id_.o_2(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_.o_2();
  can_tx_path_id_.o_2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_path_id_.o_2)
}

// optional double can_tx_filtered_xohp_.o_cipv = 3;
bool Esr_status9_5e8::has_can_tx_filtered_xohp_.o_cipv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_status9_5e8::set_has_can_tx_filtered_xohp_.o_cipv() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_status9_5e8::clear_has_can_tx_filtered_xohp_.o_cipv() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_status9_5e8::clear_can_tx_filtered_xohp_.o_cipv() {
  can_tx_filtered_xohp_.o_cipv_ = 0;
  clear_has_can_tx_filtered_xohp_.o_cipv();
}
double Esr_status9_5e8::can_tx_filtered_xohp_.o_cipv() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_filtered_xohp_.o_cipv)
  return can_tx_filtered_xohp_.o_cipv_;
}
void Esr_status9_5e8::set_can_tx_filtered_xohp_.o_cipv(double value) {
  set_has_can_tx_filtered_xohp_.o_cipv();
  can_tx_filtered_xohp_.o_cipv_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_filtered_xohp_.o_cipv)
}

// optional int32 can_tx_water_spray_target_id = 4;
bool Esr_status9_5e8::has_can_tx_water_spray_target_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_status9_5e8::set_has_can_tx_water_spray_target_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_status9_5e8::clear_has_can_tx_water_spray_target_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_status9_5e8::clear_can_tx_water_spray_target_id() {
  can_tx_water_spray_target_id_ = 0;
  clear_has_can_tx_water_spray_target_id();
}
::google::protobuf::int32 Esr_status9_5e8::can_tx_water_spray_target_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_water_spray_target_id)
  return can_tx_water_spray_target_id_;
}
void Esr_status9_5e8::set_can_tx_water_spray_target_id(::google::protobuf::int32 value) {
  set_has_can_tx_water_spray_target_id();
  can_tx_water_spray_target_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_water_spray_target_id)
}

// optional int32 can_tx_serial_num_3rd_byte = 5;
bool Esr_status9_5e8::has_can_tx_serial_num_3rd_byte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_status9_5e8::set_has_can_tx_serial_num_3rd_byte() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_status9_5e8::clear_has_can_tx_serial_num_3rd_byte() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_status9_5e8::clear_can_tx_serial_num_3rd_byte() {
  can_tx_serial_num_3rd_byte_ = 0;
  clear_has_can_tx_serial_num_3rd_byte();
}
::google::protobuf::int32 Esr_status9_5e8::can_tx_serial_num_3rd_byte() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_serial_num_3rd_byte)
  return can_tx_serial_num_3rd_byte_;
}
void Esr_status9_5e8::set_can_tx_serial_num_3rd_byte(::google::protobuf::int32 value) {
  set_has_can_tx_serial_num_3rd_byte();
  can_tx_serial_num_3rd_byte_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_serial_num_3rd_byte)
}

// optional double can_tx_sideslip_angle = 6;
bool Esr_status9_5e8::has_can_tx_sideslip_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esr_status9_5e8::set_has_can_tx_sideslip_angle() {
  _has_bits_[0] |= 0x00000020u;
}
void Esr_status9_5e8::clear_has_can_tx_sideslip_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esr_status9_5e8::clear_can_tx_sideslip_angle() {
  can_tx_sideslip_angle_ = 0;
  clear_has_can_tx_sideslip_angle();
}
double Esr_status9_5e8::can_tx_sideslip_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_sideslip_angle)
  return can_tx_sideslip_angle_;
}
void Esr_status9_5e8::set_can_tx_sideslip_angle(double value) {
  set_has_can_tx_sideslip_angle();
  can_tx_sideslip_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_sideslip_angle)
}

// optional int32 can_tx_avg_pwr_cwblkg = 7;
bool Esr_status9_5e8::has_can_tx_avg_pwr_cwblkg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esr_status9_5e8::set_has_can_tx_avg_pwr_cwblkg() {
  _has_bits_[0] |= 0x00000040u;
}
void Esr_status9_5e8::clear_has_can_tx_avg_pwr_cwblkg() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esr_status9_5e8::clear_can_tx_avg_pwr_cwblkg() {
  can_tx_avg_pwr_cwblkg_ = 0;
  clear_has_can_tx_avg_pwr_cwblkg();
}
::google::protobuf::int32 Esr_status9_5e8::can_tx_avg_pwr_cwblkg() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_avg_pwr_cwblkg)
  return can_tx_avg_pwr_cwblkg_;
}
void Esr_status9_5e8::set_can_tx_avg_pwr_cwblkg(::google::protobuf::int32 value) {
  set_has_can_tx_avg_pwr_cwblkg();
  can_tx_avg_pwr_cwblkg_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_avg_pwr_cwblkg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_status6_5e5::kCanTxSwVersionDsp3RdByteFieldNumber;
const int Esr_status6_5e5::kCanTxVerticalAlignUpdatedFieldNumber;
const int Esr_status6_5e5::kCanTxVerticalMisalignmentFieldNumber;
const int Esr_status6_5e5::kCanTxServAlignUpdatesDoneFieldNumber;
const int Esr_status6_5e5::kCanTxFoundTargetFieldNumber;
const int Esr_status6_5e5::kCanTxFactoryMisalignmentFieldNumber;
const int Esr_status6_5e5::kCanTxFactoryAlignStatus2FieldNumber;
const int Esr_status6_5e5::kCanTxFactoryAlignStatus1FieldNumber;
const int Esr_status6_5e5::kCanTxRecommendUnconvergeFieldNumber;
const int Esr_status6_5e5::kCanTxWaveDiffA2DFieldNumber;
const int Esr_status6_5e5::kCanTxSystemPowerModeFieldNumber;
const int Esr_status6_5e5::kCanTxSupplyN5VA2DFieldNumber;
const int Esr_status6_5e5::kCanTxSupply1P8VA2DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_status6_5e5::Esr_status6_5e5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status6_5e5)
}
Esr_status6_5e5::Esr_status6_5e5(const Esr_status6_5e5& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_sw_version_dsp_3rd_byte_, &from.can_tx_sw_version_dsp_3rd_byte_,
    reinterpret_cast<char*>(&can_tx_supply_1p8v_a2d_) -
    reinterpret_cast<char*>(&can_tx_sw_version_dsp_3rd_byte_) + sizeof(can_tx_supply_1p8v_a2d_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status6_5e5)
}

void Esr_status6_5e5::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_sw_version_dsp_3rd_byte_, 0, reinterpret_cast<char*>(&can_tx_supply_1p8v_a2d_) -
    reinterpret_cast<char*>(&can_tx_sw_version_dsp_3rd_byte_) + sizeof(can_tx_supply_1p8v_a2d_));
}

Esr_status6_5e5::~Esr_status6_5e5() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status6_5e5)
  SharedDtor();
}

void Esr_status6_5e5::SharedDtor() {
}

void Esr_status6_5e5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_status6_5e5::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_status6_5e5& Esr_status6_5e5::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_status6_5e5* Esr_status6_5e5::New(::google::protobuf::Arena* arena) const {
  Esr_status6_5e5* n = new Esr_status6_5e5;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_status6_5e5::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status6_5e5)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&can_tx_sw_version_dsp_3rd_byte_, 0, reinterpret_cast<char*>(&can_tx_factory_align_status_1_) -
      reinterpret_cast<char*>(&can_tx_sw_version_dsp_3rd_byte_) + sizeof(can_tx_factory_align_status_1_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&can_tx_recommend_unconverge_, 0, reinterpret_cast<char*>(&can_tx_supply_1p8v_a2d_) -
      reinterpret_cast<char*>(&can_tx_recommend_unconverge_) + sizeof(can_tx_supply_1p8v_a2d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_status6_5e5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_status6_5e5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_sw_version_dsp_3rd_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_sw_version_dsp_3rd_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(value)) {
            set_can_tx_vertical_align_updated(static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_vertical_misalignment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_can_tx_vertical_misalignment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_vertical_misalignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_serv_align_updates_done = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_tx_serv_align_updates_done();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_serv_align_updates_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType_IsValid(value)) {
            set_can_tx_found_target(static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_factory_misalignment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_can_tx_factory_misalignment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_factory_misalignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(value)) {
            set_can_tx_factory_align_status_2(static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(value)) {
            set_can_tx_factory_align_status_1(static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(value)) {
            set_can_tx_recommend_unconverge(static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_wave_diff_a2d = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_can_tx_wave_diff_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_wave_diff_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(value)) {
            set_can_tx_system_power_mode(static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_supply_n5v_a2d = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_can_tx_supply_n5v_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_supply_n5v_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_supply_1p8v_a2d = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_can_tx_supply_1p8v_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_supply_1p8v_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_status6_5e5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_status6_5e5)
  return false;
#undef DO_
}

void Esr_status6_5e5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_status6_5e5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_tx_sw_version_dsp_3rd_byte(), output);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->can_tx_vertical_align_updated(), output);
  }

  // optional double can_tx_vertical_misalignment = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->can_tx_vertical_misalignment(), output);
  }

  // optional int32 can_tx_serv_align_updates_done = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_tx_serv_align_updates_done(), output);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->can_tx_found_target(), output);
  }

  // optional double can_tx_factory_misalignment = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->can_tx_factory_misalignment(), output);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->can_tx_factory_align_status_2(), output);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->can_tx_factory_align_status_1(), output);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->can_tx_recommend_unconverge(), output);
  }

  // optional int32 can_tx_wave_diff_a2d = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->can_tx_wave_diff_a2d(), output);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->can_tx_system_power_mode(), output);
  }

  // optional int32 can_tx_supply_n5v_a2d = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->can_tx_supply_n5v_a2d(), output);
  }

  // optional int32 can_tx_supply_1p8v_a2d = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->can_tx_supply_1p8v_a2d(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_status6_5e5)
}

::google::protobuf::uint8* Esr_status6_5e5::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status6_5e5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_tx_sw_version_dsp_3rd_byte(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->can_tx_vertical_align_updated(), target);
  }

  // optional double can_tx_vertical_misalignment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->can_tx_vertical_misalignment(), target);
  }

  // optional int32 can_tx_serv_align_updates_done = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_tx_serv_align_updates_done(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->can_tx_found_target(), target);
  }

  // optional double can_tx_factory_misalignment = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->can_tx_factory_misalignment(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->can_tx_factory_align_status_2(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->can_tx_factory_align_status_1(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->can_tx_recommend_unconverge(), target);
  }

  // optional int32 can_tx_wave_diff_a2d = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->can_tx_wave_diff_a2d(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->can_tx_system_power_mode(), target);
  }

  // optional int32 can_tx_supply_n5v_a2d = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->can_tx_supply_n5v_a2d(), target);
  }

  // optional int32 can_tx_supply_1p8v_a2d = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->can_tx_supply_1p8v_a2d(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status6_5e5)
  return target;
}

size_t Esr_status6_5e5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status6_5e5)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
    if (has_can_tx_sw_version_dsp_3rd_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_sw_version_dsp_3rd_byte());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
    if (has_can_tx_vertical_align_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_vertical_align_updated());
    }

    // optional double can_tx_vertical_misalignment = 3;
    if (has_can_tx_vertical_misalignment()) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_serv_align_updates_done = 4;
    if (has_can_tx_serv_align_updates_done()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_serv_align_updates_done());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
    if (has_can_tx_found_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_found_target());
    }

    // optional double can_tx_factory_misalignment = 6;
    if (has_can_tx_factory_misalignment()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
    if (has_can_tx_factory_align_status_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_factory_align_status_2());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
    if (has_can_tx_factory_align_status_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_factory_align_status_1());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
    if (has_can_tx_recommend_unconverge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_recommend_unconverge());
    }

    // optional int32 can_tx_wave_diff_a2d = 10;
    if (has_can_tx_wave_diff_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_wave_diff_a2d());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
    if (has_can_tx_system_power_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_system_power_mode());
    }

    // optional int32 can_tx_supply_n5v_a2d = 12;
    if (has_can_tx_supply_n5v_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_supply_n5v_a2d());
    }

    // optional int32 can_tx_supply_1p8v_a2d = 13;
    if (has_can_tx_supply_1p8v_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_supply_1p8v_a2d());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_status6_5e5::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status6_5e5)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status6_5e5* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_status6_5e5>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status6_5e5)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_status6_5e5)
    MergeFrom(*source);
  }
}

void Esr_status6_5e5::MergeFrom(const Esr_status6_5e5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status6_5e5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_sw_version_dsp_3rd_byte_ = from.can_tx_sw_version_dsp_3rd_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_vertical_align_updated_ = from.can_tx_vertical_align_updated_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_vertical_misalignment_ = from.can_tx_vertical_misalignment_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_serv_align_updates_done_ = from.can_tx_serv_align_updates_done_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_found_target_ = from.can_tx_found_target_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_factory_misalignment_ = from.can_tx_factory_misalignment_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_factory_align_status_2_ = from.can_tx_factory_align_status_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_factory_align_status_1_ = from.can_tx_factory_align_status_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      can_tx_recommend_unconverge_ = from.can_tx_recommend_unconverge_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_tx_wave_diff_a2d_ = from.can_tx_wave_diff_a2d_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_tx_system_power_mode_ = from.can_tx_system_power_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_tx_supply_n5v_a2d_ = from.can_tx_supply_n5v_a2d_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_tx_supply_1p8v_a2d_ = from.can_tx_supply_1p8v_a2d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status6_5e5::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status6_5e5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status6_5e5::CopyFrom(const Esr_status6_5e5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status6_5e5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status6_5e5::IsInitialized() const {
  return true;
}

void Esr_status6_5e5::Swap(Esr_status6_5e5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_status6_5e5::InternalSwap(Esr_status6_5e5* other) {
  std::swap(can_tx_sw_version_dsp_3rd_byte_, other->can_tx_sw_version_dsp_3rd_byte_);
  std::swap(can_tx_vertical_align_updated_, other->can_tx_vertical_align_updated_);
  std::swap(can_tx_vertical_misalignment_, other->can_tx_vertical_misalignment_);
  std::swap(can_tx_serv_align_updates_done_, other->can_tx_serv_align_updates_done_);
  std::swap(can_tx_found_target_, other->can_tx_found_target_);
  std::swap(can_tx_factory_misalignment_, other->can_tx_factory_misalignment_);
  std::swap(can_tx_factory_align_status_2_, other->can_tx_factory_align_status_2_);
  std::swap(can_tx_factory_align_status_1_, other->can_tx_factory_align_status_1_);
  std::swap(can_tx_recommend_unconverge_, other->can_tx_recommend_unconverge_);
  std::swap(can_tx_wave_diff_a2d_, other->can_tx_wave_diff_a2d_);
  std::swap(can_tx_system_power_mode_, other->can_tx_system_power_mode_);
  std::swap(can_tx_supply_n5v_a2d_, other->can_tx_supply_n5v_a2d_);
  std::swap(can_tx_supply_1p8v_a2d_, other->can_tx_supply_1p8v_a2d_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_status6_5e5::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_status6_5e5

// optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
bool Esr_status6_5e5::has_can_tx_sw_version_dsp_3rd_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_sw_version_dsp_3rd_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_status6_5e5::clear_has_can_tx_sw_version_dsp_3rd_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_status6_5e5::clear_can_tx_sw_version_dsp_3rd_byte() {
  can_tx_sw_version_dsp_3rd_byte_ = 0;
  clear_has_can_tx_sw_version_dsp_3rd_byte();
}
::google::protobuf::int32 Esr_status6_5e5::can_tx_sw_version_dsp_3rd_byte() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_sw_version_dsp_3rd_byte)
  return can_tx_sw_version_dsp_3rd_byte_;
}
void Esr_status6_5e5::set_can_tx_sw_version_dsp_3rd_byte(::google::protobuf::int32 value) {
  set_has_can_tx_sw_version_dsp_3rd_byte();
  can_tx_sw_version_dsp_3rd_byte_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_sw_version_dsp_3rd_byte)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
bool Esr_status6_5e5::has_can_tx_vertical_align_updated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_vertical_align_updated() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_status6_5e5::clear_has_can_tx_vertical_align_updated() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_status6_5e5::clear_can_tx_vertical_align_updated() {
  can_tx_vertical_align_updated_ = 0;
  clear_has_can_tx_vertical_align_updated();
}
::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::can_tx_vertical_align_updated() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_vertical_align_updated)
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType >(can_tx_vertical_align_updated_);
}
void Esr_status6_5e5::set_can_tx_vertical_align_updated(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(value));
  set_has_can_tx_vertical_align_updated();
  can_tx_vertical_align_updated_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_vertical_align_updated)
}

// optional double can_tx_vertical_misalignment = 3;
bool Esr_status6_5e5::has_can_tx_vertical_misalignment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_vertical_misalignment() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_status6_5e5::clear_has_can_tx_vertical_misalignment() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_status6_5e5::clear_can_tx_vertical_misalignment() {
  can_tx_vertical_misalignment_ = 0;
  clear_has_can_tx_vertical_misalignment();
}
double Esr_status6_5e5::can_tx_vertical_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_vertical_misalignment)
  return can_tx_vertical_misalignment_;
}
void Esr_status6_5e5::set_can_tx_vertical_misalignment(double value) {
  set_has_can_tx_vertical_misalignment();
  can_tx_vertical_misalignment_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_vertical_misalignment)
}

// optional int32 can_tx_serv_align_updates_done = 4;
bool Esr_status6_5e5::has_can_tx_serv_align_updates_done() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_serv_align_updates_done() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_status6_5e5::clear_has_can_tx_serv_align_updates_done() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_status6_5e5::clear_can_tx_serv_align_updates_done() {
  can_tx_serv_align_updates_done_ = 0;
  clear_has_can_tx_serv_align_updates_done();
}
::google::protobuf::int32 Esr_status6_5e5::can_tx_serv_align_updates_done() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_serv_align_updates_done)
  return can_tx_serv_align_updates_done_;
}
void Esr_status6_5e5::set_can_tx_serv_align_updates_done(::google::protobuf::int32 value) {
  set_has_can_tx_serv_align_updates_done();
  can_tx_serv_align_updates_done_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_serv_align_updates_done)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
bool Esr_status6_5e5::has_can_tx_found_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_found_target() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_status6_5e5::clear_has_can_tx_found_target() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_status6_5e5::clear_can_tx_found_target() {
  can_tx_found_target_ = 0;
  clear_has_can_tx_found_target();
}
::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::can_tx_found_target() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_found_target)
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType >(can_tx_found_target_);
}
void Esr_status6_5e5::set_can_tx_found_target(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType_IsValid(value));
  set_has_can_tx_found_target();
  can_tx_found_target_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_found_target)
}

// optional double can_tx_factory_misalignment = 6;
bool Esr_status6_5e5::has_can_tx_factory_misalignment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_factory_misalignment() {
  _has_bits_[0] |= 0x00000020u;
}
void Esr_status6_5e5::clear_has_can_tx_factory_misalignment() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esr_status6_5e5::clear_can_tx_factory_misalignment() {
  can_tx_factory_misalignment_ = 0;
  clear_has_can_tx_factory_misalignment();
}
double Esr_status6_5e5::can_tx_factory_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_factory_misalignment)
  return can_tx_factory_misalignment_;
}
void Esr_status6_5e5::set_can_tx_factory_misalignment(double value) {
  set_has_can_tx_factory_misalignment();
  can_tx_factory_misalignment_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_factory_misalignment)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
bool Esr_status6_5e5::has_can_tx_factory_align_status_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_factory_align_status_2() {
  _has_bits_[0] |= 0x00000040u;
}
void Esr_status6_5e5::clear_has_can_tx_factory_align_status_2() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esr_status6_5e5::clear_can_tx_factory_align_status_2() {
  can_tx_factory_align_status_2_ = 0;
  clear_has_can_tx_factory_align_status_2();
}
::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::can_tx_factory_align_status_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_2)
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type >(can_tx_factory_align_status_2_);
}
void Esr_status6_5e5::set_can_tx_factory_align_status_2(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(value));
  set_has_can_tx_factory_align_status_2();
  can_tx_factory_align_status_2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_2)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
bool Esr_status6_5e5::has_can_tx_factory_align_status_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_factory_align_status_1() {
  _has_bits_[0] |= 0x00000080u;
}
void Esr_status6_5e5::clear_has_can_tx_factory_align_status_1() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esr_status6_5e5::clear_can_tx_factory_align_status_1() {
  can_tx_factory_align_status_1_ = 0;
  clear_has_can_tx_factory_align_status_1();
}
::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::can_tx_factory_align_status_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_1)
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type >(can_tx_factory_align_status_1_);
}
void Esr_status6_5e5::set_can_tx_factory_align_status_1(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(value));
  set_has_can_tx_factory_align_status_1();
  can_tx_factory_align_status_1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_1)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
bool Esr_status6_5e5::has_can_tx_recommend_unconverge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_recommend_unconverge() {
  _has_bits_[0] |= 0x00000100u;
}
void Esr_status6_5e5::clear_has_can_tx_recommend_unconverge() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esr_status6_5e5::clear_can_tx_recommend_unconverge() {
  can_tx_recommend_unconverge_ = 0;
  clear_has_can_tx_recommend_unconverge();
}
::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::can_tx_recommend_unconverge() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_recommend_unconverge)
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType >(can_tx_recommend_unconverge_);
}
void Esr_status6_5e5::set_can_tx_recommend_unconverge(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(value));
  set_has_can_tx_recommend_unconverge();
  can_tx_recommend_unconverge_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_recommend_unconverge)
}

// optional int32 can_tx_wave_diff_a2d = 10;
bool Esr_status6_5e5::has_can_tx_wave_diff_a2d() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_wave_diff_a2d() {
  _has_bits_[0] |= 0x00000200u;
}
void Esr_status6_5e5::clear_has_can_tx_wave_diff_a2d() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esr_status6_5e5::clear_can_tx_wave_diff_a2d() {
  can_tx_wave_diff_a2d_ = 0;
  clear_has_can_tx_wave_diff_a2d();
}
::google::protobuf::int32 Esr_status6_5e5::can_tx_wave_diff_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_wave_diff_a2d)
  return can_tx_wave_diff_a2d_;
}
void Esr_status6_5e5::set_can_tx_wave_diff_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_wave_diff_a2d();
  can_tx_wave_diff_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_wave_diff_a2d)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
bool Esr_status6_5e5::has_can_tx_system_power_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_system_power_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void Esr_status6_5e5::clear_has_can_tx_system_power_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esr_status6_5e5::clear_can_tx_system_power_mode() {
  can_tx_system_power_mode_ = 0;
  clear_has_can_tx_system_power_mode();
}
::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::can_tx_system_power_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_system_power_mode)
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType >(can_tx_system_power_mode_);
}
void Esr_status6_5e5::set_can_tx_system_power_mode(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(value));
  set_has_can_tx_system_power_mode();
  can_tx_system_power_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_system_power_mode)
}

// optional int32 can_tx_supply_n5v_a2d = 12;
bool Esr_status6_5e5::has_can_tx_supply_n5v_a2d() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_supply_n5v_a2d() {
  _has_bits_[0] |= 0x00000800u;
}
void Esr_status6_5e5::clear_has_can_tx_supply_n5v_a2d() {
  _has_bits_[0] &= ~0x00000800u;
}
void Esr_status6_5e5::clear_can_tx_supply_n5v_a2d() {
  can_tx_supply_n5v_a2d_ = 0;
  clear_has_can_tx_supply_n5v_a2d();
}
::google::protobuf::int32 Esr_status6_5e5::can_tx_supply_n5v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_supply_n5v_a2d)
  return can_tx_supply_n5v_a2d_;
}
void Esr_status6_5e5::set_can_tx_supply_n5v_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_supply_n5v_a2d();
  can_tx_supply_n5v_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_supply_n5v_a2d)
}

// optional int32 can_tx_supply_1p8v_a2d = 13;
bool Esr_status6_5e5::has_can_tx_supply_1p8v_a2d() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Esr_status6_5e5::set_has_can_tx_supply_1p8v_a2d() {
  _has_bits_[0] |= 0x00001000u;
}
void Esr_status6_5e5::clear_has_can_tx_supply_1p8v_a2d() {
  _has_bits_[0] &= ~0x00001000u;
}
void Esr_status6_5e5::clear_can_tx_supply_1p8v_a2d() {
  can_tx_supply_1p8v_a2d_ = 0;
  clear_has_can_tx_supply_1p8v_a2d();
}
::google::protobuf::int32 Esr_status6_5e5::can_tx_supply_1p8v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_supply_1p8v_a2d)
  return can_tx_supply_1p8v_a2d_;
}
void Esr_status6_5e5::set_can_tx_supply_1p8v_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_supply_1p8v_a2d();
  can_tx_supply_1p8v_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_supply_1p8v_a2d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_status5_5e4::kCanTxSupply10VA2DFieldNumber;
const int Esr_status5_5e4::kCanTxTemp2A2DFieldNumber;
const int Esr_status5_5e4::kCanTxTemp1A2DFieldNumber;
const int Esr_status5_5e4::kCanTxSwbattA2DFieldNumber;
const int Esr_status5_5e4::kCanTxSupply5VdxA2DFieldNumber;
const int Esr_status5_5e4::kCanTxSupply5VaA2DFieldNumber;
const int Esr_status5_5e4::kCanTxSupply3P3VA2DFieldNumber;
const int Esr_status5_5e4::kCanTxIgnpA2DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_status5_5e4::Esr_status5_5e4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status5_5e4)
}
Esr_status5_5e4::Esr_status5_5e4(const Esr_status5_5e4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_supply_10v_a2d_, &from.can_tx_supply_10v_a2d_,
    reinterpret_cast<char*>(&can_tx_ignp_a2d_) -
    reinterpret_cast<char*>(&can_tx_supply_10v_a2d_) + sizeof(can_tx_ignp_a2d_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status5_5e4)
}

void Esr_status5_5e4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_supply_10v_a2d_, 0, reinterpret_cast<char*>(&can_tx_ignp_a2d_) -
    reinterpret_cast<char*>(&can_tx_supply_10v_a2d_) + sizeof(can_tx_ignp_a2d_));
}

Esr_status5_5e4::~Esr_status5_5e4() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status5_5e4)
  SharedDtor();
}

void Esr_status5_5e4::SharedDtor() {
}

void Esr_status5_5e4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_status5_5e4::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_status5_5e4& Esr_status5_5e4::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_status5_5e4* Esr_status5_5e4::New(::google::protobuf::Arena* arena) const {
  Esr_status5_5e4* n = new Esr_status5_5e4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_status5_5e4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status5_5e4)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&can_tx_supply_10v_a2d_, 0, reinterpret_cast<char*>(&can_tx_ignp_a2d_) -
      reinterpret_cast<char*>(&can_tx_supply_10v_a2d_) + sizeof(can_tx_ignp_a2d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_status5_5e4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_status5_5e4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 can_tx_supply_10v_a2d = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_supply_10v_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_supply_10v_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_temp2_a2d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_tx_temp2_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_temp2_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_temp1_a2d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_can_tx_temp1_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_temp1_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_swbatt_a2d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_tx_swbatt_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_swbatt_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_supply_5vdx_a2d = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_can_tx_supply_5vdx_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_supply_5vdx_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_supply_5va_a2d = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_can_tx_supply_5va_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_supply_5va_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_supply_3p3v_a2d = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_can_tx_supply_3p3v_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_supply_3p3v_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_ignp_a2d = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_can_tx_ignp_a2d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_ignp_a2d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_status5_5e4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_status5_5e4)
  return false;
#undef DO_
}

void Esr_status5_5e4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_status5_5e4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_supply_10v_a2d = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_tx_supply_10v_a2d(), output);
  }

  // optional int32 can_tx_temp2_a2d = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_tx_temp2_a2d(), output);
  }

  // optional int32 can_tx_temp1_a2d = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->can_tx_temp1_a2d(), output);
  }

  // optional int32 can_tx_swbatt_a2d = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_tx_swbatt_a2d(), output);
  }

  // optional int32 can_tx_supply_5vdx_a2d = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->can_tx_supply_5vdx_a2d(), output);
  }

  // optional int32 can_tx_supply_5va_a2d = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->can_tx_supply_5va_a2d(), output);
  }

  // optional int32 can_tx_supply_3p3v_a2d = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->can_tx_supply_3p3v_a2d(), output);
  }

  // optional int32 can_tx_ignp_a2d = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->can_tx_ignp_a2d(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_status5_5e4)
}

::google::protobuf::uint8* Esr_status5_5e4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status5_5e4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_supply_10v_a2d = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_tx_supply_10v_a2d(), target);
  }

  // optional int32 can_tx_temp2_a2d = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_tx_temp2_a2d(), target);
  }

  // optional int32 can_tx_temp1_a2d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->can_tx_temp1_a2d(), target);
  }

  // optional int32 can_tx_swbatt_a2d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_tx_swbatt_a2d(), target);
  }

  // optional int32 can_tx_supply_5vdx_a2d = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->can_tx_supply_5vdx_a2d(), target);
  }

  // optional int32 can_tx_supply_5va_a2d = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->can_tx_supply_5va_a2d(), target);
  }

  // optional int32 can_tx_supply_3p3v_a2d = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->can_tx_supply_3p3v_a2d(), target);
  }

  // optional int32 can_tx_ignp_a2d = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->can_tx_ignp_a2d(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status5_5e4)
  return target;
}

size_t Esr_status5_5e4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status5_5e4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 can_tx_supply_10v_a2d = 1;
    if (has_can_tx_supply_10v_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_supply_10v_a2d());
    }

    // optional int32 can_tx_temp2_a2d = 2;
    if (has_can_tx_temp2_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_temp2_a2d());
    }

    // optional int32 can_tx_temp1_a2d = 3;
    if (has_can_tx_temp1_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_temp1_a2d());
    }

    // optional int32 can_tx_swbatt_a2d = 4;
    if (has_can_tx_swbatt_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_swbatt_a2d());
    }

    // optional int32 can_tx_supply_5vdx_a2d = 5;
    if (has_can_tx_supply_5vdx_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_supply_5vdx_a2d());
    }

    // optional int32 can_tx_supply_5va_a2d = 6;
    if (has_can_tx_supply_5va_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_supply_5va_a2d());
    }

    // optional int32 can_tx_supply_3p3v_a2d = 7;
    if (has_can_tx_supply_3p3v_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_supply_3p3v_a2d());
    }

    // optional int32 can_tx_ignp_a2d = 8;
    if (has_can_tx_ignp_a2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_ignp_a2d());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_status5_5e4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status5_5e4)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status5_5e4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_status5_5e4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status5_5e4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_status5_5e4)
    MergeFrom(*source);
  }
}

void Esr_status5_5e4::MergeFrom(const Esr_status5_5e4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status5_5e4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_supply_10v_a2d_ = from.can_tx_supply_10v_a2d_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_temp2_a2d_ = from.can_tx_temp2_a2d_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_temp1_a2d_ = from.can_tx_temp1_a2d_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_swbatt_a2d_ = from.can_tx_swbatt_a2d_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_supply_5vdx_a2d_ = from.can_tx_supply_5vdx_a2d_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_supply_5va_a2d_ = from.can_tx_supply_5va_a2d_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_supply_3p3v_a2d_ = from.can_tx_supply_3p3v_a2d_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_ignp_a2d_ = from.can_tx_ignp_a2d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status5_5e4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status5_5e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status5_5e4::CopyFrom(const Esr_status5_5e4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status5_5e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status5_5e4::IsInitialized() const {
  return true;
}

void Esr_status5_5e4::Swap(Esr_status5_5e4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_status5_5e4::InternalSwap(Esr_status5_5e4* other) {
  std::swap(can_tx_supply_10v_a2d_, other->can_tx_supply_10v_a2d_);
  std::swap(can_tx_temp2_a2d_, other->can_tx_temp2_a2d_);
  std::swap(can_tx_temp1_a2d_, other->can_tx_temp1_a2d_);
  std::swap(can_tx_swbatt_a2d_, other->can_tx_swbatt_a2d_);
  std::swap(can_tx_supply_5vdx_a2d_, other->can_tx_supply_5vdx_a2d_);
  std::swap(can_tx_supply_5va_a2d_, other->can_tx_supply_5va_a2d_);
  std::swap(can_tx_supply_3p3v_a2d_, other->can_tx_supply_3p3v_a2d_);
  std::swap(can_tx_ignp_a2d_, other->can_tx_ignp_a2d_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_status5_5e4::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_status5_5e4

// optional int32 can_tx_supply_10v_a2d = 1;
bool Esr_status5_5e4::has_can_tx_supply_10v_a2d() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_supply_10v_a2d() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_status5_5e4::clear_has_can_tx_supply_10v_a2d() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_status5_5e4::clear_can_tx_supply_10v_a2d() {
  can_tx_supply_10v_a2d_ = 0;
  clear_has_can_tx_supply_10v_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_supply_10v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_10v_a2d)
  return can_tx_supply_10v_a2d_;
}
void Esr_status5_5e4::set_can_tx_supply_10v_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_supply_10v_a2d();
  can_tx_supply_10v_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_10v_a2d)
}

// optional int32 can_tx_temp2_a2d = 2;
bool Esr_status5_5e4::has_can_tx_temp2_a2d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_temp2_a2d() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_status5_5e4::clear_has_can_tx_temp2_a2d() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_status5_5e4::clear_can_tx_temp2_a2d() {
  can_tx_temp2_a2d_ = 0;
  clear_has_can_tx_temp2_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_temp2_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_temp2_a2d)
  return can_tx_temp2_a2d_;
}
void Esr_status5_5e4::set_can_tx_temp2_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_temp2_a2d();
  can_tx_temp2_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_temp2_a2d)
}

// optional int32 can_tx_temp1_a2d = 3;
bool Esr_status5_5e4::has_can_tx_temp1_a2d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_temp1_a2d() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_status5_5e4::clear_has_can_tx_temp1_a2d() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_status5_5e4::clear_can_tx_temp1_a2d() {
  can_tx_temp1_a2d_ = 0;
  clear_has_can_tx_temp1_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_temp1_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_temp1_a2d)
  return can_tx_temp1_a2d_;
}
void Esr_status5_5e4::set_can_tx_temp1_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_temp1_a2d();
  can_tx_temp1_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_temp1_a2d)
}

// optional int32 can_tx_swbatt_a2d = 4;
bool Esr_status5_5e4::has_can_tx_swbatt_a2d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_swbatt_a2d() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_status5_5e4::clear_has_can_tx_swbatt_a2d() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_status5_5e4::clear_can_tx_swbatt_a2d() {
  can_tx_swbatt_a2d_ = 0;
  clear_has_can_tx_swbatt_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_swbatt_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_swbatt_a2d)
  return can_tx_swbatt_a2d_;
}
void Esr_status5_5e4::set_can_tx_swbatt_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_swbatt_a2d();
  can_tx_swbatt_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_swbatt_a2d)
}

// optional int32 can_tx_supply_5vdx_a2d = 5;
bool Esr_status5_5e4::has_can_tx_supply_5vdx_a2d() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_supply_5vdx_a2d() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_status5_5e4::clear_has_can_tx_supply_5vdx_a2d() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_status5_5e4::clear_can_tx_supply_5vdx_a2d() {
  can_tx_supply_5vdx_a2d_ = 0;
  clear_has_can_tx_supply_5vdx_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_supply_5vdx_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_5vdx_a2d)
  return can_tx_supply_5vdx_a2d_;
}
void Esr_status5_5e4::set_can_tx_supply_5vdx_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_supply_5vdx_a2d();
  can_tx_supply_5vdx_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_5vdx_a2d)
}

// optional int32 can_tx_supply_5va_a2d = 6;
bool Esr_status5_5e4::has_can_tx_supply_5va_a2d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_supply_5va_a2d() {
  _has_bits_[0] |= 0x00000020u;
}
void Esr_status5_5e4::clear_has_can_tx_supply_5va_a2d() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esr_status5_5e4::clear_can_tx_supply_5va_a2d() {
  can_tx_supply_5va_a2d_ = 0;
  clear_has_can_tx_supply_5va_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_supply_5va_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_5va_a2d)
  return can_tx_supply_5va_a2d_;
}
void Esr_status5_5e4::set_can_tx_supply_5va_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_supply_5va_a2d();
  can_tx_supply_5va_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_5va_a2d)
}

// optional int32 can_tx_supply_3p3v_a2d = 7;
bool Esr_status5_5e4::has_can_tx_supply_3p3v_a2d() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_supply_3p3v_a2d() {
  _has_bits_[0] |= 0x00000040u;
}
void Esr_status5_5e4::clear_has_can_tx_supply_3p3v_a2d() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esr_status5_5e4::clear_can_tx_supply_3p3v_a2d() {
  can_tx_supply_3p3v_a2d_ = 0;
  clear_has_can_tx_supply_3p3v_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_supply_3p3v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_3p3v_a2d)
  return can_tx_supply_3p3v_a2d_;
}
void Esr_status5_5e4::set_can_tx_supply_3p3v_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_supply_3p3v_a2d();
  can_tx_supply_3p3v_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_3p3v_a2d)
}

// optional int32 can_tx_ignp_a2d = 8;
bool Esr_status5_5e4::has_can_tx_ignp_a2d() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esr_status5_5e4::set_has_can_tx_ignp_a2d() {
  _has_bits_[0] |= 0x00000080u;
}
void Esr_status5_5e4::clear_has_can_tx_ignp_a2d() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esr_status5_5e4::clear_can_tx_ignp_a2d() {
  can_tx_ignp_a2d_ = 0;
  clear_has_can_tx_ignp_a2d();
}
::google::protobuf::int32 Esr_status5_5e4::can_tx_ignp_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_ignp_a2d)
  return can_tx_ignp_a2d_;
}
void Esr_status5_5e4::set_can_tx_ignp_a2d(::google::protobuf::int32 value) {
  set_has_can_tx_ignp_a2d();
  can_tx_ignp_a2d_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_ignp_a2d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_status3_4e2::kCanTxSwVersionPldFieldNumber;
const int Esr_status3_4e2::kCanTxSwVersionHostFieldNumber;
const int Esr_status3_4e2::kCanTxHwVersionFieldNumber;
const int Esr_status3_4e2::kCanTxInterfaceVersionFieldNumber;
const int Esr_status3_4e2::kCanTxSerialNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_status3_4e2::Esr_status3_4e2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status3_4e2)
}
Esr_status3_4e2::Esr_status3_4e2(const Esr_status3_4e2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_sw_version_pld_, &from.can_tx_sw_version_pld_,
    reinterpret_cast<char*>(&can_tx_serial_num_) -
    reinterpret_cast<char*>(&can_tx_sw_version_pld_) + sizeof(can_tx_serial_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status3_4e2)
}

void Esr_status3_4e2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_sw_version_pld_, 0, reinterpret_cast<char*>(&can_tx_serial_num_) -
    reinterpret_cast<char*>(&can_tx_sw_version_pld_) + sizeof(can_tx_serial_num_));
}

Esr_status3_4e2::~Esr_status3_4e2() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status3_4e2)
  SharedDtor();
}

void Esr_status3_4e2::SharedDtor() {
}

void Esr_status3_4e2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_status3_4e2::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_status3_4e2& Esr_status3_4e2::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_status3_4e2* Esr_status3_4e2::New(::google::protobuf::Arena* arena) const {
  Esr_status3_4e2* n = new Esr_status3_4e2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_status3_4e2::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status3_4e2)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&can_tx_sw_version_pld_, 0, reinterpret_cast<char*>(&can_tx_serial_num_) -
      reinterpret_cast<char*>(&can_tx_sw_version_pld_) + sizeof(can_tx_serial_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_status3_4e2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_status3_4e2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 can_tx_sw_version_pld = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_sw_version_pld();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_sw_version_pld_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_sw_version_host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_tx_sw_version_host();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_sw_version_host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_hw_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_can_tx_hw_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_hw_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_interface_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_tx_interface_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_interface_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_serial_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_can_tx_serial_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_serial_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_status3_4e2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_status3_4e2)
  return false;
#undef DO_
}

void Esr_status3_4e2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_status3_4e2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_sw_version_pld = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_tx_sw_version_pld(), output);
  }

  // optional int32 can_tx_sw_version_host = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_tx_sw_version_host(), output);
  }

  // optional int32 can_tx_hw_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->can_tx_hw_version(), output);
  }

  // optional int32 can_tx_interface_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_tx_interface_version(), output);
  }

  // optional int32 can_tx_serial_num = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->can_tx_serial_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_status3_4e2)
}

::google::protobuf::uint8* Esr_status3_4e2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status3_4e2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_sw_version_pld = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_tx_sw_version_pld(), target);
  }

  // optional int32 can_tx_sw_version_host = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_tx_sw_version_host(), target);
  }

  // optional int32 can_tx_hw_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->can_tx_hw_version(), target);
  }

  // optional int32 can_tx_interface_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_tx_interface_version(), target);
  }

  // optional int32 can_tx_serial_num = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->can_tx_serial_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status3_4e2)
  return target;
}

size_t Esr_status3_4e2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status3_4e2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 can_tx_sw_version_pld = 1;
    if (has_can_tx_sw_version_pld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_sw_version_pld());
    }

    // optional int32 can_tx_sw_version_host = 2;
    if (has_can_tx_sw_version_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_sw_version_host());
    }

    // optional int32 can_tx_hw_version = 3;
    if (has_can_tx_hw_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_hw_version());
    }

    // optional int32 can_tx_interface_version = 4;
    if (has_can_tx_interface_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_interface_version());
    }

    // optional int32 can_tx_serial_num = 5;
    if (has_can_tx_serial_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_serial_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_status3_4e2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status3_4e2)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status3_4e2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_status3_4e2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status3_4e2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_status3_4e2)
    MergeFrom(*source);
  }
}

void Esr_status3_4e2::MergeFrom(const Esr_status3_4e2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status3_4e2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_sw_version_pld_ = from.can_tx_sw_version_pld_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_sw_version_host_ = from.can_tx_sw_version_host_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_hw_version_ = from.can_tx_hw_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_interface_version_ = from.can_tx_interface_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_serial_num_ = from.can_tx_serial_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status3_4e2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status3_4e2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status3_4e2::CopyFrom(const Esr_status3_4e2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status3_4e2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status3_4e2::IsInitialized() const {
  return true;
}

void Esr_status3_4e2::Swap(Esr_status3_4e2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_status3_4e2::InternalSwap(Esr_status3_4e2* other) {
  std::swap(can_tx_sw_version_pld_, other->can_tx_sw_version_pld_);
  std::swap(can_tx_sw_version_host_, other->can_tx_sw_version_host_);
  std::swap(can_tx_hw_version_, other->can_tx_hw_version_);
  std::swap(can_tx_interface_version_, other->can_tx_interface_version_);
  std::swap(can_tx_serial_num_, other->can_tx_serial_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_status3_4e2::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_status3_4e2

// optional int32 can_tx_sw_version_pld = 1;
bool Esr_status3_4e2::has_can_tx_sw_version_pld() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_status3_4e2::set_has_can_tx_sw_version_pld() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_status3_4e2::clear_has_can_tx_sw_version_pld() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_status3_4e2::clear_can_tx_sw_version_pld() {
  can_tx_sw_version_pld_ = 0;
  clear_has_can_tx_sw_version_pld();
}
::google::protobuf::int32 Esr_status3_4e2::can_tx_sw_version_pld() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_pld)
  return can_tx_sw_version_pld_;
}
void Esr_status3_4e2::set_can_tx_sw_version_pld(::google::protobuf::int32 value) {
  set_has_can_tx_sw_version_pld();
  can_tx_sw_version_pld_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_pld)
}

// optional int32 can_tx_sw_version_host = 2;
bool Esr_status3_4e2::has_can_tx_sw_version_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_status3_4e2::set_has_can_tx_sw_version_host() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_status3_4e2::clear_has_can_tx_sw_version_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_status3_4e2::clear_can_tx_sw_version_host() {
  can_tx_sw_version_host_ = 0;
  clear_has_can_tx_sw_version_host();
}
::google::protobuf::int32 Esr_status3_4e2::can_tx_sw_version_host() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_host)
  return can_tx_sw_version_host_;
}
void Esr_status3_4e2::set_can_tx_sw_version_host(::google::protobuf::int32 value) {
  set_has_can_tx_sw_version_host();
  can_tx_sw_version_host_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_host)
}

// optional int32 can_tx_hw_version = 3;
bool Esr_status3_4e2::has_can_tx_hw_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_status3_4e2::set_has_can_tx_hw_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_status3_4e2::clear_has_can_tx_hw_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_status3_4e2::clear_can_tx_hw_version() {
  can_tx_hw_version_ = 0;
  clear_has_can_tx_hw_version();
}
::google::protobuf::int32 Esr_status3_4e2::can_tx_hw_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_hw_version)
  return can_tx_hw_version_;
}
void Esr_status3_4e2::set_can_tx_hw_version(::google::protobuf::int32 value) {
  set_has_can_tx_hw_version();
  can_tx_hw_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_hw_version)
}

// optional int32 can_tx_interface_version = 4;
bool Esr_status3_4e2::has_can_tx_interface_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_status3_4e2::set_has_can_tx_interface_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_status3_4e2::clear_has_can_tx_interface_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_status3_4e2::clear_can_tx_interface_version() {
  can_tx_interface_version_ = 0;
  clear_has_can_tx_interface_version();
}
::google::protobuf::int32 Esr_status3_4e2::can_tx_interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_interface_version)
  return can_tx_interface_version_;
}
void Esr_status3_4e2::set_can_tx_interface_version(::google::protobuf::int32 value) {
  set_has_can_tx_interface_version();
  can_tx_interface_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_interface_version)
}

// optional int32 can_tx_serial_num = 5;
bool Esr_status3_4e2::has_can_tx_serial_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_status3_4e2::set_has_can_tx_serial_num() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_status3_4e2::clear_has_can_tx_serial_num() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_status3_4e2::clear_can_tx_serial_num() {
  can_tx_serial_num_ = 0;
  clear_has_can_tx_serial_num();
}
::google::protobuf::int32 Esr_status3_4e2::can_tx_serial_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_serial_num)
  return can_tx_serial_num_;
}
void Esr_status3_4e2::set_can_tx_serial_num(::google::protobuf::int32 value) {
  set_has_can_tx_serial_num();
  can_tx_serial_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_serial_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_status4_4e3::kCanTxTruckTargetDetFieldNumber;
const int Esr_status4_4e3::kCanTxLrOnlyGratingLobeDetFieldNumber;
const int Esr_status4_4e3::kCanTxSidelobeBlockageFieldNumber;
const int Esr_status4_4e3::kCanTxPartialBlockageFieldNumber;
const int Esr_status4_4e3::kCanTxPathId.oStatFieldNumber;
const int Esr_status4_4e3::kCanTxMrLrModeFieldNumber;
const int Esr_status4_4e3::kCanTxAutoAlignAngleFieldNumber;
const int Esr_status4_4e3::kCanTxRollingCount3FieldNumber;
const int Esr_status4_4e3::kCanTxPathIdFcwStatFieldNumber;
const int Esr_status4_4e3::kCanTxPathIdFcwMoveFieldNumber;
const int Esr_status4_4e3::kCanTxPathIdCmbbStatFieldNumber;
const int Esr_status4_4e3::kCanTxPathIdCmbbMoveFieldNumber;
const int Esr_status4_4e3::kCanTxPathId.oFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_status4_4e3::Esr_status4_4e3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status4_4e3)
}
Esr_status4_4e3::Esr_status4_4e3(const Esr_status4_4e3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_truck_target_det_, &from.can_tx_truck_target_det_,
    reinterpret_cast<char*>(&can_tx_path_id_.o_) -
    reinterpret_cast<char*>(&can_tx_truck_target_det_) + sizeof(can_tx_path_id_.o_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status4_4e3)
}

void Esr_status4_4e3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_truck_target_det_, 0, reinterpret_cast<char*>(&can_tx_path_id_.o_) -
    reinterpret_cast<char*>(&can_tx_truck_target_det_) + sizeof(can_tx_path_id_.o_));
}

Esr_status4_4e3::~Esr_status4_4e3() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status4_4e3)
  SharedDtor();
}

void Esr_status4_4e3::SharedDtor() {
}

void Esr_status4_4e3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_status4_4e3::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_status4_4e3& Esr_status4_4e3::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_status4_4e3* Esr_status4_4e3::New(::google::protobuf::Arena* arena) const {
  Esr_status4_4e3* n = new Esr_status4_4e3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_status4_4e3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status4_4e3)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&can_tx_truck_target_det_, 0, reinterpret_cast<char*>(&can_tx_rolling_count_3_) -
      reinterpret_cast<char*>(&can_tx_truck_target_det_) + sizeof(can_tx_rolling_count_3_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&can_tx_path_id_fcw_stat_, 0, reinterpret_cast<char*>(&can_tx_path_id_.o_) -
      reinterpret_cast<char*>(&can_tx_path_id_fcw_stat_) + sizeof(can_tx_path_id_.o_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_status4_4e3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_status4_4e3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(value)) {
            set_can_tx_truck_target_det(static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(value)) {
            set_can_tx_lr_only_grating_lobe_det(static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(value)) {
            set_can_tx_sidelobe_blockage(static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(value)) {
            set_can_tx_partial_blockage(static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_path_id_.o_stat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_can_tx_path_id_.o_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_.o_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(value)) {
            set_can_tx_mr_lr_mode(static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_auto_align_angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_can_tx_auto_align_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_auto_align_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_rolling_count_3 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_can_tx_rolling_count_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_rolling_count_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_path_id_fcw_stat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_can_tx_path_id_fcw_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_fcw_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_path_id_fcw_move = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_can_tx_path_id_fcw_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_fcw_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_path_id_cmbb_stat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_can_tx_path_id_cmbb_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_cmbb_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_path_id_cmbb_move = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_can_tx_path_id_cmbb_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_cmbb_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_path_id_.o = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_can_tx_path_id_.o();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_path_id_.o_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_status4_4e3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_status4_4e3)
  return false;
#undef DO_
}

void Esr_status4_4e3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_status4_4e3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->can_tx_truck_target_det(), output);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->can_tx_lr_only_grating_lobe_det(), output);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->can_tx_sidelobe_blockage(), output);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->can_tx_partial_blockage(), output);
  }

  // optional int32 can_tx_path_id_.o_stat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->can_tx_path_id_.o_stat(), output);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->can_tx_mr_lr_mode(), output);
  }

  // optional double can_tx_auto_align_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->can_tx_auto_align_angle(), output);
  }

  // optional int32 can_tx_rolling_count_3 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->can_tx_rolling_count_3(), output);
  }

  // optional int32 can_tx_path_id_fcw_stat = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->can_tx_path_id_fcw_stat(), output);
  }

  // optional int32 can_tx_path_id_fcw_move = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->can_tx_path_id_fcw_move(), output);
  }

  // optional int32 can_tx_path_id_cmbb_stat = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->can_tx_path_id_cmbb_stat(), output);
  }

  // optional int32 can_tx_path_id_cmbb_move = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->can_tx_path_id_cmbb_move(), output);
  }

  // optional int32 can_tx_path_id_.o = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->can_tx_path_id_.o(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_status4_4e3)
}

::google::protobuf::uint8* Esr_status4_4e3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status4_4e3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->can_tx_truck_target_det(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->can_tx_lr_only_grating_lobe_det(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->can_tx_sidelobe_blockage(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->can_tx_partial_blockage(), target);
  }

  // optional int32 can_tx_path_id_.o_stat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->can_tx_path_id_.o_stat(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->can_tx_mr_lr_mode(), target);
  }

  // optional double can_tx_auto_align_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->can_tx_auto_align_angle(), target);
  }

  // optional int32 can_tx_rolling_count_3 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->can_tx_rolling_count_3(), target);
  }

  // optional int32 can_tx_path_id_fcw_stat = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->can_tx_path_id_fcw_stat(), target);
  }

  // optional int32 can_tx_path_id_fcw_move = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->can_tx_path_id_fcw_move(), target);
  }

  // optional int32 can_tx_path_id_cmbb_stat = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->can_tx_path_id_cmbb_stat(), target);
  }

  // optional int32 can_tx_path_id_cmbb_move = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->can_tx_path_id_cmbb_move(), target);
  }

  // optional int32 can_tx_path_id_.o = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->can_tx_path_id_.o(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status4_4e3)
  return target;
}

size_t Esr_status4_4e3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status4_4e3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
    if (has_can_tx_truck_target_det()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_truck_target_det());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
    if (has_can_tx_lr_only_grating_lobe_det()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_lr_only_grating_lobe_det());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
    if (has_can_tx_sidelobe_blockage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_sidelobe_blockage());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
    if (has_can_tx_partial_blockage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_partial_blockage());
    }

    // optional int32 can_tx_path_id_.o_stat = 5;
    if (has_can_tx_path_id_.o_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_.o_stat());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
    if (has_can_tx_mr_lr_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_mr_lr_mode());
    }

    // optional double can_tx_auto_align_angle = 7;
    if (has_can_tx_auto_align_angle()) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_rolling_count_3 = 8;
    if (has_can_tx_rolling_count_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_rolling_count_3());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 can_tx_path_id_fcw_stat = 9;
    if (has_can_tx_path_id_fcw_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_fcw_stat());
    }

    // optional int32 can_tx_path_id_fcw_move = 10;
    if (has_can_tx_path_id_fcw_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_fcw_move());
    }

    // optional int32 can_tx_path_id_cmbb_stat = 11;
    if (has_can_tx_path_id_cmbb_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_cmbb_stat());
    }

    // optional int32 can_tx_path_id_cmbb_move = 12;
    if (has_can_tx_path_id_cmbb_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_cmbb_move());
    }

    // optional int32 can_tx_path_id_.o = 13;
    if (has_can_tx_path_id_.o()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_path_id_.o());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_status4_4e3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status4_4e3)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status4_4e3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_status4_4e3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status4_4e3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_status4_4e3)
    MergeFrom(*source);
  }
}

void Esr_status4_4e3::MergeFrom(const Esr_status4_4e3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status4_4e3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_truck_target_det_ = from.can_tx_truck_target_det_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_lr_only_grating_lobe_det_ = from.can_tx_lr_only_grating_lobe_det_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_sidelobe_blockage_ = from.can_tx_sidelobe_blockage_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_partial_blockage_ = from.can_tx_partial_blockage_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_path_id_.o_stat_ = from.can_tx_path_id_.o_stat_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_mr_lr_mode_ = from.can_tx_mr_lr_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_auto_align_angle_ = from.can_tx_auto_align_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_rolling_count_3_ = from.can_tx_rolling_count_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      can_tx_path_id_fcw_stat_ = from.can_tx_path_id_fcw_stat_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_tx_path_id_fcw_move_ = from.can_tx_path_id_fcw_move_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_tx_path_id_cmbb_stat_ = from.can_tx_path_id_cmbb_stat_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_tx_path_id_cmbb_move_ = from.can_tx_path_id_cmbb_move_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_tx_path_id_.o_ = from.can_tx_path_id_.o_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status4_4e3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status4_4e3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status4_4e3::CopyFrom(const Esr_status4_4e3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status4_4e3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status4_4e3::IsInitialized() const {
  return true;
}

void Esr_status4_4e3::Swap(Esr_status4_4e3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_status4_4e3::InternalSwap(Esr_status4_4e3* other) {
  std::swap(can_tx_truck_target_det_, other->can_tx_truck_target_det_);
  std::swap(can_tx_lr_only_grating_lobe_det_, other->can_tx_lr_only_grating_lobe_det_);
  std::swap(can_tx_sidelobe_blockage_, other->can_tx_sidelobe_blockage_);
  std::swap(can_tx_partial_blockage_, other->can_tx_partial_blockage_);
  std::swap(can_tx_path_id_.o_stat_, other->can_tx_path_id_.o_stat_);
  std::swap(can_tx_mr_lr_mode_, other->can_tx_mr_lr_mode_);
  std::swap(can_tx_auto_align_angle_, other->can_tx_auto_align_angle_);
  std::swap(can_tx_rolling_count_3_, other->can_tx_rolling_count_3_);
  std::swap(can_tx_path_id_fcw_stat_, other->can_tx_path_id_fcw_stat_);
  std::swap(can_tx_path_id_fcw_move_, other->can_tx_path_id_fcw_move_);
  std::swap(can_tx_path_id_cmbb_stat_, other->can_tx_path_id_cmbb_stat_);
  std::swap(can_tx_path_id_cmbb_move_, other->can_tx_path_id_cmbb_move_);
  std::swap(can_tx_path_id_.o_, other->can_tx_path_id_.o_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_status4_4e3::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_status4_4e3

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
bool Esr_status4_4e3::has_can_tx_truck_target_det() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_truck_target_det() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_status4_4e3::clear_has_can_tx_truck_target_det() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_status4_4e3::clear_can_tx_truck_target_det() {
  can_tx_truck_target_det_ = 0;
  clear_has_can_tx_truck_target_det();
}
::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::can_tx_truck_target_det() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_truck_target_det)
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType >(can_tx_truck_target_det_);
}
void Esr_status4_4e3::set_can_tx_truck_target_det(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(value));
  set_has_can_tx_truck_target_det();
  can_tx_truck_target_det_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_truck_target_det)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
bool Esr_status4_4e3::has_can_tx_lr_only_grating_lobe_det() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_lr_only_grating_lobe_det() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_status4_4e3::clear_has_can_tx_lr_only_grating_lobe_det() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_status4_4e3::clear_can_tx_lr_only_grating_lobe_det() {
  can_tx_lr_only_grating_lobe_det_ = 0;
  clear_has_can_tx_lr_only_grating_lobe_det();
}
::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::can_tx_lr_only_grating_lobe_det() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_lr_only_grating_lobe_det)
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType >(can_tx_lr_only_grating_lobe_det_);
}
void Esr_status4_4e3::set_can_tx_lr_only_grating_lobe_det(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(value));
  set_has_can_tx_lr_only_grating_lobe_det();
  can_tx_lr_only_grating_lobe_det_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_lr_only_grating_lobe_det)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
bool Esr_status4_4e3::has_can_tx_sidelobe_blockage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_sidelobe_blockage() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_status4_4e3::clear_has_can_tx_sidelobe_blockage() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_status4_4e3::clear_can_tx_sidelobe_blockage() {
  can_tx_sidelobe_blockage_ = 0;
  clear_has_can_tx_sidelobe_blockage();
}
::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::can_tx_sidelobe_blockage() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_sidelobe_blockage)
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType >(can_tx_sidelobe_blockage_);
}
void Esr_status4_4e3::set_can_tx_sidelobe_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(value));
  set_has_can_tx_sidelobe_blockage();
  can_tx_sidelobe_blockage_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_sidelobe_blockage)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
bool Esr_status4_4e3::has_can_tx_partial_blockage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_partial_blockage() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_status4_4e3::clear_has_can_tx_partial_blockage() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_status4_4e3::clear_can_tx_partial_blockage() {
  can_tx_partial_blockage_ = 0;
  clear_has_can_tx_partial_blockage();
}
::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::can_tx_partial_blockage() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_partial_blockage)
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType >(can_tx_partial_blockage_);
}
void Esr_status4_4e3::set_can_tx_partial_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(value));
  set_has_can_tx_partial_blockage();
  can_tx_partial_blockage_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_partial_blockage)
}

// optional int32 can_tx_path_id_.o_stat = 5;
bool Esr_status4_4e3::has_can_tx_path_id_.o_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_path_id_.o_stat() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_status4_4e3::clear_has_can_tx_path_id_.o_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_status4_4e3::clear_can_tx_path_id_.o_stat() {
  can_tx_path_id_.o_stat_ = 0;
  clear_has_can_tx_path_id_.o_stat();
}
::google::protobuf::int32 Esr_status4_4e3::can_tx_path_id_.o_stat() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_.o_stat)
  return can_tx_path_id_.o_stat_;
}
void Esr_status4_4e3::set_can_tx_path_id_.o_stat(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_.o_stat();
  can_tx_path_id_.o_stat_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_.o_stat)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
bool Esr_status4_4e3::has_can_tx_mr_lr_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_mr_lr_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void Esr_status4_4e3::clear_has_can_tx_mr_lr_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esr_status4_4e3::clear_can_tx_mr_lr_mode() {
  can_tx_mr_lr_mode_ = 0;
  clear_has_can_tx_mr_lr_mode();
}
::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::can_tx_mr_lr_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_mr_lr_mode)
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType >(can_tx_mr_lr_mode_);
}
void Esr_status4_4e3::set_can_tx_mr_lr_mode(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(value));
  set_has_can_tx_mr_lr_mode();
  can_tx_mr_lr_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_mr_lr_mode)
}

// optional double can_tx_auto_align_angle = 7;
bool Esr_status4_4e3::has_can_tx_auto_align_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_auto_align_angle() {
  _has_bits_[0] |= 0x00000040u;
}
void Esr_status4_4e3::clear_has_can_tx_auto_align_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esr_status4_4e3::clear_can_tx_auto_align_angle() {
  can_tx_auto_align_angle_ = 0;
  clear_has_can_tx_auto_align_angle();
}
double Esr_status4_4e3::can_tx_auto_align_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_auto_align_angle)
  return can_tx_auto_align_angle_;
}
void Esr_status4_4e3::set_can_tx_auto_align_angle(double value) {
  set_has_can_tx_auto_align_angle();
  can_tx_auto_align_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_auto_align_angle)
}

// optional int32 can_tx_rolling_count_3 = 8;
bool Esr_status4_4e3::has_can_tx_rolling_count_3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_rolling_count_3() {
  _has_bits_[0] |= 0x00000080u;
}
void Esr_status4_4e3::clear_has_can_tx_rolling_count_3() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esr_status4_4e3::clear_can_tx_rolling_count_3() {
  can_tx_rolling_count_3_ = 0;
  clear_has_can_tx_rolling_count_3();
}
::google::protobuf::int32 Esr_status4_4e3::can_tx_rolling_count_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_rolling_count_3)
  return can_tx_rolling_count_3_;
}
void Esr_status4_4e3::set_can_tx_rolling_count_3(::google::protobuf::int32 value) {
  set_has_can_tx_rolling_count_3();
  can_tx_rolling_count_3_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_rolling_count_3)
}

// optional int32 can_tx_path_id_fcw_stat = 9;
bool Esr_status4_4e3::has_can_tx_path_id_fcw_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_path_id_fcw_stat() {
  _has_bits_[0] |= 0x00000100u;
}
void Esr_status4_4e3::clear_has_can_tx_path_id_fcw_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esr_status4_4e3::clear_can_tx_path_id_fcw_stat() {
  can_tx_path_id_fcw_stat_ = 0;
  clear_has_can_tx_path_id_fcw_stat();
}
::google::protobuf::int32 Esr_status4_4e3::can_tx_path_id_fcw_stat() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_stat)
  return can_tx_path_id_fcw_stat_;
}
void Esr_status4_4e3::set_can_tx_path_id_fcw_stat(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_fcw_stat();
  can_tx_path_id_fcw_stat_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_stat)
}

// optional int32 can_tx_path_id_fcw_move = 10;
bool Esr_status4_4e3::has_can_tx_path_id_fcw_move() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_path_id_fcw_move() {
  _has_bits_[0] |= 0x00000200u;
}
void Esr_status4_4e3::clear_has_can_tx_path_id_fcw_move() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esr_status4_4e3::clear_can_tx_path_id_fcw_move() {
  can_tx_path_id_fcw_move_ = 0;
  clear_has_can_tx_path_id_fcw_move();
}
::google::protobuf::int32 Esr_status4_4e3::can_tx_path_id_fcw_move() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_move)
  return can_tx_path_id_fcw_move_;
}
void Esr_status4_4e3::set_can_tx_path_id_fcw_move(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_fcw_move();
  can_tx_path_id_fcw_move_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_move)
}

// optional int32 can_tx_path_id_cmbb_stat = 11;
bool Esr_status4_4e3::has_can_tx_path_id_cmbb_stat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_path_id_cmbb_stat() {
  _has_bits_[0] |= 0x00000400u;
}
void Esr_status4_4e3::clear_has_can_tx_path_id_cmbb_stat() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esr_status4_4e3::clear_can_tx_path_id_cmbb_stat() {
  can_tx_path_id_cmbb_stat_ = 0;
  clear_has_can_tx_path_id_cmbb_stat();
}
::google::protobuf::int32 Esr_status4_4e3::can_tx_path_id_cmbb_stat() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_stat)
  return can_tx_path_id_cmbb_stat_;
}
void Esr_status4_4e3::set_can_tx_path_id_cmbb_stat(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_cmbb_stat();
  can_tx_path_id_cmbb_stat_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_stat)
}

// optional int32 can_tx_path_id_cmbb_move = 12;
bool Esr_status4_4e3::has_can_tx_path_id_cmbb_move() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_path_id_cmbb_move() {
  _has_bits_[0] |= 0x00000800u;
}
void Esr_status4_4e3::clear_has_can_tx_path_id_cmbb_move() {
  _has_bits_[0] &= ~0x00000800u;
}
void Esr_status4_4e3::clear_can_tx_path_id_cmbb_move() {
  can_tx_path_id_cmbb_move_ = 0;
  clear_has_can_tx_path_id_cmbb_move();
}
::google::protobuf::int32 Esr_status4_4e3::can_tx_path_id_cmbb_move() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_move)
  return can_tx_path_id_cmbb_move_;
}
void Esr_status4_4e3::set_can_tx_path_id_cmbb_move(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_cmbb_move();
  can_tx_path_id_cmbb_move_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_move)
}

// optional int32 can_tx_path_id_.o = 13;
bool Esr_status4_4e3::has_can_tx_path_id_.o() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Esr_status4_4e3::set_has_can_tx_path_id_.o() {
  _has_bits_[0] |= 0x00001000u;
}
void Esr_status4_4e3::clear_has_can_tx_path_id_.o() {
  _has_bits_[0] &= ~0x00001000u;
}
void Esr_status4_4e3::clear_can_tx_path_id_.o() {
  can_tx_path_id_.o_ = 0;
  clear_has_can_tx_path_id_.o();
}
::google::protobuf::int32 Esr_status4_4e3::can_tx_path_id_.o() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_.o)
  return can_tx_path_id_.o_;
}
void Esr_status4_4e3::set_can_tx_path_id_.o(::google::protobuf::int32 value) {
  set_has_can_tx_path_id_.o();
  can_tx_path_id_.o_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_.o)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_trackmotionpower_540_Motionpower::kCanTxTrackMovingFieldNumber;
const int Esr_trackmotionpower_540_Motionpower::kCanTxTrackMovingFastFieldNumber;
const int Esr_trackmotionpower_540_Motionpower::kCanTxTrackMovingSlowFieldNumber;
const int Esr_trackmotionpower_540_Motionpower::kCanTxTrackPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_trackmotionpower_540_Motionpower::Esr_trackmotionpower_540_Motionpower()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
}
Esr_trackmotionpower_540_Motionpower::Esr_trackmotionpower_540_Motionpower(const Esr_trackmotionpower_540_Motionpower& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_track_moving_, &from.can_tx_track_moving_,
    reinterpret_cast<char*>(&can_tx_track_power_) -
    reinterpret_cast<char*>(&can_tx_track_moving_) + sizeof(can_tx_track_power_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
}

void Esr_trackmotionpower_540_Motionpower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_track_moving_, 0, reinterpret_cast<char*>(&can_tx_track_power_) -
    reinterpret_cast<char*>(&can_tx_track_moving_) + sizeof(can_tx_track_power_));
}

Esr_trackmotionpower_540_Motionpower::~Esr_trackmotionpower_540_Motionpower() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  SharedDtor();
}

void Esr_trackmotionpower_540_Motionpower::SharedDtor() {
}

void Esr_trackmotionpower_540_Motionpower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_trackmotionpower_540_Motionpower::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_trackmotionpower_540_Motionpower& Esr_trackmotionpower_540_Motionpower::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_trackmotionpower_540_Motionpower* Esr_trackmotionpower_540_Motionpower::New(::google::protobuf::Arena* arena) const {
  Esr_trackmotionpower_540_Motionpower* n = new Esr_trackmotionpower_540_Motionpower;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_trackmotionpower_540_Motionpower::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&can_tx_track_moving_, 0, reinterpret_cast<char*>(&can_tx_track_power_) -
      reinterpret_cast<char*>(&can_tx_track_moving_) + sizeof(can_tx_track_power_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_trackmotionpower_540_Motionpower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool can_tx_track_moving = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_track_moving();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_tx_track_moving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_tx_track_moving_fast = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_tx_track_moving_fast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_tx_track_moving_fast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_tx_track_moving_slow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_can_tx_track_moving_slow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_tx_track_moving_slow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_track_power = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_tx_track_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_track_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  return false;
#undef DO_
}

void Esr_trackmotionpower_540_Motionpower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_tx_track_moving = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->can_tx_track_moving(), output);
  }

  // optional bool can_tx_track_moving_fast = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_tx_track_moving_fast(), output);
  }

  // optional bool can_tx_track_moving_slow = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_tx_track_moving_slow(), output);
  }

  // optional int32 can_tx_track_power = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_tx_track_power(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
}

::google::protobuf::uint8* Esr_trackmotionpower_540_Motionpower::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_tx_track_moving = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->can_tx_track_moving(), target);
  }

  // optional bool can_tx_track_moving_fast = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_tx_track_moving_fast(), target);
  }

  // optional bool can_tx_track_moving_slow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_tx_track_moving_slow(), target);
  }

  // optional int32 can_tx_track_power = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_tx_track_power(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  return target;
}

size_t Esr_trackmotionpower_540_Motionpower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool can_tx_track_moving = 1;
    if (has_can_tx_track_moving()) {
      total_size += 1 + 1;
    }

    // optional bool can_tx_track_moving_fast = 2;
    if (has_can_tx_track_moving_fast()) {
      total_size += 1 + 1;
    }

    // optional bool can_tx_track_moving_slow = 3;
    if (has_can_tx_track_moving_slow()) {
      total_size += 1 + 1;
    }

    // optional int32 can_tx_track_power = 4;
    if (has_can_tx_track_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_track_power());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_trackmotionpower_540_Motionpower::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_trackmotionpower_540_Motionpower* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_trackmotionpower_540_Motionpower>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
    MergeFrom(*source);
  }
}

void Esr_trackmotionpower_540_Motionpower::MergeFrom(const Esr_trackmotionpower_540_Motionpower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_track_moving_ = from.can_tx_track_moving_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_track_moving_fast_ = from.can_tx_track_moving_fast_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_track_moving_slow_ = from.can_tx_track_moving_slow_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_track_power_ = from.can_tx_track_power_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_trackmotionpower_540_Motionpower::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_trackmotionpower_540_Motionpower::CopyFrom(const Esr_trackmotionpower_540_Motionpower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_trackmotionpower_540_Motionpower::IsInitialized() const {
  return true;
}

void Esr_trackmotionpower_540_Motionpower::Swap(Esr_trackmotionpower_540_Motionpower* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_trackmotionpower_540_Motionpower::InternalSwap(Esr_trackmotionpower_540_Motionpower* other) {
  std::swap(can_tx_track_moving_, other->can_tx_track_moving_);
  std::swap(can_tx_track_moving_fast_, other->can_tx_track_moving_fast_);
  std::swap(can_tx_track_moving_slow_, other->can_tx_track_moving_slow_);
  std::swap(can_tx_track_power_, other->can_tx_track_power_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_trackmotionpower_540_Motionpower::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_trackmotionpower_540_Motionpower

// optional bool can_tx_track_moving = 1;
bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_moving() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_trackmotionpower_540_Motionpower::set_has_can_tx_track_moving() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_trackmotionpower_540_Motionpower::clear_has_can_tx_track_moving() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_moving() {
  can_tx_track_moving_ = false;
  clear_has_can_tx_track_moving();
}
bool Esr_trackmotionpower_540_Motionpower::can_tx_track_moving() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving)
  return can_tx_track_moving_;
}
void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_moving(bool value) {
  set_has_can_tx_track_moving();
  can_tx_track_moving_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving)
}

// optional bool can_tx_track_moving_fast = 2;
bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_moving_fast() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_trackmotionpower_540_Motionpower::set_has_can_tx_track_moving_fast() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_trackmotionpower_540_Motionpower::clear_has_can_tx_track_moving_fast() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_moving_fast() {
  can_tx_track_moving_fast_ = false;
  clear_has_can_tx_track_moving_fast();
}
bool Esr_trackmotionpower_540_Motionpower::can_tx_track_moving_fast() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_fast)
  return can_tx_track_moving_fast_;
}
void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_moving_fast(bool value) {
  set_has_can_tx_track_moving_fast();
  can_tx_track_moving_fast_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_fast)
}

// optional bool can_tx_track_moving_slow = 3;
bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_moving_slow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_trackmotionpower_540_Motionpower::set_has_can_tx_track_moving_slow() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_trackmotionpower_540_Motionpower::clear_has_can_tx_track_moving_slow() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_moving_slow() {
  can_tx_track_moving_slow_ = false;
  clear_has_can_tx_track_moving_slow();
}
bool Esr_trackmotionpower_540_Motionpower::can_tx_track_moving_slow() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_slow)
  return can_tx_track_moving_slow_;
}
void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_moving_slow(bool value) {
  set_has_can_tx_track_moving_slow();
  can_tx_track_moving_slow_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_slow)
}

// optional int32 can_tx_track_power = 4;
bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_trackmotionpower_540_Motionpower::set_has_can_tx_track_power() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_trackmotionpower_540_Motionpower::clear_has_can_tx_track_power() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_power() {
  can_tx_track_power_ = 0;
  clear_has_can_tx_track_power();
}
::google::protobuf::int32 Esr_trackmotionpower_540_Motionpower::can_tx_track_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_power)
  return can_tx_track_power_;
}
void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_power(::google::protobuf::int32 value) {
  set_has_can_tx_track_power();
  can_tx_track_power_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_trackmotionpower_540::kCanTxTrackRollingCount2FieldNumber;
const int Esr_trackmotionpower_540::kCanTxTrackCanIdGroupFieldNumber;
const int Esr_trackmotionpower_540::kCanTxTrackMotionPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_trackmotionpower_540::Esr_trackmotionpower_540()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_trackmotionpower_540)
}
Esr_trackmotionpower_540::Esr_trackmotionpower_540(const Esr_trackmotionpower_540& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      can_tx_track_motion_power_(from.can_tx_track_motion_power_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_track_rolling_count_2_, &from.can_tx_track_rolling_count_2_,
    reinterpret_cast<char*>(&can_tx_track_can_id_group_) -
    reinterpret_cast<char*>(&can_tx_track_rolling_count_2_) + sizeof(can_tx_track_can_id_group_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_trackmotionpower_540)
}

void Esr_trackmotionpower_540::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_track_rolling_count_2_, 0, reinterpret_cast<char*>(&can_tx_track_can_id_group_) -
    reinterpret_cast<char*>(&can_tx_track_rolling_count_2_) + sizeof(can_tx_track_can_id_group_));
}

Esr_trackmotionpower_540::~Esr_trackmotionpower_540() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_trackmotionpower_540)
  SharedDtor();
}

void Esr_trackmotionpower_540::SharedDtor() {
}

void Esr_trackmotionpower_540::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_trackmotionpower_540::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_trackmotionpower_540& Esr_trackmotionpower_540::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_trackmotionpower_540* Esr_trackmotionpower_540::New(::google::protobuf::Arena* arena) const {
  Esr_trackmotionpower_540* n = new Esr_trackmotionpower_540;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_trackmotionpower_540::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_trackmotionpower_540)
  can_tx_track_motion_power_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&can_tx_track_rolling_count_2_, 0, reinterpret_cast<char*>(&can_tx_track_can_id_group_) -
      reinterpret_cast<char*>(&can_tx_track_rolling_count_2_) + sizeof(can_tx_track_can_id_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_trackmotionpower_540::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_trackmotionpower_540)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool can_tx_track_rolling_count_2 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_track_rolling_count_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_tx_track_rolling_count_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_track_can_id_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_tx_track_can_id_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_track_can_id_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_can_tx_track_motion_power()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_trackmotionpower_540)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_trackmotionpower_540)
  return false;
#undef DO_
}

void Esr_trackmotionpower_540::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_trackmotionpower_540)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_tx_track_rolling_count_2 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->can_tx_track_rolling_count_2(), output);
  }

  // optional int32 can_tx_track_can_id_group = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_tx_track_can_id_group(), output);
  }

  // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
  for (unsigned int i = 0, n = this->can_tx_track_motion_power_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->can_tx_track_motion_power(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_trackmotionpower_540)
}

::google::protobuf::uint8* Esr_trackmotionpower_540::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_trackmotionpower_540)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_tx_track_rolling_count_2 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->can_tx_track_rolling_count_2(), target);
  }

  // optional int32 can_tx_track_can_id_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_tx_track_can_id_group(), target);
  }

  // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
  for (unsigned int i = 0, n = this->can_tx_track_motion_power_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->can_tx_track_motion_power(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_trackmotionpower_540)
  return target;
}

size_t Esr_trackmotionpower_540::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_trackmotionpower_540)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
  {
    unsigned int count = this->can_tx_track_motion_power_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->can_tx_track_motion_power(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool can_tx_track_rolling_count_2 = 1;
    if (has_can_tx_track_rolling_count_2()) {
      total_size += 1 + 1;
    }

    // optional int32 can_tx_track_can_id_group = 2;
    if (has_can_tx_track_can_id_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_track_can_id_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_trackmotionpower_540::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_trackmotionpower_540)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_trackmotionpower_540* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_trackmotionpower_540>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_trackmotionpower_540)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_trackmotionpower_540)
    MergeFrom(*source);
  }
}

void Esr_trackmotionpower_540::MergeFrom(const Esr_trackmotionpower_540& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_trackmotionpower_540)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  can_tx_track_motion_power_.MergeFrom(from.can_tx_track_motion_power_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_track_rolling_count_2_ = from.can_tx_track_rolling_count_2_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_track_can_id_group_ = from.can_tx_track_can_id_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_trackmotionpower_540::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_trackmotionpower_540)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_trackmotionpower_540::CopyFrom(const Esr_trackmotionpower_540& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_trackmotionpower_540)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_trackmotionpower_540::IsInitialized() const {
  return true;
}

void Esr_trackmotionpower_540::Swap(Esr_trackmotionpower_540* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_trackmotionpower_540::InternalSwap(Esr_trackmotionpower_540* other) {
  can_tx_track_motion_power_.InternalSwap(&other->can_tx_track_motion_power_);
  std::swap(can_tx_track_rolling_count_2_, other->can_tx_track_rolling_count_2_);
  std::swap(can_tx_track_can_id_group_, other->can_tx_track_can_id_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_trackmotionpower_540::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_trackmotionpower_540

// optional bool can_tx_track_rolling_count_2 = 1;
bool Esr_trackmotionpower_540::has_can_tx_track_rolling_count_2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_trackmotionpower_540::set_has_can_tx_track_rolling_count_2() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_trackmotionpower_540::clear_has_can_tx_track_rolling_count_2() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_trackmotionpower_540::clear_can_tx_track_rolling_count_2() {
  can_tx_track_rolling_count_2_ = false;
  clear_has_can_tx_track_rolling_count_2();
}
bool Esr_trackmotionpower_540::can_tx_track_rolling_count_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_rolling_count_2)
  return can_tx_track_rolling_count_2_;
}
void Esr_trackmotionpower_540::set_can_tx_track_rolling_count_2(bool value) {
  set_has_can_tx_track_rolling_count_2();
  can_tx_track_rolling_count_2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_rolling_count_2)
}

// optional int32 can_tx_track_can_id_group = 2;
bool Esr_trackmotionpower_540::has_can_tx_track_can_id_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_trackmotionpower_540::set_has_can_tx_track_can_id_group() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_trackmotionpower_540::clear_has_can_tx_track_can_id_group() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_trackmotionpower_540::clear_can_tx_track_can_id_group() {
  can_tx_track_can_id_group_ = 0;
  clear_has_can_tx_track_can_id_group();
}
::google::protobuf::int32 Esr_trackmotionpower_540::can_tx_track_can_id_group() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_can_id_group)
  return can_tx_track_can_id_group_;
}
void Esr_trackmotionpower_540::set_can_tx_track_can_id_group(::google::protobuf::int32 value) {
  set_has_can_tx_track_can_id_group();
  can_tx_track_can_id_group_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_can_id_group)
}

// repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
int Esr_trackmotionpower_540::can_tx_track_motion_power_size() const {
  return can_tx_track_motion_power_.size();
}
void Esr_trackmotionpower_540::clear_can_tx_track_motion_power() {
  can_tx_track_motion_power_.Clear();
}
const ::apollo::drivers::Esr_trackmotionpower_540_Motionpower& Esr_trackmotionpower_540::can_tx_track_motion_power(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return can_tx_track_motion_power_.Get(index);
}
::apollo::drivers::Esr_trackmotionpower_540_Motionpower* Esr_trackmotionpower_540::mutable_can_tx_track_motion_power(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return can_tx_track_motion_power_.Mutable(index);
}
::apollo::drivers::Esr_trackmotionpower_540_Motionpower* Esr_trackmotionpower_540::add_can_tx_track_motion_power() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return can_tx_track_motion_power_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >*
Esr_trackmotionpower_540::mutable_can_tx_track_motion_power() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return &can_tx_track_motion_power_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >&
Esr_trackmotionpower_540::can_tx_track_motion_power() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return can_tx_track_motion_power_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acm_inst_req_7e0::kCommandCtrFieldNumber;
const int Acm_inst_req_7e0::kCommandCodeFieldNumber;
const int Acm_inst_req_7e0::kCcWord2FieldNumber;
const int Acm_inst_req_7e0::kCcWord1FieldNumber;
const int Acm_inst_req_7e0::kCcByte2FieldNumber;
const int Acm_inst_req_7e0::kCcByte1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acm_inst_req_7e0::Acm_inst_req_7e0()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Acm_inst_req_7e0)
}
Acm_inst_req_7e0::Acm_inst_req_7e0(const Acm_inst_req_7e0& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_ctr_, &from.command_ctr_,
    reinterpret_cast<char*>(.o_byte_1_) -
    reinterpret_cast<char*>(&command_ctr_) + sizeof.o_byte_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Acm_inst_req_7e0)
}

void Acm_inst_req_7e0::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&command_ctr_, 0, reinterpret_cast<char*>(.o_byte_1_) -
    reinterpret_cast<char*>(&command_ctr_) + sizeof.o_byte_1_));
}

Acm_inst_req_7e0::~Acm_inst_req_7e0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Acm_inst_req_7e0)
  SharedDtor();
}

void Acm_inst_req_7e0::SharedDtor() {
}

void Acm_inst_req_7e0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Acm_inst_req_7e0::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Acm_inst_req_7e0& Acm_inst_req_7e0::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Acm_inst_req_7e0* Acm_inst_req_7e0::New(::google::protobuf::Arena* arena) const {
  Acm_inst_req_7e0* n = new Acm_inst_req_7e0;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Acm_inst_req_7e0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Acm_inst_req_7e0)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&command_ctr_, 0, reinterpret_cast<char*>(.o_byte_1_) -
      reinterpret_cast<char*>(&command_ctr_) + sizeof.o_byte_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Acm_inst_req_7e0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Acm_inst_req_7e0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 command_ctr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_command_ctr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_ctr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 command_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_command_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32.o_word_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has.o_word_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, .o_word_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32.o_word_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has.o_word_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, .o_word_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32.o_byte_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has.o_byte_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, .o_byte_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32.o_byte_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has.o_byte_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, .o_byte_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Acm_inst_req_7e0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Acm_inst_req_7e0)
  return false;
#undef DO_
}

void Acm_inst_req_7e0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Acm_inst_req_7e0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 command_ctr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command_ctr(), output);
  }

  // optional int32 command_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command_code(), output);
  }

  // optional int32.o_word_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this-.o_word_2(), output);
  }

  // optional int32.o_word_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this-.o_word_1(), output);
  }

  // optional int32.o_byte_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this-.o_byte_2(), output);
  }

  // optional int32.o_byte_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this-.o_byte_1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Acm_inst_req_7e0)
}

::google::protobuf::uint8* Acm_inst_req_7e0::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Acm_inst_req_7e0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 command_ctr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command_ctr(), target);
  }

  // optional int32 command_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command_code(), target);
  }

  // optional int32.o_word_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this-.o_word_2(), target);
  }

  // optional int32.o_word_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this-.o_word_1(), target);
  }

  // optional int32.o_byte_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this-.o_byte_2(), target);
  }

  // optional int32.o_byte_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this-.o_byte_1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Acm_inst_req_7e0)
  return target;
}

size_t Acm_inst_req_7e0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Acm_inst_req_7e0)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 command_ctr = 1;
    if (has_command_ctr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command_ctr());
    }

    // optional int32 command_code = 2;
    if (has_command_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command_code());
    }

    // optional int32.o_word_2 = 3;
    if (has.o_word_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this-.o_word_2());
    }

    // optional int32.o_word_1 = 4;
    if (has.o_word_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this-.o_word_1());
    }

    // optional int32.o_byte_2 = 5;
    if (has.o_byte_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this-.o_byte_2());
    }

    // optional int32.o_byte_1 = 6;
    if (has.o_byte_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this-.o_byte_1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Acm_inst_req_7e0::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Acm_inst_req_7e0)
  GOOGLE_DCHECK_NE(&from, this);
  const Acm_inst_req_7e0* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Acm_inst_req_7e0>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Acm_inst_req_7e0)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Acm_inst_req_7e0)
    MergeFrom(*source);
  }
}

void Acm_inst_req_7e0::MergeFrom(const Acm_inst_req_7e0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Acm_inst_req_7e0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      command_ctr_ = from.command_ctr_;
    }
    if (cached_has_bits & 0x00000002u) {
      command_code_ = from.command_code_;
    }
    if (cached_has_bits & 0x00000004u) {
     .o_word_2_ = from.o_word_2_;
    }
    if (cached_has_bits & 0x00000008u) {
     .o_word_1_ = from.o_word_1_;
    }
    if (cached_has_bits & 0x00000010u) {
     .o_byte_2_ = from.o_byte_2_;
    }
    if (cached_has_bits & 0x00000020u) {
     .o_byte_1_ = from.o_byte_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Acm_inst_req_7e0::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Acm_inst_req_7e0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acm_inst_req_7e0::CopyFrom(const Acm_inst_req_7e0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Acm_inst_req_7e0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acm_inst_req_7e0::IsInitialized() const {
  return true;
}

void Acm_inst_req_7e0::Swap(Acm_inst_req_7e0* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acm_inst_req_7e0::InternalSwap(Acm_inst_req_7e0* other) {
  std::swap(command_ctr_, other->command_ctr_);
  std::swap(command_code_, other->command_code_);
  std::swap.o_word_2_, other-.o_word_2_);
  std::swap.o_word_1_, other-.o_word_1_);
  std::swap.o_byte_2_, other-.o_byte_2_);
  std::swap.o_byte_1_, other-.o_byte_1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Acm_inst_req_7e0::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Acm_inst_req_7e0

// optional int32 command_ctr = 1;
bool Acm_inst_req_7e0::has_command_ctr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Acm_inst_req_7e0::set_has_command_ctr() {
  _has_bits_[0] |= 0x00000001u;
}
void Acm_inst_req_7e0::clear_has_command_ctr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Acm_inst_req_7e0::clear_command_ctr() {
  command_ctr_ = 0;
  clear_has_command_ctr();
}
::google::protobuf::int32 Acm_inst_req_7e0::command_ctr() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.command_ctr)
  return command_ctr_;
}
void Acm_inst_req_7e0::set_command_ctr(::google::protobuf::int32 value) {
  set_has_command_ctr();
  command_ctr_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.command_ctr)
}

// optional int32 command_code = 2;
bool Acm_inst_req_7e0::has_command_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Acm_inst_req_7e0::set_has_command_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Acm_inst_req_7e0::clear_has_command_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Acm_inst_req_7e0::clear_command_code() {
  command_code_ = 0;
  clear_has_command_code();
}
::google::protobuf::int32 Acm_inst_req_7e0::command_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.command_code)
  return command_code_;
}
void Acm_inst_req_7e0::set_command_code(::google::protobuf::int32 value) {
  set_has_command_code();
  command_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.command_code)
}

// optional int32.o_word_2 = 3;
bool Acm_inst_req_7e0::has.o_word_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Acm_inst_req_7e0::set_has.o_word_2() {
  _has_bits_[0] |= 0x00000004u;
}
void Acm_inst_req_7e0::clear_has.o_word_2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Acm_inst_req_7e0::clear.o_word_2() {
 .o_word_2_ = 0;
  clear_has.o_word_2();
}
::google::protobuf::int32 Acm_inst_req_7e0:.o_word_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.o_word_2)
  return.o_word_2_;
}
void Acm_inst_req_7e0::set.o_word_2(::google::protobuf::int32 value) {
  set_has.o_word_2();
 .o_word_2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.o_word_2)
}

// optional int32.o_word_1 = 4;
bool Acm_inst_req_7e0::has.o_word_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Acm_inst_req_7e0::set_has.o_word_1() {
  _has_bits_[0] |= 0x00000008u;
}
void Acm_inst_req_7e0::clear_has.o_word_1() {
  _has_bits_[0] &= ~0x00000008u;
}
void Acm_inst_req_7e0::clear.o_word_1() {
 .o_word_1_ = 0;
  clear_has.o_word_1();
}
::google::protobuf::int32 Acm_inst_req_7e0:.o_word_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.o_word_1)
  return.o_word_1_;
}
void Acm_inst_req_7e0::set.o_word_1(::google::protobuf::int32 value) {
  set_has.o_word_1();
 .o_word_1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.o_word_1)
}

// optional int32.o_byte_2 = 5;
bool Acm_inst_req_7e0::has.o_byte_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Acm_inst_req_7e0::set_has.o_byte_2() {
  _has_bits_[0] |= 0x00000010u;
}
void Acm_inst_req_7e0::clear_has.o_byte_2() {
  _has_bits_[0] &= ~0x00000010u;
}
void Acm_inst_req_7e0::clear.o_byte_2() {
 .o_byte_2_ = 0;
  clear_has.o_byte_2();
}
::google::protobuf::int32 Acm_inst_req_7e0:.o_byte_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.o_byte_2)
  return.o_byte_2_;
}
void Acm_inst_req_7e0::set.o_byte_2(::google::protobuf::int32 value) {
  set_has.o_byte_2();
 .o_byte_2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.o_byte_2)
}

// optional int32.o_byte_1 = 6;
bool Acm_inst_req_7e0::has.o_byte_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Acm_inst_req_7e0::set_has.o_byte_1() {
  _has_bits_[0] |= 0x00000020u;
}
void Acm_inst_req_7e0::clear_has.o_byte_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void Acm_inst_req_7e0::clear.o_byte_1() {
 .o_byte_1_ = 0;
  clear_has.o_byte_1();
}
::google::protobuf::int32 Acm_inst_req_7e0:.o_byte_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.o_byte_1)
  return.o_byte_1_;
}
void Acm_inst_req_7e0::set.o_byte_1(::google::protobuf::int32 value) {
  set_has.o_byte_1();
 .o_byte_1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.o_byte_1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_track01_500::kCanTxTrackGroupingChangedFieldNumber;
const int Esr_track01_500::kCanTxTrackOncomingFieldNumber;
const int Esr_track01_500::kCanTxTrackLatRateFieldNumber;
const int Esr_track01_500::kCanTxTrackBridgeObjectFieldNumber;
const int Esr_track01_500::kCanTxTrackWidthFieldNumber;
const int Esr_track01_500::kCanTxTrackStatusFieldNumber;
const int Esr_track01_500::kCanTxTrackRollingCountFieldNumber;
const int Esr_track01_500::kCanTxTrackRangeRateFieldNumber;
const int Esr_track01_500::kCanTxTrackRange.oelFieldNumber;
const int Esr_track01_500::kCanTxTrackRangeFieldNumber;
const int Esr_track01_500::kCanTxTrackMedRangeModeFieldNumber;
const int Esr_track01_500::kCanTxTrackAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_track01_500::Esr_track01_500()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_track01_500)
}
Esr_track01_500::Esr_track01_500(const Esr_track01_500& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_track_grouping_changed_, &from.can_tx_track_grouping_changed_,
    reinterpret_cast<char*>(&can_tx_track_angle_) -
    reinterpret_cast<char*>(&can_tx_track_grouping_changed_) + sizeof(can_tx_track_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_track01_500)
}

void Esr_track01_500::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_track_grouping_changed_, 0, reinterpret_cast<char*>(&can_tx_track_angle_) -
    reinterpret_cast<char*>(&can_tx_track_grouping_changed_) + sizeof(can_tx_track_angle_));
}

Esr_track01_500::~Esr_track01_500() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_track01_500)
  SharedDtor();
}

void Esr_track01_500::SharedDtor() {
}

void Esr_track01_500::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_track01_500::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_track01_500& Esr_track01_500::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_track01_500* Esr_track01_500::New(::google::protobuf::Arena* arena) const {
  Esr_track01_500* n = new Esr_track01_500;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_track01_500::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_track01_500)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&can_tx_track_grouping_changed_, 0, reinterpret_cast<char*>(&can_tx_track_range_.oel_) -
      reinterpret_cast<char*>(&can_tx_track_grouping_changed_) + sizeof(can_tx_track_range_.oel_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&can_tx_track_rolling_count_, 0, reinterpret_cast<char*>(&can_tx_track_angle_) -
      reinterpret_cast<char*>(&can_tx_track_rolling_count_) + sizeof(can_tx_track_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_track01_500::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_track01_500)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(value)) {
            set_can_tx_track_grouping_changed(static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType_IsValid(value)) {
            set_can_tx_track_oncoming(static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_track_lat_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_can_tx_track_lat_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_track_lat_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(value)) {
            set_can_tx_track_bridge_object(static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_track_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_can_tx_track_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_track_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_track01_500_Can_tx_track_statusType_IsValid(value)) {
            set_can_tx_track_status(static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_tx_track_rolling_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_can_tx_track_rolling_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_tx_track_rolling_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_track_range_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_can_tx_track_range_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_track_range_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_track_range_.oel = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_can_tx_track_range_.oel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_track_range_.oel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_track_range = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_can_tx_track_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_track_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(value)) {
            set_can_tx_track_med_range_mode(static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_track_angle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_can_tx_track_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_track_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_track01_500)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_track01_500)
  return false;
#undef DO_
}

void Esr_track01_500::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_track01_500)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->can_tx_track_grouping_changed(), output);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->can_tx_track_oncoming(), output);
  }

  // optional double can_tx_track_lat_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->can_tx_track_lat_rate(), output);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->can_tx_track_bridge_object(), output);
  }

  // optional double can_tx_track_width = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->can_tx_track_width(), output);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->can_tx_track_status(), output);
  }

  // optional bool can_tx_track_rolling_count = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->can_tx_track_rolling_count(), output);
  }

  // optional double can_tx_track_range_rate = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->can_tx_track_range_rate(), output);
  }

  // optional double can_tx_track_range_.oel = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->can_tx_track_range_.oel(), output);
  }

  // optional double can_tx_track_range = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->can_tx_track_range(), output);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->can_tx_track_med_range_mode(), output);
  }

  // optional double can_tx_track_angle = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->can_tx_track_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_track01_500)
}

::google::protobuf::uint8* Esr_track01_500::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_track01_500)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->can_tx_track_grouping_changed(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->can_tx_track_oncoming(), target);
  }

  // optional double can_tx_track_lat_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->can_tx_track_lat_rate(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->can_tx_track_bridge_object(), target);
  }

  // optional double can_tx_track_width = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->can_tx_track_width(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->can_tx_track_status(), target);
  }

  // optional bool can_tx_track_rolling_count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->can_tx_track_rolling_count(), target);
  }

  // optional double can_tx_track_range_rate = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->can_tx_track_range_rate(), target);
  }

  // optional double can_tx_track_range_.oel = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->can_tx_track_range_.oel(), target);
  }

  // optional double can_tx_track_range = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->can_tx_track_range(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->can_tx_track_med_range_mode(), target);
  }

  // optional double can_tx_track_angle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->can_tx_track_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_track01_500)
  return target;
}

size_t Esr_track01_500::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_track01_500)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
    if (has_can_tx_track_grouping_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_track_grouping_changed());
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
    if (has_can_tx_track_oncoming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_track_oncoming());
    }

    // optional double can_tx_track_lat_rate = 3;
    if (has_can_tx_track_lat_rate()) {
      total_size += 1 + 8;
    }

    // optional double can_tx_track_width = 5;
    if (has_can_tx_track_width()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
    if (has_can_tx_track_bridge_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_track_bridge_object());
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
    if (has_can_tx_track_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_track_status());
    }

    // optional double can_tx_track_range_rate = 8;
    if (has_can_tx_track_range_rate()) {
      total_size += 1 + 8;
    }

    // optional double can_tx_track_range_.oel = 9;
    if (has_can_tx_track_range_.oel()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool can_tx_track_rolling_count = 7;
    if (has_can_tx_track_rolling_count()) {
      total_size += 1 + 1;
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
    if (has_can_tx_track_med_range_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_tx_track_med_range_mode());
    }

    // optional double can_tx_track_range = 10;
    if (has_can_tx_track_range()) {
      total_size += 1 + 8;
    }

    // optional double can_tx_track_angle = 12;
    if (has_can_tx_track_angle()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_track01_500::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_track01_500)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_track01_500* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_track01_500>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_track01_500)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_track01_500)
    MergeFrom(*source);
  }
}

void Esr_track01_500::MergeFrom(const Esr_track01_500& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_track01_500)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_track_grouping_changed_ = from.can_tx_track_grouping_changed_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_track_oncoming_ = from.can_tx_track_oncoming_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_track_lat_rate_ = from.can_tx_track_lat_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_track_width_ = from.can_tx_track_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_track_bridge_object_ = from.can_tx_track_bridge_object_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_track_status_ = from.can_tx_track_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_track_range_rate_ = from.can_tx_track_range_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_track_range_.oel_ = from.can_tx_track_range_.oel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      can_tx_track_rolling_count_ = from.can_tx_track_rolling_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_tx_track_med_range_mode_ = from.can_tx_track_med_range_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_tx_track_range_ = from.can_tx_track_range_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_tx_track_angle_ = from.can_tx_track_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_track01_500::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_track01_500)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_track01_500::CopyFrom(const Esr_track01_500& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_track01_500)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_track01_500::IsInitialized() const {
  return true;
}

void Esr_track01_500::Swap(Esr_track01_500* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_track01_500::InternalSwap(Esr_track01_500* other) {
  std::swap(can_tx_track_grouping_changed_, other->can_tx_track_grouping_changed_);
  std::swap(can_tx_track_oncoming_, other->can_tx_track_oncoming_);
  std::swap(can_tx_track_lat_rate_, other->can_tx_track_lat_rate_);
  std::swap(can_tx_track_width_, other->can_tx_track_width_);
  std::swap(can_tx_track_bridge_object_, other->can_tx_track_bridge_object_);
  std::swap(can_tx_track_status_, other->can_tx_track_status_);
  std::swap(can_tx_track_range_rate_, other->can_tx_track_range_rate_);
  std::swap(can_tx_track_range_.oel_, other->can_tx_track_range_.oel_);
  std::swap(can_tx_track_rolling_count_, other->can_tx_track_rolling_count_);
  std::swap(can_tx_track_med_range_mode_, other->can_tx_track_med_range_mode_);
  std::swap(can_tx_track_range_, other->can_tx_track_range_);
  std::swap(can_tx_track_angle_, other->can_tx_track_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_track01_500::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_track01_500

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
bool Esr_track01_500::has_can_tx_track_grouping_changed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_grouping_changed() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_track01_500::clear_has_can_tx_track_grouping_changed() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_track01_500::clear_can_tx_track_grouping_changed() {
  can_tx_track_grouping_changed_ = 0;
  clear_has_can_tx_track_grouping_changed();
}
::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::can_tx_track_grouping_changed() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_grouping_changed)
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType >(can_tx_track_grouping_changed_);
}
void Esr_track01_500::set_can_tx_track_grouping_changed(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(value));
  set_has_can_tx_track_grouping_changed();
  can_tx_track_grouping_changed_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_grouping_changed)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
bool Esr_track01_500::has_can_tx_track_oncoming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_oncoming() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_track01_500::clear_has_can_tx_track_oncoming() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_track01_500::clear_can_tx_track_oncoming() {
  can_tx_track_oncoming_ = 0;
  clear_has_can_tx_track_oncoming();
}
::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::can_tx_track_oncoming() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_oncoming)
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType >(can_tx_track_oncoming_);
}
void Esr_track01_500::set_can_tx_track_oncoming(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType_IsValid(value));
  set_has_can_tx_track_oncoming();
  can_tx_track_oncoming_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_oncoming)
}

// optional double can_tx_track_lat_rate = 3;
bool Esr_track01_500::has_can_tx_track_lat_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_lat_rate() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_track01_500::clear_has_can_tx_track_lat_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_track01_500::clear_can_tx_track_lat_rate() {
  can_tx_track_lat_rate_ = 0;
  clear_has_can_tx_track_lat_rate();
}
double Esr_track01_500::can_tx_track_lat_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_lat_rate)
  return can_tx_track_lat_rate_;
}
void Esr_track01_500::set_can_tx_track_lat_rate(double value) {
  set_has_can_tx_track_lat_rate();
  can_tx_track_lat_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_lat_rate)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
bool Esr_track01_500::has_can_tx_track_bridge_object() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_bridge_object() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_track01_500::clear_has_can_tx_track_bridge_object() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_track01_500::clear_can_tx_track_bridge_object() {
  can_tx_track_bridge_object_ = 0;
  clear_has_can_tx_track_bridge_object();
}
::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::can_tx_track_bridge_object() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_bridge_object)
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType >(can_tx_track_bridge_object_);
}
void Esr_track01_500::set_can_tx_track_bridge_object(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(value));
  set_has_can_tx_track_bridge_object();
  can_tx_track_bridge_object_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_bridge_object)
}

// optional double can_tx_track_width = 5;
bool Esr_track01_500::has_can_tx_track_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_track01_500::clear_has_can_tx_track_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_track01_500::clear_can_tx_track_width() {
  can_tx_track_width_ = 0;
  clear_has_can_tx_track_width();
}
double Esr_track01_500::can_tx_track_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_width)
  return can_tx_track_width_;
}
void Esr_track01_500::set_can_tx_track_width(double value) {
  set_has_can_tx_track_width();
  can_tx_track_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_width)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
bool Esr_track01_500::has_can_tx_track_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_status() {
  _has_bits_[0] |= 0x00000020u;
}
void Esr_track01_500::clear_has_can_tx_track_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esr_track01_500::clear_can_tx_track_status() {
  can_tx_track_status_ = 0;
  clear_has_can_tx_track_status();
}
::apollo::drivers::Esr_track01_500_Can_tx_track_statusType Esr_track01_500::can_tx_track_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_status)
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType >(can_tx_track_status_);
}
void Esr_track01_500::set_can_tx_track_status(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType_IsValid(value));
  set_has_can_tx_track_status();
  can_tx_track_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_status)
}

// optional bool can_tx_track_rolling_count = 7;
bool Esr_track01_500::has_can_tx_track_rolling_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_rolling_count() {
  _has_bits_[0] |= 0x00000100u;
}
void Esr_track01_500::clear_has_can_tx_track_rolling_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esr_track01_500::clear_can_tx_track_rolling_count() {
  can_tx_track_rolling_count_ = false;
  clear_has_can_tx_track_rolling_count();
}
bool Esr_track01_500::can_tx_track_rolling_count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_rolling_count)
  return can_tx_track_rolling_count_;
}
void Esr_track01_500::set_can_tx_track_rolling_count(bool value) {
  set_has_can_tx_track_rolling_count();
  can_tx_track_rolling_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_rolling_count)
}

// optional double can_tx_track_range_rate = 8;
bool Esr_track01_500::has_can_tx_track_range_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_range_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void Esr_track01_500::clear_has_can_tx_track_range_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esr_track01_500::clear_can_tx_track_range_rate() {
  can_tx_track_range_rate_ = 0;
  clear_has_can_tx_track_range_rate();
}
double Esr_track01_500::can_tx_track_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_range_rate)
  return can_tx_track_range_rate_;
}
void Esr_track01_500::set_can_tx_track_range_rate(double value) {
  set_has_can_tx_track_range_rate();
  can_tx_track_range_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_range_rate)
}

// optional double can_tx_track_range_.oel = 9;
bool Esr_track01_500::has_can_tx_track_range_.oel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_range_.oel() {
  _has_bits_[0] |= 0x00000080u;
}
void Esr_track01_500::clear_has_can_tx_track_range_.oel() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esr_track01_500::clear_can_tx_track_range_.oel() {
  can_tx_track_range_.oel_ = 0;
  clear_has_can_tx_track_range_.oel();
}
double Esr_track01_500::can_tx_track_range_.oel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_range_.oel)
  return can_tx_track_range_.oel_;
}
void Esr_track01_500::set_can_tx_track_range_.oel(double value) {
  set_has_can_tx_track_range_.oel();
  can_tx_track_range_.oel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_range_.oel)
}

// optional double can_tx_track_range = 10;
bool Esr_track01_500::has_can_tx_track_range() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_range() {
  _has_bits_[0] |= 0x00000400u;
}
void Esr_track01_500::clear_has_can_tx_track_range() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esr_track01_500::clear_can_tx_track_range() {
  can_tx_track_range_ = 0;
  clear_has_can_tx_track_range();
}
double Esr_track01_500::can_tx_track_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_range)
  return can_tx_track_range_;
}
void Esr_track01_500::set_can_tx_track_range(double value) {
  set_has_can_tx_track_range();
  can_tx_track_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_range)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
bool Esr_track01_500::has_can_tx_track_med_range_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_med_range_mode() {
  _has_bits_[0] |= 0x00000200u;
}
void Esr_track01_500::clear_has_can_tx_track_med_range_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esr_track01_500::clear_can_tx_track_med_range_mode() {
  can_tx_track_med_range_mode_ = 0;
  clear_has_can_tx_track_med_range_mode();
}
::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::can_tx_track_med_range_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_med_range_mode)
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType >(can_tx_track_med_range_mode_);
}
void Esr_track01_500::set_can_tx_track_med_range_mode(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(value));
  set_has_can_tx_track_med_range_mode();
  can_tx_track_med_range_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_med_range_mode)
}

// optional double can_tx_track_angle = 12;
bool Esr_track01_500::has_can_tx_track_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Esr_track01_500::set_has_can_tx_track_angle() {
  _has_bits_[0] |= 0x00000800u;
}
void Esr_track01_500::clear_has_can_tx_track_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
void Esr_track01_500::clear_can_tx_track_angle() {
  can_tx_track_angle_ = 0;
  clear_has_can_tx_track_angle();
}
double Esr_track01_500::can_tx_track_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_angle)
  return can_tx_track_angle_;
}
void Esr_track01_500::set_can_tx_track_angle(double value) {
  set_has_can_tx_track_angle();
  can_tx_track_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_valid1_5d0::kCanTxValidLrSnFieldNumber;
const int Esr_valid1_5d0::kCanTxValidLrRangeRateFieldNumber;
const int Esr_valid1_5d0::kCanTxValidLrRangeFieldNumber;
const int Esr_valid1_5d0::kCanTxValidLrPowerFieldNumber;
const int Esr_valid1_5d0::kCanTxValidLrAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_valid1_5d0::Esr_valid1_5d0()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_valid1_5d0)
}
Esr_valid1_5d0::Esr_valid1_5d0(const Esr_valid1_5d0& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_valid_lr_range_rate_, &from.can_tx_valid_lr_range_rate_,
    reinterpret_cast<char*>(&can_tx_valid_lr_angle_) -
    reinterpret_cast<char*>(&can_tx_valid_lr_range_rate_) + sizeof(can_tx_valid_lr_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_valid1_5d0)
}

void Esr_valid1_5d0::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_valid_lr_range_rate_, 0, reinterpret_cast<char*>(&can_tx_valid_lr_angle_) -
    reinterpret_cast<char*>(&can_tx_valid_lr_range_rate_) + sizeof(can_tx_valid_lr_angle_));
}

Esr_valid1_5d0::~Esr_valid1_5d0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_valid1_5d0)
  SharedDtor();
}

void Esr_valid1_5d0::SharedDtor() {
}

void Esr_valid1_5d0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_valid1_5d0::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_valid1_5d0& Esr_valid1_5d0::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_valid1_5d0* Esr_valid1_5d0::New(::google::protobuf::Arena* arena) const {
  Esr_valid1_5d0* n = new Esr_valid1_5d0;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_valid1_5d0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_valid1_5d0)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&can_tx_valid_lr_range_rate_, 0, reinterpret_cast<char*>(&can_tx_valid_lr_angle_) -
      reinterpret_cast<char*>(&can_tx_valid_lr_range_rate_) + sizeof(can_tx_valid_lr_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_valid1_5d0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_valid1_5d0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 can_tx_valid_lr_sn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_valid_lr_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_valid_lr_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_valid_lr_range_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_can_tx_valid_lr_range_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_valid_lr_range_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_valid_lr_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_can_tx_valid_lr_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_valid_lr_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_valid_lr_power = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_tx_valid_lr_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_valid_lr_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_valid_lr_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_can_tx_valid_lr_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_valid_lr_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_valid1_5d0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_valid1_5d0)
  return false;
#undef DO_
}

void Esr_valid1_5d0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_valid1_5d0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_valid_lr_sn = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_tx_valid_lr_sn(), output);
  }

  // optional double can_tx_valid_lr_range_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->can_tx_valid_lr_range_rate(), output);
  }

  // optional double can_tx_valid_lr_range = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->can_tx_valid_lr_range(), output);
  }

  // optional int32 can_tx_valid_lr_power = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_tx_valid_lr_power(), output);
  }

  // optional double can_tx_valid_lr_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->can_tx_valid_lr_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_valid1_5d0)
}

::google::protobuf::uint8* Esr_valid1_5d0::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_valid1_5d0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_valid_lr_sn = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_tx_valid_lr_sn(), target);
  }

  // optional double can_tx_valid_lr_range_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->can_tx_valid_lr_range_rate(), target);
  }

  // optional double can_tx_valid_lr_range = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->can_tx_valid_lr_range(), target);
  }

  // optional int32 can_tx_valid_lr_power = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_tx_valid_lr_power(), target);
  }

  // optional double can_tx_valid_lr_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->can_tx_valid_lr_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_valid1_5d0)
  return target;
}

size_t Esr_valid1_5d0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_valid1_5d0)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double can_tx_valid_lr_range_rate = 2;
    if (has_can_tx_valid_lr_range_rate()) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_valid_lr_sn = 1;
    if (has_can_tx_valid_lr_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_valid_lr_sn());
    }

    // optional int32 can_tx_valid_lr_power = 4;
    if (has_can_tx_valid_lr_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_valid_lr_power());
    }

    // optional double can_tx_valid_lr_range = 3;
    if (has_can_tx_valid_lr_range()) {
      total_size += 1 + 8;
    }

    // optional double can_tx_valid_lr_angle = 5;
    if (has_can_tx_valid_lr_angle()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_valid1_5d0::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_valid1_5d0)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_valid1_5d0* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_valid1_5d0>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_valid1_5d0)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_valid1_5d0)
    MergeFrom(*source);
  }
}

void Esr_valid1_5d0::MergeFrom(const Esr_valid1_5d0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_valid1_5d0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_valid_lr_range_rate_ = from.can_tx_valid_lr_range_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_valid_lr_sn_ = from.can_tx_valid_lr_sn_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_valid_lr_power_ = from.can_tx_valid_lr_power_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_valid_lr_range_ = from.can_tx_valid_lr_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_valid_lr_angle_ = from.can_tx_valid_lr_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_valid1_5d0::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_valid1_5d0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_valid1_5d0::CopyFrom(const Esr_valid1_5d0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_valid1_5d0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_valid1_5d0::IsInitialized() const {
  return true;
}

void Esr_valid1_5d0::Swap(Esr_valid1_5d0* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_valid1_5d0::InternalSwap(Esr_valid1_5d0* other) {
  std::swap(can_tx_valid_lr_range_rate_, other->can_tx_valid_lr_range_rate_);
  std::swap(can_tx_valid_lr_sn_, other->can_tx_valid_lr_sn_);
  std::swap(can_tx_valid_lr_power_, other->can_tx_valid_lr_power_);
  std::swap(can_tx_valid_lr_range_, other->can_tx_valid_lr_range_);
  std::swap(can_tx_valid_lr_angle_, other->can_tx_valid_lr_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_valid1_5d0::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_valid1_5d0

// optional int32 can_tx_valid_lr_sn = 1;
bool Esr_valid1_5d0::has_can_tx_valid_lr_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_valid1_5d0::set_has_can_tx_valid_lr_sn() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_valid1_5d0::clear_has_can_tx_valid_lr_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_valid1_5d0::clear_can_tx_valid_lr_sn() {
  can_tx_valid_lr_sn_ = 0;
  clear_has_can_tx_valid_lr_sn();
}
::google::protobuf::int32 Esr_valid1_5d0::can_tx_valid_lr_sn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_sn)
  return can_tx_valid_lr_sn_;
}
void Esr_valid1_5d0::set_can_tx_valid_lr_sn(::google::protobuf::int32 value) {
  set_has_can_tx_valid_lr_sn();
  can_tx_valid_lr_sn_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_sn)
}

// optional double can_tx_valid_lr_range_rate = 2;
bool Esr_valid1_5d0::has_can_tx_valid_lr_range_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_valid1_5d0::set_has_can_tx_valid_lr_range_rate() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_valid1_5d0::clear_has_can_tx_valid_lr_range_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_valid1_5d0::clear_can_tx_valid_lr_range_rate() {
  can_tx_valid_lr_range_rate_ = 0;
  clear_has_can_tx_valid_lr_range_rate();
}
double Esr_valid1_5d0::can_tx_valid_lr_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range_rate)
  return can_tx_valid_lr_range_rate_;
}
void Esr_valid1_5d0::set_can_tx_valid_lr_range_rate(double value) {
  set_has_can_tx_valid_lr_range_rate();
  can_tx_valid_lr_range_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range_rate)
}

// optional double can_tx_valid_lr_range = 3;
bool Esr_valid1_5d0::has_can_tx_valid_lr_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_valid1_5d0::set_has_can_tx_valid_lr_range() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_valid1_5d0::clear_has_can_tx_valid_lr_range() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_valid1_5d0::clear_can_tx_valid_lr_range() {
  can_tx_valid_lr_range_ = 0;
  clear_has_can_tx_valid_lr_range();
}
double Esr_valid1_5d0::can_tx_valid_lr_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range)
  return can_tx_valid_lr_range_;
}
void Esr_valid1_5d0::set_can_tx_valid_lr_range(double value) {
  set_has_can_tx_valid_lr_range();
  can_tx_valid_lr_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range)
}

// optional int32 can_tx_valid_lr_power = 4;
bool Esr_valid1_5d0::has_can_tx_valid_lr_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_valid1_5d0::set_has_can_tx_valid_lr_power() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_valid1_5d0::clear_has_can_tx_valid_lr_power() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_valid1_5d0::clear_can_tx_valid_lr_power() {
  can_tx_valid_lr_power_ = 0;
  clear_has_can_tx_valid_lr_power();
}
::google::protobuf::int32 Esr_valid1_5d0::can_tx_valid_lr_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_power)
  return can_tx_valid_lr_power_;
}
void Esr_valid1_5d0::set_can_tx_valid_lr_power(::google::protobuf::int32 value) {
  set_has_can_tx_valid_lr_power();
  can_tx_valid_lr_power_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_power)
}

// optional double can_tx_valid_lr_angle = 5;
bool Esr_valid1_5d0::has_can_tx_valid_lr_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_valid1_5d0::set_has_can_tx_valid_lr_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_valid1_5d0::clear_has_can_tx_valid_lr_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_valid1_5d0::clear_can_tx_valid_lr_angle() {
  can_tx_valid_lr_angle_ = 0;
  clear_has_can_tx_valid_lr_angle();
}
double Esr_valid1_5d0::can_tx_valid_lr_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_angle)
  return can_tx_valid_lr_angle_;
}
void Esr_valid1_5d0::set_can_tx_valid_lr_angle(double value) {
  set_has_can_tx_valid_lr_angle();
  can_tx_valid_lr_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_valid2_5d1::kCanTxValidMrSnFieldNumber;
const int Esr_valid2_5d1::kCanTxValidMrRangeRateFieldNumber;
const int Esr_valid2_5d1::kCanTxValidMrRangeFieldNumber;
const int Esr_valid2_5d1::kCanTxValidMrPowerFieldNumber;
const int Esr_valid2_5d1::kCanTxValidMrAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_valid2_5d1::Esr_valid2_5d1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_valid2_5d1)
}
Esr_valid2_5d1::Esr_valid2_5d1(const Esr_valid2_5d1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_valid_mr_range_rate_, &from.can_tx_valid_mr_range_rate_,
    reinterpret_cast<char*>(&can_tx_valid_mr_angle_) -
    reinterpret_cast<char*>(&can_tx_valid_mr_range_rate_) + sizeof(can_tx_valid_mr_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_valid2_5d1)
}

void Esr_valid2_5d1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_valid_mr_range_rate_, 0, reinterpret_cast<char*>(&can_tx_valid_mr_angle_) -
    reinterpret_cast<char*>(&can_tx_valid_mr_range_rate_) + sizeof(can_tx_valid_mr_angle_));
}

Esr_valid2_5d1::~Esr_valid2_5d1() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_valid2_5d1)
  SharedDtor();
}

void Esr_valid2_5d1::SharedDtor() {
}

void Esr_valid2_5d1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_valid2_5d1::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_valid2_5d1& Esr_valid2_5d1::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_valid2_5d1* Esr_valid2_5d1::New(::google::protobuf::Arena* arena) const {
  Esr_valid2_5d1* n = new Esr_valid2_5d1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_valid2_5d1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_valid2_5d1)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&can_tx_valid_mr_range_rate_, 0, reinterpret_cast<char*>(&can_tx_valid_mr_angle_) -
      reinterpret_cast<char*>(&can_tx_valid_mr_range_rate_) + sizeof(can_tx_valid_mr_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_valid2_5d1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_valid2_5d1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 can_tx_valid_mr_sn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_tx_valid_mr_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_valid_mr_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_valid_mr_range_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_can_tx_valid_mr_range_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_valid_mr_range_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_valid_mr_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_can_tx_valid_mr_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_valid_mr_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_valid_mr_power = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_tx_valid_mr_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_valid_mr_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_valid_mr_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_can_tx_valid_mr_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_valid_mr_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_valid2_5d1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_valid2_5d1)
  return false;
#undef DO_
}

void Esr_valid2_5d1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_valid2_5d1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_valid_mr_sn = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_tx_valid_mr_sn(), output);
  }

  // optional double can_tx_valid_mr_range_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->can_tx_valid_mr_range_rate(), output);
  }

  // optional double can_tx_valid_mr_range = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->can_tx_valid_mr_range(), output);
  }

  // optional int32 can_tx_valid_mr_power = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_tx_valid_mr_power(), output);
  }

  // optional double can_tx_valid_mr_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->can_tx_valid_mr_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_valid2_5d1)
}

::google::protobuf::uint8* Esr_valid2_5d1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_valid2_5d1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_valid_mr_sn = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_tx_valid_mr_sn(), target);
  }

  // optional double can_tx_valid_mr_range_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->can_tx_valid_mr_range_rate(), target);
  }

  // optional double can_tx_valid_mr_range = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->can_tx_valid_mr_range(), target);
  }

  // optional int32 can_tx_valid_mr_power = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_tx_valid_mr_power(), target);
  }

  // optional double can_tx_valid_mr_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->can_tx_valid_mr_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_valid2_5d1)
  return target;
}

size_t Esr_valid2_5d1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_valid2_5d1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double can_tx_valid_mr_range_rate = 2;
    if (has_can_tx_valid_mr_range_rate()) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_valid_mr_sn = 1;
    if (has_can_tx_valid_mr_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_valid_mr_sn());
    }

    // optional int32 can_tx_valid_mr_power = 4;
    if (has_can_tx_valid_mr_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_tx_valid_mr_power());
    }

    // optional double can_tx_valid_mr_range = 3;
    if (has_can_tx_valid_mr_range()) {
      total_size += 1 + 8;
    }

    // optional double can_tx_valid_mr_angle = 5;
    if (has_can_tx_valid_mr_angle()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_valid2_5d1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_valid2_5d1)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_valid2_5d1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_valid2_5d1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_valid2_5d1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_valid2_5d1)
    MergeFrom(*source);
  }
}

void Esr_valid2_5d1::MergeFrom(const Esr_valid2_5d1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_valid2_5d1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_valid_mr_range_rate_ = from.can_tx_valid_mr_range_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_valid_mr_sn_ = from.can_tx_valid_mr_sn_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_valid_mr_power_ = from.can_tx_valid_mr_power_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_valid_mr_range_ = from.can_tx_valid_mr_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_valid_mr_angle_ = from.can_tx_valid_mr_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_valid2_5d1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_valid2_5d1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_valid2_5d1::CopyFrom(const Esr_valid2_5d1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_valid2_5d1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_valid2_5d1::IsInitialized() const {
  return true;
}

void Esr_valid2_5d1::Swap(Esr_valid2_5d1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_valid2_5d1::InternalSwap(Esr_valid2_5d1* other) {
  std::swap(can_tx_valid_mr_range_rate_, other->can_tx_valid_mr_range_rate_);
  std::swap(can_tx_valid_mr_sn_, other->can_tx_valid_mr_sn_);
  std::swap(can_tx_valid_mr_power_, other->can_tx_valid_mr_power_);
  std::swap(can_tx_valid_mr_range_, other->can_tx_valid_mr_range_);
  std::swap(can_tx_valid_mr_angle_, other->can_tx_valid_mr_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_valid2_5d1::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_valid2_5d1

// optional int32 can_tx_valid_mr_sn = 1;
bool Esr_valid2_5d1::has_can_tx_valid_mr_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_valid2_5d1::set_has_can_tx_valid_mr_sn() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_valid2_5d1::clear_has_can_tx_valid_mr_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_valid2_5d1::clear_can_tx_valid_mr_sn() {
  can_tx_valid_mr_sn_ = 0;
  clear_has_can_tx_valid_mr_sn();
}
::google::protobuf::int32 Esr_valid2_5d1::can_tx_valid_mr_sn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_sn)
  return can_tx_valid_mr_sn_;
}
void Esr_valid2_5d1::set_can_tx_valid_mr_sn(::google::protobuf::int32 value) {
  set_has_can_tx_valid_mr_sn();
  can_tx_valid_mr_sn_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_sn)
}

// optional double can_tx_valid_mr_range_rate = 2;
bool Esr_valid2_5d1::has_can_tx_valid_mr_range_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_valid2_5d1::set_has_can_tx_valid_mr_range_rate() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_valid2_5d1::clear_has_can_tx_valid_mr_range_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_valid2_5d1::clear_can_tx_valid_mr_range_rate() {
  can_tx_valid_mr_range_rate_ = 0;
  clear_has_can_tx_valid_mr_range_rate();
}
double Esr_valid2_5d1::can_tx_valid_mr_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range_rate)
  return can_tx_valid_mr_range_rate_;
}
void Esr_valid2_5d1::set_can_tx_valid_mr_range_rate(double value) {
  set_has_can_tx_valid_mr_range_rate();
  can_tx_valid_mr_range_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range_rate)
}

// optional double can_tx_valid_mr_range = 3;
bool Esr_valid2_5d1::has_can_tx_valid_mr_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_valid2_5d1::set_has_can_tx_valid_mr_range() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_valid2_5d1::clear_has_can_tx_valid_mr_range() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_valid2_5d1::clear_can_tx_valid_mr_range() {
  can_tx_valid_mr_range_ = 0;
  clear_has_can_tx_valid_mr_range();
}
double Esr_valid2_5d1::can_tx_valid_mr_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range)
  return can_tx_valid_mr_range_;
}
void Esr_valid2_5d1::set_can_tx_valid_mr_range(double value) {
  set_has_can_tx_valid_mr_range();
  can_tx_valid_mr_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range)
}

// optional int32 can_tx_valid_mr_power = 4;
bool Esr_valid2_5d1::has_can_tx_valid_mr_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_valid2_5d1::set_has_can_tx_valid_mr_power() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_valid2_5d1::clear_has_can_tx_valid_mr_power() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_valid2_5d1::clear_can_tx_valid_mr_power() {
  can_tx_valid_mr_power_ = 0;
  clear_has_can_tx_valid_mr_power();
}
::google::protobuf::int32 Esr_valid2_5d1::can_tx_valid_mr_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_power)
  return can_tx_valid_mr_power_;
}
void Esr_valid2_5d1::set_can_tx_valid_mr_power(::google::protobuf::int32 value) {
  set_has_can_tx_valid_mr_power();
  can_tx_valid_mr_power_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_power)
}

// optional double can_tx_valid_mr_angle = 5;
bool Esr_valid2_5d1::has_can_tx_valid_mr_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_valid2_5d1::set_has_can_tx_valid_mr_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_valid2_5d1::clear_has_can_tx_valid_mr_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_valid2_5d1::clear_can_tx_valid_mr_angle() {
  can_tx_valid_mr_angle_ = 0;
  clear_has_can_tx_valid_mr_angle();
}
double Esr_valid2_5d1::can_tx_valid_mr_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_angle)
  return can_tx_valid_mr_angle_;
}
void Esr_valid2_5d1::set_can_tx_valid_mr_angle(double value) {
  set_has_can_tx_valid_mr_angle();
  can_tx_valid_mr_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acm_inst_resp_7e4::kData7FieldNumber;
const int Acm_inst_resp_7e4::kData6FieldNumber;
const int Acm_inst_resp_7e4::kData5FieldNumber;
const int Acm_inst_resp_7e4::kData4FieldNumber;
const int Acm_inst_resp_7e4::kData3FieldNumber;
const int Acm_inst_resp_7e4::kRtnCmdCounterFieldNumber;
const int Acm_inst_resp_7e4::kCommandReturnCodeFieldNumber;
const int Acm_inst_resp_7e4::kPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acm_inst_resp_7e4::Acm_inst_resp_7e4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Acm_inst_resp_7e4)
}
Acm_inst_resp_7e4::Acm_inst_resp_7e4(const Acm_inst_resp_7e4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_7_, &from.data_7_,
    reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&data_7_) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Acm_inst_resp_7e4)
}

void Acm_inst_resp_7e4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_7_, 0, reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&data_7_) + sizeof(pid_));
}

Acm_inst_resp_7e4::~Acm_inst_resp_7e4() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Acm_inst_resp_7e4)
  SharedDtor();
}

void Acm_inst_resp_7e4::SharedDtor() {
}

void Acm_inst_resp_7e4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Acm_inst_resp_7e4::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Acm_inst_resp_7e4& Acm_inst_resp_7e4::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Acm_inst_resp_7e4* Acm_inst_resp_7e4::New(::google::protobuf::Arena* arena) const {
  Acm_inst_resp_7e4* n = new Acm_inst_resp_7e4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Acm_inst_resp_7e4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Acm_inst_resp_7e4)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&data_7_, 0, reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&data_7_) + sizeof(pid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Acm_inst_resp_7e4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Acm_inst_resp_7e4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_7 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_data_7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_6 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_data_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_data_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_data_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_data_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rtn_cmd_counter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_rtn_cmd_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtn_cmd_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 command_return_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_command_return_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_return_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Acm_inst_resp_7e4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Acm_inst_resp_7e4)
  return false;
#undef DO_
}

void Acm_inst_resp_7e4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Acm_inst_resp_7e4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_7 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_7(), output);
  }

  // optional int32 data_6 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_6(), output);
  }

  // optional int32 data_5 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->data_5(), output);
  }

  // optional int32 data_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_4(), output);
  }

  // optional int32 data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->data_3(), output);
  }

  // optional int32 rtn_cmd_counter = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rtn_cmd_counter(), output);
  }

  // optional int32 command_return_code = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->command_return_code(), output);
  }

  // optional int32 pid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Acm_inst_resp_7e4)
}

::google::protobuf::uint8* Acm_inst_resp_7e4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Acm_inst_resp_7e4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_7 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_7(), target);
  }

  // optional int32 data_6 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_6(), target);
  }

  // optional int32 data_5 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->data_5(), target);
  }

  // optional int32 data_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->data_4(), target);
  }

  // optional int32 data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->data_3(), target);
  }

  // optional int32 rtn_cmd_counter = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rtn_cmd_counter(), target);
  }

  // optional int32 command_return_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->command_return_code(), target);
  }

  // optional int32 pid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Acm_inst_resp_7e4)
  return target;
}

size_t Acm_inst_resp_7e4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Acm_inst_resp_7e4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 data_7 = 1;
    if (has_data_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_7());
    }

    // optional int32 data_6 = 2;
    if (has_data_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_6());
    }

    // optional int32 data_5 = 3;
    if (has_data_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_5());
    }

    // optional int32 data_4 = 4;
    if (has_data_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_4());
    }

    // optional int32 data_3 = 5;
    if (has_data_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_3());
    }

    // optional int32 rtn_cmd_counter = 6;
    if (has_rtn_cmd_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtn_cmd_counter());
    }

    // optional int32 command_return_code = 7;
    if (has_command_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command_return_code());
    }

    // optional int32 pid = 8;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Acm_inst_resp_7e4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Acm_inst_resp_7e4)
  GOOGLE_DCHECK_NE(&from, this);
  const Acm_inst_resp_7e4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Acm_inst_resp_7e4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Acm_inst_resp_7e4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Acm_inst_resp_7e4)
    MergeFrom(*source);
  }
}

void Acm_inst_resp_7e4::MergeFrom(const Acm_inst_resp_7e4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Acm_inst_resp_7e4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      data_7_ = from.data_7_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_6_ = from.data_6_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_5_ = from.data_5_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_4_ = from.data_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_3_ = from.data_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtn_cmd_counter_ = from.rtn_cmd_counter_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_return_code_ = from.command_return_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Acm_inst_resp_7e4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Acm_inst_resp_7e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acm_inst_resp_7e4::CopyFrom(const Acm_inst_resp_7e4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Acm_inst_resp_7e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acm_inst_resp_7e4::IsInitialized() const {
  return true;
}

void Acm_inst_resp_7e4::Swap(Acm_inst_resp_7e4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acm_inst_resp_7e4::InternalSwap(Acm_inst_resp_7e4* other) {
  std::swap(data_7_, other->data_7_);
  std::swap(data_6_, other->data_6_);
  std::swap(data_5_, other->data_5_);
  std::swap(data_4_, other->data_4_);
  std::swap(data_3_, other->data_3_);
  std::swap(rtn_cmd_counter_, other->rtn_cmd_counter_);
  std::swap(command_return_code_, other->command_return_code_);
  std::swap(pid_, other->pid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Acm_inst_resp_7e4::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Acm_inst_resp_7e4

// optional int32 data_7 = 1;
bool Acm_inst_resp_7e4::has_data_7() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Acm_inst_resp_7e4::set_has_data_7() {
  _has_bits_[0] |= 0x00000001u;
}
void Acm_inst_resp_7e4::clear_has_data_7() {
  _has_bits_[0] &= ~0x00000001u;
}
void Acm_inst_resp_7e4::clear_data_7() {
  data_7_ = 0;
  clear_has_data_7();
}
::google::protobuf::int32 Acm_inst_resp_7e4::data_7() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_7)
  return data_7_;
}
void Acm_inst_resp_7e4::set_data_7(::google::protobuf::int32 value) {
  set_has_data_7();
  data_7_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_7)
}

// optional int32 data_6 = 2;
bool Acm_inst_resp_7e4::has_data_6() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Acm_inst_resp_7e4::set_has_data_6() {
  _has_bits_[0] |= 0x00000002u;
}
void Acm_inst_resp_7e4::clear_has_data_6() {
  _has_bits_[0] &= ~0x00000002u;
}
void Acm_inst_resp_7e4::clear_data_6() {
  data_6_ = 0;
  clear_has_data_6();
}
::google::protobuf::int32 Acm_inst_resp_7e4::data_6() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_6)
  return data_6_;
}
void Acm_inst_resp_7e4::set_data_6(::google::protobuf::int32 value) {
  set_has_data_6();
  data_6_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_6)
}

// optional int32 data_5 = 3;
bool Acm_inst_resp_7e4::has_data_5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Acm_inst_resp_7e4::set_has_data_5() {
  _has_bits_[0] |= 0x00000004u;
}
void Acm_inst_resp_7e4::clear_has_data_5() {
  _has_bits_[0] &= ~0x00000004u;
}
void Acm_inst_resp_7e4::clear_data_5() {
  data_5_ = 0;
  clear_has_data_5();
}
::google::protobuf::int32 Acm_inst_resp_7e4::data_5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_5)
  return data_5_;
}
void Acm_inst_resp_7e4::set_data_5(::google::protobuf::int32 value) {
  set_has_data_5();
  data_5_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_5)
}

// optional int32 data_4 = 4;
bool Acm_inst_resp_7e4::has_data_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Acm_inst_resp_7e4::set_has_data_4() {
  _has_bits_[0] |= 0x00000008u;
}
void Acm_inst_resp_7e4::clear_has_data_4() {
  _has_bits_[0] &= ~0x00000008u;
}
void Acm_inst_resp_7e4::clear_data_4() {
  data_4_ = 0;
  clear_has_data_4();
}
::google::protobuf::int32 Acm_inst_resp_7e4::data_4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_4)
  return data_4_;
}
void Acm_inst_resp_7e4::set_data_4(::google::protobuf::int32 value) {
  set_has_data_4();
  data_4_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_4)
}

// optional int32 data_3 = 5;
bool Acm_inst_resp_7e4::has_data_3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Acm_inst_resp_7e4::set_has_data_3() {
  _has_bits_[0] |= 0x00000010u;
}
void Acm_inst_resp_7e4::clear_has_data_3() {
  _has_bits_[0] &= ~0x00000010u;
}
void Acm_inst_resp_7e4::clear_data_3() {
  data_3_ = 0;
  clear_has_data_3();
}
::google::protobuf::int32 Acm_inst_resp_7e4::data_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_3)
  return data_3_;
}
void Acm_inst_resp_7e4::set_data_3(::google::protobuf::int32 value) {
  set_has_data_3();
  data_3_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_3)
}

// optional int32 rtn_cmd_counter = 6;
bool Acm_inst_resp_7e4::has_rtn_cmd_counter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Acm_inst_resp_7e4::set_has_rtn_cmd_counter() {
  _has_bits_[0] |= 0x00000020u;
}
void Acm_inst_resp_7e4::clear_has_rtn_cmd_counter() {
  _has_bits_[0] &= ~0x00000020u;
}
void Acm_inst_resp_7e4::clear_rtn_cmd_counter() {
  rtn_cmd_counter_ = 0;
  clear_has_rtn_cmd_counter();
}
::google::protobuf::int32 Acm_inst_resp_7e4::rtn_cmd_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.rtn_cmd_counter)
  return rtn_cmd_counter_;
}
void Acm_inst_resp_7e4::set_rtn_cmd_counter(::google::protobuf::int32 value) {
  set_has_rtn_cmd_counter();
  rtn_cmd_counter_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.rtn_cmd_counter)
}

// optional int32 command_return_code = 7;
bool Acm_inst_resp_7e4::has_command_return_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Acm_inst_resp_7e4::set_has_command_return_code() {
  _has_bits_[0] |= 0x00000040u;
}
void Acm_inst_resp_7e4::clear_has_command_return_code() {
  _has_bits_[0] &= ~0x00000040u;
}
void Acm_inst_resp_7e4::clear_command_return_code() {
  command_return_code_ = 0;
  clear_has_command_return_code();
}
::google::protobuf::int32 Acm_inst_resp_7e4::command_return_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.command_return_code)
  return command_return_code_;
}
void Acm_inst_resp_7e4::set_command_return_code(::google::protobuf::int32 value) {
  set_has_command_return_code();
  command_return_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.command_return_code)
}

// optional int32 pid = 8;
bool Acm_inst_resp_7e4::has_pid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Acm_inst_resp_7e4::set_has_pid() {
  _has_bits_[0] |= 0x00000080u;
}
void Acm_inst_resp_7e4::clear_has_pid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Acm_inst_resp_7e4::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
::google::protobuf::int32 Acm_inst_resp_7e4::pid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.pid)
  return pid_;
}
void Acm_inst_resp_7e4::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.pid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle2_4f1::kCanRxVolvoShortTrackRocFieldNumber;
const int Vehicle2_4f1::kCanRxMrOnlyTransmitFieldNumber;
const int Vehicle2_4f1::kCanRxLrOnlyTransmitFieldNumber;
const int Vehicle2_4f1::kCanRxHighYawAngleFieldNumber;
const int Vehicle2_4f1::kCanRxClearFaultsFieldNumber;
const int Vehicle2_4f1::kCanRxUseAngleMisalignmentFieldNumber;
const int Vehicle2_4f1::kCanRxTurnSignalStatusFieldNumber;
const int Vehicle2_4f1::kCanRxBlockageDisableFieldNumber;
const int Vehicle2_4f1::kCanRxVehicleSpeedValidityFieldNumber;
const int Vehicle2_4f1::kCanRxMmrUpsideDownFieldNumber;
const int Vehicle2_4f1::kCanRxWiperStatusFieldNumber;
const int Vehicle2_4f1::kCanRxRawDataEnableFieldNumber;
const int Vehicle2_4f1::kCanRxRadarCmdRadiateFieldNumber;
const int Vehicle2_4f1::kCanRxGroupingModeFieldNumber;
const int Vehicle2_4f1::kCanRxMaximumTracksFieldNumber;
const int Vehicle2_4f1::kCanRxLateralMountingOffsetFieldNumber;
const int Vehicle2_4f1::kCanRxAngleMisalignmentFieldNumber;
const int Vehicle2_4f1::kCanRxScanIndexAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle2_4f1::Vehicle2_4f1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle2_4f1)
}
Vehicle2_4f1::Vehicle2_4f1(const Vehicle2_4f1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_volvo_short_track_roc_, &from.can_rx_volvo_short_track_roc_,
    reinterpret_cast<char*>(&can_rx_scan_index_ack_) -
    reinterpret_cast<char*>(&can_rx_volvo_short_track_roc_) + sizeof(can_rx_scan_index_ack_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle2_4f1)
}

void Vehicle2_4f1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_rx_volvo_short_track_roc_, 0, reinterpret_cast<char*>(&can_rx_scan_index_ack_) -
    reinterpret_cast<char*>(&can_rx_volvo_short_track_roc_) + sizeof(can_rx_scan_index_ack_));
}

Vehicle2_4f1::~Vehicle2_4f1() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle2_4f1)
  SharedDtor();
}

void Vehicle2_4f1::SharedDtor() {
}

void Vehicle2_4f1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle2_4f1::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle2_4f1& Vehicle2_4f1::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vehicle2_4f1* Vehicle2_4f1::New(::google::protobuf::Arena* arena) const {
  Vehicle2_4f1* n = new Vehicle2_4f1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle2_4f1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle2_4f1)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&can_rx_volvo_short_track_roc_, 0, reinterpret_cast<char*>(&can_rx_blockage_disable_) -
      reinterpret_cast<char*>(&can_rx_volvo_short_track_roc_) + sizeof(can_rx_blockage_disable_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&can_rx_vehicle_speed_validity_, 0, reinterpret_cast<char*>(&can_rx_lateral_mounting_offset_) -
      reinterpret_cast<char*>(&can_rx_vehicle_speed_validity_) + sizeof(can_rx_lateral_mounting_offset_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&can_rx_angle_misalignment_, 0, reinterpret_cast<char*>(&can_rx_scan_index_ack_) -
      reinterpret_cast<char*>(&can_rx_angle_misalignment_) + sizeof(can_rx_scan_index_ack_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vehicle2_4f1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Vehicle2_4f1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double can_rx_volvo_short_track_roc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_can_rx_volvo_short_track_roc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_volvo_short_track_roc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(value)) {
            set_can_rx_mr_only_transmit(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(value)) {
            set_can_rx_lr_only_transmit(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_rx_high_yaw_angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_can_rx_high_yaw_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_rx_high_yaw_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(value)) {
            set_can_rx_clear_faults(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(value)) {
            set_can_rx_use_angle_misalignment(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(value)) {
            set_can_rx_turn_signal_status(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(value)) {
            set_can_rx_blockage_disable(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(value)) {
            set_can_rx_vehicle_speed_validity(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(value)) {
            set_can_rx_mmr_upside_down(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(value)) {
            set_can_rx_wiper_status(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(value)) {
            set_can_rx_raw_data_enable(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(value)) {
            set_can_rx_radar_cmd_radiate(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(value)) {
            set_can_rx_grouping_mode(static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_rx_maximum_tracks = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_can_rx_maximum_tracks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_rx_maximum_tracks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_lateral_mounting_offset = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_can_rx_lateral_mounting_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_lateral_mounting_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_angle_misalignment = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_can_rx_angle_misalignment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_angle_misalignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_rx_scan_index_ack = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_can_rx_scan_index_ack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_rx_scan_index_ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Vehicle2_4f1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Vehicle2_4f1)
  return false;
#undef DO_
}

void Vehicle2_4f1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Vehicle2_4f1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double can_rx_volvo_short_track_roc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->can_rx_volvo_short_track_roc(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->can_rx_mr_only_transmit(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->can_rx_lr_only_transmit(), output);
  }

  // optional int32 can_rx_high_yaw_angle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_rx_high_yaw_angle(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->can_rx_clear_faults(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->can_rx_use_angle_misalignment(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->can_rx_turn_signal_status(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->can_rx_blockage_disable(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->can_rx_vehicle_speed_validity(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->can_rx_mmr_upside_down(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->can_rx_wiper_status(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->can_rx_raw_data_enable(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->can_rx_radar_cmd_radiate(), output);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->can_rx_grouping_mode(), output);
  }

  // optional int32 can_rx_maximum_tracks = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->can_rx_maximum_tracks(), output);
  }

  // optional double can_rx_lateral_mounting_offset = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->can_rx_lateral_mounting_offset(), output);
  }

  // optional double can_rx_angle_misalignment = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->can_rx_angle_misalignment(), output);
  }

  // optional int32 can_rx_scan_index_ack = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->can_rx_scan_index_ack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Vehicle2_4f1)
}

::google::protobuf::uint8* Vehicle2_4f1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle2_4f1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double can_rx_volvo_short_track_roc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->can_rx_volvo_short_track_roc(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->can_rx_mr_only_transmit(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->can_rx_lr_only_transmit(), target);
  }

  // optional int32 can_rx_high_yaw_angle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_rx_high_yaw_angle(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->can_rx_clear_faults(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->can_rx_use_angle_misalignment(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->can_rx_turn_signal_status(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->can_rx_blockage_disable(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->can_rx_vehicle_speed_validity(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->can_rx_mmr_upside_down(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->can_rx_wiper_status(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->can_rx_raw_data_enable(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->can_rx_radar_cmd_radiate(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->can_rx_grouping_mode(), target);
  }

  // optional int32 can_rx_maximum_tracks = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->can_rx_maximum_tracks(), target);
  }

  // optional double can_rx_lateral_mounting_offset = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->can_rx_lateral_mounting_offset(), target);
  }

  // optional double can_rx_angle_misalignment = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->can_rx_angle_misalignment(), target);
  }

  // optional int32 can_rx_scan_index_ack = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->can_rx_scan_index_ack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle2_4f1)
  return target;
}

size_t Vehicle2_4f1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle2_4f1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double can_rx_volvo_short_track_roc = 1;
    if (has_can_rx_volvo_short_track_roc()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
    if (has_can_rx_mr_only_transmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_mr_only_transmit());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
    if (has_can_rx_lr_only_transmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_lr_only_transmit());
    }

    // optional int32 can_rx_high_yaw_angle = 4;
    if (has_can_rx_high_yaw_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_rx_high_yaw_angle());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
    if (has_can_rx_clear_faults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_clear_faults());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
    if (has_can_rx_use_angle_misalignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_use_angle_misalignment());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
    if (has_can_rx_turn_signal_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_turn_signal_status());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
    if (has_can_rx_blockage_disable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_blockage_disable());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
    if (has_can_rx_vehicle_speed_validity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_vehicle_speed_validity());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
    if (has_can_rx_mmr_upside_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_mmr_upside_down());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
    if (has_can_rx_wiper_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_wiper_status());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
    if (has_can_rx_raw_data_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_raw_data_enable());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
    if (has_can_rx_radar_cmd_radiate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_radar_cmd_radiate());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
    if (has_can_rx_grouping_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_grouping_mode());
    }

    // optional int32 can_rx_maximum_tracks = 15;
    if (has_can_rx_maximum_tracks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_rx_maximum_tracks());
    }

    // optional double can_rx_lateral_mounting_offset = 16;
    if (has_can_rx_lateral_mounting_offset()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double can_rx_angle_misalignment = 17;
    if (has_can_rx_angle_misalignment()) {
      total_size += 2 + 8;
    }

    // optional int32 can_rx_scan_index_ack = 18;
    if (has_can_rx_scan_index_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_rx_scan_index_ack());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle2_4f1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle2_4f1)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle2_4f1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle2_4f1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle2_4f1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Vehicle2_4f1)
    MergeFrom(*source);
  }
}

void Vehicle2_4f1::MergeFrom(const Vehicle2_4f1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle2_4f1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_volvo_short_track_roc_ = from.can_rx_volvo_short_track_roc_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_mr_only_transmit_ = from.can_rx_mr_only_transmit_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_lr_only_transmit_ = from.can_rx_lr_only_transmit_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_high_yaw_angle_ = from.can_rx_high_yaw_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_clear_faults_ = from.can_rx_clear_faults_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_use_angle_misalignment_ = from.can_rx_use_angle_misalignment_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_turn_signal_status_ = from.can_rx_turn_signal_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_blockage_disable_ = from.can_rx_blockage_disable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      can_rx_vehicle_speed_validity_ = from.can_rx_vehicle_speed_validity_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_rx_mmr_upside_down_ = from.can_rx_mmr_upside_down_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_rx_wiper_status_ = from.can_rx_wiper_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_rx_raw_data_enable_ = from.can_rx_raw_data_enable_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_rx_radar_cmd_radiate_ = from.can_rx_radar_cmd_radiate_;
    }
    if (cached_has_bits & 0x00002000u) {
      can_rx_grouping_mode_ = from.can_rx_grouping_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      can_rx_maximum_tracks_ = from.can_rx_maximum_tracks_;
    }
    if (cached_has_bits & 0x00008000u) {
      can_rx_lateral_mounting_offset_ = from.can_rx_lateral_mounting_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      can_rx_angle_misalignment_ = from.can_rx_angle_misalignment_;
    }
    if (cached_has_bits & 0x00020000u) {
      can_rx_scan_index_ack_ = from.can_rx_scan_index_ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle2_4f1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle2_4f1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle2_4f1::CopyFrom(const Vehicle2_4f1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle2_4f1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle2_4f1::IsInitialized() const {
  return true;
}

void Vehicle2_4f1::Swap(Vehicle2_4f1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle2_4f1::InternalSwap(Vehicle2_4f1* other) {
  std::swap(can_rx_volvo_short_track_roc_, other->can_rx_volvo_short_track_roc_);
  std::swap(can_rx_mr_only_transmit_, other->can_rx_mr_only_transmit_);
  std::swap(can_rx_lr_only_transmit_, other->can_rx_lr_only_transmit_);
  std::swap(can_rx_high_yaw_angle_, other->can_rx_high_yaw_angle_);
  std::swap(can_rx_clear_faults_, other->can_rx_clear_faults_);
  std::swap(can_rx_use_angle_misalignment_, other->can_rx_use_angle_misalignment_);
  std::swap(can_rx_turn_signal_status_, other->can_rx_turn_signal_status_);
  std::swap(can_rx_blockage_disable_, other->can_rx_blockage_disable_);
  std::swap(can_rx_vehicle_speed_validity_, other->can_rx_vehicle_speed_validity_);
  std::swap(can_rx_mmr_upside_down_, other->can_rx_mmr_upside_down_);
  std::swap(can_rx_wiper_status_, other->can_rx_wiper_status_);
  std::swap(can_rx_raw_data_enable_, other->can_rx_raw_data_enable_);
  std::swap(can_rx_radar_cmd_radiate_, other->can_rx_radar_cmd_radiate_);
  std::swap(can_rx_grouping_mode_, other->can_rx_grouping_mode_);
  std::swap(can_rx_maximum_tracks_, other->can_rx_maximum_tracks_);
  std::swap(can_rx_lateral_mounting_offset_, other->can_rx_lateral_mounting_offset_);
  std::swap(can_rx_angle_misalignment_, other->can_rx_angle_misalignment_);
  std::swap(can_rx_scan_index_ack_, other->can_rx_scan_index_ack_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle2_4f1::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicle2_4f1

// optional double can_rx_volvo_short_track_roc = 1;
bool Vehicle2_4f1::has_can_rx_volvo_short_track_roc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_volvo_short_track_roc() {
  _has_bits_[0] |= 0x00000001u;
}
void Vehicle2_4f1::clear_has_can_rx_volvo_short_track_roc() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vehicle2_4f1::clear_can_rx_volvo_short_track_roc() {
  can_rx_volvo_short_track_roc_ = 0;
  clear_has_can_rx_volvo_short_track_roc();
}
double Vehicle2_4f1::can_rx_volvo_short_track_roc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_volvo_short_track_roc)
  return can_rx_volvo_short_track_roc_;
}
void Vehicle2_4f1::set_can_rx_volvo_short_track_roc(double value) {
  set_has_can_rx_volvo_short_track_roc();
  can_rx_volvo_short_track_roc_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_volvo_short_track_roc)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
bool Vehicle2_4f1::has_can_rx_mr_only_transmit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_mr_only_transmit() {
  _has_bits_[0] |= 0x00000002u;
}
void Vehicle2_4f1::clear_has_can_rx_mr_only_transmit() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vehicle2_4f1::clear_can_rx_mr_only_transmit() {
  can_rx_mr_only_transmit_ = 0;
  clear_has_can_rx_mr_only_transmit();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::can_rx_mr_only_transmit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_mr_only_transmit)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType >(can_rx_mr_only_transmit_);
}
void Vehicle2_4f1::set_can_rx_mr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(value));
  set_has_can_rx_mr_only_transmit();
  can_rx_mr_only_transmit_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_mr_only_transmit)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
bool Vehicle2_4f1::has_can_rx_lr_only_transmit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_lr_only_transmit() {
  _has_bits_[0] |= 0x00000004u;
}
void Vehicle2_4f1::clear_has_can_rx_lr_only_transmit() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vehicle2_4f1::clear_can_rx_lr_only_transmit() {
  can_rx_lr_only_transmit_ = 0;
  clear_has_can_rx_lr_only_transmit();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::can_rx_lr_only_transmit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_lr_only_transmit)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType >(can_rx_lr_only_transmit_);
}
void Vehicle2_4f1::set_can_rx_lr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(value));
  set_has_can_rx_lr_only_transmit();
  can_rx_lr_only_transmit_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_lr_only_transmit)
}

// optional int32 can_rx_high_yaw_angle = 4;
bool Vehicle2_4f1::has_can_rx_high_yaw_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_high_yaw_angle() {
  _has_bits_[0] |= 0x00000008u;
}
void Vehicle2_4f1::clear_has_can_rx_high_yaw_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vehicle2_4f1::clear_can_rx_high_yaw_angle() {
  can_rx_high_yaw_angle_ = 0;
  clear_has_can_rx_high_yaw_angle();
}
::google::protobuf::int32 Vehicle2_4f1::can_rx_high_yaw_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_high_yaw_angle)
  return can_rx_high_yaw_angle_;
}
void Vehicle2_4f1::set_can_rx_high_yaw_angle(::google::protobuf::int32 value) {
  set_has_can_rx_high_yaw_angle();
  can_rx_high_yaw_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_high_yaw_angle)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
bool Vehicle2_4f1::has_can_rx_clear_faults() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_clear_faults() {
  _has_bits_[0] |= 0x00000010u;
}
void Vehicle2_4f1::clear_has_can_rx_clear_faults() {
  _has_bits_[0] &= ~0x00000010u;
}
void Vehicle2_4f1::clear_can_rx_clear_faults() {
  can_rx_clear_faults_ = 0;
  clear_has_can_rx_clear_faults();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::can_rx_clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_clear_faults)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType >(can_rx_clear_faults_);
}
void Vehicle2_4f1::set_can_rx_clear_faults(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(value));
  set_has_can_rx_clear_faults();
  can_rx_clear_faults_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_clear_faults)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
bool Vehicle2_4f1::has_can_rx_use_angle_misalignment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_use_angle_misalignment() {
  _has_bits_[0] |= 0x00000020u;
}
void Vehicle2_4f1::clear_has_can_rx_use_angle_misalignment() {
  _has_bits_[0] &= ~0x00000020u;
}
void Vehicle2_4f1::clear_can_rx_use_angle_misalignment() {
  can_rx_use_angle_misalignment_ = 0;
  clear_has_can_rx_use_angle_misalignment();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::can_rx_use_angle_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_use_angle_misalignment)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType >(can_rx_use_angle_misalignment_);
}
void Vehicle2_4f1::set_can_rx_use_angle_misalignment(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(value));
  set_has_can_rx_use_angle_misalignment();
  can_rx_use_angle_misalignment_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_use_angle_misalignment)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
bool Vehicle2_4f1::has_can_rx_turn_signal_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_turn_signal_status() {
  _has_bits_[0] |= 0x00000040u;
}
void Vehicle2_4f1::clear_has_can_rx_turn_signal_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void Vehicle2_4f1::clear_can_rx_turn_signal_status() {
  can_rx_turn_signal_status_ = 0;
  clear_has_can_rx_turn_signal_status();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::can_rx_turn_signal_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_turn_signal_status)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType >(can_rx_turn_signal_status_);
}
void Vehicle2_4f1::set_can_rx_turn_signal_status(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(value));
  set_has_can_rx_turn_signal_status();
  can_rx_turn_signal_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_turn_signal_status)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
bool Vehicle2_4f1::has_can_rx_blockage_disable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_blockage_disable() {
  _has_bits_[0] |= 0x00000080u;
}
void Vehicle2_4f1::clear_has_can_rx_blockage_disable() {
  _has_bits_[0] &= ~0x00000080u;
}
void Vehicle2_4f1::clear_can_rx_blockage_disable() {
  can_rx_blockage_disable_ = 0;
  clear_has_can_rx_blockage_disable();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::can_rx_blockage_disable() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_blockage_disable)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType >(can_rx_blockage_disable_);
}
void Vehicle2_4f1::set_can_rx_blockage_disable(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(value));
  set_has_can_rx_blockage_disable();
  can_rx_blockage_disable_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_blockage_disable)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
bool Vehicle2_4f1::has_can_rx_vehicle_speed_validity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_vehicle_speed_validity() {
  _has_bits_[0] |= 0x00000100u;
}
void Vehicle2_4f1::clear_has_can_rx_vehicle_speed_validity() {
  _has_bits_[0] &= ~0x00000100u;
}
void Vehicle2_4f1::clear_can_rx_vehicle_speed_validity() {
  can_rx_vehicle_speed_validity_ = 0;
  clear_has_can_rx_vehicle_speed_validity();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::can_rx_vehicle_speed_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_vehicle_speed_validity)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType >(can_rx_vehicle_speed_validity_);
}
void Vehicle2_4f1::set_can_rx_vehicle_speed_validity(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(value));
  set_has_can_rx_vehicle_speed_validity();
  can_rx_vehicle_speed_validity_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_vehicle_speed_validity)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
bool Vehicle2_4f1::has_can_rx_mmr_upside_down() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_mmr_upside_down() {
  _has_bits_[0] |= 0x00000200u;
}
void Vehicle2_4f1::clear_has_can_rx_mmr_upside_down() {
  _has_bits_[0] &= ~0x00000200u;
}
void Vehicle2_4f1::clear_can_rx_mmr_upside_down() {
  can_rx_mmr_upside_down_ = 0;
  clear_has_can_rx_mmr_upside_down();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::can_rx_mmr_upside_down() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_mmr_upside_down)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType >(can_rx_mmr_upside_down_);
}
void Vehicle2_4f1::set_can_rx_mmr_upside_down(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(value));
  set_has_can_rx_mmr_upside_down();
  can_rx_mmr_upside_down_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_mmr_upside_down)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
bool Vehicle2_4f1::has_can_rx_wiper_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_wiper_status() {
  _has_bits_[0] |= 0x00000400u;
}
void Vehicle2_4f1::clear_has_can_rx_wiper_status() {
  _has_bits_[0] &= ~0x00000400u;
}
void Vehicle2_4f1::clear_can_rx_wiper_status() {
  can_rx_wiper_status_ = 0;
  clear_has_can_rx_wiper_status();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::can_rx_wiper_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_wiper_status)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType >(can_rx_wiper_status_);
}
void Vehicle2_4f1::set_can_rx_wiper_status(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(value));
  set_has_can_rx_wiper_status();
  can_rx_wiper_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_wiper_status)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
bool Vehicle2_4f1::has_can_rx_raw_data_enable() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_raw_data_enable() {
  _has_bits_[0] |= 0x00000800u;
}
void Vehicle2_4f1::clear_has_can_rx_raw_data_enable() {
  _has_bits_[0] &= ~0x00000800u;
}
void Vehicle2_4f1::clear_can_rx_raw_data_enable() {
  can_rx_raw_data_enable_ = 0;
  clear_has_can_rx_raw_data_enable();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::can_rx_raw_data_enable() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_raw_data_enable)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType >(can_rx_raw_data_enable_);
}
void Vehicle2_4f1::set_can_rx_raw_data_enable(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(value));
  set_has_can_rx_raw_data_enable();
  can_rx_raw_data_enable_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_raw_data_enable)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
bool Vehicle2_4f1::has_can_rx_radar_cmd_radiate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_radar_cmd_radiate() {
  _has_bits_[0] |= 0x00001000u;
}
void Vehicle2_4f1::clear_has_can_rx_radar_cmd_radiate() {
  _has_bits_[0] &= ~0x00001000u;
}
void Vehicle2_4f1::clear_can_rx_radar_cmd_radiate() {
  can_rx_radar_cmd_radiate_ = 0;
  clear_has_can_rx_radar_cmd_radiate();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::can_rx_radar_cmd_radiate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_radar_cmd_radiate)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType >(can_rx_radar_cmd_radiate_);
}
void Vehicle2_4f1::set_can_rx_radar_cmd_radiate(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(value));
  set_has_can_rx_radar_cmd_radiate();
  can_rx_radar_cmd_radiate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_radar_cmd_radiate)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
bool Vehicle2_4f1::has_can_rx_grouping_mode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_grouping_mode() {
  _has_bits_[0] |= 0x00002000u;
}
void Vehicle2_4f1::clear_has_can_rx_grouping_mode() {
  _has_bits_[0] &= ~0x00002000u;
}
void Vehicle2_4f1::clear_can_rx_grouping_mode() {
  can_rx_grouping_mode_ = 0;
  clear_has_can_rx_grouping_mode();
}
::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::can_rx_grouping_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_grouping_mode)
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType >(can_rx_grouping_mode_);
}
void Vehicle2_4f1::set_can_rx_grouping_mode(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(value));
  set_has_can_rx_grouping_mode();
  can_rx_grouping_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_grouping_mode)
}

// optional int32 can_rx_maximum_tracks = 15;
bool Vehicle2_4f1::has_can_rx_maximum_tracks() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_maximum_tracks() {
  _has_bits_[0] |= 0x00004000u;
}
void Vehicle2_4f1::clear_has_can_rx_maximum_tracks() {
  _has_bits_[0] &= ~0x00004000u;
}
void Vehicle2_4f1::clear_can_rx_maximum_tracks() {
  can_rx_maximum_tracks_ = 0;
  clear_has_can_rx_maximum_tracks();
}
::google::protobuf::int32 Vehicle2_4f1::can_rx_maximum_tracks() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_maximum_tracks)
  return can_rx_maximum_tracks_;
}
void Vehicle2_4f1::set_can_rx_maximum_tracks(::google::protobuf::int32 value) {
  set_has_can_rx_maximum_tracks();
  can_rx_maximum_tracks_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_maximum_tracks)
}

// optional double can_rx_lateral_mounting_offset = 16;
bool Vehicle2_4f1::has_can_rx_lateral_mounting_offset() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_lateral_mounting_offset() {
  _has_bits_[0] |= 0x00008000u;
}
void Vehicle2_4f1::clear_has_can_rx_lateral_mounting_offset() {
  _has_bits_[0] &= ~0x00008000u;
}
void Vehicle2_4f1::clear_can_rx_lateral_mounting_offset() {
  can_rx_lateral_mounting_offset_ = 0;
  clear_has_can_rx_lateral_mounting_offset();
}
double Vehicle2_4f1::can_rx_lateral_mounting_offset() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_lateral_mounting_offset)
  return can_rx_lateral_mounting_offset_;
}
void Vehicle2_4f1::set_can_rx_lateral_mounting_offset(double value) {
  set_has_can_rx_lateral_mounting_offset();
  can_rx_lateral_mounting_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_lateral_mounting_offset)
}

// optional double can_rx_angle_misalignment = 17;
bool Vehicle2_4f1::has_can_rx_angle_misalignment() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_angle_misalignment() {
  _has_bits_[0] |= 0x00010000u;
}
void Vehicle2_4f1::clear_has_can_rx_angle_misalignment() {
  _has_bits_[0] &= ~0x00010000u;
}
void Vehicle2_4f1::clear_can_rx_angle_misalignment() {
  can_rx_angle_misalignment_ = 0;
  clear_has_can_rx_angle_misalignment();
}
double Vehicle2_4f1::can_rx_angle_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_angle_misalignment)
  return can_rx_angle_misalignment_;
}
void Vehicle2_4f1::set_can_rx_angle_misalignment(double value) {
  set_has_can_rx_angle_misalignment();
  can_rx_angle_misalignment_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_angle_misalignment)
}

// optional int32 can_rx_scan_index_ack = 18;
bool Vehicle2_4f1::has_can_rx_scan_index_ack() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Vehicle2_4f1::set_has_can_rx_scan_index_ack() {
  _has_bits_[0] |= 0x00020000u;
}
void Vehicle2_4f1::clear_has_can_rx_scan_index_ack() {
  _has_bits_[0] &= ~0x00020000u;
}
void Vehicle2_4f1::clear_can_rx_scan_index_ack() {
  can_rx_scan_index_ack_ = 0;
  clear_has_can_rx_scan_index_ack();
}
::google::protobuf::int32 Vehicle2_4f1::can_rx_scan_index_ack() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_scan_index_ack)
  return can_rx_scan_index_ack_;
}
void Vehicle2_4f1::set_can_rx_scan_index_ack(::google::protobuf::int32 value) {
  set_has_can_rx_scan_index_ack();
  can_rx_scan_index_ack_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_scan_index_ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle1_4f0::kCanRxSteeringAngleValidityFieldNumber;
const int Vehicle1_4f0::kCanRxSteeringAngleRateFieldNumber;
const int Vehicle1_4f0::kCanRxSteeringAngleSignFieldNumber;
const int Vehicle1_4f0::kCanRxSteeringAngleRateSignFieldNumber;
const int Vehicle1_4f0::kCanRxSteeringAngleFieldNumber;
const int Vehicle1_4f0::kCanRxRadiusCurvatureFieldNumber;
const int Vehicle1_4f0::kCanRxYawRateValidityFieldNumber;
const int Vehicle1_4f0::kCanRxYawRateFieldNumber;
const int Vehicle1_4f0::kCanRxVehicleSpeedDirectionFieldNumber;
const int Vehicle1_4f0::kCanRxVehicleSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle1_4f0::Vehicle1_4f0()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle1_4f0)
}
Vehicle1_4f0::Vehicle1_4f0(const Vehicle1_4f0& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_steering_angle_validity_, &from.can_rx_steering_angle_validity_,
    reinterpret_cast<char*>(&can_rx_vehicle_speed_) -
    reinterpret_cast<char*>(&can_rx_steering_angle_validity_) + sizeof(can_rx_vehicle_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle1_4f0)
}

void Vehicle1_4f0::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_rx_steering_angle_validity_, 0, reinterpret_cast<char*>(&can_rx_vehicle_speed_) -
    reinterpret_cast<char*>(&can_rx_steering_angle_validity_) + sizeof(can_rx_vehicle_speed_));
}

Vehicle1_4f0::~Vehicle1_4f0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle1_4f0)
  SharedDtor();
}

void Vehicle1_4f0::SharedDtor() {
}

void Vehicle1_4f0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle1_4f0::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle1_4f0& Vehicle1_4f0::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vehicle1_4f0* Vehicle1_4f0::New(::google::protobuf::Arena* arena) const {
  Vehicle1_4f0* n = new Vehicle1_4f0;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle1_4f0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle1_4f0)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&can_rx_steering_angle_validity_, 0, reinterpret_cast<char*>(&can_rx_yaw_rate_validity_) -
      reinterpret_cast<char*>(&can_rx_steering_angle_validity_) + sizeof(can_rx_yaw_rate_validity_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&can_rx_vehicle_speed_direction_, 0, reinterpret_cast<char*>(&can_rx_vehicle_speed_) -
      reinterpret_cast<char*>(&can_rx_vehicle_speed_direction_) + sizeof(can_rx_vehicle_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vehicle1_4f0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Vehicle1_4f0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(value)) {
            set_can_rx_steering_angle_validity(static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_rx_steering_angle_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_rx_steering_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_rx_steering_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(value)) {
            set_can_rx_steering_angle_sign(static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(value)) {
            set_can_rx_steering_angle_rate_sign(static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_rx_steering_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_can_rx_steering_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_rx_steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_rx_radius_curvature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_can_rx_radius_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_rx_radius_curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(value)) {
            set_can_rx_yaw_rate_validity(static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_yaw_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_can_rx_yaw_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(value)) {
            set_can_rx_vehicle_speed_direction(static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_vehicle_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_can_rx_vehicle_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_vehicle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Vehicle1_4f0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Vehicle1_4f0)
  return false;
#undef DO_
}

void Vehicle1_4f0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Vehicle1_4f0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->can_rx_steering_angle_validity(), output);
  }

  // optional int32 can_rx_steering_angle_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_rx_steering_angle_rate(), output);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->can_rx_steering_angle_sign(), output);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->can_rx_steering_angle_rate_sign(), output);
  }

  // optional int32 can_rx_steering_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->can_rx_steering_angle(), output);
  }

  // optional int32 can_rx_radius_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->can_rx_radius_curvature(), output);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->can_rx_yaw_rate_validity(), output);
  }

  // optional double can_rx_yaw_rate = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->can_rx_yaw_rate(), output);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->can_rx_vehicle_speed_direction(), output);
  }

  // optional double can_rx_vehicle_speed = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->can_rx_vehicle_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Vehicle1_4f0)
}

::google::protobuf::uint8* Vehicle1_4f0::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle1_4f0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->can_rx_steering_angle_validity(), target);
  }

  // optional int32 can_rx_steering_angle_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_rx_steering_angle_rate(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->can_rx_steering_angle_sign(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->can_rx_steering_angle_rate_sign(), target);
  }

  // optional int32 can_rx_steering_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->can_rx_steering_angle(), target);
  }

  // optional int32 can_rx_radius_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->can_rx_radius_curvature(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->can_rx_yaw_rate_validity(), target);
  }

  // optional double can_rx_yaw_rate = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->can_rx_yaw_rate(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->can_rx_vehicle_speed_direction(), target);
  }

  // optional double can_rx_vehicle_speed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->can_rx_vehicle_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle1_4f0)
  return target;
}

size_t Vehicle1_4f0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle1_4f0)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
    if (has_can_rx_steering_angle_validity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_steering_angle_validity());
    }

    // optional int32 can_rx_steering_angle_rate = 2;
    if (has_can_rx_steering_angle_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_rx_steering_angle_rate());
    }

    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
    if (has_can_rx_steering_angle_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_steering_angle_sign());
    }

    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
    if (has_can_rx_steering_angle_rate_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_steering_angle_rate_sign());
    }

    // optional int32 can_rx_steering_angle = 5;
    if (has_can_rx_steering_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_rx_steering_angle());
    }

    // optional int32 can_rx_radius_curvature = 6;
    if (has_can_rx_radius_curvature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_rx_radius_curvature());
    }

    // optional double can_rx_yaw_rate = 8;
    if (has_can_rx_yaw_rate()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
    if (has_can_rx_yaw_rate_validity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_yaw_rate_validity());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
    if (has_can_rx_vehicle_speed_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_vehicle_speed_direction());
    }

    // optional double can_rx_vehicle_speed = 10;
    if (has_can_rx_vehicle_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle1_4f0::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle1_4f0)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle1_4f0* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle1_4f0>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle1_4f0)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Vehicle1_4f0)
    MergeFrom(*source);
  }
}

void Vehicle1_4f0::MergeFrom(const Vehicle1_4f0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle1_4f0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_steering_angle_validity_ = from.can_rx_steering_angle_validity_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_steering_angle_rate_ = from.can_rx_steering_angle_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_steering_angle_sign_ = from.can_rx_steering_angle_sign_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_steering_angle_rate_sign_ = from.can_rx_steering_angle_rate_sign_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_steering_angle_ = from.can_rx_steering_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_radius_curvature_ = from.can_rx_radius_curvature_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_yaw_rate_ = from.can_rx_yaw_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_yaw_rate_validity_ = from.can_rx_yaw_rate_validity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      can_rx_vehicle_speed_direction_ = from.can_rx_vehicle_speed_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_rx_vehicle_speed_ = from.can_rx_vehicle_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle1_4f0::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle1_4f0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle1_4f0::CopyFrom(const Vehicle1_4f0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle1_4f0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle1_4f0::IsInitialized() const {
  return true;
}

void Vehicle1_4f0::Swap(Vehicle1_4f0* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle1_4f0::InternalSwap(Vehicle1_4f0* other) {
  std::swap(can_rx_steering_angle_validity_, other->can_rx_steering_angle_validity_);
  std::swap(can_rx_steering_angle_rate_, other->can_rx_steering_angle_rate_);
  std::swap(can_rx_steering_angle_sign_, other->can_rx_steering_angle_sign_);
  std::swap(can_rx_steering_angle_rate_sign_, other->can_rx_steering_angle_rate_sign_);
  std::swap(can_rx_steering_angle_, other->can_rx_steering_angle_);
  std::swap(can_rx_radius_curvature_, other->can_rx_radius_curvature_);
  std::swap(can_rx_yaw_rate_, other->can_rx_yaw_rate_);
  std::swap(can_rx_yaw_rate_validity_, other->can_rx_yaw_rate_validity_);
  std::swap(can_rx_vehicle_speed_direction_, other->can_rx_vehicle_speed_direction_);
  std::swap(can_rx_vehicle_speed_, other->can_rx_vehicle_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle1_4f0::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicle1_4f0

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
bool Vehicle1_4f0::has_can_rx_steering_angle_validity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_steering_angle_validity() {
  _has_bits_[0] |= 0x00000001u;
}
void Vehicle1_4f0::clear_has_can_rx_steering_angle_validity() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vehicle1_4f0::clear_can_rx_steering_angle_validity() {
  can_rx_steering_angle_validity_ = 0;
  clear_has_can_rx_steering_angle_validity();
}
::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::can_rx_steering_angle_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_validity)
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType >(can_rx_steering_angle_validity_);
}
void Vehicle1_4f0::set_can_rx_steering_angle_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(value));
  set_has_can_rx_steering_angle_validity();
  can_rx_steering_angle_validity_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_validity)
}

// optional int32 can_rx_steering_angle_rate = 2;
bool Vehicle1_4f0::has_can_rx_steering_angle_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_steering_angle_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void Vehicle1_4f0::clear_has_can_rx_steering_angle_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vehicle1_4f0::clear_can_rx_steering_angle_rate() {
  can_rx_steering_angle_rate_ = 0;
  clear_has_can_rx_steering_angle_rate();
}
::google::protobuf::int32 Vehicle1_4f0::can_rx_steering_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate)
  return can_rx_steering_angle_rate_;
}
void Vehicle1_4f0::set_can_rx_steering_angle_rate(::google::protobuf::int32 value) {
  set_has_can_rx_steering_angle_rate();
  can_rx_steering_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
bool Vehicle1_4f0::has_can_rx_steering_angle_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_steering_angle_sign() {
  _has_bits_[0] |= 0x00000004u;
}
void Vehicle1_4f0::clear_has_can_rx_steering_angle_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vehicle1_4f0::clear_can_rx_steering_angle_sign() {
  can_rx_steering_angle_sign_ = 0;
  clear_has_can_rx_steering_angle_sign();
}
::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::can_rx_steering_angle_sign() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_sign)
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType >(can_rx_steering_angle_sign_);
}
void Vehicle1_4f0::set_can_rx_steering_angle_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(value));
  set_has_can_rx_steering_angle_sign();
  can_rx_steering_angle_sign_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_sign)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
bool Vehicle1_4f0::has_can_rx_steering_angle_rate_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_steering_angle_rate_sign() {
  _has_bits_[0] |= 0x00000008u;
}
void Vehicle1_4f0::clear_has_can_rx_steering_angle_rate_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vehicle1_4f0::clear_can_rx_steering_angle_rate_sign() {
  can_rx_steering_angle_rate_sign_ = 0;
  clear_has_can_rx_steering_angle_rate_sign();
}
::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::can_rx_steering_angle_rate_sign() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate_sign)
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType >(can_rx_steering_angle_rate_sign_);
}
void Vehicle1_4f0::set_can_rx_steering_angle_rate_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(value));
  set_has_can_rx_steering_angle_rate_sign();
  can_rx_steering_angle_rate_sign_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate_sign)
}

// optional int32 can_rx_steering_angle = 5;
bool Vehicle1_4f0::has_can_rx_steering_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_steering_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void Vehicle1_4f0::clear_has_can_rx_steering_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void Vehicle1_4f0::clear_can_rx_steering_angle() {
  can_rx_steering_angle_ = 0;
  clear_has_can_rx_steering_angle();
}
::google::protobuf::int32 Vehicle1_4f0::can_rx_steering_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle)
  return can_rx_steering_angle_;
}
void Vehicle1_4f0::set_can_rx_steering_angle(::google::protobuf::int32 value) {
  set_has_can_rx_steering_angle();
  can_rx_steering_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle)
}

// optional int32 can_rx_radius_curvature = 6;
bool Vehicle1_4f0::has_can_rx_radius_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_radius_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
void Vehicle1_4f0::clear_has_can_rx_radius_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
void Vehicle1_4f0::clear_can_rx_radius_curvature() {
  can_rx_radius_curvature_ = 0;
  clear_has_can_rx_radius_curvature();
}
::google::protobuf::int32 Vehicle1_4f0::can_rx_radius_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_radius_curvature)
  return can_rx_radius_curvature_;
}
void Vehicle1_4f0::set_can_rx_radius_curvature(::google::protobuf::int32 value) {
  set_has_can_rx_radius_curvature();
  can_rx_radius_curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_radius_curvature)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
bool Vehicle1_4f0::has_can_rx_yaw_rate_validity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_yaw_rate_validity() {
  _has_bits_[0] |= 0x00000080u;
}
void Vehicle1_4f0::clear_has_can_rx_yaw_rate_validity() {
  _has_bits_[0] &= ~0x00000080u;
}
void Vehicle1_4f0::clear_can_rx_yaw_rate_validity() {
  can_rx_yaw_rate_validity_ = 0;
  clear_has_can_rx_yaw_rate_validity();
}
::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::can_rx_yaw_rate_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate_validity)
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType >(can_rx_yaw_rate_validity_);
}
void Vehicle1_4f0::set_can_rx_yaw_rate_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(value));
  set_has_can_rx_yaw_rate_validity();
  can_rx_yaw_rate_validity_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate_validity)
}

// optional double can_rx_yaw_rate = 8;
bool Vehicle1_4f0::has_can_rx_yaw_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_yaw_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void Vehicle1_4f0::clear_has_can_rx_yaw_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void Vehicle1_4f0::clear_can_rx_yaw_rate() {
  can_rx_yaw_rate_ = 0;
  clear_has_can_rx_yaw_rate();
}
double Vehicle1_4f0::can_rx_yaw_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate)
  return can_rx_yaw_rate_;
}
void Vehicle1_4f0::set_can_rx_yaw_rate(double value) {
  set_has_can_rx_yaw_rate();
  can_rx_yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
bool Vehicle1_4f0::has_can_rx_vehicle_speed_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_vehicle_speed_direction() {
  _has_bits_[0] |= 0x00000100u;
}
void Vehicle1_4f0::clear_has_can_rx_vehicle_speed_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
void Vehicle1_4f0::clear_can_rx_vehicle_speed_direction() {
  can_rx_vehicle_speed_direction_ = 0;
  clear_has_can_rx_vehicle_speed_direction();
}
::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::can_rx_vehicle_speed_direction() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed_direction)
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType >(can_rx_vehicle_speed_direction_);
}
void Vehicle1_4f0::set_can_rx_vehicle_speed_direction(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(value));
  set_has_can_rx_vehicle_speed_direction();
  can_rx_vehicle_speed_direction_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed_direction)
}

// optional double can_rx_vehicle_speed = 10;
bool Vehicle1_4f0::has_can_rx_vehicle_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Vehicle1_4f0::set_has_can_rx_vehicle_speed() {
  _has_bits_[0] |= 0x00000200u;
}
void Vehicle1_4f0::clear_has_can_rx_vehicle_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
void Vehicle1_4f0::clear_can_rx_vehicle_speed() {
  can_rx_vehicle_speed_ = 0;
  clear_has_can_rx_vehicle_speed();
}
double Vehicle1_4f0::can_rx_vehicle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed)
  return can_rx_vehicle_speed_;
}
void Vehicle1_4f0::set_can_rx_vehicle_speed(double value) {
  set_has_can_rx_vehicle_speed();
  can_rx_vehicle_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_sim1_5c0::kCanRxSimTrackIdFieldNumber;
const int Esr_sim1_5c0::kCanRxSimStatusFieldNumber;
const int Esr_sim1_5c0::kCanRxSimRangeRateFieldNumber;
const int Esr_sim1_5c0::kCanRxSimRange.oelFieldNumber;
const int Esr_sim1_5c0::kCanRxSimRangeFieldNumber;
const int Esr_sim1_5c0::kCanRxSimLatRateFieldNumber;
const int Esr_sim1_5c0::kCanRxSimLatPosFieldNumber;
const int Esr_sim1_5c0::kCanRxSimFunctionFieldNumber;
const int Esr_sim1_5c0::kCanRxSimAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_sim1_5c0::Esr_sim1_5c0()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_sim1_5c0)
}
Esr_sim1_5c0::Esr_sim1_5c0(const Esr_sim1_5c0& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_sim_track_id_, &from.can_rx_sim_track_id_,
    reinterpret_cast<char*>(&can_rx_sim_angle_) -
    reinterpret_cast<char*>(&can_rx_sim_track_id_) + sizeof(can_rx_sim_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_sim1_5c0)
}

void Esr_sim1_5c0::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_rx_sim_track_id_, 0, reinterpret_cast<char*>(&can_rx_sim_angle_) -
    reinterpret_cast<char*>(&can_rx_sim_track_id_) + sizeof(can_rx_sim_angle_));
}

Esr_sim1_5c0::~Esr_sim1_5c0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_sim1_5c0)
  SharedDtor();
}

void Esr_sim1_5c0::SharedDtor() {
}

void Esr_sim1_5c0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_sim1_5c0::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_sim1_5c0& Esr_sim1_5c0::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_sim1_5c0* Esr_sim1_5c0::New(::google::protobuf::Arena* arena) const {
  Esr_sim1_5c0* n = new Esr_sim1_5c0;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_sim1_5c0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_sim1_5c0)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&can_rx_sim_track_id_, 0, reinterpret_cast<char*>(&can_rx_sim_lat_pos_) -
      reinterpret_cast<char*>(&can_rx_sim_track_id_) + sizeof(can_rx_sim_lat_pos_));
  }
  can_rx_sim_angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_sim1_5c0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_sim1_5c0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(value)) {
            set_can_rx_sim_track_id(static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(value)) {
            set_can_rx_sim_status(static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_sim_range_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_can_rx_sim_range_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_sim_range_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_sim_range_.oel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_can_rx_sim_range_.oel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_sim_range_.oel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_rx_sim_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_can_rx_sim_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_rx_sim_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_sim_lat_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_can_rx_sim_lat_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_sim_lat_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_sim_lat_pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_can_rx_sim_lat_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_sim_lat_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(value)) {
            set_can_rx_sim_function(static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_rx_sim_angle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_can_rx_sim_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_rx_sim_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto s.oess;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
s.oess:
  // @@protoc_insertion_point(parse_s.oess:apollo.drivers.Esr_sim1_5c0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Esr_sim1_5c0)
  return false;
#undef DO_
}

void Esr_sim1_5c0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Esr_sim1_5c0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->can_rx_sim_track_id(), output);
  }

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->can_rx_sim_status(), output);
  }

  // optional double can_rx_sim_range_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->can_rx_sim_range_rate(), output);
  }

  // optional double can_rx_sim_range_.oel = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->can_rx_sim_range_.oel(), output);
  }

  // optional int32 can_rx_sim_range = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->can_rx_sim_range(), output);
  }

  // optional double can_rx_sim_lat_rate = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->can_rx_sim_lat_rate(), output);
  }

  // optional double can_rx_sim_lat_pos = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->can_rx_sim_lat_pos(), output);
  }

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->can_rx_sim_function(), output);
  }

  // optional double can_rx_sim_angle = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->can_rx_sim_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Esr_sim1_5c0)
}

::google::protobuf::uint8* Esr_sim1_5c0::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_sim1_5c0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->can_rx_sim_track_id(), target);
  }

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->can_rx_sim_status(), target);
  }

  // optional double can_rx_sim_range_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->can_rx_sim_range_rate(), target);
  }

  // optional double can_rx_sim_range_.oel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->can_rx_sim_range_.oel(), target);
  }

  // optional int32 can_rx_sim_range = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->can_rx_sim_range(), target);
  }

  // optional double can_rx_sim_lat_rate = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->can_rx_sim_lat_rate(), target);
  }

  // optional double can_rx_sim_lat_pos = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->can_rx_sim_lat_pos(), target);
  }

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->can_rx_sim_function(), target);
  }

  // optional double can_rx_sim_angle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->can_rx_sim_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_sim1_5c0)
  return target;
}

size_t Esr_sim1_5c0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_sim1_5c0)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
    if (has_can_rx_sim_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_sim_track_id());
    }

    // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
    if (has_can_rx_sim_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_sim_status());
    }

    // optional double can_rx_sim_range_rate = 3;
    if (has_can_rx_sim_range_rate()) {
      total_size += 1 + 8;
    }

    // optional double can_rx_sim_range_.oel = 4;
    if (has_can_rx_sim_range_.oel()) {
      total_size += 1 + 8;
    }

    // optional double can_rx_sim_lat_rate = 6;
    if (has_can_rx_sim_lat_rate()) {
      total_size += 1 + 8;
    }

    // optional int32 can_rx_sim_range = 5;
    if (has_can_rx_sim_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_rx_sim_range());
    }

    // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
    if (has_can_rx_sim_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->can_rx_sim_function());
    }

    // optional double can_rx_sim_lat_pos = 7;
    if (has_can_rx_sim_lat_pos()) {
      total_size += 1 + 8;
    }

  }
  // optional double can_rx_sim_angle = 9;
  if (has_can_rx_sim_angle()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esr_sim1_5c0::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_sim1_5c0)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_sim1_5c0* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esr_sim1_5c0>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_sim1_5c0)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_s.oess:apollo.drivers.Esr_sim1_5c0)
    MergeFrom(*source);
  }
}

void Esr_sim1_5c0::MergeFrom(const Esr_sim1_5c0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_sim1_5c0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_sim_track_id_ = from.can_rx_sim_track_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_sim_status_ = from.can_rx_sim_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_sim_range_rate_ = from.can_rx_sim_range_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_sim_range_.oel_ = from.can_rx_sim_range_.oel_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_sim_lat_rate_ = from.can_rx_sim_lat_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_sim_range_ = from.can_rx_sim_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_sim_function_ = from.can_rx_sim_function_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_sim_lat_pos_ = from.can_rx_sim_lat_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_can_rx_sim_angle(from.can_rx_sim_angle());
  }
}

void Esr_sim1_5c0::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_sim1_5c0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_sim1_5c0::CopyFrom(const Esr_sim1_5c0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_sim1_5c0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_sim1_5c0::IsInitialized() const {
  return true;
}

void Esr_sim1_5c0::Swap(Esr_sim1_5c0* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esr_sim1_5c0::InternalSwap(Esr_sim1_5c0* other) {
  std::swap(can_rx_sim_track_id_, other->can_rx_sim_track_id_);
  std::swap(can_rx_sim_status_, other->can_rx_sim_status_);
  std::swap(can_rx_sim_range_rate_, other->can_rx_sim_range_rate_);
  std::swap(can_rx_sim_range_.oel_, other->can_rx_sim_range_.oel_);
  std::swap(can_rx_sim_lat_rate_, other->can_rx_sim_lat_rate_);
  std::swap(can_rx_sim_range_, other->can_rx_sim_range_);
  std::swap(can_rx_sim_function_, other->can_rx_sim_function_);
  std::swap(can_rx_sim_lat_pos_, other->can_rx_sim_lat_pos_);
  std::swap(can_rx_sim_angle_, other->can_rx_sim_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esr_sim1_5c0::GetMetadata() const {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esr_sim1_5c0

// optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
bool Esr_sim1_5c0::has_can_rx_sim_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esr_sim1_5c0::clear_can_rx_sim_track_id() {
  can_rx_sim_track_id_ = 0;
  clear_has_can_rx_sim_track_id();
}
::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::can_rx_sim_track_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_track_id)
  return static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType >(can_rx_sim_track_id_);
}
void Esr_sim1_5c0::set_can_rx_sim_track_id(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType value) {
  assert(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(value));
  set_has_can_rx_sim_track_id();
  can_rx_sim_track_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_track_id)
}

// optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
bool Esr_sim1_5c0::has_can_rx_sim_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_status() {
  _has_bits_[0] |= 0x00000002u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esr_sim1_5c0::clear_can_rx_sim_status() {
  can_rx_sim_status_ = 0;
  clear_has_can_rx_sim_status();
}
::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::can_rx_sim_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_status)
  return static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType >(can_rx_sim_status_);
}
void Esr_sim1_5c0::set_can_rx_sim_status(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType value) {
  assert(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(value));
  set_has_can_rx_sim_status();
  can_rx_sim_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_status)
}

// optional double can_rx_sim_range_rate = 3;
bool Esr_sim1_5c0::has_can_rx_sim_range_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_range_rate() {
  _has_bits_[0] |= 0x00000004u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_range_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esr_sim1_5c0::clear_can_rx_sim_range_rate() {
  can_rx_sim_range_rate_ = 0;
  clear_has_can_rx_sim_range_rate();
}
double Esr_sim1_5c0::can_rx_sim_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_rate)
  return can_rx_sim_range_rate_;
}
void Esr_sim1_5c0::set_can_rx_sim_range_rate(double value) {
  set_has_can_rx_sim_range_rate();
  can_rx_sim_range_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_rate)
}

// optional double can_rx_sim_range_.oel = 4;
bool Esr_sim1_5c0::has_can_rx_sim_range_.oel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_range_.oel() {
  _has_bits_[0] |= 0x00000008u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_range_.oel() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esr_sim1_5c0::clear_can_rx_sim_range_.oel() {
  can_rx_sim_range_.oel_ = 0;
  clear_has_can_rx_sim_range_.oel();
}
double Esr_sim1_5c0::can_rx_sim_range_.oel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_.oel)
  return can_rx_sim_range_.oel_;
}
void Esr_sim1_5c0::set_can_rx_sim_range_.oel(double value) {
  set_has_can_rx_sim_range_.oel();
  can_rx_sim_range_.oel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_.oel)
}

// optional int32 can_rx_sim_range = 5;
bool Esr_sim1_5c0::has_can_rx_sim_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_range() {
  _has_bits_[0] |= 0x00000020u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_range() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esr_sim1_5c0::clear_can_rx_sim_range() {
  can_rx_sim_range_ = 0;
  clear_has_can_rx_sim_range();
}
::google::protobuf::int32 Esr_sim1_5c0::can_rx_sim_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range)
  return can_rx_sim_range_;
}
void Esr_sim1_5c0::set_can_rx_sim_range(::google::protobuf::int32 value) {
  set_has_can_rx_sim_range();
  can_rx_sim_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range)
}

// optional double can_rx_sim_lat_rate = 6;
bool Esr_sim1_5c0::has_can_rx_sim_lat_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_lat_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_lat_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esr_sim1_5c0::clear_can_rx_sim_lat_rate() {
  can_rx_sim_lat_rate_ = 0;
  clear_has_can_rx_sim_lat_rate();
}
double Esr_sim1_5c0::can_rx_sim_lat_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_rate)
  return can_rx_sim_lat_rate_;
}
void Esr_sim1_5c0::set_can_rx_sim_lat_rate(double value) {
  set_has_can_rx_sim_lat_rate();
  can_rx_sim_lat_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_rate)
}

// optional double can_rx_sim_lat_pos = 7;
bool Esr_sim1_5c0::has_can_rx_sim_lat_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_lat_pos() {
  _has_bits_[0] |= 0x00000080u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_lat_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esr_sim1_5c0::clear_can_rx_sim_lat_pos() {
  can_rx_sim_lat_pos_ = 0;
  clear_has_can_rx_sim_lat_pos();
}
double Esr_sim1_5c0::can_rx_sim_lat_pos() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_pos)
  return can_rx_sim_lat_pos_;
}
void Esr_sim1_5c0::set_can_rx_sim_lat_pos(double value) {
  set_has_can_rx_sim_lat_pos();
  can_rx_sim_lat_pos_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_pos)
}

// optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
bool Esr_sim1_5c0::has_can_rx_sim_function() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_function() {
  _has_bits_[0] |= 0x00000040u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_function() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esr_sim1_5c0::clear_can_rx_sim_function() {
  can_rx_sim_function_ = 0;
  clear_has_can_rx_sim_function();
}
::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::can_rx_sim_function() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_function)
  return static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType >(can_rx_sim_function_);
}
void Esr_sim1_5c0::set_can_rx_sim_function(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType value) {
  assert(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(value));
  set_has_can_rx_sim_function();
  can_rx_sim_function_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_function)
}

// optional double can_rx_sim_angle = 9;
bool Esr_sim1_5c0::has_can_rx_sim_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esr_sim1_5c0::set_has_can_rx_sim_angle() {
  _has_bits_[0] |= 0x00000100u;
}
void Esr_sim1_5c0::clear_has_can_rx_sim_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esr_sim1_5c0::clear_can_rx_sim_angle() {
  can_rx_sim_angle_ = 0;
  clear_has_can_rx_sim_angle();
}
double Esr_sim1_5c0::can_rx_sim_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_angle)
  return can_rx_sim_angle_;
}
void Esr_sim1_5c0::set_can_rx_sim_angle(double value) {
  set_has_can_rx_sim_angle();
  can_rx_sim_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esr_status1_4e0::kCanTxDspTimestampFieldNumber;
const int Esr_status1_4e0::kCanTxCommErrorFieldNumber;
const int Esr_status1_4e0::kCanTxYawRateCalcFieldNumber;
const int Esr_status1_4e0::kCanTxVehicleSpeedCalcFieldNumber;
const int Esr_status1_4e0::kCanTxScanIndexFieldNumber;
const int Esr_status1_4e0::kCanTxRollingCount1FieldNumber;
const int Esr_status1_4e0::kCanTxRadiusCurvatureCalcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esr_status1_4e0::Esr_status1_4e0()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status1_4e0)
}
Esr_status1_4e0::Esr_status1_4e0(const Esr_status1_4e0& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_dsp_timestamp_, &from.can_tx_dsp_timestamp_,
    reinterpret_cast<char*>(&can_tx_radius_curvature_calc_) -
    reinterpret_cast<char*>(&can_tx_dsp_timestamp_) + sizeof(can_tx_radius_curvature_calc_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status1_4e0)
}

void Esr_status1_4e0::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_tx_dsp_timestamp_, 0, reinterpret_cast<char*>(&can_tx_radius_curvature_calc_) -
    reinterpret_cast<char*>(&can_tx_dsp_timestamp_) + sizeof(can_tx_radius_curvature_calc_));
}

Esr_status1_4e0::~Esr_status1_4e0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status1_4e0)
  SharedDtor();
}

void Esr_status1_4e0::SharedDtor() {
}

void Esr_status1_4e0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esr_status1_4e0::descriptor() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drivers_2fdelphi_5fesr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esr_status1_4e0& Esr_status1_4e0::default_instance() {
  protobuf_drivers_2fdelphi_5fesr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esr_status1_4e0* Esr_status1_4e0::New(::google::protobuf::Arena* arena) const {
  Esr_status1_4e0* n = new Esr_status1_4e0;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esr_status1_4e0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status1_4e0)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&can_tx_dsp_timestamp_, 0, reinterpret_cast<char*>(&can_tx_radius_curvature_calc_) -
      reinterpret_cast<char*>(&can_tx_dsp_timestamp_) + sizeof(can_tx_radius_curvature_calc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esr_status1_4e0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Esr_status1_4e0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double can_tx_dsp_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_can_tx_dsp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_dsp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_tx_comm_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_tx_comm_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_tx_comm_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_yaw_rate_calc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_can_tx_yaw_rate_calc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_yaw_rate_calc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double can_tx_vehicle_speed_calc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_can_tx_vehicle_speed_calc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &can_tx_vehicle_speed_calc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 can_tx_scan_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_can_tx_scan_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_tx_scan_index_)));
